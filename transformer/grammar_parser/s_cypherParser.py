# Generated from transformer/grammar_parser/s_cypher.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,138,2180,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,1,0,1,0,1,0,3,0,304,8,0,1,1,4,1,307,8,1,
        11,1,12,1,308,1,1,1,1,1,2,1,2,3,2,315,8,2,1,2,1,2,3,2,319,8,2,1,
        2,1,2,3,2,323,8,2,1,2,1,2,3,2,327,8,2,3,2,329,8,2,1,2,3,2,332,8,
        2,1,2,3,2,335,8,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,343,8,3,1,4,1,4,3,
        4,347,8,4,1,4,1,4,3,4,351,8,4,1,4,3,4,354,8,4,1,5,1,5,3,5,358,8,
        5,1,5,1,5,1,5,5,5,363,8,5,10,5,12,5,366,9,5,1,5,3,5,369,8,5,1,5,
        3,5,372,8,5,1,6,1,6,3,6,376,8,6,1,6,1,6,3,6,380,8,6,1,6,1,6,3,6,
        384,8,6,1,6,5,6,387,8,6,10,6,12,6,390,9,6,1,6,3,6,393,8,6,1,6,3,
        6,396,8,6,1,7,1,7,3,7,400,8,7,1,7,1,7,3,7,404,8,7,1,7,1,7,3,7,408,
        8,7,1,7,5,7,411,8,7,10,7,12,7,414,9,7,1,7,3,7,417,8,7,1,7,3,7,420,
        8,7,1,8,1,8,3,8,424,8,8,1,8,3,8,427,8,8,1,8,3,8,430,8,8,1,8,1,8,
        3,8,434,8,8,1,8,1,8,1,8,1,8,3,8,440,8,8,1,8,1,8,3,8,444,8,8,1,8,
        1,8,1,8,1,8,3,8,450,8,8,1,8,1,8,3,8,454,8,8,1,8,1,8,1,8,1,8,3,8,
        460,8,8,1,8,1,8,1,8,1,8,3,8,466,8,8,1,8,1,8,1,8,1,8,3,8,472,8,8,
        1,8,3,8,475,8,8,1,8,3,8,478,8,8,1,8,1,8,3,8,482,8,8,1,8,1,8,1,8,
        1,8,3,8,488,8,8,1,8,3,8,491,8,8,1,8,3,8,494,8,8,1,8,1,8,3,8,498,
        8,8,1,8,1,8,3,8,502,8,8,1,8,1,8,3,8,506,8,8,1,9,1,9,3,9,510,8,9,
        1,9,1,9,1,10,1,10,3,10,516,8,10,1,10,3,10,519,8,10,1,11,1,11,3,11,
        523,8,11,1,11,1,11,1,12,1,12,3,12,529,8,12,1,12,1,12,3,12,533,8,
        12,1,12,3,12,536,8,12,1,12,3,12,539,8,12,1,13,1,13,3,13,543,8,13,
        1,13,1,13,3,13,547,8,13,1,13,1,13,3,13,551,8,13,1,13,1,13,3,13,555,
        8,13,1,13,5,13,558,8,13,10,13,12,13,561,9,13,1,13,3,13,564,8,13,
        1,13,1,13,3,13,568,8,13,3,13,570,8,13,1,14,1,14,1,14,3,14,575,8,
        14,1,14,1,14,3,14,579,8,14,3,14,581,8,14,1,14,1,14,3,14,585,8,14,
        1,14,1,14,3,14,589,8,14,3,14,591,8,14,3,14,593,8,14,1,15,1,15,1,
        15,1,15,3,15,599,8,15,1,16,1,16,3,16,603,8,16,1,16,1,16,1,17,1,17,
        3,17,609,8,17,1,17,1,17,1,18,1,18,3,18,615,8,18,1,19,1,19,1,19,1,
        19,3,19,621,8,19,1,19,1,19,1,19,3,19,626,8,19,1,20,1,20,1,20,1,20,
        3,20,632,8,20,1,20,3,20,635,8,20,1,20,1,20,1,20,1,20,3,20,641,8,
        20,3,20,643,8,20,1,21,1,21,3,21,647,8,21,1,21,1,21,3,21,651,8,21,
        1,21,1,21,1,21,3,21,656,8,21,1,21,5,21,659,8,21,10,21,12,21,662,
        9,21,3,21,664,8,21,1,21,1,21,1,22,1,22,3,22,670,8,22,1,23,1,23,3,
        23,674,8,23,1,23,1,23,3,23,678,8,23,1,23,5,23,681,8,23,10,23,12,
        23,684,9,23,1,23,3,23,687,8,23,1,23,3,23,690,8,23,1,24,1,24,1,24,
        1,24,1,24,3,24,697,8,24,1,25,1,25,3,25,701,8,25,5,25,703,8,25,10,
        25,12,25,706,9,25,1,25,1,25,3,25,710,8,25,5,25,712,8,25,10,25,12,
        25,715,9,25,1,25,1,25,3,25,719,8,25,1,26,1,26,1,26,3,26,724,8,26,
        1,26,3,26,727,8,26,1,27,1,27,3,27,731,8,27,1,27,1,27,3,27,735,8,
        27,1,27,1,27,1,27,3,27,740,8,27,1,27,3,27,743,8,27,3,27,745,8,27,
        1,27,3,27,748,8,27,1,27,1,27,1,28,1,28,3,28,754,8,28,1,28,3,28,757,
        8,28,1,29,1,29,3,29,761,8,29,1,29,1,29,1,30,1,30,3,30,767,8,30,1,
        30,1,30,1,31,1,31,3,31,773,8,31,1,31,1,31,3,31,777,8,31,1,31,1,31,
        1,31,1,31,3,31,783,8,31,1,31,1,31,3,31,787,8,31,1,31,1,31,1,31,3,
        31,792,8,31,1,32,1,32,3,32,796,8,32,1,32,1,32,3,32,800,8,32,1,32,
        1,32,3,32,804,8,32,1,32,1,32,1,33,1,33,3,33,810,8,33,1,33,1,33,3,
        33,814,8,33,1,33,1,33,1,34,1,34,3,34,820,8,34,1,34,1,34,3,34,824,
        8,34,3,34,826,8,34,1,34,1,34,3,34,830,8,34,3,34,832,8,34,1,34,1,
        34,3,34,836,8,34,3,34,838,8,34,1,34,1,34,3,34,842,8,34,3,34,844,
        8,34,1,34,1,34,1,35,1,35,3,35,850,8,35,1,36,1,36,3,36,854,8,36,1,
        36,1,36,3,36,858,8,36,1,36,1,36,3,36,862,8,36,1,36,1,36,3,36,866,
        8,36,1,36,1,36,3,36,870,8,36,1,36,1,36,3,36,874,8,36,1,36,1,36,3,
        36,878,8,36,1,36,1,36,5,36,882,8,36,10,36,12,36,885,9,36,3,36,887,
        8,36,1,36,3,36,890,8,36,1,36,1,36,1,37,1,37,3,37,896,8,37,1,37,3,
        37,899,8,37,1,38,1,38,3,38,903,8,38,1,38,3,38,906,8,38,1,39,1,39,
        3,39,910,8,39,1,39,1,39,3,39,914,8,39,3,39,916,8,39,1,39,1,39,3,
        39,920,8,39,3,39,922,8,39,1,39,3,39,925,8,39,1,39,1,39,3,39,929,
        8,39,3,39,931,8,39,1,39,1,39,3,39,935,8,39,3,39,937,8,39,1,39,1,
        39,1,40,1,40,3,40,943,8,40,1,40,1,40,3,40,947,8,40,1,40,1,40,5,40,
        951,8,40,10,40,12,40,954,9,40,1,41,1,41,1,41,1,41,1,41,3,41,961,
        8,41,1,42,1,42,3,42,965,8,42,1,42,1,42,3,42,969,8,42,1,42,1,42,5,
        42,973,8,42,10,42,12,42,976,9,42,1,43,1,43,1,44,1,44,1,45,1,45,1,
        46,1,46,1,47,1,47,3,47,988,8,47,1,47,1,47,3,47,992,8,47,1,47,1,47,
        5,47,996,8,47,10,47,12,47,999,9,47,1,48,1,48,3,48,1003,8,48,1,48,
        1,48,3,48,1007,8,48,1,48,1,48,5,48,1011,8,48,10,48,12,48,1014,9,
        48,1,49,1,49,3,49,1018,8,49,1,49,1,49,5,49,1022,8,49,10,49,12,49,
        1025,9,49,1,50,3,50,1028,8,50,1,50,1,50,3,50,1032,8,50,1,50,1,50,
        3,50,1036,8,50,1,50,1,50,1,51,3,51,1041,8,51,1,51,1,51,3,51,1045,
        8,51,1,51,3,51,1048,8,51,1,51,3,51,1051,8,51,1,51,1,51,3,51,1055,
        8,51,1,51,3,51,1058,8,51,1,51,3,51,1061,8,51,1,51,1,51,1,52,1,52,
        1,53,1,53,1,54,1,54,3,54,1071,8,54,1,54,4,54,1074,8,54,11,54,12,
        54,1075,1,54,1,54,3,54,1080,8,54,1,54,1,54,3,54,1084,8,54,1,54,4,
        54,1087,8,54,11,54,12,54,1088,3,54,1091,8,54,1,54,3,54,1094,8,54,
        1,54,1,54,3,54,1098,8,54,1,54,3,54,1101,8,54,1,54,3,54,1104,8,54,
        1,54,1,54,1,55,1,55,1,56,1,56,3,56,1112,8,56,1,56,5,56,1115,8,56,
        10,56,12,56,1118,9,56,1,56,3,56,1121,8,56,1,56,1,56,3,56,1125,8,
        56,3,56,1127,8,56,1,57,1,57,3,57,1131,8,57,1,57,5,57,1134,8,57,10,
        57,12,57,1137,9,57,1,57,1,57,3,57,1141,8,57,1,57,1,57,3,57,1145,
        8,57,3,57,1147,8,57,3,57,1149,8,57,1,57,3,57,1152,8,57,1,57,1,57,
        1,58,3,58,1157,8,58,1,58,1,58,3,58,1161,8,58,1,58,1,58,1,59,1,59,
        3,59,1167,8,59,1,59,5,59,1170,8,59,10,59,12,59,1173,9,59,1,60,1,
        60,3,60,1177,8,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,62,1,62,3,
        62,1188,8,62,1,62,1,62,1,63,1,63,3,63,1194,8,63,1,63,1,63,1,64,1,
        64,3,64,1200,8,64,1,64,1,64,3,64,1204,8,64,1,64,1,64,3,64,1208,8,
        64,1,64,3,64,1211,8,64,1,64,1,64,3,64,1215,8,64,1,64,3,64,1218,8,
        64,1,64,1,64,1,65,1,65,3,65,1224,8,65,1,66,1,66,3,66,1228,8,66,1,
        66,1,66,3,66,1232,8,66,1,66,1,66,3,66,1236,8,66,3,66,1238,8,66,1,
        66,1,66,3,66,1242,8,66,1,66,1,66,3,66,1246,8,66,1,66,1,66,3,66,1250,
        8,66,5,66,1252,8,66,10,66,12,66,1255,9,66,3,66,1257,8,66,1,66,1,
        66,1,67,1,67,1,68,1,68,3,68,1265,8,68,1,68,1,68,3,68,1269,8,68,1,
        68,1,68,3,68,1273,8,68,1,68,1,68,3,68,1277,8,68,5,68,1279,8,68,10,
        68,12,68,1282,9,68,3,68,1284,8,68,1,68,1,68,1,69,1,69,1,70,1,70,
        3,70,1292,8,70,1,70,1,70,1,70,3,70,1297,8,70,1,70,5,70,1300,8,70,
        10,70,12,70,1303,9,70,3,70,1305,8,70,1,70,1,70,1,71,1,71,3,71,1311,
        8,71,1,71,1,71,3,71,1315,8,71,1,71,1,71,3,71,1319,8,71,1,72,1,72,
        1,73,1,73,1,74,3,74,1326,8,74,1,74,1,74,3,74,1330,8,74,1,74,3,74,
        1333,8,74,1,74,3,74,1336,8,74,1,74,1,74,1,75,1,75,1,76,1,76,3,76,
        1344,8,76,1,76,5,76,1347,8,76,10,76,12,76,1350,9,76,1,77,1,77,1,
        77,1,77,3,77,1356,8,77,1,77,1,77,1,77,3,77,1361,8,77,1,77,3,77,1364,
        8,77,1,78,1,78,3,78,1368,8,78,1,79,1,79,3,79,1372,8,79,5,79,1374,
        8,79,10,79,12,79,1377,9,79,1,79,1,79,1,79,3,79,1382,8,79,5,79,1384,
        8,79,10,79,12,79,1387,9,79,1,79,1,79,3,79,1391,8,79,1,79,5,79,1394,
        8,79,10,79,12,79,1397,9,79,1,79,3,79,1400,8,79,1,79,3,79,1403,8,
        79,3,79,1405,8,79,1,80,1,80,1,80,3,80,1410,8,80,1,81,1,81,3,81,1414,
        8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,82,1,82,3,82,1424,8,82,1,82,
        1,82,1,82,5,82,1429,8,82,10,82,12,82,1432,9,82,1,83,1,83,1,83,1,
        83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1444,8,83,1,84,1,84,3,84,1448,
        8,84,1,84,1,84,1,85,1,85,3,85,1454,8,85,1,85,1,85,3,85,1458,8,85,
        1,85,1,85,3,85,1462,8,85,1,85,5,85,1465,8,85,10,85,12,85,1468,9,
        85,1,86,1,86,3,86,1472,8,86,1,86,1,86,3,86,1476,8,86,1,86,1,86,3,
        86,1480,8,86,1,86,1,86,3,86,1484,8,86,1,86,5,86,1487,8,86,10,86,
        12,86,1490,9,86,1,87,1,87,1,87,1,87,3,87,1496,8,87,1,87,1,87,3,87,
        1500,8,87,1,87,5,87,1503,8,87,10,87,12,87,1506,9,87,1,88,1,88,3,
        88,1510,8,88,1,88,1,88,3,88,1514,8,88,1,88,5,88,1517,8,88,10,88,
        12,88,1520,9,88,1,88,3,88,1523,8,88,1,88,3,88,1526,8,88,1,89,1,89,
        1,89,1,89,1,89,3,89,1533,8,89,1,89,1,89,1,90,1,90,1,90,3,90,1540,
        8,90,1,90,3,90,1543,8,90,1,91,1,91,1,91,1,92,3,92,1549,8,92,1,92,
        3,92,1552,8,92,1,92,1,92,1,92,1,92,3,92,1558,8,92,1,92,1,92,3,92,
        1562,8,92,1,92,1,92,3,92,1566,8,92,1,93,1,93,3,93,1570,8,93,1,93,
        1,93,3,93,1574,8,93,1,93,5,93,1577,8,93,10,93,12,93,1580,9,93,1,
        93,1,93,3,93,1584,8,93,1,93,1,93,3,93,1588,8,93,1,93,5,93,1591,8,
        93,10,93,12,93,1594,9,93,3,93,1596,8,93,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,3,94,1605,8,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,
        1614,8,95,1,95,5,95,1617,8,95,10,95,12,95,1620,9,95,1,96,1,96,1,
        96,1,96,1,97,1,97,1,97,1,97,1,98,1,98,3,98,1632,8,98,1,98,3,98,1635,
        8,98,1,99,1,99,1,99,1,99,1,100,1,100,3,100,1643,8,100,1,100,1,100,
        3,100,1647,8,100,1,100,5,100,1650,8,100,10,100,12,100,1653,9,100,
        1,101,1,101,1,102,1,102,3,102,1659,8,102,1,102,5,102,1662,8,102,
        10,102,12,102,1665,9,102,1,102,1,102,1,102,1,102,3,102,1671,8,102,
        1,103,1,103,3,103,1675,8,103,1,103,4,103,1678,8,103,11,103,12,103,
        1679,1,104,1,104,3,104,1684,8,104,1,104,1,104,1,105,1,105,3,105,
        1690,8,105,1,105,1,105,3,105,1694,8,105,1,105,3,105,1697,8,105,1,
        105,3,105,1700,8,105,1,105,1,105,3,105,1704,8,105,1,105,1,105,1,
        105,1,105,3,105,1710,8,105,1,105,1,105,3,105,1714,8,105,1,105,3,
        105,1717,8,105,1,105,3,105,1720,8,105,1,105,1,105,1,105,1,105,3,
        105,1726,8,105,1,105,3,105,1729,8,105,1,105,3,105,1732,8,105,1,105,
        1,105,3,105,1736,8,105,1,105,1,105,1,105,1,105,3,105,1742,8,105,
        1,105,3,105,1745,8,105,1,105,3,105,1748,8,105,1,105,1,105,3,105,
        1752,8,105,1,106,1,106,3,106,1756,8,106,1,107,1,107,3,107,1760,8,
        107,1,107,1,107,3,107,1764,8,107,1,107,1,107,3,107,1768,8,107,1,
        107,3,107,1771,8,107,1,107,5,107,1774,8,107,10,107,12,107,1777,9,
        107,1,108,1,108,3,108,1781,8,108,1,108,5,108,1784,8,108,10,108,12,
        108,1787,9,108,1,109,1,109,3,109,1791,8,109,1,109,1,109,1,110,1,
        110,3,110,1797,8,110,1,110,1,110,3,110,1801,8,110,3,110,1803,8,110,
        1,110,1,110,3,110,1807,8,110,1,110,1,110,3,110,1811,8,110,3,110,
        1813,8,110,3,110,1815,8,110,1,111,1,111,1,112,1,112,1,113,1,113,
        3,113,1823,8,113,1,113,4,113,1826,8,113,11,113,12,113,1827,1,114,
        1,114,1,115,1,115,1,115,1,115,1,115,5,115,1837,8,115,10,115,12,115,
        1840,9,115,1,116,1,116,1,116,1,116,1,116,5,116,1847,8,116,10,116,
        12,116,1850,9,116,1,117,1,117,1,117,1,117,1,117,5,117,1857,8,117,
        10,117,12,117,1860,9,117,1,118,1,118,3,118,1864,8,118,5,118,1866,
        8,118,10,118,12,118,1869,9,118,1,118,1,118,1,119,1,119,3,119,1875,
        8,119,1,119,1,119,1,119,3,119,1880,8,119,1,119,1,119,1,119,3,119,
        1885,8,119,1,119,1,119,1,119,3,119,1890,8,119,1,119,1,119,1,119,
        3,119,1895,8,119,1,119,1,119,1,119,3,119,1900,8,119,1,119,3,119,
        1903,8,119,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,
        1,120,3,120,1915,8,120,1,120,3,120,1918,8,120,1,120,1,120,1,121,
        1,121,1,121,3,121,1925,8,121,1,121,1,121,1,122,1,122,1,122,1,122,
        1,122,1,122,1,122,1,122,1,122,1,122,3,122,1939,8,122,1,123,1,123,
        1,123,3,123,1944,8,123,1,123,3,123,1947,8,123,1,124,1,124,3,124,
        1951,8,124,1,124,1,124,1,125,1,125,1,125,1,125,1,125,3,125,1960,
        8,125,1,125,1,125,3,125,1964,8,125,1,125,1,125,3,125,1968,8,125,
        1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,3,125,1979,
        8,125,1,126,1,126,3,126,1983,8,126,1,126,1,126,3,126,1987,8,126,
        1,126,1,126,3,126,1991,8,126,1,126,1,126,1,127,1,127,3,127,1997,
        8,127,1,127,1,127,3,127,2001,8,127,1,127,1,127,3,127,2005,8,127,
        1,127,3,127,2008,8,127,1,127,3,127,2011,8,127,1,127,1,127,1,128,
        1,128,3,128,2017,8,128,1,128,1,128,3,128,2021,8,128,1,128,1,128,
        3,128,2025,8,128,3,128,2027,8,128,1,128,1,128,3,128,2031,8,128,1,
        128,1,128,3,128,2035,8,128,3,128,2037,8,128,1,128,1,128,3,128,2041,
        8,128,1,128,1,128,3,128,2045,8,128,1,128,1,128,1,129,1,129,3,129,
        2051,8,129,1,129,1,129,3,129,2055,8,129,1,129,1,129,3,129,2059,8,
        129,1,129,1,129,1,129,1,129,3,129,2065,8,129,1,129,1,129,3,129,2069,
        8,129,1,129,1,129,3,129,2073,8,129,1,129,1,129,1,129,1,129,3,129,
        2079,8,129,1,129,1,129,3,129,2083,8,129,1,129,1,129,3,129,2087,8,
        129,1,129,1,129,1,129,1,129,3,129,2093,8,129,1,129,1,129,3,129,2097,
        8,129,1,129,1,129,3,129,2101,8,129,1,129,1,129,3,129,2105,8,129,
        1,130,1,130,1,131,1,131,3,131,2111,8,131,1,131,1,131,3,131,2115,
        8,131,1,131,1,131,1,132,1,132,1,132,1,132,1,132,1,132,1,133,1,133,
        1,133,1,134,1,134,1,135,1,135,1,136,1,136,1,136,1,137,1,137,1,137,
        5,137,2138,8,137,10,137,12,137,2141,9,137,1,138,1,138,1,139,1,139,
        1,139,1,139,1,139,1,139,3,139,2151,8,139,1,140,1,140,1,141,1,141,
        3,141,2157,8,141,1,142,1,142,1,143,1,143,1,144,1,144,1,145,1,145,
        1,145,3,145,2168,8,145,1,146,1,146,3,146,2172,8,146,1,147,1,147,
        1,148,1,148,1,149,1,149,1,149,0,0,150,0,2,4,6,8,10,12,14,16,18,20,
        22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
        204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
        236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,
        268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,
        0,13,2,0,5,5,13,14,1,0,16,17,2,0,2,2,18,22,1,0,55,56,8,0,49,49,52,
        52,94,94,98,98,100,103,109,109,130,132,135,135,5,0,49,69,72,93,95,
        99,103,105,120,129,1,0,79,82,1,0,104,105,1,0,106,108,1,0,116,117,
        2,0,19,19,27,30,2,0,21,21,31,34,2,0,17,17,35,45,2472,0,303,1,0,0,
        0,2,306,1,0,0,0,4,314,1,0,0,0,6,342,1,0,0,0,8,344,1,0,0,0,10,355,
        1,0,0,0,12,373,1,0,0,0,14,397,1,0,0,0,16,505,1,0,0,0,18,507,1,0,
        0,0,20,513,1,0,0,0,22,520,1,0,0,0,24,538,1,0,0,0,26,542,1,0,0,0,
        28,592,1,0,0,0,30,598,1,0,0,0,32,600,1,0,0,0,34,606,1,0,0,0,36,614,
        1,0,0,0,38,616,1,0,0,0,40,627,1,0,0,0,42,644,1,0,0,0,44,667,1,0,
        0,0,46,671,1,0,0,0,48,691,1,0,0,0,50,704,1,0,0,0,52,720,1,0,0,0,
        54,728,1,0,0,0,56,751,1,0,0,0,58,758,1,0,0,0,60,764,1,0,0,0,62,791,
        1,0,0,0,64,793,1,0,0,0,66,807,1,0,0,0,68,817,1,0,0,0,70,849,1,0,
        0,0,72,851,1,0,0,0,74,893,1,0,0,0,76,900,1,0,0,0,78,907,1,0,0,0,
        80,940,1,0,0,0,82,955,1,0,0,0,84,962,1,0,0,0,86,977,1,0,0,0,88,979,
        1,0,0,0,90,981,1,0,0,0,92,983,1,0,0,0,94,985,1,0,0,0,96,1000,1,0,
        0,0,98,1017,1,0,0,0,100,1027,1,0,0,0,102,1040,1,0,0,0,104,1064,1,
        0,0,0,106,1066,1,0,0,0,108,1090,1,0,0,0,110,1107,1,0,0,0,112,1109,
        1,0,0,0,114,1128,1,0,0,0,116,1156,1,0,0,0,118,1164,1,0,0,0,120,1174,
        1,0,0,0,122,1180,1,0,0,0,124,1185,1,0,0,0,126,1191,1,0,0,0,128,1197,
        1,0,0,0,130,1223,1,0,0,0,132,1225,1,0,0,0,134,1260,1,0,0,0,136,1262,
        1,0,0,0,138,1287,1,0,0,0,140,1289,1,0,0,0,142,1308,1,0,0,0,144,1320,
        1,0,0,0,146,1322,1,0,0,0,148,1325,1,0,0,0,150,1339,1,0,0,0,152,1341,
        1,0,0,0,154,1363,1,0,0,0,156,1367,1,0,0,0,158,1404,1,0,0,0,160,1409,
        1,0,0,0,162,1411,1,0,0,0,164,1421,1,0,0,0,166,1443,1,0,0,0,168,1445,
        1,0,0,0,170,1451,1,0,0,0,172,1471,1,0,0,0,174,1491,1,0,0,0,176,1507,
        1,0,0,0,178,1532,1,0,0,0,180,1536,1,0,0,0,182,1544,1,0,0,0,184,1551,
        1,0,0,0,186,1595,1,0,0,0,188,1604,1,0,0,0,190,1606,1,0,0,0,192,1621,
        1,0,0,0,194,1625,1,0,0,0,196,1629,1,0,0,0,198,1636,1,0,0,0,200,1640,
        1,0,0,0,202,1654,1,0,0,0,204,1670,1,0,0,0,206,1672,1,0,0,0,208,1681,
        1,0,0,0,210,1751,1,0,0,0,212,1755,1,0,0,0,214,1757,1,0,0,0,216,1778,
        1,0,0,0,218,1788,1,0,0,0,220,1794,1,0,0,0,222,1816,1,0,0,0,224,1818,
        1,0,0,0,226,1820,1,0,0,0,228,1829,1,0,0,0,230,1831,1,0,0,0,232,1841,
        1,0,0,0,234,1851,1,0,0,0,236,1867,1,0,0,0,238,1902,1,0,0,0,240,1914,
        1,0,0,0,242,1921,1,0,0,0,244,1938,1,0,0,0,246,1946,1,0,0,0,248,1948,
        1,0,0,0,250,1978,1,0,0,0,252,1980,1,0,0,0,254,1994,1,0,0,0,256,2014,
        1,0,0,0,258,2104,1,0,0,0,260,2106,1,0,0,0,262,2108,1,0,0,0,264,2118,
        1,0,0,0,266,2124,1,0,0,0,268,2127,1,0,0,0,270,2129,1,0,0,0,272,2131,
        1,0,0,0,274,2139,1,0,0,0,276,2142,1,0,0,0,278,2150,1,0,0,0,280,2152,
        1,0,0,0,282,2156,1,0,0,0,284,2158,1,0,0,0,286,2160,1,0,0,0,288,2162,
        1,0,0,0,290,2164,1,0,0,0,292,2171,1,0,0,0,294,2173,1,0,0,0,296,2175,
        1,0,0,0,298,2177,1,0,0,0,300,304,3,152,76,0,301,304,3,40,20,0,302,
        304,3,36,18,0,303,300,1,0,0,0,303,301,1,0,0,0,303,302,1,0,0,0,304,
        1,1,0,0,0,305,307,3,50,25,0,306,305,1,0,0,0,307,308,1,0,0,0,308,
        306,1,0,0,0,308,309,1,0,0,0,309,310,1,0,0,0,310,311,3,158,79,0,311,
        3,1,0,0,0,312,313,5,59,0,0,313,315,5,136,0,0,314,312,1,0,0,0,314,
        315,1,0,0,0,315,316,1,0,0,0,316,318,5,60,0,0,317,319,5,136,0,0,318,
        317,1,0,0,0,318,319,1,0,0,0,319,320,1,0,0,0,320,328,3,200,100,0,
        321,323,5,136,0,0,322,321,1,0,0,0,322,323,1,0,0,0,323,326,1,0,0,
        0,324,327,3,32,16,0,325,327,3,34,17,0,326,324,1,0,0,0,326,325,1,
        0,0,0,327,329,1,0,0,0,328,322,1,0,0,0,328,329,1,0,0,0,329,334,1,
        0,0,0,330,332,5,136,0,0,331,330,1,0,0,0,331,332,1,0,0,0,332,333,
        1,0,0,0,333,335,3,198,99,0,334,331,1,0,0,0,334,335,1,0,0,0,335,5,
        1,0,0,0,336,343,3,8,4,0,337,343,3,10,5,0,338,343,3,12,6,0,339,343,
        3,174,87,0,340,343,3,14,7,0,341,343,3,26,13,0,342,336,1,0,0,0,342,
        337,1,0,0,0,342,338,1,0,0,0,342,339,1,0,0,0,342,340,1,0,0,0,342,
        341,1,0,0,0,343,7,1,0,0,0,344,346,5,65,0,0,345,347,5,136,0,0,346,
        345,1,0,0,0,346,347,1,0,0,0,347,348,1,0,0,0,348,353,3,200,100,0,
        349,351,5,136,0,0,350,349,1,0,0,0,350,351,1,0,0,0,351,352,1,0,0,
        0,352,354,3,32,16,0,353,350,1,0,0,0,353,354,1,0,0,0,354,9,1,0,0,
        0,355,357,5,63,0,0,356,358,5,136,0,0,357,356,1,0,0,0,357,358,1,0,
        0,0,358,359,1,0,0,0,359,364,3,62,31,0,360,361,5,136,0,0,361,363,
        3,166,83,0,362,360,1,0,0,0,363,366,1,0,0,0,364,362,1,0,0,0,364,365,
        1,0,0,0,365,371,1,0,0,0,366,364,1,0,0,0,367,369,5,136,0,0,368,367,
        1,0,0,0,368,369,1,0,0,0,369,370,1,0,0,0,370,372,3,32,16,0,371,368,
        1,0,0,0,371,372,1,0,0,0,372,11,1,0,0,0,373,375,5,66,0,0,374,376,
        5,136,0,0,375,374,1,0,0,0,375,376,1,0,0,0,376,377,1,0,0,0,377,388,
        3,16,8,0,378,380,5,136,0,0,379,378,1,0,0,0,379,380,1,0,0,0,380,381,
        1,0,0,0,381,383,5,1,0,0,382,384,5,136,0,0,383,382,1,0,0,0,383,384,
        1,0,0,0,384,385,1,0,0,0,385,387,3,16,8,0,386,379,1,0,0,0,387,390,
        1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,395,1,0,0,0,390,388,
        1,0,0,0,391,393,5,136,0,0,392,391,1,0,0,0,392,393,1,0,0,0,393,394,
        1,0,0,0,394,396,3,32,16,0,395,392,1,0,0,0,395,396,1,0,0,0,396,13,
        1,0,0,0,397,399,5,54,0,0,398,400,5,136,0,0,399,398,1,0,0,0,399,400,
        1,0,0,0,400,401,1,0,0,0,401,412,3,24,12,0,402,404,5,136,0,0,403,
        402,1,0,0,0,403,404,1,0,0,0,404,405,1,0,0,0,405,407,5,1,0,0,406,
        408,5,136,0,0,407,406,1,0,0,0,407,408,1,0,0,0,408,409,1,0,0,0,409,
        411,3,24,12,0,410,403,1,0,0,0,411,414,1,0,0,0,412,410,1,0,0,0,412,
        413,1,0,0,0,413,419,1,0,0,0,414,412,1,0,0,0,415,417,5,136,0,0,416,
        415,1,0,0,0,416,417,1,0,0,0,417,418,1,0,0,0,418,420,3,32,16,0,419,
        416,1,0,0,0,419,420,1,0,0,0,420,15,1,0,0,0,421,426,3,226,113,0,422,
        424,5,136,0,0,423,422,1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,
        427,3,124,62,0,426,423,1,0,0,0,426,427,1,0,0,0,427,429,1,0,0,0,428,
        430,5,136,0,0,429,428,1,0,0,0,429,430,1,0,0,0,430,431,1,0,0,0,431,
        433,5,2,0,0,432,434,5,136,0,0,433,432,1,0,0,0,433,434,1,0,0,0,434,
        435,1,0,0,0,435,436,3,228,114,0,436,506,1,0,0,0,437,439,3,276,138,
        0,438,440,5,136,0,0,439,438,1,0,0,0,439,440,1,0,0,0,440,441,1,0,
        0,0,441,443,5,2,0,0,442,444,5,136,0,0,443,442,1,0,0,0,443,444,1,
        0,0,0,444,445,1,0,0,0,445,446,3,228,114,0,446,506,1,0,0,0,447,449,
        3,276,138,0,448,450,5,136,0,0,449,448,1,0,0,0,449,450,1,0,0,0,450,
        451,1,0,0,0,451,453,5,3,0,0,452,454,5,136,0,0,453,452,1,0,0,0,453,
        454,1,0,0,0,454,455,1,0,0,0,455,456,3,228,114,0,456,506,1,0,0,0,
        457,459,3,276,138,0,458,460,5,136,0,0,459,458,1,0,0,0,459,460,1,
        0,0,0,460,461,1,0,0,0,461,462,3,216,108,0,462,506,1,0,0,0,463,465,
        3,276,138,0,464,466,5,136,0,0,465,464,1,0,0,0,465,466,1,0,0,0,466,
        467,1,0,0,0,467,468,3,124,62,0,468,506,1,0,0,0,469,474,3,276,138,
        0,470,472,5,136,0,0,471,470,1,0,0,0,471,472,1,0,0,0,472,473,1,0,
        0,0,473,475,3,124,62,0,474,471,1,0,0,0,474,475,1,0,0,0,475,477,1,
        0,0,0,476,478,5,136,0,0,477,476,1,0,0,0,477,478,1,0,0,0,478,479,
        1,0,0,0,479,481,5,4,0,0,480,482,5,136,0,0,481,480,1,0,0,0,481,482,
        1,0,0,0,482,483,1,0,0,0,483,484,3,18,9,0,484,506,1,0,0,0,485,490,
        3,276,138,0,486,488,5,136,0,0,487,486,1,0,0,0,487,488,1,0,0,0,488,
        489,1,0,0,0,489,491,3,124,62,0,490,487,1,0,0,0,490,491,1,0,0,0,491,
        493,1,0,0,0,492,494,5,136,0,0,493,492,1,0,0,0,493,494,1,0,0,0,494,
        495,1,0,0,0,495,497,5,4,0,0,496,498,5,136,0,0,497,496,1,0,0,0,497,
        498,1,0,0,0,498,499,1,0,0,0,499,501,3,20,10,0,500,502,5,136,0,0,
        501,500,1,0,0,0,501,502,1,0,0,0,502,503,1,0,0,0,503,504,3,22,11,
        0,504,506,1,0,0,0,505,421,1,0,0,0,505,437,1,0,0,0,505,447,1,0,0,
        0,505,457,1,0,0,0,505,463,1,0,0,0,505,469,1,0,0,0,505,485,1,0,0,
        0,506,17,1,0,0,0,507,509,3,288,144,0,508,510,5,136,0,0,509,508,1,
        0,0,0,509,510,1,0,0,0,510,511,1,0,0,0,511,512,3,124,62,0,512,19,
        1,0,0,0,513,518,3,288,144,0,514,516,5,136,0,0,515,514,1,0,0,0,515,
        516,1,0,0,0,516,517,1,0,0,0,517,519,3,124,62,0,518,515,1,0,0,0,518,
        519,1,0,0,0,519,21,1,0,0,0,520,522,5,48,0,0,521,523,5,136,0,0,522,
        521,1,0,0,0,522,523,1,0,0,0,523,524,1,0,0,0,524,525,3,124,62,0,525,
        23,1,0,0,0,526,528,3,228,114,0,527,529,5,136,0,0,528,527,1,0,0,0,
        528,529,1,0,0,0,529,530,1,0,0,0,530,535,3,116,58,0,531,533,5,136,
        0,0,532,531,1,0,0,0,532,533,1,0,0,0,533,534,1,0,0,0,534,536,5,48,
        0,0,535,532,1,0,0,0,535,536,1,0,0,0,536,539,1,0,0,0,537,539,3,228,
        114,0,538,526,1,0,0,0,538,537,1,0,0,0,539,25,1,0,0,0,540,541,5,67,
        0,0,541,543,5,136,0,0,542,540,1,0,0,0,542,543,1,0,0,0,543,544,1,
        0,0,0,544,546,5,68,0,0,545,547,5,136,0,0,546,545,1,0,0,0,546,547,
        1,0,0,0,547,548,1,0,0,0,548,559,3,28,14,0,549,551,5,136,0,0,550,
        549,1,0,0,0,550,551,1,0,0,0,551,552,1,0,0,0,552,554,5,1,0,0,553,
        555,5,136,0,0,554,553,1,0,0,0,554,555,1,0,0,0,555,556,1,0,0,0,556,
        558,3,28,14,0,557,550,1,0,0,0,558,561,1,0,0,0,559,557,1,0,0,0,559,
        560,1,0,0,0,560,569,1,0,0,0,561,559,1,0,0,0,562,564,5,136,0,0,563,
        562,1,0,0,0,563,564,1,0,0,0,564,567,1,0,0,0,565,568,3,32,16,0,566,
        568,3,34,17,0,567,565,1,0,0,0,567,566,1,0,0,0,568,570,1,0,0,0,569,
        563,1,0,0,0,569,570,1,0,0,0,570,27,1,0,0,0,571,572,3,228,114,0,572,
        580,3,116,58,0,573,575,5,136,0,0,574,573,1,0,0,0,574,575,1,0,0,0,
        575,578,1,0,0,0,576,579,5,48,0,0,577,579,3,124,62,0,578,576,1,0,
        0,0,578,577,1,0,0,0,579,581,1,0,0,0,580,574,1,0,0,0,580,581,1,0,
        0,0,581,593,1,0,0,0,582,590,3,228,114,0,583,585,5,136,0,0,584,583,
        1,0,0,0,584,585,1,0,0,0,585,588,1,0,0,0,586,589,5,48,0,0,587,589,
        3,124,62,0,588,586,1,0,0,0,588,587,1,0,0,0,589,591,1,0,0,0,590,584,
        1,0,0,0,590,591,1,0,0,0,591,593,1,0,0,0,592,571,1,0,0,0,592,582,
        1,0,0,0,593,29,1,0,0,0,594,595,3,276,138,0,595,596,3,216,108,0,596,
        599,1,0,0,0,597,599,3,226,113,0,598,594,1,0,0,0,598,597,1,0,0,0,
        599,31,1,0,0,0,600,602,5,50,0,0,601,603,5,136,0,0,602,601,1,0,0,
        0,602,603,1,0,0,0,603,604,1,0,0,0,604,605,3,228,114,0,605,33,1,0,
        0,0,606,608,5,52,0,0,607,609,5,136,0,0,608,607,1,0,0,0,608,609,1,
        0,0,0,609,610,1,0,0,0,610,611,3,228,114,0,611,35,1,0,0,0,612,615,
        3,58,29,0,613,615,3,60,30,0,614,612,1,0,0,0,614,613,1,0,0,0,615,
        37,1,0,0,0,616,617,5,70,0,0,617,618,5,136,0,0,618,625,3,42,21,0,
        619,621,5,136,0,0,620,619,1,0,0,0,620,621,1,0,0,0,621,622,1,0,0,
        0,622,623,5,71,0,0,623,624,5,136,0,0,624,626,3,46,23,0,625,620,1,
        0,0,0,625,626,1,0,0,0,626,39,1,0,0,0,627,628,5,70,0,0,628,631,5,
        136,0,0,629,632,3,42,21,0,630,632,3,268,134,0,631,629,1,0,0,0,631,
        630,1,0,0,0,632,642,1,0,0,0,633,635,5,136,0,0,634,633,1,0,0,0,634,
        635,1,0,0,0,635,636,1,0,0,0,636,637,5,71,0,0,637,640,5,136,0,0,638,
        641,5,5,0,0,639,641,3,46,23,0,640,638,1,0,0,0,640,639,1,0,0,0,641,
        643,1,0,0,0,642,634,1,0,0,0,642,643,1,0,0,0,643,41,1,0,0,0,644,646,
        3,272,136,0,645,647,5,136,0,0,646,645,1,0,0,0,646,647,1,0,0,0,647,
        648,1,0,0,0,648,650,5,6,0,0,649,651,5,136,0,0,650,649,1,0,0,0,650,
        651,1,0,0,0,651,663,1,0,0,0,652,660,3,44,22,0,653,655,5,1,0,0,654,
        656,5,136,0,0,655,654,1,0,0,0,655,656,1,0,0,0,656,657,1,0,0,0,657,
        659,3,44,22,0,658,653,1,0,0,0,659,662,1,0,0,0,660,658,1,0,0,0,660,
        661,1,0,0,0,661,664,1,0,0,0,662,660,1,0,0,0,663,652,1,0,0,0,663,
        664,1,0,0,0,664,665,1,0,0,0,665,666,5,7,0,0,666,43,1,0,0,0,667,669,
        3,228,114,0,668,670,5,136,0,0,669,668,1,0,0,0,669,670,1,0,0,0,670,
        45,1,0,0,0,671,682,3,48,24,0,672,674,5,136,0,0,673,672,1,0,0,0,673,
        674,1,0,0,0,674,675,1,0,0,0,675,677,5,1,0,0,676,678,5,136,0,0,677,
        676,1,0,0,0,677,678,1,0,0,0,678,679,1,0,0,0,679,681,3,48,24,0,680,
        673,1,0,0,0,681,684,1,0,0,0,682,680,1,0,0,0,682,683,1,0,0,0,683,
        689,1,0,0,0,684,682,1,0,0,0,685,687,5,136,0,0,686,685,1,0,0,0,686,
        687,1,0,0,0,687,688,1,0,0,0,688,690,3,198,99,0,689,686,1,0,0,0,689,
        690,1,0,0,0,690,47,1,0,0,0,691,696,3,270,135,0,692,693,5,136,0,0,
        693,694,5,62,0,0,694,695,5,136,0,0,695,697,3,276,138,0,696,692,1,
        0,0,0,696,697,1,0,0,0,697,49,1,0,0,0,698,700,3,160,80,0,699,701,
        5,136,0,0,700,699,1,0,0,0,700,701,1,0,0,0,701,703,1,0,0,0,702,698,
        1,0,0,0,703,706,1,0,0,0,704,702,1,0,0,0,704,705,1,0,0,0,705,713,
        1,0,0,0,706,704,1,0,0,0,707,709,3,6,3,0,708,710,5,136,0,0,709,708,
        1,0,0,0,709,710,1,0,0,0,710,712,1,0,0,0,711,707,1,0,0,0,712,715,
        1,0,0,0,713,711,1,0,0,0,713,714,1,0,0,0,714,716,1,0,0,0,715,713,
        1,0,0,0,716,718,3,52,26,0,717,719,5,136,0,0,718,717,1,0,0,0,718,
        719,1,0,0,0,719,51,1,0,0,0,720,721,5,72,0,0,721,726,3,184,92,0,722,
        724,5,136,0,0,723,722,1,0,0,0,723,724,1,0,0,0,724,725,1,0,0,0,725,
        727,3,198,99,0,726,723,1,0,0,0,726,727,1,0,0,0,727,53,1,0,0,0,728,
        730,5,103,0,0,729,731,5,136,0,0,730,729,1,0,0,0,730,731,1,0,0,0,
        731,732,1,0,0,0,732,734,5,8,0,0,733,735,5,136,0,0,734,733,1,0,0,
        0,734,735,1,0,0,0,735,744,1,0,0,0,736,745,3,152,76,0,737,742,3,200,
        100,0,738,740,5,136,0,0,739,738,1,0,0,0,739,740,1,0,0,0,740,741,
        1,0,0,0,741,743,3,198,99,0,742,739,1,0,0,0,742,743,1,0,0,0,743,745,
        1,0,0,0,744,736,1,0,0,0,744,737,1,0,0,0,745,747,1,0,0,0,746,748,
        5,136,0,0,747,746,1,0,0,0,747,748,1,0,0,0,748,749,1,0,0,0,749,750,
        5,9,0,0,750,55,1,0,0,0,751,756,3,264,132,0,752,754,5,136,0,0,753,
        752,1,0,0,0,753,754,1,0,0,0,754,755,1,0,0,0,755,757,3,198,99,0,756,
        753,1,0,0,0,756,757,1,0,0,0,757,57,1,0,0,0,758,760,5,51,0,0,759,
        761,5,136,0,0,760,759,1,0,0,0,760,761,1,0,0,0,761,762,1,0,0,0,762,
        763,3,228,114,0,763,59,1,0,0,0,764,766,5,53,0,0,765,767,5,136,0,
        0,766,765,1,0,0,0,766,767,1,0,0,0,767,768,1,0,0,0,768,769,3,228,
        114,0,769,61,1,0,0,0,770,772,3,276,138,0,771,773,5,136,0,0,772,771,
        1,0,0,0,772,773,1,0,0,0,773,774,1,0,0,0,774,776,5,2,0,0,775,777,
        5,136,0,0,776,775,1,0,0,0,776,777,1,0,0,0,777,778,1,0,0,0,778,779,
        3,64,32,0,779,792,1,0,0,0,780,782,3,276,138,0,781,783,5,136,0,0,
        782,781,1,0,0,0,782,783,1,0,0,0,783,784,1,0,0,0,784,786,5,2,0,0,
        785,787,5,136,0,0,786,785,1,0,0,0,786,787,1,0,0,0,787,788,1,0,0,
        0,788,789,3,202,101,0,789,792,1,0,0,0,790,792,3,202,101,0,791,770,
        1,0,0,0,791,780,1,0,0,0,791,790,1,0,0,0,792,63,1,0,0,0,793,795,3,
        266,133,0,794,796,5,136,0,0,795,794,1,0,0,0,795,796,1,0,0,0,796,
        797,1,0,0,0,797,799,5,6,0,0,798,800,5,136,0,0,799,798,1,0,0,0,799,
        800,1,0,0,0,800,801,1,0,0,0,801,803,3,66,33,0,802,804,5,136,0,0,
        803,802,1,0,0,0,803,804,1,0,0,0,804,805,1,0,0,0,805,806,5,7,0,0,
        806,65,1,0,0,0,807,809,3,68,34,0,808,810,5,136,0,0,809,808,1,0,0,
        0,809,810,1,0,0,0,810,811,1,0,0,0,811,813,3,210,105,0,812,814,5,
        136,0,0,813,812,1,0,0,0,813,814,1,0,0,0,814,815,1,0,0,0,815,816,
        3,68,34,0,816,67,1,0,0,0,817,819,5,6,0,0,818,820,5,136,0,0,819,818,
        1,0,0,0,819,820,1,0,0,0,820,825,1,0,0,0,821,823,3,276,138,0,822,
        824,5,136,0,0,823,822,1,0,0,0,823,824,1,0,0,0,824,826,1,0,0,0,825,
        821,1,0,0,0,825,826,1,0,0,0,826,831,1,0,0,0,827,829,3,216,108,0,
        828,830,5,136,0,0,829,828,1,0,0,0,829,830,1,0,0,0,830,832,1,0,0,
        0,831,827,1,0,0,0,831,832,1,0,0,0,832,837,1,0,0,0,833,835,3,124,
        62,0,834,836,5,136,0,0,835,834,1,0,0,0,835,836,1,0,0,0,836,838,1,
        0,0,0,837,833,1,0,0,0,837,838,1,0,0,0,838,843,1,0,0,0,839,841,3,
        70,35,0,840,842,5,136,0,0,841,840,1,0,0,0,841,842,1,0,0,0,842,844,
        1,0,0,0,843,839,1,0,0,0,843,844,1,0,0,0,844,845,1,0,0,0,845,846,
        5,7,0,0,846,69,1,0,0,0,847,850,3,72,36,0,848,850,3,290,145,0,849,
        847,1,0,0,0,849,848,1,0,0,0,850,71,1,0,0,0,851,886,5,8,0,0,852,854,
        5,136,0,0,853,852,1,0,0,0,853,854,1,0,0,0,854,855,1,0,0,0,855,857,
        3,74,37,0,856,858,5,136,0,0,857,856,1,0,0,0,857,858,1,0,0,0,858,
        859,1,0,0,0,859,861,5,10,0,0,860,862,5,136,0,0,861,860,1,0,0,0,861,
        862,1,0,0,0,862,863,1,0,0,0,863,883,3,76,38,0,864,866,5,136,0,0,
        865,864,1,0,0,0,865,866,1,0,0,0,866,867,1,0,0,0,867,869,5,1,0,0,
        868,870,5,136,0,0,869,868,1,0,0,0,869,870,1,0,0,0,870,871,1,0,0,
        0,871,873,3,74,37,0,872,874,5,136,0,0,873,872,1,0,0,0,873,874,1,
        0,0,0,874,875,1,0,0,0,875,877,5,10,0,0,876,878,5,136,0,0,877,876,
        1,0,0,0,877,878,1,0,0,0,878,879,1,0,0,0,879,880,3,76,38,0,880,882,
        1,0,0,0,881,865,1,0,0,0,882,885,1,0,0,0,883,881,1,0,0,0,883,884,
        1,0,0,0,884,887,1,0,0,0,885,883,1,0,0,0,886,853,1,0,0,0,886,887,
        1,0,0,0,887,889,1,0,0,0,888,890,5,136,0,0,889,888,1,0,0,0,889,890,
        1,0,0,0,890,891,1,0,0,0,891,892,5,9,0,0,892,73,1,0,0,0,893,898,3,
        288,144,0,894,896,5,136,0,0,895,894,1,0,0,0,895,896,1,0,0,0,896,
        897,1,0,0,0,897,899,3,124,62,0,898,895,1,0,0,0,898,899,1,0,0,0,899,
        75,1,0,0,0,900,905,3,228,114,0,901,903,5,136,0,0,902,901,1,0,0,0,
        902,903,1,0,0,0,903,904,1,0,0,0,904,906,3,124,62,0,905,902,1,0,0,
        0,905,906,1,0,0,0,906,77,1,0,0,0,907,909,5,11,0,0,908,910,5,136,
        0,0,909,908,1,0,0,0,909,910,1,0,0,0,910,915,1,0,0,0,911,913,3,276,
        138,0,912,914,5,136,0,0,913,912,1,0,0,0,913,914,1,0,0,0,914,916,
        1,0,0,0,915,911,1,0,0,0,915,916,1,0,0,0,916,921,1,0,0,0,917,919,
        3,214,107,0,918,920,5,136,0,0,919,918,1,0,0,0,919,920,1,0,0,0,920,
        922,1,0,0,0,921,917,1,0,0,0,921,922,1,0,0,0,922,924,1,0,0,0,923,
        925,3,220,110,0,924,923,1,0,0,0,924,925,1,0,0,0,925,930,1,0,0,0,
        926,928,3,124,62,0,927,929,5,136,0,0,928,927,1,0,0,0,928,929,1,0,
        0,0,929,931,1,0,0,0,930,926,1,0,0,0,930,931,1,0,0,0,931,936,1,0,
        0,0,932,934,3,212,106,0,933,935,5,136,0,0,934,933,1,0,0,0,934,935,
        1,0,0,0,935,937,1,0,0,0,936,932,1,0,0,0,936,937,1,0,0,0,937,938,
        1,0,0,0,938,939,5,12,0,0,939,79,1,0,0,0,940,952,3,82,41,0,941,943,
        5,136,0,0,942,941,1,0,0,0,942,943,1,0,0,0,943,944,1,0,0,0,944,946,
        3,92,46,0,945,947,5,136,0,0,946,945,1,0,0,0,946,947,1,0,0,0,947,
        948,1,0,0,0,948,949,3,82,41,0,949,951,1,0,0,0,950,942,1,0,0,0,951,
        954,1,0,0,0,952,950,1,0,0,0,952,953,1,0,0,0,953,81,1,0,0,0,954,952,
        1,0,0,0,955,960,3,84,42,0,956,961,3,122,61,0,957,961,3,240,120,0,
        958,961,3,242,121,0,959,961,3,244,122,0,960,956,1,0,0,0,960,957,
        1,0,0,0,960,958,1,0,0,0,960,959,1,0,0,0,960,961,1,0,0,0,961,83,1,
        0,0,0,962,974,3,94,47,0,963,965,5,136,0,0,964,963,1,0,0,0,964,965,
        1,0,0,0,965,966,1,0,0,0,966,968,3,90,45,0,967,969,5,136,0,0,968,
        967,1,0,0,0,968,969,1,0,0,0,969,970,1,0,0,0,970,971,3,94,47,0,971,
        973,1,0,0,0,972,964,1,0,0,0,973,976,1,0,0,0,974,972,1,0,0,0,974,
        975,1,0,0,0,975,85,1,0,0,0,976,974,1,0,0,0,977,978,7,0,0,0,978,87,
        1,0,0,0,979,980,5,15,0,0,980,89,1,0,0,0,981,982,7,1,0,0,982,91,1,
        0,0,0,983,984,7,2,0,0,984,93,1,0,0,0,985,997,3,96,48,0,986,988,5,
        136,0,0,987,986,1,0,0,0,987,988,1,0,0,0,988,989,1,0,0,0,989,991,
        3,86,43,0,990,992,5,136,0,0,991,990,1,0,0,0,991,992,1,0,0,0,992,
        993,1,0,0,0,993,994,3,96,48,0,994,996,1,0,0,0,995,987,1,0,0,0,996,
        999,1,0,0,0,997,995,1,0,0,0,997,998,1,0,0,0,998,95,1,0,0,0,999,997,
        1,0,0,0,1000,1012,3,246,123,0,1001,1003,5,136,0,0,1002,1001,1,0,
        0,0,1002,1003,1,0,0,0,1003,1004,1,0,0,0,1004,1006,3,88,44,0,1005,
        1007,5,136,0,0,1006,1005,1,0,0,0,1006,1007,1,0,0,0,1007,1008,1,0,
        0,0,1008,1009,3,246,123,0,1009,1011,1,0,0,0,1010,1002,1,0,0,0,1011,
        1014,1,0,0,0,1012,1010,1,0,0,0,1012,1013,1,0,0,0,1013,97,1,0,0,0,
        1014,1012,1,0,0,0,1015,1018,3,112,56,0,1016,1018,3,114,57,0,1017,
        1015,1,0,0,0,1017,1016,1,0,0,0,1018,1023,1,0,0,0,1019,1022,3,100,
        50,0,1020,1022,3,102,51,0,1021,1019,1,0,0,0,1021,1020,1,0,0,0,1022,
        1025,1,0,0,0,1023,1021,1,0,0,0,1023,1024,1,0,0,0,1024,99,1,0,0,0,
        1025,1023,1,0,0,0,1026,1028,5,136,0,0,1027,1026,1,0,0,0,1027,1028,
        1,0,0,0,1028,1029,1,0,0,0,1029,1031,5,11,0,0,1030,1032,5,136,0,0,
        1031,1030,1,0,0,0,1031,1032,1,0,0,0,1032,1033,1,0,0,0,1033,1035,
        3,104,52,0,1034,1036,5,136,0,0,1035,1034,1,0,0,0,1035,1036,1,0,0,
        0,1036,1037,1,0,0,0,1037,1038,5,12,0,0,1038,101,1,0,0,0,1039,1041,
        5,136,0,0,1040,1039,1,0,0,0,1040,1041,1,0,0,0,1041,1042,1,0,0,0,
        1042,1044,5,11,0,0,1043,1045,5,136,0,0,1044,1043,1,0,0,0,1044,1045,
        1,0,0,0,1045,1047,1,0,0,0,1046,1048,3,104,52,0,1047,1046,1,0,0,0,
        1047,1048,1,0,0,0,1048,1050,1,0,0,0,1049,1051,5,136,0,0,1050,1049,
        1,0,0,0,1050,1051,1,0,0,0,1051,1052,1,0,0,0,1052,1054,5,23,0,0,1053,
        1055,5,136,0,0,1054,1053,1,0,0,0,1054,1055,1,0,0,0,1055,1057,1,0,
        0,0,1056,1058,3,106,53,0,1057,1056,1,0,0,0,1057,1058,1,0,0,0,1058,
        1060,1,0,0,0,1059,1061,5,136,0,0,1060,1059,1,0,0,0,1060,1061,1,0,
        0,0,1061,1062,1,0,0,0,1062,1063,5,12,0,0,1063,103,1,0,0,0,1064,1065,
        3,228,114,0,1065,105,1,0,0,0,1066,1067,3,228,114,0,1067,107,1,0,
        0,0,1068,1073,5,95,0,0,1069,1071,5,136,0,0,1070,1069,1,0,0,0,1070,
        1071,1,0,0,0,1071,1072,1,0,0,0,1072,1074,3,252,126,0,1073,1070,1,
        0,0,0,1074,1075,1,0,0,0,1075,1073,1,0,0,0,1075,1076,1,0,0,0,1076,
        1091,1,0,0,0,1077,1079,5,95,0,0,1078,1080,5,136,0,0,1079,1078,1,
        0,0,0,1079,1080,1,0,0,0,1080,1081,1,0,0,0,1081,1086,3,110,55,0,1082,
        1084,5,136,0,0,1083,1082,1,0,0,0,1083,1084,1,0,0,0,1084,1085,1,0,
        0,0,1085,1087,3,252,126,0,1086,1083,1,0,0,0,1087,1088,1,0,0,0,1088,
        1086,1,0,0,0,1088,1089,1,0,0,0,1089,1091,1,0,0,0,1090,1068,1,0,0,
        0,1090,1077,1,0,0,0,1091,1100,1,0,0,0,1092,1094,5,136,0,0,1093,1092,
        1,0,0,0,1093,1094,1,0,0,0,1094,1095,1,0,0,0,1095,1097,5,96,0,0,1096,
        1098,5,136,0,0,1097,1096,1,0,0,0,1097,1098,1,0,0,0,1098,1099,1,0,
        0,0,1099,1101,3,228,114,0,1100,1093,1,0,0,0,1100,1101,1,0,0,0,1101,
        1103,1,0,0,0,1102,1104,5,136,0,0,1103,1102,1,0,0,0,1103,1104,1,0,
        0,0,1104,1105,1,0,0,0,1105,1106,5,97,0,0,1106,109,1,0,0,0,1107,1108,
        3,228,114,0,1108,111,1,0,0,0,1109,1116,3,250,125,0,1110,1112,5,136,
        0,0,1111,1110,1,0,0,0,1111,1112,1,0,0,0,1112,1113,1,0,0,0,1113,1115,
        3,248,124,0,1114,1111,1,0,0,0,1115,1118,1,0,0,0,1116,1114,1,0,0,
        0,1116,1117,1,0,0,0,1117,1126,1,0,0,0,1118,1116,1,0,0,0,1119,1121,
        5,136,0,0,1120,1119,1,0,0,0,1120,1121,1,0,0,0,1121,1124,1,0,0,0,
        1122,1125,3,216,108,0,1123,1125,3,126,63,0,1124,1122,1,0,0,0,1124,
        1123,1,0,0,0,1125,1127,1,0,0,0,1126,1120,1,0,0,0,1126,1127,1,0,0,
        0,1127,113,1,0,0,0,1128,1135,3,250,125,0,1129,1131,5,136,0,0,1130,
        1129,1,0,0,0,1130,1131,1,0,0,0,1131,1132,1,0,0,0,1132,1134,3,248,
        124,0,1133,1130,1,0,0,0,1134,1137,1,0,0,0,1135,1133,1,0,0,0,1135,
        1136,1,0,0,0,1136,1148,1,0,0,0,1137,1135,1,0,0,0,1138,1146,3,116,
        58,0,1139,1141,5,136,0,0,1140,1139,1,0,0,0,1140,1141,1,0,0,0,1141,
        1144,1,0,0,0,1142,1145,5,48,0,0,1143,1145,3,126,63,0,1144,1142,1,
        0,0,0,1144,1143,1,0,0,0,1145,1147,1,0,0,0,1146,1140,1,0,0,0,1146,
        1147,1,0,0,0,1147,1149,1,0,0,0,1148,1138,1,0,0,0,1148,1149,1,0,0,
        0,1149,1151,1,0,0,0,1150,1152,5,136,0,0,1151,1150,1,0,0,0,1151,1152,
        1,0,0,0,1152,1153,1,0,0,0,1153,1154,3,118,59,0,1154,115,1,0,0,0,
        1155,1157,5,136,0,0,1156,1155,1,0,0,0,1156,1157,1,0,0,0,1157,1158,
        1,0,0,0,1158,1160,5,4,0,0,1159,1161,5,136,0,0,1160,1159,1,0,0,0,
        1160,1161,1,0,0,0,1161,1162,1,0,0,0,1162,1163,3,288,144,0,1163,117,
        1,0,0,0,1164,1171,5,46,0,0,1165,1167,5,136,0,0,1166,1165,1,0,0,0,
        1166,1167,1,0,0,0,1167,1168,1,0,0,0,1168,1170,3,120,60,0,1169,1166,
        1,0,0,0,1170,1173,1,0,0,0,1171,1169,1,0,0,0,1171,1172,1,0,0,0,1172,
        119,1,0,0,0,1173,1171,1,0,0,0,1174,1176,5,4,0,0,1175,1177,5,136,
        0,0,1176,1175,1,0,0,0,1176,1177,1,0,0,0,1177,1178,1,0,0,0,1178,1179,
        3,288,144,0,1179,121,1,0,0,0,1180,1181,5,136,0,0,1181,1182,7,3,0,
        0,1182,1183,5,136,0,0,1183,1184,3,84,42,0,1184,123,1,0,0,0,1185,
        1187,5,46,0,0,1186,1188,5,136,0,0,1187,1186,1,0,0,0,1187,1188,1,
        0,0,0,1188,1189,1,0,0,0,1189,1190,3,128,64,0,1190,125,1,0,0,0,1191,
        1193,5,47,0,0,1192,1194,5,136,0,0,1193,1192,1,0,0,0,1193,1194,1,
        0,0,0,1194,1195,1,0,0,0,1195,1196,3,128,64,0,1196,127,1,0,0,0,1197,
        1207,5,6,0,0,1198,1200,5,136,0,0,1199,1198,1,0,0,0,1199,1200,1,0,
        0,0,1200,1201,1,0,0,0,1201,1203,3,130,65,0,1202,1204,5,136,0,0,1203,
        1202,1,0,0,0,1203,1204,1,0,0,0,1204,1205,1,0,0,0,1205,1206,5,1,0,
        0,1206,1208,1,0,0,0,1207,1199,1,0,0,0,1207,1208,1,0,0,0,1208,1210,
        1,0,0,0,1209,1211,5,136,0,0,1210,1209,1,0,0,0,1210,1211,1,0,0,0,
        1211,1214,1,0,0,0,1212,1215,5,49,0,0,1213,1215,3,130,65,0,1214,1212,
        1,0,0,0,1214,1213,1,0,0,0,1215,1217,1,0,0,0,1216,1218,5,136,0,0,
        1217,1216,1,0,0,0,1217,1218,1,0,0,0,1218,1219,1,0,0,0,1219,1220,
        5,7,0,0,1220,129,1,0,0,0,1221,1224,5,118,0,0,1222,1224,3,140,70,
        0,1223,1221,1,0,0,0,1223,1222,1,0,0,0,1224,131,1,0,0,0,1225,1227,
        3,266,133,0,1226,1228,5,136,0,0,1227,1226,1,0,0,0,1227,1228,1,0,
        0,0,1228,1229,1,0,0,0,1229,1231,5,6,0,0,1230,1232,5,136,0,0,1231,
        1230,1,0,0,0,1231,1232,1,0,0,0,1232,1237,1,0,0,0,1233,1235,5,74,
        0,0,1234,1236,5,136,0,0,1235,1234,1,0,0,0,1235,1236,1,0,0,0,1236,
        1238,1,0,0,0,1237,1233,1,0,0,0,1237,1238,1,0,0,0,1238,1256,1,0,0,
        0,1239,1241,3,134,67,0,1240,1242,5,136,0,0,1241,1240,1,0,0,0,1241,
        1242,1,0,0,0,1242,1253,1,0,0,0,1243,1245,5,1,0,0,1244,1246,5,136,
        0,0,1245,1244,1,0,0,0,1245,1246,1,0,0,0,1246,1247,1,0,0,0,1247,1249,
        3,134,67,0,1248,1250,5,136,0,0,1249,1248,1,0,0,0,1249,1250,1,0,0,
        0,1250,1252,1,0,0,0,1251,1243,1,0,0,0,1252,1255,1,0,0,0,1253,1251,
        1,0,0,0,1253,1254,1,0,0,0,1254,1257,1,0,0,0,1255,1253,1,0,0,0,1256,
        1239,1,0,0,0,1256,1257,1,0,0,0,1257,1258,1,0,0,0,1258,1259,5,7,0,
        0,1259,133,1,0,0,0,1260,1261,3,228,114,0,1261,135,1,0,0,0,1262,1264,
        5,11,0,0,1263,1265,5,136,0,0,1264,1263,1,0,0,0,1264,1265,1,0,0,0,
        1265,1283,1,0,0,0,1266,1268,3,138,69,0,1267,1269,5,136,0,0,1268,
        1267,1,0,0,0,1268,1269,1,0,0,0,1269,1280,1,0,0,0,1270,1272,5,1,0,
        0,1271,1273,5,136,0,0,1272,1271,1,0,0,0,1272,1273,1,0,0,0,1273,1274,
        1,0,0,0,1274,1276,3,138,69,0,1275,1277,5,136,0,0,1276,1275,1,0,0,
        0,1276,1277,1,0,0,0,1277,1279,1,0,0,0,1278,1270,1,0,0,0,1279,1282,
        1,0,0,0,1280,1278,1,0,0,0,1280,1281,1,0,0,0,1281,1284,1,0,0,0,1282,
        1280,1,0,0,0,1283,1266,1,0,0,0,1283,1284,1,0,0,0,1284,1285,1,0,0,
        0,1285,1286,5,12,0,0,1286,137,1,0,0,0,1287,1288,3,228,114,0,1288,
        139,1,0,0,0,1289,1291,5,8,0,0,1290,1292,5,136,0,0,1291,1290,1,0,
        0,0,1291,1292,1,0,0,0,1292,1304,1,0,0,0,1293,1301,3,142,71,0,1294,
        1296,5,1,0,0,1295,1297,5,136,0,0,1296,1295,1,0,0,0,1296,1297,1,0,
        0,0,1297,1298,1,0,0,0,1298,1300,3,142,71,0,1299,1294,1,0,0,0,1300,
        1303,1,0,0,0,1301,1299,1,0,0,0,1301,1302,1,0,0,0,1302,1305,1,0,0,
        0,1303,1301,1,0,0,0,1304,1293,1,0,0,0,1304,1305,1,0,0,0,1305,1306,
        1,0,0,0,1306,1307,5,9,0,0,1307,141,1,0,0,0,1308,1310,3,288,144,0,
        1309,1311,5,136,0,0,1310,1309,1,0,0,0,1310,1311,1,0,0,0,1311,1312,
        1,0,0,0,1312,1314,5,10,0,0,1313,1315,5,136,0,0,1314,1313,1,0,0,0,
        1314,1315,1,0,0,0,1315,1316,1,0,0,0,1316,1318,3,228,114,0,1317,1319,
        5,136,0,0,1318,1317,1,0,0,0,1318,1319,1,0,0,0,1319,143,1,0,0,0,1320,
        1321,7,4,0,0,1321,145,1,0,0,0,1322,1323,7,5,0,0,1323,147,1,0,0,0,
        1324,1326,5,136,0,0,1325,1324,1,0,0,0,1325,1326,1,0,0,0,1326,1327,
        1,0,0,0,1327,1332,3,150,75,0,1328,1330,5,136,0,0,1329,1328,1,0,0,
        0,1329,1330,1,0,0,0,1330,1331,1,0,0,0,1331,1333,5,24,0,0,1332,1329,
        1,0,0,0,1332,1333,1,0,0,0,1333,1335,1,0,0,0,1334,1336,5,136,0,0,
        1335,1334,1,0,0,0,1335,1336,1,0,0,0,1336,1337,1,0,0,0,1337,1338,
        5,0,0,1,1338,149,1,0,0,0,1339,1340,3,0,0,0,1340,151,1,0,0,0,1341,
        1348,3,156,78,0,1342,1344,5,136,0,0,1343,1342,1,0,0,0,1343,1344,
        1,0,0,0,1344,1345,1,0,0,0,1345,1347,3,154,77,0,1346,1343,1,0,0,0,
        1347,1350,1,0,0,0,1348,1346,1,0,0,0,1348,1349,1,0,0,0,1349,153,1,
        0,0,0,1350,1348,1,0,0,0,1351,1352,5,57,0,0,1352,1353,5,136,0,0,1353,
        1355,5,58,0,0,1354,1356,5,136,0,0,1355,1354,1,0,0,0,1355,1356,1,
        0,0,0,1356,1357,1,0,0,0,1357,1364,3,156,78,0,1358,1360,5,57,0,0,
        1359,1361,5,136,0,0,1360,1359,1,0,0,0,1360,1361,1,0,0,0,1361,1362,
        1,0,0,0,1362,1364,3,156,78,0,1363,1351,1,0,0,0,1363,1358,1,0,0,0,
        1364,155,1,0,0,0,1365,1368,3,158,79,0,1366,1368,3,2,1,0,1367,1365,
        1,0,0,0,1367,1366,1,0,0,0,1368,157,1,0,0,0,1369,1371,3,160,80,0,
        1370,1372,5,136,0,0,1371,1370,1,0,0,0,1371,1372,1,0,0,0,1372,1374,
        1,0,0,0,1373,1369,1,0,0,0,1374,1377,1,0,0,0,1375,1373,1,0,0,0,1375,
        1376,1,0,0,0,1376,1378,1,0,0,0,1377,1375,1,0,0,0,1378,1405,3,182,
        91,0,1379,1381,3,160,80,0,1380,1382,5,136,0,0,1381,1380,1,0,0,0,
        1381,1382,1,0,0,0,1382,1384,1,0,0,0,1383,1379,1,0,0,0,1384,1387,
        1,0,0,0,1385,1383,1,0,0,0,1385,1386,1,0,0,0,1386,1388,1,0,0,0,1387,
        1385,1,0,0,0,1388,1395,3,6,3,0,1389,1391,5,136,0,0,1390,1389,1,0,
        0,0,1390,1391,1,0,0,0,1391,1392,1,0,0,0,1392,1394,3,6,3,0,1393,1390,
        1,0,0,0,1394,1397,1,0,0,0,1395,1393,1,0,0,0,1395,1396,1,0,0,0,1396,
        1402,1,0,0,0,1397,1395,1,0,0,0,1398,1400,5,136,0,0,1399,1398,1,0,
        0,0,1399,1400,1,0,0,0,1400,1401,1,0,0,0,1401,1403,3,182,91,0,1402,
        1399,1,0,0,0,1402,1403,1,0,0,0,1403,1405,1,0,0,0,1404,1375,1,0,0,
        0,1404,1385,1,0,0,0,1405,159,1,0,0,0,1406,1410,3,4,2,0,1407,1410,
        3,162,81,0,1408,1410,3,38,19,0,1409,1406,1,0,0,0,1409,1407,1,0,0,
        0,1409,1408,1,0,0,0,1410,161,1,0,0,0,1411,1413,5,61,0,0,1412,1414,
        5,136,0,0,1413,1412,1,0,0,0,1413,1414,1,0,0,0,1414,1415,1,0,0,0,
        1415,1416,3,228,114,0,1416,1417,5,136,0,0,1417,1418,5,62,0,0,1418,
        1419,5,136,0,0,1419,1420,3,276,138,0,1420,163,1,0,0,0,1421,1423,
        5,63,0,0,1422,1424,5,136,0,0,1423,1422,1,0,0,0,1423,1424,1,0,0,0,
        1424,1425,1,0,0,0,1425,1430,3,62,31,0,1426,1427,5,136,0,0,1427,1429,
        3,166,83,0,1428,1426,1,0,0,0,1429,1432,1,0,0,0,1430,1428,1,0,0,0,
        1430,1431,1,0,0,0,1431,165,1,0,0,0,1432,1430,1,0,0,0,1433,1434,5,
        64,0,0,1434,1435,5,136,0,0,1435,1436,5,60,0,0,1436,1437,5,136,0,
        0,1437,1444,3,170,85,0,1438,1439,5,64,0,0,1439,1440,5,136,0,0,1440,
        1441,5,65,0,0,1441,1442,5,136,0,0,1442,1444,3,170,85,0,1443,1433,
        1,0,0,0,1443,1438,1,0,0,0,1444,167,1,0,0,0,1445,1447,5,65,0,0,1446,
        1448,5,136,0,0,1447,1446,1,0,0,0,1447,1448,1,0,0,0,1448,1449,1,0,
        0,0,1449,1450,3,200,100,0,1450,169,1,0,0,0,1451,1453,5,66,0,0,1452,
        1454,5,136,0,0,1453,1452,1,0,0,0,1453,1454,1,0,0,0,1454,1455,1,0,
        0,0,1455,1466,3,16,8,0,1456,1458,5,136,0,0,1457,1456,1,0,0,0,1457,
        1458,1,0,0,0,1458,1459,1,0,0,0,1459,1461,5,1,0,0,1460,1462,5,136,
        0,0,1461,1460,1,0,0,0,1461,1462,1,0,0,0,1462,1463,1,0,0,0,1463,1465,
        3,16,8,0,1464,1457,1,0,0,0,1465,1468,1,0,0,0,1466,1464,1,0,0,0,1466,
        1467,1,0,0,0,1467,171,1,0,0,0,1468,1466,1,0,0,0,1469,1470,5,67,0,
        0,1470,1472,5,136,0,0,1471,1469,1,0,0,0,1471,1472,1,0,0,0,1472,1473,
        1,0,0,0,1473,1475,5,68,0,0,1474,1476,5,136,0,0,1475,1474,1,0,0,0,
        1475,1476,1,0,0,0,1476,1477,1,0,0,0,1477,1488,3,228,114,0,1478,1480,
        5,136,0,0,1479,1478,1,0,0,0,1479,1480,1,0,0,0,1480,1481,1,0,0,0,
        1481,1483,5,1,0,0,1482,1484,5,136,0,0,1483,1482,1,0,0,0,1483,1484,
        1,0,0,0,1484,1485,1,0,0,0,1485,1487,3,228,114,0,1486,1479,1,0,0,
        0,1487,1490,1,0,0,0,1488,1486,1,0,0,0,1488,1489,1,0,0,0,1489,173,
        1,0,0,0,1490,1488,1,0,0,0,1491,1492,5,69,0,0,1492,1493,5,136,0,0,
        1493,1504,3,30,15,0,1494,1496,5,136,0,0,1495,1494,1,0,0,0,1495,1496,
        1,0,0,0,1496,1497,1,0,0,0,1497,1499,5,1,0,0,1498,1500,5,136,0,0,
        1499,1498,1,0,0,0,1499,1500,1,0,0,0,1500,1501,1,0,0,0,1501,1503,
        3,30,15,0,1502,1495,1,0,0,0,1503,1506,1,0,0,0,1504,1502,1,0,0,0,
        1504,1505,1,0,0,0,1505,175,1,0,0,0,1506,1504,1,0,0,0,1507,1518,3,
        178,89,0,1508,1510,5,136,0,0,1509,1508,1,0,0,0,1509,1510,1,0,0,0,
        1510,1511,1,0,0,0,1511,1513,5,1,0,0,1512,1514,5,136,0,0,1513,1512,
        1,0,0,0,1513,1514,1,0,0,0,1514,1515,1,0,0,0,1515,1517,3,178,89,0,
        1516,1509,1,0,0,0,1517,1520,1,0,0,0,1518,1516,1,0,0,0,1518,1519,
        1,0,0,0,1519,1525,1,0,0,0,1520,1518,1,0,0,0,1521,1523,5,136,0,0,
        1522,1521,1,0,0,0,1522,1523,1,0,0,0,1523,1524,1,0,0,0,1524,1526,
        3,198,99,0,1525,1522,1,0,0,0,1525,1526,1,0,0,0,1526,177,1,0,0,0,
        1527,1528,3,270,135,0,1528,1529,5,136,0,0,1529,1530,5,62,0,0,1530,
        1531,5,136,0,0,1531,1533,1,0,0,0,1532,1527,1,0,0,0,1532,1533,1,0,
        0,0,1533,1534,1,0,0,0,1534,1535,3,276,138,0,1535,179,1,0,0,0,1536,
        1537,5,72,0,0,1537,1542,3,184,92,0,1538,1540,5,136,0,0,1539,1538,
        1,0,0,0,1539,1540,1,0,0,0,1540,1541,1,0,0,0,1541,1543,3,198,99,0,
        1542,1539,1,0,0,0,1542,1543,1,0,0,0,1543,181,1,0,0,0,1544,1545,5,
        73,0,0,1545,1546,3,184,92,0,1546,183,1,0,0,0,1547,1549,5,136,0,0,
        1548,1547,1,0,0,0,1548,1549,1,0,0,0,1549,1550,1,0,0,0,1550,1552,
        5,74,0,0,1551,1548,1,0,0,0,1551,1552,1,0,0,0,1552,1553,1,0,0,0,1553,
        1554,5,136,0,0,1554,1557,3,186,93,0,1555,1556,5,136,0,0,1556,1558,
        3,190,95,0,1557,1555,1,0,0,0,1557,1558,1,0,0,0,1558,1561,1,0,0,0,
        1559,1560,5,136,0,0,1560,1562,3,192,96,0,1561,1559,1,0,0,0,1561,
        1562,1,0,0,0,1562,1565,1,0,0,0,1563,1564,5,136,0,0,1564,1566,3,194,
        97,0,1565,1563,1,0,0,0,1565,1566,1,0,0,0,1566,185,1,0,0,0,1567,1578,
        5,5,0,0,1568,1570,5,136,0,0,1569,1568,1,0,0,0,1569,1570,1,0,0,0,
        1570,1571,1,0,0,0,1571,1573,5,1,0,0,1572,1574,5,136,0,0,1573,1572,
        1,0,0,0,1573,1574,1,0,0,0,1574,1575,1,0,0,0,1575,1577,3,188,94,0,
        1576,1569,1,0,0,0,1577,1580,1,0,0,0,1578,1576,1,0,0,0,1578,1579,
        1,0,0,0,1579,1596,1,0,0,0,1580,1578,1,0,0,0,1581,1592,3,188,94,0,
        1582,1584,5,136,0,0,1583,1582,1,0,0,0,1583,1584,1,0,0,0,1584,1585,
        1,0,0,0,1585,1587,5,1,0,0,1586,1588,5,136,0,0,1587,1586,1,0,0,0,
        1587,1588,1,0,0,0,1588,1589,1,0,0,0,1589,1591,3,188,94,0,1590,1583,
        1,0,0,0,1591,1594,1,0,0,0,1592,1590,1,0,0,0,1592,1593,1,0,0,0,1593,
        1596,1,0,0,0,1594,1592,1,0,0,0,1595,1567,1,0,0,0,1595,1581,1,0,0,
        0,1596,187,1,0,0,0,1597,1598,3,228,114,0,1598,1599,5,136,0,0,1599,
        1600,5,62,0,0,1600,1601,5,136,0,0,1601,1602,3,276,138,0,1602,1605,
        1,0,0,0,1603,1605,3,228,114,0,1604,1597,1,0,0,0,1604,1603,1,0,0,
        0,1605,189,1,0,0,0,1606,1607,5,75,0,0,1607,1608,5,136,0,0,1608,1609,
        5,76,0,0,1609,1610,5,136,0,0,1610,1618,3,196,98,0,1611,1613,5,1,
        0,0,1612,1614,5,136,0,0,1613,1612,1,0,0,0,1613,1614,1,0,0,0,1614,
        1615,1,0,0,0,1615,1617,3,196,98,0,1616,1611,1,0,0,0,1617,1620,1,
        0,0,0,1618,1616,1,0,0,0,1618,1619,1,0,0,0,1619,191,1,0,0,0,1620,
        1618,1,0,0,0,1621,1622,5,77,0,0,1622,1623,5,136,0,0,1623,1624,3,
        228,114,0,1624,193,1,0,0,0,1625,1626,5,78,0,0,1626,1627,5,136,0,
        0,1627,1628,3,228,114,0,1628,195,1,0,0,0,1629,1634,3,228,114,0,1630,
        1632,5,136,0,0,1631,1630,1,0,0,0,1631,1632,1,0,0,0,1632,1633,1,0,
        0,0,1633,1635,7,6,0,0,1634,1631,1,0,0,0,1634,1635,1,0,0,0,1635,197,
        1,0,0,0,1636,1637,5,83,0,0,1637,1638,5,136,0,0,1638,1639,3,228,114,
        0,1639,199,1,0,0,0,1640,1651,3,62,31,0,1641,1643,5,136,0,0,1642,
        1641,1,0,0,0,1642,1643,1,0,0,0,1643,1644,1,0,0,0,1644,1646,5,1,0,
        0,1645,1647,5,136,0,0,1646,1645,1,0,0,0,1646,1647,1,0,0,0,1647,1648,
        1,0,0,0,1648,1650,3,62,31,0,1649,1642,1,0,0,0,1650,1653,1,0,0,0,
        1651,1649,1,0,0,0,1651,1652,1,0,0,0,1652,201,1,0,0,0,1653,1651,1,
        0,0,0,1654,1655,3,204,102,0,1655,203,1,0,0,0,1656,1663,3,68,34,0,
        1657,1659,5,136,0,0,1658,1657,1,0,0,0,1658,1659,1,0,0,0,1659,1660,
        1,0,0,0,1660,1662,3,208,104,0,1661,1658,1,0,0,0,1662,1665,1,0,0,
        0,1663,1661,1,0,0,0,1663,1664,1,0,0,0,1664,1671,1,0,0,0,1665,1663,
        1,0,0,0,1666,1667,5,6,0,0,1667,1668,3,204,102,0,1668,1669,5,7,0,
        0,1669,1671,1,0,0,0,1670,1656,1,0,0,0,1670,1666,1,0,0,0,1671,205,
        1,0,0,0,1672,1677,3,68,34,0,1673,1675,5,136,0,0,1674,1673,1,0,0,
        0,1674,1675,1,0,0,0,1675,1676,1,0,0,0,1676,1678,3,208,104,0,1677,
        1674,1,0,0,0,1678,1679,1,0,0,0,1679,1677,1,0,0,0,1679,1680,1,0,0,
        0,1680,207,1,0,0,0,1681,1683,3,210,105,0,1682,1684,5,136,0,0,1683,
        1682,1,0,0,0,1683,1684,1,0,0,0,1684,1685,1,0,0,0,1685,1686,3,68,
        34,0,1686,209,1,0,0,0,1687,1689,3,294,147,0,1688,1690,5,136,0,0,
        1689,1688,1,0,0,0,1689,1690,1,0,0,0,1690,1691,1,0,0,0,1691,1693,
        3,298,149,0,1692,1694,5,136,0,0,1693,1692,1,0,0,0,1693,1694,1,0,
        0,0,1694,1696,1,0,0,0,1695,1697,3,78,39,0,1696,1695,1,0,0,0,1696,
        1697,1,0,0,0,1697,1699,1,0,0,0,1698,1700,5,136,0,0,1699,1698,1,0,
        0,0,1699,1700,1,0,0,0,1700,1701,1,0,0,0,1701,1703,3,298,149,0,1702,
        1704,5,136,0,0,1703,1702,1,0,0,0,1703,1704,1,0,0,0,1704,1705,1,0,
        0,0,1705,1706,3,296,148,0,1706,1752,1,0,0,0,1707,1709,3,294,147,
        0,1708,1710,5,136,0,0,1709,1708,1,0,0,0,1709,1710,1,0,0,0,1710,1711,
        1,0,0,0,1711,1713,3,298,149,0,1712,1714,5,136,0,0,1713,1712,1,0,
        0,0,1713,1714,1,0,0,0,1714,1716,1,0,0,0,1715,1717,3,78,39,0,1716,
        1715,1,0,0,0,1716,1717,1,0,0,0,1717,1719,1,0,0,0,1718,1720,5,136,
        0,0,1719,1718,1,0,0,0,1719,1720,1,0,0,0,1720,1721,1,0,0,0,1721,1722,
        3,298,149,0,1722,1752,1,0,0,0,1723,1725,3,298,149,0,1724,1726,5,
        136,0,0,1725,1724,1,0,0,0,1725,1726,1,0,0,0,1726,1728,1,0,0,0,1727,
        1729,3,78,39,0,1728,1727,1,0,0,0,1728,1729,1,0,0,0,1729,1731,1,0,
        0,0,1730,1732,5,136,0,0,1731,1730,1,0,0,0,1731,1732,1,0,0,0,1732,
        1733,1,0,0,0,1733,1735,3,298,149,0,1734,1736,5,136,0,0,1735,1734,
        1,0,0,0,1735,1736,1,0,0,0,1736,1737,1,0,0,0,1737,1738,3,296,148,
        0,1738,1752,1,0,0,0,1739,1741,3,298,149,0,1740,1742,5,136,0,0,1741,
        1740,1,0,0,0,1741,1742,1,0,0,0,1742,1744,1,0,0,0,1743,1745,3,78,
        39,0,1744,1743,1,0,0,0,1744,1745,1,0,0,0,1745,1747,1,0,0,0,1746,
        1748,5,136,0,0,1747,1746,1,0,0,0,1747,1748,1,0,0,0,1748,1749,1,0,
        0,0,1749,1750,3,298,149,0,1750,1752,1,0,0,0,1751,1687,1,0,0,0,1751,
        1707,1,0,0,0,1751,1723,1,0,0,0,1751,1739,1,0,0,0,1752,211,1,0,0,
        0,1753,1756,3,140,70,0,1754,1756,3,290,145,0,1755,1753,1,0,0,0,1755,
        1754,1,0,0,0,1756,213,1,0,0,0,1757,1759,5,10,0,0,1758,1760,5,136,
        0,0,1759,1758,1,0,0,0,1759,1760,1,0,0,0,1760,1761,1,0,0,0,1761,1775,
        3,224,112,0,1762,1764,5,136,0,0,1763,1762,1,0,0,0,1763,1764,1,0,
        0,0,1764,1765,1,0,0,0,1765,1767,5,25,0,0,1766,1768,5,10,0,0,1767,
        1766,1,0,0,0,1767,1768,1,0,0,0,1768,1770,1,0,0,0,1769,1771,5,136,
        0,0,1770,1769,1,0,0,0,1770,1771,1,0,0,0,1771,1772,1,0,0,0,1772,1774,
        3,224,112,0,1773,1763,1,0,0,0,1774,1777,1,0,0,0,1775,1773,1,0,0,
        0,1775,1776,1,0,0,0,1776,215,1,0,0,0,1777,1775,1,0,0,0,1778,1785,
        3,218,109,0,1779,1781,5,136,0,0,1780,1779,1,0,0,0,1780,1781,1,0,
        0,0,1781,1782,1,0,0,0,1782,1784,3,218,109,0,1783,1780,1,0,0,0,1784,
        1787,1,0,0,0,1785,1783,1,0,0,0,1785,1786,1,0,0,0,1786,217,1,0,0,
        0,1787,1785,1,0,0,0,1788,1790,5,10,0,0,1789,1791,5,136,0,0,1790,
        1789,1,0,0,0,1790,1791,1,0,0,0,1791,1792,1,0,0,0,1792,1793,3,222,
        111,0,1793,219,1,0,0,0,1794,1796,5,5,0,0,1795,1797,5,136,0,0,1796,
        1795,1,0,0,0,1796,1797,1,0,0,0,1797,1802,1,0,0,0,1798,1800,3,284,
        142,0,1799,1801,5,136,0,0,1800,1799,1,0,0,0,1800,1801,1,0,0,0,1801,
        1803,1,0,0,0,1802,1798,1,0,0,0,1802,1803,1,0,0,0,1803,1814,1,0,0,
        0,1804,1806,5,23,0,0,1805,1807,5,136,0,0,1806,1805,1,0,0,0,1806,
        1807,1,0,0,0,1807,1812,1,0,0,0,1808,1810,3,284,142,0,1809,1811,5,
        136,0,0,1810,1809,1,0,0,0,1810,1811,1,0,0,0,1811,1813,1,0,0,0,1812,
        1808,1,0,0,0,1812,1813,1,0,0,0,1813,1815,1,0,0,0,1814,1804,1,0,0,
        0,1814,1815,1,0,0,0,1815,221,1,0,0,0,1816,1817,3,292,146,0,1817,
        223,1,0,0,0,1818,1819,3,292,146,0,1819,225,1,0,0,0,1820,1825,3,250,
        125,0,1821,1823,5,136,0,0,1822,1821,1,0,0,0,1822,1823,1,0,0,0,1823,
        1824,1,0,0,0,1824,1826,3,248,124,0,1825,1822,1,0,0,0,1826,1827,1,
        0,0,0,1827,1825,1,0,0,0,1827,1828,1,0,0,0,1828,227,1,0,0,0,1829,
        1830,3,230,115,0,1830,229,1,0,0,0,1831,1838,3,232,116,0,1832,1833,
        5,136,0,0,1833,1834,5,84,0,0,1834,1835,5,136,0,0,1835,1837,3,232,
        116,0,1836,1832,1,0,0,0,1837,1840,1,0,0,0,1838,1836,1,0,0,0,1838,
        1839,1,0,0,0,1839,231,1,0,0,0,1840,1838,1,0,0,0,1841,1848,3,234,
        117,0,1842,1843,5,136,0,0,1843,1844,5,85,0,0,1844,1845,5,136,0,0,
        1845,1847,3,234,117,0,1846,1842,1,0,0,0,1847,1850,1,0,0,0,1848,1846,
        1,0,0,0,1848,1849,1,0,0,0,1849,233,1,0,0,0,1850,1848,1,0,0,0,1851,
        1858,3,236,118,0,1852,1853,5,136,0,0,1853,1854,5,86,0,0,1854,1855,
        5,136,0,0,1855,1857,3,236,118,0,1856,1852,1,0,0,0,1857,1860,1,0,
        0,0,1858,1856,1,0,0,0,1858,1859,1,0,0,0,1859,235,1,0,0,0,1860,1858,
        1,0,0,0,1861,1863,5,87,0,0,1862,1864,5,136,0,0,1863,1862,1,0,0,0,
        1863,1864,1,0,0,0,1864,1866,1,0,0,0,1865,1861,1,0,0,0,1866,1869,
        1,0,0,0,1867,1865,1,0,0,0,1867,1868,1,0,0,0,1868,1870,1,0,0,0,1869,
        1867,1,0,0,0,1870,1871,3,80,40,0,1871,237,1,0,0,0,1872,1874,5,2,
        0,0,1873,1875,5,136,0,0,1874,1873,1,0,0,0,1874,1875,1,0,0,0,1875,
        1876,1,0,0,0,1876,1903,3,82,41,0,1877,1879,5,18,0,0,1878,1880,5,
        136,0,0,1879,1878,1,0,0,0,1879,1880,1,0,0,0,1880,1881,1,0,0,0,1881,
        1903,3,82,41,0,1882,1884,5,19,0,0,1883,1885,5,136,0,0,1884,1883,
        1,0,0,0,1884,1885,1,0,0,0,1885,1886,1,0,0,0,1886,1903,3,82,41,0,
        1887,1889,5,21,0,0,1888,1890,5,136,0,0,1889,1888,1,0,0,0,1889,1890,
        1,0,0,0,1890,1891,1,0,0,0,1891,1903,3,82,41,0,1892,1894,5,20,0,0,
        1893,1895,5,136,0,0,1894,1893,1,0,0,0,1894,1895,1,0,0,0,1895,1896,
        1,0,0,0,1896,1903,3,82,41,0,1897,1899,5,22,0,0,1898,1900,5,136,0,
        0,1899,1898,1,0,0,0,1899,1900,1,0,0,0,1900,1901,1,0,0,0,1901,1903,
        3,82,41,0,1902,1872,1,0,0,0,1902,1877,1,0,0,0,1902,1882,1,0,0,0,
        1902,1887,1,0,0,0,1902,1892,1,0,0,0,1902,1897,1,0,0,0,1903,239,1,
        0,0,0,1904,1905,5,136,0,0,1905,1906,5,88,0,0,1906,1907,5,136,0,0,
        1907,1915,5,72,0,0,1908,1909,5,136,0,0,1909,1910,5,89,0,0,1910,1911,
        5,136,0,0,1911,1915,5,72,0,0,1912,1913,5,136,0,0,1913,1915,5,90,
        0,0,1914,1904,1,0,0,0,1914,1908,1,0,0,0,1914,1912,1,0,0,0,1915,1917,
        1,0,0,0,1916,1918,5,136,0,0,1917,1916,1,0,0,0,1917,1918,1,0,0,0,
        1918,1919,1,0,0,0,1919,1920,3,84,42,0,1920,241,1,0,0,0,1921,1922,
        5,136,0,0,1922,1924,5,91,0,0,1923,1925,5,136,0,0,1924,1923,1,0,0,
        0,1924,1925,1,0,0,0,1925,1926,1,0,0,0,1926,1927,3,84,42,0,1927,243,
        1,0,0,0,1928,1929,5,136,0,0,1929,1930,5,92,0,0,1930,1931,5,136,0,
        0,1931,1939,5,93,0,0,1932,1933,5,136,0,0,1933,1934,5,92,0,0,1934,
        1935,5,136,0,0,1935,1936,5,87,0,0,1936,1937,5,136,0,0,1937,1939,
        5,93,0,0,1938,1928,1,0,0,0,1938,1932,1,0,0,0,1939,245,1,0,0,0,1940,
        1947,3,98,49,0,1941,1943,7,1,0,0,1942,1944,5,136,0,0,1943,1942,1,
        0,0,0,1943,1944,1,0,0,0,1944,1945,1,0,0,0,1945,1947,3,98,49,0,1946,
        1940,1,0,0,0,1946,1941,1,0,0,0,1947,247,1,0,0,0,1948,1950,5,4,0,
        0,1949,1951,5,136,0,0,1950,1949,1,0,0,0,1950,1951,1,0,0,0,1951,1952,
        1,0,0,0,1952,1953,3,288,144,0,1953,249,1,0,0,0,1954,1979,3,278,139,
        0,1955,1979,3,290,145,0,1956,1979,3,108,54,0,1957,1959,5,94,0,0,
        1958,1960,5,136,0,0,1959,1958,1,0,0,0,1959,1960,1,0,0,0,1960,1961,
        1,0,0,0,1961,1963,5,6,0,0,1962,1964,5,136,0,0,1963,1962,1,0,0,0,
        1963,1964,1,0,0,0,1964,1965,1,0,0,0,1965,1967,5,5,0,0,1966,1968,
        5,136,0,0,1967,1966,1,0,0,0,1967,1968,1,0,0,0,1968,1969,1,0,0,0,
        1969,1979,5,7,0,0,1970,1979,3,254,127,0,1971,1979,3,256,128,0,1972,
        1979,3,258,129,0,1973,1979,3,260,130,0,1974,1979,3,262,131,0,1975,
        1979,3,132,66,0,1976,1979,3,54,27,0,1977,1979,3,276,138,0,1978,1954,
        1,0,0,0,1978,1955,1,0,0,0,1978,1956,1,0,0,0,1978,1957,1,0,0,0,1978,
        1970,1,0,0,0,1978,1971,1,0,0,0,1978,1972,1,0,0,0,1978,1973,1,0,0,
        0,1978,1974,1,0,0,0,1978,1975,1,0,0,0,1978,1976,1,0,0,0,1978,1977,
        1,0,0,0,1979,251,1,0,0,0,1980,1982,5,98,0,0,1981,1983,5,136,0,0,
        1982,1981,1,0,0,0,1982,1983,1,0,0,0,1983,1984,1,0,0,0,1984,1986,
        3,228,114,0,1985,1987,5,136,0,0,1986,1985,1,0,0,0,1986,1987,1,0,
        0,0,1987,1988,1,0,0,0,1988,1990,5,99,0,0,1989,1991,5,136,0,0,1990,
        1989,1,0,0,0,1990,1991,1,0,0,0,1991,1992,1,0,0,0,1992,1993,3,228,
        114,0,1993,253,1,0,0,0,1994,1996,5,11,0,0,1995,1997,5,136,0,0,1996,
        1995,1,0,0,0,1996,1997,1,0,0,0,1997,1998,1,0,0,0,1998,2007,3,56,
        28,0,1999,2001,5,136,0,0,2000,1999,1,0,0,0,2000,2001,1,0,0,0,2001,
        2002,1,0,0,0,2002,2004,5,25,0,0,2003,2005,5,136,0,0,2004,2003,1,
        0,0,0,2004,2005,1,0,0,0,2005,2006,1,0,0,0,2006,2008,3,228,114,0,
        2007,2000,1,0,0,0,2007,2008,1,0,0,0,2008,2010,1,0,0,0,2009,2011,
        5,136,0,0,2010,2009,1,0,0,0,2010,2011,1,0,0,0,2011,2012,1,0,0,0,
        2012,2013,5,12,0,0,2013,255,1,0,0,0,2014,2016,5,11,0,0,2015,2017,
        5,136,0,0,2016,2015,1,0,0,0,2016,2017,1,0,0,0,2017,2026,1,0,0,0,
        2018,2020,3,276,138,0,2019,2021,5,136,0,0,2020,2019,1,0,0,0,2020,
        2021,1,0,0,0,2021,2022,1,0,0,0,2022,2024,5,2,0,0,2023,2025,5,136,
        0,0,2024,2023,1,0,0,0,2024,2025,1,0,0,0,2025,2027,1,0,0,0,2026,2018,
        1,0,0,0,2026,2027,1,0,0,0,2027,2028,1,0,0,0,2028,2030,3,206,103,
        0,2029,2031,5,136,0,0,2030,2029,1,0,0,0,2030,2031,1,0,0,0,2031,2036,
        1,0,0,0,2032,2034,3,198,99,0,2033,2035,5,136,0,0,2034,2033,1,0,0,
        0,2034,2035,1,0,0,0,2035,2037,1,0,0,0,2036,2032,1,0,0,0,2036,2037,
        1,0,0,0,2037,2038,1,0,0,0,2038,2040,5,25,0,0,2039,2041,5,136,0,0,
        2040,2039,1,0,0,0,2040,2041,1,0,0,0,2041,2042,1,0,0,0,2042,2044,
        3,228,114,0,2043,2045,5,136,0,0,2044,2043,1,0,0,0,2044,2045,1,0,
        0,0,2045,2046,1,0,0,0,2046,2047,5,12,0,0,2047,257,1,0,0,0,2048,2050,
        5,58,0,0,2049,2051,5,136,0,0,2050,2049,1,0,0,0,2050,2051,1,0,0,0,
        2051,2052,1,0,0,0,2052,2054,5,6,0,0,2053,2055,5,136,0,0,2054,2053,
        1,0,0,0,2054,2055,1,0,0,0,2055,2056,1,0,0,0,2056,2058,3,56,28,0,
        2057,2059,5,136,0,0,2058,2057,1,0,0,0,2058,2059,1,0,0,0,2059,2060,
        1,0,0,0,2060,2061,5,7,0,0,2061,2105,1,0,0,0,2062,2064,5,100,0,0,
        2063,2065,5,136,0,0,2064,2063,1,0,0,0,2064,2065,1,0,0,0,2065,2066,
        1,0,0,0,2066,2068,5,6,0,0,2067,2069,5,136,0,0,2068,2067,1,0,0,0,
        2068,2069,1,0,0,0,2069,2070,1,0,0,0,2070,2072,3,56,28,0,2071,2073,
        5,136,0,0,2072,2071,1,0,0,0,2072,2073,1,0,0,0,2073,2074,1,0,0,0,
        2074,2075,5,7,0,0,2075,2105,1,0,0,0,2076,2078,5,101,0,0,2077,2079,
        5,136,0,0,2078,2077,1,0,0,0,2078,2079,1,0,0,0,2079,2080,1,0,0,0,
        2080,2082,5,6,0,0,2081,2083,5,136,0,0,2082,2081,1,0,0,0,2082,2083,
        1,0,0,0,2083,2084,1,0,0,0,2084,2086,3,56,28,0,2085,2087,5,136,0,
        0,2086,2085,1,0,0,0,2086,2087,1,0,0,0,2087,2088,1,0,0,0,2088,2089,
        5,7,0,0,2089,2105,1,0,0,0,2090,2092,5,102,0,0,2091,2093,5,136,0,
        0,2092,2091,1,0,0,0,2092,2093,1,0,0,0,2093,2094,1,0,0,0,2094,2096,
        5,6,0,0,2095,2097,5,136,0,0,2096,2095,1,0,0,0,2096,2097,1,0,0,0,
        2097,2098,1,0,0,0,2098,2100,3,56,28,0,2099,2101,5,136,0,0,2100,2099,
        1,0,0,0,2100,2101,1,0,0,0,2101,2102,1,0,0,0,2102,2103,5,7,0,0,2103,
        2105,1,0,0,0,2104,2048,1,0,0,0,2104,2062,1,0,0,0,2104,2076,1,0,0,
        0,2104,2090,1,0,0,0,2105,259,1,0,0,0,2106,2107,3,206,103,0,2107,
        261,1,0,0,0,2108,2110,5,6,0,0,2109,2111,5,136,0,0,2110,2109,1,0,
        0,0,2110,2111,1,0,0,0,2111,2112,1,0,0,0,2112,2114,3,228,114,0,2113,
        2115,5,136,0,0,2114,2113,1,0,0,0,2114,2115,1,0,0,0,2115,2116,1,0,
        0,0,2116,2117,5,7,0,0,2117,263,1,0,0,0,2118,2119,3,276,138,0,2119,
        2120,5,136,0,0,2120,2121,5,91,0,0,2121,2122,5,136,0,0,2122,2123,
        3,228,114,0,2123,265,1,0,0,0,2124,2125,3,274,137,0,2125,2126,3,144,
        72,0,2126,267,1,0,0,0,2127,2128,3,272,136,0,2128,269,1,0,0,0,2129,
        2130,3,144,72,0,2130,271,1,0,0,0,2131,2132,3,274,137,0,2132,2133,
        3,144,72,0,2133,273,1,0,0,0,2134,2135,3,144,72,0,2135,2136,5,4,0,
        0,2136,2138,1,0,0,0,2137,2134,1,0,0,0,2138,2141,1,0,0,0,2139,2137,
        1,0,0,0,2139,2140,1,0,0,0,2140,275,1,0,0,0,2141,2139,1,0,0,0,2142,
        2143,3,144,72,0,2143,277,1,0,0,0,2144,2151,3,280,140,0,2145,2151,
        5,93,0,0,2146,2151,3,282,141,0,2147,2151,5,118,0,0,2148,2151,3,136,
        68,0,2149,2151,3,140,70,0,2150,2144,1,0,0,0,2150,2145,1,0,0,0,2150,
        2146,1,0,0,0,2150,2147,1,0,0,0,2150,2148,1,0,0,0,2150,2149,1,0,0,
        0,2151,279,1,0,0,0,2152,2153,7,7,0,0,2153,281,1,0,0,0,2154,2157,
        3,286,143,0,2155,2157,3,284,142,0,2156,2154,1,0,0,0,2156,2155,1,
        0,0,0,2157,283,1,0,0,0,2158,2159,7,8,0,0,2159,285,1,0,0,0,2160,2161,
        7,9,0,0,2161,287,1,0,0,0,2162,2163,3,292,146,0,2163,289,1,0,0,0,
        2164,2167,5,26,0,0,2165,2168,3,144,72,0,2166,2168,5,107,0,0,2167,
        2165,1,0,0,0,2167,2166,1,0,0,0,2168,291,1,0,0,0,2169,2172,3,144,
        72,0,2170,2172,3,146,73,0,2171,2169,1,0,0,0,2171,2170,1,0,0,0,2172,
        293,1,0,0,0,2173,2174,7,10,0,0,2174,295,1,0,0,0,2175,2176,7,11,0,
        0,2176,297,1,0,0,0,2177,2178,7,12,0,0,2178,299,1,0,0,0,405,303,308,
        314,318,322,326,328,331,334,342,346,350,353,357,364,368,371,375,
        379,383,388,392,395,399,403,407,412,416,419,423,426,429,433,439,
        443,449,453,459,465,471,474,477,481,487,490,493,497,501,505,509,
        515,518,522,528,532,535,538,542,546,550,554,559,563,567,569,574,
        578,580,584,588,590,592,598,602,608,614,620,625,631,634,640,642,
        646,650,655,660,663,669,673,677,682,686,689,696,700,704,709,713,
        718,723,726,730,734,739,742,744,747,753,756,760,766,772,776,782,
        786,791,795,799,803,809,813,819,823,825,829,831,835,837,841,843,
        849,853,857,861,865,869,873,877,883,886,889,895,898,902,905,909,
        913,915,919,921,924,928,930,934,936,942,946,952,960,964,968,974,
        987,991,997,1002,1006,1012,1017,1021,1023,1027,1031,1035,1040,1044,
        1047,1050,1054,1057,1060,1070,1075,1079,1083,1088,1090,1093,1097,
        1100,1103,1111,1116,1120,1124,1126,1130,1135,1140,1144,1146,1148,
        1151,1156,1160,1166,1171,1176,1187,1193,1199,1203,1207,1210,1214,
        1217,1223,1227,1231,1235,1237,1241,1245,1249,1253,1256,1264,1268,
        1272,1276,1280,1283,1291,1296,1301,1304,1310,1314,1318,1325,1329,
        1332,1335,1343,1348,1355,1360,1363,1367,1371,1375,1381,1385,1390,
        1395,1399,1402,1404,1409,1413,1423,1430,1443,1447,1453,1457,1461,
        1466,1471,1475,1479,1483,1488,1495,1499,1504,1509,1513,1518,1522,
        1525,1532,1539,1542,1548,1551,1557,1561,1565,1569,1573,1578,1583,
        1587,1592,1595,1604,1613,1618,1631,1634,1642,1646,1651,1658,1663,
        1670,1674,1679,1683,1689,1693,1696,1699,1703,1709,1713,1716,1719,
        1725,1728,1731,1735,1741,1744,1747,1751,1755,1759,1763,1767,1770,
        1775,1780,1785,1790,1796,1800,1802,1806,1810,1812,1814,1822,1827,
        1838,1848,1858,1863,1867,1874,1879,1884,1889,1894,1899,1902,1914,
        1917,1924,1938,1943,1946,1950,1959,1963,1967,1978,1982,1986,1990,
        1996,2000,2004,2007,2010,2016,2020,2024,2026,2030,2034,2036,2040,
        2044,2050,2054,2058,2064,2068,2072,2078,2082,2086,2092,2096,2100,
        2104,2110,2114,2139,2150,2156,2167,2171
    ]

class s_cypherParser ( Parser ):

    grammarFileName = "s_cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "','", "'='", "'+='", "'.'", "'*'", "'('", 
                     "')'", "'{'", "'}'", "':'", "'['", "']'", "'/'", "'%'", 
                     "'^'", "'+'", "'-'", "'<>'", "'<'", "'<='", "'>'", 
                     "'>='", "'..'", "';'", "'|'", "'$'", "'\\u27E8'", "'\\u3008'", 
                     "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
                     "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", 
                     "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", 
                     "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
                     "'\\uFF0D'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'NOW'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "AtT", "PoundT", "PoundValue", 
                      "NOW", "AT_TIME", "SNAPSHOT", "BETWEEN", "SCOPE", 
                      "STALE", "DURING", "OVERLAPS", "UNION", "ALL", "OPTIONAL", 
                      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", 
                      "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", 
                      "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", 
                      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
                      "WHERE", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", 
                      "CONTAINS", "IN", "IS", "NULL", "COUNT", "CASE", "ELSE", 
                      "END", "WHEN", "THEN", "ANY", "NONE", "SINGLE", "EXISTS", 
                      "TRUE", "FALSE", "HexInteger", "DecimalInteger", "OctalInteger", 
                      "HexLetter", "HexDigit", "Digit", "NonZeroDigit", 
                      "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", 
                      "RegularDecimalReal", "StringLiteral", "EscapedChar", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Query = 0
    RULE_oC_MultiPartQuery = 1
    RULE_oC_Match = 2
    RULE_oC_UpdatingClause = 3
    RULE_s_Create = 4
    RULE_s_Merge = 5
    RULE_s_Set = 6
    RULE_s_Stale = 7
    RULE_oC_SetItem = 8
    RULE_s_SetPropertyItemOne = 9
    RULE_s_SetPropertyItemTwo = 10
    RULE_s_SetValueItem = 11
    RULE_s_StaleItem = 12
    RULE_s_Delete = 13
    RULE_s_DeleteItem = 14
    RULE_oC_RemoveItem = 15
    RULE_s_AtTime = 16
    RULE_s_Between = 17
    RULE_s_TimeWindowLimit = 18
    RULE_oC_InQueryCall = 19
    RULE_oC_StandaloneCall = 20
    RULE_oC_ExplicitProcedureInvocation = 21
    RULE_s_ExplicitExpression = 22
    RULE_s_YieldItems = 23
    RULE_s_YieldItem = 24
    RULE_s_WithPartQuery = 25
    RULE_s_With = 26
    RULE_oC_ExistentialSubquery = 27
    RULE_oC_FilterExpression = 28
    RULE_s_Snapshot = 29
    RULE_s_Scope = 30
    RULE_oC_PatternPart = 31
    RULE_s_PathFunctionPattern = 32
    RULE_s_SinglePathPattern = 33
    RULE_oC_NodePattern = 34
    RULE_s_Properties = 35
    RULE_s_PropertiesPattern = 36
    RULE_s_PropertyNode = 37
    RULE_s_ValueNode = 38
    RULE_oC_RelationshipDetail = 39
    RULE_oC_ComparisonExpression = 40
    RULE_oC_StringListNullPredicateExpression = 41
    RULE_oC_AddOrSubtractExpression = 42
    RULE_s_MultiplyDivideModuloOperator = 43
    RULE_s_PowerOfOperator = 44
    RULE_s_AddOrSubtractOperator = 45
    RULE_s_ComparisonOperator = 46
    RULE_oC_MultiplyDivideModuloExpression = 47
    RULE_oC_PowerOfExpression = 48
    RULE_oC_ListOperatorExpression = 49
    RULE_s_SingleIndexExpression = 50
    RULE_s_DoubleIndexExpression = 51
    RULE_s_LeftExpression = 52
    RULE_s_RightExpression = 53
    RULE_oC_CaseExpression = 54
    RULE_s_ResultExpression = 55
    RULE_oC_PropertyOrLabelsExpression = 56
    RULE_s_PoundTExpression = 57
    RULE_s_PropertyLookupName = 58
    RULE_s_PropertyLookupTime = 59
    RULE_s_TimePropertyItem = 60
    RULE_s_TimePredicateExpression = 61
    RULE_s_AtTElement = 62
    RULE_s_PoundTElement = 63
    RULE_s_TElement = 64
    RULE_s_TimePointLiteral = 65
    RULE_oC_FunctionInvocation = 66
    RULE_s_FunctionInvocationExpression = 67
    RULE_oC_ListLiteral = 68
    RULE_s_ListLiteralExpression = 69
    RULE_oC_MapLiteral = 70
    RULE_s_MapKeyValue = 71
    RULE_oC_SymbolicName = 72
    RULE_oC_ReservedWord = 73
    RULE_oC_Cypher = 74
    RULE_oC_Statement = 75
    RULE_oC_RegularQuery = 76
    RULE_oC_Union = 77
    RULE_oC_SingleQuery = 78
    RULE_oC_SinglePartQuery = 79
    RULE_oC_ReadingClause = 80
    RULE_oC_Unwind = 81
    RULE_oC_Merge = 82
    RULE_oC_MergeAction = 83
    RULE_oC_Create = 84
    RULE_oC_Set = 85
    RULE_oC_Delete = 86
    RULE_oC_Remove = 87
    RULE_oC_YieldItems = 88
    RULE_oC_YieldItem = 89
    RULE_oC_With = 90
    RULE_oC_Return = 91
    RULE_oC_ProjectionBody = 92
    RULE_oC_ProjectionItems = 93
    RULE_oC_ProjectionItem = 94
    RULE_oC_Order = 95
    RULE_oC_Skip = 96
    RULE_oC_Limit = 97
    RULE_oC_SortItem = 98
    RULE_oC_Where = 99
    RULE_oC_Pattern = 100
    RULE_oC_AnonymousPatternPart = 101
    RULE_oC_PatternElement = 102
    RULE_oC_RelationshipsPattern = 103
    RULE_oC_PatternElementChain = 104
    RULE_oC_RelationshipPattern = 105
    RULE_oC_Properties = 106
    RULE_oC_RelationshipTypes = 107
    RULE_oC_NodeLabels = 108
    RULE_oC_NodeLabel = 109
    RULE_oC_RangeLiteral = 110
    RULE_oC_LabelName = 111
    RULE_oC_RelTypeName = 112
    RULE_oC_PropertyExpression = 113
    RULE_oC_Expression = 114
    RULE_oC_OrExpression = 115
    RULE_oC_XorExpression = 116
    RULE_oC_AndExpression = 117
    RULE_oC_NotExpression = 118
    RULE_oC_PartialComparisonExpression = 119
    RULE_oC_StringPredicateExpression = 120
    RULE_oC_ListPredicateExpression = 121
    RULE_oC_NullPredicateExpression = 122
    RULE_oC_UnaryAddOrSubtractExpression = 123
    RULE_oC_PropertyLookup = 124
    RULE_oC_Atom = 125
    RULE_oC_CaseAlternative = 126
    RULE_oC_ListComprehension = 127
    RULE_oC_PatternComprehension = 128
    RULE_oC_Quantifier = 129
    RULE_oC_PatternPredicate = 130
    RULE_oC_ParenthesizedExpression = 131
    RULE_oC_IdInColl = 132
    RULE_oC_FunctionName = 133
    RULE_oC_ImplicitProcedureInvocation = 134
    RULE_oC_ProcedureResultField = 135
    RULE_oC_ProcedureName = 136
    RULE_oC_Namespace = 137
    RULE_oC_Variable = 138
    RULE_oC_Literal = 139
    RULE_oC_BooleanLiteral = 140
    RULE_oC_NumberLiteral = 141
    RULE_oC_IntegerLiteral = 142
    RULE_oC_DoubleLiteral = 143
    RULE_oC_PropertyKeyName = 144
    RULE_oC_Parameter = 145
    RULE_oC_SchemaName = 146
    RULE_oC_LeftArrowHead = 147
    RULE_oC_RightArrowHead = 148
    RULE_oC_Dash = 149

    ruleNames =  [ "oC_Query", "oC_MultiPartQuery", "oC_Match", "oC_UpdatingClause", 
                   "s_Create", "s_Merge", "s_Set", "s_Stale", "oC_SetItem", 
                   "s_SetPropertyItemOne", "s_SetPropertyItemTwo", "s_SetValueItem", 
                   "s_StaleItem", "s_Delete", "s_DeleteItem", "oC_RemoveItem", 
                   "s_AtTime", "s_Between", "s_TimeWindowLimit", "oC_InQueryCall", 
                   "oC_StandaloneCall", "oC_ExplicitProcedureInvocation", 
                   "s_ExplicitExpression", "s_YieldItems", "s_YieldItem", 
                   "s_WithPartQuery", "s_With", "oC_ExistentialSubquery", 
                   "oC_FilterExpression", "s_Snapshot", "s_Scope", "oC_PatternPart", 
                   "s_PathFunctionPattern", "s_SinglePathPattern", "oC_NodePattern", 
                   "s_Properties", "s_PropertiesPattern", "s_PropertyNode", 
                   "s_ValueNode", "oC_RelationshipDetail", "oC_ComparisonExpression", 
                   "oC_StringListNullPredicateExpression", "oC_AddOrSubtractExpression", 
                   "s_MultiplyDivideModuloOperator", "s_PowerOfOperator", 
                   "s_AddOrSubtractOperator", "s_ComparisonOperator", "oC_MultiplyDivideModuloExpression", 
                   "oC_PowerOfExpression", "oC_ListOperatorExpression", 
                   "s_SingleIndexExpression", "s_DoubleIndexExpression", 
                   "s_LeftExpression", "s_RightExpression", "oC_CaseExpression", 
                   "s_ResultExpression", "oC_PropertyOrLabelsExpression", 
                   "s_PoundTExpression", "s_PropertyLookupName", "s_PropertyLookupTime", 
                   "s_TimePropertyItem", "s_TimePredicateExpression", "s_AtTElement", 
                   "s_PoundTElement", "s_TElement", "s_TimePointLiteral", 
                   "oC_FunctionInvocation", "s_FunctionInvocationExpression", 
                   "oC_ListLiteral", "s_ListLiteralExpression", "oC_MapLiteral", 
                   "s_MapKeyValue", "oC_SymbolicName", "oC_ReservedWord", 
                   "oC_Cypher", "oC_Statement", "oC_RegularQuery", "oC_Union", 
                   "oC_SingleQuery", "oC_SinglePartQuery", "oC_ReadingClause", 
                   "oC_Unwind", "oC_Merge", "oC_MergeAction", "oC_Create", 
                   "oC_Set", "oC_Delete", "oC_Remove", "oC_YieldItems", 
                   "oC_YieldItem", "oC_With", "oC_Return", "oC_ProjectionBody", 
                   "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", 
                   "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", 
                   "oC_AnonymousPatternPart", "oC_PatternElement", "oC_RelationshipsPattern", 
                   "oC_PatternElementChain", "oC_RelationshipPattern", "oC_Properties", 
                   "oC_RelationshipTypes", "oC_NodeLabels", "oC_NodeLabel", 
                   "oC_RangeLiteral", "oC_LabelName", "oC_RelTypeName", 
                   "oC_PropertyExpression", "oC_Expression", "oC_OrExpression", 
                   "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", 
                   "oC_PartialComparisonExpression", "oC_StringPredicateExpression", 
                   "oC_ListPredicateExpression", "oC_NullPredicateExpression", 
                   "oC_UnaryAddOrSubtractExpression", "oC_PropertyLookup", 
                   "oC_Atom", "oC_CaseAlternative", "oC_ListComprehension", 
                   "oC_PatternComprehension", "oC_Quantifier", "oC_PatternPredicate", 
                   "oC_ParenthesizedExpression", "oC_IdInColl", "oC_FunctionName", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_Variable", "oC_Literal", 
                   "oC_BooleanLiteral", "oC_NumberLiteral", "oC_IntegerLiteral", 
                   "oC_DoubleLiteral", "oC_PropertyKeyName", "oC_Parameter", 
                   "oC_SchemaName", "oC_LeftArrowHead", "oC_RightArrowHead", 
                   "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    AtT=46
    PoundT=47
    PoundValue=48
    NOW=49
    AT_TIME=50
    SNAPSHOT=51
    BETWEEN=52
    SCOPE=53
    STALE=54
    DURING=55
    OVERLAPS=56
    UNION=57
    ALL=58
    OPTIONAL=59
    MATCH=60
    UNWIND=61
    AS=62
    MERGE=63
    ON=64
    CREATE=65
    SET=66
    DETACH=67
    DELETE=68
    REMOVE=69
    CALL=70
    YIELD=71
    WITH=72
    RETURN=73
    DISTINCT=74
    ORDER=75
    BY=76
    L_SKIP=77
    LIMIT=78
    ASCENDING=79
    ASC=80
    DESCENDING=81
    DESC=82
    WHERE=83
    OR=84
    XOR=85
    AND=86
    NOT=87
    STARTS=88
    ENDS=89
    CONTAINS=90
    IN=91
    IS=92
    NULL=93
    COUNT=94
    CASE=95
    ELSE=96
    END=97
    WHEN=98
    THEN=99
    ANY=100
    NONE=101
    SINGLE=102
    EXISTS=103
    TRUE=104
    FALSE=105
    HexInteger=106
    DecimalInteger=107
    OctalInteger=108
    HexLetter=109
    HexDigit=110
    Digit=111
    NonZeroDigit=112
    NonZeroOctDigit=113
    OctDigit=114
    ZeroDigit=115
    ExponentDecimalReal=116
    RegularDecimalReal=117
    StringLiteral=118
    EscapedChar=119
    CONSTRAINT=120
    DO=121
    FOR=122
    REQUIRE=123
    UNIQUE=124
    MANDATORY=125
    SCALAR=126
    OF=127
    ADD=128
    DROP=129
    FILTER=130
    EXTRACT=131
    UnescapedSymbolicName=132
    IdentifierStart=133
    IdentifierPart=134
    EscapedSymbolicName=135
    SP=136
    WHITESPACE=137
    Comment=138

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StandaloneCallContext,0)


        def s_TimeWindowLimit(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimeWindowLimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = s_cypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Query)
        try:
            self.state = 303
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 300
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 301
                self.oC_StandaloneCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 302
                self.s_TimeWindowLimit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def s_WithPartQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_WithPartQueryContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_WithPartQueryContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = s_cypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_MultiPartQuery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 305
                    self.s_WithPartQuery()

                else:
                    raise NoViableAltException(self)
                self.state = 308 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

            self.state = 310
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = s_cypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 312
                self.match(s_cypherParser.OPTIONAL)
                self.state = 313
                self.match(s_cypherParser.SP)


            self.state = 316
            self.match(s_cypherParser.MATCH)
            self.state = 318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 317
                self.match(s_cypherParser.SP)


            self.state = 320
            self.oC_Pattern()
            self.state = 328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 322
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 321
                    self.match(s_cypherParser.SP)


                self.state = 326
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [50]:
                    self.state = 324
                    self.s_AtTime()
                    pass
                elif token in [52]:
                    self.state = 325
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 330
                    self.match(s_cypherParser.SP)


                self.state = 333
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_Create(self):
            return self.getTypedRuleContext(s_cypherParser.S_CreateContext,0)


        def s_Merge(self):
            return self.getTypedRuleContext(s_cypherParser.S_MergeContext,0)


        def s_Set(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RemoveContext,0)


        def s_Stale(self):
            return self.getTypedRuleContext(s_cypherParser.S_StaleContext,0)


        def s_Delete(self):
            return self.getTypedRuleContext(s_cypherParser.S_DeleteContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = s_cypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_oC_UpdatingClause)
        try:
            self.state = 342
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65]:
                self.enterOuterAlt(localctx, 1)
                self.state = 336
                self.s_Create()
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 2)
                self.state = 337
                self.s_Merge()
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 3)
                self.state = 338
                self.s_Set()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 4)
                self.state = 339
                self.oC_Remove()
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 5)
                self.state = 340
                self.s_Stale()
                pass
            elif token in [67, 68]:
                self.enterOuterAlt(localctx, 6)
                self.state = 341
                self.s_Delete()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Create" ):
                listener.enterS_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Create" ):
                listener.exitS_Create(self)




    def s_Create(self):

        localctx = s_cypherParser.S_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_s_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self.match(s_cypherParser.CREATE)
            self.state = 346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 345
                self.match(s_cypherParser.SP)


            self.state = 348
            self.oC_Pattern()
            self.state = 353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 349
                    self.match(s_cypherParser.SP)


                self.state = 352
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Merge" ):
                listener.enterS_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Merge" ):
                listener.exitS_Merge(self)




    def s_Merge(self):

        localctx = s_cypherParser.S_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_s_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self.match(s_cypherParser.MERGE)
            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 356
                self.match(s_cypherParser.SP)


            self.state = 359
            self.oC_PatternPart()
            self.state = 364
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 360
                    self.match(s_cypherParser.SP)
                    self.state = 361
                    self.oC_MergeAction() 
                self.state = 366
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

            self.state = 371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 367
                    self.match(s_cypherParser.SP)


                self.state = 370
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Set" ):
                listener.enterS_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Set" ):
                listener.exitS_Set(self)




    def s_Set(self):

        localctx = s_cypherParser.S_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_s_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.match(s_cypherParser.SET)
            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 374
                self.match(s_cypherParser.SP)


            self.state = 377
            self.oC_SetItem()
            self.state = 388
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 379
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 378
                        self.match(s_cypherParser.SP)


                    self.state = 381
                    self.match(s_cypherParser.T__0)
                    self.state = 383
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 382
                        self.match(s_cypherParser.SP)


                    self.state = 385
                    self.oC_SetItem() 
                self.state = 390
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

            self.state = 395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 391
                    self.match(s_cypherParser.SP)


                self.state = 394
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def s_StaleItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StaleItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StaleItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Stale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Stale" ):
                listener.enterS_Stale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Stale" ):
                listener.exitS_Stale(self)




    def s_Stale(self):

        localctx = s_cypherParser.S_StaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_s_Stale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.match(s_cypherParser.STALE)
            self.state = 399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 398
                self.match(s_cypherParser.SP)


            self.state = 401
            self.s_StaleItem()
            self.state = 412
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 403
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 402
                        self.match(s_cypherParser.SP)


                    self.state = 405
                    self.match(s_cypherParser.T__0)
                    self.state = 407
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 406
                        self.match(s_cypherParser.SP)


                    self.state = 409
                    self.s_StaleItem() 
                self.state = 414
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

            self.state = 419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 415
                    self.match(s_cypherParser.SP)


                self.state = 418
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_SetPropertyItemOne(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemOneContext,0)


        def s_SetPropertyItemTwo(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemTwoContext,0)


        def s_SetValueItem(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetValueItemContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = s_cypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 505
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 421
                self.oC_PropertyExpression()
                self.state = 426
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 423
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 422
                        self.match(s_cypherParser.SP)


                    self.state = 425
                    self.s_AtTElement()


                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 428
                    self.match(s_cypherParser.SP)


                self.state = 431
                self.match(s_cypherParser.T__1)
                self.state = 433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 432
                    self.match(s_cypherParser.SP)


                self.state = 435
                self.oC_Expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 437
                self.oC_Variable()
                self.state = 439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 438
                    self.match(s_cypherParser.SP)


                self.state = 441
                self.match(s_cypherParser.T__1)
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 442
                    self.match(s_cypherParser.SP)


                self.state = 445
                self.oC_Expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 447
                self.oC_Variable()
                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 448
                    self.match(s_cypherParser.SP)


                self.state = 451
                self.match(s_cypherParser.T__2)
                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 452
                    self.match(s_cypherParser.SP)


                self.state = 455
                self.oC_Expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 457
                self.oC_Variable()
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 458
                    self.match(s_cypherParser.SP)


                self.state = 461
                self.oC_NodeLabels()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 463
                self.oC_Variable()
                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 464
                    self.match(s_cypherParser.SP)


                self.state = 467
                self.s_AtTElement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 469
                self.oC_Variable()
                self.state = 474
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 471
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 470
                        self.match(s_cypherParser.SP)


                    self.state = 473
                    self.s_AtTElement()


                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 476
                    self.match(s_cypherParser.SP)


                self.state = 479
                self.match(s_cypherParser.T__3)
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 480
                    self.match(s_cypherParser.SP)


                self.state = 483
                self.s_SetPropertyItemOne()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 485
                self.oC_Variable()
                self.state = 490
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 487
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 486
                        self.match(s_cypherParser.SP)


                    self.state = 489
                    self.s_AtTElement()


                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 492
                    self.match(s_cypherParser.SP)


                self.state = 495
                self.match(s_cypherParser.T__3)
                self.state = 497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 496
                    self.match(s_cypherParser.SP)


                self.state = 499
                self.s_SetPropertyItemTwo()
                self.state = 501
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 500
                    self.match(s_cypherParser.SP)


                self.state = 503
                self.s_SetValueItem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemOneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemOne

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemOne" ):
                listener.enterS_SetPropertyItemOne(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemOne" ):
                listener.exitS_SetPropertyItemOne(self)




    def s_SetPropertyItemOne(self):

        localctx = s_cypherParser.S_SetPropertyItemOneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_s_SetPropertyItemOne)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.oC_PropertyKeyName()
            self.state = 509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 508
                self.match(s_cypherParser.SP)


            self.state = 511
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemTwoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemTwo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemTwo" ):
                listener.enterS_SetPropertyItemTwo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemTwo" ):
                listener.exitS_SetPropertyItemTwo(self)




    def s_SetPropertyItemTwo(self):

        localctx = s_cypherParser.S_SetPropertyItemTwoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_s_SetPropertyItemTwo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.oC_PropertyKeyName()
            self.state = 518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 514
                    self.match(s_cypherParser.SP)


                self.state = 517
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetValueItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetValueItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetValueItem" ):
                listener.enterS_SetValueItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetValueItem" ):
                listener.exitS_SetValueItem(self)




    def s_SetValueItem(self):

        localctx = s_cypherParser.S_SetValueItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_s_SetValueItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.match(s_cypherParser.PoundValue)
            self.state = 522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 521
                self.match(s_cypherParser.SP)


            self.state = 524
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def s_PropertyLookupName(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StaleItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StaleItem" ):
                listener.enterS_StaleItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StaleItem" ):
                listener.exitS_StaleItem(self)




    def s_StaleItem(self):

        localctx = s_cypherParser.S_StaleItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_s_StaleItem)
        self._la = 0 # Token type
        try:
            self.state = 538
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 526
                self.oC_Expression()
                self.state = 528
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
                if la_ == 1:
                    self.state = 527
                    self.match(s_cypherParser.SP)


                self.state = 530
                self.s_PropertyLookupName()
                self.state = 535
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 532
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 531
                        self.match(s_cypherParser.SP)


                    self.state = 534
                    self.match(s_cypherParser.PoundValue)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 537
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def s_DeleteItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DeleteItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DeleteItemContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Delete" ):
                listener.enterS_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Delete" ):
                listener.exitS_Delete(self)




    def s_Delete(self):

        localctx = s_cypherParser.S_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_s_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 540
                self.match(s_cypherParser.DETACH)
                self.state = 541
                self.match(s_cypherParser.SP)


            self.state = 544
            self.match(s_cypherParser.DELETE)
            self.state = 546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 545
                self.match(s_cypherParser.SP)


            self.state = 548
            self.s_DeleteItem()
            self.state = 559
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 550
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 549
                        self.match(s_cypherParser.SP)


                    self.state = 552
                    self.match(s_cypherParser.T__0)
                    self.state = 554
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 553
                        self.match(s_cypherParser.SP)


                    self.state = 556
                    self.s_DeleteItem() 
                self.state = 561
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

            self.state = 569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 562
                    self.match(s_cypherParser.SP)


                self.state = 567
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [50]:
                    self.state = 565
                    self.s_AtTime()
                    pass
                elif token in [52]:
                    self.state = 566
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def s_PropertyLookupName(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DeleteItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DeleteItem" ):
                listener.enterS_DeleteItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DeleteItem" ):
                listener.exitS_DeleteItem(self)




    def s_DeleteItem(self):

        localctx = s_cypherParser.S_DeleteItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_s_DeleteItem)
        self._la = 0 # Token type
        try:
            self.state = 592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 571
                self.oC_Expression()
                self.state = 572
                self.s_PropertyLookupName()
                self.state = 580
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 574
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 573
                        self.match(s_cypherParser.SP)


                    self.state = 578
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [48]:
                        self.state = 576
                        self.match(s_cypherParser.PoundValue)
                        pass
                    elif token in [46]:
                        self.state = 577
                        self.s_AtTElement()
                        pass
                    else:
                        raise NoViableAltException(self)



                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 582
                self.oC_Expression()
                self.state = 590
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                if la_ == 1:
                    self.state = 584
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 583
                        self.match(s_cypherParser.SP)


                    self.state = 588
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [48]:
                        self.state = 586
                        self.match(s_cypherParser.PoundValue)
                        pass
                    elif token in [46]:
                        self.state = 587
                        self.s_AtTElement()
                        pass
                    else:
                        raise NoViableAltException(self)



                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = s_cypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_oC_RemoveItem)
        try:
            self.state = 598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 594
                self.oC_Variable()
                self.state = 595
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 597
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTime" ):
                listener.enterS_AtTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTime" ):
                listener.exitS_AtTime(self)




    def s_AtTime(self):

        localctx = s_cypherParser.S_AtTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_s_AtTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            self.match(s_cypherParser.AT_TIME)
            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 601
                self.match(s_cypherParser.SP)


            self.state = 604
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_BetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Between

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Between" ):
                listener.enterS_Between(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Between" ):
                listener.exitS_Between(self)




    def s_Between(self):

        localctx = s_cypherParser.S_BetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_s_Between)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self.match(s_cypherParser.BETWEEN)
            self.state = 608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 607
                self.match(s_cypherParser.SP)


            self.state = 610
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimeWindowLimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_Snapshot(self):
            return self.getTypedRuleContext(s_cypherParser.S_SnapshotContext,0)


        def s_Scope(self):
            return self.getTypedRuleContext(s_cypherParser.S_ScopeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimeWindowLimit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimeWindowLimit" ):
                listener.enterS_TimeWindowLimit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimeWindowLimit" ):
                listener.exitS_TimeWindowLimit(self)




    def s_TimeWindowLimit(self):

        localctx = s_cypherParser.S_TimeWindowLimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_s_TimeWindowLimit)
        try:
            self.state = 614
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51]:
                self.enterOuterAlt(localctx, 1)
                self.state = 612
                self.s_Snapshot()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 613
                self.s_Scope()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def s_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.S_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = s_cypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self.match(s_cypherParser.CALL)
            self.state = 617
            self.match(s_cypherParser.SP)
            self.state = 618
            self.oC_ExplicitProcedureInvocation()
            self.state = 625
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 619
                    self.match(s_cypherParser.SP)


                self.state = 622
                self.match(s_cypherParser.YIELD)
                self.state = 623
                self.match(s_cypherParser.SP)
                self.state = 624
                self.s_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def s_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.S_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = s_cypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_oC_StandaloneCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self.match(s_cypherParser.CALL)
            self.state = 628
            self.match(s_cypherParser.SP)
            self.state = 631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 629
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 630
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 633
                    self.match(s_cypherParser.SP)


                self.state = 636
                self.match(s_cypherParser.YIELD)
                self.state = 637
                self.match(s_cypherParser.SP)
                self.state = 640
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [5]:
                    self.state = 638
                    self.match(s_cypherParser.T__4)
                    pass
                elif token in [49, 52, 94, 98, 100, 101, 102, 103, 109, 130, 131, 132, 135]:
                    self.state = 639
                    self.s_YieldItems()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_ExplicitExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ExplicitExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ExplicitExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.oC_ProcedureName()
            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 645
                self.match(s_cypherParser.SP)


            self.state = 648
            self.match(s_cypherParser.T__5)
            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 649
                self.match(s_cypherParser.SP)


            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 293296925799811392) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 343051394345409) != 0):
                self.state = 652
                self.s_ExplicitExpression()
                self.state = 660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 653
                    self.match(s_cypherParser.T__0)
                    self.state = 655
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 654
                        self.match(s_cypherParser.SP)


                    self.state = 657
                    self.s_ExplicitExpression()
                    self.state = 662
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 665
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ExplicitExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ExplicitExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ExplicitExpression" ):
                listener.enterS_ExplicitExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ExplicitExpression" ):
                listener.exitS_ExplicitExpression(self)




    def s_ExplicitExpression(self):

        localctx = s_cypherParser.S_ExplicitExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_s_ExplicitExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.oC_Expression()
            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 668
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_YieldItems" ):
                listener.enterS_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_YieldItems" ):
                listener.exitS_YieldItems(self)




    def s_YieldItems(self):

        localctx = s_cypherParser.S_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_s_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.s_YieldItem()
            self.state = 682
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 673
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 672
                        self.match(s_cypherParser.SP)


                    self.state = 675
                    self.match(s_cypherParser.T__0)
                    self.state = 677
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 676
                        self.match(s_cypherParser.SP)


                    self.state = 679
                    self.s_YieldItem() 
                self.state = 684
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

            self.state = 689
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 685
                    self.match(s_cypherParser.SP)


                self.state = 688
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_YieldItem" ):
                listener.enterS_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_YieldItem" ):
                listener.exitS_YieldItem(self)




    def s_YieldItem(self):

        localctx = s_cypherParser.S_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_s_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.oC_ProcedureResultField()
            self.state = 696
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 692
                self.match(s_cypherParser.SP)
                self.state = 693
                self.match(s_cypherParser.AS)
                self.state = 694
                self.match(s_cypherParser.SP)
                self.state = 695
                self.oC_Variable()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_With(self):
            return self.getTypedRuleContext(s_cypherParser.S_WithContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_WithPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_WithPartQuery" ):
                listener.enterS_WithPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_WithPartQuery" ):
                listener.exitS_WithPartQuery(self)




    def s_WithPartQuery(self):

        localctx = s_cypherParser.S_WithPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_s_WithPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & 2055) != 0):
                self.state = 698
                self.oC_ReadingClause()
                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 699
                    self.match(s_cypherParser.SP)


                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & 64001) != 0):
                self.state = 707
                self.oC_UpdatingClause()
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 708
                    self.match(s_cypherParser.SP)


                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 716
            self.s_With()
            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 717
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_With" ):
                listener.enterS_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_With" ):
                listener.exitS_With(self)




    def s_With(self):

        localctx = s_cypherParser.S_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_s_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.match(s_cypherParser.WITH)
            self.state = 721
            self.oC_ProjectionBody()
            self.state = 726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 722
                    self.match(s_cypherParser.SP)


                self.state = 725
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExistentialSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExistentialSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExistentialSubquery" ):
                listener.enterOC_ExistentialSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExistentialSubquery" ):
                listener.exitOC_ExistentialSubquery(self)




    def oC_ExistentialSubquery(self):

        localctx = s_cypherParser.OC_ExistentialSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_oC_ExistentialSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.match(s_cypherParser.EXISTS)
            self.state = 730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 729
                self.match(s_cypherParser.SP)


            self.state = 732
            self.match(s_cypherParser.T__7)
            self.state = 734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 733
                self.match(s_cypherParser.SP)


            self.state = 744
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 72, 73]:
                self.state = 736
                self.oC_RegularQuery()
                pass
            elif token in [6, 49, 52, 94, 98, 100, 101, 102, 103, 109, 130, 131, 132, 135]:
                self.state = 737
                self.oC_Pattern()
                self.state = 742
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 739
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 738
                        self.match(s_cypherParser.SP)


                    self.state = 741
                    self.oC_Where()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 746
                self.match(s_cypherParser.SP)


            self.state = 749
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IdInCollContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = s_cypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.oC_IdInColl()
            self.state = 756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 752
                    self.match(s_cypherParser.SP)


                self.state = 755
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SnapshotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Snapshot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Snapshot" ):
                listener.enterS_Snapshot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Snapshot" ):
                listener.exitS_Snapshot(self)




    def s_Snapshot(self):

        localctx = s_cypherParser.S_SnapshotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_s_Snapshot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.match(s_cypherParser.SNAPSHOT)
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 759
                self.match(s_cypherParser.SP)


            self.state = 762
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Scope" ):
                listener.enterS_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Scope" ):
                listener.exitS_Scope(self)




    def s_Scope(self):

        localctx = s_cypherParser.S_ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_s_Scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self.match(s_cypherParser.SCOPE)
            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 765
                self.match(s_cypherParser.SP)


            self.state = 768
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_PathFunctionPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PathFunctionPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AnonymousPatternPartContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = s_cypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 770
                self.oC_Variable()
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 771
                    self.match(s_cypherParser.SP)


                self.state = 774
                self.match(s_cypherParser.T__1)
                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 775
                    self.match(s_cypherParser.SP)


                self.state = 778
                self.s_PathFunctionPattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 780
                self.oC_Variable()
                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 781
                    self.match(s_cypherParser.SP)


                self.state = 784
                self.match(s_cypherParser.T__1)
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 785
                    self.match(s_cypherParser.SP)


                self.state = 788
                self.oC_AnonymousPatternPart()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 790
                self.oC_AnonymousPatternPart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PathFunctionPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def s_SinglePathPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_SinglePathPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PathFunctionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PathFunctionPattern" ):
                listener.enterS_PathFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PathFunctionPattern" ):
                listener.exitS_PathFunctionPattern(self)




    def s_PathFunctionPattern(self):

        localctx = s_cypherParser.S_PathFunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_s_PathFunctionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.oC_FunctionName()
            self.state = 795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 794
                self.match(s_cypherParser.SP)


            self.state = 797
            self.match(s_cypherParser.T__5)
            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 798
                self.match(s_cypherParser.SP)


            self.state = 801
            self.s_SinglePathPattern()
            self.state = 803
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 802
                self.match(s_cypherParser.SP)


            self.state = 805
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SinglePathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodePatternContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,i)


        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SinglePathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SinglePathPattern" ):
                listener.enterS_SinglePathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SinglePathPattern" ):
                listener.exitS_SinglePathPattern(self)




    def s_SinglePathPattern(self):

        localctx = s_cypherParser.S_SinglePathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_s_SinglePathPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.oC_NodePattern()
            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 808
                self.match(s_cypherParser.SP)


            self.state = 811
            self.oC_RelationshipPattern()
            self.state = 813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 812
                self.match(s_cypherParser.SP)


            self.state = 815
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def s_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = s_cypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self.match(s_cypherParser.T__5)
            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 818
                self.match(s_cypherParser.SP)


            self.state = 825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49 or _la==52 or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 2680059626449) != 0):
                self.state = 821
                self.oC_Variable()
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 822
                    self.match(s_cypherParser.SP)




            self.state = 831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 827
                self.oC_NodeLabels()
                self.state = 829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 828
                    self.match(s_cypherParser.SP)




            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 833
                self.s_AtTElement()
                self.state = 835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 834
                    self.match(s_cypherParser.SP)




            self.state = 843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==26:
                self.state = 839
                self.s_Properties()
                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 840
                    self.match(s_cypherParser.SP)




            self.state = 845
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertiesPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesPatternContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Properties" ):
                listener.enterS_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Properties" ):
                listener.exitS_Properties(self)




    def s_Properties(self):

        localctx = s_cypherParser.S_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_s_Properties)
        try:
            self.state = 849
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 847
                self.s_PropertiesPattern()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 848
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertyNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PropertyNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PropertyNodeContext,i)


        def s_ValueNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ValueNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ValueNodeContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertiesPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertiesPattern" ):
                listener.enterS_PropertiesPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertiesPattern" ):
                listener.exitS_PropertiesPattern(self)




    def s_PropertiesPattern(self):

        localctx = s_cypherParser.S_PropertiesPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_s_PropertiesPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.match(s_cypherParser.T__7)
            self.state = 886
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.state = 853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 852
                    self.match(s_cypherParser.SP)


                self.state = 855
                self.s_PropertyNode()
                self.state = 857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 856
                    self.match(s_cypherParser.SP)


                self.state = 859
                self.match(s_cypherParser.T__9)
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 860
                    self.match(s_cypherParser.SP)


                self.state = 863
                self.s_ValueNode()
                self.state = 883
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,138,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 865
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 864
                            self.match(s_cypherParser.SP)


                        self.state = 867
                        self.match(s_cypherParser.T__0)
                        self.state = 869
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 868
                            self.match(s_cypherParser.SP)


                        self.state = 871
                        self.s_PropertyNode()
                        self.state = 873
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 872
                            self.match(s_cypherParser.SP)


                        self.state = 875
                        self.match(s_cypherParser.T__9)
                        self.state = 877
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 876
                            self.match(s_cypherParser.SP)


                        self.state = 879
                        self.s_ValueNode() 
                    self.state = 885
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,138,self._ctx)



            self.state = 889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 888
                self.match(s_cypherParser.SP)


            self.state = 891
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyNode" ):
                listener.enterS_PropertyNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyNode" ):
                listener.exitS_PropertyNode(self)




    def s_PropertyNode(self):

        localctx = s_cypherParser.S_PropertyNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_s_PropertyNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self.oC_PropertyKeyName()
            self.state = 898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 894
                    self.match(s_cypherParser.SP)


                self.state = 897
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ValueNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ValueNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ValueNode" ):
                listener.enterS_ValueNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ValueNode" ):
                listener.exitS_ValueNode(self)




    def s_ValueNode(self):

        localctx = s_cypherParser.S_ValueNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_s_ValueNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.oC_Expression()
            self.state = 905
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 901
                    self.match(s_cypherParser.SP)


                self.state = 904
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RangeLiteralContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = s_cypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            self.match(s_cypherParser.T__10)
            self.state = 909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 908
                self.match(s_cypherParser.SP)


            self.state = 915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49 or _la==52 or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 2680059626449) != 0):
                self.state = 911
                self.oC_Variable()
                self.state = 913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 912
                    self.match(s_cypherParser.SP)




            self.state = 921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 917
                self.oC_RelationshipTypes()
                self.state = 919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 918
                    self.match(s_cypherParser.SP)




            self.state = 924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 923
                self.oC_RangeLiteral()


            self.state = 930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 926
                self.s_AtTElement()
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 927
                    self.match(s_cypherParser.SP)




            self.state = 936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==26:
                self.state = 932
                self.oC_Properties()
                self.state = 934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 933
                    self.match(s_cypherParser.SP)




            self.state = 938
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_StringListNullPredicateExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,i)


        def s_ComparisonOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ComparisonOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ComparisonOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = s_cypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.oC_StringListNullPredicateExpression()
            self.state = 952
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,157,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 942
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 941
                        self.match(s_cypherParser.SP)


                    self.state = 944
                    self.s_ComparisonOperator()
                    self.state = 946
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 945
                        self.match(s_cypherParser.SP)


                    self.state = 948
                    self.oC_StringListNullPredicateExpression() 
                self.state = 954
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,157,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def s_TimePredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateExpressionContext,0)


        def oC_StringPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringPredicateExpressionContext,0)


        def oC_ListPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListPredicateExpressionContext,0)


        def oC_NullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NullPredicateExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringListNullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullPredicateExpression" ):
                listener.enterOC_StringListNullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullPredicateExpression" ):
                listener.exitOC_StringListNullPredicateExpression(self)




    def oC_StringListNullPredicateExpression(self):

        localctx = s_cypherParser.OC_StringListNullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_oC_StringListNullPredicateExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.oC_AddOrSubtractExpression()
            self.state = 960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 956
                self.s_TimePredicateExpression()

            elif la_ == 2:
                self.state = 957
                self.oC_StringPredicateExpression()

            elif la_ == 3:
                self.state = 958
                self.oC_ListPredicateExpression()

            elif la_ == 4:
                self.state = 959
                self.oC_NullPredicateExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def s_AddOrSubtractOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AddOrSubtractOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.oC_MultiplyDivideModuloExpression()
            self.state = 974
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 964
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 963
                        self.match(s_cypherParser.SP)


                    self.state = 966
                    self.s_AddOrSubtractOperator()
                    self.state = 968
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 967
                        self.match(s_cypherParser.SP)


                    self.state = 970
                    self.oC_MultiplyDivideModuloExpression() 
                self.state = 976
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MultiplyDivideModuloOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MultiplyDivideModuloOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MultiplyDivideModuloOperator" ):
                listener.enterS_MultiplyDivideModuloOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MultiplyDivideModuloOperator" ):
                listener.exitS_MultiplyDivideModuloOperator(self)




    def s_MultiplyDivideModuloOperator(self):

        localctx = s_cypherParser.S_MultiplyDivideModuloOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_s_MultiplyDivideModuloOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 24608) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PowerOfOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PowerOfOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PowerOfOperator" ):
                listener.enterS_PowerOfOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PowerOfOperator" ):
                listener.exitS_PowerOfOperator(self)




    def s_PowerOfOperator(self):

        localctx = s_cypherParser.S_PowerOfOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_s_PowerOfOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.match(s_cypherParser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AddOrSubtractOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AddOrSubtractOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AddOrSubtractOperator" ):
                listener.enterS_AddOrSubtractOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AddOrSubtractOperator" ):
                listener.exitS_AddOrSubtractOperator(self)




    def s_AddOrSubtractOperator(self):

        localctx = s_cypherParser.S_AddOrSubtractOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_s_AddOrSubtractOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            _la = self._input.LA(1)
            if not(_la==16 or _la==17):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ComparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ComparisonOperator" ):
                listener.enterS_ComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ComparisonOperator" ):
                listener.exitS_ComparisonOperator(self)




    def s_ComparisonOperator(self):

        localctx = s_cypherParser.S_ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_s_ComparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8126468) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PowerOfExpressionContext,i)


        def s_MultiplyDivideModuloOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MultiplyDivideModuloOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MultiplyDivideModuloOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = s_cypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.oC_PowerOfExpression()
            self.state = 997
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,164,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 987
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 986
                        self.match(s_cypherParser.SP)


                    self.state = 989
                    self.s_MultiplyDivideModuloOperator()
                    self.state = 991
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 990
                        self.match(s_cypherParser.SP)


                    self.state = 993
                    self.oC_PowerOfExpression() 
                self.state = 999
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def s_PowerOfOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PowerOfOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PowerOfOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = s_cypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 1012
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,167,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1002
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1001
                        self.match(s_cypherParser.SP)


                    self.state = 1004
                    self.s_PowerOfOperator()
                    self.state = 1006
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1005
                        self.match(s_cypherParser.SP)


                    self.state = 1008
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 1014
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def s_PoundTExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_PoundTExpressionContext,0)


        def s_SingleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_SingleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_SingleIndexExpressionContext,i)


        def s_DoubleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DoubleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DoubleIndexExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = s_cypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_oC_ListOperatorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 1015
                self.oC_PropertyOrLabelsExpression()
                pass

            elif la_ == 2:
                self.state = 1016
                self.s_PoundTExpression()
                pass


            self.state = 1023
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1021
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                    if la_ == 1:
                        self.state = 1019
                        self.s_SingleIndexExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1020
                        self.s_DoubleIndexExpression()
                        pass

             
                self.state = 1025
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SingleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SingleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SingleIndexExpression" ):
                listener.enterS_SingleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SingleIndexExpression" ):
                listener.exitS_SingleIndexExpression(self)




    def s_SingleIndexExpression(self):

        localctx = s_cypherParser.S_SingleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_s_SingleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1026
                self.match(s_cypherParser.SP)


            self.state = 1029
            self.match(s_cypherParser.T__10)
            self.state = 1031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1030
                self.match(s_cypherParser.SP)


            self.state = 1033
            self.s_LeftExpression()
            self.state = 1035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1034
                self.match(s_cypherParser.SP)


            self.state = 1037
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DoubleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def s_RightExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_RightExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DoubleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DoubleIndexExpression" ):
                listener.enterS_DoubleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DoubleIndexExpression" ):
                listener.exitS_DoubleIndexExpression(self)




    def s_DoubleIndexExpression(self):

        localctx = s_cypherParser.S_DoubleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_s_DoubleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1039
                self.match(s_cypherParser.SP)


            self.state = 1042
            self.match(s_cypherParser.T__10)
            self.state = 1044
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.state = 1043
                self.match(s_cypherParser.SP)


            self.state = 1047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 293296925799811392) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 343051394345409) != 0):
                self.state = 1046
                self.s_LeftExpression()


            self.state = 1050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1049
                self.match(s_cypherParser.SP)


            self.state = 1052
            self.match(s_cypherParser.T__22)
            self.state = 1054
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 1053
                self.match(s_cypherParser.SP)


            self.state = 1057
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 293296925799811392) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 343051394345409) != 0):
                self.state = 1056
                self.s_RightExpression()


            self.state = 1060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1059
                self.match(s_cypherParser.SP)


            self.state = 1062
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_LeftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_LeftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_LeftExpression" ):
                listener.enterS_LeftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_LeftExpression" ):
                listener.exitS_LeftExpression(self)




    def s_LeftExpression(self):

        localctx = s_cypherParser.S_LeftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_s_LeftExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_RightExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_RightExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_RightExpression" ):
                listener.enterS_RightExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_RightExpression" ):
                listener.exitS_RightExpression(self)




    def s_RightExpression(self):

        localctx = s_cypherParser.S_RightExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_s_RightExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def s_ResultExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_ResultExpressionContext,0)


        def oC_CaseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_CaseAlternativeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = s_cypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1090
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 1068
                self.match(s_cypherParser.CASE)
                self.state = 1073 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1070
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 1069
                            self.match(s_cypherParser.SP)


                        self.state = 1072
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1075 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1077
                self.match(s_cypherParser.CASE)
                self.state = 1079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1078
                    self.match(s_cypherParser.SP)


                self.state = 1081
                self.s_ResultExpression()
                self.state = 1086 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1083
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 1082
                            self.match(s_cypherParser.SP)


                        self.state = 1085
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1088 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,185,self._ctx)

                pass


            self.state = 1100
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1092
                    self.match(s_cypherParser.SP)


                self.state = 1095
                self.match(s_cypherParser.ELSE)
                self.state = 1097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1096
                    self.match(s_cypherParser.SP)


                self.state = 1099
                self.oC_Expression()


            self.state = 1103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1102
                self.match(s_cypherParser.SP)


            self.state = 1105
            self.match(s_cypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ResultExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ResultExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ResultExpression" ):
                listener.enterS_ResultExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ResultExpression" ):
                listener.exitS_ResultExpression(self)




    def s_ResultExpression(self):

        localctx = s_cypherParser.S_ResultExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_s_ResultExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1107
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyOrLabelsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_PoundTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_PoundTElementContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyOrLabelsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyOrLabelsExpression" ):
                listener.enterOC_PropertyOrLabelsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyOrLabelsExpression" ):
                listener.exitOC_PropertyOrLabelsExpression(self)




    def oC_PropertyOrLabelsExpression(self):

        localctx = s_cypherParser.OC_PropertyOrLabelsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_oC_PropertyOrLabelsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1109
            self.oC_Atom()
            self.state = 1116
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,192,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1111
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1110
                        self.match(s_cypherParser.SP)


                    self.state = 1113
                    self.oC_PropertyLookup() 
                self.state = 1118
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,192,self._ctx)

            self.state = 1126
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 1120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1119
                    self.match(s_cypherParser.SP)


                self.state = 1124
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10]:
                    self.state = 1122
                    self.oC_NodeLabels()
                    pass
                elif token in [47]:
                    self.state = 1123
                    self.s_PoundTElement()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PoundTExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def s_PropertyLookupTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupTimeContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def s_PropertyLookupName(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_PoundTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_PoundTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PoundTExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PoundTExpression" ):
                listener.enterS_PoundTExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PoundTExpression" ):
                listener.exitS_PoundTExpression(self)




    def s_PoundTExpression(self):

        localctx = s_cypherParser.S_PoundTExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_s_PoundTExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128
            self.oC_Atom()
            self.state = 1135
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,197,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1130
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1129
                        self.match(s_cypherParser.SP)


                    self.state = 1132
                    self.oC_PropertyLookup() 
                self.state = 1137
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,197,self._ctx)

            self.state = 1148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.state = 1138
                self.s_PropertyLookupName()
                self.state = 1146
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                if la_ == 1:
                    self.state = 1140
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1139
                        self.match(s_cypherParser.SP)


                    self.state = 1144
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [48]:
                        self.state = 1142
                        self.match(s_cypherParser.PoundValue)
                        pass
                    elif token in [47]:
                        self.state = 1143
                        self.s_PoundTElement()
                        pass
                    else:
                        raise NoViableAltException(self)





            self.state = 1151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1150
                self.match(s_cypherParser.SP)


            self.state = 1153
            self.s_PropertyLookupTime()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyLookupNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyLookupName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyLookupName" ):
                listener.enterS_PropertyLookupName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyLookupName" ):
                listener.exitS_PropertyLookupName(self)




    def s_PropertyLookupName(self):

        localctx = s_cypherParser.S_PropertyLookupNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_s_PropertyLookupName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1155
                self.match(s_cypherParser.SP)


            self.state = 1158
            self.match(s_cypherParser.T__3)
            self.state = 1160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1159
                self.match(s_cypherParser.SP)


            self.state = 1162
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyLookupTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_TimePropertyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_TimePropertyItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_TimePropertyItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyLookupTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyLookupTime" ):
                listener.enterS_PropertyLookupTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyLookupTime" ):
                listener.exitS_PropertyLookupTime(self)




    def s_PropertyLookupTime(self):

        localctx = s_cypherParser.S_PropertyLookupTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_s_PropertyLookupTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1164
            self.match(s_cypherParser.AtT)
            self.state = 1171
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,206,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1166
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1165
                        self.match(s_cypherParser.SP)


                    self.state = 1168
                    self.s_TimePropertyItem() 
                self.state = 1173
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePropertyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePropertyItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePropertyItem" ):
                listener.enterS_TimePropertyItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePropertyItem" ):
                listener.exitS_TimePropertyItem(self)




    def s_TimePropertyItem(self):

        localctx = s_cypherParser.S_TimePropertyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_s_TimePropertyItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1174
            self.match(s_cypherParser.T__3)
            self.state = 1176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1175
                self.match(s_cypherParser.SP)


            self.state = 1178
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateExpression" ):
                listener.enterS_TimePredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateExpression" ):
                listener.exitS_TimePredicateExpression(self)




    def s_TimePredicateExpression(self):

        localctx = s_cypherParser.S_TimePredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_s_TimePredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1180
            self.match(s_cypherParser.SP)
            self.state = 1181
            _la = self._input.LA(1)
            if not(_la==55 or _la==56):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1182
            self.match(s_cypherParser.SP)
            self.state = 1183
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_TElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_TElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTElement" ):
                listener.enterS_AtTElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTElement" ):
                listener.exitS_AtTElement(self)




    def s_AtTElement(self):

        localctx = s_cypherParser.S_AtTElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_s_AtTElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            self.match(s_cypherParser.AtT)
            self.state = 1187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1186
                self.match(s_cypherParser.SP)


            self.state = 1189
            self.s_TElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PoundTElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PoundT(self):
            return self.getToken(s_cypherParser.PoundT, 0)

        def s_TElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_TElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PoundTElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PoundTElement" ):
                listener.enterS_PoundTElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PoundTElement" ):
                listener.exitS_PoundTElement(self)




    def s_PoundTElement(self):

        localctx = s_cypherParser.S_PoundTElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_s_PoundTElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1191
            self.match(s_cypherParser.PoundT)
            self.state = 1193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1192
                self.match(s_cypherParser.SP)


            self.state = 1195
            self.s_TElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def s_TimePointLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_TimePointLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_TimePointLiteralContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TElement" ):
                listener.enterS_TElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TElement" ):
                listener.exitS_TElement(self)




    def s_TElement(self):

        localctx = s_cypherParser.S_TElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_s_TElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1197
            self.match(s_cypherParser.T__5)
            self.state = 1207
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.state = 1199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1198
                    self.match(s_cypherParser.SP)


                self.state = 1201
                self.s_TimePointLiteral()
                self.state = 1203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1202
                    self.match(s_cypherParser.SP)


                self.state = 1205
                self.match(s_cypherParser.T__0)


            self.state = 1210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1209
                self.match(s_cypherParser.SP)


            self.state = 1214
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49]:
                self.state = 1212
                self.match(s_cypherParser.NOW)
                pass
            elif token in [8, 118]:
                self.state = 1213
                self.s_TimePointLiteral()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1216
                self.match(s_cypherParser.SP)


            self.state = 1219
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePointLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePointLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePointLiteral" ):
                listener.enterS_TimePointLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePointLiteral" ):
                listener.exitS_TimePointLiteral(self)




    def s_TimePointLiteral(self):

        localctx = s_cypherParser.S_TimePointLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_s_TimePointLiteral)
        try:
            self.state = 1223
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [118]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1221
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1222
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def s_FunctionInvocationExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_FunctionInvocationExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_FunctionInvocationExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = s_cypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            self.oC_FunctionName()
            self.state = 1227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1226
                self.match(s_cypherParser.SP)


            self.state = 1229
            self.match(s_cypherParser.T__5)
            self.state = 1231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1230
                self.match(s_cypherParser.SP)


            self.state = 1237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 1233
                self.match(s_cypherParser.DISTINCT)
                self.state = 1235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1234
                    self.match(s_cypherParser.SP)




            self.state = 1256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 293296925799811392) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 343051394345409) != 0):
                self.state = 1239
                self.s_FunctionInvocationExpression()
                self.state = 1241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1240
                    self.match(s_cypherParser.SP)


                self.state = 1253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 1243
                    self.match(s_cypherParser.T__0)
                    self.state = 1245
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1244
                        self.match(s_cypherParser.SP)


                    self.state = 1247
                    self.s_FunctionInvocationExpression()
                    self.state = 1249
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1248
                        self.match(s_cypherParser.SP)


                    self.state = 1255
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1258
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_FunctionInvocationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_FunctionInvocationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_FunctionInvocationExpression" ):
                listener.enterS_FunctionInvocationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_FunctionInvocationExpression" ):
                listener.exitS_FunctionInvocationExpression(self)




    def s_FunctionInvocationExpression(self):

        localctx = s_cypherParser.S_FunctionInvocationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_s_FunctionInvocationExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_ListLiteralExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ListLiteralExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ListLiteralExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = s_cypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1262
            self.match(s_cypherParser.T__10)
            self.state = 1264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1263
                self.match(s_cypherParser.SP)


            self.state = 1283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 293296925799811392) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 343051394345409) != 0):
                self.state = 1266
                self.s_ListLiteralExpression()
                self.state = 1268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1267
                    self.match(s_cypherParser.SP)


                self.state = 1280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 1270
                    self.match(s_cypherParser.T__0)
                    self.state = 1272
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1271
                        self.match(s_cypherParser.SP)


                    self.state = 1274
                    self.s_ListLiteralExpression()
                    self.state = 1276
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1275
                        self.match(s_cypherParser.SP)


                    self.state = 1282
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1285
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ListLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ListLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ListLiteralExpression" ):
                listener.enterS_ListLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ListLiteralExpression" ):
                listener.exitS_ListLiteralExpression(self)




    def s_ListLiteralExpression(self):

        localctx = s_cypherParser.S_ListLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_s_ListLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1287
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_MapKeyValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MapKeyValueContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MapKeyValueContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = s_cypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            self.match(s_cypherParser.T__7)
            self.state = 1291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1290
                self.match(s_cypherParser.SP)


            self.state = 1304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & 1297036692676411391) != 0) or ((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & 40959) != 0):
                self.state = 1293
                self.s_MapKeyValue()
                self.state = 1301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 1294
                    self.match(s_cypherParser.T__0)
                    self.state = 1296
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1295
                        self.match(s_cypherParser.SP)


                    self.state = 1298
                    self.s_MapKeyValue()
                    self.state = 1303
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1306
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MapKeyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MapKeyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MapKeyValue" ):
                listener.enterS_MapKeyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MapKeyValue" ):
                listener.exitS_MapKeyValue(self)




    def s_MapKeyValue(self):

        localctx = s_cypherParser.S_MapKeyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_s_MapKeyValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1308
            self.oC_PropertyKeyName()
            self.state = 1310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1309
                self.match(s_cypherParser.SP)


            self.state = 1312
            self.match(s_cypherParser.T__9)
            self.state = 1314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1313
                self.match(s_cypherParser.SP)


            self.state = 1316
            self.oC_Expression()
            self.state = 1318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1317
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(s_cypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(s_cypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(s_cypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(s_cypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(s_cypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = s_cypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1320
            _la = self._input.LA(1)
            if not(_la==49 or _la==52 or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 2680059626449) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(s_cypherParser.AND, 0)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def OR(self):
            return self.getToken(s_cypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(s_cypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(s_cypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(s_cypherParser.DO, 0)

        def FOR(self):
            return self.getToken(s_cypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(s_cypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(s_cypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(s_cypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(s_cypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(s_cypherParser.OF, 0)

        def ADD(self):
            return self.getToken(s_cypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(s_cypherParser.DROP, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = s_cypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1322
            _la = self._input.LA(1)
            if not(((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & 128317405001678847) != 0) or ((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(s_cypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = s_cypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1324
                self.match(s_cypherParser.SP)


            self.state = 1327
            self.oC_Statement()
            self.state = 1332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.state = 1329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1328
                    self.match(s_cypherParser.SP)


                self.state = 1331
                self.match(s_cypherParser.T__23)


            self.state = 1335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1334
                self.match(s_cypherParser.SP)


            self.state = 1337
            self.match(s_cypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = s_cypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1339
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = s_cypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1341
            self.oC_SingleQuery()
            self.state = 1348
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,244,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1343
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1342
                        self.match(s_cypherParser.SP)


                    self.state = 1345
                    self.oC_Union() 
                self.state = 1350
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,244,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = s_cypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 1363
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1351
                self.match(s_cypherParser.UNION)
                self.state = 1352
                self.match(s_cypherParser.SP)
                self.state = 1353
                self.match(s_cypherParser.ALL)
                self.state = 1355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1354
                    self.match(s_cypherParser.SP)


                self.state = 1357
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1358
                self.match(s_cypherParser.UNION)
                self.state = 1360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1359
                    self.match(s_cypherParser.SP)


                self.state = 1362
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = s_cypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_SingleQuery)
        try:
            self.state = 1367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1365
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1366
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = s_cypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 1404
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1375
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & 2055) != 0):
                    self.state = 1369
                    self.oC_ReadingClause()
                    self.state = 1371
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1370
                        self.match(s_cypherParser.SP)


                    self.state = 1377
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1378
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1385
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & 2055) != 0):
                    self.state = 1379
                    self.oC_ReadingClause()
                    self.state = 1381
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1380
                        self.match(s_cypherParser.SP)


                    self.state = 1387
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1388
                self.oC_UpdatingClause()
                self.state = 1395
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,254,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1390
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 1389
                            self.match(s_cypherParser.SP)


                        self.state = 1392
                        self.oC_UpdatingClause() 
                    self.state = 1397
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,254,self._ctx)

                self.state = 1402
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                if la_ == 1:
                    self.state = 1399
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1398
                        self.match(s_cypherParser.SP)


                    self.state = 1401
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(s_cypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = s_cypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_ReadingClause)
        try:
            self.state = 1409
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [59, 60]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1406
                self.oC_Match()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1407
                self.oC_Unwind()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1408
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = s_cypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1411
            self.match(s_cypherParser.UNWIND)
            self.state = 1413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1412
                self.match(s_cypherParser.SP)


            self.state = 1415
            self.oC_Expression()
            self.state = 1416
            self.match(s_cypherParser.SP)
            self.state = 1417
            self.match(s_cypherParser.AS)
            self.state = 1418
            self.match(s_cypherParser.SP)
            self.state = 1419
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = s_cypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1421
            self.match(s_cypherParser.MERGE)
            self.state = 1423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1422
                self.match(s_cypherParser.SP)


            self.state = 1425
            self.oC_PatternPart()
            self.state = 1430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1426
                self.match(s_cypherParser.SP)
                self.state = 1427
                self.oC_MergeAction()
                self.state = 1432
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = s_cypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_MergeAction)
        try:
            self.state = 1443
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1433
                self.match(s_cypherParser.ON)
                self.state = 1434
                self.match(s_cypherParser.SP)
                self.state = 1435
                self.match(s_cypherParser.MATCH)
                self.state = 1436
                self.match(s_cypherParser.SP)
                self.state = 1437
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1438
                self.match(s_cypherParser.ON)
                self.state = 1439
                self.match(s_cypherParser.SP)
                self.state = 1440
                self.match(s_cypherParser.CREATE)
                self.state = 1441
                self.match(s_cypherParser.SP)
                self.state = 1442
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = s_cypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1445
            self.match(s_cypherParser.CREATE)
            self.state = 1447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1446
                self.match(s_cypherParser.SP)


            self.state = 1449
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = s_cypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1451
            self.match(s_cypherParser.SET)
            self.state = 1453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1452
                self.match(s_cypherParser.SP)


            self.state = 1455
            self.oC_SetItem()
            self.state = 1466
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,267,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1457
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1456
                        self.match(s_cypherParser.SP)


                    self.state = 1459
                    self.match(s_cypherParser.T__0)
                    self.state = 1461
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1460
                        self.match(s_cypherParser.SP)


                    self.state = 1463
                    self.oC_SetItem() 
                self.state = 1468
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,267,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = s_cypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 1469
                self.match(s_cypherParser.DETACH)
                self.state = 1470
                self.match(s_cypherParser.SP)


            self.state = 1473
            self.match(s_cypherParser.DELETE)
            self.state = 1475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1474
                self.match(s_cypherParser.SP)


            self.state = 1477
            self.oC_Expression()
            self.state = 1488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1 or _la==136:
                self.state = 1479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1478
                    self.match(s_cypherParser.SP)


                self.state = 1481
                self.match(s_cypherParser.T__0)
                self.state = 1483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1482
                    self.match(s_cypherParser.SP)


                self.state = 1485
                self.oC_Expression()
                self.state = 1490
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = s_cypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1491
            self.match(s_cypherParser.REMOVE)
            self.state = 1492
            self.match(s_cypherParser.SP)
            self.state = 1493
            self.oC_RemoveItem()
            self.state = 1504
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,275,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1495
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1494
                        self.match(s_cypherParser.SP)


                    self.state = 1497
                    self.match(s_cypherParser.T__0)
                    self.state = 1499
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1498
                        self.match(s_cypherParser.SP)


                    self.state = 1501
                    self.oC_RemoveItem() 
                self.state = 1506
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,275,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = s_cypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1507
            self.oC_YieldItem()
            self.state = 1518
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,278,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1509
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1508
                        self.match(s_cypherParser.SP)


                    self.state = 1511
                    self.match(s_cypherParser.T__0)
                    self.state = 1513
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1512
                        self.match(s_cypherParser.SP)


                    self.state = 1515
                    self.oC_YieldItem() 
                self.state = 1520
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,278,self._ctx)

            self.state = 1525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83 or _la==136:
                self.state = 1522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1521
                    self.match(s_cypherParser.SP)


                self.state = 1524
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = s_cypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1532
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
            if la_ == 1:
                self.state = 1527
                self.oC_ProcedureResultField()
                self.state = 1528
                self.match(s_cypherParser.SP)
                self.state = 1529
                self.match(s_cypherParser.AS)
                self.state = 1530
                self.match(s_cypherParser.SP)


            self.state = 1534
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = s_cypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1536
            self.match(s_cypherParser.WITH)
            self.state = 1537
            self.oC_ProjectionBody()
            self.state = 1542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83 or _la==136:
                self.state = 1539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1538
                    self.match(s_cypherParser.SP)


                self.state = 1541
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = s_cypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1544
            self.match(s_cypherParser.RETURN)
            self.state = 1545
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)




    def oC_ProjectionBody(self):

        localctx = s_cypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1551
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
            if la_ == 1:
                self.state = 1548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1547
                    self.match(s_cypherParser.SP)


                self.state = 1550
                self.match(s_cypherParser.DISTINCT)


            self.state = 1553
            self.match(s_cypherParser.SP)
            self.state = 1554
            self.oC_ProjectionItems()
            self.state = 1557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.state = 1555
                self.match(s_cypherParser.SP)
                self.state = 1556
                self.oC_Order()


            self.state = 1561
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.state = 1559
                self.match(s_cypherParser.SP)
                self.state = 1560
                self.oC_Skip()


            self.state = 1565
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
            if la_ == 1:
                self.state = 1563
                self.match(s_cypherParser.SP)
                self.state = 1564
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)




    def oC_ProjectionItems(self):

        localctx = s_cypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 1595
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1567
                self.match(s_cypherParser.T__4)
                self.state = 1578
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,291,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1569
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 1568
                            self.match(s_cypherParser.SP)


                        self.state = 1571
                        self.match(s_cypherParser.T__0)
                        self.state = 1573
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 1572
                            self.match(s_cypherParser.SP)


                        self.state = 1575
                        self.oC_ProjectionItem() 
                    self.state = 1580
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,291,self._ctx)

                pass
            elif token in [6, 8, 11, 16, 17, 26, 49, 52, 58, 87, 93, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 116, 117, 118, 130, 131, 132, 135]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1581
                self.oC_ProjectionItem()
                self.state = 1592
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,294,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1583
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 1582
                            self.match(s_cypherParser.SP)


                        self.state = 1585
                        self.match(s_cypherParser.T__0)
                        self.state = 1587
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 1586
                            self.match(s_cypherParser.SP)


                        self.state = 1589
                        self.oC_ProjectionItem() 
                    self.state = 1594
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,294,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)




    def oC_ProjectionItem(self):

        localctx = s_cypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_ProjectionItem)
        try:
            self.state = 1604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1597
                self.oC_Expression()
                self.state = 1598
                self.match(s_cypherParser.SP)
                self.state = 1599
                self.match(s_cypherParser.AS)
                self.state = 1600
                self.match(s_cypherParser.SP)
                self.state = 1601
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1603
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = s_cypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1606
            self.match(s_cypherParser.ORDER)
            self.state = 1607
            self.match(s_cypherParser.SP)
            self.state = 1608
            self.match(s_cypherParser.BY)
            self.state = 1609
            self.match(s_cypherParser.SP)
            self.state = 1610
            self.oC_SortItem()
            self.state = 1618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 1611
                self.match(s_cypherParser.T__0)
                self.state = 1613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1612
                    self.match(s_cypherParser.SP)


                self.state = 1615
                self.oC_SortItem()
                self.state = 1620
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = s_cypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1621
            self.match(s_cypherParser.L_SKIP)
            self.state = 1622
            self.match(s_cypherParser.SP)
            self.state = 1623
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = s_cypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1625
            self.match(s_cypherParser.LIMIT)
            self.state = 1626
            self.match(s_cypherParser.SP)
            self.state = 1627
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = s_cypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1629
            self.oC_Expression()
            self.state = 1634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
            if la_ == 1:
                self.state = 1631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1630
                    self.match(s_cypherParser.SP)


                self.state = 1633
                _la = self._input.LA(1)
                if not(((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = s_cypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1636
            self.match(s_cypherParser.WHERE)
            self.state = 1637
            self.match(s_cypherParser.SP)
            self.state = 1638
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = s_cypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1640
            self.oC_PatternPart()
            self.state = 1651
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,303,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1642
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1641
                        self.match(s_cypherParser.SP)


                    self.state = 1644
                    self.match(s_cypherParser.T__0)
                    self.state = 1646
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1645
                        self.match(s_cypherParser.SP)


                    self.state = 1648
                    self.oC_PatternPart() 
                self.state = 1653
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,303,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = s_cypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1654
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = s_cypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 1670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1656
                self.oC_NodePattern()
                self.state = 1663
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,305,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1658
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 1657
                            self.match(s_cypherParser.SP)


                        self.state = 1660
                        self.oC_PatternElementChain() 
                    self.state = 1665
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,305,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1666
                self.match(s_cypherParser.T__5)
                self.state = 1667
                self.oC_PatternElement()
                self.state = 1668
                self.match(s_cypherParser.T__6)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = s_cypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1672
            self.oC_NodePattern()
            self.state = 1677 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1674
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1673
                        self.match(s_cypherParser.SP)


                    self.state = 1676
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 1679 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,308,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = s_cypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1681
            self.oC_RelationshipPattern()
            self.state = 1683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1682
                self.match(s_cypherParser.SP)


            self.state = 1685
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = s_cypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 1751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1687
                self.oC_LeftArrowHead()
                self.state = 1689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1688
                    self.match(s_cypherParser.SP)


                self.state = 1691
                self.oC_Dash()
                self.state = 1693
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
                if la_ == 1:
                    self.state = 1692
                    self.match(s_cypherParser.SP)


                self.state = 1696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1695
                    self.oC_RelationshipDetail()


                self.state = 1699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1698
                    self.match(s_cypherParser.SP)


                self.state = 1701
                self.oC_Dash()
                self.state = 1703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1702
                    self.match(s_cypherParser.SP)


                self.state = 1705
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1707
                self.oC_LeftArrowHead()
                self.state = 1709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1708
                    self.match(s_cypherParser.SP)


                self.state = 1711
                self.oC_Dash()
                self.state = 1713
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
                if la_ == 1:
                    self.state = 1712
                    self.match(s_cypherParser.SP)


                self.state = 1716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1715
                    self.oC_RelationshipDetail()


                self.state = 1719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1718
                    self.match(s_cypherParser.SP)


                self.state = 1721
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1723
                self.oC_Dash()
                self.state = 1725
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
                if la_ == 1:
                    self.state = 1724
                    self.match(s_cypherParser.SP)


                self.state = 1728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1727
                    self.oC_RelationshipDetail()


                self.state = 1731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1730
                    self.match(s_cypherParser.SP)


                self.state = 1733
                self.oC_Dash()
                self.state = 1735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1734
                    self.match(s_cypherParser.SP)


                self.state = 1737
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1739
                self.oC_Dash()
                self.state = 1741
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
                if la_ == 1:
                    self.state = 1740
                    self.match(s_cypherParser.SP)


                self.state = 1744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1743
                    self.oC_RelationshipDetail()


                self.state = 1747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1746
                    self.match(s_cypherParser.SP)


                self.state = 1749
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = s_cypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_oC_Properties)
        try:
            self.state = 1755
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1753
                self.oC_MapLiteral()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1754
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = s_cypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1757
            self.match(s_cypherParser.T__9)
            self.state = 1759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1758
                self.match(s_cypherParser.SP)


            self.state = 1761
            self.oC_RelTypeName()
            self.state = 1775
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,332,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1763
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1762
                        self.match(s_cypherParser.SP)


                    self.state = 1765
                    self.match(s_cypherParser.T__24)
                    self.state = 1767
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==10:
                        self.state = 1766
                        self.match(s_cypherParser.T__9)


                    self.state = 1770
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1769
                        self.match(s_cypherParser.SP)


                    self.state = 1772
                    self.oC_RelTypeName() 
                self.state = 1777
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,332,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = s_cypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1778
            self.oC_NodeLabel()
            self.state = 1785
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,334,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1780
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1779
                        self.match(s_cypherParser.SP)


                    self.state = 1782
                    self.oC_NodeLabel() 
                self.state = 1787
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,334,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = s_cypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1788
            self.match(s_cypherParser.T__9)
            self.state = 1790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1789
                self.match(s_cypherParser.SP)


            self.state = 1792
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = s_cypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1794
            self.match(s_cypherParser.T__4)
            self.state = 1796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1795
                self.match(s_cypherParser.SP)


            self.state = 1802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & 7) != 0):
                self.state = 1798
                self.oC_IntegerLiteral()
                self.state = 1800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1799
                    self.match(s_cypherParser.SP)




            self.state = 1814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 1804
                self.match(s_cypherParser.T__22)
                self.state = 1806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1805
                    self.match(s_cypherParser.SP)


                self.state = 1812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & 7) != 0):
                    self.state = 1808
                    self.oC_IntegerLiteral()
                    self.state = 1810
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1809
                        self.match(s_cypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = s_cypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1816
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = s_cypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1818
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = s_cypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1820
            self.oC_Atom()
            self.state = 1825 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1822
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1821
                        self.match(s_cypherParser.SP)


                    self.state = 1824
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 1827 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,344,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = s_cypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1829
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = s_cypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1831
            self.oC_XorExpression()
            self.state = 1838
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,345,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1832
                    self.match(s_cypherParser.SP)
                    self.state = 1833
                    self.match(s_cypherParser.OR)
                    self.state = 1834
                    self.match(s_cypherParser.SP)
                    self.state = 1835
                    self.oC_XorExpression() 
                self.state = 1840
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,345,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = s_cypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1841
            self.oC_AndExpression()
            self.state = 1848
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,346,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1842
                    self.match(s_cypherParser.SP)
                    self.state = 1843
                    self.match(s_cypherParser.XOR)
                    self.state = 1844
                    self.match(s_cypherParser.SP)
                    self.state = 1845
                    self.oC_AndExpression() 
                self.state = 1850
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,346,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = s_cypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1851
            self.oC_NotExpression()
            self.state = 1858
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,347,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1852
                    self.match(s_cypherParser.SP)
                    self.state = 1853
                    self.match(s_cypherParser.AND)
                    self.state = 1854
                    self.match(s_cypherParser.SP)
                    self.state = 1855
                    self.oC_NotExpression() 
                self.state = 1860
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,347,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = s_cypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==87:
                self.state = 1861
                self.match(s_cypherParser.NOT)
                self.state = 1863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1862
                    self.match(s_cypherParser.SP)


                self.state = 1869
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1870
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PartialComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PartialComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PartialComparisonExpression" ):
                listener.enterOC_PartialComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PartialComparisonExpression" ):
                listener.exitOC_PartialComparisonExpression(self)




    def oC_PartialComparisonExpression(self):

        localctx = s_cypherParser.OC_PartialComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_oC_PartialComparisonExpression)
        self._la = 0 # Token type
        try:
            self.state = 1902
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1872
                self.match(s_cypherParser.T__1)
                self.state = 1874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1873
                    self.match(s_cypherParser.SP)


                self.state = 1876
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1877
                self.match(s_cypherParser.T__17)
                self.state = 1879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1878
                    self.match(s_cypherParser.SP)


                self.state = 1881
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1882
                self.match(s_cypherParser.T__18)
                self.state = 1884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1883
                    self.match(s_cypherParser.SP)


                self.state = 1886
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1887
                self.match(s_cypherParser.T__20)
                self.state = 1889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1888
                    self.match(s_cypherParser.SP)


                self.state = 1891
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1892
                self.match(s_cypherParser.T__19)
                self.state = 1894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1893
                    self.match(s_cypherParser.SP)


                self.state = 1896
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1897
                self.match(s_cypherParser.T__21)
                self.state = 1899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1898
                    self.match(s_cypherParser.SP)


                self.state = 1901
                self.oC_StringListNullPredicateExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringPredicateExpression" ):
                listener.enterOC_StringPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringPredicateExpression" ):
                listener.exitOC_StringPredicateExpression(self)




    def oC_StringPredicateExpression(self):

        localctx = s_cypherParser.OC_StringPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_oC_StringPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1914
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
            if la_ == 1:
                self.state = 1904
                self.match(s_cypherParser.SP)
                self.state = 1905
                self.match(s_cypherParser.STARTS)
                self.state = 1906
                self.match(s_cypherParser.SP)
                self.state = 1907
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1908
                self.match(s_cypherParser.SP)
                self.state = 1909
                self.match(s_cypherParser.ENDS)
                self.state = 1910
                self.match(s_cypherParser.SP)
                self.state = 1911
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1912
                self.match(s_cypherParser.SP)
                self.state = 1913
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 1917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1916
                self.match(s_cypherParser.SP)


            self.state = 1919
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListPredicateExpression" ):
                listener.enterOC_ListPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListPredicateExpression" ):
                listener.exitOC_ListPredicateExpression(self)




    def oC_ListPredicateExpression(self):

        localctx = s_cypherParser.OC_ListPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_oC_ListPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1921
            self.match(s_cypherParser.SP)
            self.state = 1922
            self.match(s_cypherParser.IN)
            self.state = 1924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1923
                self.match(s_cypherParser.SP)


            self.state = 1926
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullPredicateExpression" ):
                listener.enterOC_NullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullPredicateExpression" ):
                listener.exitOC_NullPredicateExpression(self)




    def oC_NullPredicateExpression(self):

        localctx = s_cypherParser.OC_NullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_oC_NullPredicateExpression)
        try:
            self.state = 1938
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1928
                self.match(s_cypherParser.SP)
                self.state = 1929
                self.match(s_cypherParser.IS)
                self.state = 1930
                self.match(s_cypherParser.SP)
                self.state = 1931
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1932
                self.match(s_cypherParser.SP)
                self.state = 1933
                self.match(s_cypherParser.IS)
                self.state = 1934
                self.match(s_cypherParser.SP)
                self.state = 1935
                self.match(s_cypherParser.NOT)
                self.state = 1936
                self.match(s_cypherParser.SP)
                self.state = 1937
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ListOperatorExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListOperatorExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.state = 1946
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 8, 11, 26, 49, 52, 58, 93, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 116, 117, 118, 130, 131, 132, 135]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1940
                self.oC_ListOperatorExpression()
                pass
            elif token in [16, 17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1941
                _la = self._input.LA(1)
                if not(_la==16 or _la==17):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1942
                    self.match(s_cypherParser.SP)


                self.state = 1945
                self.oC_ListOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = s_cypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1948
            self.match(s_cypherParser.T__3)
            self.state = 1950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1949
                self.match(s_cypherParser.SP)


            self.state = 1952
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternComprehensionContext,0)


        def oC_Quantifier(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QuantifierContext,0)


        def oC_PatternPredicate(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPredicateContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionInvocationContext,0)


        def oC_ExistentialSubquery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExistentialSubqueryContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = s_cypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 1978
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,367,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1954
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1955
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1956
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1957
                self.match(s_cypherParser.COUNT)
                self.state = 1959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1958
                    self.match(s_cypherParser.SP)


                self.state = 1961
                self.match(s_cypherParser.T__5)
                self.state = 1963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1962
                    self.match(s_cypherParser.SP)


                self.state = 1965
                self.match(s_cypherParser.T__4)
                self.state = 1967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1966
                    self.match(s_cypherParser.SP)


                self.state = 1969
                self.match(s_cypherParser.T__6)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1970
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1971
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1972
                self.oC_Quantifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1973
                self.oC_PatternPredicate()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1974
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1975
                self.oC_FunctionInvocation()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1976
                self.oC_ExistentialSubquery()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1977
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternative" ):
                listener.enterOC_CaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternative" ):
                listener.exitOC_CaseAlternative(self)




    def oC_CaseAlternative(self):

        localctx = s_cypherParser.OC_CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_oC_CaseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1980
            self.match(s_cypherParser.WHEN)
            self.state = 1982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1981
                self.match(s_cypherParser.SP)


            self.state = 1984
            self.oC_Expression()
            self.state = 1986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1985
                self.match(s_cypherParser.SP)


            self.state = 1988
            self.match(s_cypherParser.THEN)
            self.state = 1990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1989
                self.match(s_cypherParser.SP)


            self.state = 1992
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = s_cypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1994
            self.match(s_cypherParser.T__10)
            self.state = 1996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1995
                self.match(s_cypherParser.SP)


            self.state = 1998
            self.oC_FilterExpression()
            self.state = 2007
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
            if la_ == 1:
                self.state = 2000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1999
                    self.match(s_cypherParser.SP)


                self.state = 2002
                self.match(s_cypherParser.T__24)
                self.state = 2004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2003
                    self.match(s_cypherParser.SP)


                self.state = 2006
                self.oC_Expression()


            self.state = 2010
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 2009
                self.match(s_cypherParser.SP)


            self.state = 2012
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = s_cypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2014
            self.match(s_cypherParser.T__10)
            self.state = 2016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 2015
                self.match(s_cypherParser.SP)


            self.state = 2026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49 or _la==52 or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 2680059626449) != 0):
                self.state = 2018
                self.oC_Variable()
                self.state = 2020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2019
                    self.match(s_cypherParser.SP)


                self.state = 2022
                self.match(s_cypherParser.T__1)
                self.state = 2024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2023
                    self.match(s_cypherParser.SP)




            self.state = 2028
            self.oC_RelationshipsPattern()
            self.state = 2030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 2029
                self.match(s_cypherParser.SP)


            self.state = 2036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 2032
                self.oC_Where()
                self.state = 2034
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2033
                    self.match(s_cypherParser.SP)




            self.state = 2038
            self.match(s_cypherParser.T__24)
            self.state = 2040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 2039
                self.match(s_cypherParser.SP)


            self.state = 2042
            self.oC_Expression()
            self.state = 2044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 2043
                self.match(s_cypherParser.SP)


            self.state = 2046
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Quantifier" ):
                listener.enterOC_Quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Quantifier" ):
                listener.exitOC_Quantifier(self)




    def oC_Quantifier(self):

        localctx = s_cypherParser.OC_QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_oC_Quantifier)
        self._la = 0 # Token type
        try:
            self.state = 2104
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2048
                self.match(s_cypherParser.ALL)
                self.state = 2050
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2049
                    self.match(s_cypherParser.SP)


                self.state = 2052
                self.match(s_cypherParser.T__5)
                self.state = 2054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2053
                    self.match(s_cypherParser.SP)


                self.state = 2056
                self.oC_FilterExpression()
                self.state = 2058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2057
                    self.match(s_cypherParser.SP)


                self.state = 2060
                self.match(s_cypherParser.T__6)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2062
                self.match(s_cypherParser.ANY)
                self.state = 2064
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2063
                    self.match(s_cypherParser.SP)


                self.state = 2066
                self.match(s_cypherParser.T__5)
                self.state = 2068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2067
                    self.match(s_cypherParser.SP)


                self.state = 2070
                self.oC_FilterExpression()
                self.state = 2072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2071
                    self.match(s_cypherParser.SP)


                self.state = 2074
                self.match(s_cypherParser.T__6)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2076
                self.match(s_cypherParser.NONE)
                self.state = 2078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2077
                    self.match(s_cypherParser.SP)


                self.state = 2080
                self.match(s_cypherParser.T__5)
                self.state = 2082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2081
                    self.match(s_cypherParser.SP)


                self.state = 2084
                self.oC_FilterExpression()
                self.state = 2086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2085
                    self.match(s_cypherParser.SP)


                self.state = 2088
                self.match(s_cypherParser.T__6)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2090
                self.match(s_cypherParser.SINGLE)
                self.state = 2092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2091
                    self.match(s_cypherParser.SP)


                self.state = 2094
                self.match(s_cypherParser.T__5)
                self.state = 2096
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2095
                    self.match(s_cypherParser.SP)


                self.state = 2098
                self.oC_FilterExpression()
                self.state = 2100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2099
                    self.match(s_cypherParser.SP)


                self.state = 2102
                self.match(s_cypherParser.T__6)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPredicate" ):
                listener.enterOC_PatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPredicate" ):
                listener.exitOC_PatternPredicate(self)




    def oC_PatternPredicate(self):

        localctx = s_cypherParser.OC_PatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_oC_PatternPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2106
            self.oC_RelationshipsPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = s_cypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2108
            self.match(s_cypherParser.T__5)
            self.state = 2110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 2109
                self.match(s_cypherParser.SP)


            self.state = 2112
            self.oC_Expression()
            self.state = 2114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 2113
                self.match(s_cypherParser.SP)


            self.state = 2116
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = s_cypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2118
            self.oC_Variable()
            self.state = 2119
            self.match(s_cypherParser.SP)
            self.state = 2120
            self.match(s_cypherParser.IN)
            self.state = 2121
            self.match(s_cypherParser.SP)
            self.state = 2122
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = s_cypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_oC_FunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2124
            self.oC_Namespace()
            self.state = 2125
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2127
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = s_cypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2129
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = s_cypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2131
            self.oC_Namespace()
            self.state = 2132
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = s_cypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2139
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,400,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2134
                    self.oC_SymbolicName()
                    self.state = 2135
                    self.match(s_cypherParser.T__3) 
                self.state = 2141
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,400,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = s_cypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2142
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_ListLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListLiteralContext,0)


        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = s_cypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_oC_Literal)
        try:
            self.state = 2150
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [104, 105]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2144
                self.oC_BooleanLiteral()
                pass
            elif token in [93]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2145
                self.match(s_cypherParser.NULL)
                pass
            elif token in [106, 107, 108, 116, 117]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2146
                self.oC_NumberLiteral()
                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2147
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2148
                self.oC_ListLiteral()
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2149
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = s_cypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2152
            _la = self._input.LA(1)
            if not(_la==104 or _la==105):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = s_cypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_oC_NumberLiteral)
        try:
            self.state = 2156
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [116, 117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2154
                self.oC_DoubleLiteral()
                pass
            elif token in [106, 107, 108]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2155
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(s_cypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(s_cypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = s_cypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2158
            _la = self._input.LA(1)
            if not(((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(s_cypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(s_cypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = s_cypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2160
            _la = self._input.LA(1)
            if not(_la==116 or _la==117):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = s_cypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2162
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = s_cypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2164
            self.match(s_cypherParser.T__25)
            self.state = 2167
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49, 52, 94, 98, 100, 101, 102, 103, 109, 130, 131, 132, 135]:
                self.state = 2165
                self.oC_SymbolicName()
                pass
            elif token in [107]:
                self.state = 2166
                self.match(s_cypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = s_cypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_oC_SchemaName)
        try:
            self.state = 2171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,404,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2169
                self.oC_SymbolicName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2170
                self.oC_ReservedWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = s_cypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2173
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2013790208) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = s_cypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2175
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32214351872) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = s_cypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2177
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70334384570368) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





