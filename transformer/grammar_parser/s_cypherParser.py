# Generated from .\transformer\grammar_parser\s_cypher.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,137,2110,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,1,0,1,0,1,0,3,0,292,8,0,1,1,1,1,3,1,296,8,1,1,
        1,1,1,3,1,300,8,1,1,1,1,1,3,1,304,8,1,1,1,1,1,3,1,308,8,1,3,1,310,
        8,1,1,1,3,1,313,8,1,1,1,3,1,316,8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,
        324,8,2,1,3,1,3,3,3,328,8,3,1,3,1,3,3,3,332,8,3,1,3,3,3,335,8,3,
        1,4,1,4,3,4,339,8,4,1,4,1,4,1,4,5,4,344,8,4,10,4,12,4,347,9,4,1,
        4,3,4,350,8,4,1,4,3,4,353,8,4,1,5,1,5,3,5,357,8,5,1,5,1,5,3,5,361,
        8,5,1,5,1,5,3,5,365,8,5,1,5,5,5,368,8,5,10,5,12,5,371,9,5,1,5,3,
        5,374,8,5,1,5,3,5,377,8,5,1,6,1,6,3,6,381,8,6,1,6,1,6,3,6,385,8,
        6,1,6,1,6,3,6,389,8,6,1,6,5,6,392,8,6,10,6,12,6,395,9,6,1,6,3,6,
        398,8,6,1,6,3,6,401,8,6,1,7,1,7,3,7,405,8,7,1,7,3,7,408,8,7,1,7,
        3,7,411,8,7,1,7,1,7,3,7,415,8,7,1,7,1,7,1,7,1,7,3,7,421,8,7,1,7,
        1,7,3,7,425,8,7,1,7,1,7,1,7,1,7,3,7,431,8,7,1,7,1,7,3,7,435,8,7,
        1,7,1,7,1,7,1,7,3,7,441,8,7,1,7,1,7,1,7,1,7,3,7,447,8,7,1,7,1,7,
        1,7,1,7,3,7,453,8,7,1,7,3,7,456,8,7,1,7,3,7,459,8,7,1,7,1,7,3,7,
        463,8,7,1,7,1,7,1,7,1,7,3,7,469,8,7,1,7,3,7,472,8,7,1,7,3,7,475,
        8,7,1,7,1,7,3,7,479,8,7,1,7,1,7,3,7,483,8,7,1,7,1,7,3,7,487,8,7,
        1,8,1,8,3,8,491,8,8,1,8,1,8,1,9,1,9,3,9,497,8,9,1,9,3,9,500,8,9,
        1,10,1,10,3,10,504,8,10,1,10,1,10,1,11,1,11,1,11,3,11,511,8,11,1,
        11,1,11,3,11,515,8,11,1,12,1,12,3,12,519,8,12,1,12,1,12,3,12,523,
        8,12,1,12,1,12,3,12,527,8,12,1,12,1,12,3,12,531,8,12,1,12,5,12,534,
        8,12,10,12,12,12,537,9,12,1,12,3,12,540,8,12,1,12,1,12,3,12,544,
        8,12,3,12,546,8,12,1,13,1,13,1,13,3,13,551,8,13,1,13,1,13,3,13,555,
        8,13,3,13,557,8,13,3,13,559,8,13,1,14,1,14,1,14,1,14,3,14,565,8,
        14,1,15,1,15,3,15,569,8,15,1,15,1,15,1,16,1,16,3,16,575,8,16,1,16,
        1,16,1,17,1,17,3,17,581,8,17,1,18,1,18,1,18,1,18,3,18,587,8,18,1,
        18,1,18,1,18,3,18,592,8,18,1,19,1,19,1,19,1,19,3,19,598,8,19,1,19,
        3,19,601,8,19,1,19,1,19,1,19,1,19,3,19,607,8,19,3,19,609,8,19,1,
        20,1,20,3,20,613,8,20,1,20,1,20,3,20,617,8,20,1,20,5,20,620,8,20,
        10,20,12,20,623,9,20,1,20,3,20,626,8,20,1,20,3,20,629,8,20,1,21,
        1,21,1,21,1,21,1,21,3,21,636,8,21,1,22,1,22,3,22,640,8,22,5,22,642,
        8,22,10,22,12,22,645,9,22,1,22,1,22,3,22,649,8,22,5,22,651,8,22,
        10,22,12,22,654,9,22,1,22,1,22,3,22,658,8,22,1,23,1,23,1,23,3,23,
        663,8,23,1,23,3,23,666,8,23,1,24,1,24,3,24,670,8,24,1,24,1,24,3,
        24,674,8,24,1,24,1,24,1,24,3,24,679,8,24,1,24,3,24,682,8,24,3,24,
        684,8,24,1,24,3,24,687,8,24,1,24,1,24,1,25,1,25,3,25,693,8,25,1,
        25,3,25,696,8,25,1,26,1,26,3,26,700,8,26,1,26,1,26,1,27,1,27,3,27,
        706,8,27,1,27,1,27,1,28,1,28,3,28,712,8,28,1,28,1,28,3,28,716,8,
        28,1,28,1,28,1,28,1,28,3,28,722,8,28,1,28,1,28,3,28,726,8,28,1,28,
        1,28,1,28,3,28,731,8,28,1,29,1,29,3,29,735,8,29,1,29,1,29,3,29,739,
        8,29,1,29,1,29,3,29,743,8,29,1,29,1,29,1,30,1,30,3,30,749,8,30,1,
        30,1,30,3,30,753,8,30,1,30,1,30,1,31,1,31,3,31,759,8,31,1,31,1,31,
        3,31,763,8,31,3,31,765,8,31,1,31,1,31,3,31,769,8,31,3,31,771,8,31,
        1,31,1,31,3,31,775,8,31,3,31,777,8,31,1,31,1,31,3,31,781,8,31,3,
        31,783,8,31,1,31,1,31,1,32,1,32,3,32,789,8,32,1,33,1,33,3,33,793,
        8,33,1,33,1,33,3,33,797,8,33,1,33,1,33,3,33,801,8,33,1,33,1,33,3,
        33,805,8,33,1,33,1,33,3,33,809,8,33,1,33,1,33,3,33,813,8,33,1,33,
        1,33,3,33,817,8,33,1,33,1,33,5,33,821,8,33,10,33,12,33,824,9,33,
        3,33,826,8,33,1,33,3,33,829,8,33,1,33,1,33,1,34,1,34,3,34,835,8,
        34,1,34,3,34,838,8,34,1,35,1,35,3,35,842,8,35,1,35,1,35,3,35,846,
        8,35,1,35,1,35,3,35,850,8,35,1,35,1,35,3,35,854,8,35,1,36,1,36,3,
        36,858,8,36,1,36,1,36,3,36,862,8,36,3,36,864,8,36,1,36,1,36,3,36,
        868,8,36,3,36,870,8,36,1,36,3,36,873,8,36,1,36,1,36,3,36,877,8,36,
        3,36,879,8,36,1,36,1,36,3,36,883,8,36,3,36,885,8,36,1,36,1,36,1,
        37,1,37,1,37,1,37,1,37,3,37,894,8,37,1,38,1,38,3,38,898,8,38,1,38,
        1,38,5,38,902,8,38,10,38,12,38,905,9,38,1,39,3,39,908,8,39,1,39,
        1,39,3,39,912,8,39,1,39,1,39,3,39,916,8,39,1,39,1,39,1,40,3,40,921,
        8,40,1,40,1,40,3,40,925,8,40,1,40,3,40,928,8,40,1,40,3,40,931,8,
        40,1,40,1,40,3,40,935,8,40,1,40,3,40,938,8,40,1,40,3,40,941,8,40,
        1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,3,43,951,8,43,1,43,5,43,
        954,8,43,10,43,12,43,957,9,43,1,43,3,43,960,8,43,1,43,1,43,3,43,
        964,8,43,3,43,966,8,43,1,44,1,44,3,44,970,8,44,1,44,5,44,973,8,44,
        10,44,12,44,976,9,44,1,44,1,44,3,44,980,8,44,1,44,1,44,3,44,984,
        8,44,3,44,986,8,44,3,44,988,8,44,1,44,3,44,991,8,44,1,44,1,44,1,
        45,3,45,996,8,45,1,45,1,45,1,46,1,46,3,46,1002,8,46,1,46,5,46,1005,
        8,46,10,46,12,46,1008,9,46,1,47,1,47,1,47,1,47,1,47,1,48,1,48,3,
        48,1017,8,48,1,48,1,48,3,48,1021,8,48,1,48,1,48,3,48,1025,8,48,1,
        48,1,48,3,48,1029,8,48,1,48,3,48,1032,8,48,1,48,1,48,3,48,1036,8,
        48,1,48,3,48,1039,8,48,1,48,1,48,1,49,1,49,3,49,1045,8,49,1,50,1,
        50,1,51,1,51,1,52,3,52,1052,8,52,1,52,1,52,3,52,1056,8,52,1,52,3,
        52,1059,8,52,1,52,3,52,1062,8,52,1,52,1,52,1,53,1,53,1,54,1,54,3,
        54,1070,8,54,1,54,5,54,1073,8,54,10,54,12,54,1076,9,54,1,55,1,55,
        1,55,1,55,3,55,1082,8,55,1,55,1,55,1,55,3,55,1087,8,55,1,55,3,55,
        1090,8,55,1,56,1,56,3,56,1094,8,56,1,57,1,57,3,57,1098,8,57,5,57,
        1100,8,57,10,57,12,57,1103,9,57,1,57,1,57,1,57,3,57,1108,8,57,5,
        57,1110,8,57,10,57,12,57,1113,9,57,1,57,1,57,3,57,1117,8,57,1,57,
        5,57,1120,8,57,10,57,12,57,1123,9,57,1,57,3,57,1126,8,57,1,57,3,
        57,1129,8,57,3,57,1131,8,57,1,58,4,58,1134,8,58,11,58,12,58,1135,
        1,58,1,58,1,59,1,59,1,59,3,59,1143,8,59,1,60,1,60,3,60,1147,8,60,
        1,60,1,60,1,60,1,60,1,60,1,60,1,61,1,61,3,61,1157,8,61,1,61,1,61,
        1,61,5,61,1162,8,61,10,61,12,61,1165,9,61,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,3,62,1177,8,62,1,63,1,63,3,63,1181,8,
        63,1,63,1,63,1,64,1,64,3,64,1187,8,64,1,64,1,64,3,64,1191,8,64,1,
        64,1,64,3,64,1195,8,64,1,64,5,64,1198,8,64,10,64,12,64,1201,9,64,
        1,65,1,65,3,65,1205,8,65,1,65,1,65,3,65,1209,8,65,1,65,1,65,3,65,
        1213,8,65,1,65,1,65,3,65,1217,8,65,1,65,5,65,1220,8,65,10,65,12,
        65,1223,9,65,1,66,1,66,1,66,1,66,3,66,1229,8,66,1,66,1,66,3,66,1233,
        8,66,1,66,5,66,1236,8,66,10,66,12,66,1239,9,66,1,67,1,67,3,67,1243,
        8,67,1,67,1,67,3,67,1247,8,67,1,67,5,67,1250,8,67,10,67,12,67,1253,
        9,67,1,67,3,67,1256,8,67,1,67,3,67,1259,8,67,1,68,1,68,1,68,1,68,
        1,68,3,68,1266,8,68,1,69,1,69,1,69,3,69,1271,8,69,1,69,3,69,1274,
        8,69,1,70,1,70,1,70,1,71,3,71,1280,8,71,1,71,3,71,1283,8,71,1,71,
        1,71,1,71,1,71,3,71,1289,8,71,1,71,1,71,3,71,1293,8,71,1,71,1,71,
        3,71,1297,8,71,1,72,1,72,3,72,1301,8,72,1,72,1,72,3,72,1305,8,72,
        1,72,5,72,1308,8,72,10,72,12,72,1311,9,72,1,72,1,72,3,72,1315,8,
        72,1,72,1,72,3,72,1319,8,72,1,72,5,72,1322,8,72,10,72,12,72,1325,
        9,72,3,72,1327,8,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1336,
        8,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,1345,8,74,1,74,5,74,
        1348,8,74,10,74,12,74,1351,9,74,1,75,1,75,1,75,1,75,1,76,1,76,1,
        76,1,76,1,77,1,77,3,77,1363,8,77,1,77,3,77,1366,8,77,1,78,1,78,1,
        78,1,78,1,79,1,79,3,79,1374,8,79,1,79,1,79,3,79,1378,8,79,1,79,5,
        79,1381,8,79,10,79,12,79,1384,9,79,1,80,1,80,1,81,1,81,3,81,1390,
        8,81,1,81,5,81,1393,8,81,10,81,12,81,1396,9,81,1,81,1,81,1,81,1,
        81,3,81,1402,8,81,1,82,1,82,3,82,1406,8,82,1,82,4,82,1409,8,82,11,
        82,12,82,1410,1,83,1,83,3,83,1415,8,83,1,83,1,83,1,84,1,84,3,84,
        1421,8,84,1,84,1,84,3,84,1425,8,84,1,84,3,84,1428,8,84,1,84,3,84,
        1431,8,84,1,84,1,84,3,84,1435,8,84,1,84,1,84,1,84,1,84,3,84,1441,
        8,84,1,84,1,84,3,84,1445,8,84,1,84,3,84,1448,8,84,1,84,3,84,1451,
        8,84,1,84,1,84,1,84,1,84,3,84,1457,8,84,1,84,3,84,1460,8,84,1,84,
        3,84,1463,8,84,1,84,1,84,3,84,1467,8,84,1,84,1,84,1,84,1,84,3,84,
        1473,8,84,1,84,3,84,1476,8,84,1,84,3,84,1479,8,84,1,84,1,84,3,84,
        1483,8,84,1,85,1,85,3,85,1487,8,85,1,86,1,86,3,86,1491,8,86,1,86,
        1,86,3,86,1495,8,86,1,86,1,86,3,86,1499,8,86,1,86,3,86,1502,8,86,
        1,86,5,86,1505,8,86,10,86,12,86,1508,9,86,1,87,1,87,3,87,1512,8,
        87,1,87,5,87,1515,8,87,10,87,12,87,1518,9,87,1,88,1,88,3,88,1522,
        8,88,1,88,1,88,1,89,1,89,3,89,1528,8,89,1,89,1,89,3,89,1532,8,89,
        3,89,1534,8,89,1,89,1,89,3,89,1538,8,89,1,89,1,89,3,89,1542,8,89,
        3,89,1544,8,89,3,89,1546,8,89,1,90,1,90,1,91,1,91,1,92,1,92,3,92,
        1554,8,92,1,92,4,92,1557,8,92,11,92,12,92,1558,1,93,1,93,1,94,1,
        94,1,94,1,94,1,94,5,94,1568,8,94,10,94,12,94,1571,9,94,1,95,1,95,
        1,95,1,95,1,95,5,95,1578,8,95,10,95,12,95,1581,9,95,1,96,1,96,1,
        96,1,96,1,96,5,96,1588,8,96,10,96,12,96,1591,9,96,1,97,1,97,3,97,
        1595,8,97,5,97,1597,8,97,10,97,12,97,1600,9,97,1,97,1,97,1,98,1,
        98,3,98,1606,8,98,1,98,1,98,3,98,1610,8,98,1,98,1,98,5,98,1614,8,
        98,10,98,12,98,1617,9,98,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
        1,99,1,99,3,99,1629,8,99,1,99,3,99,1632,8,99,1,99,1,99,1,100,1,100,
        1,100,3,100,1639,8,100,1,100,1,100,1,101,1,101,1,101,1,101,1,101,
        1,101,1,101,1,101,1,101,1,101,3,101,1653,8,101,1,102,1,102,3,102,
        1657,8,102,1,102,1,102,3,102,1661,8,102,1,102,1,102,5,102,1665,8,
        102,10,102,12,102,1668,9,102,1,103,1,103,1,104,1,104,1,105,1,105,
        1,106,1,106,1,107,1,107,3,107,1680,8,107,1,107,1,107,3,107,1684,
        8,107,1,107,1,107,5,107,1688,8,107,10,107,12,107,1691,9,107,1,108,
        1,108,3,108,1695,8,108,1,108,1,108,3,108,1699,8,108,1,108,1,108,
        5,108,1703,8,108,10,108,12,108,1706,9,108,1,109,1,109,1,109,3,109,
        1711,8,109,1,109,3,109,1714,8,109,1,110,1,110,3,110,1718,8,110,1,
        110,1,110,1,111,1,111,1,111,1,111,1,111,3,111,1727,8,111,1,111,1,
        111,3,111,1731,8,111,1,111,1,111,3,111,1735,8,111,1,111,1,111,1,
        111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,1746,8,111,1,112,1,
        112,3,112,1750,8,112,1,112,4,112,1753,8,112,11,112,12,112,1754,1,
        112,1,112,3,112,1759,8,112,1,112,1,112,3,112,1763,8,112,1,112,4,
        112,1766,8,112,11,112,12,112,1767,3,112,1770,8,112,1,112,3,112,1773,
        8,112,1,112,1,112,3,112,1777,8,112,1,112,3,112,1780,8,112,1,112,
        3,112,1783,8,112,1,112,1,112,1,113,1,113,3,113,1789,8,113,1,113,
        1,113,3,113,1793,8,113,1,113,1,113,3,113,1797,8,113,1,113,1,113,
        1,114,1,114,3,114,1803,8,114,1,114,1,114,3,114,1807,8,114,1,114,
        1,114,3,114,1811,8,114,1,114,3,114,1814,8,114,1,114,3,114,1817,8,
        114,1,114,1,114,1,115,1,115,3,115,1823,8,115,1,115,1,115,3,115,1827,
        8,115,1,115,1,115,3,115,1831,8,115,3,115,1833,8,115,1,115,1,115,
        3,115,1837,8,115,1,115,1,115,3,115,1841,8,115,3,115,1843,8,115,1,
        115,1,115,3,115,1847,8,115,1,115,1,115,3,115,1851,8,115,1,115,1,
        115,1,116,1,116,3,116,1857,8,116,1,116,1,116,3,116,1861,8,116,1,
        116,1,116,3,116,1865,8,116,1,116,1,116,1,116,1,116,3,116,1871,8,
        116,1,116,1,116,3,116,1875,8,116,1,116,1,116,3,116,1879,8,116,1,
        116,1,116,1,116,1,116,3,116,1885,8,116,1,116,1,116,3,116,1889,8,
        116,1,116,1,116,3,116,1893,8,116,1,116,1,116,1,116,1,116,3,116,1899,
        8,116,1,116,1,116,3,116,1903,8,116,1,116,1,116,3,116,1907,8,116,
        1,116,1,116,3,116,1911,8,116,1,117,1,117,1,118,1,118,3,118,1917,
        8,118,1,118,1,118,3,118,1921,8,118,1,118,1,118,1,119,1,119,1,119,
        1,119,1,119,1,119,1,120,1,120,3,120,1933,8,120,1,120,1,120,3,120,
        1937,8,120,1,120,1,120,3,120,1941,8,120,3,120,1943,8,120,1,120,1,
        120,3,120,1947,8,120,1,120,1,120,3,120,1951,8,120,1,120,1,120,3,
        120,1955,8,120,5,120,1957,8,120,10,120,12,120,1960,9,120,3,120,1962,
        8,120,1,120,1,120,1,121,1,121,1,122,1,122,1,122,1,123,1,123,3,123,
        1973,8,123,1,123,1,123,3,123,1977,8,123,1,123,1,123,3,123,1981,8,
        123,1,123,1,123,3,123,1985,8,123,1,123,1,123,3,123,1989,8,123,5,
        123,1991,8,123,10,123,12,123,1994,9,123,3,123,1996,8,123,1,123,1,
        123,1,124,1,124,1,125,1,125,1,126,1,126,1,126,1,127,1,127,1,127,
        5,127,2010,8,127,10,127,12,127,2013,9,127,1,128,1,128,1,129,1,129,
        1,129,1,129,1,129,1,129,3,129,2023,8,129,1,130,1,130,1,131,1,131,
        3,131,2029,8,131,1,132,1,132,1,133,1,133,1,134,1,134,3,134,2037,
        8,134,1,134,1,134,3,134,2041,8,134,1,134,1,134,3,134,2045,8,134,
        1,134,1,134,3,134,2049,8,134,5,134,2051,8,134,10,134,12,134,2054,
        9,134,3,134,2056,8,134,1,134,1,134,1,135,1,135,1,136,1,136,3,136,
        2064,8,136,1,136,1,136,1,136,3,136,2069,8,136,1,136,5,136,2072,8,
        136,10,136,12,136,2075,9,136,3,136,2077,8,136,1,136,1,136,1,137,
        1,137,3,137,2083,8,137,1,137,1,137,3,137,2087,8,137,1,137,1,137,
        3,137,2091,8,137,1,138,1,138,1,139,1,139,1,139,3,139,2098,8,139,
        1,140,1,140,3,140,2102,8,140,1,141,1,141,1,142,1,142,1,143,1,143,
        1,143,0,0,144,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
        152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
        184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
        216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
        248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,
        280,282,284,286,0,13,1,0,54,55,7,0,48,48,93,93,97,97,99,101,108,
        108,129,131,134,134,5,0,48,68,71,92,94,98,102,104,119,128,1,0,78,
        81,2,0,5,5,16,17,1,0,19,20,2,0,2,2,21,25,1,0,103,104,1,0,105,107,
        1,0,115,116,2,0,22,22,27,30,2,0,24,24,31,34,2,0,20,20,35,45,2392,
        0,291,1,0,0,0,2,295,1,0,0,0,4,323,1,0,0,0,6,325,1,0,0,0,8,336,1,
        0,0,0,10,354,1,0,0,0,12,378,1,0,0,0,14,486,1,0,0,0,16,488,1,0,0,
        0,18,494,1,0,0,0,20,501,1,0,0,0,22,507,1,0,0,0,24,518,1,0,0,0,26,
        547,1,0,0,0,28,564,1,0,0,0,30,566,1,0,0,0,32,572,1,0,0,0,34,580,
        1,0,0,0,36,582,1,0,0,0,38,593,1,0,0,0,40,610,1,0,0,0,42,630,1,0,
        0,0,44,643,1,0,0,0,46,659,1,0,0,0,48,667,1,0,0,0,50,690,1,0,0,0,
        52,697,1,0,0,0,54,703,1,0,0,0,56,730,1,0,0,0,58,732,1,0,0,0,60,746,
        1,0,0,0,62,756,1,0,0,0,64,788,1,0,0,0,66,790,1,0,0,0,68,832,1,0,
        0,0,70,839,1,0,0,0,72,855,1,0,0,0,74,888,1,0,0,0,76,897,1,0,0,0,
        78,907,1,0,0,0,80,920,1,0,0,0,82,944,1,0,0,0,84,946,1,0,0,0,86,948,
        1,0,0,0,88,967,1,0,0,0,90,995,1,0,0,0,92,999,1,0,0,0,94,1009,1,0,
        0,0,96,1014,1,0,0,0,98,1044,1,0,0,0,100,1046,1,0,0,0,102,1048,1,
        0,0,0,104,1051,1,0,0,0,106,1065,1,0,0,0,108,1067,1,0,0,0,110,1089,
        1,0,0,0,112,1093,1,0,0,0,114,1130,1,0,0,0,116,1133,1,0,0,0,118,1142,
        1,0,0,0,120,1144,1,0,0,0,122,1154,1,0,0,0,124,1176,1,0,0,0,126,1178,
        1,0,0,0,128,1184,1,0,0,0,130,1204,1,0,0,0,132,1224,1,0,0,0,134,1240,
        1,0,0,0,136,1260,1,0,0,0,138,1267,1,0,0,0,140,1275,1,0,0,0,142,1282,
        1,0,0,0,144,1326,1,0,0,0,146,1335,1,0,0,0,148,1337,1,0,0,0,150,1352,
        1,0,0,0,152,1356,1,0,0,0,154,1360,1,0,0,0,156,1367,1,0,0,0,158,1371,
        1,0,0,0,160,1385,1,0,0,0,162,1401,1,0,0,0,164,1403,1,0,0,0,166,1412,
        1,0,0,0,168,1482,1,0,0,0,170,1486,1,0,0,0,172,1488,1,0,0,0,174,1509,
        1,0,0,0,176,1519,1,0,0,0,178,1525,1,0,0,0,180,1547,1,0,0,0,182,1549,
        1,0,0,0,184,1551,1,0,0,0,186,1560,1,0,0,0,188,1562,1,0,0,0,190,1572,
        1,0,0,0,192,1582,1,0,0,0,194,1598,1,0,0,0,196,1603,1,0,0,0,198,1628,
        1,0,0,0,200,1635,1,0,0,0,202,1652,1,0,0,0,204,1654,1,0,0,0,206,1669,
        1,0,0,0,208,1671,1,0,0,0,210,1673,1,0,0,0,212,1675,1,0,0,0,214,1677,
        1,0,0,0,216,1692,1,0,0,0,218,1713,1,0,0,0,220,1715,1,0,0,0,222,1745,
        1,0,0,0,224,1769,1,0,0,0,226,1786,1,0,0,0,228,1800,1,0,0,0,230,1820,
        1,0,0,0,232,1910,1,0,0,0,234,1912,1,0,0,0,236,1914,1,0,0,0,238,1924,
        1,0,0,0,240,1930,1,0,0,0,242,1965,1,0,0,0,244,1967,1,0,0,0,246,1970,
        1,0,0,0,248,1999,1,0,0,0,250,2001,1,0,0,0,252,2003,1,0,0,0,254,2011,
        1,0,0,0,256,2014,1,0,0,0,258,2022,1,0,0,0,260,2024,1,0,0,0,262,2028,
        1,0,0,0,264,2030,1,0,0,0,266,2032,1,0,0,0,268,2034,1,0,0,0,270,2059,
        1,0,0,0,272,2061,1,0,0,0,274,2080,1,0,0,0,276,2092,1,0,0,0,278,2094,
        1,0,0,0,280,2101,1,0,0,0,282,2103,1,0,0,0,284,2105,1,0,0,0,286,2107,
        1,0,0,0,288,292,3,108,54,0,289,292,3,38,19,0,290,292,3,34,17,0,291,
        288,1,0,0,0,291,289,1,0,0,0,291,290,1,0,0,0,292,1,1,0,0,0,293,294,
        5,58,0,0,294,296,5,135,0,0,295,293,1,0,0,0,295,296,1,0,0,0,296,297,
        1,0,0,0,297,299,5,59,0,0,298,300,5,135,0,0,299,298,1,0,0,0,299,300,
        1,0,0,0,300,301,1,0,0,0,301,309,3,158,79,0,302,304,5,135,0,0,303,
        302,1,0,0,0,303,304,1,0,0,0,304,307,1,0,0,0,305,308,3,30,15,0,306,
        308,3,32,16,0,307,305,1,0,0,0,307,306,1,0,0,0,308,310,1,0,0,0,309,
        303,1,0,0,0,309,310,1,0,0,0,310,315,1,0,0,0,311,313,5,135,0,0,312,
        311,1,0,0,0,312,313,1,0,0,0,313,314,1,0,0,0,314,316,3,156,78,0,315,
        312,1,0,0,0,315,316,1,0,0,0,316,3,1,0,0,0,317,324,3,6,3,0,318,324,
        3,8,4,0,319,324,3,10,5,0,320,324,3,132,66,0,321,324,3,12,6,0,322,
        324,3,24,12,0,323,317,1,0,0,0,323,318,1,0,0,0,323,319,1,0,0,0,323,
        320,1,0,0,0,323,321,1,0,0,0,323,322,1,0,0,0,324,5,1,0,0,0,325,327,
        5,64,0,0,326,328,5,135,0,0,327,326,1,0,0,0,327,328,1,0,0,0,328,329,
        1,0,0,0,329,334,3,158,79,0,330,332,5,135,0,0,331,330,1,0,0,0,331,
        332,1,0,0,0,332,333,1,0,0,0,333,335,3,30,15,0,334,331,1,0,0,0,334,
        335,1,0,0,0,335,7,1,0,0,0,336,338,5,62,0,0,337,339,5,135,0,0,338,
        337,1,0,0,0,338,339,1,0,0,0,339,340,1,0,0,0,340,345,3,56,28,0,341,
        342,5,135,0,0,342,344,3,124,62,0,343,341,1,0,0,0,344,347,1,0,0,0,
        345,343,1,0,0,0,345,346,1,0,0,0,346,352,1,0,0,0,347,345,1,0,0,0,
        348,350,5,135,0,0,349,348,1,0,0,0,349,350,1,0,0,0,350,351,1,0,0,
        0,351,353,3,30,15,0,352,349,1,0,0,0,352,353,1,0,0,0,353,9,1,0,0,
        0,354,356,5,65,0,0,355,357,5,135,0,0,356,355,1,0,0,0,356,357,1,0,
        0,0,357,358,1,0,0,0,358,369,3,14,7,0,359,361,5,135,0,0,360,359,1,
        0,0,0,360,361,1,0,0,0,361,362,1,0,0,0,362,364,5,1,0,0,363,365,5,
        135,0,0,364,363,1,0,0,0,364,365,1,0,0,0,365,366,1,0,0,0,366,368,
        3,14,7,0,367,360,1,0,0,0,368,371,1,0,0,0,369,367,1,0,0,0,369,370,
        1,0,0,0,370,376,1,0,0,0,371,369,1,0,0,0,372,374,5,135,0,0,373,372,
        1,0,0,0,373,374,1,0,0,0,374,375,1,0,0,0,375,377,3,30,15,0,376,373,
        1,0,0,0,376,377,1,0,0,0,377,11,1,0,0,0,378,380,5,53,0,0,379,381,
        5,135,0,0,380,379,1,0,0,0,380,381,1,0,0,0,381,382,1,0,0,0,382,393,
        3,22,11,0,383,385,5,135,0,0,384,383,1,0,0,0,384,385,1,0,0,0,385,
        386,1,0,0,0,386,388,5,1,0,0,387,389,5,135,0,0,388,387,1,0,0,0,388,
        389,1,0,0,0,389,390,1,0,0,0,390,392,3,22,11,0,391,384,1,0,0,0,392,
        395,1,0,0,0,393,391,1,0,0,0,393,394,1,0,0,0,394,400,1,0,0,0,395,
        393,1,0,0,0,396,398,5,135,0,0,397,396,1,0,0,0,397,398,1,0,0,0,398,
        399,1,0,0,0,399,401,3,30,15,0,400,397,1,0,0,0,400,401,1,0,0,0,401,
        13,1,0,0,0,402,407,3,184,92,0,403,405,5,135,0,0,404,403,1,0,0,0,
        404,405,1,0,0,0,405,406,1,0,0,0,406,408,3,96,48,0,407,404,1,0,0,
        0,407,408,1,0,0,0,408,410,1,0,0,0,409,411,5,135,0,0,410,409,1,0,
        0,0,410,411,1,0,0,0,411,412,1,0,0,0,412,414,5,2,0,0,413,415,5,135,
        0,0,414,413,1,0,0,0,414,415,1,0,0,0,415,416,1,0,0,0,416,417,3,186,
        93,0,417,487,1,0,0,0,418,420,3,256,128,0,419,421,5,135,0,0,420,419,
        1,0,0,0,420,421,1,0,0,0,421,422,1,0,0,0,422,424,5,2,0,0,423,425,
        5,135,0,0,424,423,1,0,0,0,424,425,1,0,0,0,425,426,1,0,0,0,426,427,
        3,186,93,0,427,487,1,0,0,0,428,430,3,256,128,0,429,431,5,135,0,0,
        430,429,1,0,0,0,430,431,1,0,0,0,431,432,1,0,0,0,432,434,5,3,0,0,
        433,435,5,135,0,0,434,433,1,0,0,0,434,435,1,0,0,0,435,436,1,0,0,
        0,436,437,3,186,93,0,437,487,1,0,0,0,438,440,3,256,128,0,439,441,
        5,135,0,0,440,439,1,0,0,0,440,441,1,0,0,0,441,442,1,0,0,0,442,443,
        3,174,87,0,443,487,1,0,0,0,444,446,3,256,128,0,445,447,5,135,0,0,
        446,445,1,0,0,0,446,447,1,0,0,0,447,448,1,0,0,0,448,449,3,96,48,
        0,449,487,1,0,0,0,450,455,3,256,128,0,451,453,5,135,0,0,452,451,
        1,0,0,0,452,453,1,0,0,0,453,454,1,0,0,0,454,456,3,96,48,0,455,452,
        1,0,0,0,455,456,1,0,0,0,456,458,1,0,0,0,457,459,5,135,0,0,458,457,
        1,0,0,0,458,459,1,0,0,0,459,460,1,0,0,0,460,462,5,4,0,0,461,463,
        5,135,0,0,462,461,1,0,0,0,462,463,1,0,0,0,463,464,1,0,0,0,464,465,
        3,16,8,0,465,487,1,0,0,0,466,471,3,256,128,0,467,469,5,135,0,0,468,
        467,1,0,0,0,468,469,1,0,0,0,469,470,1,0,0,0,470,472,3,96,48,0,471,
        468,1,0,0,0,471,472,1,0,0,0,472,474,1,0,0,0,473,475,5,135,0,0,474,
        473,1,0,0,0,474,475,1,0,0,0,475,476,1,0,0,0,476,478,5,4,0,0,477,
        479,5,135,0,0,478,477,1,0,0,0,478,479,1,0,0,0,479,480,1,0,0,0,480,
        482,3,18,9,0,481,483,5,135,0,0,482,481,1,0,0,0,482,483,1,0,0,0,483,
        484,1,0,0,0,484,485,3,20,10,0,485,487,1,0,0,0,486,402,1,0,0,0,486,
        418,1,0,0,0,486,428,1,0,0,0,486,438,1,0,0,0,486,444,1,0,0,0,486,
        450,1,0,0,0,486,466,1,0,0,0,487,15,1,0,0,0,488,490,3,276,138,0,489,
        491,5,135,0,0,490,489,1,0,0,0,490,491,1,0,0,0,491,492,1,0,0,0,492,
        493,3,96,48,0,493,17,1,0,0,0,494,499,3,276,138,0,495,497,5,135,0,
        0,496,495,1,0,0,0,496,497,1,0,0,0,497,498,1,0,0,0,498,500,3,96,48,
        0,499,496,1,0,0,0,499,500,1,0,0,0,500,19,1,0,0,0,501,503,5,47,0,
        0,502,504,5,135,0,0,503,502,1,0,0,0,503,504,1,0,0,0,504,505,1,0,
        0,0,505,506,3,96,48,0,506,21,1,0,0,0,507,514,3,186,93,0,508,510,
        3,90,45,0,509,511,5,135,0,0,510,509,1,0,0,0,510,511,1,0,0,0,511,
        512,1,0,0,0,512,513,5,47,0,0,513,515,1,0,0,0,514,508,1,0,0,0,514,
        515,1,0,0,0,515,23,1,0,0,0,516,517,5,66,0,0,517,519,5,135,0,0,518,
        516,1,0,0,0,518,519,1,0,0,0,519,520,1,0,0,0,520,522,5,67,0,0,521,
        523,5,135,0,0,522,521,1,0,0,0,522,523,1,0,0,0,523,524,1,0,0,0,524,
        535,3,26,13,0,525,527,5,135,0,0,526,525,1,0,0,0,526,527,1,0,0,0,
        527,528,1,0,0,0,528,530,5,1,0,0,529,531,5,135,0,0,530,529,1,0,0,
        0,530,531,1,0,0,0,531,532,1,0,0,0,532,534,3,26,13,0,533,526,1,0,
        0,0,534,537,1,0,0,0,535,533,1,0,0,0,535,536,1,0,0,0,536,545,1,0,
        0,0,537,535,1,0,0,0,538,540,5,135,0,0,539,538,1,0,0,0,539,540,1,
        0,0,0,540,543,1,0,0,0,541,544,3,30,15,0,542,544,3,32,16,0,543,541,
        1,0,0,0,543,542,1,0,0,0,544,546,1,0,0,0,545,539,1,0,0,0,545,546,
        1,0,0,0,546,25,1,0,0,0,547,558,3,186,93,0,548,556,3,90,45,0,549,
        551,5,135,0,0,550,549,1,0,0,0,550,551,1,0,0,0,551,554,1,0,0,0,552,
        555,5,47,0,0,553,555,3,96,48,0,554,552,1,0,0,0,554,553,1,0,0,0,555,
        557,1,0,0,0,556,550,1,0,0,0,556,557,1,0,0,0,557,559,1,0,0,0,558,
        548,1,0,0,0,558,559,1,0,0,0,559,27,1,0,0,0,560,561,3,256,128,0,561,
        562,3,174,87,0,562,565,1,0,0,0,563,565,3,184,92,0,564,560,1,0,0,
        0,564,563,1,0,0,0,565,29,1,0,0,0,566,568,5,49,0,0,567,569,5,135,
        0,0,568,567,1,0,0,0,568,569,1,0,0,0,569,570,1,0,0,0,570,571,3,186,
        93,0,571,31,1,0,0,0,572,574,5,51,0,0,573,575,5,135,0,0,574,573,1,
        0,0,0,574,575,1,0,0,0,575,576,1,0,0,0,576,577,3,186,93,0,577,33,
        1,0,0,0,578,581,3,52,26,0,579,581,3,54,27,0,580,578,1,0,0,0,580,
        579,1,0,0,0,581,35,1,0,0,0,582,583,5,69,0,0,583,584,5,135,0,0,584,
        591,3,246,123,0,585,587,5,135,0,0,586,585,1,0,0,0,586,587,1,0,0,
        0,587,588,1,0,0,0,588,589,5,70,0,0,589,590,5,135,0,0,590,592,3,40,
        20,0,591,586,1,0,0,0,591,592,1,0,0,0,592,37,1,0,0,0,593,594,5,69,
        0,0,594,597,5,135,0,0,595,598,3,246,123,0,596,598,3,248,124,0,597,
        595,1,0,0,0,597,596,1,0,0,0,598,608,1,0,0,0,599,601,5,135,0,0,600,
        599,1,0,0,0,600,601,1,0,0,0,601,602,1,0,0,0,602,603,5,70,0,0,603,
        606,5,135,0,0,604,607,5,5,0,0,605,607,3,40,20,0,606,604,1,0,0,0,
        606,605,1,0,0,0,607,609,1,0,0,0,608,600,1,0,0,0,608,609,1,0,0,0,
        609,39,1,0,0,0,610,621,3,42,21,0,611,613,5,135,0,0,612,611,1,0,0,
        0,612,613,1,0,0,0,613,614,1,0,0,0,614,616,5,1,0,0,615,617,5,135,
        0,0,616,615,1,0,0,0,616,617,1,0,0,0,617,618,1,0,0,0,618,620,3,42,
        21,0,619,612,1,0,0,0,620,623,1,0,0,0,621,619,1,0,0,0,621,622,1,0,
        0,0,622,628,1,0,0,0,623,621,1,0,0,0,624,626,5,135,0,0,625,624,1,
        0,0,0,625,626,1,0,0,0,626,627,1,0,0,0,627,629,3,156,78,0,628,625,
        1,0,0,0,628,629,1,0,0,0,629,41,1,0,0,0,630,635,3,250,125,0,631,632,
        5,135,0,0,632,633,5,61,0,0,633,634,5,135,0,0,634,636,3,256,128,0,
        635,631,1,0,0,0,635,636,1,0,0,0,636,43,1,0,0,0,637,639,3,118,59,
        0,638,640,5,135,0,0,639,638,1,0,0,0,639,640,1,0,0,0,640,642,1,0,
        0,0,641,637,1,0,0,0,642,645,1,0,0,0,643,641,1,0,0,0,643,644,1,0,
        0,0,644,652,1,0,0,0,645,643,1,0,0,0,646,648,3,4,2,0,647,649,5,135,
        0,0,648,647,1,0,0,0,648,649,1,0,0,0,649,651,1,0,0,0,650,646,1,0,
        0,0,651,654,1,0,0,0,652,650,1,0,0,0,652,653,1,0,0,0,653,655,1,0,
        0,0,654,652,1,0,0,0,655,657,3,46,23,0,656,658,5,135,0,0,657,656,
        1,0,0,0,657,658,1,0,0,0,658,45,1,0,0,0,659,660,5,71,0,0,660,665,
        3,142,71,0,661,663,5,135,0,0,662,661,1,0,0,0,662,663,1,0,0,0,663,
        664,1,0,0,0,664,666,3,156,78,0,665,662,1,0,0,0,665,666,1,0,0,0,666,
        47,1,0,0,0,667,669,5,102,0,0,668,670,5,135,0,0,669,668,1,0,0,0,669,
        670,1,0,0,0,670,671,1,0,0,0,671,673,5,6,0,0,672,674,5,135,0,0,673,
        672,1,0,0,0,673,674,1,0,0,0,674,683,1,0,0,0,675,684,3,108,54,0,676,
        681,3,158,79,0,677,679,5,135,0,0,678,677,1,0,0,0,678,679,1,0,0,0,
        679,680,1,0,0,0,680,682,3,156,78,0,681,678,1,0,0,0,681,682,1,0,0,
        0,682,684,1,0,0,0,683,675,1,0,0,0,683,676,1,0,0,0,684,686,1,0,0,
        0,685,687,5,135,0,0,686,685,1,0,0,0,686,687,1,0,0,0,687,688,1,0,
        0,0,688,689,5,7,0,0,689,49,1,0,0,0,690,695,3,238,119,0,691,693,5,
        135,0,0,692,691,1,0,0,0,692,693,1,0,0,0,693,694,1,0,0,0,694,696,
        3,156,78,0,695,692,1,0,0,0,695,696,1,0,0,0,696,51,1,0,0,0,697,699,
        5,50,0,0,698,700,5,135,0,0,699,698,1,0,0,0,699,700,1,0,0,0,700,701,
        1,0,0,0,701,702,3,186,93,0,702,53,1,0,0,0,703,705,5,52,0,0,704,706,
        5,135,0,0,705,704,1,0,0,0,705,706,1,0,0,0,706,707,1,0,0,0,707,708,
        3,186,93,0,708,55,1,0,0,0,709,711,3,256,128,0,710,712,5,135,0,0,
        711,710,1,0,0,0,711,712,1,0,0,0,712,713,1,0,0,0,713,715,5,2,0,0,
        714,716,5,135,0,0,715,714,1,0,0,0,715,716,1,0,0,0,716,717,1,0,0,
        0,717,718,3,58,29,0,718,731,1,0,0,0,719,721,3,256,128,0,720,722,
        5,135,0,0,721,720,1,0,0,0,721,722,1,0,0,0,722,723,1,0,0,0,723,725,
        5,2,0,0,724,726,5,135,0,0,725,724,1,0,0,0,725,726,1,0,0,0,726,727,
        1,0,0,0,727,728,3,160,80,0,728,731,1,0,0,0,729,731,3,160,80,0,730,
        709,1,0,0,0,730,719,1,0,0,0,730,729,1,0,0,0,731,57,1,0,0,0,732,734,
        3,244,122,0,733,735,5,135,0,0,734,733,1,0,0,0,734,735,1,0,0,0,735,
        736,1,0,0,0,736,738,5,8,0,0,737,739,5,135,0,0,738,737,1,0,0,0,738,
        739,1,0,0,0,739,740,1,0,0,0,740,742,3,60,30,0,741,743,5,135,0,0,
        742,741,1,0,0,0,742,743,1,0,0,0,743,744,1,0,0,0,744,745,5,9,0,0,
        745,59,1,0,0,0,746,748,3,62,31,0,747,749,5,135,0,0,748,747,1,0,0,
        0,748,749,1,0,0,0,749,750,1,0,0,0,750,752,3,168,84,0,751,753,5,135,
        0,0,752,751,1,0,0,0,752,753,1,0,0,0,753,754,1,0,0,0,754,755,3,62,
        31,0,755,61,1,0,0,0,756,758,5,8,0,0,757,759,5,135,0,0,758,757,1,
        0,0,0,758,759,1,0,0,0,759,764,1,0,0,0,760,762,3,256,128,0,761,763,
        5,135,0,0,762,761,1,0,0,0,762,763,1,0,0,0,763,765,1,0,0,0,764,760,
        1,0,0,0,764,765,1,0,0,0,765,770,1,0,0,0,766,768,3,174,87,0,767,769,
        5,135,0,0,768,767,1,0,0,0,768,769,1,0,0,0,769,771,1,0,0,0,770,766,
        1,0,0,0,770,771,1,0,0,0,771,776,1,0,0,0,772,774,3,96,48,0,773,775,
        5,135,0,0,774,773,1,0,0,0,774,775,1,0,0,0,775,777,1,0,0,0,776,772,
        1,0,0,0,776,777,1,0,0,0,777,782,1,0,0,0,778,780,3,64,32,0,779,781,
        5,135,0,0,780,779,1,0,0,0,780,781,1,0,0,0,781,783,1,0,0,0,782,778,
        1,0,0,0,782,783,1,0,0,0,783,784,1,0,0,0,784,785,5,9,0,0,785,63,1,
        0,0,0,786,789,3,66,33,0,787,789,3,278,139,0,788,786,1,0,0,0,788,
        787,1,0,0,0,789,65,1,0,0,0,790,825,5,6,0,0,791,793,5,135,0,0,792,
        791,1,0,0,0,792,793,1,0,0,0,793,794,1,0,0,0,794,796,3,68,34,0,795,
        797,5,135,0,0,796,795,1,0,0,0,796,797,1,0,0,0,797,798,1,0,0,0,798,
        800,5,10,0,0,799,801,5,135,0,0,800,799,1,0,0,0,800,801,1,0,0,0,801,
        802,1,0,0,0,802,822,3,70,35,0,803,805,5,135,0,0,804,803,1,0,0,0,
        804,805,1,0,0,0,805,806,1,0,0,0,806,808,5,1,0,0,807,809,5,135,0,
        0,808,807,1,0,0,0,808,809,1,0,0,0,809,810,1,0,0,0,810,812,3,68,34,
        0,811,813,5,135,0,0,812,811,1,0,0,0,812,813,1,0,0,0,813,814,1,0,
        0,0,814,816,5,10,0,0,815,817,5,135,0,0,816,815,1,0,0,0,816,817,1,
        0,0,0,817,818,1,0,0,0,818,819,3,70,35,0,819,821,1,0,0,0,820,804,
        1,0,0,0,821,824,1,0,0,0,822,820,1,0,0,0,822,823,1,0,0,0,823,826,
        1,0,0,0,824,822,1,0,0,0,825,792,1,0,0,0,825,826,1,0,0,0,826,828,
        1,0,0,0,827,829,5,135,0,0,828,827,1,0,0,0,828,829,1,0,0,0,829,830,
        1,0,0,0,830,831,5,7,0,0,831,67,1,0,0,0,832,837,3,276,138,0,833,835,
        5,135,0,0,834,833,1,0,0,0,834,835,1,0,0,0,835,836,1,0,0,0,836,838,
        3,96,48,0,837,834,1,0,0,0,837,838,1,0,0,0,838,69,1,0,0,0,839,841,
        3,186,93,0,840,842,5,135,0,0,841,840,1,0,0,0,841,842,1,0,0,0,842,
        853,1,0,0,0,843,845,5,8,0,0,844,846,5,135,0,0,845,844,1,0,0,0,845,
        846,1,0,0,0,846,847,1,0,0,0,847,849,3,96,48,0,848,850,5,135,0,0,
        849,848,1,0,0,0,849,850,1,0,0,0,850,851,1,0,0,0,851,852,5,9,0,0,
        852,854,1,0,0,0,853,843,1,0,0,0,853,854,1,0,0,0,854,71,1,0,0,0,855,
        857,5,11,0,0,856,858,5,135,0,0,857,856,1,0,0,0,857,858,1,0,0,0,858,
        863,1,0,0,0,859,861,3,256,128,0,860,862,5,135,0,0,861,860,1,0,0,
        0,861,862,1,0,0,0,862,864,1,0,0,0,863,859,1,0,0,0,863,864,1,0,0,
        0,864,869,1,0,0,0,865,867,3,172,86,0,866,868,5,135,0,0,867,866,1,
        0,0,0,867,868,1,0,0,0,868,870,1,0,0,0,869,865,1,0,0,0,869,870,1,
        0,0,0,870,872,1,0,0,0,871,873,3,178,89,0,872,871,1,0,0,0,872,873,
        1,0,0,0,873,878,1,0,0,0,874,876,3,96,48,0,875,877,5,135,0,0,876,
        875,1,0,0,0,876,877,1,0,0,0,877,879,1,0,0,0,878,874,1,0,0,0,878,
        879,1,0,0,0,879,884,1,0,0,0,880,882,3,170,85,0,881,883,5,135,0,0,
        882,881,1,0,0,0,882,883,1,0,0,0,883,885,1,0,0,0,884,880,1,0,0,0,
        884,885,1,0,0,0,885,886,1,0,0,0,886,887,5,12,0,0,887,73,1,0,0,0,
        888,893,3,204,102,0,889,894,3,94,47,0,890,894,3,198,99,0,891,894,
        3,200,100,0,892,894,3,202,101,0,893,889,1,0,0,0,893,890,1,0,0,0,
        893,891,1,0,0,0,893,892,1,0,0,0,893,894,1,0,0,0,894,75,1,0,0,0,895,
        898,3,86,43,0,896,898,3,88,44,0,897,895,1,0,0,0,897,896,1,0,0,0,
        898,903,1,0,0,0,899,902,3,78,39,0,900,902,3,80,40,0,901,899,1,0,
        0,0,901,900,1,0,0,0,902,905,1,0,0,0,903,901,1,0,0,0,903,904,1,0,
        0,0,904,77,1,0,0,0,905,903,1,0,0,0,906,908,5,135,0,0,907,906,1,0,
        0,0,907,908,1,0,0,0,908,909,1,0,0,0,909,911,5,11,0,0,910,912,5,135,
        0,0,911,910,1,0,0,0,911,912,1,0,0,0,912,913,1,0,0,0,913,915,3,82,
        41,0,914,916,5,135,0,0,915,914,1,0,0,0,915,916,1,0,0,0,916,917,1,
        0,0,0,917,918,5,12,0,0,918,79,1,0,0,0,919,921,5,135,0,0,920,919,
        1,0,0,0,920,921,1,0,0,0,921,922,1,0,0,0,922,924,5,11,0,0,923,925,
        5,135,0,0,924,923,1,0,0,0,924,925,1,0,0,0,925,927,1,0,0,0,926,928,
        3,82,41,0,927,926,1,0,0,0,927,928,1,0,0,0,928,930,1,0,0,0,929,931,
        5,135,0,0,930,929,1,0,0,0,930,931,1,0,0,0,931,932,1,0,0,0,932,934,
        5,13,0,0,933,935,5,135,0,0,934,933,1,0,0,0,934,935,1,0,0,0,935,937,
        1,0,0,0,936,938,3,84,42,0,937,936,1,0,0,0,937,938,1,0,0,0,938,940,
        1,0,0,0,939,941,5,135,0,0,940,939,1,0,0,0,940,941,1,0,0,0,941,942,
        1,0,0,0,942,943,5,12,0,0,943,81,1,0,0,0,944,945,3,186,93,0,945,83,
        1,0,0,0,946,947,3,186,93,0,947,85,1,0,0,0,948,955,3,222,111,0,949,
        951,5,135,0,0,950,949,1,0,0,0,950,951,1,0,0,0,951,952,1,0,0,0,952,
        954,3,220,110,0,953,950,1,0,0,0,954,957,1,0,0,0,955,953,1,0,0,0,
        955,956,1,0,0,0,956,965,1,0,0,0,957,955,1,0,0,0,958,960,5,135,0,
        0,959,958,1,0,0,0,959,960,1,0,0,0,960,963,1,0,0,0,961,964,3,174,
        87,0,962,964,3,96,48,0,963,961,1,0,0,0,963,962,1,0,0,0,964,966,1,
        0,0,0,965,959,1,0,0,0,965,966,1,0,0,0,966,87,1,0,0,0,967,974,3,222,
        111,0,968,970,5,135,0,0,969,968,1,0,0,0,969,970,1,0,0,0,970,971,
        1,0,0,0,971,973,3,220,110,0,972,969,1,0,0,0,973,976,1,0,0,0,974,
        972,1,0,0,0,974,975,1,0,0,0,975,987,1,0,0,0,976,974,1,0,0,0,977,
        985,3,90,45,0,978,980,5,135,0,0,979,978,1,0,0,0,979,980,1,0,0,0,
        980,983,1,0,0,0,981,984,5,47,0,0,982,984,3,96,48,0,983,981,1,0,0,
        0,983,982,1,0,0,0,984,986,1,0,0,0,985,979,1,0,0,0,985,986,1,0,0,
        0,986,988,1,0,0,0,987,977,1,0,0,0,987,988,1,0,0,0,988,990,1,0,0,
        0,989,991,5,135,0,0,990,989,1,0,0,0,990,991,1,0,0,0,991,992,1,0,
        0,0,992,993,3,92,46,0,993,89,1,0,0,0,994,996,5,135,0,0,995,994,1,
        0,0,0,995,996,1,0,0,0,996,997,1,0,0,0,997,998,3,220,110,0,998,91,
        1,0,0,0,999,1006,5,46,0,0,1000,1002,5,135,0,0,1001,1000,1,0,0,0,
        1001,1002,1,0,0,0,1002,1003,1,0,0,0,1003,1005,3,220,110,0,1004,1001,
        1,0,0,0,1005,1008,1,0,0,0,1006,1004,1,0,0,0,1006,1007,1,0,0,0,1007,
        93,1,0,0,0,1008,1006,1,0,0,0,1009,1010,5,135,0,0,1010,1011,7,0,0,
        0,1011,1012,5,135,0,0,1012,1013,3,204,102,0,1013,95,1,0,0,0,1014,
        1016,5,46,0,0,1015,1017,5,135,0,0,1016,1015,1,0,0,0,1016,1017,1,
        0,0,0,1017,1018,1,0,0,0,1018,1028,5,8,0,0,1019,1021,5,135,0,0,1020,
        1019,1,0,0,0,1020,1021,1,0,0,0,1021,1022,1,0,0,0,1022,1024,3,98,
        49,0,1023,1025,5,135,0,0,1024,1023,1,0,0,0,1024,1025,1,0,0,0,1025,
        1026,1,0,0,0,1026,1027,5,1,0,0,1027,1029,1,0,0,0,1028,1020,1,0,0,
        0,1028,1029,1,0,0,0,1029,1031,1,0,0,0,1030,1032,5,135,0,0,1031,1030,
        1,0,0,0,1031,1032,1,0,0,0,1032,1035,1,0,0,0,1033,1036,3,98,49,0,
        1034,1036,5,48,0,0,1035,1033,1,0,0,0,1035,1034,1,0,0,0,1036,1038,
        1,0,0,0,1037,1039,5,135,0,0,1038,1037,1,0,0,0,1038,1039,1,0,0,0,
        1039,1040,1,0,0,0,1040,1041,5,9,0,0,1041,97,1,0,0,0,1042,1045,5,
        117,0,0,1043,1045,3,272,136,0,1044,1042,1,0,0,0,1044,1043,1,0,0,
        0,1045,99,1,0,0,0,1046,1047,7,1,0,0,1047,101,1,0,0,0,1048,1049,7,
        2,0,0,1049,103,1,0,0,0,1050,1052,5,135,0,0,1051,1050,1,0,0,0,1051,
        1052,1,0,0,0,1052,1053,1,0,0,0,1053,1058,3,106,53,0,1054,1056,5,
        135,0,0,1055,1054,1,0,0,0,1055,1056,1,0,0,0,1056,1057,1,0,0,0,1057,
        1059,5,14,0,0,1058,1055,1,0,0,0,1058,1059,1,0,0,0,1059,1061,1,0,
        0,0,1060,1062,5,135,0,0,1061,1060,1,0,0,0,1061,1062,1,0,0,0,1062,
        1063,1,0,0,0,1063,1064,5,0,0,1,1064,105,1,0,0,0,1065,1066,3,0,0,
        0,1066,107,1,0,0,0,1067,1074,3,112,56,0,1068,1070,5,135,0,0,1069,
        1068,1,0,0,0,1069,1070,1,0,0,0,1070,1071,1,0,0,0,1071,1073,3,110,
        55,0,1072,1069,1,0,0,0,1073,1076,1,0,0,0,1074,1072,1,0,0,0,1074,
        1075,1,0,0,0,1075,109,1,0,0,0,1076,1074,1,0,0,0,1077,1078,5,56,0,
        0,1078,1079,5,135,0,0,1079,1081,5,57,0,0,1080,1082,5,135,0,0,1081,
        1080,1,0,0,0,1081,1082,1,0,0,0,1082,1083,1,0,0,0,1083,1090,3,112,
        56,0,1084,1086,5,56,0,0,1085,1087,5,135,0,0,1086,1085,1,0,0,0,1086,
        1087,1,0,0,0,1087,1088,1,0,0,0,1088,1090,3,112,56,0,1089,1077,1,
        0,0,0,1089,1084,1,0,0,0,1090,111,1,0,0,0,1091,1094,3,114,57,0,1092,
        1094,3,116,58,0,1093,1091,1,0,0,0,1093,1092,1,0,0,0,1094,113,1,0,
        0,0,1095,1097,3,118,59,0,1096,1098,5,135,0,0,1097,1096,1,0,0,0,1097,
        1098,1,0,0,0,1098,1100,1,0,0,0,1099,1095,1,0,0,0,1100,1103,1,0,0,
        0,1101,1099,1,0,0,0,1101,1102,1,0,0,0,1102,1104,1,0,0,0,1103,1101,
        1,0,0,0,1104,1131,3,140,70,0,1105,1107,3,118,59,0,1106,1108,5,135,
        0,0,1107,1106,1,0,0,0,1107,1108,1,0,0,0,1108,1110,1,0,0,0,1109,1105,
        1,0,0,0,1110,1113,1,0,0,0,1111,1109,1,0,0,0,1111,1112,1,0,0,0,1112,
        1114,1,0,0,0,1113,1111,1,0,0,0,1114,1121,3,4,2,0,1115,1117,5,135,
        0,0,1116,1115,1,0,0,0,1116,1117,1,0,0,0,1117,1118,1,0,0,0,1118,1120,
        3,4,2,0,1119,1116,1,0,0,0,1120,1123,1,0,0,0,1121,1119,1,0,0,0,1121,
        1122,1,0,0,0,1122,1128,1,0,0,0,1123,1121,1,0,0,0,1124,1126,5,135,
        0,0,1125,1124,1,0,0,0,1125,1126,1,0,0,0,1126,1127,1,0,0,0,1127,1129,
        3,140,70,0,1128,1125,1,0,0,0,1128,1129,1,0,0,0,1129,1131,1,0,0,0,
        1130,1101,1,0,0,0,1130,1111,1,0,0,0,1131,115,1,0,0,0,1132,1134,3,
        44,22,0,1133,1132,1,0,0,0,1134,1135,1,0,0,0,1135,1133,1,0,0,0,1135,
        1136,1,0,0,0,1136,1137,1,0,0,0,1137,1138,3,114,57,0,1138,117,1,0,
        0,0,1139,1143,3,2,1,0,1140,1143,3,120,60,0,1141,1143,3,36,18,0,1142,
        1139,1,0,0,0,1142,1140,1,0,0,0,1142,1141,1,0,0,0,1143,119,1,0,0,
        0,1144,1146,5,60,0,0,1145,1147,5,135,0,0,1146,1145,1,0,0,0,1146,
        1147,1,0,0,0,1147,1148,1,0,0,0,1148,1149,3,186,93,0,1149,1150,5,
        135,0,0,1150,1151,5,61,0,0,1151,1152,5,135,0,0,1152,1153,3,256,128,
        0,1153,121,1,0,0,0,1154,1156,5,62,0,0,1155,1157,5,135,0,0,1156,1155,
        1,0,0,0,1156,1157,1,0,0,0,1157,1158,1,0,0,0,1158,1163,3,56,28,0,
        1159,1160,5,135,0,0,1160,1162,3,124,62,0,1161,1159,1,0,0,0,1162,
        1165,1,0,0,0,1163,1161,1,0,0,0,1163,1164,1,0,0,0,1164,123,1,0,0,
        0,1165,1163,1,0,0,0,1166,1167,5,63,0,0,1167,1168,5,135,0,0,1168,
        1169,5,59,0,0,1169,1170,5,135,0,0,1170,1177,3,128,64,0,1171,1172,
        5,63,0,0,1172,1173,5,135,0,0,1173,1174,5,64,0,0,1174,1175,5,135,
        0,0,1175,1177,3,128,64,0,1176,1166,1,0,0,0,1176,1171,1,0,0,0,1177,
        125,1,0,0,0,1178,1180,5,64,0,0,1179,1181,5,135,0,0,1180,1179,1,0,
        0,0,1180,1181,1,0,0,0,1181,1182,1,0,0,0,1182,1183,3,158,79,0,1183,
        127,1,0,0,0,1184,1186,5,65,0,0,1185,1187,5,135,0,0,1186,1185,1,0,
        0,0,1186,1187,1,0,0,0,1187,1188,1,0,0,0,1188,1199,3,14,7,0,1189,
        1191,5,135,0,0,1190,1189,1,0,0,0,1190,1191,1,0,0,0,1191,1192,1,0,
        0,0,1192,1194,5,1,0,0,1193,1195,5,135,0,0,1194,1193,1,0,0,0,1194,
        1195,1,0,0,0,1195,1196,1,0,0,0,1196,1198,3,14,7,0,1197,1190,1,0,
        0,0,1198,1201,1,0,0,0,1199,1197,1,0,0,0,1199,1200,1,0,0,0,1200,129,
        1,0,0,0,1201,1199,1,0,0,0,1202,1203,5,66,0,0,1203,1205,5,135,0,0,
        1204,1202,1,0,0,0,1204,1205,1,0,0,0,1205,1206,1,0,0,0,1206,1208,
        5,67,0,0,1207,1209,5,135,0,0,1208,1207,1,0,0,0,1208,1209,1,0,0,0,
        1209,1210,1,0,0,0,1210,1221,3,186,93,0,1211,1213,5,135,0,0,1212,
        1211,1,0,0,0,1212,1213,1,0,0,0,1213,1214,1,0,0,0,1214,1216,5,1,0,
        0,1215,1217,5,135,0,0,1216,1215,1,0,0,0,1216,1217,1,0,0,0,1217,1218,
        1,0,0,0,1218,1220,3,186,93,0,1219,1212,1,0,0,0,1220,1223,1,0,0,0,
        1221,1219,1,0,0,0,1221,1222,1,0,0,0,1222,131,1,0,0,0,1223,1221,1,
        0,0,0,1224,1225,5,68,0,0,1225,1226,5,135,0,0,1226,1237,3,28,14,0,
        1227,1229,5,135,0,0,1228,1227,1,0,0,0,1228,1229,1,0,0,0,1229,1230,
        1,0,0,0,1230,1232,5,1,0,0,1231,1233,5,135,0,0,1232,1231,1,0,0,0,
        1232,1233,1,0,0,0,1233,1234,1,0,0,0,1234,1236,3,28,14,0,1235,1228,
        1,0,0,0,1236,1239,1,0,0,0,1237,1235,1,0,0,0,1237,1238,1,0,0,0,1238,
        133,1,0,0,0,1239,1237,1,0,0,0,1240,1251,3,136,68,0,1241,1243,5,135,
        0,0,1242,1241,1,0,0,0,1242,1243,1,0,0,0,1243,1244,1,0,0,0,1244,1246,
        5,1,0,0,1245,1247,5,135,0,0,1246,1245,1,0,0,0,1246,1247,1,0,0,0,
        1247,1248,1,0,0,0,1248,1250,3,136,68,0,1249,1242,1,0,0,0,1250,1253,
        1,0,0,0,1251,1249,1,0,0,0,1251,1252,1,0,0,0,1252,1258,1,0,0,0,1253,
        1251,1,0,0,0,1254,1256,5,135,0,0,1255,1254,1,0,0,0,1255,1256,1,0,
        0,0,1256,1257,1,0,0,0,1257,1259,3,156,78,0,1258,1255,1,0,0,0,1258,
        1259,1,0,0,0,1259,135,1,0,0,0,1260,1265,3,250,125,0,1261,1262,5,
        135,0,0,1262,1263,5,61,0,0,1263,1264,5,135,0,0,1264,1266,3,256,128,
        0,1265,1261,1,0,0,0,1265,1266,1,0,0,0,1266,137,1,0,0,0,1267,1268,
        5,71,0,0,1268,1273,3,142,71,0,1269,1271,5,135,0,0,1270,1269,1,0,
        0,0,1270,1271,1,0,0,0,1271,1272,1,0,0,0,1272,1274,3,156,78,0,1273,
        1270,1,0,0,0,1273,1274,1,0,0,0,1274,139,1,0,0,0,1275,1276,5,72,0,
        0,1276,1277,3,142,71,0,1277,141,1,0,0,0,1278,1280,5,135,0,0,1279,
        1278,1,0,0,0,1279,1280,1,0,0,0,1280,1281,1,0,0,0,1281,1283,5,73,
        0,0,1282,1279,1,0,0,0,1282,1283,1,0,0,0,1283,1284,1,0,0,0,1284,1285,
        5,135,0,0,1285,1288,3,144,72,0,1286,1287,5,135,0,0,1287,1289,3,148,
        74,0,1288,1286,1,0,0,0,1288,1289,1,0,0,0,1289,1292,1,0,0,0,1290,
        1291,5,135,0,0,1291,1293,3,150,75,0,1292,1290,1,0,0,0,1292,1293,
        1,0,0,0,1293,1296,1,0,0,0,1294,1295,5,135,0,0,1295,1297,3,152,76,
        0,1296,1294,1,0,0,0,1296,1297,1,0,0,0,1297,143,1,0,0,0,1298,1309,
        5,5,0,0,1299,1301,5,135,0,0,1300,1299,1,0,0,0,1300,1301,1,0,0,0,
        1301,1302,1,0,0,0,1302,1304,5,1,0,0,1303,1305,5,135,0,0,1304,1303,
        1,0,0,0,1304,1305,1,0,0,0,1305,1306,1,0,0,0,1306,1308,3,146,73,0,
        1307,1300,1,0,0,0,1308,1311,1,0,0,0,1309,1307,1,0,0,0,1309,1310,
        1,0,0,0,1310,1327,1,0,0,0,1311,1309,1,0,0,0,1312,1323,3,146,73,0,
        1313,1315,5,135,0,0,1314,1313,1,0,0,0,1314,1315,1,0,0,0,1315,1316,
        1,0,0,0,1316,1318,5,1,0,0,1317,1319,5,135,0,0,1318,1317,1,0,0,0,
        1318,1319,1,0,0,0,1319,1320,1,0,0,0,1320,1322,3,146,73,0,1321,1314,
        1,0,0,0,1322,1325,1,0,0,0,1323,1321,1,0,0,0,1323,1324,1,0,0,0,1324,
        1327,1,0,0,0,1325,1323,1,0,0,0,1326,1298,1,0,0,0,1326,1312,1,0,0,
        0,1327,145,1,0,0,0,1328,1329,3,186,93,0,1329,1330,5,135,0,0,1330,
        1331,5,61,0,0,1331,1332,5,135,0,0,1332,1333,3,256,128,0,1333,1336,
        1,0,0,0,1334,1336,3,186,93,0,1335,1328,1,0,0,0,1335,1334,1,0,0,0,
        1336,147,1,0,0,0,1337,1338,5,74,0,0,1338,1339,5,135,0,0,1339,1340,
        5,75,0,0,1340,1341,5,135,0,0,1341,1349,3,154,77,0,1342,1344,5,1,
        0,0,1343,1345,5,135,0,0,1344,1343,1,0,0,0,1344,1345,1,0,0,0,1345,
        1346,1,0,0,0,1346,1348,3,154,77,0,1347,1342,1,0,0,0,1348,1351,1,
        0,0,0,1349,1347,1,0,0,0,1349,1350,1,0,0,0,1350,149,1,0,0,0,1351,
        1349,1,0,0,0,1352,1353,5,76,0,0,1353,1354,5,135,0,0,1354,1355,3,
        186,93,0,1355,151,1,0,0,0,1356,1357,5,77,0,0,1357,1358,5,135,0,0,
        1358,1359,3,186,93,0,1359,153,1,0,0,0,1360,1365,3,186,93,0,1361,
        1363,5,135,0,0,1362,1361,1,0,0,0,1362,1363,1,0,0,0,1363,1364,1,0,
        0,0,1364,1366,7,3,0,0,1365,1362,1,0,0,0,1365,1366,1,0,0,0,1366,155,
        1,0,0,0,1367,1368,5,82,0,0,1368,1369,5,135,0,0,1369,1370,3,186,93,
        0,1370,157,1,0,0,0,1371,1382,3,56,28,0,1372,1374,5,135,0,0,1373,
        1372,1,0,0,0,1373,1374,1,0,0,0,1374,1375,1,0,0,0,1375,1377,5,1,0,
        0,1376,1378,5,135,0,0,1377,1376,1,0,0,0,1377,1378,1,0,0,0,1378,1379,
        1,0,0,0,1379,1381,3,56,28,0,1380,1373,1,0,0,0,1381,1384,1,0,0,0,
        1382,1380,1,0,0,0,1382,1383,1,0,0,0,1383,159,1,0,0,0,1384,1382,1,
        0,0,0,1385,1386,3,162,81,0,1386,161,1,0,0,0,1387,1394,3,62,31,0,
        1388,1390,5,135,0,0,1389,1388,1,0,0,0,1389,1390,1,0,0,0,1390,1391,
        1,0,0,0,1391,1393,3,166,83,0,1392,1389,1,0,0,0,1393,1396,1,0,0,0,
        1394,1392,1,0,0,0,1394,1395,1,0,0,0,1395,1402,1,0,0,0,1396,1394,
        1,0,0,0,1397,1398,5,8,0,0,1398,1399,3,162,81,0,1399,1400,5,9,0,0,
        1400,1402,1,0,0,0,1401,1387,1,0,0,0,1401,1397,1,0,0,0,1402,163,1,
        0,0,0,1403,1408,3,62,31,0,1404,1406,5,135,0,0,1405,1404,1,0,0,0,
        1405,1406,1,0,0,0,1406,1407,1,0,0,0,1407,1409,3,166,83,0,1408,1405,
        1,0,0,0,1409,1410,1,0,0,0,1410,1408,1,0,0,0,1410,1411,1,0,0,0,1411,
        165,1,0,0,0,1412,1414,3,168,84,0,1413,1415,5,135,0,0,1414,1413,1,
        0,0,0,1414,1415,1,0,0,0,1415,1416,1,0,0,0,1416,1417,3,62,31,0,1417,
        167,1,0,0,0,1418,1420,3,282,141,0,1419,1421,5,135,0,0,1420,1419,
        1,0,0,0,1420,1421,1,0,0,0,1421,1422,1,0,0,0,1422,1424,3,286,143,
        0,1423,1425,5,135,0,0,1424,1423,1,0,0,0,1424,1425,1,0,0,0,1425,1427,
        1,0,0,0,1426,1428,3,72,36,0,1427,1426,1,0,0,0,1427,1428,1,0,0,0,
        1428,1430,1,0,0,0,1429,1431,5,135,0,0,1430,1429,1,0,0,0,1430,1431,
        1,0,0,0,1431,1432,1,0,0,0,1432,1434,3,286,143,0,1433,1435,5,135,
        0,0,1434,1433,1,0,0,0,1434,1435,1,0,0,0,1435,1436,1,0,0,0,1436,1437,
        3,284,142,0,1437,1483,1,0,0,0,1438,1440,3,282,141,0,1439,1441,5,
        135,0,0,1440,1439,1,0,0,0,1440,1441,1,0,0,0,1441,1442,1,0,0,0,1442,
        1444,3,286,143,0,1443,1445,5,135,0,0,1444,1443,1,0,0,0,1444,1445,
        1,0,0,0,1445,1447,1,0,0,0,1446,1448,3,72,36,0,1447,1446,1,0,0,0,
        1447,1448,1,0,0,0,1448,1450,1,0,0,0,1449,1451,5,135,0,0,1450,1449,
        1,0,0,0,1450,1451,1,0,0,0,1451,1452,1,0,0,0,1452,1453,3,286,143,
        0,1453,1483,1,0,0,0,1454,1456,3,286,143,0,1455,1457,5,135,0,0,1456,
        1455,1,0,0,0,1456,1457,1,0,0,0,1457,1459,1,0,0,0,1458,1460,3,72,
        36,0,1459,1458,1,0,0,0,1459,1460,1,0,0,0,1460,1462,1,0,0,0,1461,
        1463,5,135,0,0,1462,1461,1,0,0,0,1462,1463,1,0,0,0,1463,1464,1,0,
        0,0,1464,1466,3,286,143,0,1465,1467,5,135,0,0,1466,1465,1,0,0,0,
        1466,1467,1,0,0,0,1467,1468,1,0,0,0,1468,1469,3,284,142,0,1469,1483,
        1,0,0,0,1470,1472,3,286,143,0,1471,1473,5,135,0,0,1472,1471,1,0,
        0,0,1472,1473,1,0,0,0,1473,1475,1,0,0,0,1474,1476,3,72,36,0,1475,
        1474,1,0,0,0,1475,1476,1,0,0,0,1476,1478,1,0,0,0,1477,1479,5,135,
        0,0,1478,1477,1,0,0,0,1478,1479,1,0,0,0,1479,1480,1,0,0,0,1480,1481,
        3,286,143,0,1481,1483,1,0,0,0,1482,1418,1,0,0,0,1482,1438,1,0,0,
        0,1482,1454,1,0,0,0,1482,1470,1,0,0,0,1483,169,1,0,0,0,1484,1487,
        3,272,136,0,1485,1487,3,278,139,0,1486,1484,1,0,0,0,1486,1485,1,
        0,0,0,1487,171,1,0,0,0,1488,1490,5,10,0,0,1489,1491,5,135,0,0,1490,
        1489,1,0,0,0,1490,1491,1,0,0,0,1491,1492,1,0,0,0,1492,1506,3,182,
        91,0,1493,1495,5,135,0,0,1494,1493,1,0,0,0,1494,1495,1,0,0,0,1495,
        1496,1,0,0,0,1496,1498,5,15,0,0,1497,1499,5,10,0,0,1498,1497,1,0,
        0,0,1498,1499,1,0,0,0,1499,1501,1,0,0,0,1500,1502,5,135,0,0,1501,
        1500,1,0,0,0,1501,1502,1,0,0,0,1502,1503,1,0,0,0,1503,1505,3,182,
        91,0,1504,1494,1,0,0,0,1505,1508,1,0,0,0,1506,1504,1,0,0,0,1506,
        1507,1,0,0,0,1507,173,1,0,0,0,1508,1506,1,0,0,0,1509,1516,3,176,
        88,0,1510,1512,5,135,0,0,1511,1510,1,0,0,0,1511,1512,1,0,0,0,1512,
        1513,1,0,0,0,1513,1515,3,176,88,0,1514,1511,1,0,0,0,1515,1518,1,
        0,0,0,1516,1514,1,0,0,0,1516,1517,1,0,0,0,1517,175,1,0,0,0,1518,
        1516,1,0,0,0,1519,1521,5,10,0,0,1520,1522,5,135,0,0,1521,1520,1,
        0,0,0,1521,1522,1,0,0,0,1522,1523,1,0,0,0,1523,1524,3,180,90,0,1524,
        177,1,0,0,0,1525,1527,5,5,0,0,1526,1528,5,135,0,0,1527,1526,1,0,
        0,0,1527,1528,1,0,0,0,1528,1533,1,0,0,0,1529,1531,3,264,132,0,1530,
        1532,5,135,0,0,1531,1530,1,0,0,0,1531,1532,1,0,0,0,1532,1534,1,0,
        0,0,1533,1529,1,0,0,0,1533,1534,1,0,0,0,1534,1545,1,0,0,0,1535,1537,
        5,13,0,0,1536,1538,5,135,0,0,1537,1536,1,0,0,0,1537,1538,1,0,0,0,
        1538,1543,1,0,0,0,1539,1541,3,264,132,0,1540,1542,5,135,0,0,1541,
        1540,1,0,0,0,1541,1542,1,0,0,0,1542,1544,1,0,0,0,1543,1539,1,0,0,
        0,1543,1544,1,0,0,0,1544,1546,1,0,0,0,1545,1535,1,0,0,0,1545,1546,
        1,0,0,0,1546,179,1,0,0,0,1547,1548,3,280,140,0,1548,181,1,0,0,0,
        1549,1550,3,280,140,0,1550,183,1,0,0,0,1551,1556,3,222,111,0,1552,
        1554,5,135,0,0,1553,1552,1,0,0,0,1553,1554,1,0,0,0,1554,1555,1,0,
        0,0,1555,1557,3,220,110,0,1556,1553,1,0,0,0,1557,1558,1,0,0,0,1558,
        1556,1,0,0,0,1558,1559,1,0,0,0,1559,185,1,0,0,0,1560,1561,3,188,
        94,0,1561,187,1,0,0,0,1562,1569,3,190,95,0,1563,1564,5,135,0,0,1564,
        1565,5,83,0,0,1565,1566,5,135,0,0,1566,1568,3,190,95,0,1567,1563,
        1,0,0,0,1568,1571,1,0,0,0,1569,1567,1,0,0,0,1569,1570,1,0,0,0,1570,
        189,1,0,0,0,1571,1569,1,0,0,0,1572,1579,3,192,96,0,1573,1574,5,135,
        0,0,1574,1575,5,84,0,0,1575,1576,5,135,0,0,1576,1578,3,192,96,0,
        1577,1573,1,0,0,0,1578,1581,1,0,0,0,1579,1577,1,0,0,0,1579,1580,
        1,0,0,0,1580,191,1,0,0,0,1581,1579,1,0,0,0,1582,1589,3,194,97,0,
        1583,1584,5,135,0,0,1584,1585,5,85,0,0,1585,1586,5,135,0,0,1586,
        1588,3,194,97,0,1587,1583,1,0,0,0,1588,1591,1,0,0,0,1589,1587,1,
        0,0,0,1589,1590,1,0,0,0,1590,193,1,0,0,0,1591,1589,1,0,0,0,1592,
        1594,5,86,0,0,1593,1595,5,135,0,0,1594,1593,1,0,0,0,1594,1595,1,
        0,0,0,1595,1597,1,0,0,0,1596,1592,1,0,0,0,1597,1600,1,0,0,0,1598,
        1596,1,0,0,0,1598,1599,1,0,0,0,1599,1601,1,0,0,0,1600,1598,1,0,0,
        0,1601,1602,3,196,98,0,1602,195,1,0,0,0,1603,1615,3,74,37,0,1604,
        1606,5,135,0,0,1605,1604,1,0,0,0,1605,1606,1,0,0,0,1606,1607,1,0,
        0,0,1607,1609,3,212,106,0,1608,1610,5,135,0,0,1609,1608,1,0,0,0,
        1609,1610,1,0,0,0,1610,1611,1,0,0,0,1611,1612,3,74,37,0,1612,1614,
        1,0,0,0,1613,1605,1,0,0,0,1614,1617,1,0,0,0,1615,1613,1,0,0,0,1615,
        1616,1,0,0,0,1616,197,1,0,0,0,1617,1615,1,0,0,0,1618,1619,5,135,
        0,0,1619,1620,5,87,0,0,1620,1621,5,135,0,0,1621,1629,5,71,0,0,1622,
        1623,5,135,0,0,1623,1624,5,88,0,0,1624,1625,5,135,0,0,1625,1629,
        5,71,0,0,1626,1627,5,135,0,0,1627,1629,5,89,0,0,1628,1618,1,0,0,
        0,1628,1622,1,0,0,0,1628,1626,1,0,0,0,1629,1631,1,0,0,0,1630,1632,
        5,135,0,0,1631,1630,1,0,0,0,1631,1632,1,0,0,0,1632,1633,1,0,0,0,
        1633,1634,3,204,102,0,1634,199,1,0,0,0,1635,1636,5,135,0,0,1636,
        1638,5,90,0,0,1637,1639,5,135,0,0,1638,1637,1,0,0,0,1638,1639,1,
        0,0,0,1639,1640,1,0,0,0,1640,1641,3,204,102,0,1641,201,1,0,0,0,1642,
        1643,5,135,0,0,1643,1644,5,91,0,0,1644,1645,5,135,0,0,1645,1653,
        5,92,0,0,1646,1647,5,135,0,0,1647,1648,5,91,0,0,1648,1649,5,135,
        0,0,1649,1650,5,86,0,0,1650,1651,5,135,0,0,1651,1653,5,92,0,0,1652,
        1642,1,0,0,0,1652,1646,1,0,0,0,1653,203,1,0,0,0,1654,1666,3,214,
        107,0,1655,1657,5,135,0,0,1656,1655,1,0,0,0,1656,1657,1,0,0,0,1657,
        1658,1,0,0,0,1658,1660,3,210,105,0,1659,1661,5,135,0,0,1660,1659,
        1,0,0,0,1660,1661,1,0,0,0,1661,1662,1,0,0,0,1662,1663,3,214,107,
        0,1663,1665,1,0,0,0,1664,1656,1,0,0,0,1665,1668,1,0,0,0,1666,1664,
        1,0,0,0,1666,1667,1,0,0,0,1667,205,1,0,0,0,1668,1666,1,0,0,0,1669,
        1670,7,4,0,0,1670,207,1,0,0,0,1671,1672,5,18,0,0,1672,209,1,0,0,
        0,1673,1674,7,5,0,0,1674,211,1,0,0,0,1675,1676,7,6,0,0,1676,213,
        1,0,0,0,1677,1689,3,216,108,0,1678,1680,5,135,0,0,1679,1678,1,0,
        0,0,1679,1680,1,0,0,0,1680,1681,1,0,0,0,1681,1683,3,206,103,0,1682,
        1684,5,135,0,0,1683,1682,1,0,0,0,1683,1684,1,0,0,0,1684,1685,1,0,
        0,0,1685,1686,3,216,108,0,1686,1688,1,0,0,0,1687,1679,1,0,0,0,1688,
        1691,1,0,0,0,1689,1687,1,0,0,0,1689,1690,1,0,0,0,1690,215,1,0,0,
        0,1691,1689,1,0,0,0,1692,1704,3,218,109,0,1693,1695,5,135,0,0,1694,
        1693,1,0,0,0,1694,1695,1,0,0,0,1695,1696,1,0,0,0,1696,1698,3,208,
        104,0,1697,1699,5,135,0,0,1698,1697,1,0,0,0,1698,1699,1,0,0,0,1699,
        1700,1,0,0,0,1700,1701,3,218,109,0,1701,1703,1,0,0,0,1702,1694,1,
        0,0,0,1703,1706,1,0,0,0,1704,1702,1,0,0,0,1704,1705,1,0,0,0,1705,
        217,1,0,0,0,1706,1704,1,0,0,0,1707,1714,3,76,38,0,1708,1710,7,5,
        0,0,1709,1711,5,135,0,0,1710,1709,1,0,0,0,1710,1711,1,0,0,0,1711,
        1712,1,0,0,0,1712,1714,3,76,38,0,1713,1707,1,0,0,0,1713,1708,1,0,
        0,0,1714,219,1,0,0,0,1715,1717,5,4,0,0,1716,1718,5,135,0,0,1717,
        1716,1,0,0,0,1717,1718,1,0,0,0,1718,1719,1,0,0,0,1719,1720,3,276,
        138,0,1720,221,1,0,0,0,1721,1746,3,258,129,0,1722,1746,3,278,139,
        0,1723,1746,3,224,112,0,1724,1726,5,93,0,0,1725,1727,5,135,0,0,1726,
        1725,1,0,0,0,1726,1727,1,0,0,0,1727,1728,1,0,0,0,1728,1730,5,8,0,
        0,1729,1731,5,135,0,0,1730,1729,1,0,0,0,1730,1731,1,0,0,0,1731,1732,
        1,0,0,0,1732,1734,5,5,0,0,1733,1735,5,135,0,0,1734,1733,1,0,0,0,
        1734,1735,1,0,0,0,1735,1736,1,0,0,0,1736,1746,5,9,0,0,1737,1746,
        3,228,114,0,1738,1746,3,230,115,0,1739,1746,3,232,116,0,1740,1746,
        3,234,117,0,1741,1746,3,236,118,0,1742,1746,3,240,120,0,1743,1746,
        3,48,24,0,1744,1746,3,256,128,0,1745,1721,1,0,0,0,1745,1722,1,0,
        0,0,1745,1723,1,0,0,0,1745,1724,1,0,0,0,1745,1737,1,0,0,0,1745,1738,
        1,0,0,0,1745,1739,1,0,0,0,1745,1740,1,0,0,0,1745,1741,1,0,0,0,1745,
        1742,1,0,0,0,1745,1743,1,0,0,0,1745,1744,1,0,0,0,1746,223,1,0,0,
        0,1747,1752,5,94,0,0,1748,1750,5,135,0,0,1749,1748,1,0,0,0,1749,
        1750,1,0,0,0,1750,1751,1,0,0,0,1751,1753,3,226,113,0,1752,1749,1,
        0,0,0,1753,1754,1,0,0,0,1754,1752,1,0,0,0,1754,1755,1,0,0,0,1755,
        1770,1,0,0,0,1756,1758,5,94,0,0,1757,1759,5,135,0,0,1758,1757,1,
        0,0,0,1758,1759,1,0,0,0,1759,1760,1,0,0,0,1760,1765,3,186,93,0,1761,
        1763,5,135,0,0,1762,1761,1,0,0,0,1762,1763,1,0,0,0,1763,1764,1,0,
        0,0,1764,1766,3,226,113,0,1765,1762,1,0,0,0,1766,1767,1,0,0,0,1767,
        1765,1,0,0,0,1767,1768,1,0,0,0,1768,1770,1,0,0,0,1769,1747,1,0,0,
        0,1769,1756,1,0,0,0,1770,1779,1,0,0,0,1771,1773,5,135,0,0,1772,1771,
        1,0,0,0,1772,1773,1,0,0,0,1773,1774,1,0,0,0,1774,1776,5,95,0,0,1775,
        1777,5,135,0,0,1776,1775,1,0,0,0,1776,1777,1,0,0,0,1777,1778,1,0,
        0,0,1778,1780,3,186,93,0,1779,1772,1,0,0,0,1779,1780,1,0,0,0,1780,
        1782,1,0,0,0,1781,1783,5,135,0,0,1782,1781,1,0,0,0,1782,1783,1,0,
        0,0,1783,1784,1,0,0,0,1784,1785,5,96,0,0,1785,225,1,0,0,0,1786,1788,
        5,97,0,0,1787,1789,5,135,0,0,1788,1787,1,0,0,0,1788,1789,1,0,0,0,
        1789,1790,1,0,0,0,1790,1792,3,186,93,0,1791,1793,5,135,0,0,1792,
        1791,1,0,0,0,1792,1793,1,0,0,0,1793,1794,1,0,0,0,1794,1796,5,98,
        0,0,1795,1797,5,135,0,0,1796,1795,1,0,0,0,1796,1797,1,0,0,0,1797,
        1798,1,0,0,0,1798,1799,3,186,93,0,1799,227,1,0,0,0,1800,1802,5,11,
        0,0,1801,1803,5,135,0,0,1802,1801,1,0,0,0,1802,1803,1,0,0,0,1803,
        1804,1,0,0,0,1804,1813,3,50,25,0,1805,1807,5,135,0,0,1806,1805,1,
        0,0,0,1806,1807,1,0,0,0,1807,1808,1,0,0,0,1808,1810,5,15,0,0,1809,
        1811,5,135,0,0,1810,1809,1,0,0,0,1810,1811,1,0,0,0,1811,1812,1,0,
        0,0,1812,1814,3,186,93,0,1813,1806,1,0,0,0,1813,1814,1,0,0,0,1814,
        1816,1,0,0,0,1815,1817,5,135,0,0,1816,1815,1,0,0,0,1816,1817,1,0,
        0,0,1817,1818,1,0,0,0,1818,1819,5,12,0,0,1819,229,1,0,0,0,1820,1822,
        5,11,0,0,1821,1823,5,135,0,0,1822,1821,1,0,0,0,1822,1823,1,0,0,0,
        1823,1832,1,0,0,0,1824,1826,3,256,128,0,1825,1827,5,135,0,0,1826,
        1825,1,0,0,0,1826,1827,1,0,0,0,1827,1828,1,0,0,0,1828,1830,5,2,0,
        0,1829,1831,5,135,0,0,1830,1829,1,0,0,0,1830,1831,1,0,0,0,1831,1833,
        1,0,0,0,1832,1824,1,0,0,0,1832,1833,1,0,0,0,1833,1834,1,0,0,0,1834,
        1836,3,164,82,0,1835,1837,5,135,0,0,1836,1835,1,0,0,0,1836,1837,
        1,0,0,0,1837,1842,1,0,0,0,1838,1840,3,156,78,0,1839,1841,5,135,0,
        0,1840,1839,1,0,0,0,1840,1841,1,0,0,0,1841,1843,1,0,0,0,1842,1838,
        1,0,0,0,1842,1843,1,0,0,0,1843,1844,1,0,0,0,1844,1846,5,15,0,0,1845,
        1847,5,135,0,0,1846,1845,1,0,0,0,1846,1847,1,0,0,0,1847,1848,1,0,
        0,0,1848,1850,3,186,93,0,1849,1851,5,135,0,0,1850,1849,1,0,0,0,1850,
        1851,1,0,0,0,1851,1852,1,0,0,0,1852,1853,5,12,0,0,1853,231,1,0,0,
        0,1854,1856,5,57,0,0,1855,1857,5,135,0,0,1856,1855,1,0,0,0,1856,
        1857,1,0,0,0,1857,1858,1,0,0,0,1858,1860,5,8,0,0,1859,1861,5,135,
        0,0,1860,1859,1,0,0,0,1860,1861,1,0,0,0,1861,1862,1,0,0,0,1862,1864,
        3,50,25,0,1863,1865,5,135,0,0,1864,1863,1,0,0,0,1864,1865,1,0,0,
        0,1865,1866,1,0,0,0,1866,1867,5,9,0,0,1867,1911,1,0,0,0,1868,1870,
        5,99,0,0,1869,1871,5,135,0,0,1870,1869,1,0,0,0,1870,1871,1,0,0,0,
        1871,1872,1,0,0,0,1872,1874,5,8,0,0,1873,1875,5,135,0,0,1874,1873,
        1,0,0,0,1874,1875,1,0,0,0,1875,1876,1,0,0,0,1876,1878,3,50,25,0,
        1877,1879,5,135,0,0,1878,1877,1,0,0,0,1878,1879,1,0,0,0,1879,1880,
        1,0,0,0,1880,1881,5,9,0,0,1881,1911,1,0,0,0,1882,1884,5,100,0,0,
        1883,1885,5,135,0,0,1884,1883,1,0,0,0,1884,1885,1,0,0,0,1885,1886,
        1,0,0,0,1886,1888,5,8,0,0,1887,1889,5,135,0,0,1888,1887,1,0,0,0,
        1888,1889,1,0,0,0,1889,1890,1,0,0,0,1890,1892,3,50,25,0,1891,1893,
        5,135,0,0,1892,1891,1,0,0,0,1892,1893,1,0,0,0,1893,1894,1,0,0,0,
        1894,1895,5,9,0,0,1895,1911,1,0,0,0,1896,1898,5,101,0,0,1897,1899,
        5,135,0,0,1898,1897,1,0,0,0,1898,1899,1,0,0,0,1899,1900,1,0,0,0,
        1900,1902,5,8,0,0,1901,1903,5,135,0,0,1902,1901,1,0,0,0,1902,1903,
        1,0,0,0,1903,1904,1,0,0,0,1904,1906,3,50,25,0,1905,1907,5,135,0,
        0,1906,1905,1,0,0,0,1906,1907,1,0,0,0,1907,1908,1,0,0,0,1908,1909,
        5,9,0,0,1909,1911,1,0,0,0,1910,1854,1,0,0,0,1910,1868,1,0,0,0,1910,
        1882,1,0,0,0,1910,1896,1,0,0,0,1911,233,1,0,0,0,1912,1913,3,164,
        82,0,1913,235,1,0,0,0,1914,1916,5,8,0,0,1915,1917,5,135,0,0,1916,
        1915,1,0,0,0,1916,1917,1,0,0,0,1917,1918,1,0,0,0,1918,1920,3,186,
        93,0,1919,1921,5,135,0,0,1920,1919,1,0,0,0,1920,1921,1,0,0,0,1921,
        1922,1,0,0,0,1922,1923,5,9,0,0,1923,237,1,0,0,0,1924,1925,3,256,
        128,0,1925,1926,5,135,0,0,1926,1927,5,90,0,0,1927,1928,5,135,0,0,
        1928,1929,3,186,93,0,1929,239,1,0,0,0,1930,1932,3,244,122,0,1931,
        1933,5,135,0,0,1932,1931,1,0,0,0,1932,1933,1,0,0,0,1933,1934,1,0,
        0,0,1934,1936,5,8,0,0,1935,1937,5,135,0,0,1936,1935,1,0,0,0,1936,
        1937,1,0,0,0,1937,1942,1,0,0,0,1938,1940,5,73,0,0,1939,1941,5,135,
        0,0,1940,1939,1,0,0,0,1940,1941,1,0,0,0,1941,1943,1,0,0,0,1942,1938,
        1,0,0,0,1942,1943,1,0,0,0,1943,1961,1,0,0,0,1944,1946,3,242,121,
        0,1945,1947,5,135,0,0,1946,1945,1,0,0,0,1946,1947,1,0,0,0,1947,1958,
        1,0,0,0,1948,1950,5,1,0,0,1949,1951,5,135,0,0,1950,1949,1,0,0,0,
        1950,1951,1,0,0,0,1951,1952,1,0,0,0,1952,1954,3,242,121,0,1953,1955,
        5,135,0,0,1954,1953,1,0,0,0,1954,1955,1,0,0,0,1955,1957,1,0,0,0,
        1956,1948,1,0,0,0,1957,1960,1,0,0,0,1958,1956,1,0,0,0,1958,1959,
        1,0,0,0,1959,1962,1,0,0,0,1960,1958,1,0,0,0,1961,1944,1,0,0,0,1961,
        1962,1,0,0,0,1962,1963,1,0,0,0,1963,1964,5,9,0,0,1964,241,1,0,0,
        0,1965,1966,3,186,93,0,1966,243,1,0,0,0,1967,1968,3,254,127,0,1968,
        1969,3,100,50,0,1969,245,1,0,0,0,1970,1972,3,252,126,0,1971,1973,
        5,135,0,0,1972,1971,1,0,0,0,1972,1973,1,0,0,0,1973,1974,1,0,0,0,
        1974,1976,5,8,0,0,1975,1977,5,135,0,0,1976,1975,1,0,0,0,1976,1977,
        1,0,0,0,1977,1995,1,0,0,0,1978,1980,3,186,93,0,1979,1981,5,135,0,
        0,1980,1979,1,0,0,0,1980,1981,1,0,0,0,1981,1992,1,0,0,0,1982,1984,
        5,1,0,0,1983,1985,5,135,0,0,1984,1983,1,0,0,0,1984,1985,1,0,0,0,
        1985,1986,1,0,0,0,1986,1988,3,186,93,0,1987,1989,5,135,0,0,1988,
        1987,1,0,0,0,1988,1989,1,0,0,0,1989,1991,1,0,0,0,1990,1982,1,0,0,
        0,1991,1994,1,0,0,0,1992,1990,1,0,0,0,1992,1993,1,0,0,0,1993,1996,
        1,0,0,0,1994,1992,1,0,0,0,1995,1978,1,0,0,0,1995,1996,1,0,0,0,1996,
        1997,1,0,0,0,1997,1998,5,9,0,0,1998,247,1,0,0,0,1999,2000,3,252,
        126,0,2000,249,1,0,0,0,2001,2002,3,100,50,0,2002,251,1,0,0,0,2003,
        2004,3,254,127,0,2004,2005,3,100,50,0,2005,253,1,0,0,0,2006,2007,
        3,100,50,0,2007,2008,5,4,0,0,2008,2010,1,0,0,0,2009,2006,1,0,0,0,
        2010,2013,1,0,0,0,2011,2009,1,0,0,0,2011,2012,1,0,0,0,2012,255,1,
        0,0,0,2013,2011,1,0,0,0,2014,2015,3,100,50,0,2015,257,1,0,0,0,2016,
        2023,3,260,130,0,2017,2023,5,92,0,0,2018,2023,3,262,131,0,2019,2023,
        5,117,0,0,2020,2023,3,268,134,0,2021,2023,3,272,136,0,2022,2016,
        1,0,0,0,2022,2017,1,0,0,0,2022,2018,1,0,0,0,2022,2019,1,0,0,0,2022,
        2020,1,0,0,0,2022,2021,1,0,0,0,2023,259,1,0,0,0,2024,2025,7,7,0,
        0,2025,261,1,0,0,0,2026,2029,3,266,133,0,2027,2029,3,264,132,0,2028,
        2026,1,0,0,0,2028,2027,1,0,0,0,2029,263,1,0,0,0,2030,2031,7,8,0,
        0,2031,265,1,0,0,0,2032,2033,7,9,0,0,2033,267,1,0,0,0,2034,2036,
        5,11,0,0,2035,2037,5,135,0,0,2036,2035,1,0,0,0,2036,2037,1,0,0,0,
        2037,2055,1,0,0,0,2038,2040,3,270,135,0,2039,2041,5,135,0,0,2040,
        2039,1,0,0,0,2040,2041,1,0,0,0,2041,2052,1,0,0,0,2042,2044,5,1,0,
        0,2043,2045,5,135,0,0,2044,2043,1,0,0,0,2044,2045,1,0,0,0,2045,2046,
        1,0,0,0,2046,2048,3,270,135,0,2047,2049,5,135,0,0,2048,2047,1,0,
        0,0,2048,2049,1,0,0,0,2049,2051,1,0,0,0,2050,2042,1,0,0,0,2051,2054,
        1,0,0,0,2052,2050,1,0,0,0,2052,2053,1,0,0,0,2053,2056,1,0,0,0,2054,
        2052,1,0,0,0,2055,2038,1,0,0,0,2055,2056,1,0,0,0,2056,2057,1,0,0,
        0,2057,2058,5,12,0,0,2058,269,1,0,0,0,2059,2060,3,186,93,0,2060,
        271,1,0,0,0,2061,2063,5,6,0,0,2062,2064,5,135,0,0,2063,2062,1,0,
        0,0,2063,2064,1,0,0,0,2064,2076,1,0,0,0,2065,2073,3,274,137,0,2066,
        2068,5,1,0,0,2067,2069,5,135,0,0,2068,2067,1,0,0,0,2068,2069,1,0,
        0,0,2069,2070,1,0,0,0,2070,2072,3,274,137,0,2071,2066,1,0,0,0,2072,
        2075,1,0,0,0,2073,2071,1,0,0,0,2073,2074,1,0,0,0,2074,2077,1,0,0,
        0,2075,2073,1,0,0,0,2076,2065,1,0,0,0,2076,2077,1,0,0,0,2077,2078,
        1,0,0,0,2078,2079,5,7,0,0,2079,273,1,0,0,0,2080,2082,3,276,138,0,
        2081,2083,5,135,0,0,2082,2081,1,0,0,0,2082,2083,1,0,0,0,2083,2084,
        1,0,0,0,2084,2086,5,10,0,0,2085,2087,5,135,0,0,2086,2085,1,0,0,0,
        2086,2087,1,0,0,0,2087,2088,1,0,0,0,2088,2090,3,186,93,0,2089,2091,
        5,135,0,0,2090,2089,1,0,0,0,2090,2091,1,0,0,0,2091,275,1,0,0,0,2092,
        2093,3,280,140,0,2093,277,1,0,0,0,2094,2097,5,26,0,0,2095,2098,3,
        100,50,0,2096,2098,5,106,0,0,2097,2095,1,0,0,0,2097,2096,1,0,0,0,
        2098,279,1,0,0,0,2099,2102,3,100,50,0,2100,2102,3,102,51,0,2101,
        2099,1,0,0,0,2101,2100,1,0,0,0,2102,281,1,0,0,0,2103,2104,7,10,0,
        0,2104,283,1,0,0,0,2105,2106,7,11,0,0,2106,285,1,0,0,0,2107,2108,
        7,12,0,0,2108,287,1,0,0,0,393,291,295,299,303,307,309,312,315,323,
        327,331,334,338,345,349,352,356,360,364,369,373,376,380,384,388,
        393,397,400,404,407,410,414,420,424,430,434,440,446,452,455,458,
        462,468,471,474,478,482,486,490,496,499,503,510,514,518,522,526,
        530,535,539,543,545,550,554,556,558,564,568,574,580,586,591,597,
        600,606,608,612,616,621,625,628,635,639,643,648,652,657,662,665,
        669,673,678,681,683,686,692,695,699,705,711,715,721,725,730,734,
        738,742,748,752,758,762,764,768,770,774,776,780,782,788,792,796,
        800,804,808,812,816,822,825,828,834,837,841,845,849,853,857,861,
        863,867,869,872,876,878,882,884,893,897,901,903,907,911,915,920,
        924,927,930,934,937,940,950,955,959,963,965,969,974,979,983,985,
        987,990,995,1001,1006,1016,1020,1024,1028,1031,1035,1038,1044,1051,
        1055,1058,1061,1069,1074,1081,1086,1089,1093,1097,1101,1107,1111,
        1116,1121,1125,1128,1130,1135,1142,1146,1156,1163,1176,1180,1186,
        1190,1194,1199,1204,1208,1212,1216,1221,1228,1232,1237,1242,1246,
        1251,1255,1258,1265,1270,1273,1279,1282,1288,1292,1296,1300,1304,
        1309,1314,1318,1323,1326,1335,1344,1349,1362,1365,1373,1377,1382,
        1389,1394,1401,1405,1410,1414,1420,1424,1427,1430,1434,1440,1444,
        1447,1450,1456,1459,1462,1466,1472,1475,1478,1482,1486,1490,1494,
        1498,1501,1506,1511,1516,1521,1527,1531,1533,1537,1541,1543,1545,
        1553,1558,1569,1579,1589,1594,1598,1605,1609,1615,1628,1631,1638,
        1652,1656,1660,1666,1679,1683,1689,1694,1698,1704,1710,1713,1717,
        1726,1730,1734,1745,1749,1754,1758,1762,1767,1769,1772,1776,1779,
        1782,1788,1792,1796,1802,1806,1810,1813,1816,1822,1826,1830,1832,
        1836,1840,1842,1846,1850,1856,1860,1864,1870,1874,1878,1884,1888,
        1892,1898,1902,1906,1910,1916,1920,1932,1936,1940,1942,1946,1950,
        1954,1958,1961,1972,1976,1980,1984,1988,1992,1995,2011,2022,2028,
        2036,2040,2044,2048,2052,2055,2063,2068,2073,2076,2082,2086,2090,
        2097,2101
    ]

class s_cypherParser ( Parser ):

    grammarFileName = "s_cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "','", "'='", "'+='", "'.'", "'*'", "'{'", 
                     "'}'", "'('", "')'", "':'", "'['", "']'", "'..'", "';'", 
                     "'|'", "'/'", "'%'", "'^'", "'+'", "'-'", "'<>'", "'<'", 
                     "'<='", "'>'", "'>='", "'$'", "'\\u27E8'", "'\\u3008'", 
                     "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
                     "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", 
                     "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", 
                     "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
                     "'\\uFF0D'", "<INVALID>", "<INVALID>", "'NOW'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "AtT", "PoundValue", "NOW", 
                      "AT_TIME", "SNAPSHOT", "BETWEEN", "SCOPE", "STALE", 
                      "DURING", "OVERLAPS", "UNION", "ALL", "OPTIONAL", 
                      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", 
                      "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", 
                      "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", 
                      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
                      "WHERE", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", 
                      "CONTAINS", "IN", "IS", "NULL", "COUNT", "CASE", "ELSE", 
                      "END", "WHEN", "THEN", "ANY", "NONE", "SINGLE", "EXISTS", 
                      "TRUE", "FALSE", "HexInteger", "DecimalInteger", "OctalInteger", 
                      "HexLetter", "HexDigit", "Digit", "NonZeroDigit", 
                      "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", 
                      "RegularDecimalReal", "StringLiteral", "EscapedChar", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Query = 0
    RULE_oC_Match = 1
    RULE_oC_UpdatingClause = 2
    RULE_s_Create = 3
    RULE_s_Merge = 4
    RULE_s_Set = 5
    RULE_s_Stale = 6
    RULE_oC_SetItem = 7
    RULE_s_SetPropertyItemOne = 8
    RULE_s_SetPropertyItemTwo = 9
    RULE_s_SetValueItem = 10
    RULE_s_StaleItem = 11
    RULE_s_Delete = 12
    RULE_s_DeleteItem = 13
    RULE_oC_RemoveItem = 14
    RULE_s_AtTime = 15
    RULE_s_Between = 16
    RULE_s_TimeWindowLimit = 17
    RULE_oC_InQueryCall = 18
    RULE_oC_StandaloneCall = 19
    RULE_s_YieldItems = 20
    RULE_s_YieldItem = 21
    RULE_s_WithPartQuery = 22
    RULE_s_With = 23
    RULE_oC_ExistentialSubquery = 24
    RULE_oC_FilterExpression = 25
    RULE_s_Snapshot = 26
    RULE_s_Scope = 27
    RULE_oC_PatternPart = 28
    RULE_s_PathFunctionPattern = 29
    RULE_s_SinglePathPattern = 30
    RULE_oC_NodePattern = 31
    RULE_s_Properties = 32
    RULE_s_PropertiesPattern = 33
    RULE_s_PropertyNode = 34
    RULE_s_ValueNode = 35
    RULE_oC_RelationshipDetail = 36
    RULE_oC_StringListNullPredicateExpression = 37
    RULE_oC_ListOperatorExpression = 38
    RULE_s_SingleIndexExpression = 39
    RULE_s_DoubleIndexExpression = 40
    RULE_s_LeftExpression = 41
    RULE_s_RightExpression = 42
    RULE_oC_PropertyOrLabelsExpression = 43
    RULE_s_AtTExpression = 44
    RULE_s_PropertyLookupName = 45
    RULE_s_PropertyLookupTime = 46
    RULE_s_TimePredicateExpression = 47
    RULE_s_AtTElement = 48
    RULE_s_TimePointLiteral = 49
    RULE_oC_SymbolicName = 50
    RULE_oC_ReservedWord = 51
    RULE_oC_Cypher = 52
    RULE_oC_Statement = 53
    RULE_oC_RegularQuery = 54
    RULE_oC_Union = 55
    RULE_oC_SingleQuery = 56
    RULE_oC_SinglePartQuery = 57
    RULE_oC_MultiPartQuery = 58
    RULE_oC_ReadingClause = 59
    RULE_oC_Unwind = 60
    RULE_oC_Merge = 61
    RULE_oC_MergeAction = 62
    RULE_oC_Create = 63
    RULE_oC_Set = 64
    RULE_oC_Delete = 65
    RULE_oC_Remove = 66
    RULE_oC_YieldItems = 67
    RULE_oC_YieldItem = 68
    RULE_oC_With = 69
    RULE_oC_Return = 70
    RULE_oC_ProjectionBody = 71
    RULE_oC_ProjectionItems = 72
    RULE_oC_ProjectionItem = 73
    RULE_oC_Order = 74
    RULE_oC_Skip = 75
    RULE_oC_Limit = 76
    RULE_oC_SortItem = 77
    RULE_oC_Where = 78
    RULE_oC_Pattern = 79
    RULE_oC_AnonymousPatternPart = 80
    RULE_oC_PatternElement = 81
    RULE_oC_RelationshipsPattern = 82
    RULE_oC_PatternElementChain = 83
    RULE_oC_RelationshipPattern = 84
    RULE_oC_Properties = 85
    RULE_oC_RelationshipTypes = 86
    RULE_oC_NodeLabels = 87
    RULE_oC_NodeLabel = 88
    RULE_oC_RangeLiteral = 89
    RULE_oC_LabelName = 90
    RULE_oC_RelTypeName = 91
    RULE_oC_PropertyExpression = 92
    RULE_oC_Expression = 93
    RULE_oC_OrExpression = 94
    RULE_oC_XorExpression = 95
    RULE_oC_AndExpression = 96
    RULE_oC_NotExpression = 97
    RULE_oC_ComparisonExpression = 98
    RULE_oC_StringPredicateExpression = 99
    RULE_oC_ListPredicateExpression = 100
    RULE_oC_NullPredicateExpression = 101
    RULE_oC_AddOrSubtractExpression = 102
    RULE_s_MultiplyDivideModuloOperator = 103
    RULE_s_PowerOfOperator = 104
    RULE_s_AddOrSubtractOperator = 105
    RULE_s_ComparisonOperator = 106
    RULE_oC_MultiplyDivideModuloExpression = 107
    RULE_oC_PowerOfExpression = 108
    RULE_oC_UnaryAddOrSubtractExpression = 109
    RULE_oC_PropertyLookup = 110
    RULE_oC_Atom = 111
    RULE_oC_CaseExpression = 112
    RULE_oC_CaseAlternative = 113
    RULE_oC_ListComprehension = 114
    RULE_oC_PatternComprehension = 115
    RULE_oC_Quantifier = 116
    RULE_oC_PatternPredicate = 117
    RULE_oC_ParenthesizedExpression = 118
    RULE_oC_IdInColl = 119
    RULE_oC_FunctionInvocation = 120
    RULE_s_FunctionInvocationExpression = 121
    RULE_oC_FunctionName = 122
    RULE_oC_ExplicitProcedureInvocation = 123
    RULE_oC_ImplicitProcedureInvocation = 124
    RULE_oC_ProcedureResultField = 125
    RULE_oC_ProcedureName = 126
    RULE_oC_Namespace = 127
    RULE_oC_Variable = 128
    RULE_oC_Literal = 129
    RULE_oC_BooleanLiteral = 130
    RULE_oC_NumberLiteral = 131
    RULE_oC_IntegerLiteral = 132
    RULE_oC_DoubleLiteral = 133
    RULE_oC_ListLiteral = 134
    RULE_s_ListLiteralExpression = 135
    RULE_oC_MapLiteral = 136
    RULE_s_MapKeyValue = 137
    RULE_oC_PropertyKeyName = 138
    RULE_oC_Parameter = 139
    RULE_oC_SchemaName = 140
    RULE_oC_LeftArrowHead = 141
    RULE_oC_RightArrowHead = 142
    RULE_oC_Dash = 143

    ruleNames =  [ "oC_Query", "oC_Match", "oC_UpdatingClause", "s_Create", 
                   "s_Merge", "s_Set", "s_Stale", "oC_SetItem", "s_SetPropertyItemOne", 
                   "s_SetPropertyItemTwo", "s_SetValueItem", "s_StaleItem", 
                   "s_Delete", "s_DeleteItem", "oC_RemoveItem", "s_AtTime", 
                   "s_Between", "s_TimeWindowLimit", "oC_InQueryCall", "oC_StandaloneCall", 
                   "s_YieldItems", "s_YieldItem", "s_WithPartQuery", "s_With", 
                   "oC_ExistentialSubquery", "oC_FilterExpression", "s_Snapshot", 
                   "s_Scope", "oC_PatternPart", "s_PathFunctionPattern", 
                   "s_SinglePathPattern", "oC_NodePattern", "s_Properties", 
                   "s_PropertiesPattern", "s_PropertyNode", "s_ValueNode", 
                   "oC_RelationshipDetail", "oC_StringListNullPredicateExpression", 
                   "oC_ListOperatorExpression", "s_SingleIndexExpression", 
                   "s_DoubleIndexExpression", "s_LeftExpression", "s_RightExpression", 
                   "oC_PropertyOrLabelsExpression", "s_AtTExpression", "s_PropertyLookupName", 
                   "s_PropertyLookupTime", "s_TimePredicateExpression", 
                   "s_AtTElement", "s_TimePointLiteral", "oC_SymbolicName", 
                   "oC_ReservedWord", "oC_Cypher", "oC_Statement", "oC_RegularQuery", 
                   "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", 
                   "oC_ReadingClause", "oC_Unwind", "oC_Merge", "oC_MergeAction", 
                   "oC_Create", "oC_Set", "oC_Delete", "oC_Remove", "oC_YieldItems", 
                   "oC_YieldItem", "oC_With", "oC_Return", "oC_ProjectionBody", 
                   "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", 
                   "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", 
                   "oC_AnonymousPatternPart", "oC_PatternElement", "oC_RelationshipsPattern", 
                   "oC_PatternElementChain", "oC_RelationshipPattern", "oC_Properties", 
                   "oC_RelationshipTypes", "oC_NodeLabels", "oC_NodeLabel", 
                   "oC_RangeLiteral", "oC_LabelName", "oC_RelTypeName", 
                   "oC_PropertyExpression", "oC_Expression", "oC_OrExpression", 
                   "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", 
                   "oC_ComparisonExpression", "oC_StringPredicateExpression", 
                   "oC_ListPredicateExpression", "oC_NullPredicateExpression", 
                   "oC_AddOrSubtractExpression", "s_MultiplyDivideModuloOperator", 
                   "s_PowerOfOperator", "s_AddOrSubtractOperator", "s_ComparisonOperator", 
                   "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", 
                   "oC_UnaryAddOrSubtractExpression", "oC_PropertyLookup", 
                   "oC_Atom", "oC_CaseExpression", "oC_CaseAlternative", 
                   "oC_ListComprehension", "oC_PatternComprehension", "oC_Quantifier", 
                   "oC_PatternPredicate", "oC_ParenthesizedExpression", 
                   "oC_IdInColl", "oC_FunctionInvocation", "s_FunctionInvocationExpression", 
                   "oC_FunctionName", "oC_ExplicitProcedureInvocation", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_Variable", "oC_Literal", 
                   "oC_BooleanLiteral", "oC_NumberLiteral", "oC_IntegerLiteral", 
                   "oC_DoubleLiteral", "oC_ListLiteral", "s_ListLiteralExpression", 
                   "oC_MapLiteral", "s_MapKeyValue", "oC_PropertyKeyName", 
                   "oC_Parameter", "oC_SchemaName", "oC_LeftArrowHead", 
                   "oC_RightArrowHead", "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    AtT=46
    PoundValue=47
    NOW=48
    AT_TIME=49
    SNAPSHOT=50
    BETWEEN=51
    SCOPE=52
    STALE=53
    DURING=54
    OVERLAPS=55
    UNION=56
    ALL=57
    OPTIONAL=58
    MATCH=59
    UNWIND=60
    AS=61
    MERGE=62
    ON=63
    CREATE=64
    SET=65
    DETACH=66
    DELETE=67
    REMOVE=68
    CALL=69
    YIELD=70
    WITH=71
    RETURN=72
    DISTINCT=73
    ORDER=74
    BY=75
    L_SKIP=76
    LIMIT=77
    ASCENDING=78
    ASC=79
    DESCENDING=80
    DESC=81
    WHERE=82
    OR=83
    XOR=84
    AND=85
    NOT=86
    STARTS=87
    ENDS=88
    CONTAINS=89
    IN=90
    IS=91
    NULL=92
    COUNT=93
    CASE=94
    ELSE=95
    END=96
    WHEN=97
    THEN=98
    ANY=99
    NONE=100
    SINGLE=101
    EXISTS=102
    TRUE=103
    FALSE=104
    HexInteger=105
    DecimalInteger=106
    OctalInteger=107
    HexLetter=108
    HexDigit=109
    Digit=110
    NonZeroDigit=111
    NonZeroOctDigit=112
    OctDigit=113
    ZeroDigit=114
    ExponentDecimalReal=115
    RegularDecimalReal=116
    StringLiteral=117
    EscapedChar=118
    CONSTRAINT=119
    DO=120
    FOR=121
    REQUIRE=122
    UNIQUE=123
    MANDATORY=124
    SCALAR=125
    OF=126
    ADD=127
    DROP=128
    FILTER=129
    EXTRACT=130
    UnescapedSymbolicName=131
    IdentifierStart=132
    IdentifierPart=133
    EscapedSymbolicName=134
    SP=135
    WHITESPACE=136
    Comment=137

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StandaloneCallContext,0)


        def s_TimeWindowLimit(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimeWindowLimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = s_cypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Query)
        try:
            self.state = 291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 288
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 289
                self.oC_StandaloneCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 290
                self.s_TimeWindowLimit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = s_cypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 293
                self.match(s_cypherParser.OPTIONAL)
                self.state = 294
                self.match(s_cypherParser.SP)


            self.state = 297
            self.match(s_cypherParser.MATCH)
            self.state = 299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 298
                self.match(s_cypherParser.SP)


            self.state = 301
            self.oC_Pattern()
            self.state = 309
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 302
                    self.match(s_cypherParser.SP)


                self.state = 307
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 305
                    self.s_AtTime()
                    pass
                elif token in [51]:
                    self.state = 306
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 315
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 311
                    self.match(s_cypherParser.SP)


                self.state = 314
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_Create(self):
            return self.getTypedRuleContext(s_cypherParser.S_CreateContext,0)


        def s_Merge(self):
            return self.getTypedRuleContext(s_cypherParser.S_MergeContext,0)


        def s_Set(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RemoveContext,0)


        def s_Stale(self):
            return self.getTypedRuleContext(s_cypherParser.S_StaleContext,0)


        def s_Delete(self):
            return self.getTypedRuleContext(s_cypherParser.S_DeleteContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = s_cypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_UpdatingClause)
        try:
            self.state = 323
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.enterOuterAlt(localctx, 1)
                self.state = 317
                self.s_Create()
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 318
                self.s_Merge()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 3)
                self.state = 319
                self.s_Set()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 4)
                self.state = 320
                self.oC_Remove()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 5)
                self.state = 321
                self.s_Stale()
                pass
            elif token in [66, 67]:
                self.enterOuterAlt(localctx, 6)
                self.state = 322
                self.s_Delete()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Create" ):
                listener.enterS_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Create" ):
                listener.exitS_Create(self)




    def s_Create(self):

        localctx = s_cypherParser.S_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_s_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325
            self.match(s_cypherParser.CREATE)
            self.state = 327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 326
                self.match(s_cypherParser.SP)


            self.state = 329
            self.oC_Pattern()
            self.state = 334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 330
                    self.match(s_cypherParser.SP)


                self.state = 333
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Merge" ):
                listener.enterS_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Merge" ):
                listener.exitS_Merge(self)




    def s_Merge(self):

        localctx = s_cypherParser.S_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_s_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.match(s_cypherParser.MERGE)
            self.state = 338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 337
                self.match(s_cypherParser.SP)


            self.state = 340
            self.oC_PatternPart()
            self.state = 345
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 341
                    self.match(s_cypherParser.SP)
                    self.state = 342
                    self.oC_MergeAction() 
                self.state = 347
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

            self.state = 352
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 348
                    self.match(s_cypherParser.SP)


                self.state = 351
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Set" ):
                listener.enterS_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Set" ):
                listener.exitS_Set(self)




    def s_Set(self):

        localctx = s_cypherParser.S_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_s_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(s_cypherParser.SET)
            self.state = 356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 355
                self.match(s_cypherParser.SP)


            self.state = 358
            self.oC_SetItem()
            self.state = 369
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 360
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 359
                        self.match(s_cypherParser.SP)


                    self.state = 362
                    self.match(s_cypherParser.T__0)
                    self.state = 364
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 363
                        self.match(s_cypherParser.SP)


                    self.state = 366
                    self.oC_SetItem() 
                self.state = 371
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

            self.state = 376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 372
                    self.match(s_cypherParser.SP)


                self.state = 375
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def s_StaleItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StaleItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StaleItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Stale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Stale" ):
                listener.enterS_Stale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Stale" ):
                listener.exitS_Stale(self)




    def s_Stale(self):

        localctx = s_cypherParser.S_StaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_s_Stale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self.match(s_cypherParser.STALE)
            self.state = 380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 379
                self.match(s_cypherParser.SP)


            self.state = 382
            self.s_StaleItem()
            self.state = 393
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 384
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 383
                        self.match(s_cypherParser.SP)


                    self.state = 386
                    self.match(s_cypherParser.T__0)
                    self.state = 388
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 387
                        self.match(s_cypherParser.SP)


                    self.state = 390
                    self.s_StaleItem() 
                self.state = 395
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

            self.state = 400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 396
                    self.match(s_cypherParser.SP)


                self.state = 399
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_SetPropertyItemOne(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemOneContext,0)


        def s_SetPropertyItemTwo(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemTwoContext,0)


        def s_SetValueItem(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetValueItemContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = s_cypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 402
                self.oC_PropertyExpression()
                self.state = 407
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 404
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 403
                        self.match(s_cypherParser.SP)


                    self.state = 406
                    self.s_AtTElement()


                self.state = 410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 409
                    self.match(s_cypherParser.SP)


                self.state = 412
                self.match(s_cypherParser.T__1)
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 413
                    self.match(s_cypherParser.SP)


                self.state = 416
                self.oC_Expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 418
                self.oC_Variable()
                self.state = 420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 419
                    self.match(s_cypherParser.SP)


                self.state = 422
                self.match(s_cypherParser.T__1)
                self.state = 424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 423
                    self.match(s_cypherParser.SP)


                self.state = 426
                self.oC_Expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 428
                self.oC_Variable()
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 429
                    self.match(s_cypherParser.SP)


                self.state = 432
                self.match(s_cypherParser.T__2)
                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 433
                    self.match(s_cypherParser.SP)


                self.state = 436
                self.oC_Expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 438
                self.oC_Variable()
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 439
                    self.match(s_cypherParser.SP)


                self.state = 442
                self.oC_NodeLabels()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 444
                self.oC_Variable()
                self.state = 446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 445
                    self.match(s_cypherParser.SP)


                self.state = 448
                self.s_AtTElement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 450
                self.oC_Variable()
                self.state = 455
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 452
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 451
                        self.match(s_cypherParser.SP)


                    self.state = 454
                    self.s_AtTElement()


                self.state = 458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 457
                    self.match(s_cypherParser.SP)


                self.state = 460
                self.match(s_cypherParser.T__3)
                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 461
                    self.match(s_cypherParser.SP)


                self.state = 464
                self.s_SetPropertyItemOne()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 466
                self.oC_Variable()
                self.state = 471
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 468
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 467
                        self.match(s_cypherParser.SP)


                    self.state = 470
                    self.s_AtTElement()


                self.state = 474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 473
                    self.match(s_cypherParser.SP)


                self.state = 476
                self.match(s_cypherParser.T__3)
                self.state = 478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 477
                    self.match(s_cypherParser.SP)


                self.state = 480
                self.s_SetPropertyItemTwo()
                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 481
                    self.match(s_cypherParser.SP)


                self.state = 484
                self.s_SetValueItem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemOneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemOne

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemOne" ):
                listener.enterS_SetPropertyItemOne(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemOne" ):
                listener.exitS_SetPropertyItemOne(self)




    def s_SetPropertyItemOne(self):

        localctx = s_cypherParser.S_SetPropertyItemOneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_s_SetPropertyItemOne)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.oC_PropertyKeyName()
            self.state = 490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 489
                self.match(s_cypherParser.SP)


            self.state = 492
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemTwoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemTwo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemTwo" ):
                listener.enterS_SetPropertyItemTwo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemTwo" ):
                listener.exitS_SetPropertyItemTwo(self)




    def s_SetPropertyItemTwo(self):

        localctx = s_cypherParser.S_SetPropertyItemTwoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_s_SetPropertyItemTwo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.oC_PropertyKeyName()
            self.state = 499
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 495
                    self.match(s_cypherParser.SP)


                self.state = 498
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetValueItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetValueItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetValueItem" ):
                listener.enterS_SetValueItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetValueItem" ):
                listener.exitS_SetValueItem(self)




    def s_SetValueItem(self):

        localctx = s_cypherParser.S_SetValueItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_s_SetValueItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            self.match(s_cypherParser.PoundValue)
            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 502
                self.match(s_cypherParser.SP)


            self.state = 505
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def s_PropertyLookupName(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StaleItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StaleItem" ):
                listener.enterS_StaleItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StaleItem" ):
                listener.exitS_StaleItem(self)




    def s_StaleItem(self):

        localctx = s_cypherParser.S_StaleItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_s_StaleItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.oC_Expression()
            self.state = 514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 508
                self.s_PropertyLookupName()
                self.state = 510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 509
                    self.match(s_cypherParser.SP)


                self.state = 512
                self.match(s_cypherParser.PoundValue)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def s_DeleteItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DeleteItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DeleteItemContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Delete" ):
                listener.enterS_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Delete" ):
                listener.exitS_Delete(self)




    def s_Delete(self):

        localctx = s_cypherParser.S_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_s_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 516
                self.match(s_cypherParser.DETACH)
                self.state = 517
                self.match(s_cypherParser.SP)


            self.state = 520
            self.match(s_cypherParser.DELETE)
            self.state = 522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 521
                self.match(s_cypherParser.SP)


            self.state = 524
            self.s_DeleteItem()
            self.state = 535
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 526
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 525
                        self.match(s_cypherParser.SP)


                    self.state = 528
                    self.match(s_cypherParser.T__0)
                    self.state = 530
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 529
                        self.match(s_cypherParser.SP)


                    self.state = 532
                    self.s_DeleteItem() 
                self.state = 537
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

            self.state = 545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 538
                    self.match(s_cypherParser.SP)


                self.state = 543
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 541
                    self.s_AtTime()
                    pass
                elif token in [51]:
                    self.state = 542
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def s_PropertyLookupName(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DeleteItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DeleteItem" ):
                listener.enterS_DeleteItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DeleteItem" ):
                listener.exitS_DeleteItem(self)




    def s_DeleteItem(self):

        localctx = s_cypherParser.S_DeleteItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_s_DeleteItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            self.oC_Expression()
            self.state = 558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 548
                self.s_PropertyLookupName()
                self.state = 556
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 550
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 549
                        self.match(s_cypherParser.SP)


                    self.state = 554
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [47]:
                        self.state = 552
                        self.match(s_cypherParser.PoundValue)
                        pass
                    elif token in [46]:
                        self.state = 553
                        self.s_AtTElement()
                        pass
                    else:
                        raise NoViableAltException(self)





        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = s_cypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_oC_RemoveItem)
        try:
            self.state = 564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 560
                self.oC_Variable()
                self.state = 561
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 563
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTime" ):
                listener.enterS_AtTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTime" ):
                listener.exitS_AtTime(self)




    def s_AtTime(self):

        localctx = s_cypherParser.S_AtTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_s_AtTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.match(s_cypherParser.AT_TIME)
            self.state = 568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 567
                self.match(s_cypherParser.SP)


            self.state = 570
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_BetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Between

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Between" ):
                listener.enterS_Between(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Between" ):
                listener.exitS_Between(self)




    def s_Between(self):

        localctx = s_cypherParser.S_BetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_s_Between)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.match(s_cypherParser.BETWEEN)
            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 573
                self.match(s_cypherParser.SP)


            self.state = 576
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimeWindowLimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_Snapshot(self):
            return self.getTypedRuleContext(s_cypherParser.S_SnapshotContext,0)


        def s_Scope(self):
            return self.getTypedRuleContext(s_cypherParser.S_ScopeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimeWindowLimit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimeWindowLimit" ):
                listener.enterS_TimeWindowLimit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimeWindowLimit" ):
                listener.exitS_TimeWindowLimit(self)




    def s_TimeWindowLimit(self):

        localctx = s_cypherParser.S_TimeWindowLimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_s_TimeWindowLimit)
        try:
            self.state = 580
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 578
                self.s_Snapshot()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 579
                self.s_Scope()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def s_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.S_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = s_cypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self.match(s_cypherParser.CALL)
            self.state = 583
            self.match(s_cypherParser.SP)
            self.state = 584
            self.oC_ExplicitProcedureInvocation()
            self.state = 591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 585
                    self.match(s_cypherParser.SP)


                self.state = 588
                self.match(s_cypherParser.YIELD)
                self.state = 589
                self.match(s_cypherParser.SP)
                self.state = 590
                self.s_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def s_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.S_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = s_cypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_oC_StandaloneCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.match(s_cypherParser.CALL)
            self.state = 594
            self.match(s_cypherParser.SP)
            self.state = 597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 595
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 596
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 599
                    self.match(s_cypherParser.SP)


                self.state = 602
                self.match(s_cypherParser.YIELD)
                self.state = 603
                self.match(s_cypherParser.SP)
                self.state = 606
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [5]:
                    self.state = 604
                    self.match(s_cypherParser.T__4)
                    pass
                elif token in [48, 93, 97, 99, 100, 101, 108, 129, 130, 131, 134]:
                    self.state = 605
                    self.s_YieldItems()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_YieldItems" ):
                listener.enterS_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_YieldItems" ):
                listener.exitS_YieldItems(self)




    def s_YieldItems(self):

        localctx = s_cypherParser.S_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_s_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self.s_YieldItem()
            self.state = 621
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 612
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 611
                        self.match(s_cypherParser.SP)


                    self.state = 614
                    self.match(s_cypherParser.T__0)
                    self.state = 616
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 615
                        self.match(s_cypherParser.SP)


                    self.state = 618
                    self.s_YieldItem() 
                self.state = 623
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

            self.state = 628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 624
                    self.match(s_cypherParser.SP)


                self.state = 627
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_YieldItem" ):
                listener.enterS_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_YieldItem" ):
                listener.exitS_YieldItem(self)




    def s_YieldItem(self):

        localctx = s_cypherParser.S_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_s_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            self.oC_ProcedureResultField()
            self.state = 635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 631
                self.match(s_cypherParser.SP)
                self.state = 632
                self.match(s_cypherParser.AS)
                self.state = 633
                self.match(s_cypherParser.SP)
                self.state = 634
                self.oC_Variable()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_With(self):
            return self.getTypedRuleContext(s_cypherParser.S_WithContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_WithPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_WithPartQuery" ):
                listener.enterS_WithPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_WithPartQuery" ):
                listener.exitS_WithPartQuery(self)




    def s_WithPartQuery(self):

        localctx = s_cypherParser.S_WithPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_s_WithPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                self.state = 637
                self.oC_ReadingClause()
                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 638
                    self.match(s_cypherParser.SP)


                self.state = 645
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64001) != 0):
                self.state = 646
                self.oC_UpdatingClause()
                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 647
                    self.match(s_cypherParser.SP)


                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 655
            self.s_With()
            self.state = 657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 656
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_With" ):
                listener.enterS_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_With" ):
                listener.exitS_With(self)




    def s_With(self):

        localctx = s_cypherParser.S_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_s_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.match(s_cypherParser.WITH)
            self.state = 660
            self.oC_ProjectionBody()
            self.state = 665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 661
                    self.match(s_cypherParser.SP)


                self.state = 664
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExistentialSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExistentialSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExistentialSubquery" ):
                listener.enterOC_ExistentialSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExistentialSubquery" ):
                listener.exitOC_ExistentialSubquery(self)




    def oC_ExistentialSubquery(self):

        localctx = s_cypherParser.OC_ExistentialSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_oC_ExistentialSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(s_cypherParser.EXISTS)
            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 668
                self.match(s_cypherParser.SP)


            self.state = 671
            self.match(s_cypherParser.T__5)
            self.state = 673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 672
                self.match(s_cypherParser.SP)


            self.state = 683
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 71, 72]:
                self.state = 675
                self.oC_RegularQuery()
                pass
            elif token in [8, 48, 93, 97, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 676
                self.oC_Pattern()
                self.state = 681
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 678
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 677
                        self.match(s_cypherParser.SP)


                    self.state = 680
                    self.oC_Where()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 685
                self.match(s_cypherParser.SP)


            self.state = 688
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IdInCollContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = s_cypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.oC_IdInColl()
            self.state = 695
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 691
                    self.match(s_cypherParser.SP)


                self.state = 694
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SnapshotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Snapshot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Snapshot" ):
                listener.enterS_Snapshot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Snapshot" ):
                listener.exitS_Snapshot(self)




    def s_Snapshot(self):

        localctx = s_cypherParser.S_SnapshotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_s_Snapshot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self.match(s_cypherParser.SNAPSHOT)
            self.state = 699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 698
                self.match(s_cypherParser.SP)


            self.state = 701
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Scope" ):
                listener.enterS_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Scope" ):
                listener.exitS_Scope(self)




    def s_Scope(self):

        localctx = s_cypherParser.S_ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_s_Scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(s_cypherParser.SCOPE)
            self.state = 705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 704
                self.match(s_cypherParser.SP)


            self.state = 707
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_PathFunctionPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PathFunctionPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AnonymousPatternPartContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = s_cypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 709
                self.oC_Variable()
                self.state = 711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 710
                    self.match(s_cypherParser.SP)


                self.state = 713
                self.match(s_cypherParser.T__1)
                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 714
                    self.match(s_cypherParser.SP)


                self.state = 717
                self.s_PathFunctionPattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 719
                self.oC_Variable()
                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 720
                    self.match(s_cypherParser.SP)


                self.state = 723
                self.match(s_cypherParser.T__1)
                self.state = 725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 724
                    self.match(s_cypherParser.SP)


                self.state = 727
                self.oC_AnonymousPatternPart()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 729
                self.oC_AnonymousPatternPart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PathFunctionPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def s_SinglePathPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_SinglePathPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PathFunctionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PathFunctionPattern" ):
                listener.enterS_PathFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PathFunctionPattern" ):
                listener.exitS_PathFunctionPattern(self)




    def s_PathFunctionPattern(self):

        localctx = s_cypherParser.S_PathFunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_s_PathFunctionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.oC_FunctionName()
            self.state = 734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 733
                self.match(s_cypherParser.SP)


            self.state = 736
            self.match(s_cypherParser.T__7)
            self.state = 738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 737
                self.match(s_cypherParser.SP)


            self.state = 740
            self.s_SinglePathPattern()
            self.state = 742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 741
                self.match(s_cypherParser.SP)


            self.state = 744
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SinglePathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodePatternContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,i)


        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SinglePathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SinglePathPattern" ):
                listener.enterS_SinglePathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SinglePathPattern" ):
                listener.exitS_SinglePathPattern(self)




    def s_SinglePathPattern(self):

        localctx = s_cypherParser.S_SinglePathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_s_SinglePathPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.oC_NodePattern()
            self.state = 748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 747
                self.match(s_cypherParser.SP)


            self.state = 750
            self.oC_RelationshipPattern()
            self.state = 752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 751
                self.match(s_cypherParser.SP)


            self.state = 754
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def s_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = s_cypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.match(s_cypherParser.T__7)
            self.state = 758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 757
                self.match(s_cypherParser.SP)


            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625937) != 0):
                self.state = 760
                self.oC_Variable()
                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 761
                    self.match(s_cypherParser.SP)




            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 766
                self.oC_NodeLabels()
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 767
                    self.match(s_cypherParser.SP)




            self.state = 776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 772
                self.s_AtTElement()
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 773
                    self.match(s_cypherParser.SP)




            self.state = 782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6 or _la==26:
                self.state = 778
                self.s_Properties()
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 779
                    self.match(s_cypherParser.SP)




            self.state = 784
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertiesPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesPatternContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Properties" ):
                listener.enterS_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Properties" ):
                listener.exitS_Properties(self)




    def s_Properties(self):

        localctx = s_cypherParser.S_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_s_Properties)
        try:
            self.state = 788
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 786
                self.s_PropertiesPattern()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 787
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertyNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PropertyNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PropertyNodeContext,i)


        def s_ValueNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ValueNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ValueNodeContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertiesPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertiesPattern" ):
                listener.enterS_PropertiesPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertiesPattern" ):
                listener.exitS_PropertiesPattern(self)




    def s_PropertiesPattern(self):

        localctx = s_cypherParser.S_PropertiesPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_s_PropertiesPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 790
            self.match(s_cypherParser.T__5)
            self.state = 825
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 791
                    self.match(s_cypherParser.SP)


                self.state = 794
                self.s_PropertyNode()
                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 795
                    self.match(s_cypherParser.SP)


                self.state = 798
                self.match(s_cypherParser.T__9)
                self.state = 800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 799
                    self.match(s_cypherParser.SP)


                self.state = 802
                self.s_ValueNode()
                self.state = 822
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,126,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 804
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 803
                            self.match(s_cypherParser.SP)


                        self.state = 806
                        self.match(s_cypherParser.T__0)
                        self.state = 808
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 807
                            self.match(s_cypherParser.SP)


                        self.state = 810
                        self.s_PropertyNode()
                        self.state = 812
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 811
                            self.match(s_cypherParser.SP)


                        self.state = 814
                        self.match(s_cypherParser.T__9)
                        self.state = 816
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 815
                            self.match(s_cypherParser.SP)


                        self.state = 818
                        self.s_ValueNode() 
                    self.state = 824
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,126,self._ctx)



            self.state = 828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 827
                self.match(s_cypherParser.SP)


            self.state = 830
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyNode" ):
                listener.enterS_PropertyNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyNode" ):
                listener.exitS_PropertyNode(self)




    def s_PropertyNode(self):

        localctx = s_cypherParser.S_PropertyNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_s_PropertyNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.oC_PropertyKeyName()
            self.state = 837
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 833
                    self.match(s_cypherParser.SP)


                self.state = 836
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ValueNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ValueNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ValueNode" ):
                listener.enterS_ValueNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ValueNode" ):
                listener.exitS_ValueNode(self)




    def s_ValueNode(self):

        localctx = s_cypherParser.S_ValueNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_s_ValueNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.oC_Expression()
            self.state = 841
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 840
                self.match(s_cypherParser.SP)


            self.state = 853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 843
                self.match(s_cypherParser.T__7)
                self.state = 845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 844
                    self.match(s_cypherParser.SP)


                self.state = 847
                self.s_AtTElement()
                self.state = 849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 848
                    self.match(s_cypherParser.SP)


                self.state = 851
                self.match(s_cypherParser.T__8)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RangeLiteralContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = s_cypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self.match(s_cypherParser.T__10)
            self.state = 857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 856
                self.match(s_cypherParser.SP)


            self.state = 863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625937) != 0):
                self.state = 859
                self.oC_Variable()
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 860
                    self.match(s_cypherParser.SP)




            self.state = 869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 865
                self.oC_RelationshipTypes()
                self.state = 867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 866
                    self.match(s_cypherParser.SP)




            self.state = 872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 871
                self.oC_RangeLiteral()


            self.state = 878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 874
                self.s_AtTElement()
                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 875
                    self.match(s_cypherParser.SP)




            self.state = 884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6 or _la==26:
                self.state = 880
                self.oC_Properties()
                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 881
                    self.match(s_cypherParser.SP)




            self.state = 886
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def s_TimePredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateExpressionContext,0)


        def oC_StringPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringPredicateExpressionContext,0)


        def oC_ListPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListPredicateExpressionContext,0)


        def oC_NullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NullPredicateExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringListNullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullPredicateExpression" ):
                listener.enterOC_StringListNullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullPredicateExpression" ):
                listener.exitOC_StringListNullPredicateExpression(self)




    def oC_StringListNullPredicateExpression(self):

        localctx = s_cypherParser.OC_StringListNullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_oC_StringListNullPredicateExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.oC_AddOrSubtractExpression()
            self.state = 893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.state = 889
                self.s_TimePredicateExpression()

            elif la_ == 2:
                self.state = 890
                self.oC_StringPredicateExpression()

            elif la_ == 3:
                self.state = 891
                self.oC_ListPredicateExpression()

            elif la_ == 4:
                self.state = 892
                self.oC_NullPredicateExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def s_AtTExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTExpressionContext,0)


        def s_SingleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_SingleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_SingleIndexExpressionContext,i)


        def s_DoubleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DoubleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DoubleIndexExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = s_cypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_oC_ListOperatorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.state = 895
                self.oC_PropertyOrLabelsExpression()
                pass

            elif la_ == 2:
                self.state = 896
                self.s_AtTExpression()
                pass


            self.state = 903
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,148,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 901
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
                    if la_ == 1:
                        self.state = 899
                        self.s_SingleIndexExpression()
                        pass

                    elif la_ == 2:
                        self.state = 900
                        self.s_DoubleIndexExpression()
                        pass

             
                self.state = 905
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SingleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SingleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SingleIndexExpression" ):
                listener.enterS_SingleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SingleIndexExpression" ):
                listener.exitS_SingleIndexExpression(self)




    def s_SingleIndexExpression(self):

        localctx = s_cypherParser.S_SingleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_s_SingleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 906
                self.match(s_cypherParser.SP)


            self.state = 909
            self.match(s_cypherParser.T__10)
            self.state = 911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 910
                self.match(s_cypherParser.SP)


            self.state = 913
            self.s_LeftExpression()
            self.state = 915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 914
                self.match(s_cypherParser.SP)


            self.state = 917
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DoubleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def s_RightExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_RightExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DoubleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DoubleIndexExpression" ):
                listener.enterS_DoubleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DoubleIndexExpression" ):
                listener.exitS_DoubleIndexExpression(self)




    def s_DoubleIndexExpression(self):

        localctx = s_cypherParser.S_DoubleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_s_DoubleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 919
                self.match(s_cypherParser.SP)


            self.state = 922
            self.match(s_cypherParser.T__10)
            self.state = 924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 923
                self.match(s_cypherParser.SP)


            self.state = 927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663121250624) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394345409) != 0):
                self.state = 926
                self.s_LeftExpression()


            self.state = 930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 929
                self.match(s_cypherParser.SP)


            self.state = 932
            self.match(s_cypherParser.T__12)
            self.state = 934
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 933
                self.match(s_cypherParser.SP)


            self.state = 937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663121250624) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394345409) != 0):
                self.state = 936
                self.s_RightExpression()


            self.state = 940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 939
                self.match(s_cypherParser.SP)


            self.state = 942
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_LeftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_LeftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_LeftExpression" ):
                listener.enterS_LeftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_LeftExpression" ):
                listener.exitS_LeftExpression(self)




    def s_LeftExpression(self):

        localctx = s_cypherParser.S_LeftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_s_LeftExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_RightExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_RightExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_RightExpression" ):
                listener.enterS_RightExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_RightExpression" ):
                listener.exitS_RightExpression(self)




    def s_RightExpression(self):

        localctx = s_cypherParser.S_RightExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_s_RightExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyOrLabelsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyOrLabelsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyOrLabelsExpression" ):
                listener.enterOC_PropertyOrLabelsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyOrLabelsExpression" ):
                listener.exitOC_PropertyOrLabelsExpression(self)




    def oC_PropertyOrLabelsExpression(self):

        localctx = s_cypherParser.OC_PropertyOrLabelsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_oC_PropertyOrLabelsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.oC_Atom()
            self.state = 955
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,160,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 950
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 949
                        self.match(s_cypherParser.SP)


                    self.state = 952
                    self.oC_PropertyLookup() 
                self.state = 957
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,160,self._ctx)

            self.state = 965
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 958
                    self.match(s_cypherParser.SP)


                self.state = 963
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10]:
                    self.state = 961
                    self.oC_NodeLabels()
                    pass
                elif token in [46]:
                    self.state = 962
                    self.s_AtTElement()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def s_PropertyLookupTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupTimeContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def s_PropertyLookupName(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTExpression" ):
                listener.enterS_AtTExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTExpression" ):
                listener.exitS_AtTExpression(self)




    def s_AtTExpression(self):

        localctx = s_cypherParser.S_AtTExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_s_AtTExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.oC_Atom()
            self.state = 974
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,165,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 969
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 968
                        self.match(s_cypherParser.SP)


                    self.state = 971
                    self.oC_PropertyLookup() 
                self.state = 976
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,165,self._ctx)

            self.state = 987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 977
                self.s_PropertyLookupName()
                self.state = 985
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                if la_ == 1:
                    self.state = 979
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 978
                        self.match(s_cypherParser.SP)


                    self.state = 983
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [47]:
                        self.state = 981
                        self.match(s_cypherParser.PoundValue)
                        pass
                    elif token in [46]:
                        self.state = 982
                        self.s_AtTElement()
                        pass
                    else:
                        raise NoViableAltException(self)





            self.state = 990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 989
                self.match(s_cypherParser.SP)


            self.state = 992
            self.s_PropertyLookupTime()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyLookupNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyLookup(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyLookupName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyLookupName" ):
                listener.enterS_PropertyLookupName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyLookupName" ):
                listener.exitS_PropertyLookupName(self)




    def s_PropertyLookupName(self):

        localctx = s_cypherParser.S_PropertyLookupNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_s_PropertyLookupName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 994
                self.match(s_cypherParser.SP)


            self.state = 997
            self.oC_PropertyLookup()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyLookupTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyLookupTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyLookupTime" ):
                listener.enterS_PropertyLookupTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyLookupTime" ):
                listener.exitS_PropertyLookupTime(self)




    def s_PropertyLookupTime(self):

        localctx = s_cypherParser.S_PropertyLookupTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_s_PropertyLookupTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.match(s_cypherParser.AtT)
            self.state = 1006
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,173,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1001
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1000
                        self.match(s_cypherParser.SP)


                    self.state = 1003
                    self.oC_PropertyLookup() 
                self.state = 1008
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,173,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateExpression" ):
                listener.enterS_TimePredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateExpression" ):
                listener.exitS_TimePredicateExpression(self)




    def s_TimePredicateExpression(self):

        localctx = s_cypherParser.S_TimePredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_s_TimePredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self.match(s_cypherParser.SP)
            self.state = 1010
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1011
            self.match(s_cypherParser.SP)
            self.state = 1012
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_TimePointLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_TimePointLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_TimePointLiteralContext,i)


        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTElement" ):
                listener.enterS_AtTElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTElement" ):
                listener.exitS_AtTElement(self)




    def s_AtTElement(self):

        localctx = s_cypherParser.S_AtTElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_s_AtTElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1014
            self.match(s_cypherParser.AtT)
            self.state = 1016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1015
                self.match(s_cypherParser.SP)


            self.state = 1018
            self.match(s_cypherParser.T__7)
            self.state = 1028
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.state = 1020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1019
                    self.match(s_cypherParser.SP)


                self.state = 1022
                self.s_TimePointLiteral()
                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1023
                    self.match(s_cypherParser.SP)


                self.state = 1026
                self.match(s_cypherParser.T__0)


            self.state = 1031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1030
                self.match(s_cypherParser.SP)


            self.state = 1035
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 117]:
                self.state = 1033
                self.s_TimePointLiteral()
                pass
            elif token in [48]:
                self.state = 1034
                self.match(s_cypherParser.NOW)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1037
                self.match(s_cypherParser.SP)


            self.state = 1040
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePointLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePointLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePointLiteral" ):
                listener.enterS_TimePointLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePointLiteral" ):
                listener.exitS_TimePointLiteral(self)




    def s_TimePointLiteral(self):

        localctx = s_cypherParser.S_TimePointLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_s_TimePointLiteral)
        try:
            self.state = 1044
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1042
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1043
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(s_cypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(s_cypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(s_cypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(s_cypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(s_cypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = s_cypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            _la = self._input.LA(1)
            if not(_la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625937) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(s_cypherParser.AND, 0)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def OR(self):
            return self.getToken(s_cypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(s_cypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(s_cypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(s_cypherParser.DO, 0)

        def FOR(self):
            return self.getToken(s_cypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(s_cypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(s_cypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(s_cypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(s_cypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(s_cypherParser.OF, 0)

        def ADD(self):
            return self.getToken(s_cypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(s_cypherParser.DROP, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = s_cypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            _la = self._input.LA(1)
            if not(((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 128317405001678847) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(s_cypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = s_cypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1050
                self.match(s_cypherParser.SP)


            self.state = 1053
            self.oC_Statement()
            self.state = 1058
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.state = 1055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1054
                    self.match(s_cypherParser.SP)


                self.state = 1057
                self.match(s_cypherParser.T__13)


            self.state = 1061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1060
                self.match(s_cypherParser.SP)


            self.state = 1063
            self.match(s_cypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = s_cypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = s_cypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self.oC_SingleQuery()
            self.state = 1074
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1069
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1068
                        self.match(s_cypherParser.SP)


                    self.state = 1071
                    self.oC_Union() 
                self.state = 1076
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = s_cypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 1089
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1077
                self.match(s_cypherParser.UNION)
                self.state = 1078
                self.match(s_cypherParser.SP)
                self.state = 1079
                self.match(s_cypherParser.ALL)
                self.state = 1081
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1080
                    self.match(s_cypherParser.SP)


                self.state = 1083
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1084
                self.match(s_cypherParser.UNION)
                self.state = 1086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1085
                    self.match(s_cypherParser.SP)


                self.state = 1088
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = s_cypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_oC_SingleQuery)
        try:
            self.state = 1093
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1091
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1092
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = s_cypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 1130
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 1095
                    self.oC_ReadingClause()
                    self.state = 1097
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1096
                        self.match(s_cypherParser.SP)


                    self.state = 1103
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1104
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1111
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 1105
                    self.oC_ReadingClause()
                    self.state = 1107
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1106
                        self.match(s_cypherParser.SP)


                    self.state = 1113
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1114
                self.oC_UpdatingClause()
                self.state = 1121
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,197,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1116
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1115
                            self.match(s_cypherParser.SP)


                        self.state = 1118
                        self.oC_UpdatingClause() 
                    self.state = 1123
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,197,self._ctx)

                self.state = 1128
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                if la_ == 1:
                    self.state = 1125
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1124
                        self.match(s_cypherParser.SP)


                    self.state = 1127
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def s_WithPartQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_WithPartQueryContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_WithPartQueryContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = s_cypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_oC_MultiPartQuery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1132
                    self.s_WithPartQuery()

                else:
                    raise NoViableAltException(self)
                self.state = 1135 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,201,self._ctx)

            self.state = 1137
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(s_cypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = s_cypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_oC_ReadingClause)
        try:
            self.state = 1142
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1139
                self.oC_Match()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1140
                self.oC_Unwind()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1141
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = s_cypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1144
            self.match(s_cypherParser.UNWIND)
            self.state = 1146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1145
                self.match(s_cypherParser.SP)


            self.state = 1148
            self.oC_Expression()
            self.state = 1149
            self.match(s_cypherParser.SP)
            self.state = 1150
            self.match(s_cypherParser.AS)
            self.state = 1151
            self.match(s_cypherParser.SP)
            self.state = 1152
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = s_cypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self.match(s_cypherParser.MERGE)
            self.state = 1156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1155
                self.match(s_cypherParser.SP)


            self.state = 1158
            self.oC_PatternPart()
            self.state = 1163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==135:
                self.state = 1159
                self.match(s_cypherParser.SP)
                self.state = 1160
                self.oC_MergeAction()
                self.state = 1165
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = s_cypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_oC_MergeAction)
        try:
            self.state = 1176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1166
                self.match(s_cypherParser.ON)
                self.state = 1167
                self.match(s_cypherParser.SP)
                self.state = 1168
                self.match(s_cypherParser.MATCH)
                self.state = 1169
                self.match(s_cypherParser.SP)
                self.state = 1170
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1171
                self.match(s_cypherParser.ON)
                self.state = 1172
                self.match(s_cypherParser.SP)
                self.state = 1173
                self.match(s_cypherParser.CREATE)
                self.state = 1174
                self.match(s_cypherParser.SP)
                self.state = 1175
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = s_cypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1178
            self.match(s_cypherParser.CREATE)
            self.state = 1180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1179
                self.match(s_cypherParser.SP)


            self.state = 1182
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = s_cypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self.match(s_cypherParser.SET)
            self.state = 1186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1185
                self.match(s_cypherParser.SP)


            self.state = 1188
            self.oC_SetItem()
            self.state = 1199
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,211,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1190
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1189
                        self.match(s_cypherParser.SP)


                    self.state = 1192
                    self.match(s_cypherParser.T__0)
                    self.state = 1194
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1193
                        self.match(s_cypherParser.SP)


                    self.state = 1196
                    self.oC_SetItem() 
                self.state = 1201
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,211,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = s_cypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 1202
                self.match(s_cypherParser.DETACH)
                self.state = 1203
                self.match(s_cypherParser.SP)


            self.state = 1206
            self.match(s_cypherParser.DELETE)
            self.state = 1208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1207
                self.match(s_cypherParser.SP)


            self.state = 1210
            self.oC_Expression()
            self.state = 1221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1 or _la==135:
                self.state = 1212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1211
                    self.match(s_cypherParser.SP)


                self.state = 1214
                self.match(s_cypherParser.T__0)
                self.state = 1216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1215
                    self.match(s_cypherParser.SP)


                self.state = 1218
                self.oC_Expression()
                self.state = 1223
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = s_cypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1224
            self.match(s_cypherParser.REMOVE)
            self.state = 1225
            self.match(s_cypherParser.SP)
            self.state = 1226
            self.oC_RemoveItem()
            self.state = 1237
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,219,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1228
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1227
                        self.match(s_cypherParser.SP)


                    self.state = 1230
                    self.match(s_cypherParser.T__0)
                    self.state = 1232
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1231
                        self.match(s_cypherParser.SP)


                    self.state = 1234
                    self.oC_RemoveItem() 
                self.state = 1239
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,219,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = s_cypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1240
            self.oC_YieldItem()
            self.state = 1251
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,222,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1242
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1241
                        self.match(s_cypherParser.SP)


                    self.state = 1244
                    self.match(s_cypherParser.T__0)
                    self.state = 1246
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1245
                        self.match(s_cypherParser.SP)


                    self.state = 1248
                    self.oC_YieldItem() 
                self.state = 1253
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,222,self._ctx)

            self.state = 1258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82 or _la==135:
                self.state = 1255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1254
                    self.match(s_cypherParser.SP)


                self.state = 1257
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = s_cypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            self.oC_ProcedureResultField()
            self.state = 1265
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
            if la_ == 1:
                self.state = 1261
                self.match(s_cypherParser.SP)
                self.state = 1262
                self.match(s_cypherParser.AS)
                self.state = 1263
                self.match(s_cypherParser.SP)
                self.state = 1264
                self.oC_Variable()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = s_cypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            self.match(s_cypherParser.WITH)
            self.state = 1268
            self.oC_ProjectionBody()
            self.state = 1273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82 or _la==135:
                self.state = 1270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1269
                    self.match(s_cypherParser.SP)


                self.state = 1272
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = s_cypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1275
            self.match(s_cypherParser.RETURN)
            self.state = 1276
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)




    def oC_ProjectionBody(self):

        localctx = s_cypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1282
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.state = 1279
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1278
                    self.match(s_cypherParser.SP)


                self.state = 1281
                self.match(s_cypherParser.DISTINCT)


            self.state = 1284
            self.match(s_cypherParser.SP)
            self.state = 1285
            self.oC_ProjectionItems()
            self.state = 1288
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.state = 1286
                self.match(s_cypherParser.SP)
                self.state = 1287
                self.oC_Order()


            self.state = 1292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.state = 1290
                self.match(s_cypherParser.SP)
                self.state = 1291
                self.oC_Skip()


            self.state = 1296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.state = 1294
                self.match(s_cypherParser.SP)
                self.state = 1295
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)




    def oC_ProjectionItems(self):

        localctx = s_cypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 1326
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1298
                self.match(s_cypherParser.T__4)
                self.state = 1309
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,235,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1300
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1299
                            self.match(s_cypherParser.SP)


                        self.state = 1302
                        self.match(s_cypherParser.T__0)
                        self.state = 1304
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1303
                            self.match(s_cypherParser.SP)


                        self.state = 1306
                        self.oC_ProjectionItem() 
                    self.state = 1311
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,235,self._ctx)

                pass
            elif token in [6, 8, 11, 19, 20, 26, 48, 57, 86, 92, 93, 94, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1312
                self.oC_ProjectionItem()
                self.state = 1323
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,238,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1314
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1313
                            self.match(s_cypherParser.SP)


                        self.state = 1316
                        self.match(s_cypherParser.T__0)
                        self.state = 1318
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1317
                            self.match(s_cypherParser.SP)


                        self.state = 1320
                        self.oC_ProjectionItem() 
                    self.state = 1325
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,238,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)




    def oC_ProjectionItem(self):

        localctx = s_cypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_oC_ProjectionItem)
        try:
            self.state = 1335
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1328
                self.oC_Expression()
                self.state = 1329
                self.match(s_cypherParser.SP)
                self.state = 1330
                self.match(s_cypherParser.AS)
                self.state = 1331
                self.match(s_cypherParser.SP)
                self.state = 1332
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1334
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = s_cypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1337
            self.match(s_cypherParser.ORDER)
            self.state = 1338
            self.match(s_cypherParser.SP)
            self.state = 1339
            self.match(s_cypherParser.BY)
            self.state = 1340
            self.match(s_cypherParser.SP)
            self.state = 1341
            self.oC_SortItem()
            self.state = 1349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 1342
                self.match(s_cypherParser.T__0)
                self.state = 1344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1343
                    self.match(s_cypherParser.SP)


                self.state = 1346
                self.oC_SortItem()
                self.state = 1351
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = s_cypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1352
            self.match(s_cypherParser.L_SKIP)
            self.state = 1353
            self.match(s_cypherParser.SP)
            self.state = 1354
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = s_cypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1356
            self.match(s_cypherParser.LIMIT)
            self.state = 1357
            self.match(s_cypherParser.SP)
            self.state = 1358
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = s_cypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1360
            self.oC_Expression()
            self.state = 1365
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.state = 1362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1361
                    self.match(s_cypherParser.SP)


                self.state = 1364
                _la = self._input.LA(1)
                if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = s_cypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1367
            self.match(s_cypherParser.WHERE)
            self.state = 1368
            self.match(s_cypherParser.SP)
            self.state = 1369
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = s_cypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1371
            self.oC_PatternPart()
            self.state = 1382
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,247,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1373
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1372
                        self.match(s_cypherParser.SP)


                    self.state = 1375
                    self.match(s_cypherParser.T__0)
                    self.state = 1377
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1376
                        self.match(s_cypherParser.SP)


                    self.state = 1379
                    self.oC_PatternPart() 
                self.state = 1384
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,247,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = s_cypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1385
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = s_cypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 1401
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1387
                self.oC_NodePattern()
                self.state = 1394
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,249,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1389
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1388
                            self.match(s_cypherParser.SP)


                        self.state = 1391
                        self.oC_PatternElementChain() 
                    self.state = 1396
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,249,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1397
                self.match(s_cypherParser.T__7)
                self.state = 1398
                self.oC_PatternElement()
                self.state = 1399
                self.match(s_cypherParser.T__8)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = s_cypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1403
            self.oC_NodePattern()
            self.state = 1408 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1405
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1404
                        self.match(s_cypherParser.SP)


                    self.state = 1407
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 1410 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,252,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = s_cypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1412
            self.oC_RelationshipPattern()
            self.state = 1414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1413
                self.match(s_cypherParser.SP)


            self.state = 1416
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = s_cypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 1482
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1418
                self.oC_LeftArrowHead()
                self.state = 1420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1419
                    self.match(s_cypherParser.SP)


                self.state = 1422
                self.oC_Dash()
                self.state = 1424
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
                if la_ == 1:
                    self.state = 1423
                    self.match(s_cypherParser.SP)


                self.state = 1427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1426
                    self.oC_RelationshipDetail()


                self.state = 1430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1429
                    self.match(s_cypherParser.SP)


                self.state = 1432
                self.oC_Dash()
                self.state = 1434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1433
                    self.match(s_cypherParser.SP)


                self.state = 1436
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1438
                self.oC_LeftArrowHead()
                self.state = 1440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1439
                    self.match(s_cypherParser.SP)


                self.state = 1442
                self.oC_Dash()
                self.state = 1444
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
                if la_ == 1:
                    self.state = 1443
                    self.match(s_cypherParser.SP)


                self.state = 1447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1446
                    self.oC_RelationshipDetail()


                self.state = 1450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1449
                    self.match(s_cypherParser.SP)


                self.state = 1452
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1454
                self.oC_Dash()
                self.state = 1456
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
                if la_ == 1:
                    self.state = 1455
                    self.match(s_cypherParser.SP)


                self.state = 1459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1458
                    self.oC_RelationshipDetail()


                self.state = 1462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1461
                    self.match(s_cypherParser.SP)


                self.state = 1464
                self.oC_Dash()
                self.state = 1466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1465
                    self.match(s_cypherParser.SP)


                self.state = 1468
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1470
                self.oC_Dash()
                self.state = 1472
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
                if la_ == 1:
                    self.state = 1471
                    self.match(s_cypherParser.SP)


                self.state = 1475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1474
                    self.oC_RelationshipDetail()


                self.state = 1478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1477
                    self.match(s_cypherParser.SP)


                self.state = 1480
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = s_cypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_Properties)
        try:
            self.state = 1486
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1484
                self.oC_MapLiteral()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1485
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = s_cypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1488
            self.match(s_cypherParser.T__9)
            self.state = 1490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1489
                self.match(s_cypherParser.SP)


            self.state = 1492
            self.oC_RelTypeName()
            self.state = 1506
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,276,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1494
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1493
                        self.match(s_cypherParser.SP)


                    self.state = 1496
                    self.match(s_cypherParser.T__14)
                    self.state = 1498
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==10:
                        self.state = 1497
                        self.match(s_cypherParser.T__9)


                    self.state = 1501
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1500
                        self.match(s_cypherParser.SP)


                    self.state = 1503
                    self.oC_RelTypeName() 
                self.state = 1508
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,276,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = s_cypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1509
            self.oC_NodeLabel()
            self.state = 1516
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,278,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1511
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1510
                        self.match(s_cypherParser.SP)


                    self.state = 1513
                    self.oC_NodeLabel() 
                self.state = 1518
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,278,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = s_cypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1519
            self.match(s_cypherParser.T__9)
            self.state = 1521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1520
                self.match(s_cypherParser.SP)


            self.state = 1523
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = s_cypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1525
            self.match(s_cypherParser.T__4)
            self.state = 1527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1526
                self.match(s_cypherParser.SP)


            self.state = 1533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                self.state = 1529
                self.oC_IntegerLiteral()
                self.state = 1531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1530
                    self.match(s_cypherParser.SP)




            self.state = 1545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 1535
                self.match(s_cypherParser.T__12)
                self.state = 1537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1536
                    self.match(s_cypherParser.SP)


                self.state = 1543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                    self.state = 1539
                    self.oC_IntegerLiteral()
                    self.state = 1541
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1540
                        self.match(s_cypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = s_cypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1547
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = s_cypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1549
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = s_cypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1551
            self.oC_Atom()
            self.state = 1556 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1553
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1552
                        self.match(s_cypherParser.SP)


                    self.state = 1555
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 1558 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,288,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = s_cypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1560
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = s_cypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1562
            self.oC_XorExpression()
            self.state = 1569
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,289,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1563
                    self.match(s_cypherParser.SP)
                    self.state = 1564
                    self.match(s_cypherParser.OR)
                    self.state = 1565
                    self.match(s_cypherParser.SP)
                    self.state = 1566
                    self.oC_XorExpression() 
                self.state = 1571
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,289,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = s_cypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1572
            self.oC_AndExpression()
            self.state = 1579
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,290,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1573
                    self.match(s_cypherParser.SP)
                    self.state = 1574
                    self.match(s_cypherParser.XOR)
                    self.state = 1575
                    self.match(s_cypherParser.SP)
                    self.state = 1576
                    self.oC_AndExpression() 
                self.state = 1581
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,290,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = s_cypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1582
            self.oC_NotExpression()
            self.state = 1589
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,291,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1583
                    self.match(s_cypherParser.SP)
                    self.state = 1584
                    self.match(s_cypherParser.AND)
                    self.state = 1585
                    self.match(s_cypherParser.SP)
                    self.state = 1586
                    self.oC_NotExpression() 
                self.state = 1591
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,291,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = s_cypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1592
                self.match(s_cypherParser.NOT)
                self.state = 1594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1593
                    self.match(s_cypherParser.SP)


                self.state = 1600
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1601
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_StringListNullPredicateExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,i)


        def s_ComparisonOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ComparisonOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ComparisonOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = s_cypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1603
            self.oC_StringListNullPredicateExpression()
            self.state = 1615
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,296,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1605
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1604
                        self.match(s_cypherParser.SP)


                    self.state = 1607
                    self.s_ComparisonOperator()
                    self.state = 1609
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1608
                        self.match(s_cypherParser.SP)


                    self.state = 1611
                    self.oC_StringListNullPredicateExpression() 
                self.state = 1617
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,296,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringPredicateExpression" ):
                listener.enterOC_StringPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringPredicateExpression" ):
                listener.exitOC_StringPredicateExpression(self)




    def oC_StringPredicateExpression(self):

        localctx = s_cypherParser.OC_StringPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_StringPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
            if la_ == 1:
                self.state = 1618
                self.match(s_cypherParser.SP)
                self.state = 1619
                self.match(s_cypherParser.STARTS)
                self.state = 1620
                self.match(s_cypherParser.SP)
                self.state = 1621
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1622
                self.match(s_cypherParser.SP)
                self.state = 1623
                self.match(s_cypherParser.ENDS)
                self.state = 1624
                self.match(s_cypherParser.SP)
                self.state = 1625
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1626
                self.match(s_cypherParser.SP)
                self.state = 1627
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 1631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1630
                self.match(s_cypherParser.SP)


            self.state = 1633
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListPredicateExpression" ):
                listener.enterOC_ListPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListPredicateExpression" ):
                listener.exitOC_ListPredicateExpression(self)




    def oC_ListPredicateExpression(self):

        localctx = s_cypherParser.OC_ListPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_ListPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1635
            self.match(s_cypherParser.SP)
            self.state = 1636
            self.match(s_cypherParser.IN)
            self.state = 1638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1637
                self.match(s_cypherParser.SP)


            self.state = 1640
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullPredicateExpression" ):
                listener.enterOC_NullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullPredicateExpression" ):
                listener.exitOC_NullPredicateExpression(self)




    def oC_NullPredicateExpression(self):

        localctx = s_cypherParser.OC_NullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_NullPredicateExpression)
        try:
            self.state = 1652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1642
                self.match(s_cypherParser.SP)
                self.state = 1643
                self.match(s_cypherParser.IS)
                self.state = 1644
                self.match(s_cypherParser.SP)
                self.state = 1645
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1646
                self.match(s_cypherParser.SP)
                self.state = 1647
                self.match(s_cypherParser.IS)
                self.state = 1648
                self.match(s_cypherParser.SP)
                self.state = 1649
                self.match(s_cypherParser.NOT)
                self.state = 1650
                self.match(s_cypherParser.SP)
                self.state = 1651
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def s_AddOrSubtractOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AddOrSubtractOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1654
            self.oC_MultiplyDivideModuloExpression()
            self.state = 1666
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,303,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1656
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1655
                        self.match(s_cypherParser.SP)


                    self.state = 1658
                    self.s_AddOrSubtractOperator()
                    self.state = 1660
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1659
                        self.match(s_cypherParser.SP)


                    self.state = 1662
                    self.oC_MultiplyDivideModuloExpression() 
                self.state = 1668
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,303,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MultiplyDivideModuloOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MultiplyDivideModuloOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MultiplyDivideModuloOperator" ):
                listener.enterS_MultiplyDivideModuloOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MultiplyDivideModuloOperator" ):
                listener.exitS_MultiplyDivideModuloOperator(self)




    def s_MultiplyDivideModuloOperator(self):

        localctx = s_cypherParser.S_MultiplyDivideModuloOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_s_MultiplyDivideModuloOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1669
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 196640) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PowerOfOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PowerOfOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PowerOfOperator" ):
                listener.enterS_PowerOfOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PowerOfOperator" ):
                listener.exitS_PowerOfOperator(self)




    def s_PowerOfOperator(self):

        localctx = s_cypherParser.S_PowerOfOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_s_PowerOfOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1671
            self.match(s_cypherParser.T__17)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AddOrSubtractOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AddOrSubtractOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AddOrSubtractOperator" ):
                listener.enterS_AddOrSubtractOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AddOrSubtractOperator" ):
                listener.exitS_AddOrSubtractOperator(self)




    def s_AddOrSubtractOperator(self):

        localctx = s_cypherParser.S_AddOrSubtractOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_s_AddOrSubtractOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1673
            _la = self._input.LA(1)
            if not(_la==19 or _la==20):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ComparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ComparisonOperator" ):
                listener.enterS_ComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ComparisonOperator" ):
                listener.exitS_ComparisonOperator(self)




    def s_ComparisonOperator(self):

        localctx = s_cypherParser.S_ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_s_ComparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1675
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 65011716) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PowerOfExpressionContext,i)


        def s_MultiplyDivideModuloOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MultiplyDivideModuloOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MultiplyDivideModuloOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = s_cypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1677
            self.oC_PowerOfExpression()
            self.state = 1689
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,306,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1679
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1678
                        self.match(s_cypherParser.SP)


                    self.state = 1681
                    self.s_MultiplyDivideModuloOperator()
                    self.state = 1683
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1682
                        self.match(s_cypherParser.SP)


                    self.state = 1685
                    self.oC_PowerOfExpression() 
                self.state = 1691
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,306,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def s_PowerOfOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PowerOfOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PowerOfOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = s_cypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1692
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 1704
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,309,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1694
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1693
                        self.match(s_cypherParser.SP)


                    self.state = 1696
                    self.s_PowerOfOperator()
                    self.state = 1698
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1697
                        self.match(s_cypherParser.SP)


                    self.state = 1700
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 1706
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,309,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ListOperatorExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListOperatorExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.state = 1713
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 8, 11, 26, 48, 57, 92, 93, 94, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1707
                self.oC_ListOperatorExpression()
                pass
            elif token in [19, 20]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1708
                _la = self._input.LA(1)
                if not(_la==19 or _la==20):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1709
                    self.match(s_cypherParser.SP)


                self.state = 1712
                self.oC_ListOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = s_cypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1715
            self.match(s_cypherParser.T__3)
            self.state = 1717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1716
                self.match(s_cypherParser.SP)


            self.state = 1719
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternComprehensionContext,0)


        def oC_Quantifier(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QuantifierContext,0)


        def oC_PatternPredicate(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPredicateContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionInvocationContext,0)


        def oC_ExistentialSubquery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExistentialSubqueryContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = s_cypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 1745
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1721
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1722
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1723
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1724
                self.match(s_cypherParser.COUNT)
                self.state = 1726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1725
                    self.match(s_cypherParser.SP)


                self.state = 1728
                self.match(s_cypherParser.T__7)
                self.state = 1730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1729
                    self.match(s_cypherParser.SP)


                self.state = 1732
                self.match(s_cypherParser.T__4)
                self.state = 1734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1733
                    self.match(s_cypherParser.SP)


                self.state = 1736
                self.match(s_cypherParser.T__8)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1737
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1738
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1739
                self.oC_Quantifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1740
                self.oC_PatternPredicate()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1741
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1742
                self.oC_FunctionInvocation()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1743
                self.oC_ExistentialSubquery()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1744
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def oC_CaseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_CaseAlternativeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = s_cypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1769
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
            if la_ == 1:
                self.state = 1747
                self.match(s_cypherParser.CASE)
                self.state = 1752 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1749
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1748
                            self.match(s_cypherParser.SP)


                        self.state = 1751
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1754 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,318,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1756
                self.match(s_cypherParser.CASE)
                self.state = 1758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1757
                    self.match(s_cypherParser.SP)


                self.state = 1760
                self.oC_Expression()
                self.state = 1765 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1762
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1761
                            self.match(s_cypherParser.SP)


                        self.state = 1764
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1767 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,321,self._ctx)

                pass


            self.state = 1779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,325,self._ctx)
            if la_ == 1:
                self.state = 1772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1771
                    self.match(s_cypherParser.SP)


                self.state = 1774
                self.match(s_cypherParser.ELSE)
                self.state = 1776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1775
                    self.match(s_cypherParser.SP)


                self.state = 1778
                self.oC_Expression()


            self.state = 1782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1781
                self.match(s_cypherParser.SP)


            self.state = 1784
            self.match(s_cypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternative" ):
                listener.enterOC_CaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternative" ):
                listener.exitOC_CaseAlternative(self)




    def oC_CaseAlternative(self):

        localctx = s_cypherParser.OC_CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_oC_CaseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1786
            self.match(s_cypherParser.WHEN)
            self.state = 1788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1787
                self.match(s_cypherParser.SP)


            self.state = 1790
            self.oC_Expression()
            self.state = 1792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1791
                self.match(s_cypherParser.SP)


            self.state = 1794
            self.match(s_cypherParser.THEN)
            self.state = 1796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1795
                self.match(s_cypherParser.SP)


            self.state = 1798
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = s_cypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1800
            self.match(s_cypherParser.T__10)
            self.state = 1802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1801
                self.match(s_cypherParser.SP)


            self.state = 1804
            self.oC_FilterExpression()
            self.state = 1813
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
            if la_ == 1:
                self.state = 1806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1805
                    self.match(s_cypherParser.SP)


                self.state = 1808
                self.match(s_cypherParser.T__14)
                self.state = 1810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1809
                    self.match(s_cypherParser.SP)


                self.state = 1812
                self.oC_Expression()


            self.state = 1816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1815
                self.match(s_cypherParser.SP)


            self.state = 1818
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = s_cypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1820
            self.match(s_cypherParser.T__10)
            self.state = 1822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1821
                self.match(s_cypherParser.SP)


            self.state = 1832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625937) != 0):
                self.state = 1824
                self.oC_Variable()
                self.state = 1826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1825
                    self.match(s_cypherParser.SP)


                self.state = 1828
                self.match(s_cypherParser.T__1)
                self.state = 1830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1829
                    self.match(s_cypherParser.SP)




            self.state = 1834
            self.oC_RelationshipsPattern()
            self.state = 1836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1835
                self.match(s_cypherParser.SP)


            self.state = 1842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 1838
                self.oC_Where()
                self.state = 1840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1839
                    self.match(s_cypherParser.SP)




            self.state = 1844
            self.match(s_cypherParser.T__14)
            self.state = 1846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1845
                self.match(s_cypherParser.SP)


            self.state = 1848
            self.oC_Expression()
            self.state = 1850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1849
                self.match(s_cypherParser.SP)


            self.state = 1852
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Quantifier" ):
                listener.enterOC_Quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Quantifier" ):
                listener.exitOC_Quantifier(self)




    def oC_Quantifier(self):

        localctx = s_cypherParser.OC_QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_oC_Quantifier)
        self._la = 0 # Token type
        try:
            self.state = 1910
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1854
                self.match(s_cypherParser.ALL)
                self.state = 1856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1855
                    self.match(s_cypherParser.SP)


                self.state = 1858
                self.match(s_cypherParser.T__7)
                self.state = 1860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1859
                    self.match(s_cypherParser.SP)


                self.state = 1862
                self.oC_FilterExpression()
                self.state = 1864
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1863
                    self.match(s_cypherParser.SP)


                self.state = 1866
                self.match(s_cypherParser.T__8)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1868
                self.match(s_cypherParser.ANY)
                self.state = 1870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1869
                    self.match(s_cypherParser.SP)


                self.state = 1872
                self.match(s_cypherParser.T__7)
                self.state = 1874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1873
                    self.match(s_cypherParser.SP)


                self.state = 1876
                self.oC_FilterExpression()
                self.state = 1878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1877
                    self.match(s_cypherParser.SP)


                self.state = 1880
                self.match(s_cypherParser.T__8)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1882
                self.match(s_cypherParser.NONE)
                self.state = 1884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1883
                    self.match(s_cypherParser.SP)


                self.state = 1886
                self.match(s_cypherParser.T__7)
                self.state = 1888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1887
                    self.match(s_cypherParser.SP)


                self.state = 1890
                self.oC_FilterExpression()
                self.state = 1892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1891
                    self.match(s_cypherParser.SP)


                self.state = 1894
                self.match(s_cypherParser.T__8)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1896
                self.match(s_cypherParser.SINGLE)
                self.state = 1898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1897
                    self.match(s_cypherParser.SP)


                self.state = 1900
                self.match(s_cypherParser.T__7)
                self.state = 1902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1901
                    self.match(s_cypherParser.SP)


                self.state = 1904
                self.oC_FilterExpression()
                self.state = 1906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1905
                    self.match(s_cypherParser.SP)


                self.state = 1908
                self.match(s_cypherParser.T__8)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPredicate" ):
                listener.enterOC_PatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPredicate" ):
                listener.exitOC_PatternPredicate(self)




    def oC_PatternPredicate(self):

        localctx = s_cypherParser.OC_PatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_oC_PatternPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1912
            self.oC_RelationshipsPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = s_cypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1914
            self.match(s_cypherParser.T__7)
            self.state = 1916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1915
                self.match(s_cypherParser.SP)


            self.state = 1918
            self.oC_Expression()
            self.state = 1920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1919
                self.match(s_cypherParser.SP)


            self.state = 1922
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = s_cypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1924
            self.oC_Variable()
            self.state = 1925
            self.match(s_cypherParser.SP)
            self.state = 1926
            self.match(s_cypherParser.IN)
            self.state = 1927
            self.match(s_cypherParser.SP)
            self.state = 1928
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def s_FunctionInvocationExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_FunctionInvocationExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_FunctionInvocationExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = s_cypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1930
            self.oC_FunctionName()
            self.state = 1932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1931
                self.match(s_cypherParser.SP)


            self.state = 1934
            self.match(s_cypherParser.T__7)
            self.state = 1936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1935
                self.match(s_cypherParser.SP)


            self.state = 1942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 1938
                self.match(s_cypherParser.DISTINCT)
                self.state = 1940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1939
                    self.match(s_cypherParser.SP)




            self.state = 1961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663121250624) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394345409) != 0):
                self.state = 1944
                self.s_FunctionInvocationExpression()
                self.state = 1946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1945
                    self.match(s_cypherParser.SP)


                self.state = 1958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 1948
                    self.match(s_cypherParser.T__0)
                    self.state = 1950
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1949
                        self.match(s_cypherParser.SP)


                    self.state = 1952
                    self.s_FunctionInvocationExpression()
                    self.state = 1954
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1953
                        self.match(s_cypherParser.SP)


                    self.state = 1960
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1963
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_FunctionInvocationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_FunctionInvocationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_FunctionInvocationExpression" ):
                listener.enterS_FunctionInvocationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_FunctionInvocationExpression" ):
                listener.exitS_FunctionInvocationExpression(self)




    def s_FunctionInvocationExpression(self):

        localctx = s_cypherParser.S_FunctionInvocationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_s_FunctionInvocationExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1965
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = s_cypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_oC_FunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1967
            self.oC_Namespace()
            self.state = 1968
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1970
            self.oC_ProcedureName()
            self.state = 1972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1971
                self.match(s_cypherParser.SP)


            self.state = 1974
            self.match(s_cypherParser.T__7)
            self.state = 1976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1975
                self.match(s_cypherParser.SP)


            self.state = 1995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663121250624) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394345409) != 0):
                self.state = 1978
                self.oC_Expression()
                self.state = 1980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1979
                    self.match(s_cypherParser.SP)


                self.state = 1992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 1982
                    self.match(s_cypherParser.T__0)
                    self.state = 1984
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1983
                        self.match(s_cypherParser.SP)


                    self.state = 1986
                    self.oC_Expression()
                    self.state = 1988
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1987
                        self.match(s_cypherParser.SP)


                    self.state = 1994
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1997
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1999
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = s_cypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2001
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = s_cypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2003
            self.oC_Namespace()
            self.state = 2004
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = s_cypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2011
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,375,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2006
                    self.oC_SymbolicName()
                    self.state = 2007
                    self.match(s_cypherParser.T__3) 
                self.state = 2013
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,375,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = s_cypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2014
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_ListLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListLiteralContext,0)


        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = s_cypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_oC_Literal)
        try:
            self.state = 2022
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2016
                self.oC_BooleanLiteral()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2017
                self.match(s_cypherParser.NULL)
                pass
            elif token in [105, 106, 107, 115, 116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2018
                self.oC_NumberLiteral()
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2019
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2020
                self.oC_ListLiteral()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2021
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = s_cypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2024
            _la = self._input.LA(1)
            if not(_la==103 or _la==104):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = s_cypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_oC_NumberLiteral)
        try:
            self.state = 2028
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115, 116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2026
                self.oC_DoubleLiteral()
                pass
            elif token in [105, 106, 107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2027
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(s_cypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(s_cypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = s_cypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2030
            _la = self._input.LA(1)
            if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(s_cypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(s_cypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = s_cypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2032
            _la = self._input.LA(1)
            if not(_la==115 or _la==116):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_ListLiteralExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ListLiteralExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ListLiteralExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = s_cypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2034
            self.match(s_cypherParser.T__10)
            self.state = 2036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2035
                self.match(s_cypherParser.SP)


            self.state = 2055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663121250624) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394345409) != 0):
                self.state = 2038
                self.s_ListLiteralExpression()
                self.state = 2040
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2039
                    self.match(s_cypherParser.SP)


                self.state = 2052
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 2042
                    self.match(s_cypherParser.T__0)
                    self.state = 2044
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2043
                        self.match(s_cypherParser.SP)


                    self.state = 2046
                    self.s_ListLiteralExpression()
                    self.state = 2048
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2047
                        self.match(s_cypherParser.SP)


                    self.state = 2054
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2057
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ListLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ListLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ListLiteralExpression" ):
                listener.enterS_ListLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ListLiteralExpression" ):
                listener.exitS_ListLiteralExpression(self)




    def s_ListLiteralExpression(self):

        localctx = s_cypherParser.S_ListLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_s_ListLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2059
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_MapKeyValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MapKeyValueContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MapKeyValueContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = s_cypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2061
            self.match(s_cypherParser.T__5)
            self.state = 2063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2062
                self.match(s_cypherParser.SP)


            self.state = 2076
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 2065
                self.s_MapKeyValue()
                self.state = 2073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 2066
                    self.match(s_cypherParser.T__0)
                    self.state = 2068
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2067
                        self.match(s_cypherParser.SP)


                    self.state = 2070
                    self.s_MapKeyValue()
                    self.state = 2075
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2078
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MapKeyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MapKeyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MapKeyValue" ):
                listener.enterS_MapKeyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MapKeyValue" ):
                listener.exitS_MapKeyValue(self)




    def s_MapKeyValue(self):

        localctx = s_cypherParser.S_MapKeyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_s_MapKeyValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2080
            self.oC_PropertyKeyName()
            self.state = 2082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2081
                self.match(s_cypherParser.SP)


            self.state = 2084
            self.match(s_cypherParser.T__9)
            self.state = 2086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2085
                self.match(s_cypherParser.SP)


            self.state = 2088
            self.oC_Expression()
            self.state = 2090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2089
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = s_cypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2092
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = s_cypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2094
            self.match(s_cypherParser.T__25)
            self.state = 2097
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 93, 97, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 2095
                self.oC_SymbolicName()
                pass
            elif token in [106]:
                self.state = 2096
                self.match(s_cypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = s_cypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_oC_SchemaName)
        try:
            self.state = 2101
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,392,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2099
                self.oC_SymbolicName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2100
                self.oC_ReservedWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = s_cypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2103
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2017460224) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = s_cypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2105
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32229031936) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = s_cypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2107
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70334385487872) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





