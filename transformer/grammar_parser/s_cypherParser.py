# Generated from .\s_cypher.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,137,2284,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,1,0,
        1,0,1,0,3,0,332,8,0,1,1,1,1,3,1,336,8,1,1,1,1,1,3,1,340,8,1,1,1,
        1,1,3,1,344,8,1,1,1,1,1,3,1,348,8,1,3,1,350,8,1,1,1,3,1,353,8,1,
        1,1,3,1,356,8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,364,8,2,1,2,3,2,367,
        8,2,1,2,3,2,370,8,2,1,3,1,3,3,3,374,8,3,1,3,1,3,1,3,1,3,3,3,380,
        8,3,1,3,3,3,383,8,3,1,3,1,3,1,3,1,3,1,3,3,3,390,8,3,1,3,3,3,393,
        8,3,1,3,1,3,1,3,3,3,398,8,3,1,3,1,3,1,3,1,3,3,3,404,8,3,1,3,3,3,
        407,8,3,1,3,1,3,1,3,3,3,412,8,3,1,3,1,3,3,3,416,8,3,1,3,1,3,1,3,
        1,3,3,3,422,8,3,1,3,1,3,3,3,426,8,3,1,3,1,3,1,3,1,3,3,3,432,8,3,
        1,3,1,3,3,3,436,8,3,1,3,1,3,1,3,1,3,3,3,442,8,3,1,3,1,3,3,3,446,
        8,3,1,3,1,3,1,3,1,3,3,3,452,8,3,1,3,1,3,3,3,456,8,3,1,4,1,4,3,4,
        460,8,4,1,4,1,4,1,5,1,5,3,5,466,8,5,1,5,3,5,469,8,5,1,6,1,6,3,6,
        473,8,6,1,6,1,6,1,7,1,7,3,7,479,8,7,1,7,3,7,482,8,7,1,8,1,8,3,8,
        486,8,8,1,8,1,8,3,8,490,8,8,1,8,1,8,3,8,494,8,8,1,8,5,8,497,8,8,
        10,8,12,8,500,9,8,1,9,1,9,1,9,1,9,3,9,506,8,9,1,9,1,9,1,9,3,9,511,
        8,9,1,10,1,10,3,10,515,8,10,1,10,1,10,3,10,519,8,10,1,10,1,10,3,
        10,523,8,10,1,10,1,10,3,10,527,8,10,1,10,5,10,530,8,10,10,10,12,
        10,533,9,10,1,11,1,11,1,11,1,11,3,11,539,8,11,1,11,1,11,1,11,3,11,
        544,8,11,1,12,1,12,3,12,548,8,12,1,12,1,12,1,13,1,13,3,13,554,8,
        13,1,13,1,13,1,14,1,14,3,14,560,8,14,1,15,1,15,3,15,564,8,15,1,15,
        1,15,1,16,1,16,3,16,570,8,16,1,16,1,16,1,17,1,17,3,17,576,8,17,1,
        17,1,17,3,17,580,8,17,1,17,1,17,1,17,1,17,3,17,586,8,17,1,17,1,17,
        3,17,590,8,17,1,17,1,17,1,17,3,17,595,8,17,1,18,1,18,3,18,599,8,
        18,1,18,1,18,3,18,603,8,18,1,18,1,18,3,18,607,8,18,1,18,1,18,1,19,
        1,19,3,19,613,8,19,1,19,1,19,3,19,617,8,19,1,19,1,19,1,20,1,20,3,
        20,623,8,20,1,20,1,20,3,20,627,8,20,3,20,629,8,20,1,20,1,20,3,20,
        633,8,20,3,20,635,8,20,1,20,1,20,3,20,639,8,20,3,20,641,8,20,1,20,
        1,20,3,20,645,8,20,3,20,647,8,20,1,20,1,20,1,21,1,21,3,21,653,8,
        21,1,22,1,22,3,22,657,8,22,1,22,1,22,1,22,1,22,1,22,3,22,664,8,22,
        1,22,1,22,1,22,1,22,5,22,670,8,22,10,22,12,22,673,9,22,3,22,675,
        8,22,1,22,1,22,1,23,1,23,3,23,681,8,23,1,23,1,23,3,23,685,8,23,3,
        23,687,8,23,1,24,3,24,690,8,24,1,24,1,24,3,24,694,8,24,1,24,1,24,
        3,24,698,8,24,3,24,700,8,24,1,25,1,25,3,25,704,8,25,1,25,1,25,3,
        25,708,8,25,3,25,710,8,25,1,25,1,25,3,25,714,8,25,3,25,716,8,25,
        1,25,3,25,719,8,25,1,25,1,25,3,25,723,8,25,3,25,725,8,25,1,25,1,
        25,3,25,729,8,25,3,25,731,8,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,
        3,26,740,8,26,1,27,1,27,3,27,744,8,27,1,27,1,27,5,27,748,8,27,10,
        27,12,27,751,9,27,1,28,3,28,754,8,28,1,28,1,28,1,28,1,28,1,29,3,
        29,761,8,29,1,29,1,29,3,29,765,8,29,1,29,1,29,3,29,769,8,29,1,29,
        1,29,1,30,1,30,1,31,1,31,1,32,1,32,3,32,779,8,32,1,32,4,32,782,8,
        32,11,32,12,32,783,1,32,3,32,787,8,32,1,32,3,32,790,8,32,3,32,792,
        8,32,1,32,3,32,795,8,32,1,32,1,32,1,33,1,33,3,33,801,8,33,1,33,5,
        33,804,8,33,10,33,12,33,807,9,33,1,34,1,34,1,34,1,34,1,34,1,35,1,
        35,3,35,816,8,35,1,35,1,35,3,35,820,8,35,1,35,1,35,3,35,824,8,35,
        1,35,1,35,3,35,828,8,35,1,35,1,35,3,35,832,8,35,1,35,3,35,835,8,
        35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,38,1,
        38,5,38,850,8,38,10,38,12,38,853,9,38,1,39,1,39,1,39,1,39,1,39,5,
        39,860,8,39,10,39,12,39,863,9,39,1,40,1,40,1,40,1,40,1,40,5,40,870,
        8,40,10,40,12,40,873,9,40,1,41,1,41,3,41,877,8,41,5,41,879,8,41,
        10,41,12,41,882,9,41,1,41,1,41,1,42,1,42,3,42,888,8,42,1,42,1,42,
        3,42,892,8,42,1,42,1,42,5,42,896,8,42,10,42,12,42,899,9,42,1,43,
        1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,47,1,47,3,47,
        914,8,47,1,48,1,48,3,48,918,8,48,1,48,1,48,3,48,922,8,48,1,48,1,
        48,1,48,3,48,927,8,48,1,48,1,48,3,48,931,8,48,1,48,1,48,5,48,935,
        8,48,10,48,12,48,938,9,48,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,955,8,50,1,50,3,50,958,8,
        50,1,50,1,50,1,51,1,51,1,51,3,51,965,8,51,1,51,1,51,1,52,1,52,1,
        52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,979,8,52,1,53,1,53,3,
        53,983,8,53,1,53,1,53,3,53,987,8,53,1,53,1,53,1,53,3,53,992,8,53,
        1,53,1,53,3,53,996,8,53,1,53,1,53,1,53,3,53,1001,8,53,1,53,1,53,
        3,53,1005,8,53,1,53,1,53,5,53,1009,8,53,10,53,12,53,1012,9,53,1,
        54,1,54,3,54,1016,8,54,1,54,1,54,3,54,1020,8,54,1,54,1,54,5,54,1024,
        8,54,10,54,12,54,1027,9,54,1,55,1,55,1,55,3,55,1032,8,55,1,55,3,
        55,1035,8,55,1,56,1,56,3,56,1039,8,56,1,56,1,56,5,56,1043,8,56,10,
        56,12,56,1046,9,56,1,57,1,57,3,57,1050,8,57,1,57,5,57,1053,8,57,
        10,57,12,57,1056,9,57,1,57,3,57,1059,8,57,1,57,3,57,1062,8,57,1,
        58,1,58,3,58,1066,8,58,1,58,4,58,1069,8,58,11,58,12,58,1070,1,58,
        3,58,1074,8,58,1,58,3,58,1077,8,58,3,58,1079,8,58,1,58,3,58,1082,
        8,58,1,58,1,58,1,59,3,59,1087,8,59,1,59,1,59,1,59,1,59,1,60,3,60,
        1094,8,60,1,60,1,60,3,60,1098,8,60,1,60,1,60,3,60,1102,8,60,1,60,
        1,60,1,61,1,61,1,62,1,62,1,63,1,63,3,63,1112,8,63,1,64,1,64,1,65,
        1,65,1,66,3,66,1119,8,66,1,66,1,66,3,66,1123,8,66,1,66,3,66,1126,
        8,66,1,66,3,66,1129,8,66,1,66,1,66,1,67,1,67,1,68,1,68,3,68,1137,
        8,68,1,68,5,68,1140,8,68,10,68,12,68,1143,9,68,1,69,1,69,1,69,1,
        69,3,69,1149,8,69,1,69,1,69,1,69,3,69,1154,8,69,1,69,3,69,1157,8,
        69,1,70,1,70,3,70,1161,8,70,1,71,1,71,3,71,1165,8,71,5,71,1167,8,
        71,10,71,12,71,1170,9,71,1,71,1,71,1,71,3,71,1175,8,71,5,71,1177,
        8,71,10,71,12,71,1180,9,71,1,71,1,71,3,71,1184,8,71,1,71,5,71,1187,
        8,71,10,71,12,71,1190,9,71,1,71,3,71,1193,8,71,1,71,3,71,1196,8,
        71,3,71,1198,8,71,1,72,4,72,1201,8,72,11,72,12,72,1202,1,72,1,72,
        1,73,1,73,3,73,1209,8,73,5,73,1211,8,73,10,73,12,73,1214,9,73,1,
        73,1,73,3,73,1218,8,73,5,73,1220,8,73,10,73,12,73,1223,9,73,1,73,
        1,73,3,73,1227,8,73,1,74,1,74,1,74,3,74,1232,8,74,1,75,1,75,3,75,
        1236,8,75,1,75,1,75,1,75,1,75,1,75,1,75,1,76,1,76,3,76,1246,8,76,
        1,76,1,76,1,76,5,76,1251,8,76,10,76,12,76,1254,9,76,1,77,1,77,1,
        77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1266,8,77,1,78,1,78,3,
        78,1270,8,78,1,78,1,78,1,79,1,79,3,79,1276,8,79,1,79,1,79,3,79,1280,
        8,79,1,79,1,79,3,79,1284,8,79,1,79,5,79,1287,8,79,10,79,12,79,1290,
        9,79,1,80,1,80,1,80,1,80,3,80,1296,8,80,1,80,1,80,3,80,1300,8,80,
        1,80,5,80,1303,8,80,10,80,12,80,1306,9,80,1,81,1,81,1,81,1,81,3,
        81,1312,8,81,1,82,1,82,1,82,1,82,3,82,1318,8,82,1,82,1,82,1,82,3,
        82,1323,8,82,1,83,1,83,1,83,1,83,3,83,1329,8,83,1,83,3,83,1332,8,
        83,1,83,1,83,1,83,1,83,3,83,1338,8,83,3,83,1340,8,83,1,84,1,84,3,
        84,1344,8,84,1,84,1,84,3,84,1348,8,84,1,84,5,84,1351,8,84,10,84,
        12,84,1354,9,84,1,84,3,84,1357,8,84,1,84,3,84,1360,8,84,1,85,1,85,
        1,85,1,85,1,85,3,85,1367,8,85,1,86,1,86,1,86,3,86,1372,8,86,1,86,
        3,86,1375,8,86,1,87,1,87,1,87,1,88,3,88,1381,8,88,1,88,3,88,1384,
        8,88,1,88,1,88,1,88,1,88,3,88,1390,8,88,1,88,1,88,3,88,1394,8,88,
        1,88,1,88,3,88,1398,8,88,1,89,1,89,3,89,1402,8,89,1,89,1,89,3,89,
        1406,8,89,1,89,5,89,1409,8,89,10,89,12,89,1412,9,89,1,89,1,89,3,
        89,1416,8,89,1,89,1,89,3,89,1420,8,89,1,89,5,89,1423,8,89,10,89,
        12,89,1426,9,89,3,89,1428,8,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
        3,90,1437,8,90,1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,1446,8,91,
        1,91,5,91,1449,8,91,10,91,12,91,1452,9,91,1,92,1,92,1,92,1,92,1,
        93,1,93,1,93,1,93,1,94,1,94,3,94,1464,8,94,1,94,3,94,1467,8,94,1,
        95,1,95,1,95,1,95,1,96,1,96,3,96,1475,8,96,1,96,1,96,3,96,1479,8,
        96,1,96,5,96,1482,8,96,10,96,12,96,1485,9,96,1,97,1,97,1,98,1,98,
        3,98,1491,8,98,1,98,5,98,1494,8,98,10,98,12,98,1497,9,98,1,98,1,
        98,1,98,1,98,3,98,1503,8,98,1,99,1,99,3,99,1507,8,99,1,99,4,99,1510,
        8,99,11,99,12,99,1511,1,100,1,100,3,100,1516,8,100,1,100,1,100,1,
        101,1,101,3,101,1522,8,101,1,101,1,101,3,101,1526,8,101,1,101,3,
        101,1529,8,101,1,101,3,101,1532,8,101,1,101,1,101,3,101,1536,8,101,
        1,101,1,101,1,101,1,101,3,101,1542,8,101,1,101,1,101,3,101,1546,
        8,101,1,101,3,101,1549,8,101,1,101,3,101,1552,8,101,1,101,1,101,
        1,101,1,101,3,101,1558,8,101,1,101,3,101,1561,8,101,1,101,3,101,
        1564,8,101,1,101,1,101,3,101,1568,8,101,1,101,1,101,1,101,1,101,
        3,101,1574,8,101,1,101,3,101,1577,8,101,1,101,3,101,1580,8,101,1,
        101,1,101,3,101,1584,8,101,1,102,1,102,3,102,1588,8,102,1,103,1,
        103,3,103,1592,8,103,1,103,1,103,3,103,1596,8,103,1,103,1,103,3,
        103,1600,8,103,1,103,3,103,1603,8,103,1,103,5,103,1606,8,103,10,
        103,12,103,1609,9,103,1,104,1,104,3,104,1613,8,104,1,104,5,104,1616,
        8,104,10,104,12,104,1619,9,104,1,105,1,105,3,105,1623,8,105,1,105,
        1,105,1,106,1,106,3,106,1629,8,106,1,106,1,106,3,106,1633,8,106,
        3,106,1635,8,106,1,106,1,106,3,106,1639,8,106,1,106,1,106,3,106,
        1643,8,106,3,106,1645,8,106,3,106,1647,8,106,1,107,1,107,1,108,1,
        108,1,109,1,109,3,109,1655,8,109,1,109,4,109,1658,8,109,11,109,12,
        109,1659,1,110,1,110,1,111,1,111,1,111,1,111,1,111,5,111,1669,8,
        111,10,111,12,111,1672,9,111,1,112,1,112,1,112,1,112,1,112,5,112,
        1679,8,112,10,112,12,112,1682,9,112,1,113,1,113,1,113,1,113,1,113,
        5,113,1689,8,113,10,113,12,113,1692,9,113,1,114,1,114,3,114,1696,
        8,114,5,114,1698,8,114,10,114,12,114,1701,9,114,1,114,1,114,1,115,
        1,115,3,115,1707,8,115,1,115,1,115,3,115,1711,8,115,1,115,1,115,
        5,115,1715,8,115,10,115,12,115,1718,9,115,1,116,1,116,1,116,1,116,
        1,116,1,116,1,116,1,116,1,116,1,116,3,116,1730,8,116,1,116,3,116,
        1733,8,116,1,116,1,116,1,117,1,117,1,117,3,117,1740,8,117,1,117,
        1,117,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        3,118,1754,8,118,1,119,1,119,3,119,1758,8,119,1,119,1,119,3,119,
        1762,8,119,1,119,1,119,1,119,3,119,1767,8,119,1,119,1,119,3,119,
        1771,8,119,1,119,1,119,5,119,1775,8,119,10,119,12,119,1778,9,119,
        1,120,1,120,1,121,1,121,1,122,1,122,1,123,1,123,1,124,1,124,3,124,
        1790,8,124,1,124,1,124,3,124,1794,8,124,1,124,1,124,1,124,3,124,
        1799,8,124,1,124,1,124,3,124,1803,8,124,1,124,1,124,1,124,3,124,
        1808,8,124,1,124,1,124,3,124,1812,8,124,1,124,1,124,5,124,1816,8,
        124,10,124,12,124,1819,9,124,1,125,1,125,3,125,1823,8,125,1,125,
        1,125,3,125,1827,8,125,1,125,1,125,5,125,1831,8,125,10,125,12,125,
        1834,9,125,1,126,1,126,1,126,3,126,1839,8,126,1,126,3,126,1842,8,
        126,1,127,1,127,3,127,1846,8,127,1,127,5,127,1849,8,127,10,127,12,
        127,1852,9,127,1,127,3,127,1855,8,127,1,127,3,127,1858,8,127,1,128,
        1,128,3,128,1862,8,128,1,128,1,128,1,129,1,129,1,129,1,129,1,129,
        3,129,1871,8,129,1,129,1,129,3,129,1875,8,129,1,129,1,129,3,129,
        1879,8,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,
        3,129,1890,8,129,1,130,1,130,3,130,1894,8,130,1,130,4,130,1897,8,
        130,11,130,12,130,1898,1,130,1,130,3,130,1903,8,130,1,130,1,130,
        3,130,1907,8,130,1,130,4,130,1910,8,130,11,130,12,130,1911,3,130,
        1914,8,130,1,130,3,130,1917,8,130,1,130,1,130,3,130,1921,8,130,1,
        130,3,130,1924,8,130,1,130,3,130,1927,8,130,1,130,1,130,1,131,1,
        131,3,131,1933,8,131,1,131,1,131,3,131,1937,8,131,1,131,1,131,3,
        131,1941,8,131,1,131,1,131,1,132,1,132,3,132,1947,8,132,1,132,1,
        132,3,132,1951,8,132,1,132,1,132,3,132,1955,8,132,1,132,3,132,1958,
        8,132,1,132,3,132,1961,8,132,1,132,1,132,1,133,1,133,3,133,1967,
        8,133,1,133,1,133,3,133,1971,8,133,1,133,1,133,3,133,1975,8,133,
        3,133,1977,8,133,1,133,1,133,3,133,1981,8,133,1,133,1,133,3,133,
        1985,8,133,3,133,1987,8,133,1,133,1,133,3,133,1991,8,133,1,133,1,
        133,3,133,1995,8,133,1,133,1,133,1,134,1,134,3,134,2001,8,134,1,
        134,1,134,3,134,2005,8,134,1,134,1,134,3,134,2009,8,134,1,134,1,
        134,1,134,1,134,3,134,2015,8,134,1,134,1,134,3,134,2019,8,134,1,
        134,1,134,3,134,2023,8,134,1,134,1,134,1,134,1,134,3,134,2029,8,
        134,1,134,1,134,3,134,2033,8,134,1,134,1,134,3,134,2037,8,134,1,
        134,1,134,1,134,1,134,3,134,2043,8,134,1,134,1,134,3,134,2047,8,
        134,1,134,1,134,3,134,2051,8,134,1,134,1,134,3,134,2055,8,134,1,
        135,1,135,3,135,2059,8,135,1,135,3,135,2062,8,135,1,136,1,136,1,
        137,1,137,3,137,2068,8,137,1,137,1,137,3,137,2072,8,137,1,137,1,
        137,1,138,1,138,1,138,1,138,1,138,1,138,1,139,1,139,3,139,2084,8,
        139,1,139,1,139,3,139,2088,8,139,1,139,1,139,3,139,2092,8,139,3,
        139,2094,8,139,1,139,1,139,3,139,2098,8,139,1,139,1,139,3,139,2102,
        8,139,1,139,1,139,3,139,2106,8,139,5,139,2108,8,139,10,139,12,139,
        2111,9,139,3,139,2113,8,139,1,139,1,139,1,140,1,140,1,141,1,141,
        1,141,1,142,1,142,3,142,2124,8,142,1,142,1,142,3,142,2128,8,142,
        1,142,1,142,1,142,3,142,2133,8,142,1,142,3,142,2136,8,142,3,142,
        2138,8,142,1,142,3,142,2141,8,142,1,142,1,142,1,143,1,143,3,143,
        2147,8,143,1,143,1,143,3,143,2151,8,143,1,143,1,143,3,143,2155,8,
        143,1,143,1,143,3,143,2159,8,143,1,143,1,143,3,143,2163,8,143,5,
        143,2165,8,143,10,143,12,143,2168,9,143,3,143,2170,8,143,1,143,1,
        143,1,144,1,144,1,145,1,145,1,146,1,146,1,146,1,147,1,147,1,147,
        5,147,2184,8,147,10,147,12,147,2187,9,147,1,148,1,148,1,149,1,149,
        1,149,1,149,1,149,1,149,3,149,2197,8,149,1,150,1,150,1,151,1,151,
        3,151,2203,8,151,1,152,1,152,1,153,1,153,1,154,1,154,3,154,2211,
        8,154,1,154,1,154,3,154,2215,8,154,1,154,1,154,3,154,2219,8,154,
        1,154,1,154,3,154,2223,8,154,5,154,2225,8,154,10,154,12,154,2228,
        9,154,3,154,2230,8,154,1,154,1,154,1,155,1,155,1,156,1,156,3,156,
        2238,8,156,1,156,1,156,1,156,3,156,2243,8,156,1,156,5,156,2246,8,
        156,10,156,12,156,2249,9,156,3,156,2251,8,156,1,156,1,156,1,157,
        1,157,3,157,2257,8,157,1,157,1,157,3,157,2261,8,157,1,157,1,157,
        3,157,2265,8,157,1,158,1,158,1,159,1,159,1,159,3,159,2272,8,159,
        1,160,1,160,3,160,2276,8,160,1,161,1,161,1,162,1,162,1,163,1,163,
        1,163,0,0,164,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
        152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
        184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
        216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
        248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,
        280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,
        312,314,316,318,320,322,324,326,0,13,1,0,54,55,1,0,13,15,1,0,17,
        18,2,0,2,2,19,23,6,0,48,48,93,93,99,101,108,108,129,131,134,134,
        5,0,48,68,71,92,94,98,102,104,119,128,1,0,78,81,1,0,103,104,1,0,
        105,107,1,0,115,116,2,0,20,20,27,30,2,0,22,22,31,34,2,0,18,18,35,
        45,2564,0,331,1,0,0,0,2,335,1,0,0,0,4,363,1,0,0,0,6,455,1,0,0,0,
        8,457,1,0,0,0,10,463,1,0,0,0,12,470,1,0,0,0,14,476,1,0,0,0,16,483,
        1,0,0,0,18,510,1,0,0,0,20,514,1,0,0,0,22,543,1,0,0,0,24,545,1,0,
        0,0,26,551,1,0,0,0,28,559,1,0,0,0,30,561,1,0,0,0,32,567,1,0,0,0,
        34,594,1,0,0,0,36,596,1,0,0,0,38,610,1,0,0,0,40,620,1,0,0,0,42,652,
        1,0,0,0,44,654,1,0,0,0,46,678,1,0,0,0,48,689,1,0,0,0,50,701,1,0,
        0,0,52,734,1,0,0,0,54,743,1,0,0,0,56,753,1,0,0,0,58,760,1,0,0,0,
        60,772,1,0,0,0,62,774,1,0,0,0,64,776,1,0,0,0,66,798,1,0,0,0,68,808,
        1,0,0,0,70,813,1,0,0,0,72,838,1,0,0,0,74,842,1,0,0,0,76,844,1,0,
        0,0,78,854,1,0,0,0,80,864,1,0,0,0,82,880,1,0,0,0,84,885,1,0,0,0,
        86,900,1,0,0,0,88,902,1,0,0,0,90,904,1,0,0,0,92,906,1,0,0,0,94,908,
        1,0,0,0,96,915,1,0,0,0,98,939,1,0,0,0,100,954,1,0,0,0,102,961,1,
        0,0,0,104,978,1,0,0,0,106,980,1,0,0,0,108,1013,1,0,0,0,110,1034,
        1,0,0,0,112,1038,1,0,0,0,114,1047,1,0,0,0,116,1063,1,0,0,0,118,1086,
        1,0,0,0,120,1093,1,0,0,0,122,1105,1,0,0,0,124,1107,1,0,0,0,126,1111,
        1,0,0,0,128,1113,1,0,0,0,130,1115,1,0,0,0,132,1118,1,0,0,0,134,1132,
        1,0,0,0,136,1134,1,0,0,0,138,1156,1,0,0,0,140,1160,1,0,0,0,142,1197,
        1,0,0,0,144,1200,1,0,0,0,146,1212,1,0,0,0,148,1231,1,0,0,0,150,1233,
        1,0,0,0,152,1243,1,0,0,0,154,1265,1,0,0,0,156,1267,1,0,0,0,158,1273,
        1,0,0,0,160,1291,1,0,0,0,162,1311,1,0,0,0,164,1313,1,0,0,0,166,1324,
        1,0,0,0,168,1341,1,0,0,0,170,1361,1,0,0,0,172,1368,1,0,0,0,174,1376,
        1,0,0,0,176,1383,1,0,0,0,178,1427,1,0,0,0,180,1436,1,0,0,0,182,1438,
        1,0,0,0,184,1453,1,0,0,0,186,1457,1,0,0,0,188,1461,1,0,0,0,190,1468,
        1,0,0,0,192,1472,1,0,0,0,194,1486,1,0,0,0,196,1502,1,0,0,0,198,1504,
        1,0,0,0,200,1513,1,0,0,0,202,1583,1,0,0,0,204,1587,1,0,0,0,206,1589,
        1,0,0,0,208,1610,1,0,0,0,210,1620,1,0,0,0,212,1626,1,0,0,0,214,1648,
        1,0,0,0,216,1650,1,0,0,0,218,1652,1,0,0,0,220,1661,1,0,0,0,222,1663,
        1,0,0,0,224,1673,1,0,0,0,226,1683,1,0,0,0,228,1699,1,0,0,0,230,1704,
        1,0,0,0,232,1729,1,0,0,0,234,1736,1,0,0,0,236,1753,1,0,0,0,238,1755,
        1,0,0,0,240,1779,1,0,0,0,242,1781,1,0,0,0,244,1783,1,0,0,0,246,1785,
        1,0,0,0,248,1787,1,0,0,0,250,1820,1,0,0,0,252,1841,1,0,0,0,254,1843,
        1,0,0,0,256,1859,1,0,0,0,258,1889,1,0,0,0,260,1913,1,0,0,0,262,1930,
        1,0,0,0,264,1944,1,0,0,0,266,1964,1,0,0,0,268,2054,1,0,0,0,270,2056,
        1,0,0,0,272,2063,1,0,0,0,274,2065,1,0,0,0,276,2075,1,0,0,0,278,2081,
        1,0,0,0,280,2116,1,0,0,0,282,2118,1,0,0,0,284,2121,1,0,0,0,286,2144,
        1,0,0,0,288,2173,1,0,0,0,290,2175,1,0,0,0,292,2177,1,0,0,0,294,2185,
        1,0,0,0,296,2188,1,0,0,0,298,2196,1,0,0,0,300,2198,1,0,0,0,302,2202,
        1,0,0,0,304,2204,1,0,0,0,306,2206,1,0,0,0,308,2208,1,0,0,0,310,2233,
        1,0,0,0,312,2235,1,0,0,0,314,2254,1,0,0,0,316,2266,1,0,0,0,318,2268,
        1,0,0,0,320,2275,1,0,0,0,322,2277,1,0,0,0,324,2279,1,0,0,0,326,2281,
        1,0,0,0,328,332,3,136,68,0,329,332,3,166,83,0,330,332,3,28,14,0,
        331,328,1,0,0,0,331,329,1,0,0,0,331,330,1,0,0,0,332,1,1,0,0,0,333,
        334,5,58,0,0,334,336,5,135,0,0,335,333,1,0,0,0,335,336,1,0,0,0,336,
        337,1,0,0,0,337,339,5,59,0,0,338,340,5,135,0,0,339,338,1,0,0,0,339,
        340,1,0,0,0,340,341,1,0,0,0,341,349,3,192,96,0,342,344,5,135,0,0,
        343,342,1,0,0,0,343,344,1,0,0,0,344,347,1,0,0,0,345,348,3,24,12,
        0,346,348,3,26,13,0,347,345,1,0,0,0,347,346,1,0,0,0,348,350,1,0,
        0,0,349,343,1,0,0,0,349,350,1,0,0,0,350,355,1,0,0,0,351,353,5,135,
        0,0,352,351,1,0,0,0,352,353,1,0,0,0,353,354,1,0,0,0,354,356,3,72,
        36,0,355,352,1,0,0,0,355,356,1,0,0,0,356,3,1,0,0,0,357,364,3,156,
        78,0,358,364,3,152,76,0,359,364,3,20,10,0,360,364,3,158,79,0,361,
        364,3,160,80,0,362,364,3,16,8,0,363,357,1,0,0,0,363,358,1,0,0,0,
        363,359,1,0,0,0,363,360,1,0,0,0,363,361,1,0,0,0,363,362,1,0,0,0,
        364,369,1,0,0,0,365,367,5,135,0,0,366,365,1,0,0,0,366,367,1,0,0,
        0,367,368,1,0,0,0,368,370,3,24,12,0,369,366,1,0,0,0,369,370,1,0,
        0,0,370,5,1,0,0,0,371,373,3,296,148,0,372,374,5,135,0,0,373,372,
        1,0,0,0,373,374,1,0,0,0,374,375,1,0,0,0,375,376,3,70,35,0,376,456,
        1,0,0,0,377,382,3,296,148,0,378,380,5,135,0,0,379,378,1,0,0,0,379,
        380,1,0,0,0,380,381,1,0,0,0,381,383,3,70,35,0,382,379,1,0,0,0,382,
        383,1,0,0,0,383,384,1,0,0,0,384,385,5,1,0,0,385,386,3,8,4,0,386,
        456,1,0,0,0,387,392,3,296,148,0,388,390,5,135,0,0,389,388,1,0,0,
        0,389,390,1,0,0,0,390,391,1,0,0,0,391,393,3,70,35,0,392,389,1,0,
        0,0,392,393,1,0,0,0,393,394,1,0,0,0,394,395,5,1,0,0,395,397,3,10,
        5,0,396,398,5,135,0,0,397,396,1,0,0,0,397,398,1,0,0,0,398,399,1,
        0,0,0,399,400,3,12,6,0,400,456,1,0,0,0,401,406,3,296,148,0,402,404,
        5,135,0,0,403,402,1,0,0,0,403,404,1,0,0,0,404,405,1,0,0,0,405,407,
        3,70,35,0,406,403,1,0,0,0,406,407,1,0,0,0,407,408,1,0,0,0,408,409,
        5,1,0,0,409,411,3,10,5,0,410,412,5,135,0,0,411,410,1,0,0,0,411,412,
        1,0,0,0,412,413,1,0,0,0,413,415,5,2,0,0,414,416,5,135,0,0,415,414,
        1,0,0,0,415,416,1,0,0,0,416,417,1,0,0,0,417,418,3,14,7,0,418,456,
        1,0,0,0,419,421,3,218,109,0,420,422,5,135,0,0,421,420,1,0,0,0,421,
        422,1,0,0,0,422,423,1,0,0,0,423,425,5,2,0,0,424,426,5,135,0,0,425,
        424,1,0,0,0,425,426,1,0,0,0,426,427,1,0,0,0,427,428,3,220,110,0,
        428,456,1,0,0,0,429,431,3,296,148,0,430,432,5,135,0,0,431,430,1,
        0,0,0,431,432,1,0,0,0,432,433,1,0,0,0,433,435,5,2,0,0,434,436,5,
        135,0,0,435,434,1,0,0,0,435,436,1,0,0,0,436,437,1,0,0,0,437,438,
        3,220,110,0,438,456,1,0,0,0,439,441,3,296,148,0,440,442,5,135,0,
        0,441,440,1,0,0,0,441,442,1,0,0,0,442,443,1,0,0,0,443,445,5,3,0,
        0,444,446,5,135,0,0,445,444,1,0,0,0,445,446,1,0,0,0,446,447,1,0,
        0,0,447,448,3,220,110,0,448,456,1,0,0,0,449,451,3,296,148,0,450,
        452,5,135,0,0,451,450,1,0,0,0,451,452,1,0,0,0,452,453,1,0,0,0,453,
        454,3,208,104,0,454,456,1,0,0,0,455,371,1,0,0,0,455,377,1,0,0,0,
        455,387,1,0,0,0,455,401,1,0,0,0,455,419,1,0,0,0,455,429,1,0,0,0,
        455,439,1,0,0,0,455,449,1,0,0,0,456,7,1,0,0,0,457,459,3,316,158,
        0,458,460,5,135,0,0,459,458,1,0,0,0,459,460,1,0,0,0,460,461,1,0,
        0,0,461,462,3,70,35,0,462,9,1,0,0,0,463,468,3,316,158,0,464,466,
        5,135,0,0,465,464,1,0,0,0,465,466,1,0,0,0,466,467,1,0,0,0,467,469,
        3,70,35,0,468,465,1,0,0,0,468,469,1,0,0,0,469,11,1,0,0,0,470,472,
        5,47,0,0,471,473,5,135,0,0,472,471,1,0,0,0,472,473,1,0,0,0,473,474,
        1,0,0,0,474,475,3,70,35,0,475,13,1,0,0,0,476,481,3,220,110,0,477,
        479,5,135,0,0,478,477,1,0,0,0,478,479,1,0,0,0,479,480,1,0,0,0,480,
        482,3,70,35,0,481,478,1,0,0,0,481,482,1,0,0,0,482,15,1,0,0,0,483,
        485,5,53,0,0,484,486,5,135,0,0,485,484,1,0,0,0,485,486,1,0,0,0,486,
        487,1,0,0,0,487,498,3,18,9,0,488,490,5,135,0,0,489,488,1,0,0,0,489,
        490,1,0,0,0,490,491,1,0,0,0,491,493,5,4,0,0,492,494,5,135,0,0,493,
        492,1,0,0,0,493,494,1,0,0,0,494,495,1,0,0,0,495,497,3,18,9,0,496,
        489,1,0,0,0,497,500,1,0,0,0,498,496,1,0,0,0,498,499,1,0,0,0,499,
        17,1,0,0,0,500,498,1,0,0,0,501,502,3,220,110,0,502,503,5,1,0,0,503,
        505,3,316,158,0,504,506,5,135,0,0,505,504,1,0,0,0,505,506,1,0,0,
        0,506,507,1,0,0,0,507,508,5,47,0,0,508,511,1,0,0,0,509,511,3,220,
        110,0,510,501,1,0,0,0,510,509,1,0,0,0,511,19,1,0,0,0,512,513,5,66,
        0,0,513,515,5,135,0,0,514,512,1,0,0,0,514,515,1,0,0,0,515,516,1,
        0,0,0,516,518,5,67,0,0,517,519,5,135,0,0,518,517,1,0,0,0,518,519,
        1,0,0,0,519,520,1,0,0,0,520,531,3,22,11,0,521,523,5,135,0,0,522,
        521,1,0,0,0,522,523,1,0,0,0,523,524,1,0,0,0,524,526,5,4,0,0,525,
        527,5,135,0,0,526,525,1,0,0,0,526,527,1,0,0,0,527,528,1,0,0,0,528,
        530,3,22,11,0,529,522,1,0,0,0,530,533,1,0,0,0,531,529,1,0,0,0,531,
        532,1,0,0,0,532,21,1,0,0,0,533,531,1,0,0,0,534,535,3,220,110,0,535,
        536,5,1,0,0,536,538,3,316,158,0,537,539,5,135,0,0,538,537,1,0,0,
        0,538,539,1,0,0,0,539,540,1,0,0,0,540,541,5,47,0,0,541,544,1,0,0,
        0,542,544,3,220,110,0,543,534,1,0,0,0,543,542,1,0,0,0,544,23,1,0,
        0,0,545,547,5,49,0,0,546,548,5,135,0,0,547,546,1,0,0,0,547,548,1,
        0,0,0,548,549,1,0,0,0,549,550,3,220,110,0,550,25,1,0,0,0,551,553,
        5,51,0,0,552,554,5,135,0,0,553,552,1,0,0,0,553,554,1,0,0,0,554,555,
        1,0,0,0,555,556,3,220,110,0,556,27,1,0,0,0,557,560,3,30,15,0,558,
        560,3,32,16,0,559,557,1,0,0,0,559,558,1,0,0,0,560,29,1,0,0,0,561,
        563,5,50,0,0,562,564,5,135,0,0,563,562,1,0,0,0,563,564,1,0,0,0,564,
        565,1,0,0,0,565,566,3,220,110,0,566,31,1,0,0,0,567,569,5,52,0,0,
        568,570,5,135,0,0,569,568,1,0,0,0,569,570,1,0,0,0,570,571,1,0,0,
        0,571,572,3,220,110,0,572,33,1,0,0,0,573,575,3,296,148,0,574,576,
        5,135,0,0,575,574,1,0,0,0,575,576,1,0,0,0,576,577,1,0,0,0,577,579,
        5,2,0,0,578,580,5,135,0,0,579,578,1,0,0,0,579,580,1,0,0,0,580,581,
        1,0,0,0,581,582,3,36,18,0,582,595,1,0,0,0,583,585,3,296,148,0,584,
        586,5,135,0,0,585,584,1,0,0,0,585,586,1,0,0,0,586,587,1,0,0,0,587,
        589,5,2,0,0,588,590,5,135,0,0,589,588,1,0,0,0,589,590,1,0,0,0,590,
        591,1,0,0,0,591,592,3,194,97,0,592,595,1,0,0,0,593,595,3,194,97,
        0,594,573,1,0,0,0,594,583,1,0,0,0,594,593,1,0,0,0,595,35,1,0,0,0,
        596,598,3,282,141,0,597,599,5,135,0,0,598,597,1,0,0,0,598,599,1,
        0,0,0,599,600,1,0,0,0,600,602,5,5,0,0,601,603,5,135,0,0,602,601,
        1,0,0,0,602,603,1,0,0,0,603,604,1,0,0,0,604,606,3,38,19,0,605,607,
        5,135,0,0,606,605,1,0,0,0,606,607,1,0,0,0,607,608,1,0,0,0,608,609,
        5,6,0,0,609,37,1,0,0,0,610,612,3,40,20,0,611,613,5,135,0,0,612,611,
        1,0,0,0,612,613,1,0,0,0,613,614,1,0,0,0,614,616,3,202,101,0,615,
        617,5,135,0,0,616,615,1,0,0,0,616,617,1,0,0,0,617,618,1,0,0,0,618,
        619,3,40,20,0,619,39,1,0,0,0,620,622,5,5,0,0,621,623,5,135,0,0,622,
        621,1,0,0,0,622,623,1,0,0,0,623,628,1,0,0,0,624,626,3,296,148,0,
        625,627,5,135,0,0,626,625,1,0,0,0,626,627,1,0,0,0,627,629,1,0,0,
        0,628,624,1,0,0,0,628,629,1,0,0,0,629,634,1,0,0,0,630,632,3,208,
        104,0,631,633,5,135,0,0,632,631,1,0,0,0,632,633,1,0,0,0,633,635,
        1,0,0,0,634,630,1,0,0,0,634,635,1,0,0,0,635,640,1,0,0,0,636,638,
        3,70,35,0,637,639,5,135,0,0,638,637,1,0,0,0,638,639,1,0,0,0,639,
        641,1,0,0,0,640,636,1,0,0,0,640,641,1,0,0,0,641,646,1,0,0,0,642,
        644,3,42,21,0,643,645,5,135,0,0,644,643,1,0,0,0,644,645,1,0,0,0,
        645,647,1,0,0,0,646,642,1,0,0,0,646,647,1,0,0,0,647,648,1,0,0,0,
        648,649,5,6,0,0,649,41,1,0,0,0,650,653,3,44,22,0,651,653,3,318,159,
        0,652,650,1,0,0,0,652,651,1,0,0,0,653,43,1,0,0,0,654,656,5,7,0,0,
        655,657,5,135,0,0,656,655,1,0,0,0,656,657,1,0,0,0,657,674,1,0,0,
        0,658,659,3,46,23,0,659,660,5,8,0,0,660,671,3,48,24,0,661,663,5,
        4,0,0,662,664,5,135,0,0,663,662,1,0,0,0,663,664,1,0,0,0,664,665,
        1,0,0,0,665,666,3,46,23,0,666,667,5,8,0,0,667,668,3,48,24,0,668,
        670,1,0,0,0,669,661,1,0,0,0,670,673,1,0,0,0,671,669,1,0,0,0,671,
        672,1,0,0,0,672,675,1,0,0,0,673,671,1,0,0,0,674,658,1,0,0,0,674,
        675,1,0,0,0,675,676,1,0,0,0,676,677,5,9,0,0,677,45,1,0,0,0,678,680,
        3,316,158,0,679,681,5,135,0,0,680,679,1,0,0,0,680,681,1,0,0,0,681,
        686,1,0,0,0,682,684,3,70,35,0,683,685,5,135,0,0,684,683,1,0,0,0,
        684,685,1,0,0,0,685,687,1,0,0,0,686,682,1,0,0,0,686,687,1,0,0,0,
        687,47,1,0,0,0,688,690,5,135,0,0,689,688,1,0,0,0,689,690,1,0,0,0,
        690,691,1,0,0,0,691,693,3,220,110,0,692,694,5,135,0,0,693,692,1,
        0,0,0,693,694,1,0,0,0,694,699,1,0,0,0,695,697,3,70,35,0,696,698,
        5,135,0,0,697,696,1,0,0,0,697,698,1,0,0,0,698,700,1,0,0,0,699,695,
        1,0,0,0,699,700,1,0,0,0,700,49,1,0,0,0,701,703,5,10,0,0,702,704,
        5,135,0,0,703,702,1,0,0,0,703,704,1,0,0,0,704,709,1,0,0,0,705,707,
        3,296,148,0,706,708,5,135,0,0,707,706,1,0,0,0,707,708,1,0,0,0,708,
        710,1,0,0,0,709,705,1,0,0,0,709,710,1,0,0,0,710,715,1,0,0,0,711,
        713,3,206,103,0,712,714,5,135,0,0,713,712,1,0,0,0,713,714,1,0,0,
        0,714,716,1,0,0,0,715,711,1,0,0,0,715,716,1,0,0,0,716,718,1,0,0,
        0,717,719,3,212,106,0,718,717,1,0,0,0,718,719,1,0,0,0,719,724,1,
        0,0,0,720,722,3,70,35,0,721,723,5,135,0,0,722,721,1,0,0,0,722,723,
        1,0,0,0,723,725,1,0,0,0,724,720,1,0,0,0,724,725,1,0,0,0,725,730,
        1,0,0,0,726,728,3,204,102,0,727,729,5,135,0,0,728,727,1,0,0,0,728,
        729,1,0,0,0,729,731,1,0,0,0,730,726,1,0,0,0,730,731,1,0,0,0,731,
        732,1,0,0,0,732,733,5,11,0,0,733,51,1,0,0,0,734,739,3,238,119,0,
        735,740,3,68,34,0,736,740,3,232,116,0,737,740,3,234,117,0,738,740,
        3,236,118,0,739,735,1,0,0,0,739,736,1,0,0,0,739,737,1,0,0,0,739,
        738,1,0,0,0,739,740,1,0,0,0,740,53,1,0,0,0,741,744,3,254,127,0,742,
        744,3,64,32,0,743,741,1,0,0,0,743,742,1,0,0,0,744,749,1,0,0,0,745,
        748,3,56,28,0,746,748,3,58,29,0,747,745,1,0,0,0,747,746,1,0,0,0,
        748,751,1,0,0,0,749,747,1,0,0,0,749,750,1,0,0,0,750,55,1,0,0,0,751,
        749,1,0,0,0,752,754,5,135,0,0,753,752,1,0,0,0,753,754,1,0,0,0,754,
        755,1,0,0,0,755,756,5,10,0,0,756,757,3,60,30,0,757,758,5,11,0,0,
        758,57,1,0,0,0,759,761,5,135,0,0,760,759,1,0,0,0,760,761,1,0,0,0,
        761,762,1,0,0,0,762,764,5,10,0,0,763,765,3,60,30,0,764,763,1,0,0,
        0,764,765,1,0,0,0,765,766,1,0,0,0,766,768,5,12,0,0,767,769,3,62,
        31,0,768,767,1,0,0,0,768,769,1,0,0,0,769,770,1,0,0,0,770,771,5,11,
        0,0,771,59,1,0,0,0,772,773,3,220,110,0,773,61,1,0,0,0,774,775,3,
        220,110,0,775,63,1,0,0,0,776,791,3,258,129,0,777,779,5,135,0,0,778,
        777,1,0,0,0,778,779,1,0,0,0,779,780,1,0,0,0,780,782,3,256,128,0,
        781,778,1,0,0,0,782,783,1,0,0,0,783,781,1,0,0,0,783,784,1,0,0,0,
        784,789,1,0,0,0,785,787,5,135,0,0,786,785,1,0,0,0,786,787,1,0,0,
        0,787,788,1,0,0,0,788,790,5,47,0,0,789,786,1,0,0,0,789,790,1,0,0,
        0,790,792,1,0,0,0,791,781,1,0,0,0,791,792,1,0,0,0,792,794,1,0,0,
        0,793,795,5,135,0,0,794,793,1,0,0,0,794,795,1,0,0,0,795,796,1,0,
        0,0,796,797,3,66,33,0,797,65,1,0,0,0,798,805,5,46,0,0,799,801,5,
        135,0,0,800,799,1,0,0,0,800,801,1,0,0,0,801,802,1,0,0,0,802,804,
        3,256,128,0,803,800,1,0,0,0,804,807,1,0,0,0,805,803,1,0,0,0,805,
        806,1,0,0,0,806,67,1,0,0,0,807,805,1,0,0,0,808,809,5,135,0,0,809,
        810,7,0,0,0,810,811,5,135,0,0,811,812,3,238,119,0,812,69,1,0,0,0,
        813,815,5,46,0,0,814,816,5,135,0,0,815,814,1,0,0,0,815,816,1,0,0,
        0,816,817,1,0,0,0,817,819,5,5,0,0,818,820,5,135,0,0,819,818,1,0,
        0,0,819,820,1,0,0,0,820,821,1,0,0,0,821,823,3,126,63,0,822,824,5,
        135,0,0,823,822,1,0,0,0,823,824,1,0,0,0,824,825,1,0,0,0,825,827,
        5,4,0,0,826,828,5,135,0,0,827,826,1,0,0,0,827,828,1,0,0,0,828,831,
        1,0,0,0,829,832,3,126,63,0,830,832,5,48,0,0,831,829,1,0,0,0,831,
        830,1,0,0,0,832,834,1,0,0,0,833,835,5,135,0,0,834,833,1,0,0,0,834,
        835,1,0,0,0,835,836,1,0,0,0,836,837,5,6,0,0,837,71,1,0,0,0,838,839,
        5,82,0,0,839,840,5,135,0,0,840,841,3,74,37,0,841,73,1,0,0,0,842,
        843,3,76,38,0,843,75,1,0,0,0,844,851,3,78,39,0,845,846,5,135,0,0,
        846,847,5,83,0,0,847,848,5,135,0,0,848,850,3,78,39,0,849,845,1,0,
        0,0,850,853,1,0,0,0,851,849,1,0,0,0,851,852,1,0,0,0,852,77,1,0,0,
        0,853,851,1,0,0,0,854,861,3,80,40,0,855,856,5,135,0,0,856,857,5,
        84,0,0,857,858,5,135,0,0,858,860,3,80,40,0,859,855,1,0,0,0,860,863,
        1,0,0,0,861,859,1,0,0,0,861,862,1,0,0,0,862,79,1,0,0,0,863,861,1,
        0,0,0,864,871,3,82,41,0,865,866,5,135,0,0,866,867,5,85,0,0,867,868,
        5,135,0,0,868,870,3,82,41,0,869,865,1,0,0,0,870,873,1,0,0,0,871,
        869,1,0,0,0,871,872,1,0,0,0,872,81,1,0,0,0,873,871,1,0,0,0,874,876,
        5,86,0,0,875,877,5,135,0,0,876,875,1,0,0,0,876,877,1,0,0,0,877,879,
        1,0,0,0,878,874,1,0,0,0,879,882,1,0,0,0,880,878,1,0,0,0,880,881,
        1,0,0,0,881,883,1,0,0,0,882,880,1,0,0,0,883,884,3,84,42,0,884,83,
        1,0,0,0,885,897,3,94,47,0,886,888,5,135,0,0,887,886,1,0,0,0,887,
        888,1,0,0,0,888,889,1,0,0,0,889,891,3,92,46,0,890,892,5,135,0,0,
        891,890,1,0,0,0,891,892,1,0,0,0,892,893,1,0,0,0,893,894,3,94,47,
        0,894,896,1,0,0,0,895,887,1,0,0,0,896,899,1,0,0,0,897,895,1,0,0,
        0,897,898,1,0,0,0,898,85,1,0,0,0,899,897,1,0,0,0,900,901,7,1,0,0,
        901,87,1,0,0,0,902,903,5,16,0,0,903,89,1,0,0,0,904,905,7,2,0,0,905,
        91,1,0,0,0,906,907,7,3,0,0,907,93,1,0,0,0,908,913,3,96,48,0,909,
        914,3,98,49,0,910,914,3,100,50,0,911,914,3,102,51,0,912,914,3,104,
        52,0,913,909,1,0,0,0,913,910,1,0,0,0,913,911,1,0,0,0,913,912,1,0,
        0,0,913,914,1,0,0,0,914,95,1,0,0,0,915,936,3,106,53,0,916,918,5,
        135,0,0,917,916,1,0,0,0,917,918,1,0,0,0,918,919,1,0,0,0,919,921,
        3,90,45,0,920,922,5,135,0,0,921,920,1,0,0,0,921,922,1,0,0,0,922,
        923,1,0,0,0,923,924,3,106,53,0,924,935,1,0,0,0,925,927,5,135,0,0,
        926,925,1,0,0,0,926,927,1,0,0,0,927,928,1,0,0,0,928,930,3,90,45,
        0,929,931,5,135,0,0,930,929,1,0,0,0,930,931,1,0,0,0,931,932,1,0,
        0,0,932,933,3,106,53,0,933,935,1,0,0,0,934,917,1,0,0,0,934,926,1,
        0,0,0,935,938,1,0,0,0,936,934,1,0,0,0,936,937,1,0,0,0,937,97,1,0,
        0,0,938,936,1,0,0,0,939,940,5,135,0,0,940,941,7,0,0,0,941,942,5,
        135,0,0,942,943,3,96,48,0,943,99,1,0,0,0,944,945,5,135,0,0,945,946,
        5,87,0,0,946,947,5,135,0,0,947,955,5,71,0,0,948,949,5,135,0,0,949,
        950,5,88,0,0,950,951,5,135,0,0,951,955,5,71,0,0,952,953,5,135,0,
        0,953,955,5,89,0,0,954,944,1,0,0,0,954,948,1,0,0,0,954,952,1,0,0,
        0,955,957,1,0,0,0,956,958,5,135,0,0,957,956,1,0,0,0,957,958,1,0,
        0,0,958,959,1,0,0,0,959,960,3,96,48,0,960,101,1,0,0,0,961,962,5,
        135,0,0,962,964,5,90,0,0,963,965,5,135,0,0,964,963,1,0,0,0,964,965,
        1,0,0,0,965,966,1,0,0,0,966,967,3,96,48,0,967,103,1,0,0,0,968,969,
        5,135,0,0,969,970,5,91,0,0,970,971,5,135,0,0,971,979,5,92,0,0,972,
        973,5,135,0,0,973,974,5,91,0,0,974,975,5,135,0,0,975,976,5,86,0,
        0,976,977,5,135,0,0,977,979,5,92,0,0,978,968,1,0,0,0,978,972,1,0,
        0,0,979,105,1,0,0,0,980,1010,3,108,54,0,981,983,5,135,0,0,982,981,
        1,0,0,0,982,983,1,0,0,0,983,984,1,0,0,0,984,986,3,86,43,0,985,987,
        5,135,0,0,986,985,1,0,0,0,986,987,1,0,0,0,987,988,1,0,0,0,988,989,
        3,108,54,0,989,1009,1,0,0,0,990,992,5,135,0,0,991,990,1,0,0,0,991,
        992,1,0,0,0,992,993,1,0,0,0,993,995,3,86,43,0,994,996,5,135,0,0,
        995,994,1,0,0,0,995,996,1,0,0,0,996,997,1,0,0,0,997,998,3,108,54,
        0,998,1009,1,0,0,0,999,1001,5,135,0,0,1000,999,1,0,0,0,1000,1001,
        1,0,0,0,1001,1002,1,0,0,0,1002,1004,3,86,43,0,1003,1005,5,135,0,
        0,1004,1003,1,0,0,0,1004,1005,1,0,0,0,1005,1006,1,0,0,0,1006,1007,
        3,108,54,0,1007,1009,1,0,0,0,1008,982,1,0,0,0,1008,991,1,0,0,0,1008,
        1000,1,0,0,0,1009,1012,1,0,0,0,1010,1008,1,0,0,0,1010,1011,1,0,0,
        0,1011,107,1,0,0,0,1012,1010,1,0,0,0,1013,1025,3,110,55,0,1014,1016,
        5,135,0,0,1015,1014,1,0,0,0,1015,1016,1,0,0,0,1016,1017,1,0,0,0,
        1017,1019,3,88,44,0,1018,1020,5,135,0,0,1019,1018,1,0,0,0,1019,1020,
        1,0,0,0,1020,1021,1,0,0,0,1021,1022,3,110,55,0,1022,1024,1,0,0,0,
        1023,1015,1,0,0,0,1024,1027,1,0,0,0,1025,1023,1,0,0,0,1025,1026,
        1,0,0,0,1026,109,1,0,0,0,1027,1025,1,0,0,0,1028,1035,3,112,56,0,
        1029,1031,7,2,0,0,1030,1032,5,135,0,0,1031,1030,1,0,0,0,1031,1032,
        1,0,0,0,1032,1033,1,0,0,0,1033,1035,3,112,56,0,1034,1028,1,0,0,0,
        1034,1029,1,0,0,0,1035,111,1,0,0,0,1036,1039,3,114,57,0,1037,1039,
        3,116,58,0,1038,1036,1,0,0,0,1038,1037,1,0,0,0,1039,1044,1,0,0,0,
        1040,1043,3,118,59,0,1041,1043,3,120,60,0,1042,1040,1,0,0,0,1042,
        1041,1,0,0,0,1043,1046,1,0,0,0,1044,1042,1,0,0,0,1044,1045,1,0,0,
        0,1045,113,1,0,0,0,1046,1044,1,0,0,0,1047,1054,3,258,129,0,1048,
        1050,5,135,0,0,1049,1048,1,0,0,0,1049,1050,1,0,0,0,1050,1051,1,0,
        0,0,1051,1053,3,256,128,0,1052,1049,1,0,0,0,1053,1056,1,0,0,0,1054,
        1052,1,0,0,0,1054,1055,1,0,0,0,1055,1061,1,0,0,0,1056,1054,1,0,0,
        0,1057,1059,5,135,0,0,1058,1057,1,0,0,0,1058,1059,1,0,0,0,1059,1060,
        1,0,0,0,1060,1062,3,208,104,0,1061,1058,1,0,0,0,1061,1062,1,0,0,
        0,1062,115,1,0,0,0,1063,1078,3,258,129,0,1064,1066,5,135,0,0,1065,
        1064,1,0,0,0,1065,1066,1,0,0,0,1066,1067,1,0,0,0,1067,1069,3,256,
        128,0,1068,1065,1,0,0,0,1069,1070,1,0,0,0,1070,1068,1,0,0,0,1070,
        1071,1,0,0,0,1071,1076,1,0,0,0,1072,1074,5,135,0,0,1073,1072,1,0,
        0,0,1073,1074,1,0,0,0,1074,1075,1,0,0,0,1075,1077,5,47,0,0,1076,
        1073,1,0,0,0,1076,1077,1,0,0,0,1077,1079,1,0,0,0,1078,1068,1,0,0,
        0,1078,1079,1,0,0,0,1079,1081,1,0,0,0,1080,1082,5,135,0,0,1081,1080,
        1,0,0,0,1081,1082,1,0,0,0,1082,1083,1,0,0,0,1083,1084,3,66,33,0,
        1084,117,1,0,0,0,1085,1087,5,135,0,0,1086,1085,1,0,0,0,1086,1087,
        1,0,0,0,1087,1088,1,0,0,0,1088,1089,5,10,0,0,1089,1090,3,122,61,
        0,1090,1091,5,11,0,0,1091,119,1,0,0,0,1092,1094,5,135,0,0,1093,1092,
        1,0,0,0,1093,1094,1,0,0,0,1094,1095,1,0,0,0,1095,1097,5,10,0,0,1096,
        1098,3,122,61,0,1097,1096,1,0,0,0,1097,1098,1,0,0,0,1098,1099,1,
        0,0,0,1099,1101,5,12,0,0,1100,1102,3,124,62,0,1101,1100,1,0,0,0,
        1101,1102,1,0,0,0,1102,1103,1,0,0,0,1103,1104,5,11,0,0,1104,121,
        1,0,0,0,1105,1106,3,220,110,0,1106,123,1,0,0,0,1107,1108,3,220,110,
        0,1108,125,1,0,0,0,1109,1112,5,117,0,0,1110,1112,3,312,156,0,1111,
        1109,1,0,0,0,1111,1110,1,0,0,0,1112,127,1,0,0,0,1113,1114,7,4,0,
        0,1114,129,1,0,0,0,1115,1116,7,5,0,0,1116,131,1,0,0,0,1117,1119,
        5,135,0,0,1118,1117,1,0,0,0,1118,1119,1,0,0,0,1119,1120,1,0,0,0,
        1120,1125,3,134,67,0,1121,1123,5,135,0,0,1122,1121,1,0,0,0,1122,
        1123,1,0,0,0,1123,1124,1,0,0,0,1124,1126,5,24,0,0,1125,1122,1,0,
        0,0,1125,1126,1,0,0,0,1126,1128,1,0,0,0,1127,1129,5,135,0,0,1128,
        1127,1,0,0,0,1128,1129,1,0,0,0,1129,1130,1,0,0,0,1130,1131,5,0,0,
        1,1131,133,1,0,0,0,1132,1133,3,0,0,0,1133,135,1,0,0,0,1134,1141,
        3,140,70,0,1135,1137,5,135,0,0,1136,1135,1,0,0,0,1136,1137,1,0,0,
        0,1137,1138,1,0,0,0,1138,1140,3,138,69,0,1139,1136,1,0,0,0,1140,
        1143,1,0,0,0,1141,1139,1,0,0,0,1141,1142,1,0,0,0,1142,137,1,0,0,
        0,1143,1141,1,0,0,0,1144,1145,5,56,0,0,1145,1146,5,135,0,0,1146,
        1148,5,57,0,0,1147,1149,5,135,0,0,1148,1147,1,0,0,0,1148,1149,1,
        0,0,0,1149,1150,1,0,0,0,1150,1157,3,140,70,0,1151,1153,5,56,0,0,
        1152,1154,5,135,0,0,1153,1152,1,0,0,0,1153,1154,1,0,0,0,1154,1155,
        1,0,0,0,1155,1157,3,140,70,0,1156,1144,1,0,0,0,1156,1151,1,0,0,0,
        1157,139,1,0,0,0,1158,1161,3,142,71,0,1159,1161,3,144,72,0,1160,
        1158,1,0,0,0,1160,1159,1,0,0,0,1161,141,1,0,0,0,1162,1164,3,148,
        74,0,1163,1165,5,135,0,0,1164,1163,1,0,0,0,1164,1165,1,0,0,0,1165,
        1167,1,0,0,0,1166,1162,1,0,0,0,1167,1170,1,0,0,0,1168,1166,1,0,0,
        0,1168,1169,1,0,0,0,1169,1171,1,0,0,0,1170,1168,1,0,0,0,1171,1198,
        3,174,87,0,1172,1174,3,148,74,0,1173,1175,5,135,0,0,1174,1173,1,
        0,0,0,1174,1175,1,0,0,0,1175,1177,1,0,0,0,1176,1172,1,0,0,0,1177,
        1180,1,0,0,0,1178,1176,1,0,0,0,1178,1179,1,0,0,0,1179,1181,1,0,0,
        0,1180,1178,1,0,0,0,1181,1188,3,4,2,0,1182,1184,5,135,0,0,1183,1182,
        1,0,0,0,1183,1184,1,0,0,0,1184,1185,1,0,0,0,1185,1187,3,4,2,0,1186,
        1183,1,0,0,0,1187,1190,1,0,0,0,1188,1186,1,0,0,0,1188,1189,1,0,0,
        0,1189,1195,1,0,0,0,1190,1188,1,0,0,0,1191,1193,5,135,0,0,1192,1191,
        1,0,0,0,1192,1193,1,0,0,0,1193,1194,1,0,0,0,1194,1196,3,174,87,0,
        1195,1192,1,0,0,0,1195,1196,1,0,0,0,1196,1198,1,0,0,0,1197,1168,
        1,0,0,0,1197,1178,1,0,0,0,1198,143,1,0,0,0,1199,1201,3,146,73,0,
        1200,1199,1,0,0,0,1201,1202,1,0,0,0,1202,1200,1,0,0,0,1202,1203,
        1,0,0,0,1203,1204,1,0,0,0,1204,1205,3,142,71,0,1205,145,1,0,0,0,
        1206,1208,3,148,74,0,1207,1209,5,135,0,0,1208,1207,1,0,0,0,1208,
        1209,1,0,0,0,1209,1211,1,0,0,0,1210,1206,1,0,0,0,1211,1214,1,0,0,
        0,1212,1210,1,0,0,0,1212,1213,1,0,0,0,1213,1221,1,0,0,0,1214,1212,
        1,0,0,0,1215,1217,3,4,2,0,1216,1218,5,135,0,0,1217,1216,1,0,0,0,
        1217,1218,1,0,0,0,1218,1220,1,0,0,0,1219,1215,1,0,0,0,1220,1223,
        1,0,0,0,1221,1219,1,0,0,0,1221,1222,1,0,0,0,1222,1224,1,0,0,0,1223,
        1221,1,0,0,0,1224,1226,3,172,86,0,1225,1227,5,135,0,0,1226,1225,
        1,0,0,0,1226,1227,1,0,0,0,1227,147,1,0,0,0,1228,1232,3,2,1,0,1229,
        1232,3,150,75,0,1230,1232,3,164,82,0,1231,1228,1,0,0,0,1231,1229,
        1,0,0,0,1231,1230,1,0,0,0,1232,149,1,0,0,0,1233,1235,5,60,0,0,1234,
        1236,5,135,0,0,1235,1234,1,0,0,0,1235,1236,1,0,0,0,1236,1237,1,0,
        0,0,1237,1238,3,220,110,0,1238,1239,5,135,0,0,1239,1240,5,61,0,0,
        1240,1241,5,135,0,0,1241,1242,3,296,148,0,1242,151,1,0,0,0,1243,
        1245,5,62,0,0,1244,1246,5,135,0,0,1245,1244,1,0,0,0,1245,1246,1,
        0,0,0,1246,1247,1,0,0,0,1247,1252,3,34,17,0,1248,1249,5,135,0,0,
        1249,1251,3,154,77,0,1250,1248,1,0,0,0,1251,1254,1,0,0,0,1252,1250,
        1,0,0,0,1252,1253,1,0,0,0,1253,153,1,0,0,0,1254,1252,1,0,0,0,1255,
        1256,5,63,0,0,1256,1257,5,135,0,0,1257,1258,5,59,0,0,1258,1259,5,
        135,0,0,1259,1266,3,158,79,0,1260,1261,5,63,0,0,1261,1262,5,135,
        0,0,1262,1263,5,64,0,0,1263,1264,5,135,0,0,1264,1266,3,158,79,0,
        1265,1255,1,0,0,0,1265,1260,1,0,0,0,1266,155,1,0,0,0,1267,1269,5,
        64,0,0,1268,1270,5,135,0,0,1269,1268,1,0,0,0,1269,1270,1,0,0,0,1270,
        1271,1,0,0,0,1271,1272,3,192,96,0,1272,157,1,0,0,0,1273,1275,5,65,
        0,0,1274,1276,5,135,0,0,1275,1274,1,0,0,0,1275,1276,1,0,0,0,1276,
        1277,1,0,0,0,1277,1288,3,6,3,0,1278,1280,5,135,0,0,1279,1278,1,0,
        0,0,1279,1280,1,0,0,0,1280,1281,1,0,0,0,1281,1283,5,4,0,0,1282,1284,
        5,135,0,0,1283,1282,1,0,0,0,1283,1284,1,0,0,0,1284,1285,1,0,0,0,
        1285,1287,3,6,3,0,1286,1279,1,0,0,0,1287,1290,1,0,0,0,1288,1286,
        1,0,0,0,1288,1289,1,0,0,0,1289,159,1,0,0,0,1290,1288,1,0,0,0,1291,
        1292,5,68,0,0,1292,1293,5,135,0,0,1293,1304,3,162,81,0,1294,1296,
        5,135,0,0,1295,1294,1,0,0,0,1295,1296,1,0,0,0,1296,1297,1,0,0,0,
        1297,1299,5,4,0,0,1298,1300,5,135,0,0,1299,1298,1,0,0,0,1299,1300,
        1,0,0,0,1300,1301,1,0,0,0,1301,1303,3,162,81,0,1302,1295,1,0,0,0,
        1303,1306,1,0,0,0,1304,1302,1,0,0,0,1304,1305,1,0,0,0,1305,161,1,
        0,0,0,1306,1304,1,0,0,0,1307,1308,3,296,148,0,1308,1309,3,208,104,
        0,1309,1312,1,0,0,0,1310,1312,3,218,109,0,1311,1307,1,0,0,0,1311,
        1310,1,0,0,0,1312,163,1,0,0,0,1313,1314,5,69,0,0,1314,1315,5,135,
        0,0,1315,1322,3,286,143,0,1316,1318,5,135,0,0,1317,1316,1,0,0,0,
        1317,1318,1,0,0,0,1318,1319,1,0,0,0,1319,1320,5,70,0,0,1320,1321,
        5,135,0,0,1321,1323,3,168,84,0,1322,1317,1,0,0,0,1322,1323,1,0,0,
        0,1323,165,1,0,0,0,1324,1325,5,69,0,0,1325,1328,5,135,0,0,1326,1329,
        3,286,143,0,1327,1329,3,288,144,0,1328,1326,1,0,0,0,1328,1327,1,
        0,0,0,1329,1339,1,0,0,0,1330,1332,5,135,0,0,1331,1330,1,0,0,0,1331,
        1332,1,0,0,0,1332,1333,1,0,0,0,1333,1334,5,70,0,0,1334,1337,5,135,
        0,0,1335,1338,5,13,0,0,1336,1338,3,168,84,0,1337,1335,1,0,0,0,1337,
        1336,1,0,0,0,1338,1340,1,0,0,0,1339,1331,1,0,0,0,1339,1340,1,0,0,
        0,1340,167,1,0,0,0,1341,1352,3,170,85,0,1342,1344,5,135,0,0,1343,
        1342,1,0,0,0,1343,1344,1,0,0,0,1344,1345,1,0,0,0,1345,1347,5,4,0,
        0,1346,1348,5,135,0,0,1347,1346,1,0,0,0,1347,1348,1,0,0,0,1348,1349,
        1,0,0,0,1349,1351,3,170,85,0,1350,1343,1,0,0,0,1351,1354,1,0,0,0,
        1352,1350,1,0,0,0,1352,1353,1,0,0,0,1353,1359,1,0,0,0,1354,1352,
        1,0,0,0,1355,1357,5,135,0,0,1356,1355,1,0,0,0,1356,1357,1,0,0,0,
        1357,1358,1,0,0,0,1358,1360,3,190,95,0,1359,1356,1,0,0,0,1359,1360,
        1,0,0,0,1360,169,1,0,0,0,1361,1366,3,290,145,0,1362,1363,5,135,0,
        0,1363,1364,5,61,0,0,1364,1365,5,135,0,0,1365,1367,3,296,148,0,1366,
        1362,1,0,0,0,1366,1367,1,0,0,0,1367,171,1,0,0,0,1368,1369,5,71,0,
        0,1369,1374,3,176,88,0,1370,1372,5,135,0,0,1371,1370,1,0,0,0,1371,
        1372,1,0,0,0,1372,1373,1,0,0,0,1373,1375,3,190,95,0,1374,1371,1,
        0,0,0,1374,1375,1,0,0,0,1375,173,1,0,0,0,1376,1377,5,72,0,0,1377,
        1378,3,176,88,0,1378,175,1,0,0,0,1379,1381,5,135,0,0,1380,1379,1,
        0,0,0,1380,1381,1,0,0,0,1381,1382,1,0,0,0,1382,1384,5,73,0,0,1383,
        1380,1,0,0,0,1383,1384,1,0,0,0,1384,1385,1,0,0,0,1385,1386,5,135,
        0,0,1386,1389,3,178,89,0,1387,1388,5,135,0,0,1388,1390,3,182,91,
        0,1389,1387,1,0,0,0,1389,1390,1,0,0,0,1390,1393,1,0,0,0,1391,1392,
        5,135,0,0,1392,1394,3,184,92,0,1393,1391,1,0,0,0,1393,1394,1,0,0,
        0,1394,1397,1,0,0,0,1395,1396,5,135,0,0,1396,1398,3,186,93,0,1397,
        1395,1,0,0,0,1397,1398,1,0,0,0,1398,177,1,0,0,0,1399,1410,5,13,0,
        0,1400,1402,5,135,0,0,1401,1400,1,0,0,0,1401,1402,1,0,0,0,1402,1403,
        1,0,0,0,1403,1405,5,4,0,0,1404,1406,5,135,0,0,1405,1404,1,0,0,0,
        1405,1406,1,0,0,0,1406,1407,1,0,0,0,1407,1409,3,180,90,0,1408,1401,
        1,0,0,0,1409,1412,1,0,0,0,1410,1408,1,0,0,0,1410,1411,1,0,0,0,1411,
        1428,1,0,0,0,1412,1410,1,0,0,0,1413,1424,3,180,90,0,1414,1416,5,
        135,0,0,1415,1414,1,0,0,0,1415,1416,1,0,0,0,1416,1417,1,0,0,0,1417,
        1419,5,4,0,0,1418,1420,5,135,0,0,1419,1418,1,0,0,0,1419,1420,1,0,
        0,0,1420,1421,1,0,0,0,1421,1423,3,180,90,0,1422,1415,1,0,0,0,1423,
        1426,1,0,0,0,1424,1422,1,0,0,0,1424,1425,1,0,0,0,1425,1428,1,0,0,
        0,1426,1424,1,0,0,0,1427,1399,1,0,0,0,1427,1413,1,0,0,0,1428,179,
        1,0,0,0,1429,1430,3,220,110,0,1430,1431,5,135,0,0,1431,1432,5,61,
        0,0,1432,1433,5,135,0,0,1433,1434,3,296,148,0,1434,1437,1,0,0,0,
        1435,1437,3,220,110,0,1436,1429,1,0,0,0,1436,1435,1,0,0,0,1437,181,
        1,0,0,0,1438,1439,5,74,0,0,1439,1440,5,135,0,0,1440,1441,5,75,0,
        0,1441,1442,5,135,0,0,1442,1450,3,188,94,0,1443,1445,5,4,0,0,1444,
        1446,5,135,0,0,1445,1444,1,0,0,0,1445,1446,1,0,0,0,1446,1447,1,0,
        0,0,1447,1449,3,188,94,0,1448,1443,1,0,0,0,1449,1452,1,0,0,0,1450,
        1448,1,0,0,0,1450,1451,1,0,0,0,1451,183,1,0,0,0,1452,1450,1,0,0,
        0,1453,1454,5,76,0,0,1454,1455,5,135,0,0,1455,1456,3,220,110,0,1456,
        185,1,0,0,0,1457,1458,5,77,0,0,1458,1459,5,135,0,0,1459,1460,3,220,
        110,0,1460,187,1,0,0,0,1461,1466,3,220,110,0,1462,1464,5,135,0,0,
        1463,1462,1,0,0,0,1463,1464,1,0,0,0,1464,1465,1,0,0,0,1465,1467,
        7,6,0,0,1466,1463,1,0,0,0,1466,1467,1,0,0,0,1467,189,1,0,0,0,1468,
        1469,5,82,0,0,1469,1470,5,135,0,0,1470,1471,3,220,110,0,1471,191,
        1,0,0,0,1472,1483,3,34,17,0,1473,1475,5,135,0,0,1474,1473,1,0,0,
        0,1474,1475,1,0,0,0,1475,1476,1,0,0,0,1476,1478,5,4,0,0,1477,1479,
        5,135,0,0,1478,1477,1,0,0,0,1478,1479,1,0,0,0,1479,1480,1,0,0,0,
        1480,1482,3,34,17,0,1481,1474,1,0,0,0,1482,1485,1,0,0,0,1483,1481,
        1,0,0,0,1483,1484,1,0,0,0,1484,193,1,0,0,0,1485,1483,1,0,0,0,1486,
        1487,3,196,98,0,1487,195,1,0,0,0,1488,1495,3,40,20,0,1489,1491,5,
        135,0,0,1490,1489,1,0,0,0,1490,1491,1,0,0,0,1491,1492,1,0,0,0,1492,
        1494,3,200,100,0,1493,1490,1,0,0,0,1494,1497,1,0,0,0,1495,1493,1,
        0,0,0,1495,1496,1,0,0,0,1496,1503,1,0,0,0,1497,1495,1,0,0,0,1498,
        1499,5,5,0,0,1499,1500,3,196,98,0,1500,1501,5,6,0,0,1501,1503,1,
        0,0,0,1502,1488,1,0,0,0,1502,1498,1,0,0,0,1503,197,1,0,0,0,1504,
        1509,3,40,20,0,1505,1507,5,135,0,0,1506,1505,1,0,0,0,1506,1507,1,
        0,0,0,1507,1508,1,0,0,0,1508,1510,3,200,100,0,1509,1506,1,0,0,0,
        1510,1511,1,0,0,0,1511,1509,1,0,0,0,1511,1512,1,0,0,0,1512,199,1,
        0,0,0,1513,1515,3,202,101,0,1514,1516,5,135,0,0,1515,1514,1,0,0,
        0,1515,1516,1,0,0,0,1516,1517,1,0,0,0,1517,1518,3,40,20,0,1518,201,
        1,0,0,0,1519,1521,3,322,161,0,1520,1522,5,135,0,0,1521,1520,1,0,
        0,0,1521,1522,1,0,0,0,1522,1523,1,0,0,0,1523,1525,3,326,163,0,1524,
        1526,5,135,0,0,1525,1524,1,0,0,0,1525,1526,1,0,0,0,1526,1528,1,0,
        0,0,1527,1529,3,50,25,0,1528,1527,1,0,0,0,1528,1529,1,0,0,0,1529,
        1531,1,0,0,0,1530,1532,5,135,0,0,1531,1530,1,0,0,0,1531,1532,1,0,
        0,0,1532,1533,1,0,0,0,1533,1535,3,326,163,0,1534,1536,5,135,0,0,
        1535,1534,1,0,0,0,1535,1536,1,0,0,0,1536,1537,1,0,0,0,1537,1538,
        3,324,162,0,1538,1584,1,0,0,0,1539,1541,3,322,161,0,1540,1542,5,
        135,0,0,1541,1540,1,0,0,0,1541,1542,1,0,0,0,1542,1543,1,0,0,0,1543,
        1545,3,326,163,0,1544,1546,5,135,0,0,1545,1544,1,0,0,0,1545,1546,
        1,0,0,0,1546,1548,1,0,0,0,1547,1549,3,50,25,0,1548,1547,1,0,0,0,
        1548,1549,1,0,0,0,1549,1551,1,0,0,0,1550,1552,5,135,0,0,1551,1550,
        1,0,0,0,1551,1552,1,0,0,0,1552,1553,1,0,0,0,1553,1554,3,326,163,
        0,1554,1584,1,0,0,0,1555,1557,3,326,163,0,1556,1558,5,135,0,0,1557,
        1556,1,0,0,0,1557,1558,1,0,0,0,1558,1560,1,0,0,0,1559,1561,3,50,
        25,0,1560,1559,1,0,0,0,1560,1561,1,0,0,0,1561,1563,1,0,0,0,1562,
        1564,5,135,0,0,1563,1562,1,0,0,0,1563,1564,1,0,0,0,1564,1565,1,0,
        0,0,1565,1567,3,326,163,0,1566,1568,5,135,0,0,1567,1566,1,0,0,0,
        1567,1568,1,0,0,0,1568,1569,1,0,0,0,1569,1570,3,324,162,0,1570,1584,
        1,0,0,0,1571,1573,3,326,163,0,1572,1574,5,135,0,0,1573,1572,1,0,
        0,0,1573,1574,1,0,0,0,1574,1576,1,0,0,0,1575,1577,3,50,25,0,1576,
        1575,1,0,0,0,1576,1577,1,0,0,0,1577,1579,1,0,0,0,1578,1580,5,135,
        0,0,1579,1578,1,0,0,0,1579,1580,1,0,0,0,1580,1581,1,0,0,0,1581,1582,
        3,326,163,0,1582,1584,1,0,0,0,1583,1519,1,0,0,0,1583,1539,1,0,0,
        0,1583,1555,1,0,0,0,1583,1571,1,0,0,0,1584,203,1,0,0,0,1585,1588,
        3,312,156,0,1586,1588,3,318,159,0,1587,1585,1,0,0,0,1587,1586,1,
        0,0,0,1588,205,1,0,0,0,1589,1591,5,8,0,0,1590,1592,5,135,0,0,1591,
        1590,1,0,0,0,1591,1592,1,0,0,0,1592,1593,1,0,0,0,1593,1607,3,216,
        108,0,1594,1596,5,135,0,0,1595,1594,1,0,0,0,1595,1596,1,0,0,0,1596,
        1597,1,0,0,0,1597,1599,5,25,0,0,1598,1600,5,8,0,0,1599,1598,1,0,
        0,0,1599,1600,1,0,0,0,1600,1602,1,0,0,0,1601,1603,5,135,0,0,1602,
        1601,1,0,0,0,1602,1603,1,0,0,0,1603,1604,1,0,0,0,1604,1606,3,216,
        108,0,1605,1595,1,0,0,0,1606,1609,1,0,0,0,1607,1605,1,0,0,0,1607,
        1608,1,0,0,0,1608,207,1,0,0,0,1609,1607,1,0,0,0,1610,1617,3,210,
        105,0,1611,1613,5,135,0,0,1612,1611,1,0,0,0,1612,1613,1,0,0,0,1613,
        1614,1,0,0,0,1614,1616,3,210,105,0,1615,1612,1,0,0,0,1616,1619,1,
        0,0,0,1617,1615,1,0,0,0,1617,1618,1,0,0,0,1618,209,1,0,0,0,1619,
        1617,1,0,0,0,1620,1622,5,8,0,0,1621,1623,5,135,0,0,1622,1621,1,0,
        0,0,1622,1623,1,0,0,0,1623,1624,1,0,0,0,1624,1625,3,214,107,0,1625,
        211,1,0,0,0,1626,1628,5,13,0,0,1627,1629,5,135,0,0,1628,1627,1,0,
        0,0,1628,1629,1,0,0,0,1629,1634,1,0,0,0,1630,1632,3,304,152,0,1631,
        1633,5,135,0,0,1632,1631,1,0,0,0,1632,1633,1,0,0,0,1633,1635,1,0,
        0,0,1634,1630,1,0,0,0,1634,1635,1,0,0,0,1635,1646,1,0,0,0,1636,1638,
        5,12,0,0,1637,1639,5,135,0,0,1638,1637,1,0,0,0,1638,1639,1,0,0,0,
        1639,1644,1,0,0,0,1640,1642,3,304,152,0,1641,1643,5,135,0,0,1642,
        1641,1,0,0,0,1642,1643,1,0,0,0,1643,1645,1,0,0,0,1644,1640,1,0,0,
        0,1644,1645,1,0,0,0,1645,1647,1,0,0,0,1646,1636,1,0,0,0,1646,1647,
        1,0,0,0,1647,213,1,0,0,0,1648,1649,3,320,160,0,1649,215,1,0,0,0,
        1650,1651,3,320,160,0,1651,217,1,0,0,0,1652,1657,3,258,129,0,1653,
        1655,5,135,0,0,1654,1653,1,0,0,0,1654,1655,1,0,0,0,1655,1656,1,0,
        0,0,1656,1658,3,256,128,0,1657,1654,1,0,0,0,1658,1659,1,0,0,0,1659,
        1657,1,0,0,0,1659,1660,1,0,0,0,1660,219,1,0,0,0,1661,1662,3,222,
        111,0,1662,221,1,0,0,0,1663,1670,3,224,112,0,1664,1665,5,135,0,0,
        1665,1666,5,83,0,0,1666,1667,5,135,0,0,1667,1669,3,224,112,0,1668,
        1664,1,0,0,0,1669,1672,1,0,0,0,1670,1668,1,0,0,0,1670,1671,1,0,0,
        0,1671,223,1,0,0,0,1672,1670,1,0,0,0,1673,1680,3,226,113,0,1674,
        1675,5,135,0,0,1675,1676,5,84,0,0,1676,1677,5,135,0,0,1677,1679,
        3,226,113,0,1678,1674,1,0,0,0,1679,1682,1,0,0,0,1680,1678,1,0,0,
        0,1680,1681,1,0,0,0,1681,225,1,0,0,0,1682,1680,1,0,0,0,1683,1690,
        3,228,114,0,1684,1685,5,135,0,0,1685,1686,5,85,0,0,1686,1687,5,135,
        0,0,1687,1689,3,228,114,0,1688,1684,1,0,0,0,1689,1692,1,0,0,0,1690,
        1688,1,0,0,0,1690,1691,1,0,0,0,1691,227,1,0,0,0,1692,1690,1,0,0,
        0,1693,1695,5,86,0,0,1694,1696,5,135,0,0,1695,1694,1,0,0,0,1695,
        1696,1,0,0,0,1696,1698,1,0,0,0,1697,1693,1,0,0,0,1698,1701,1,0,0,
        0,1699,1697,1,0,0,0,1699,1700,1,0,0,0,1700,1702,1,0,0,0,1701,1699,
        1,0,0,0,1702,1703,3,230,115,0,1703,229,1,0,0,0,1704,1716,3,52,26,
        0,1705,1707,5,135,0,0,1706,1705,1,0,0,0,1706,1707,1,0,0,0,1707,1708,
        1,0,0,0,1708,1710,3,246,123,0,1709,1711,5,135,0,0,1710,1709,1,0,
        0,0,1710,1711,1,0,0,0,1711,1712,1,0,0,0,1712,1713,3,52,26,0,1713,
        1715,1,0,0,0,1714,1706,1,0,0,0,1715,1718,1,0,0,0,1716,1714,1,0,0,
        0,1716,1717,1,0,0,0,1717,231,1,0,0,0,1718,1716,1,0,0,0,1719,1720,
        5,135,0,0,1720,1721,5,87,0,0,1721,1722,5,135,0,0,1722,1730,5,71,
        0,0,1723,1724,5,135,0,0,1724,1725,5,88,0,0,1725,1726,5,135,0,0,1726,
        1730,5,71,0,0,1727,1728,5,135,0,0,1728,1730,5,89,0,0,1729,1719,1,
        0,0,0,1729,1723,1,0,0,0,1729,1727,1,0,0,0,1730,1732,1,0,0,0,1731,
        1733,5,135,0,0,1732,1731,1,0,0,0,1732,1733,1,0,0,0,1733,1734,1,0,
        0,0,1734,1735,3,238,119,0,1735,233,1,0,0,0,1736,1737,5,135,0,0,1737,
        1739,5,90,0,0,1738,1740,5,135,0,0,1739,1738,1,0,0,0,1739,1740,1,
        0,0,0,1740,1741,1,0,0,0,1741,1742,3,238,119,0,1742,235,1,0,0,0,1743,
        1744,5,135,0,0,1744,1745,5,91,0,0,1745,1746,5,135,0,0,1746,1754,
        5,92,0,0,1747,1748,5,135,0,0,1748,1749,5,91,0,0,1749,1750,5,135,
        0,0,1750,1751,5,86,0,0,1751,1752,5,135,0,0,1752,1754,5,92,0,0,1753,
        1743,1,0,0,0,1753,1747,1,0,0,0,1754,237,1,0,0,0,1755,1776,3,248,
        124,0,1756,1758,5,135,0,0,1757,1756,1,0,0,0,1757,1758,1,0,0,0,1758,
        1759,1,0,0,0,1759,1761,3,244,122,0,1760,1762,5,135,0,0,1761,1760,
        1,0,0,0,1761,1762,1,0,0,0,1762,1763,1,0,0,0,1763,1764,3,248,124,
        0,1764,1775,1,0,0,0,1765,1767,5,135,0,0,1766,1765,1,0,0,0,1766,1767,
        1,0,0,0,1767,1768,1,0,0,0,1768,1770,3,244,122,0,1769,1771,5,135,
        0,0,1770,1769,1,0,0,0,1770,1771,1,0,0,0,1771,1772,1,0,0,0,1772,1773,
        3,248,124,0,1773,1775,1,0,0,0,1774,1757,1,0,0,0,1774,1766,1,0,0,
        0,1775,1778,1,0,0,0,1776,1774,1,0,0,0,1776,1777,1,0,0,0,1777,239,
        1,0,0,0,1778,1776,1,0,0,0,1779,1780,7,1,0,0,1780,241,1,0,0,0,1781,
        1782,5,16,0,0,1782,243,1,0,0,0,1783,1784,7,2,0,0,1784,245,1,0,0,
        0,1785,1786,7,3,0,0,1786,247,1,0,0,0,1787,1817,3,250,125,0,1788,
        1790,5,135,0,0,1789,1788,1,0,0,0,1789,1790,1,0,0,0,1790,1791,1,0,
        0,0,1791,1793,3,240,120,0,1792,1794,5,135,0,0,1793,1792,1,0,0,0,
        1793,1794,1,0,0,0,1794,1795,1,0,0,0,1795,1796,3,250,125,0,1796,1816,
        1,0,0,0,1797,1799,5,135,0,0,1798,1797,1,0,0,0,1798,1799,1,0,0,0,
        1799,1800,1,0,0,0,1800,1802,3,240,120,0,1801,1803,5,135,0,0,1802,
        1801,1,0,0,0,1802,1803,1,0,0,0,1803,1804,1,0,0,0,1804,1805,3,250,
        125,0,1805,1816,1,0,0,0,1806,1808,5,135,0,0,1807,1806,1,0,0,0,1807,
        1808,1,0,0,0,1808,1809,1,0,0,0,1809,1811,3,240,120,0,1810,1812,5,
        135,0,0,1811,1810,1,0,0,0,1811,1812,1,0,0,0,1812,1813,1,0,0,0,1813,
        1814,3,250,125,0,1814,1816,1,0,0,0,1815,1789,1,0,0,0,1815,1798,1,
        0,0,0,1815,1807,1,0,0,0,1816,1819,1,0,0,0,1817,1815,1,0,0,0,1817,
        1818,1,0,0,0,1818,249,1,0,0,0,1819,1817,1,0,0,0,1820,1832,3,252,
        126,0,1821,1823,5,135,0,0,1822,1821,1,0,0,0,1822,1823,1,0,0,0,1823,
        1824,1,0,0,0,1824,1826,3,242,121,0,1825,1827,5,135,0,0,1826,1825,
        1,0,0,0,1826,1827,1,0,0,0,1827,1828,1,0,0,0,1828,1829,3,252,126,
        0,1829,1831,1,0,0,0,1830,1822,1,0,0,0,1831,1834,1,0,0,0,1832,1830,
        1,0,0,0,1832,1833,1,0,0,0,1833,251,1,0,0,0,1834,1832,1,0,0,0,1835,
        1842,3,54,27,0,1836,1838,7,2,0,0,1837,1839,5,135,0,0,1838,1837,1,
        0,0,0,1838,1839,1,0,0,0,1839,1840,1,0,0,0,1840,1842,3,54,27,0,1841,
        1835,1,0,0,0,1841,1836,1,0,0,0,1842,253,1,0,0,0,1843,1850,3,258,
        129,0,1844,1846,5,135,0,0,1845,1844,1,0,0,0,1845,1846,1,0,0,0,1846,
        1847,1,0,0,0,1847,1849,3,256,128,0,1848,1845,1,0,0,0,1849,1852,1,
        0,0,0,1850,1848,1,0,0,0,1850,1851,1,0,0,0,1851,1857,1,0,0,0,1852,
        1850,1,0,0,0,1853,1855,5,135,0,0,1854,1853,1,0,0,0,1854,1855,1,0,
        0,0,1855,1856,1,0,0,0,1856,1858,3,208,104,0,1857,1854,1,0,0,0,1857,
        1858,1,0,0,0,1858,255,1,0,0,0,1859,1861,5,1,0,0,1860,1862,5,135,
        0,0,1861,1860,1,0,0,0,1861,1862,1,0,0,0,1862,1863,1,0,0,0,1863,1864,
        3,316,158,0,1864,257,1,0,0,0,1865,1890,3,298,149,0,1866,1890,3,318,
        159,0,1867,1890,3,260,130,0,1868,1870,5,93,0,0,1869,1871,5,135,0,
        0,1870,1869,1,0,0,0,1870,1871,1,0,0,0,1871,1872,1,0,0,0,1872,1874,
        5,5,0,0,1873,1875,5,135,0,0,1874,1873,1,0,0,0,1874,1875,1,0,0,0,
        1875,1876,1,0,0,0,1876,1878,5,13,0,0,1877,1879,5,135,0,0,1878,1877,
        1,0,0,0,1878,1879,1,0,0,0,1879,1880,1,0,0,0,1880,1890,5,6,0,0,1881,
        1890,3,264,132,0,1882,1890,3,266,133,0,1883,1890,3,268,134,0,1884,
        1890,3,272,136,0,1885,1890,3,274,137,0,1886,1890,3,278,139,0,1887,
        1890,3,284,142,0,1888,1890,3,296,148,0,1889,1865,1,0,0,0,1889,1866,
        1,0,0,0,1889,1867,1,0,0,0,1889,1868,1,0,0,0,1889,1881,1,0,0,0,1889,
        1882,1,0,0,0,1889,1883,1,0,0,0,1889,1884,1,0,0,0,1889,1885,1,0,0,
        0,1889,1886,1,0,0,0,1889,1887,1,0,0,0,1889,1888,1,0,0,0,1890,259,
        1,0,0,0,1891,1896,5,94,0,0,1892,1894,5,135,0,0,1893,1892,1,0,0,0,
        1893,1894,1,0,0,0,1894,1895,1,0,0,0,1895,1897,3,262,131,0,1896,1893,
        1,0,0,0,1897,1898,1,0,0,0,1898,1896,1,0,0,0,1898,1899,1,0,0,0,1899,
        1914,1,0,0,0,1900,1902,5,94,0,0,1901,1903,5,135,0,0,1902,1901,1,
        0,0,0,1902,1903,1,0,0,0,1903,1904,1,0,0,0,1904,1909,3,220,110,0,
        1905,1907,5,135,0,0,1906,1905,1,0,0,0,1906,1907,1,0,0,0,1907,1908,
        1,0,0,0,1908,1910,3,262,131,0,1909,1906,1,0,0,0,1910,1911,1,0,0,
        0,1911,1909,1,0,0,0,1911,1912,1,0,0,0,1912,1914,1,0,0,0,1913,1891,
        1,0,0,0,1913,1900,1,0,0,0,1914,1923,1,0,0,0,1915,1917,5,135,0,0,
        1916,1915,1,0,0,0,1916,1917,1,0,0,0,1917,1918,1,0,0,0,1918,1920,
        5,95,0,0,1919,1921,5,135,0,0,1920,1919,1,0,0,0,1920,1921,1,0,0,0,
        1921,1922,1,0,0,0,1922,1924,3,220,110,0,1923,1916,1,0,0,0,1923,1924,
        1,0,0,0,1924,1926,1,0,0,0,1925,1927,5,135,0,0,1926,1925,1,0,0,0,
        1926,1927,1,0,0,0,1927,1928,1,0,0,0,1928,1929,5,96,0,0,1929,261,
        1,0,0,0,1930,1932,5,97,0,0,1931,1933,5,135,0,0,1932,1931,1,0,0,0,
        1932,1933,1,0,0,0,1933,1934,1,0,0,0,1934,1936,3,220,110,0,1935,1937,
        5,135,0,0,1936,1935,1,0,0,0,1936,1937,1,0,0,0,1937,1938,1,0,0,0,
        1938,1940,5,98,0,0,1939,1941,5,135,0,0,1940,1939,1,0,0,0,1940,1941,
        1,0,0,0,1941,1942,1,0,0,0,1942,1943,3,220,110,0,1943,263,1,0,0,0,
        1944,1946,5,10,0,0,1945,1947,5,135,0,0,1946,1945,1,0,0,0,1946,1947,
        1,0,0,0,1947,1948,1,0,0,0,1948,1957,3,270,135,0,1949,1951,5,135,
        0,0,1950,1949,1,0,0,0,1950,1951,1,0,0,0,1951,1952,1,0,0,0,1952,1954,
        5,25,0,0,1953,1955,5,135,0,0,1954,1953,1,0,0,0,1954,1955,1,0,0,0,
        1955,1956,1,0,0,0,1956,1958,3,220,110,0,1957,1950,1,0,0,0,1957,1958,
        1,0,0,0,1958,1960,1,0,0,0,1959,1961,5,135,0,0,1960,1959,1,0,0,0,
        1960,1961,1,0,0,0,1961,1962,1,0,0,0,1962,1963,5,11,0,0,1963,265,
        1,0,0,0,1964,1966,5,10,0,0,1965,1967,5,135,0,0,1966,1965,1,0,0,0,
        1966,1967,1,0,0,0,1967,1976,1,0,0,0,1968,1970,3,296,148,0,1969,1971,
        5,135,0,0,1970,1969,1,0,0,0,1970,1971,1,0,0,0,1971,1972,1,0,0,0,
        1972,1974,5,2,0,0,1973,1975,5,135,0,0,1974,1973,1,0,0,0,1974,1975,
        1,0,0,0,1975,1977,1,0,0,0,1976,1968,1,0,0,0,1976,1977,1,0,0,0,1977,
        1978,1,0,0,0,1978,1980,3,198,99,0,1979,1981,5,135,0,0,1980,1979,
        1,0,0,0,1980,1981,1,0,0,0,1981,1986,1,0,0,0,1982,1984,3,190,95,0,
        1983,1985,5,135,0,0,1984,1983,1,0,0,0,1984,1985,1,0,0,0,1985,1987,
        1,0,0,0,1986,1982,1,0,0,0,1986,1987,1,0,0,0,1987,1988,1,0,0,0,1988,
        1990,5,25,0,0,1989,1991,5,135,0,0,1990,1989,1,0,0,0,1990,1991,1,
        0,0,0,1991,1992,1,0,0,0,1992,1994,3,220,110,0,1993,1995,5,135,0,
        0,1994,1993,1,0,0,0,1994,1995,1,0,0,0,1995,1996,1,0,0,0,1996,1997,
        5,11,0,0,1997,267,1,0,0,0,1998,2000,5,57,0,0,1999,2001,5,135,0,0,
        2000,1999,1,0,0,0,2000,2001,1,0,0,0,2001,2002,1,0,0,0,2002,2004,
        5,5,0,0,2003,2005,5,135,0,0,2004,2003,1,0,0,0,2004,2005,1,0,0,0,
        2005,2006,1,0,0,0,2006,2008,3,270,135,0,2007,2009,5,135,0,0,2008,
        2007,1,0,0,0,2008,2009,1,0,0,0,2009,2010,1,0,0,0,2010,2011,5,6,0,
        0,2011,2055,1,0,0,0,2012,2014,5,99,0,0,2013,2015,5,135,0,0,2014,
        2013,1,0,0,0,2014,2015,1,0,0,0,2015,2016,1,0,0,0,2016,2018,5,5,0,
        0,2017,2019,5,135,0,0,2018,2017,1,0,0,0,2018,2019,1,0,0,0,2019,2020,
        1,0,0,0,2020,2022,3,270,135,0,2021,2023,5,135,0,0,2022,2021,1,0,
        0,0,2022,2023,1,0,0,0,2023,2024,1,0,0,0,2024,2025,5,6,0,0,2025,2055,
        1,0,0,0,2026,2028,5,100,0,0,2027,2029,5,135,0,0,2028,2027,1,0,0,
        0,2028,2029,1,0,0,0,2029,2030,1,0,0,0,2030,2032,5,5,0,0,2031,2033,
        5,135,0,0,2032,2031,1,0,0,0,2032,2033,1,0,0,0,2033,2034,1,0,0,0,
        2034,2036,3,270,135,0,2035,2037,5,135,0,0,2036,2035,1,0,0,0,2036,
        2037,1,0,0,0,2037,2038,1,0,0,0,2038,2039,5,6,0,0,2039,2055,1,0,0,
        0,2040,2042,5,101,0,0,2041,2043,5,135,0,0,2042,2041,1,0,0,0,2042,
        2043,1,0,0,0,2043,2044,1,0,0,0,2044,2046,5,5,0,0,2045,2047,5,135,
        0,0,2046,2045,1,0,0,0,2046,2047,1,0,0,0,2047,2048,1,0,0,0,2048,2050,
        3,270,135,0,2049,2051,5,135,0,0,2050,2049,1,0,0,0,2050,2051,1,0,
        0,0,2051,2052,1,0,0,0,2052,2053,5,6,0,0,2053,2055,1,0,0,0,2054,1998,
        1,0,0,0,2054,2012,1,0,0,0,2054,2026,1,0,0,0,2054,2040,1,0,0,0,2055,
        269,1,0,0,0,2056,2061,3,276,138,0,2057,2059,5,135,0,0,2058,2057,
        1,0,0,0,2058,2059,1,0,0,0,2059,2060,1,0,0,0,2060,2062,3,190,95,0,
        2061,2058,1,0,0,0,2061,2062,1,0,0,0,2062,271,1,0,0,0,2063,2064,3,
        198,99,0,2064,273,1,0,0,0,2065,2067,5,5,0,0,2066,2068,5,135,0,0,
        2067,2066,1,0,0,0,2067,2068,1,0,0,0,2068,2069,1,0,0,0,2069,2071,
        3,220,110,0,2070,2072,5,135,0,0,2071,2070,1,0,0,0,2071,2072,1,0,
        0,0,2072,2073,1,0,0,0,2073,2074,5,6,0,0,2074,275,1,0,0,0,2075,2076,
        3,296,148,0,2076,2077,5,135,0,0,2077,2078,5,90,0,0,2078,2079,5,135,
        0,0,2079,2080,3,220,110,0,2080,277,1,0,0,0,2081,2083,3,282,141,0,
        2082,2084,5,135,0,0,2083,2082,1,0,0,0,2083,2084,1,0,0,0,2084,2085,
        1,0,0,0,2085,2087,5,5,0,0,2086,2088,5,135,0,0,2087,2086,1,0,0,0,
        2087,2088,1,0,0,0,2088,2093,1,0,0,0,2089,2091,5,73,0,0,2090,2092,
        5,135,0,0,2091,2090,1,0,0,0,2091,2092,1,0,0,0,2092,2094,1,0,0,0,
        2093,2089,1,0,0,0,2093,2094,1,0,0,0,2094,2112,1,0,0,0,2095,2097,
        3,280,140,0,2096,2098,5,135,0,0,2097,2096,1,0,0,0,2097,2098,1,0,
        0,0,2098,2109,1,0,0,0,2099,2101,5,4,0,0,2100,2102,5,135,0,0,2101,
        2100,1,0,0,0,2101,2102,1,0,0,0,2102,2103,1,0,0,0,2103,2105,3,280,
        140,0,2104,2106,5,135,0,0,2105,2104,1,0,0,0,2105,2106,1,0,0,0,2106,
        2108,1,0,0,0,2107,2099,1,0,0,0,2108,2111,1,0,0,0,2109,2107,1,0,0,
        0,2109,2110,1,0,0,0,2110,2113,1,0,0,0,2111,2109,1,0,0,0,2112,2095,
        1,0,0,0,2112,2113,1,0,0,0,2113,2114,1,0,0,0,2114,2115,5,6,0,0,2115,
        279,1,0,0,0,2116,2117,3,220,110,0,2117,281,1,0,0,0,2118,2119,3,294,
        147,0,2119,2120,3,128,64,0,2120,283,1,0,0,0,2121,2123,5,102,0,0,
        2122,2124,5,135,0,0,2123,2122,1,0,0,0,2123,2124,1,0,0,0,2124,2125,
        1,0,0,0,2125,2127,5,7,0,0,2126,2128,5,135,0,0,2127,2126,1,0,0,0,
        2127,2128,1,0,0,0,2128,2137,1,0,0,0,2129,2138,3,136,68,0,2130,2135,
        3,192,96,0,2131,2133,5,135,0,0,2132,2131,1,0,0,0,2132,2133,1,0,0,
        0,2133,2134,1,0,0,0,2134,2136,3,190,95,0,2135,2132,1,0,0,0,2135,
        2136,1,0,0,0,2136,2138,1,0,0,0,2137,2129,1,0,0,0,2137,2130,1,0,0,
        0,2138,2140,1,0,0,0,2139,2141,5,135,0,0,2140,2139,1,0,0,0,2140,2141,
        1,0,0,0,2141,2142,1,0,0,0,2142,2143,5,9,0,0,2143,285,1,0,0,0,2144,
        2146,3,292,146,0,2145,2147,5,135,0,0,2146,2145,1,0,0,0,2146,2147,
        1,0,0,0,2147,2148,1,0,0,0,2148,2150,5,5,0,0,2149,2151,5,135,0,0,
        2150,2149,1,0,0,0,2150,2151,1,0,0,0,2151,2169,1,0,0,0,2152,2154,
        3,220,110,0,2153,2155,5,135,0,0,2154,2153,1,0,0,0,2154,2155,1,0,
        0,0,2155,2166,1,0,0,0,2156,2158,5,4,0,0,2157,2159,5,135,0,0,2158,
        2157,1,0,0,0,2158,2159,1,0,0,0,2159,2160,1,0,0,0,2160,2162,3,220,
        110,0,2161,2163,5,135,0,0,2162,2161,1,0,0,0,2162,2163,1,0,0,0,2163,
        2165,1,0,0,0,2164,2156,1,0,0,0,2165,2168,1,0,0,0,2166,2164,1,0,0,
        0,2166,2167,1,0,0,0,2167,2170,1,0,0,0,2168,2166,1,0,0,0,2169,2152,
        1,0,0,0,2169,2170,1,0,0,0,2170,2171,1,0,0,0,2171,2172,5,6,0,0,2172,
        287,1,0,0,0,2173,2174,3,292,146,0,2174,289,1,0,0,0,2175,2176,3,128,
        64,0,2176,291,1,0,0,0,2177,2178,3,294,147,0,2178,2179,3,128,64,0,
        2179,293,1,0,0,0,2180,2181,3,128,64,0,2181,2182,5,1,0,0,2182,2184,
        1,0,0,0,2183,2180,1,0,0,0,2184,2187,1,0,0,0,2185,2183,1,0,0,0,2185,
        2186,1,0,0,0,2186,295,1,0,0,0,2187,2185,1,0,0,0,2188,2189,3,128,
        64,0,2189,297,1,0,0,0,2190,2197,3,300,150,0,2191,2197,5,92,0,0,2192,
        2197,3,302,151,0,2193,2197,5,117,0,0,2194,2197,3,308,154,0,2195,
        2197,3,312,156,0,2196,2190,1,0,0,0,2196,2191,1,0,0,0,2196,2192,1,
        0,0,0,2196,2193,1,0,0,0,2196,2194,1,0,0,0,2196,2195,1,0,0,0,2197,
        299,1,0,0,0,2198,2199,7,7,0,0,2199,301,1,0,0,0,2200,2203,3,306,153,
        0,2201,2203,3,304,152,0,2202,2200,1,0,0,0,2202,2201,1,0,0,0,2203,
        303,1,0,0,0,2204,2205,7,8,0,0,2205,305,1,0,0,0,2206,2207,7,9,0,0,
        2207,307,1,0,0,0,2208,2210,5,10,0,0,2209,2211,5,135,0,0,2210,2209,
        1,0,0,0,2210,2211,1,0,0,0,2211,2229,1,0,0,0,2212,2214,3,310,155,
        0,2213,2215,5,135,0,0,2214,2213,1,0,0,0,2214,2215,1,0,0,0,2215,2226,
        1,0,0,0,2216,2218,5,4,0,0,2217,2219,5,135,0,0,2218,2217,1,0,0,0,
        2218,2219,1,0,0,0,2219,2220,1,0,0,0,2220,2222,3,310,155,0,2221,2223,
        5,135,0,0,2222,2221,1,0,0,0,2222,2223,1,0,0,0,2223,2225,1,0,0,0,
        2224,2216,1,0,0,0,2225,2228,1,0,0,0,2226,2224,1,0,0,0,2226,2227,
        1,0,0,0,2227,2230,1,0,0,0,2228,2226,1,0,0,0,2229,2212,1,0,0,0,2229,
        2230,1,0,0,0,2230,2231,1,0,0,0,2231,2232,5,11,0,0,2232,309,1,0,0,
        0,2233,2234,3,220,110,0,2234,311,1,0,0,0,2235,2237,5,7,0,0,2236,
        2238,5,135,0,0,2237,2236,1,0,0,0,2237,2238,1,0,0,0,2238,2250,1,0,
        0,0,2239,2247,3,314,157,0,2240,2242,5,4,0,0,2241,2243,5,135,0,0,
        2242,2241,1,0,0,0,2242,2243,1,0,0,0,2243,2244,1,0,0,0,2244,2246,
        3,314,157,0,2245,2240,1,0,0,0,2246,2249,1,0,0,0,2247,2245,1,0,0,
        0,2247,2248,1,0,0,0,2248,2251,1,0,0,0,2249,2247,1,0,0,0,2250,2239,
        1,0,0,0,2250,2251,1,0,0,0,2251,2252,1,0,0,0,2252,2253,5,9,0,0,2253,
        313,1,0,0,0,2254,2256,3,316,158,0,2255,2257,5,135,0,0,2256,2255,
        1,0,0,0,2256,2257,1,0,0,0,2257,2258,1,0,0,0,2258,2260,5,8,0,0,2259,
        2261,5,135,0,0,2260,2259,1,0,0,0,2260,2261,1,0,0,0,2261,2262,1,0,
        0,0,2262,2264,3,220,110,0,2263,2265,5,135,0,0,2264,2263,1,0,0,0,
        2264,2265,1,0,0,0,2265,315,1,0,0,0,2266,2267,3,320,160,0,2267,317,
        1,0,0,0,2268,2271,5,26,0,0,2269,2272,3,128,64,0,2270,2272,5,106,
        0,0,2271,2269,1,0,0,0,2271,2270,1,0,0,0,2272,319,1,0,0,0,2273,2276,
        3,128,64,0,2274,2276,3,130,65,0,2275,2273,1,0,0,0,2275,2274,1,0,
        0,0,2276,321,1,0,0,0,2277,2278,7,10,0,0,2278,323,1,0,0,0,2279,2280,
        7,11,0,0,2280,325,1,0,0,0,2281,2282,7,12,0,0,2282,327,1,0,0,0,404,
        331,335,339,343,347,349,352,355,363,366,369,373,379,382,389,392,
        397,403,406,411,415,421,425,431,435,441,445,451,455,459,465,468,
        472,478,481,485,489,493,498,505,510,514,518,522,526,531,538,543,
        547,553,559,563,569,575,579,585,589,594,598,602,606,612,616,622,
        626,628,632,634,638,640,644,646,652,656,663,671,674,680,684,686,
        689,693,697,699,703,707,709,713,715,718,722,724,728,730,739,743,
        747,749,753,760,764,768,778,783,786,789,791,794,800,805,815,819,
        823,827,831,834,851,861,871,876,880,887,891,897,913,917,921,926,
        930,934,936,954,957,964,978,982,986,991,995,1000,1004,1008,1010,
        1015,1019,1025,1031,1034,1038,1042,1044,1049,1054,1058,1061,1065,
        1070,1073,1076,1078,1081,1086,1093,1097,1101,1111,1118,1122,1125,
        1128,1136,1141,1148,1153,1156,1160,1164,1168,1174,1178,1183,1188,
        1192,1195,1197,1202,1208,1212,1217,1221,1226,1231,1235,1245,1252,
        1265,1269,1275,1279,1283,1288,1295,1299,1304,1311,1317,1322,1328,
        1331,1337,1339,1343,1347,1352,1356,1359,1366,1371,1374,1380,1383,
        1389,1393,1397,1401,1405,1410,1415,1419,1424,1427,1436,1445,1450,
        1463,1466,1474,1478,1483,1490,1495,1502,1506,1511,1515,1521,1525,
        1528,1531,1535,1541,1545,1548,1551,1557,1560,1563,1567,1573,1576,
        1579,1583,1587,1591,1595,1599,1602,1607,1612,1617,1622,1628,1632,
        1634,1638,1642,1644,1646,1654,1659,1670,1680,1690,1695,1699,1706,
        1710,1716,1729,1732,1739,1753,1757,1761,1766,1770,1774,1776,1789,
        1793,1798,1802,1807,1811,1815,1817,1822,1826,1832,1838,1841,1845,
        1850,1854,1857,1861,1870,1874,1878,1889,1893,1898,1902,1906,1911,
        1913,1916,1920,1923,1926,1932,1936,1940,1946,1950,1954,1957,1960,
        1966,1970,1974,1976,1980,1984,1986,1990,1994,2000,2004,2008,2014,
        2018,2022,2028,2032,2036,2042,2046,2050,2054,2058,2061,2067,2071,
        2083,2087,2091,2093,2097,2101,2105,2109,2112,2123,2127,2132,2135,
        2137,2140,2146,2150,2154,2158,2162,2166,2169,2185,2196,2202,2210,
        2214,2218,2222,2226,2229,2237,2242,2247,2250,2256,2260,2264,2271,
        2275
    ]

class s_cypherParser ( Parser ):

    grammarFileName = "s_cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "'='", "'+='", "','", "'('", "')'", 
                     "'{'", "':'", "'}'", "'['", "']'", "'..'", "'*'", "'/'", 
                     "'%'", "'^'", "'+'", "'-'", "'<>'", "'<'", "'<='", 
                     "'>'", "'>='", "';'", "'|'", "'$'", "'\\u27E8'", "'\\u3008'", 
                     "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
                     "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", 
                     "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", 
                     "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
                     "'\\uFF0D'", "<INVALID>", "<INVALID>", "'NOW'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "AtT", "PoundValue", "NOW", 
                      "AT_TIME", "SNAPSHOT", "BETWEEN", "SCOPE", "STALE", 
                      "DURING", "OVERLAPS", "UNION", "ALL", "OPTIONAL", 
                      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", 
                      "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", 
                      "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", 
                      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
                      "WHERE", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", 
                      "CONTAINS", "IN", "IS", "NULL", "COUNT", "CASE", "ELSE", 
                      "END", "WHEN", "THEN", "ANY", "NONE", "SINGLE", "EXISTS", 
                      "TRUE", "FALSE", "HexInteger", "DecimalInteger", "OctalInteger", 
                      "HexLetter", "HexDigit", "Digit", "NonZeroDigit", 
                      "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", 
                      "RegularDecimalReal", "StringLiteral", "EscapedChar", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Query = 0
    RULE_oC_Match = 1
    RULE_oC_UpdatingClause = 2
    RULE_oC_SetItem = 3
    RULE_s_SetPropertyItemOne = 4
    RULE_s_SetPropertyItemTwo = 5
    RULE_s_SetValueItem = 6
    RULE_s_SetValueItemExpression = 7
    RULE_s_Stale = 8
    RULE_s_StaleItem = 9
    RULE_oC_Delete = 10
    RULE_s_DeleteItem = 11
    RULE_s_AtTime = 12
    RULE_s_Between = 13
    RULE_s_TimeWindowLimit = 14
    RULE_s_Snapshot = 15
    RULE_s_Scope = 16
    RULE_oC_PatternPart = 17
    RULE_s_PathFunctionPattern = 18
    RULE_s_SinglePathPattern = 19
    RULE_oC_NodePattern = 20
    RULE_s_Properties = 21
    RULE_s_PropertiesPattern = 22
    RULE_s_PropertyNode = 23
    RULE_s_ValueNode = 24
    RULE_oC_RelationshipDetail = 25
    RULE_oC_StringListNullPredicateExpression = 26
    RULE_oC_ListOperatorExpression = 27
    RULE_s_SingleIndexExpression = 28
    RULE_s_DoubleIndexExpression = 29
    RULE_s_LeftExpression = 30
    RULE_s_RightExpression = 31
    RULE_s_AtTExpression = 32
    RULE_s_PropertyLookupTime = 33
    RULE_s_TimePredicateExpression = 34
    RULE_s_AtTElement = 35
    RULE_s_Where = 36
    RULE_s_WhereExpression = 37
    RULE_s_OrWhereExpression = 38
    RULE_s_XorWhereExpression = 39
    RULE_s_AndWhereExpression = 40
    RULE_s_NotWhereExpression = 41
    RULE_s_ComparisonWhereExpression = 42
    RULE_s_MultiplyDivideModuloWhereOperator = 43
    RULE_s_PowerOfWhereOperator = 44
    RULE_s_AddOrSubtractWhereOperator = 45
    RULE_s_ComparisonWhereOperator = 46
    RULE_s_StringListNullPredicateWhereExpression = 47
    RULE_s_AddOrSubtractWhereExpression = 48
    RULE_s_TimePredicateWhereExpression = 49
    RULE_s_StringPredicateWhereExpression = 50
    RULE_s_ListPredicateWhereExpression = 51
    RULE_s_NullPredicateWhereExpression = 52
    RULE_s_MultiplyDivideModuloWhereExpression = 53
    RULE_s_PowerOfWhereExpression = 54
    RULE_s_UnaryAddOrSubtractWhereExpression = 55
    RULE_s_ListOperatorWhereExpression = 56
    RULE_s_PropertyOrLabelsWhereExpression = 57
    RULE_s_AtTWhereExpression = 58
    RULE_s_SingleIndexWhereExpression = 59
    RULE_s_DoubleIndexWhereExpression = 60
    RULE_s_LeftWhereExpression = 61
    RULE_s_RightWhereExpression = 62
    RULE_s_TimePointLiteral = 63
    RULE_oC_SymbolicName = 64
    RULE_oC_ReservedWord = 65
    RULE_oC_Cypher = 66
    RULE_oC_Statement = 67
    RULE_oC_RegularQuery = 68
    RULE_oC_Union = 69
    RULE_oC_SingleQuery = 70
    RULE_oC_SinglePartQuery = 71
    RULE_oC_MultiPartQuery = 72
    RULE_s_WithPartQuery = 73
    RULE_oC_ReadingClause = 74
    RULE_oC_Unwind = 75
    RULE_oC_Merge = 76
    RULE_oC_MergeAction = 77
    RULE_oC_Create = 78
    RULE_oC_Set = 79
    RULE_oC_Remove = 80
    RULE_oC_RemoveItem = 81
    RULE_oC_InQueryCall = 82
    RULE_oC_StandaloneCall = 83
    RULE_oC_YieldItems = 84
    RULE_oC_YieldItem = 85
    RULE_oC_With = 86
    RULE_oC_Return = 87
    RULE_oC_ProjectionBody = 88
    RULE_oC_ProjectionItems = 89
    RULE_oC_ProjectionItem = 90
    RULE_oC_Order = 91
    RULE_oC_Skip = 92
    RULE_oC_Limit = 93
    RULE_oC_SortItem = 94
    RULE_oC_Where = 95
    RULE_oC_Pattern = 96
    RULE_oC_AnonymousPatternPart = 97
    RULE_oC_PatternElement = 98
    RULE_oC_RelationshipsPattern = 99
    RULE_oC_PatternElementChain = 100
    RULE_oC_RelationshipPattern = 101
    RULE_oC_Properties = 102
    RULE_oC_RelationshipTypes = 103
    RULE_oC_NodeLabels = 104
    RULE_oC_NodeLabel = 105
    RULE_oC_RangeLiteral = 106
    RULE_oC_LabelName = 107
    RULE_oC_RelTypeName = 108
    RULE_oC_PropertyExpression = 109
    RULE_oC_Expression = 110
    RULE_oC_OrExpression = 111
    RULE_oC_XorExpression = 112
    RULE_oC_AndExpression = 113
    RULE_oC_NotExpression = 114
    RULE_oC_ComparisonExpression = 115
    RULE_oC_StringPredicateExpression = 116
    RULE_oC_ListPredicateExpression = 117
    RULE_oC_NullPredicateExpression = 118
    RULE_oC_AddOrSubtractExpression = 119
    RULE_s_MultiplyDivideModuloOperator = 120
    RULE_s_PowerOfOperator = 121
    RULE_s_AddOrSubtractOperator = 122
    RULE_s_ComparisonOperator = 123
    RULE_oC_MultiplyDivideModuloExpression = 124
    RULE_oC_PowerOfExpression = 125
    RULE_oC_UnaryAddOrSubtractExpression = 126
    RULE_oC_PropertyOrLabelsExpression = 127
    RULE_oC_PropertyLookup = 128
    RULE_oC_Atom = 129
    RULE_oC_CaseExpression = 130
    RULE_oC_CaseAlternative = 131
    RULE_oC_ListComprehension = 132
    RULE_oC_PatternComprehension = 133
    RULE_oC_Quantifier = 134
    RULE_oC_FilterExpression = 135
    RULE_oC_PatternPredicate = 136
    RULE_oC_ParenthesizedExpression = 137
    RULE_oC_IdInColl = 138
    RULE_oC_FunctionInvocation = 139
    RULE_s_FunctionInvocationExpression = 140
    RULE_oC_FunctionName = 141
    RULE_oC_ExistentialSubquery = 142
    RULE_oC_ExplicitProcedureInvocation = 143
    RULE_oC_ImplicitProcedureInvocation = 144
    RULE_oC_ProcedureResultField = 145
    RULE_oC_ProcedureName = 146
    RULE_oC_Namespace = 147
    RULE_oC_Variable = 148
    RULE_oC_Literal = 149
    RULE_oC_BooleanLiteral = 150
    RULE_oC_NumberLiteral = 151
    RULE_oC_IntegerLiteral = 152
    RULE_oC_DoubleLiteral = 153
    RULE_oC_ListLiteral = 154
    RULE_s_ListLiteralExpression = 155
    RULE_oC_MapLiteral = 156
    RULE_s_MapKeyValue = 157
    RULE_oC_PropertyKeyName = 158
    RULE_oC_Parameter = 159
    RULE_oC_SchemaName = 160
    RULE_oC_LeftArrowHead = 161
    RULE_oC_RightArrowHead = 162
    RULE_oC_Dash = 163

    ruleNames =  [ "oC_Query", "oC_Match", "oC_UpdatingClause", "oC_SetItem", 
                   "s_SetPropertyItemOne", "s_SetPropertyItemTwo", "s_SetValueItem", 
                   "s_SetValueItemExpression", "s_Stale", "s_StaleItem", 
                   "oC_Delete", "s_DeleteItem", "s_AtTime", "s_Between", 
                   "s_TimeWindowLimit", "s_Snapshot", "s_Scope", "oC_PatternPart", 
                   "s_PathFunctionPattern", "s_SinglePathPattern", "oC_NodePattern", 
                   "s_Properties", "s_PropertiesPattern", "s_PropertyNode", 
                   "s_ValueNode", "oC_RelationshipDetail", "oC_StringListNullPredicateExpression", 
                   "oC_ListOperatorExpression", "s_SingleIndexExpression", 
                   "s_DoubleIndexExpression", "s_LeftExpression", "s_RightExpression", 
                   "s_AtTExpression", "s_PropertyLookupTime", "s_TimePredicateExpression", 
                   "s_AtTElement", "s_Where", "s_WhereExpression", "s_OrWhereExpression", 
                   "s_XorWhereExpression", "s_AndWhereExpression", "s_NotWhereExpression", 
                   "s_ComparisonWhereExpression", "s_MultiplyDivideModuloWhereOperator", 
                   "s_PowerOfWhereOperator", "s_AddOrSubtractWhereOperator", 
                   "s_ComparisonWhereOperator", "s_StringListNullPredicateWhereExpression", 
                   "s_AddOrSubtractWhereExpression", "s_TimePredicateWhereExpression", 
                   "s_StringPredicateWhereExpression", "s_ListPredicateWhereExpression", 
                   "s_NullPredicateWhereExpression", "s_MultiplyDivideModuloWhereExpression", 
                   "s_PowerOfWhereExpression", "s_UnaryAddOrSubtractWhereExpression", 
                   "s_ListOperatorWhereExpression", "s_PropertyOrLabelsWhereExpression", 
                   "s_AtTWhereExpression", "s_SingleIndexWhereExpression", 
                   "s_DoubleIndexWhereExpression", "s_LeftWhereExpression", 
                   "s_RightWhereExpression", "s_TimePointLiteral", "oC_SymbolicName", 
                   "oC_ReservedWord", "oC_Cypher", "oC_Statement", "oC_RegularQuery", 
                   "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", 
                   "s_WithPartQuery", "oC_ReadingClause", "oC_Unwind", "oC_Merge", 
                   "oC_MergeAction", "oC_Create", "oC_Set", "oC_Remove", 
                   "oC_RemoveItem", "oC_InQueryCall", "oC_StandaloneCall", 
                   "oC_YieldItems", "oC_YieldItem", "oC_With", "oC_Return", 
                   "oC_ProjectionBody", "oC_ProjectionItems", "oC_ProjectionItem", 
                   "oC_Order", "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Where", 
                   "oC_Pattern", "oC_AnonymousPatternPart", "oC_PatternElement", 
                   "oC_RelationshipsPattern", "oC_PatternElementChain", 
                   "oC_RelationshipPattern", "oC_Properties", "oC_RelationshipTypes", 
                   "oC_NodeLabels", "oC_NodeLabel", "oC_RangeLiteral", "oC_LabelName", 
                   "oC_RelTypeName", "oC_PropertyExpression", "oC_Expression", 
                   "oC_OrExpression", "oC_XorExpression", "oC_AndExpression", 
                   "oC_NotExpression", "oC_ComparisonExpression", "oC_StringPredicateExpression", 
                   "oC_ListPredicateExpression", "oC_NullPredicateExpression", 
                   "oC_AddOrSubtractExpression", "s_MultiplyDivideModuloOperator", 
                   "s_PowerOfOperator", "s_AddOrSubtractOperator", "s_ComparisonOperator", 
                   "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", 
                   "oC_UnaryAddOrSubtractExpression", "oC_PropertyOrLabelsExpression", 
                   "oC_PropertyLookup", "oC_Atom", "oC_CaseExpression", 
                   "oC_CaseAlternative", "oC_ListComprehension", "oC_PatternComprehension", 
                   "oC_Quantifier", "oC_FilterExpression", "oC_PatternPredicate", 
                   "oC_ParenthesizedExpression", "oC_IdInColl", "oC_FunctionInvocation", 
                   "s_FunctionInvocationExpression", "oC_FunctionName", 
                   "oC_ExistentialSubquery", "oC_ExplicitProcedureInvocation", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_Variable", "oC_Literal", 
                   "oC_BooleanLiteral", "oC_NumberLiteral", "oC_IntegerLiteral", 
                   "oC_DoubleLiteral", "oC_ListLiteral", "s_ListLiteralExpression", 
                   "oC_MapLiteral", "s_MapKeyValue", "oC_PropertyKeyName", 
                   "oC_Parameter", "oC_SchemaName", "oC_LeftArrowHead", 
                   "oC_RightArrowHead", "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    AtT=46
    PoundValue=47
    NOW=48
    AT_TIME=49
    SNAPSHOT=50
    BETWEEN=51
    SCOPE=52
    STALE=53
    DURING=54
    OVERLAPS=55
    UNION=56
    ALL=57
    OPTIONAL=58
    MATCH=59
    UNWIND=60
    AS=61
    MERGE=62
    ON=63
    CREATE=64
    SET=65
    DETACH=66
    DELETE=67
    REMOVE=68
    CALL=69
    YIELD=70
    WITH=71
    RETURN=72
    DISTINCT=73
    ORDER=74
    BY=75
    L_SKIP=76
    LIMIT=77
    ASCENDING=78
    ASC=79
    DESCENDING=80
    DESC=81
    WHERE=82
    OR=83
    XOR=84
    AND=85
    NOT=86
    STARTS=87
    ENDS=88
    CONTAINS=89
    IN=90
    IS=91
    NULL=92
    COUNT=93
    CASE=94
    ELSE=95
    END=96
    WHEN=97
    THEN=98
    ANY=99
    NONE=100
    SINGLE=101
    EXISTS=102
    TRUE=103
    FALSE=104
    HexInteger=105
    DecimalInteger=106
    OctalInteger=107
    HexLetter=108
    HexDigit=109
    Digit=110
    NonZeroDigit=111
    NonZeroOctDigit=112
    OctDigit=113
    ZeroDigit=114
    ExponentDecimalReal=115
    RegularDecimalReal=116
    StringLiteral=117
    EscapedChar=118
    CONSTRAINT=119
    DO=120
    FOR=121
    REQUIRE=122
    UNIQUE=123
    MANDATORY=124
    SCALAR=125
    OF=126
    ADD=127
    DROP=128
    FILTER=129
    EXTRACT=130
    UnescapedSymbolicName=131
    IdentifierStart=132
    IdentifierPart=133
    EscapedSymbolicName=134
    SP=135
    WHITESPACE=136
    Comment=137

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StandaloneCallContext,0)


        def s_TimeWindowLimit(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimeWindowLimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = s_cypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Query)
        try:
            self.state = 331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 328
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 329
                self.oC_StandaloneCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 330
                self.s_TimeWindowLimit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_Where(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = s_cypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 333
                self.match(s_cypherParser.OPTIONAL)
                self.state = 334
                self.match(s_cypherParser.SP)


            self.state = 337
            self.match(s_cypherParser.MATCH)
            self.state = 339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 338
                self.match(s_cypherParser.SP)


            self.state = 341
            self.oC_Pattern()
            self.state = 349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 342
                    self.match(s_cypherParser.SP)


                self.state = 347
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 345
                    self.s_AtTime()
                    pass
                elif token in [51]:
                    self.state = 346
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 355
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 351
                    self.match(s_cypherParser.SP)


                self.state = 354
                self.s_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Create(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CreateContext,0)


        def oC_Merge(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MergeContext,0)


        def oC_Delete(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DeleteContext,0)


        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RemoveContext,0)


        def s_Stale(self):
            return self.getTypedRuleContext(s_cypherParser.S_StaleContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = s_cypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_UpdatingClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.state = 357
                self.oC_Create()
                pass
            elif token in [62]:
                self.state = 358
                self.oC_Merge()
                pass
            elif token in [66, 67]:
                self.state = 359
                self.oC_Delete()
                pass
            elif token in [65]:
                self.state = 360
                self.oC_Set()
                pass
            elif token in [68]:
                self.state = 361
                self.oC_Remove()
                pass
            elif token in [53]:
                self.state = 362
                self.s_Stale()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 369
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 366
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 365
                    self.match(s_cypherParser.SP)


                self.state = 368
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_SetPropertyItemOne(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemOneContext,0)


        def s_SetPropertyItemTwo(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemTwoContext,0)


        def s_SetValueItem(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetValueItemContext,0)


        def s_SetValueItemExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetValueItemExpressionContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = s_cypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 371
                self.oC_Variable()
                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 372
                    self.match(s_cypherParser.SP)


                self.state = 375
                self.s_AtTElement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 377
                self.oC_Variable()
                self.state = 382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 379
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 378
                        self.match(s_cypherParser.SP)


                    self.state = 381
                    self.s_AtTElement()


                self.state = 384
                self.match(s_cypherParser.T__0)
                self.state = 385
                self.s_SetPropertyItemOne()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 387
                self.oC_Variable()
                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 389
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 388
                        self.match(s_cypherParser.SP)


                    self.state = 391
                    self.s_AtTElement()


                self.state = 394
                self.match(s_cypherParser.T__0)
                self.state = 395
                self.s_SetPropertyItemTwo()
                self.state = 397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 396
                    self.match(s_cypherParser.SP)


                self.state = 399
                self.s_SetValueItem()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 401
                self.oC_Variable()
                self.state = 406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 403
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 402
                        self.match(s_cypherParser.SP)


                    self.state = 405
                    self.s_AtTElement()


                self.state = 408
                self.match(s_cypherParser.T__0)
                self.state = 409
                self.s_SetPropertyItemTwo()
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 410
                    self.match(s_cypherParser.SP)


                self.state = 413
                self.match(s_cypherParser.T__1)
                self.state = 415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 414
                    self.match(s_cypherParser.SP)


                self.state = 417
                self.s_SetValueItemExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 419
                self.oC_PropertyExpression()
                self.state = 421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 420
                    self.match(s_cypherParser.SP)


                self.state = 423
                self.match(s_cypherParser.T__1)
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 424
                    self.match(s_cypherParser.SP)


                self.state = 427
                self.oC_Expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 429
                self.oC_Variable()
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 430
                    self.match(s_cypherParser.SP)


                self.state = 433
                self.match(s_cypherParser.T__1)
                self.state = 435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 434
                    self.match(s_cypherParser.SP)


                self.state = 437
                self.oC_Expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 439
                self.oC_Variable()
                self.state = 441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 440
                    self.match(s_cypherParser.SP)


                self.state = 443
                self.match(s_cypherParser.T__2)
                self.state = 445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 444
                    self.match(s_cypherParser.SP)


                self.state = 447
                self.oC_Expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 449
                self.oC_Variable()
                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 450
                    self.match(s_cypherParser.SP)


                self.state = 453
                self.oC_NodeLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemOneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemOne

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemOne" ):
                listener.enterS_SetPropertyItemOne(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemOne" ):
                listener.exitS_SetPropertyItemOne(self)




    def s_SetPropertyItemOne(self):

        localctx = s_cypherParser.S_SetPropertyItemOneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_s_SetPropertyItemOne)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 457
            self.oC_PropertyKeyName()
            self.state = 459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 458
                self.match(s_cypherParser.SP)


            self.state = 461
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemTwoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemTwo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemTwo" ):
                listener.enterS_SetPropertyItemTwo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemTwo" ):
                listener.exitS_SetPropertyItemTwo(self)




    def s_SetPropertyItemTwo(self):

        localctx = s_cypherParser.S_SetPropertyItemTwoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_s_SetPropertyItemTwo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.oC_PropertyKeyName()
            self.state = 468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 464
                    self.match(s_cypherParser.SP)


                self.state = 467
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetValueItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetValueItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetValueItem" ):
                listener.enterS_SetValueItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetValueItem" ):
                listener.exitS_SetValueItem(self)




    def s_SetValueItem(self):

        localctx = s_cypherParser.S_SetValueItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_s_SetValueItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(s_cypherParser.PoundValue)
            self.state = 472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 471
                self.match(s_cypherParser.SP)


            self.state = 474
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetValueItemExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetValueItemExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetValueItemExpression" ):
                listener.enterS_SetValueItemExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetValueItemExpression" ):
                listener.exitS_SetValueItemExpression(self)




    def s_SetValueItemExpression(self):

        localctx = s_cypherParser.S_SetValueItemExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_s_SetValueItemExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self.oC_Expression()
            self.state = 481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 477
                    self.match(s_cypherParser.SP)


                self.state = 480
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def s_StaleItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StaleItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StaleItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Stale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Stale" ):
                listener.enterS_Stale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Stale" ):
                listener.exitS_Stale(self)




    def s_Stale(self):

        localctx = s_cypherParser.S_StaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_s_Stale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.match(s_cypherParser.STALE)
            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 484
                self.match(s_cypherParser.SP)


            self.state = 487
            self.s_StaleItem()
            self.state = 498
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 489
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 488
                        self.match(s_cypherParser.SP)


                    self.state = 491
                    self.match(s_cypherParser.T__3)
                    self.state = 493
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 492
                        self.match(s_cypherParser.SP)


                    self.state = 495
                    self.s_StaleItem() 
                self.state = 500
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StaleItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StaleItem" ):
                listener.enterS_StaleItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StaleItem" ):
                listener.exitS_StaleItem(self)




    def s_StaleItem(self):

        localctx = s_cypherParser.S_StaleItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_s_StaleItem)
        self._la = 0 # Token type
        try:
            self.state = 510
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 501
                self.oC_Expression()
                self.state = 502
                self.match(s_cypherParser.T__0)
                self.state = 503
                self.oC_PropertyKeyName()
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 504
                    self.match(s_cypherParser.SP)


                self.state = 507
                self.match(s_cypherParser.PoundValue)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 509
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def s_DeleteItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DeleteItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DeleteItemContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = s_cypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 512
                self.match(s_cypherParser.DETACH)
                self.state = 513
                self.match(s_cypherParser.SP)


            self.state = 516
            self.match(s_cypherParser.DELETE)
            self.state = 518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 517
                self.match(s_cypherParser.SP)


            self.state = 520
            self.s_DeleteItem()
            self.state = 531
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 522
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 521
                        self.match(s_cypherParser.SP)


                    self.state = 524
                    self.match(s_cypherParser.T__3)
                    self.state = 526
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 525
                        self.match(s_cypherParser.SP)


                    self.state = 528
                    self.s_DeleteItem() 
                self.state = 533
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DeleteItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DeleteItem" ):
                listener.enterS_DeleteItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DeleteItem" ):
                listener.exitS_DeleteItem(self)




    def s_DeleteItem(self):

        localctx = s_cypherParser.S_DeleteItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_s_DeleteItem)
        self._la = 0 # Token type
        try:
            self.state = 543
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 534
                self.oC_Expression()
                self.state = 535
                self.match(s_cypherParser.T__0)
                self.state = 536
                self.oC_PropertyKeyName()
                self.state = 538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 537
                    self.match(s_cypherParser.SP)


                self.state = 540
                self.match(s_cypherParser.PoundValue)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 542
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTime" ):
                listener.enterS_AtTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTime" ):
                listener.exitS_AtTime(self)




    def s_AtTime(self):

        localctx = s_cypherParser.S_AtTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_s_AtTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self.match(s_cypherParser.AT_TIME)
            self.state = 547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 546
                self.match(s_cypherParser.SP)


            self.state = 549
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_BetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Between

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Between" ):
                listener.enterS_Between(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Between" ):
                listener.exitS_Between(self)




    def s_Between(self):

        localctx = s_cypherParser.S_BetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_s_Between)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(s_cypherParser.BETWEEN)
            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 552
                self.match(s_cypherParser.SP)


            self.state = 555
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimeWindowLimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_Snapshot(self):
            return self.getTypedRuleContext(s_cypherParser.S_SnapshotContext,0)


        def s_Scope(self):
            return self.getTypedRuleContext(s_cypherParser.S_ScopeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimeWindowLimit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimeWindowLimit" ):
                listener.enterS_TimeWindowLimit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimeWindowLimit" ):
                listener.exitS_TimeWindowLimit(self)




    def s_TimeWindowLimit(self):

        localctx = s_cypherParser.S_TimeWindowLimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_s_TimeWindowLimit)
        try:
            self.state = 559
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 557
                self.s_Snapshot()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 558
                self.s_Scope()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SnapshotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Snapshot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Snapshot" ):
                listener.enterS_Snapshot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Snapshot" ):
                listener.exitS_Snapshot(self)




    def s_Snapshot(self):

        localctx = s_cypherParser.S_SnapshotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_s_Snapshot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.match(s_cypherParser.SNAPSHOT)
            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 562
                self.match(s_cypherParser.SP)


            self.state = 565
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Scope" ):
                listener.enterS_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Scope" ):
                listener.exitS_Scope(self)




    def s_Scope(self):

        localctx = s_cypherParser.S_ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_s_Scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self.match(s_cypherParser.SCOPE)
            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 568
                self.match(s_cypherParser.SP)


            self.state = 571
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_PathFunctionPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PathFunctionPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AnonymousPatternPartContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = s_cypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 594
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 573
                self.oC_Variable()
                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 574
                    self.match(s_cypherParser.SP)


                self.state = 577
                self.match(s_cypherParser.T__1)
                self.state = 579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 578
                    self.match(s_cypherParser.SP)


                self.state = 581
                self.s_PathFunctionPattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 583
                self.oC_Variable()
                self.state = 585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 584
                    self.match(s_cypherParser.SP)


                self.state = 587
                self.match(s_cypherParser.T__1)
                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 588
                    self.match(s_cypherParser.SP)


                self.state = 591
                self.oC_AnonymousPatternPart()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 593
                self.oC_AnonymousPatternPart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PathFunctionPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def s_SinglePathPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_SinglePathPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PathFunctionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PathFunctionPattern" ):
                listener.enterS_PathFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PathFunctionPattern" ):
                listener.exitS_PathFunctionPattern(self)




    def s_PathFunctionPattern(self):

        localctx = s_cypherParser.S_PathFunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_s_PathFunctionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.oC_FunctionName()
            self.state = 598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 597
                self.match(s_cypherParser.SP)


            self.state = 600
            self.match(s_cypherParser.T__4)
            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 601
                self.match(s_cypherParser.SP)


            self.state = 604
            self.s_SinglePathPattern()
            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 605
                self.match(s_cypherParser.SP)


            self.state = 608
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SinglePathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodePatternContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,i)


        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SinglePathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SinglePathPattern" ):
                listener.enterS_SinglePathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SinglePathPattern" ):
                listener.exitS_SinglePathPattern(self)




    def s_SinglePathPattern(self):

        localctx = s_cypherParser.S_SinglePathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_s_SinglePathPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self.oC_NodePattern()
            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 611
                self.match(s_cypherParser.SP)


            self.state = 614
            self.oC_RelationshipPattern()
            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 615
                self.match(s_cypherParser.SP)


            self.state = 618
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def s_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = s_cypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self.match(s_cypherParser.T__4)
            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 621
                self.match(s_cypherParser.SP)


            self.state = 628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 624
                self.oC_Variable()
                self.state = 626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 625
                    self.match(s_cypherParser.SP)




            self.state = 634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 630
                self.oC_NodeLabels()
                self.state = 632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 631
                    self.match(s_cypherParser.SP)




            self.state = 640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 636
                self.s_AtTElement()
                self.state = 638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 637
                    self.match(s_cypherParser.SP)




            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==26:
                self.state = 642
                self.s_Properties()
                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 643
                    self.match(s_cypherParser.SP)




            self.state = 648
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertiesPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesPatternContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Properties" ):
                listener.enterS_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Properties" ):
                listener.exitS_Properties(self)




    def s_Properties(self):

        localctx = s_cypherParser.S_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_s_Properties)
        try:
            self.state = 652
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 650
                self.s_PropertiesPattern()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 651
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_PropertyNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PropertyNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PropertyNodeContext,i)


        def s_ValueNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ValueNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ValueNodeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertiesPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertiesPattern" ):
                listener.enterS_PropertiesPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertiesPattern" ):
                listener.exitS_PropertiesPattern(self)




    def s_PropertiesPattern(self):

        localctx = s_cypherParser.S_PropertiesPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_s_PropertiesPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.match(s_cypherParser.T__6)
            self.state = 656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 655
                self.match(s_cypherParser.SP)


            self.state = 674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 658
                self.s_PropertyNode()
                self.state = 659
                self.match(s_cypherParser.T__7)
                self.state = 660
                self.s_ValueNode()
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 661
                    self.match(s_cypherParser.T__3)
                    self.state = 663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 662
                        self.match(s_cypherParser.SP)


                    self.state = 665
                    self.s_PropertyNode()
                    self.state = 666
                    self.match(s_cypherParser.T__7)
                    self.state = 667
                    self.s_ValueNode()
                    self.state = 673
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 676
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyNode" ):
                listener.enterS_PropertyNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyNode" ):
                listener.exitS_PropertyNode(self)




    def s_PropertyNode(self):

        localctx = s_cypherParser.S_PropertyNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_s_PropertyNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.oC_PropertyKeyName()
            self.state = 680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 679
                self.match(s_cypherParser.SP)


            self.state = 686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 682
                self.s_AtTElement()
                self.state = 684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 683
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ValueNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ValueNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ValueNode" ):
                listener.enterS_ValueNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ValueNode" ):
                listener.exitS_ValueNode(self)




    def s_ValueNode(self):

        localctx = s_cypherParser.S_ValueNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_s_ValueNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 688
                self.match(s_cypherParser.SP)


            self.state = 691
            self.oC_Expression()
            self.state = 693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 692
                self.match(s_cypherParser.SP)


            self.state = 699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 695
                self.s_AtTElement()
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 696
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RangeLiteralContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = s_cypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self.match(s_cypherParser.T__9)
            self.state = 703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 702
                self.match(s_cypherParser.SP)


            self.state = 709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 705
                self.oC_Variable()
                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 706
                    self.match(s_cypherParser.SP)




            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 711
                self.oC_RelationshipTypes()
                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 712
                    self.match(s_cypherParser.SP)




            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 717
                self.oC_RangeLiteral()


            self.state = 724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 720
                self.s_AtTElement()
                self.state = 722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 721
                    self.match(s_cypherParser.SP)




            self.state = 730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==26:
                self.state = 726
                self.oC_Properties()
                self.state = 728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 727
                    self.match(s_cypherParser.SP)




            self.state = 732
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def s_TimePredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateExpressionContext,0)


        def oC_StringPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringPredicateExpressionContext,0)


        def oC_ListPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListPredicateExpressionContext,0)


        def oC_NullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NullPredicateExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringListNullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullPredicateExpression" ):
                listener.enterOC_StringListNullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullPredicateExpression" ):
                listener.exitOC_StringListNullPredicateExpression(self)




    def oC_StringListNullPredicateExpression(self):

        localctx = s_cypherParser.OC_StringListNullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_oC_StringListNullPredicateExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.oC_AddOrSubtractExpression()
            self.state = 739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 735
                self.s_TimePredicateExpression()

            elif la_ == 2:
                self.state = 736
                self.oC_StringPredicateExpression()

            elif la_ == 3:
                self.state = 737
                self.oC_ListPredicateExpression()

            elif la_ == 4:
                self.state = 738
                self.oC_NullPredicateExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def s_AtTExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTExpressionContext,0)


        def s_SingleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_SingleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_SingleIndexExpressionContext,i)


        def s_DoubleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DoubleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DoubleIndexExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = s_cypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_oC_ListOperatorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 741
                self.oC_PropertyOrLabelsExpression()
                pass

            elif la_ == 2:
                self.state = 742
                self.s_AtTExpression()
                pass


            self.state = 749
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 747
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                    if la_ == 1:
                        self.state = 745
                        self.s_SingleIndexExpression()
                        pass

                    elif la_ == 2:
                        self.state = 746
                        self.s_DoubleIndexExpression()
                        pass

             
                self.state = 751
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SingleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SingleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SingleIndexExpression" ):
                listener.enterS_SingleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SingleIndexExpression" ):
                listener.exitS_SingleIndexExpression(self)




    def s_SingleIndexExpression(self):

        localctx = s_cypherParser.S_SingleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_s_SingleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 752
                self.match(s_cypherParser.SP)


            self.state = 755
            self.match(s_cypherParser.T__9)
            self.state = 756
            self.s_LeftExpression()
            self.state = 757
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DoubleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def s_RightExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_RightExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DoubleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DoubleIndexExpression" ):
                listener.enterS_DoubleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DoubleIndexExpression" ):
                listener.exitS_DoubleIndexExpression(self)




    def s_DoubleIndexExpression(self):

        localctx = s_cypherParser.S_DoubleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_s_DoubleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 759
                self.match(s_cypherParser.SP)


            self.state = 762
            self.match(s_cypherParser.T__9)
            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120069792) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 763
                self.s_LeftExpression()


            self.state = 766
            self.match(s_cypherParser.T__11)
            self.state = 768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120069792) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 767
                self.s_RightExpression()


            self.state = 770
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_LeftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_LeftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_LeftExpression" ):
                listener.enterS_LeftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_LeftExpression" ):
                listener.exitS_LeftExpression(self)




    def s_LeftExpression(self):

        localctx = s_cypherParser.S_LeftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_s_LeftExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_RightExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_RightExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_RightExpression" ):
                listener.enterS_RightExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_RightExpression" ):
                listener.exitS_RightExpression(self)




    def s_RightExpression(self):

        localctx = s_cypherParser.S_RightExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_s_RightExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def s_PropertyLookupTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupTimeContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTExpression" ):
                listener.enterS_AtTExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTExpression" ):
                listener.exitS_AtTExpression(self)




    def s_AtTExpression(self):

        localctx = s_cypherParser.S_AtTExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_s_AtTExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self.oC_Atom()
            self.state = 791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 781 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 778
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 777
                            self.match(s_cypherParser.SP)


                        self.state = 780
                        self.oC_PropertyLookup()

                    else:
                        raise NoViableAltException(self)
                    self.state = 783 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

                self.state = 789
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 786
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 785
                        self.match(s_cypherParser.SP)


                    self.state = 788
                    self.match(s_cypherParser.PoundValue)




            self.state = 794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 793
                self.match(s_cypherParser.SP)


            self.state = 796
            self.s_PropertyLookupTime()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyLookupTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyLookupTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyLookupTime" ):
                listener.enterS_PropertyLookupTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyLookupTime" ):
                listener.exitS_PropertyLookupTime(self)




    def s_PropertyLookupTime(self):

        localctx = s_cypherParser.S_PropertyLookupTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_s_PropertyLookupTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(s_cypherParser.AtT)
            self.state = 805
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 800
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 799
                        self.match(s_cypherParser.SP)


                    self.state = 802
                    self.oC_PropertyLookup() 
                self.state = 807
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateExpression" ):
                listener.enterS_TimePredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateExpression" ):
                listener.exitS_TimePredicateExpression(self)




    def s_TimePredicateExpression(self):

        localctx = s_cypherParser.S_TimePredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_s_TimePredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.match(s_cypherParser.SP)
            self.state = 809
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 810
            self.match(s_cypherParser.SP)
            self.state = 811
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_TimePointLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_TimePointLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_TimePointLiteralContext,i)


        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTElement" ):
                listener.enterS_AtTElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTElement" ):
                listener.exitS_AtTElement(self)




    def s_AtTElement(self):

        localctx = s_cypherParser.S_AtTElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_s_AtTElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(s_cypherParser.AtT)
            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 814
                self.match(s_cypherParser.SP)


            self.state = 817
            self.match(s_cypherParser.T__4)
            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 818
                self.match(s_cypherParser.SP)


            self.state = 821
            self.s_TimePointLiteral()
            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 822
                self.match(s_cypherParser.SP)


            self.state = 825
            self.match(s_cypherParser.T__3)
            self.state = 827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 826
                self.match(s_cypherParser.SP)


            self.state = 831
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 117]:
                self.state = 829
                self.s_TimePointLiteral()
                pass
            elif token in [48]:
                self.state = 830
                self.match(s_cypherParser.NOW)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 833
                self.match(s_cypherParser.SP)


            self.state = 836
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def s_WhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Where" ):
                listener.enterS_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Where" ):
                listener.exitS_Where(self)




    def s_Where(self):

        localctx = s_cypherParser.S_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_s_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.match(s_cypherParser.WHERE)
            self.state = 839
            self.match(s_cypherParser.SP)
            self.state = 840
            self.s_WhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_OrWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_OrWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_WhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_WhereExpression" ):
                listener.enterS_WhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_WhereExpression" ):
                listener.exitS_WhereExpression(self)




    def s_WhereExpression(self):

        localctx = s_cypherParser.S_WhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_s_WhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self.s_OrWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_OrWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_XorWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_XorWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_XorWhereExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_OrWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_OrWhereExpression" ):
                listener.enterS_OrWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_OrWhereExpression" ):
                listener.exitS_OrWhereExpression(self)




    def s_OrWhereExpression(self):

        localctx = s_cypherParser.S_OrWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_s_OrWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 844
            self.s_XorWhereExpression()
            self.state = 851
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 845
                    self.match(s_cypherParser.SP)
                    self.state = 846
                    self.match(s_cypherParser.OR)
                    self.state = 847
                    self.match(s_cypherParser.SP)
                    self.state = 848
                    self.s_XorWhereExpression() 
                self.state = 853
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_XorWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_AndWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AndWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AndWhereExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_XorWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_XorWhereExpression" ):
                listener.enterS_XorWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_XorWhereExpression" ):
                listener.exitS_XorWhereExpression(self)




    def s_XorWhereExpression(self):

        localctx = s_cypherParser.S_XorWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_s_XorWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.s_AndWhereExpression()
            self.state = 861
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 855
                    self.match(s_cypherParser.SP)
                    self.state = 856
                    self.match(s_cypherParser.XOR)
                    self.state = 857
                    self.match(s_cypherParser.SP)
                    self.state = 858
                    self.s_AndWhereExpression() 
                self.state = 863
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AndWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_NotWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_NotWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_NotWhereExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AndWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AndWhereExpression" ):
                listener.enterS_AndWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AndWhereExpression" ):
                listener.exitS_AndWhereExpression(self)




    def s_AndWhereExpression(self):

        localctx = s_cypherParser.S_AndWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_s_AndWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.s_NotWhereExpression()
            self.state = 871
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 865
                    self.match(s_cypherParser.SP)
                    self.state = 866
                    self.match(s_cypherParser.AND)
                    self.state = 867
                    self.match(s_cypherParser.SP)
                    self.state = 868
                    self.s_NotWhereExpression() 
                self.state = 873
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_NotWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_ComparisonWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_ComparisonWhereExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_NotWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_NotWhereExpression" ):
                listener.enterS_NotWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_NotWhereExpression" ):
                listener.exitS_NotWhereExpression(self)




    def s_NotWhereExpression(self):

        localctx = s_cypherParser.S_NotWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_s_NotWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 874
                self.match(s_cypherParser.NOT)
                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 875
                    self.match(s_cypherParser.SP)


                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 883
            self.s_ComparisonWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ComparisonWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_StringListNullPredicateWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StringListNullPredicateWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StringListNullPredicateWhereExpressionContext,i)


        def s_ComparisonWhereOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ComparisonWhereOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ComparisonWhereOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ComparisonWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ComparisonWhereExpression" ):
                listener.enterS_ComparisonWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ComparisonWhereExpression" ):
                listener.exitS_ComparisonWhereExpression(self)




    def s_ComparisonWhereExpression(self):

        localctx = s_cypherParser.S_ComparisonWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_s_ComparisonWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.s_StringListNullPredicateWhereExpression()
            self.state = 897
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,123,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 887
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 886
                        self.match(s_cypherParser.SP)


                    self.state = 889
                    self.s_ComparisonWhereOperator()
                    self.state = 891
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 890
                        self.match(s_cypherParser.SP)


                    self.state = 893
                    self.s_StringListNullPredicateWhereExpression() 
                self.state = 899
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,123,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MultiplyDivideModuloWhereOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MultiplyDivideModuloWhereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MultiplyDivideModuloWhereOperator" ):
                listener.enterS_MultiplyDivideModuloWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MultiplyDivideModuloWhereOperator" ):
                listener.exitS_MultiplyDivideModuloWhereOperator(self)




    def s_MultiplyDivideModuloWhereOperator(self):

        localctx = s_cypherParser.S_MultiplyDivideModuloWhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_s_MultiplyDivideModuloWhereOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 57344) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PowerOfWhereOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PowerOfWhereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PowerOfWhereOperator" ):
                listener.enterS_PowerOfWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PowerOfWhereOperator" ):
                listener.exitS_PowerOfWhereOperator(self)




    def s_PowerOfWhereOperator(self):

        localctx = s_cypherParser.S_PowerOfWhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_s_PowerOfWhereOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            self.match(s_cypherParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AddOrSubtractWhereOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AddOrSubtractWhereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AddOrSubtractWhereOperator" ):
                listener.enterS_AddOrSubtractWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AddOrSubtractWhereOperator" ):
                listener.exitS_AddOrSubtractWhereOperator(self)




    def s_AddOrSubtractWhereOperator(self):

        localctx = s_cypherParser.S_AddOrSubtractWhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_s_AddOrSubtractWhereOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            _la = self._input.LA(1)
            if not(_la==17 or _la==18):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ComparisonWhereOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ComparisonWhereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ComparisonWhereOperator" ):
                listener.enterS_ComparisonWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ComparisonWhereOperator" ):
                listener.exitS_ComparisonWhereOperator(self)




    def s_ComparisonWhereOperator(self):

        localctx = s_cypherParser.S_ComparisonWhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_s_ComparisonWhereOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 16252932) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StringListNullPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def s_TimePredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateWhereExpressionContext,0)


        def s_StringPredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_StringPredicateWhereExpressionContext,0)


        def s_ListPredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_ListPredicateWhereExpressionContext,0)


        def s_NullPredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_NullPredicateWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StringListNullPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StringListNullPredicateWhereExpression" ):
                listener.enterS_StringListNullPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StringListNullPredicateWhereExpression" ):
                listener.exitS_StringListNullPredicateWhereExpression(self)




    def s_StringListNullPredicateWhereExpression(self):

        localctx = s_cypherParser.S_StringListNullPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_s_StringListNullPredicateWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908
            self.s_AddOrSubtractWhereExpression()
            self.state = 913
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 909
                self.s_TimePredicateWhereExpression()

            elif la_ == 2:
                self.state = 910
                self.s_StringPredicateWhereExpression()

            elif la_ == 3:
                self.state = 911
                self.s_ListPredicateWhereExpression()

            elif la_ == 4:
                self.state = 912
                self.s_NullPredicateWhereExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AddOrSubtractWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_MultiplyDivideModuloWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MultiplyDivideModuloWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MultiplyDivideModuloWhereExpressionContext,i)


        def s_AddOrSubtractWhereOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AddOrSubtractWhereOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AddOrSubtractWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AddOrSubtractWhereExpression" ):
                listener.enterS_AddOrSubtractWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AddOrSubtractWhereExpression" ):
                listener.exitS_AddOrSubtractWhereExpression(self)




    def s_AddOrSubtractWhereExpression(self):

        localctx = s_cypherParser.S_AddOrSubtractWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_s_AddOrSubtractWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.s_MultiplyDivideModuloWhereExpression()
            self.state = 936
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 934
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                    if la_ == 1:
                        self.state = 917
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 916
                            self.match(s_cypherParser.SP)


                        self.state = 919
                        self.s_AddOrSubtractWhereOperator()
                        self.state = 921
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 920
                            self.match(s_cypherParser.SP)


                        self.state = 923
                        self.s_MultiplyDivideModuloWhereExpression()
                        pass

                    elif la_ == 2:
                        self.state = 926
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 925
                            self.match(s_cypherParser.SP)


                        self.state = 928
                        self.s_AddOrSubtractWhereOperator()
                        self.state = 930
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 929
                            self.match(s_cypherParser.SP)


                        self.state = 932
                        self.s_MultiplyDivideModuloWhereExpression()
                        pass

             
                self.state = 938
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateWhereExpression" ):
                listener.enterS_TimePredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateWhereExpression" ):
                listener.exitS_TimePredicateWhereExpression(self)




    def s_TimePredicateWhereExpression(self):

        localctx = s_cypherParser.S_TimePredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_s_TimePredicateWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 939
            self.match(s_cypherParser.SP)
            self.state = 940
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 941
            self.match(s_cypherParser.SP)
            self.state = 942
            self.s_AddOrSubtractWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StringPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StringPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StringPredicateWhereExpression" ):
                listener.enterS_StringPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StringPredicateWhereExpression" ):
                listener.exitS_StringPredicateWhereExpression(self)




    def s_StringPredicateWhereExpression(self):

        localctx = s_cypherParser.S_StringPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_s_StringPredicateWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 944
                self.match(s_cypherParser.SP)
                self.state = 945
                self.match(s_cypherParser.STARTS)
                self.state = 946
                self.match(s_cypherParser.SP)
                self.state = 947
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 948
                self.match(s_cypherParser.SP)
                self.state = 949
                self.match(s_cypherParser.ENDS)
                self.state = 950
                self.match(s_cypherParser.SP)
                self.state = 951
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 952
                self.match(s_cypherParser.SP)
                self.state = 953
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 956
                self.match(s_cypherParser.SP)


            self.state = 959
            self.s_AddOrSubtractWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ListPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ListPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ListPredicateWhereExpression" ):
                listener.enterS_ListPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ListPredicateWhereExpression" ):
                listener.exitS_ListPredicateWhereExpression(self)




    def s_ListPredicateWhereExpression(self):

        localctx = s_cypherParser.S_ListPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_s_ListPredicateWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            self.match(s_cypherParser.SP)
            self.state = 962
            self.match(s_cypherParser.IN)
            self.state = 964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 963
                self.match(s_cypherParser.SP)


            self.state = 966
            self.s_AddOrSubtractWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_NullPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_NullPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_NullPredicateWhereExpression" ):
                listener.enterS_NullPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_NullPredicateWhereExpression" ):
                listener.exitS_NullPredicateWhereExpression(self)




    def s_NullPredicateWhereExpression(self):

        localctx = s_cypherParser.S_NullPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_s_NullPredicateWhereExpression)
        try:
            self.state = 978
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 968
                self.match(s_cypherParser.SP)
                self.state = 969
                self.match(s_cypherParser.IS)
                self.state = 970
                self.match(s_cypherParser.SP)
                self.state = 971
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 972
                self.match(s_cypherParser.SP)
                self.state = 973
                self.match(s_cypherParser.IS)
                self.state = 974
                self.match(s_cypherParser.SP)
                self.state = 975
                self.match(s_cypherParser.NOT)
                self.state = 976
                self.match(s_cypherParser.SP)
                self.state = 977
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MultiplyDivideModuloWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PowerOfWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PowerOfWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PowerOfWhereExpressionContext,i)


        def s_MultiplyDivideModuloWhereOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MultiplyDivideModuloWhereOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MultiplyDivideModuloWhereOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MultiplyDivideModuloWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MultiplyDivideModuloWhereExpression" ):
                listener.enterS_MultiplyDivideModuloWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MultiplyDivideModuloWhereExpression" ):
                listener.exitS_MultiplyDivideModuloWhereExpression(self)




    def s_MultiplyDivideModuloWhereExpression(self):

        localctx = s_cypherParser.S_MultiplyDivideModuloWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_s_MultiplyDivideModuloWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            self.s_PowerOfWhereExpression()
            self.state = 1010
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,142,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1008
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                    if la_ == 1:
                        self.state = 982
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 981
                            self.match(s_cypherParser.SP)


                        self.state = 984
                        self.s_MultiplyDivideModuloWhereOperator()
                        self.state = 986
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 985
                            self.match(s_cypherParser.SP)


                        self.state = 988
                        self.s_PowerOfWhereExpression()
                        pass

                    elif la_ == 2:
                        self.state = 991
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 990
                            self.match(s_cypherParser.SP)


                        self.state = 993
                        self.s_MultiplyDivideModuloWhereOperator()
                        self.state = 995
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 994
                            self.match(s_cypherParser.SP)


                        self.state = 997
                        self.s_PowerOfWhereExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1000
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 999
                            self.match(s_cypherParser.SP)


                        self.state = 1002
                        self.s_MultiplyDivideModuloWhereOperator()
                        self.state = 1004
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1003
                            self.match(s_cypherParser.SP)


                        self.state = 1006
                        self.s_PowerOfWhereExpression()
                        pass

             
                self.state = 1012
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,142,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PowerOfWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_UnaryAddOrSubtractWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_UnaryAddOrSubtractWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_UnaryAddOrSubtractWhereExpressionContext,i)


        def s_PowerOfWhereOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PowerOfWhereOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PowerOfWhereOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PowerOfWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PowerOfWhereExpression" ):
                listener.enterS_PowerOfWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PowerOfWhereExpression" ):
                listener.exitS_PowerOfWhereExpression(self)




    def s_PowerOfWhereExpression(self):

        localctx = s_cypherParser.S_PowerOfWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_s_PowerOfWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            self.s_UnaryAddOrSubtractWhereExpression()
            self.state = 1025
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1015
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1014
                        self.match(s_cypherParser.SP)


                    self.state = 1017
                    self.s_PowerOfWhereOperator()
                    self.state = 1019
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1018
                        self.match(s_cypherParser.SP)


                    self.state = 1021
                    self.s_UnaryAddOrSubtractWhereExpression() 
                self.state = 1027
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_UnaryAddOrSubtractWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_ListOperatorWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_ListOperatorWhereExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_UnaryAddOrSubtractWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_UnaryAddOrSubtractWhereExpression" ):
                listener.enterS_UnaryAddOrSubtractWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_UnaryAddOrSubtractWhereExpression" ):
                listener.exitS_UnaryAddOrSubtractWhereExpression(self)




    def s_UnaryAddOrSubtractWhereExpression(self):

        localctx = s_cypherParser.S_UnaryAddOrSubtractWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_s_UnaryAddOrSubtractWhereExpression)
        self._la = 0 # Token type
        try:
            self.state = 1034
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 7, 10, 26, 48, 57, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1028
                self.s_ListOperatorWhereExpression()
                pass
            elif token in [17, 18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1029
                _la = self._input.LA(1)
                if not(_la==17 or _la==18):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1030
                    self.match(s_cypherParser.SP)


                self.state = 1033
                self.s_ListOperatorWhereExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ListOperatorWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertyOrLabelsWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyOrLabelsWhereExpressionContext,0)


        def s_AtTWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTWhereExpressionContext,0)


        def s_SingleIndexWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_SingleIndexWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_SingleIndexWhereExpressionContext,i)


        def s_DoubleIndexWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DoubleIndexWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DoubleIndexWhereExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ListOperatorWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ListOperatorWhereExpression" ):
                listener.enterS_ListOperatorWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ListOperatorWhereExpression" ):
                listener.exitS_ListOperatorWhereExpression(self)




    def s_ListOperatorWhereExpression(self):

        localctx = s_cypherParser.S_ListOperatorWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_s_ListOperatorWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1036
                self.s_PropertyOrLabelsWhereExpression()
                pass

            elif la_ == 2:
                self.state = 1037
                self.s_AtTWhereExpression()
                pass


            self.state = 1044
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1042
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                    if la_ == 1:
                        self.state = 1040
                        self.s_SingleIndexWhereExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1041
                        self.s_DoubleIndexWhereExpression()
                        pass

             
                self.state = 1046
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyOrLabelsWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyOrLabelsWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyOrLabelsWhereExpression" ):
                listener.enterS_PropertyOrLabelsWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyOrLabelsWhereExpression" ):
                listener.exitS_PropertyOrLabelsWhereExpression(self)




    def s_PropertyOrLabelsWhereExpression(self):

        localctx = s_cypherParser.S_PropertyOrLabelsWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_s_PropertyOrLabelsWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.oC_Atom()
            self.state = 1054
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1049
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1048
                        self.match(s_cypherParser.SP)


                    self.state = 1051
                    self.oC_PropertyLookup() 
                self.state = 1056
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

            self.state = 1061
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1057
                    self.match(s_cypherParser.SP)


                self.state = 1060
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def s_PropertyLookupTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupTimeContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTWhereExpression" ):
                listener.enterS_AtTWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTWhereExpression" ):
                listener.exitS_AtTWhereExpression(self)




    def s_AtTWhereExpression(self):

        localctx = s_cypherParser.S_AtTWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_s_AtTWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            self.oC_Atom()
            self.state = 1078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1068 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1065
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1064
                            self.match(s_cypherParser.SP)


                        self.state = 1067
                        self.oC_PropertyLookup()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1070 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

                self.state = 1076
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                if la_ == 1:
                    self.state = 1073
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1072
                        self.match(s_cypherParser.SP)


                    self.state = 1075
                    self.match(s_cypherParser.PoundValue)




            self.state = 1081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1080
                self.match(s_cypherParser.SP)


            self.state = 1083
            self.s_PropertyLookupTime()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SingleIndexWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_LeftWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftWhereExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SingleIndexWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SingleIndexWhereExpression" ):
                listener.enterS_SingleIndexWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SingleIndexWhereExpression" ):
                listener.exitS_SingleIndexWhereExpression(self)




    def s_SingleIndexWhereExpression(self):

        localctx = s_cypherParser.S_SingleIndexWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_s_SingleIndexWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1085
                self.match(s_cypherParser.SP)


            self.state = 1088
            self.match(s_cypherParser.T__9)
            self.state = 1089
            self.s_LeftWhereExpression()
            self.state = 1090
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DoubleIndexWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def s_LeftWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftWhereExpressionContext,0)


        def s_RightWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_RightWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DoubleIndexWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DoubleIndexWhereExpression" ):
                listener.enterS_DoubleIndexWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DoubleIndexWhereExpression" ):
                listener.exitS_DoubleIndexWhereExpression(self)




    def s_DoubleIndexWhereExpression(self):

        localctx = s_cypherParser.S_DoubleIndexWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_s_DoubleIndexWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1092
                self.match(s_cypherParser.SP)


            self.state = 1095
            self.match(s_cypherParser.T__9)
            self.state = 1097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120069792) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1096
                self.s_LeftWhereExpression()


            self.state = 1099
            self.match(s_cypherParser.T__11)
            self.state = 1101
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120069792) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1100
                self.s_RightWhereExpression()


            self.state = 1103
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_LeftWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_LeftWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_LeftWhereExpression" ):
                listener.enterS_LeftWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_LeftWhereExpression" ):
                listener.exitS_LeftWhereExpression(self)




    def s_LeftWhereExpression(self):

        localctx = s_cypherParser.S_LeftWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_s_LeftWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1105
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_RightWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_RightWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_RightWhereExpression" ):
                listener.enterS_RightWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_RightWhereExpression" ):
                listener.exitS_RightWhereExpression(self)




    def s_RightWhereExpression(self):

        localctx = s_cypherParser.S_RightWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_s_RightWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1107
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePointLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePointLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePointLiteral" ):
                listener.enterS_TimePointLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePointLiteral" ):
                listener.exitS_TimePointLiteral(self)




    def s_TimePointLiteral(self):

        localctx = s_cypherParser.S_TimePointLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_s_TimePointLiteral)
        try:
            self.state = 1111
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1109
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1110
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(s_cypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(s_cypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(s_cypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(s_cypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(s_cypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = s_cypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1113
            _la = self._input.LA(1)
            if not(_la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(s_cypherParser.AND, 0)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def OR(self):
            return self.getToken(s_cypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(s_cypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(s_cypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(s_cypherParser.DO, 0)

        def FOR(self):
            return self.getToken(s_cypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(s_cypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(s_cypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(s_cypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(s_cypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(s_cypherParser.OF, 0)

        def ADD(self):
            return self.getToken(s_cypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(s_cypherParser.DROP, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = s_cypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115
            _la = self._input.LA(1)
            if not(((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 128317405001678847) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(s_cypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = s_cypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1117
                self.match(s_cypherParser.SP)


            self.state = 1120
            self.oC_Statement()
            self.state = 1125
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 1122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1121
                    self.match(s_cypherParser.SP)


                self.state = 1124
                self.match(s_cypherParser.T__23)


            self.state = 1128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1127
                self.match(s_cypherParser.SP)


            self.state = 1130
            self.match(s_cypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = s_cypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = s_cypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.oC_SingleQuery()
            self.state = 1141
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1136
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1135
                        self.match(s_cypherParser.SP)


                    self.state = 1138
                    self.oC_Union() 
                self.state = 1143
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = s_cypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 1156
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1144
                self.match(s_cypherParser.UNION)
                self.state = 1145
                self.match(s_cypherParser.SP)
                self.state = 1146
                self.match(s_cypherParser.ALL)
                self.state = 1148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1147
                    self.match(s_cypherParser.SP)


                self.state = 1150
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1151
                self.match(s_cypherParser.UNION)
                self.state = 1153
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1152
                    self.match(s_cypherParser.SP)


                self.state = 1155
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = s_cypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_oC_SingleQuery)
        try:
            self.state = 1160
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1158
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1159
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = s_cypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 1197
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 1162
                    self.oC_ReadingClause()
                    self.state = 1164
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1163
                        self.match(s_cypherParser.SP)


                    self.state = 1170
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1171
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 1172
                    self.oC_ReadingClause()
                    self.state = 1174
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1173
                        self.match(s_cypherParser.SP)


                    self.state = 1180
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1181
                self.oC_UpdatingClause()
                self.state = 1188
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,181,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1183
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1182
                            self.match(s_cypherParser.SP)


                        self.state = 1185
                        self.oC_UpdatingClause() 
                    self.state = 1190
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,181,self._ctx)

                self.state = 1195
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                if la_ == 1:
                    self.state = 1192
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1191
                        self.match(s_cypherParser.SP)


                    self.state = 1194
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def s_WithPartQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_WithPartQueryContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_WithPartQueryContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = s_cypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_oC_MultiPartQuery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1200 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1199
                    self.s_WithPartQuery()

                else:
                    raise NoViableAltException(self)
                self.state = 1202 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,185,self._ctx)

            self.state = 1204
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_With(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WithContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_WithPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_WithPartQuery" ):
                listener.enterS_WithPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_WithPartQuery" ):
                listener.exitS_WithPartQuery(self)




    def s_WithPartQuery(self):

        localctx = s_cypherParser.S_WithPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_s_WithPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                self.state = 1206
                self.oC_ReadingClause()
                self.state = 1208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1207
                    self.match(s_cypherParser.SP)


                self.state = 1214
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64001) != 0):
                self.state = 1215
                self.oC_UpdatingClause()
                self.state = 1217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1216
                    self.match(s_cypherParser.SP)


                self.state = 1223
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1224
            self.oC_With()
            self.state = 1226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1225
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(s_cypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = s_cypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_ReadingClause)
        try:
            self.state = 1231
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1228
                self.oC_Match()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1229
                self.oC_Unwind()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1230
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = s_cypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1233
            self.match(s_cypherParser.UNWIND)
            self.state = 1235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1234
                self.match(s_cypherParser.SP)


            self.state = 1237
            self.oC_Expression()
            self.state = 1238
            self.match(s_cypherParser.SP)
            self.state = 1239
            self.match(s_cypherParser.AS)
            self.state = 1240
            self.match(s_cypherParser.SP)
            self.state = 1241
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = s_cypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1243
            self.match(s_cypherParser.MERGE)
            self.state = 1245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1244
                self.match(s_cypherParser.SP)


            self.state = 1247
            self.oC_PatternPart()
            self.state = 1252
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,194,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1248
                    self.match(s_cypherParser.SP)
                    self.state = 1249
                    self.oC_MergeAction() 
                self.state = 1254
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = s_cypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_MergeAction)
        try:
            self.state = 1265
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1255
                self.match(s_cypherParser.ON)
                self.state = 1256
                self.match(s_cypherParser.SP)
                self.state = 1257
                self.match(s_cypherParser.MATCH)
                self.state = 1258
                self.match(s_cypherParser.SP)
                self.state = 1259
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1260
                self.match(s_cypherParser.ON)
                self.state = 1261
                self.match(s_cypherParser.SP)
                self.state = 1262
                self.match(s_cypherParser.CREATE)
                self.state = 1263
                self.match(s_cypherParser.SP)
                self.state = 1264
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = s_cypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            self.match(s_cypherParser.CREATE)
            self.state = 1269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1268
                self.match(s_cypherParser.SP)


            self.state = 1271
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = s_cypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1273
            self.match(s_cypherParser.SET)
            self.state = 1275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1274
                self.match(s_cypherParser.SP)


            self.state = 1277
            self.oC_SetItem()
            self.state = 1288
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,200,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1279
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1278
                        self.match(s_cypherParser.SP)


                    self.state = 1281
                    self.match(s_cypherParser.T__3)
                    self.state = 1283
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1282
                        self.match(s_cypherParser.SP)


                    self.state = 1285
                    self.oC_SetItem() 
                self.state = 1290
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,200,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = s_cypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            self.match(s_cypherParser.REMOVE)
            self.state = 1292
            self.match(s_cypherParser.SP)
            self.state = 1293
            self.oC_RemoveItem()
            self.state = 1304
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,203,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1295
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1294
                        self.match(s_cypherParser.SP)


                    self.state = 1297
                    self.match(s_cypherParser.T__3)
                    self.state = 1299
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1298
                        self.match(s_cypherParser.SP)


                    self.state = 1301
                    self.oC_RemoveItem() 
                self.state = 1306
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,203,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = s_cypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_RemoveItem)
        try:
            self.state = 1311
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1307
                self.oC_Variable()
                self.state = 1308
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1310
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = s_cypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1313
            self.match(s_cypherParser.CALL)
            self.state = 1314
            self.match(s_cypherParser.SP)
            self.state = 1315
            self.oC_ExplicitProcedureInvocation()
            self.state = 1322
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.state = 1317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1316
                    self.match(s_cypherParser.SP)


                self.state = 1319
                self.match(s_cypherParser.YIELD)
                self.state = 1320
                self.match(s_cypherParser.SP)
                self.state = 1321
                self.oC_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = s_cypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_StandaloneCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1324
            self.match(s_cypherParser.CALL)
            self.state = 1325
            self.match(s_cypherParser.SP)
            self.state = 1328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.state = 1326
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 1327
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 1339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.state = 1331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1330
                    self.match(s_cypherParser.SP)


                self.state = 1333
                self.match(s_cypherParser.YIELD)
                self.state = 1334
                self.match(s_cypherParser.SP)
                self.state = 1337
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 1335
                    self.match(s_cypherParser.T__12)
                    pass
                elif token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                    self.state = 1336
                    self.oC_YieldItems()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = s_cypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1341
            self.oC_YieldItem()
            self.state = 1352
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,213,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1343
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1342
                        self.match(s_cypherParser.SP)


                    self.state = 1345
                    self.match(s_cypherParser.T__3)
                    self.state = 1347
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1346
                        self.match(s_cypherParser.SP)


                    self.state = 1349
                    self.oC_YieldItem() 
                self.state = 1354
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,213,self._ctx)

            self.state = 1359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                self.state = 1356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1355
                    self.match(s_cypherParser.SP)


                self.state = 1358
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = s_cypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1361
            self.oC_ProcedureResultField()
            self.state = 1366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.state = 1362
                self.match(s_cypherParser.SP)
                self.state = 1363
                self.match(s_cypherParser.AS)
                self.state = 1364
                self.match(s_cypherParser.SP)
                self.state = 1365
                self.oC_Variable()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = s_cypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1368
            self.match(s_cypherParser.WITH)
            self.state = 1369
            self.oC_ProjectionBody()
            self.state = 1374
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.state = 1371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1370
                    self.match(s_cypherParser.SP)


                self.state = 1373
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = s_cypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1376
            self.match(s_cypherParser.RETURN)
            self.state = 1377
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)




    def oC_ProjectionBody(self):

        localctx = s_cypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1383
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.state = 1380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1379
                    self.match(s_cypherParser.SP)


                self.state = 1382
                self.match(s_cypherParser.DISTINCT)


            self.state = 1385
            self.match(s_cypherParser.SP)
            self.state = 1386
            self.oC_ProjectionItems()
            self.state = 1389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.state = 1387
                self.match(s_cypherParser.SP)
                self.state = 1388
                self.oC_Order()


            self.state = 1393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.state = 1391
                self.match(s_cypherParser.SP)
                self.state = 1392
                self.oC_Skip()


            self.state = 1397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.state = 1395
                self.match(s_cypherParser.SP)
                self.state = 1396
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)




    def oC_ProjectionItems(self):

        localctx = s_cypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 1427
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1399
                self.match(s_cypherParser.T__12)
                self.state = 1410
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,226,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1401
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1400
                            self.match(s_cypherParser.SP)


                        self.state = 1403
                        self.match(s_cypherParser.T__3)
                        self.state = 1405
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1404
                            self.match(s_cypherParser.SP)


                        self.state = 1407
                        self.oC_ProjectionItem() 
                    self.state = 1412
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,226,self._ctx)

                pass
            elif token in [5, 7, 10, 17, 18, 26, 48, 57, 86, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1413
                self.oC_ProjectionItem()
                self.state = 1424
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,229,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1415
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1414
                            self.match(s_cypherParser.SP)


                        self.state = 1417
                        self.match(s_cypherParser.T__3)
                        self.state = 1419
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1418
                            self.match(s_cypherParser.SP)


                        self.state = 1421
                        self.oC_ProjectionItem() 
                    self.state = 1426
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,229,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)




    def oC_ProjectionItem(self):

        localctx = s_cypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_ProjectionItem)
        try:
            self.state = 1436
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1429
                self.oC_Expression()
                self.state = 1430
                self.match(s_cypherParser.SP)
                self.state = 1431
                self.match(s_cypherParser.AS)
                self.state = 1432
                self.match(s_cypherParser.SP)
                self.state = 1433
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1435
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = s_cypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1438
            self.match(s_cypherParser.ORDER)
            self.state = 1439
            self.match(s_cypherParser.SP)
            self.state = 1440
            self.match(s_cypherParser.BY)
            self.state = 1441
            self.match(s_cypherParser.SP)
            self.state = 1442
            self.oC_SortItem()
            self.state = 1450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1443
                self.match(s_cypherParser.T__3)
                self.state = 1445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1444
                    self.match(s_cypherParser.SP)


                self.state = 1447
                self.oC_SortItem()
                self.state = 1452
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = s_cypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1453
            self.match(s_cypherParser.L_SKIP)
            self.state = 1454
            self.match(s_cypherParser.SP)
            self.state = 1455
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = s_cypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1457
            self.match(s_cypherParser.LIMIT)
            self.state = 1458
            self.match(s_cypherParser.SP)
            self.state = 1459
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = s_cypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1461
            self.oC_Expression()
            self.state = 1466
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                self.state = 1463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1462
                    self.match(s_cypherParser.SP)


                self.state = 1465
                _la = self._input.LA(1)
                if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = s_cypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1468
            self.match(s_cypherParser.WHERE)
            self.state = 1469
            self.match(s_cypherParser.SP)
            self.state = 1470
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = s_cypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1472
            self.oC_PatternPart()
            self.state = 1483
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,238,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1474
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1473
                        self.match(s_cypherParser.SP)


                    self.state = 1476
                    self.match(s_cypherParser.T__3)
                    self.state = 1478
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1477
                        self.match(s_cypherParser.SP)


                    self.state = 1480
                    self.oC_PatternPart() 
                self.state = 1485
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,238,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = s_cypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1486
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = s_cypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 1502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1488
                self.oC_NodePattern()
                self.state = 1495
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,240,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1490
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1489
                            self.match(s_cypherParser.SP)


                        self.state = 1492
                        self.oC_PatternElementChain() 
                    self.state = 1497
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,240,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1498
                self.match(s_cypherParser.T__4)
                self.state = 1499
                self.oC_PatternElement()
                self.state = 1500
                self.match(s_cypherParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = s_cypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1504
            self.oC_NodePattern()
            self.state = 1509 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1506
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1505
                        self.match(s_cypherParser.SP)


                    self.state = 1508
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 1511 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,243,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = s_cypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1513
            self.oC_RelationshipPattern()
            self.state = 1515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1514
                self.match(s_cypherParser.SP)


            self.state = 1517
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = s_cypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 1583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1519
                self.oC_LeftArrowHead()
                self.state = 1521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1520
                    self.match(s_cypherParser.SP)


                self.state = 1523
                self.oC_Dash()
                self.state = 1525
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
                if la_ == 1:
                    self.state = 1524
                    self.match(s_cypherParser.SP)


                self.state = 1528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1527
                    self.oC_RelationshipDetail()


                self.state = 1531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1530
                    self.match(s_cypherParser.SP)


                self.state = 1533
                self.oC_Dash()
                self.state = 1535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1534
                    self.match(s_cypherParser.SP)


                self.state = 1537
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1539
                self.oC_LeftArrowHead()
                self.state = 1541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1540
                    self.match(s_cypherParser.SP)


                self.state = 1543
                self.oC_Dash()
                self.state = 1545
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
                if la_ == 1:
                    self.state = 1544
                    self.match(s_cypherParser.SP)


                self.state = 1548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1547
                    self.oC_RelationshipDetail()


                self.state = 1551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1550
                    self.match(s_cypherParser.SP)


                self.state = 1553
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1555
                self.oC_Dash()
                self.state = 1557
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
                if la_ == 1:
                    self.state = 1556
                    self.match(s_cypherParser.SP)


                self.state = 1560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1559
                    self.oC_RelationshipDetail()


                self.state = 1563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1562
                    self.match(s_cypherParser.SP)


                self.state = 1565
                self.oC_Dash()
                self.state = 1567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1566
                    self.match(s_cypherParser.SP)


                self.state = 1569
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1571
                self.oC_Dash()
                self.state = 1573
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
                if la_ == 1:
                    self.state = 1572
                    self.match(s_cypherParser.SP)


                self.state = 1576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1575
                    self.oC_RelationshipDetail()


                self.state = 1579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1578
                    self.match(s_cypherParser.SP)


                self.state = 1581
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = s_cypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_Properties)
        try:
            self.state = 1587
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1585
                self.oC_MapLiteral()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1586
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = s_cypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1589
            self.match(s_cypherParser.T__7)
            self.state = 1591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1590
                self.match(s_cypherParser.SP)


            self.state = 1593
            self.oC_RelTypeName()
            self.state = 1607
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,267,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1595
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1594
                        self.match(s_cypherParser.SP)


                    self.state = 1597
                    self.match(s_cypherParser.T__24)
                    self.state = 1599
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==8:
                        self.state = 1598
                        self.match(s_cypherParser.T__7)


                    self.state = 1602
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1601
                        self.match(s_cypherParser.SP)


                    self.state = 1604
                    self.oC_RelTypeName() 
                self.state = 1609
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,267,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = s_cypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1610
            self.oC_NodeLabel()
            self.state = 1617
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,269,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1612
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1611
                        self.match(s_cypherParser.SP)


                    self.state = 1614
                    self.oC_NodeLabel() 
                self.state = 1619
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,269,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = s_cypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1620
            self.match(s_cypherParser.T__7)
            self.state = 1622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1621
                self.match(s_cypherParser.SP)


            self.state = 1624
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = s_cypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1626
            self.match(s_cypherParser.T__12)
            self.state = 1628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1627
                self.match(s_cypherParser.SP)


            self.state = 1634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                self.state = 1630
                self.oC_IntegerLiteral()
                self.state = 1632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1631
                    self.match(s_cypherParser.SP)




            self.state = 1646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 1636
                self.match(s_cypherParser.T__11)
                self.state = 1638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1637
                    self.match(s_cypherParser.SP)


                self.state = 1644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                    self.state = 1640
                    self.oC_IntegerLiteral()
                    self.state = 1642
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1641
                        self.match(s_cypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = s_cypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1648
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = s_cypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1650
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = s_cypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1652
            self.oC_Atom()
            self.state = 1657 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1654
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1653
                        self.match(s_cypherParser.SP)


                    self.state = 1656
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 1659 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,279,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = s_cypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1661
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = s_cypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1663
            self.oC_XorExpression()
            self.state = 1670
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,280,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1664
                    self.match(s_cypherParser.SP)
                    self.state = 1665
                    self.match(s_cypherParser.OR)
                    self.state = 1666
                    self.match(s_cypherParser.SP)
                    self.state = 1667
                    self.oC_XorExpression() 
                self.state = 1672
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,280,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = s_cypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1673
            self.oC_AndExpression()
            self.state = 1680
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,281,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1674
                    self.match(s_cypherParser.SP)
                    self.state = 1675
                    self.match(s_cypherParser.XOR)
                    self.state = 1676
                    self.match(s_cypherParser.SP)
                    self.state = 1677
                    self.oC_AndExpression() 
                self.state = 1682
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,281,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = s_cypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1683
            self.oC_NotExpression()
            self.state = 1690
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,282,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1684
                    self.match(s_cypherParser.SP)
                    self.state = 1685
                    self.match(s_cypherParser.AND)
                    self.state = 1686
                    self.match(s_cypherParser.SP)
                    self.state = 1687
                    self.oC_NotExpression() 
                self.state = 1692
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,282,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = s_cypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1693
                self.match(s_cypherParser.NOT)
                self.state = 1695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1694
                    self.match(s_cypherParser.SP)


                self.state = 1701
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1702
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_StringListNullPredicateExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,i)


        def s_ComparisonOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ComparisonOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ComparisonOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = s_cypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1704
            self.oC_StringListNullPredicateExpression()
            self.state = 1716
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,287,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1706
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1705
                        self.match(s_cypherParser.SP)


                    self.state = 1708
                    self.s_ComparisonOperator()
                    self.state = 1710
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1709
                        self.match(s_cypherParser.SP)


                    self.state = 1712
                    self.oC_StringListNullPredicateExpression() 
                self.state = 1718
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,287,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringPredicateExpression" ):
                listener.enterOC_StringPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringPredicateExpression" ):
                listener.exitOC_StringPredicateExpression(self)




    def oC_StringPredicateExpression(self):

        localctx = s_cypherParser.OC_StringPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_oC_StringPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
            if la_ == 1:
                self.state = 1719
                self.match(s_cypherParser.SP)
                self.state = 1720
                self.match(s_cypherParser.STARTS)
                self.state = 1721
                self.match(s_cypherParser.SP)
                self.state = 1722
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1723
                self.match(s_cypherParser.SP)
                self.state = 1724
                self.match(s_cypherParser.ENDS)
                self.state = 1725
                self.match(s_cypherParser.SP)
                self.state = 1726
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1727
                self.match(s_cypherParser.SP)
                self.state = 1728
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 1732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1731
                self.match(s_cypherParser.SP)


            self.state = 1734
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListPredicateExpression" ):
                listener.enterOC_ListPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListPredicateExpression" ):
                listener.exitOC_ListPredicateExpression(self)




    def oC_ListPredicateExpression(self):

        localctx = s_cypherParser.OC_ListPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_oC_ListPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1736
            self.match(s_cypherParser.SP)
            self.state = 1737
            self.match(s_cypherParser.IN)
            self.state = 1739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1738
                self.match(s_cypherParser.SP)


            self.state = 1741
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullPredicateExpression" ):
                listener.enterOC_NullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullPredicateExpression" ):
                listener.exitOC_NullPredicateExpression(self)




    def oC_NullPredicateExpression(self):

        localctx = s_cypherParser.OC_NullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_oC_NullPredicateExpression)
        try:
            self.state = 1753
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1743
                self.match(s_cypherParser.SP)
                self.state = 1744
                self.match(s_cypherParser.IS)
                self.state = 1745
                self.match(s_cypherParser.SP)
                self.state = 1746
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1747
                self.match(s_cypherParser.SP)
                self.state = 1748
                self.match(s_cypherParser.IS)
                self.state = 1749
                self.match(s_cypherParser.SP)
                self.state = 1750
                self.match(s_cypherParser.NOT)
                self.state = 1751
                self.match(s_cypherParser.SP)
                self.state = 1752
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def s_AddOrSubtractOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AddOrSubtractOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1755
            self.oC_MultiplyDivideModuloExpression()
            self.state = 1776
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,297,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1774
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
                    if la_ == 1:
                        self.state = 1757
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1756
                            self.match(s_cypherParser.SP)


                        self.state = 1759
                        self.s_AddOrSubtractOperator()
                        self.state = 1761
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1760
                            self.match(s_cypherParser.SP)


                        self.state = 1763
                        self.oC_MultiplyDivideModuloExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1766
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1765
                            self.match(s_cypherParser.SP)


                        self.state = 1768
                        self.s_AddOrSubtractOperator()
                        self.state = 1770
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1769
                            self.match(s_cypherParser.SP)


                        self.state = 1772
                        self.oC_MultiplyDivideModuloExpression()
                        pass

             
                self.state = 1778
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,297,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MultiplyDivideModuloOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MultiplyDivideModuloOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MultiplyDivideModuloOperator" ):
                listener.enterS_MultiplyDivideModuloOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MultiplyDivideModuloOperator" ):
                listener.exitS_MultiplyDivideModuloOperator(self)




    def s_MultiplyDivideModuloOperator(self):

        localctx = s_cypherParser.S_MultiplyDivideModuloOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_s_MultiplyDivideModuloOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1779
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 57344) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PowerOfOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PowerOfOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PowerOfOperator" ):
                listener.enterS_PowerOfOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PowerOfOperator" ):
                listener.exitS_PowerOfOperator(self)




    def s_PowerOfOperator(self):

        localctx = s_cypherParser.S_PowerOfOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_s_PowerOfOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1781
            self.match(s_cypherParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AddOrSubtractOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AddOrSubtractOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AddOrSubtractOperator" ):
                listener.enterS_AddOrSubtractOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AddOrSubtractOperator" ):
                listener.exitS_AddOrSubtractOperator(self)




    def s_AddOrSubtractOperator(self):

        localctx = s_cypherParser.S_AddOrSubtractOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_s_AddOrSubtractOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1783
            _la = self._input.LA(1)
            if not(_la==17 or _la==18):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ComparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ComparisonOperator" ):
                listener.enterS_ComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ComparisonOperator" ):
                listener.exitS_ComparisonOperator(self)




    def s_ComparisonOperator(self):

        localctx = s_cypherParser.S_ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_s_ComparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1785
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 16252932) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PowerOfExpressionContext,i)


        def s_MultiplyDivideModuloOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MultiplyDivideModuloOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MultiplyDivideModuloOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = s_cypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1787
            self.oC_PowerOfExpression()
            self.state = 1817
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,305,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1815
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
                    if la_ == 1:
                        self.state = 1789
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1788
                            self.match(s_cypherParser.SP)


                        self.state = 1791
                        self.s_MultiplyDivideModuloOperator()
                        self.state = 1793
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1792
                            self.match(s_cypherParser.SP)


                        self.state = 1795
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1798
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1797
                            self.match(s_cypherParser.SP)


                        self.state = 1800
                        self.s_MultiplyDivideModuloOperator()
                        self.state = 1802
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1801
                            self.match(s_cypherParser.SP)


                        self.state = 1804
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1807
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1806
                            self.match(s_cypherParser.SP)


                        self.state = 1809
                        self.s_MultiplyDivideModuloOperator()
                        self.state = 1811
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1810
                            self.match(s_cypherParser.SP)


                        self.state = 1813
                        self.oC_PowerOfExpression()
                        pass

             
                self.state = 1819
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,305,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def s_PowerOfOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PowerOfOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PowerOfOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = s_cypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1820
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 1832
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,308,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1822
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1821
                        self.match(s_cypherParser.SP)


                    self.state = 1824
                    self.s_PowerOfOperator()
                    self.state = 1826
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1825
                        self.match(s_cypherParser.SP)


                    self.state = 1828
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 1834
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,308,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ListOperatorExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListOperatorExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.state = 1841
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 7, 10, 26, 48, 57, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1835
                self.oC_ListOperatorExpression()
                pass
            elif token in [17, 18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1836
                _la = self._input.LA(1)
                if not(_la==17 or _la==18):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1837
                    self.match(s_cypherParser.SP)


                self.state = 1840
                self.oC_ListOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyOrLabelsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyOrLabelsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyOrLabelsExpression" ):
                listener.enterOC_PropertyOrLabelsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyOrLabelsExpression" ):
                listener.exitOC_PropertyOrLabelsExpression(self)




    def oC_PropertyOrLabelsExpression(self):

        localctx = s_cypherParser.OC_PropertyOrLabelsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_oC_PropertyOrLabelsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1843
            self.oC_Atom()
            self.state = 1850
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,312,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1845
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1844
                        self.match(s_cypherParser.SP)


                    self.state = 1847
                    self.oC_PropertyLookup() 
                self.state = 1852
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,312,self._ctx)

            self.state = 1857
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
            if la_ == 1:
                self.state = 1854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1853
                    self.match(s_cypherParser.SP)


                self.state = 1856
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = s_cypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1859
            self.match(s_cypherParser.T__0)
            self.state = 1861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1860
                self.match(s_cypherParser.SP)


            self.state = 1863
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternComprehensionContext,0)


        def oC_Quantifier(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QuantifierContext,0)


        def oC_PatternPredicate(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPredicateContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionInvocationContext,0)


        def oC_ExistentialSubquery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExistentialSubqueryContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = s_cypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 1889
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1865
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1866
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1867
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1868
                self.match(s_cypherParser.COUNT)
                self.state = 1870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1869
                    self.match(s_cypherParser.SP)


                self.state = 1872
                self.match(s_cypherParser.T__4)
                self.state = 1874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1873
                    self.match(s_cypherParser.SP)


                self.state = 1876
                self.match(s_cypherParser.T__12)
                self.state = 1878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1877
                    self.match(s_cypherParser.SP)


                self.state = 1880
                self.match(s_cypherParser.T__5)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1881
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1882
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1883
                self.oC_Quantifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1884
                self.oC_PatternPredicate()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1885
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1886
                self.oC_FunctionInvocation()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1887
                self.oC_ExistentialSubquery()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1888
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def oC_CaseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_CaseAlternativeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = s_cypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1913
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,325,self._ctx)
            if la_ == 1:
                self.state = 1891
                self.match(s_cypherParser.CASE)
                self.state = 1896 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1893
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1892
                            self.match(s_cypherParser.SP)


                        self.state = 1895
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1898 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,321,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1900
                self.match(s_cypherParser.CASE)
                self.state = 1902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1901
                    self.match(s_cypherParser.SP)


                self.state = 1904
                self.oC_Expression()
                self.state = 1909 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1906
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1905
                            self.match(s_cypherParser.SP)


                        self.state = 1908
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1911 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,324,self._ctx)

                pass


            self.state = 1923
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
            if la_ == 1:
                self.state = 1916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1915
                    self.match(s_cypherParser.SP)


                self.state = 1918
                self.match(s_cypherParser.ELSE)
                self.state = 1920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1919
                    self.match(s_cypherParser.SP)


                self.state = 1922
                self.oC_Expression()


            self.state = 1926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1925
                self.match(s_cypherParser.SP)


            self.state = 1928
            self.match(s_cypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternative" ):
                listener.enterOC_CaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternative" ):
                listener.exitOC_CaseAlternative(self)




    def oC_CaseAlternative(self):

        localctx = s_cypherParser.OC_CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_oC_CaseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1930
            self.match(s_cypherParser.WHEN)
            self.state = 1932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1931
                self.match(s_cypherParser.SP)


            self.state = 1934
            self.oC_Expression()
            self.state = 1936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1935
                self.match(s_cypherParser.SP)


            self.state = 1938
            self.match(s_cypherParser.THEN)
            self.state = 1940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1939
                self.match(s_cypherParser.SP)


            self.state = 1942
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = s_cypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1944
            self.match(s_cypherParser.T__9)
            self.state = 1946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1945
                self.match(s_cypherParser.SP)


            self.state = 1948
            self.oC_FilterExpression()
            self.state = 1957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
            if la_ == 1:
                self.state = 1950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1949
                    self.match(s_cypherParser.SP)


                self.state = 1952
                self.match(s_cypherParser.T__24)
                self.state = 1954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1953
                    self.match(s_cypherParser.SP)


                self.state = 1956
                self.oC_Expression()


            self.state = 1960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1959
                self.match(s_cypherParser.SP)


            self.state = 1962
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = s_cypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1964
            self.match(s_cypherParser.T__9)
            self.state = 1966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1965
                self.match(s_cypherParser.SP)


            self.state = 1976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 1968
                self.oC_Variable()
                self.state = 1970
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1969
                    self.match(s_cypherParser.SP)


                self.state = 1972
                self.match(s_cypherParser.T__1)
                self.state = 1974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1973
                    self.match(s_cypherParser.SP)




            self.state = 1978
            self.oC_RelationshipsPattern()
            self.state = 1980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1979
                self.match(s_cypherParser.SP)


            self.state = 1986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 1982
                self.oC_Where()
                self.state = 1984
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1983
                    self.match(s_cypherParser.SP)




            self.state = 1988
            self.match(s_cypherParser.T__24)
            self.state = 1990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1989
                self.match(s_cypherParser.SP)


            self.state = 1992
            self.oC_Expression()
            self.state = 1994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1993
                self.match(s_cypherParser.SP)


            self.state = 1996
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Quantifier" ):
                listener.enterOC_Quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Quantifier" ):
                listener.exitOC_Quantifier(self)




    def oC_Quantifier(self):

        localctx = s_cypherParser.OC_QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_oC_Quantifier)
        self._la = 0 # Token type
        try:
            self.state = 2054
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1998
                self.match(s_cypherParser.ALL)
                self.state = 2000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1999
                    self.match(s_cypherParser.SP)


                self.state = 2002
                self.match(s_cypherParser.T__4)
                self.state = 2004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2003
                    self.match(s_cypherParser.SP)


                self.state = 2006
                self.oC_FilterExpression()
                self.state = 2008
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2007
                    self.match(s_cypherParser.SP)


                self.state = 2010
                self.match(s_cypherParser.T__5)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2012
                self.match(s_cypherParser.ANY)
                self.state = 2014
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2013
                    self.match(s_cypherParser.SP)


                self.state = 2016
                self.match(s_cypherParser.T__4)
                self.state = 2018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2017
                    self.match(s_cypherParser.SP)


                self.state = 2020
                self.oC_FilterExpression()
                self.state = 2022
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2021
                    self.match(s_cypherParser.SP)


                self.state = 2024
                self.match(s_cypherParser.T__5)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2026
                self.match(s_cypherParser.NONE)
                self.state = 2028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2027
                    self.match(s_cypherParser.SP)


                self.state = 2030
                self.match(s_cypherParser.T__4)
                self.state = 2032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2031
                    self.match(s_cypherParser.SP)


                self.state = 2034
                self.oC_FilterExpression()
                self.state = 2036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2035
                    self.match(s_cypherParser.SP)


                self.state = 2038
                self.match(s_cypherParser.T__5)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2040
                self.match(s_cypherParser.SINGLE)
                self.state = 2042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2041
                    self.match(s_cypherParser.SP)


                self.state = 2044
                self.match(s_cypherParser.T__4)
                self.state = 2046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2045
                    self.match(s_cypherParser.SP)


                self.state = 2048
                self.oC_FilterExpression()
                self.state = 2050
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2049
                    self.match(s_cypherParser.SP)


                self.state = 2052
                self.match(s_cypherParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IdInCollContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = s_cypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2056
            self.oC_IdInColl()
            self.state = 2061
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
            if la_ == 1:
                self.state = 2058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2057
                    self.match(s_cypherParser.SP)


                self.state = 2060
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPredicate" ):
                listener.enterOC_PatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPredicate" ):
                listener.exitOC_PatternPredicate(self)




    def oC_PatternPredicate(self):

        localctx = s_cypherParser.OC_PatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_oC_PatternPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2063
            self.oC_RelationshipsPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = s_cypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2065
            self.match(s_cypherParser.T__4)
            self.state = 2067
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2066
                self.match(s_cypherParser.SP)


            self.state = 2069
            self.oC_Expression()
            self.state = 2071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2070
                self.match(s_cypherParser.SP)


            self.state = 2073
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = s_cypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2075
            self.oC_Variable()
            self.state = 2076
            self.match(s_cypherParser.SP)
            self.state = 2077
            self.match(s_cypherParser.IN)
            self.state = 2078
            self.match(s_cypherParser.SP)
            self.state = 2079
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def s_FunctionInvocationExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_FunctionInvocationExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_FunctionInvocationExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = s_cypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2081
            self.oC_FunctionName()
            self.state = 2083
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2082
                self.match(s_cypherParser.SP)


            self.state = 2085
            self.match(s_cypherParser.T__4)
            self.state = 2087
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2086
                self.match(s_cypherParser.SP)


            self.state = 2093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 2089
                self.match(s_cypherParser.DISTINCT)
                self.state = 2091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2090
                    self.match(s_cypherParser.SP)




            self.state = 2112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120069792) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 2095
                self.s_FunctionInvocationExpression()
                self.state = 2097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2096
                    self.match(s_cypherParser.SP)


                self.state = 2109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2099
                    self.match(s_cypherParser.T__3)
                    self.state = 2101
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2100
                        self.match(s_cypherParser.SP)


                    self.state = 2103
                    self.s_FunctionInvocationExpression()
                    self.state = 2105
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2104
                        self.match(s_cypherParser.SP)


                    self.state = 2111
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2114
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_FunctionInvocationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_FunctionInvocationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_FunctionInvocationExpression" ):
                listener.enterS_FunctionInvocationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_FunctionInvocationExpression" ):
                listener.exitS_FunctionInvocationExpression(self)




    def s_FunctionInvocationExpression(self):

        localctx = s_cypherParser.S_FunctionInvocationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_s_FunctionInvocationExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2116
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = s_cypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_oC_FunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2118
            self.oC_Namespace()
            self.state = 2119
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExistentialSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExistentialSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExistentialSubquery" ):
                listener.enterOC_ExistentialSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExistentialSubquery" ):
                listener.exitOC_ExistentialSubquery(self)




    def oC_ExistentialSubquery(self):

        localctx = s_cypherParser.OC_ExistentialSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_oC_ExistentialSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2121
            self.match(s_cypherParser.EXISTS)
            self.state = 2123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2122
                self.match(s_cypherParser.SP)


            self.state = 2125
            self.match(s_cypherParser.T__6)
            self.state = 2127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2126
                self.match(s_cypherParser.SP)


            self.state = 2137
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 71, 72]:
                self.state = 2129
                self.oC_RegularQuery()
                pass
            elif token in [5, 48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 2130
                self.oC_Pattern()
                self.state = 2135
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,376,self._ctx)
                if la_ == 1:
                    self.state = 2132
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2131
                        self.match(s_cypherParser.SP)


                    self.state = 2134
                    self.oC_Where()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 2140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2139
                self.match(s_cypherParser.SP)


            self.state = 2142
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2144
            self.oC_ProcedureName()
            self.state = 2146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2145
                self.match(s_cypherParser.SP)


            self.state = 2148
            self.match(s_cypherParser.T__4)
            self.state = 2150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2149
                self.match(s_cypherParser.SP)


            self.state = 2169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120069792) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 2152
                self.oC_Expression()
                self.state = 2154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2153
                    self.match(s_cypherParser.SP)


                self.state = 2166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2156
                    self.match(s_cypherParser.T__3)
                    self.state = 2158
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2157
                        self.match(s_cypherParser.SP)


                    self.state = 2160
                    self.oC_Expression()
                    self.state = 2162
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2161
                        self.match(s_cypherParser.SP)


                    self.state = 2168
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2171
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2173
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = s_cypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2175
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = s_cypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2177
            self.oC_Namespace()
            self.state = 2178
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = s_cypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2185
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,386,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2180
                    self.oC_SymbolicName()
                    self.state = 2181
                    self.match(s_cypherParser.T__0) 
                self.state = 2187
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,386,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = s_cypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2188
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_ListLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListLiteralContext,0)


        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = s_cypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_oC_Literal)
        try:
            self.state = 2196
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2190
                self.oC_BooleanLiteral()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2191
                self.match(s_cypherParser.NULL)
                pass
            elif token in [105, 106, 107, 115, 116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2192
                self.oC_NumberLiteral()
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2193
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2194
                self.oC_ListLiteral()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2195
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = s_cypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2198
            _la = self._input.LA(1)
            if not(_la==103 or _la==104):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = s_cypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_oC_NumberLiteral)
        try:
            self.state = 2202
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115, 116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2200
                self.oC_DoubleLiteral()
                pass
            elif token in [105, 106, 107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2201
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(s_cypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(s_cypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = s_cypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2204
            _la = self._input.LA(1)
            if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(s_cypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(s_cypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = s_cypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2206
            _la = self._input.LA(1)
            if not(_la==115 or _la==116):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_ListLiteralExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ListLiteralExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ListLiteralExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = s_cypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2208
            self.match(s_cypherParser.T__9)
            self.state = 2210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2209
                self.match(s_cypherParser.SP)


            self.state = 2229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120069792) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 2212
                self.s_ListLiteralExpression()
                self.state = 2214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2213
                    self.match(s_cypherParser.SP)


                self.state = 2226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2216
                    self.match(s_cypherParser.T__3)
                    self.state = 2218
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2217
                        self.match(s_cypherParser.SP)


                    self.state = 2220
                    self.s_ListLiteralExpression()
                    self.state = 2222
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2221
                        self.match(s_cypherParser.SP)


                    self.state = 2228
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2231
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ListLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ListLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ListLiteralExpression" ):
                listener.enterS_ListLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ListLiteralExpression" ):
                listener.exitS_ListLiteralExpression(self)




    def s_ListLiteralExpression(self):

        localctx = s_cypherParser.S_ListLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_s_ListLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2233
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_MapKeyValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MapKeyValueContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MapKeyValueContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = s_cypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2235
            self.match(s_cypherParser.T__6)
            self.state = 2237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2236
                self.match(s_cypherParser.SP)


            self.state = 2250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 2239
                self.s_MapKeyValue()
                self.state = 2247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2240
                    self.match(s_cypherParser.T__3)
                    self.state = 2242
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2241
                        self.match(s_cypherParser.SP)


                    self.state = 2244
                    self.s_MapKeyValue()
                    self.state = 2249
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2252
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MapKeyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MapKeyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MapKeyValue" ):
                listener.enterS_MapKeyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MapKeyValue" ):
                listener.exitS_MapKeyValue(self)




    def s_MapKeyValue(self):

        localctx = s_cypherParser.S_MapKeyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_s_MapKeyValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2254
            self.oC_PropertyKeyName()
            self.state = 2256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2255
                self.match(s_cypherParser.SP)


            self.state = 2258
            self.match(s_cypherParser.T__7)
            self.state = 2260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2259
                self.match(s_cypherParser.SP)


            self.state = 2262
            self.oC_Expression()
            self.state = 2264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2263
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = s_cypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2266
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = s_cypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2268
            self.match(s_cypherParser.T__25)
            self.state = 2271
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 2269
                self.oC_SymbolicName()
                pass
            elif token in [106]:
                self.state = 2270
                self.match(s_cypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = s_cypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_oC_SchemaName)
        try:
            self.state = 2275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,403,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2273
                self.oC_SymbolicName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2274
                self.oC_ReservedWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = s_cypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2277
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2014314496) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = s_cypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2279
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32216449024) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = s_cypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2281
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70334384701440) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





