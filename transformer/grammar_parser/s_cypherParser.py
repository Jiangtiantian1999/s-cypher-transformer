# Generated from s_cypher.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,137,1930,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,1,0,1,0,1,0,3,0,236,8,0,1,1,1,1,3,1,240,8,1,1,1,1,1,
        3,1,244,8,1,1,1,1,1,3,1,248,8,1,1,1,1,1,3,1,252,8,1,3,1,254,8,1,
        1,1,3,1,257,8,1,1,1,3,1,260,8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,268,
        8,2,1,2,3,2,271,8,2,1,2,3,2,274,8,2,1,3,1,3,3,3,278,8,3,1,3,1,3,
        1,3,1,3,3,3,284,8,3,1,3,3,3,287,8,3,1,3,1,3,1,3,3,3,292,8,3,1,3,
        1,3,1,3,1,3,3,3,298,8,3,1,3,3,3,301,8,3,1,3,1,3,1,3,3,3,306,8,3,
        1,3,3,3,309,8,3,1,3,3,3,312,8,3,1,3,3,3,315,8,3,1,3,3,3,318,8,3,
        1,3,1,3,1,3,1,3,3,3,324,8,3,1,3,3,3,327,8,3,1,3,1,3,1,3,3,3,332,
        8,3,1,3,3,3,335,8,3,1,3,3,3,338,8,3,1,3,1,3,3,3,342,8,3,1,3,1,3,
        3,3,346,8,3,1,3,3,3,349,8,3,1,3,1,3,3,3,353,8,3,1,3,1,3,3,3,357,
        8,3,1,3,1,3,1,3,1,3,3,3,363,8,3,1,3,1,3,3,3,367,8,3,1,3,1,3,1,3,
        1,3,3,3,373,8,3,1,3,1,3,3,3,377,8,3,1,3,1,3,1,3,1,3,3,3,383,8,3,
        1,3,1,3,3,3,387,8,3,1,4,1,4,3,4,391,8,4,1,4,1,4,3,4,395,8,4,1,4,
        1,4,3,4,399,8,4,1,4,5,4,402,8,4,10,4,12,4,405,9,4,1,5,1,5,1,5,1,
        5,3,5,411,8,5,1,5,3,5,414,8,5,3,5,416,8,5,1,6,1,6,3,6,420,8,6,1,
        6,1,6,3,6,424,8,6,1,6,1,6,3,6,428,8,6,1,6,1,6,3,6,432,8,6,1,6,5,
        6,435,8,6,10,6,12,6,438,9,6,1,7,1,7,1,7,1,7,3,7,444,8,7,1,7,3,7,
        447,8,7,3,7,449,8,7,1,8,1,8,3,8,453,8,8,1,8,1,8,1,9,1,9,3,9,459,
        8,9,1,9,1,9,1,10,1,10,3,10,465,8,10,1,10,1,10,1,10,3,10,470,8,10,
        1,10,3,10,473,8,10,1,11,1,11,3,11,477,8,11,1,11,1,11,3,11,481,8,
        11,1,11,1,11,1,11,1,11,3,11,487,8,11,1,11,1,11,3,11,491,8,11,1,11,
        1,11,1,11,3,11,496,8,11,1,12,1,12,3,12,500,8,12,1,12,1,12,3,12,504,
        8,12,1,12,1,12,3,12,508,8,12,1,12,1,12,1,13,1,13,3,13,514,8,13,1,
        13,1,13,3,13,518,8,13,1,13,1,13,1,14,1,14,3,14,524,8,14,1,14,1,14,
        3,14,528,8,14,3,14,530,8,14,1,14,1,14,3,14,534,8,14,3,14,536,8,14,
        1,14,1,14,3,14,540,8,14,3,14,542,8,14,1,14,1,14,3,14,546,8,14,3,
        14,548,8,14,1,14,1,14,1,15,1,15,3,15,554,8,15,1,16,1,16,3,16,558,
        8,16,1,16,1,16,3,16,562,8,16,1,16,1,16,3,16,566,8,16,3,16,568,8,
        16,1,16,1,16,3,16,572,8,16,1,16,1,16,3,16,576,8,16,1,16,1,16,3,16,
        580,8,16,3,16,582,8,16,1,16,1,16,3,16,586,8,16,1,16,1,16,3,16,590,
        8,16,1,16,1,16,3,16,594,8,16,3,16,596,8,16,1,16,1,16,3,16,600,8,
        16,1,16,1,16,3,16,604,8,16,1,16,1,16,3,16,608,8,16,3,16,610,8,16,
        5,16,612,8,16,10,16,12,16,615,9,16,3,16,617,8,16,1,16,1,16,1,17,
        1,17,3,17,623,8,17,1,17,1,17,3,17,627,8,17,3,17,629,8,17,1,17,1,
        17,3,17,633,8,17,3,17,635,8,17,1,17,3,17,638,8,17,1,17,1,17,3,17,
        642,8,17,3,17,644,8,17,1,17,1,17,3,17,648,8,17,3,17,650,8,17,1,17,
        1,17,1,18,1,18,1,18,1,18,1,18,5,18,659,8,18,10,18,12,18,662,9,18,
        1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,3,20,674,8,20,
        1,20,1,20,3,20,678,8,20,1,20,1,20,3,20,682,8,20,1,20,1,20,1,20,1,
        20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,696,8,20,1,20,3,
        20,699,8,20,3,20,701,8,20,1,20,3,20,704,8,20,1,20,3,20,707,8,20,
        3,20,709,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,718,8,21,1,
        22,1,22,3,22,722,8,22,1,22,1,22,3,22,726,8,22,1,22,1,22,3,22,730,
        8,22,1,22,1,22,3,22,734,8,22,1,22,1,22,3,22,738,8,22,1,22,3,22,741,
        8,22,1,22,1,22,1,23,1,23,3,23,747,8,23,1,24,1,24,1,25,3,25,752,8,
        25,1,25,1,25,3,25,756,8,25,1,25,3,25,759,8,25,1,25,3,25,762,8,25,
        1,25,1,25,1,26,1,26,1,27,1,27,3,27,770,8,27,1,27,5,27,773,8,27,10,
        27,12,27,776,9,27,1,28,1,28,1,28,1,28,3,28,782,8,28,1,28,1,28,1,
        28,3,28,787,8,28,1,28,3,28,790,8,28,1,29,1,29,3,29,794,8,29,1,30,
        1,30,3,30,798,8,30,5,30,800,8,30,10,30,12,30,803,9,30,1,30,1,30,
        1,30,3,30,808,8,30,5,30,810,8,30,10,30,12,30,813,9,30,1,30,1,30,
        3,30,817,8,30,1,30,5,30,820,8,30,10,30,12,30,823,9,30,1,30,3,30,
        826,8,30,1,30,3,30,829,8,30,3,30,831,8,30,1,31,1,31,3,31,835,8,31,
        5,31,837,8,31,10,31,12,31,840,9,31,1,31,1,31,3,31,844,8,31,5,31,
        846,8,31,10,31,12,31,849,9,31,1,31,1,31,3,31,853,8,31,4,31,855,8,
        31,11,31,12,31,856,1,31,1,31,1,32,1,32,1,32,3,32,864,8,32,1,33,1,
        33,3,33,868,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,3,34,878,
        8,34,1,34,1,34,1,34,5,34,883,8,34,10,34,12,34,886,9,34,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,898,8,35,1,36,1,36,
        3,36,902,8,36,1,36,1,36,1,37,1,37,3,37,908,8,37,1,37,1,37,3,37,912,
        8,37,1,37,1,37,3,37,916,8,37,1,37,5,37,919,8,37,10,37,12,37,922,
        9,37,1,38,1,38,1,38,1,38,3,38,928,8,38,1,38,1,38,3,38,932,8,38,1,
        38,5,38,935,8,38,10,38,12,38,938,9,38,1,39,1,39,1,39,1,39,3,39,944,
        8,39,1,40,1,40,1,40,1,40,3,40,950,8,40,1,40,1,40,1,40,3,40,955,8,
        40,1,41,1,41,1,41,1,41,3,41,961,8,41,1,41,3,41,964,8,41,1,41,1,41,
        1,41,1,41,3,41,970,8,41,3,41,972,8,41,1,42,1,42,3,42,976,8,42,1,
        42,1,42,3,42,980,8,42,1,42,5,42,983,8,42,10,42,12,42,986,9,42,1,
        42,3,42,989,8,42,1,42,3,42,992,8,42,1,43,1,43,1,43,1,43,1,43,3,43,
        999,8,43,1,43,1,43,1,44,1,44,1,44,3,44,1006,8,44,1,44,3,44,1009,
        8,44,1,45,1,45,1,45,1,46,3,46,1015,8,46,1,46,3,46,1018,8,46,1,46,
        1,46,1,46,1,46,3,46,1024,8,46,1,46,1,46,3,46,1028,8,46,1,46,1,46,
        3,46,1032,8,46,1,47,1,47,3,47,1036,8,47,1,47,1,47,3,47,1040,8,47,
        1,47,5,47,1043,8,47,10,47,12,47,1046,9,47,1,47,1,47,3,47,1050,8,
        47,1,47,1,47,3,47,1054,8,47,1,47,5,47,1057,8,47,10,47,12,47,1060,
        9,47,3,47,1062,8,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,1071,
        8,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,1080,8,49,1,49,5,49,
        1083,8,49,10,49,12,49,1086,9,49,1,50,1,50,1,50,1,50,1,51,1,51,1,
        51,1,51,1,52,1,52,3,52,1098,8,52,1,52,3,52,1101,8,52,1,53,1,53,1,
        53,1,53,1,54,1,54,3,54,1109,8,54,1,54,1,54,3,54,1113,8,54,1,54,5,
        54,1116,8,54,10,54,12,54,1119,9,54,1,55,1,55,1,56,1,56,3,56,1125,
        8,56,1,56,5,56,1128,8,56,10,56,12,56,1131,9,56,1,56,1,56,1,56,1,
        56,3,56,1137,8,56,1,57,1,57,3,57,1141,8,57,1,57,4,57,1144,8,57,11,
        57,12,57,1145,1,58,1,58,3,58,1150,8,58,1,58,1,58,1,59,1,59,3,59,
        1156,8,59,1,59,1,59,3,59,1160,8,59,1,59,3,59,1163,8,59,1,59,3,59,
        1166,8,59,1,59,1,59,3,59,1170,8,59,1,59,1,59,1,59,1,59,3,59,1176,
        8,59,1,59,1,59,3,59,1180,8,59,1,59,3,59,1183,8,59,1,59,3,59,1186,
        8,59,1,59,1,59,1,59,1,59,3,59,1192,8,59,1,59,3,59,1195,8,59,1,59,
        3,59,1198,8,59,1,59,1,59,3,59,1202,8,59,1,59,1,59,1,59,1,59,3,59,
        1208,8,59,1,59,3,59,1211,8,59,1,59,3,59,1214,8,59,1,59,1,59,3,59,
        1218,8,59,1,60,1,60,3,60,1222,8,60,1,61,1,61,3,61,1226,8,61,1,61,
        1,61,3,61,1230,8,61,1,61,1,61,3,61,1234,8,61,1,61,3,61,1237,8,61,
        1,61,5,61,1240,8,61,10,61,12,61,1243,9,61,1,62,1,62,3,62,1247,8,
        62,1,62,5,62,1250,8,62,10,62,12,62,1253,9,62,1,63,1,63,3,63,1257,
        8,63,1,63,1,63,1,64,1,64,3,64,1263,8,64,1,64,1,64,3,64,1267,8,64,
        3,64,1269,8,64,1,64,1,64,3,64,1273,8,64,1,64,1,64,3,64,1277,8,64,
        3,64,1279,8,64,3,64,1281,8,64,1,65,1,65,1,66,1,66,1,67,1,67,3,67,
        1289,8,67,1,67,4,67,1292,8,67,11,67,12,67,1293,1,68,1,68,1,69,1,
        69,1,69,1,69,1,69,5,69,1303,8,69,10,69,12,69,1306,9,69,1,70,1,70,
        1,70,1,70,1,70,5,70,1313,8,70,10,70,12,70,1316,9,70,1,71,1,71,1,
        71,1,71,1,71,5,71,1323,8,71,10,71,12,71,1326,9,71,1,72,1,72,3,72,
        1330,8,72,5,72,1332,8,72,10,72,12,72,1335,9,72,1,72,1,72,1,73,1,
        73,3,73,1341,8,73,1,73,5,73,1344,8,73,10,73,12,73,1347,9,73,1,74,
        1,74,3,74,1351,8,74,1,74,1,74,1,74,3,74,1356,8,74,1,74,1,74,1,74,
        3,74,1361,8,74,1,74,1,74,1,74,3,74,1366,8,74,1,74,1,74,1,74,3,74,
        1371,8,74,1,74,1,74,1,74,3,74,1376,8,74,1,74,3,74,1379,8,74,1,75,
        1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1391,8,75,1,75,
        3,75,1394,8,75,1,75,1,75,1,76,1,76,1,76,3,76,1401,8,76,1,76,1,76,
        1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1415,8,77,
        1,78,1,78,3,78,1419,8,78,1,78,1,78,3,78,1423,8,78,1,78,1,78,3,78,
        1427,8,78,1,78,1,78,3,78,1431,8,78,1,78,5,78,1434,8,78,10,78,12,
        78,1437,9,78,1,79,1,79,3,79,1441,8,79,1,79,1,79,3,79,1445,8,79,1,
        79,1,79,3,79,1449,8,79,1,79,1,79,3,79,1453,8,79,1,79,1,79,3,79,1457,
        8,79,1,79,1,79,3,79,1461,8,79,1,79,5,79,1464,8,79,10,79,12,79,1467,
        9,79,1,80,1,80,3,80,1471,8,80,1,80,1,80,3,80,1475,8,80,1,80,5,80,
        1478,8,80,10,80,12,80,1481,9,80,1,81,1,81,1,81,3,81,1486,8,81,1,
        81,3,81,1489,8,81,1,82,1,82,3,82,1493,8,82,1,82,1,82,1,82,1,82,1,
        82,3,82,1500,8,82,1,82,1,82,3,82,1504,8,82,1,82,1,82,3,82,1508,8,
        82,1,82,5,82,1511,8,82,10,82,12,82,1514,9,82,1,83,1,83,3,83,1518,
        8,83,1,83,5,83,1521,8,83,10,83,12,83,1524,9,83,1,83,3,83,1527,8,
        83,1,83,3,83,1530,8,83,1,84,1,84,3,84,1534,8,84,1,84,1,84,1,85,1,
        85,3,85,1540,8,85,1,85,4,85,1543,8,85,11,85,12,85,1544,1,85,1,85,
        3,85,1549,8,85,1,85,1,85,3,85,1553,8,85,1,85,4,85,1556,8,85,11,85,
        12,85,1557,3,85,1560,8,85,1,85,3,85,1563,8,85,1,85,1,85,3,85,1567,
        8,85,1,85,3,85,1570,8,85,1,85,3,85,1573,8,85,1,85,1,85,1,86,1,86,
        3,86,1579,8,86,1,86,1,86,3,86,1583,8,86,1,86,1,86,3,86,1587,8,86,
        1,86,1,86,1,87,1,87,3,87,1593,8,87,1,87,1,87,3,87,1597,8,87,1,87,
        1,87,3,87,1601,8,87,1,87,3,87,1604,8,87,1,87,3,87,1607,8,87,1,87,
        1,87,1,88,1,88,3,88,1613,8,88,1,88,1,88,3,88,1617,8,88,1,88,1,88,
        3,88,1621,8,88,3,88,1623,8,88,1,88,1,88,3,88,1627,8,88,1,88,1,88,
        3,88,1631,8,88,3,88,1633,8,88,1,88,1,88,3,88,1637,8,88,1,88,1,88,
        3,88,1641,8,88,1,88,1,88,1,89,1,89,3,89,1647,8,89,1,89,1,89,3,89,
        1651,8,89,1,89,1,89,3,89,1655,8,89,1,89,1,89,1,89,1,89,3,89,1661,
        8,89,1,89,1,89,3,89,1665,8,89,1,89,1,89,3,89,1669,8,89,1,89,1,89,
        1,89,1,89,3,89,1675,8,89,1,89,1,89,3,89,1679,8,89,1,89,1,89,3,89,
        1683,8,89,1,89,1,89,1,89,1,89,3,89,1689,8,89,1,89,1,89,3,89,1693,
        8,89,1,89,1,89,3,89,1697,8,89,1,89,1,89,3,89,1701,8,89,1,90,1,90,
        3,90,1705,8,90,1,90,3,90,1708,8,90,1,91,1,91,1,92,1,92,3,92,1714,
        8,92,1,92,1,92,3,92,1718,8,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,
        1,93,1,94,1,94,3,94,1730,8,94,1,94,1,94,3,94,1734,8,94,1,94,1,94,
        3,94,1738,8,94,3,94,1740,8,94,1,94,1,94,3,94,1744,8,94,1,94,1,94,
        3,94,1748,8,94,1,94,1,94,3,94,1752,8,94,5,94,1754,8,94,10,94,12,
        94,1757,9,94,3,94,1759,8,94,1,94,1,94,1,95,1,95,1,95,1,96,1,96,3,
        96,1768,8,96,1,96,1,96,3,96,1772,8,96,1,96,1,96,1,96,3,96,1777,8,
        96,1,96,3,96,1780,8,96,3,96,1782,8,96,1,96,3,96,1785,8,96,1,96,1,
        96,1,97,1,97,3,97,1791,8,97,1,97,1,97,3,97,1795,8,97,1,97,1,97,3,
        97,1799,8,97,1,97,1,97,3,97,1803,8,97,1,97,1,97,3,97,1807,8,97,5,
        97,1809,8,97,10,97,12,97,1812,9,97,3,97,1814,8,97,1,97,1,97,1,98,
        1,98,1,99,1,99,1,100,1,100,1,100,1,101,1,101,1,101,5,101,1828,8,
        101,10,101,12,101,1831,9,101,1,102,1,102,1,103,1,103,1,104,1,104,
        3,104,1839,8,104,1,105,1,105,1,106,1,106,1,107,1,107,3,107,1847,
        8,107,1,107,1,107,3,107,1851,8,107,1,107,1,107,3,107,1855,8,107,
        1,107,1,107,3,107,1859,8,107,5,107,1861,8,107,10,107,12,107,1864,
        9,107,3,107,1866,8,107,1,107,1,107,1,108,1,108,3,108,1872,8,108,
        1,108,1,108,3,108,1876,8,108,1,108,1,108,3,108,1880,8,108,1,108,
        1,108,3,108,1884,8,108,1,108,1,108,3,108,1888,8,108,1,108,1,108,
        3,108,1892,8,108,1,108,1,108,3,108,1896,8,108,1,108,1,108,3,108,
        1900,8,108,5,108,1902,8,108,10,108,12,108,1905,9,108,3,108,1907,
        8,108,1,108,1,108,1,109,1,109,1,110,1,110,1,110,3,110,1916,8,110,
        1,111,1,111,3,111,1920,8,111,1,112,1,112,1,113,1,113,1,114,1,114,
        1,115,1,115,1,115,0,0,116,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
        30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
        74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
        114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
        146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
        178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
        210,212,214,216,218,220,222,224,226,228,230,0,11,1,0,54,55,5,0,48,
        68,71,92,94,98,102,104,119,128,1,0,78,81,1,0,21,22,1,0,103,104,1,
        0,105,107,1,0,115,116,5,0,93,93,99,101,108,108,129,131,134,134,2,
        0,17,17,27,30,2,0,18,18,31,34,2,0,22,22,35,45,2226,0,235,1,0,0,0,
        2,239,1,0,0,0,4,267,1,0,0,0,6,386,1,0,0,0,8,388,1,0,0,0,10,406,1,
        0,0,0,12,419,1,0,0,0,14,439,1,0,0,0,16,450,1,0,0,0,18,456,1,0,0,
        0,20,472,1,0,0,0,22,495,1,0,0,0,24,497,1,0,0,0,26,511,1,0,0,0,28,
        521,1,0,0,0,30,553,1,0,0,0,32,555,1,0,0,0,34,620,1,0,0,0,36,653,
        1,0,0,0,38,663,1,0,0,0,40,708,1,0,0,0,42,717,1,0,0,0,44,719,1,0,
        0,0,46,746,1,0,0,0,48,748,1,0,0,0,50,751,1,0,0,0,52,765,1,0,0,0,
        54,767,1,0,0,0,56,789,1,0,0,0,58,793,1,0,0,0,60,830,1,0,0,0,62,854,
        1,0,0,0,64,863,1,0,0,0,66,865,1,0,0,0,68,875,1,0,0,0,70,897,1,0,
        0,0,72,899,1,0,0,0,74,905,1,0,0,0,76,923,1,0,0,0,78,943,1,0,0,0,
        80,945,1,0,0,0,82,956,1,0,0,0,84,973,1,0,0,0,86,998,1,0,0,0,88,1002,
        1,0,0,0,90,1010,1,0,0,0,92,1017,1,0,0,0,94,1061,1,0,0,0,96,1070,
        1,0,0,0,98,1072,1,0,0,0,100,1087,1,0,0,0,102,1091,1,0,0,0,104,1095,
        1,0,0,0,106,1102,1,0,0,0,108,1106,1,0,0,0,110,1120,1,0,0,0,112,1136,
        1,0,0,0,114,1138,1,0,0,0,116,1147,1,0,0,0,118,1217,1,0,0,0,120,1221,
        1,0,0,0,122,1223,1,0,0,0,124,1244,1,0,0,0,126,1254,1,0,0,0,128,1260,
        1,0,0,0,130,1282,1,0,0,0,132,1284,1,0,0,0,134,1286,1,0,0,0,136,1295,
        1,0,0,0,138,1297,1,0,0,0,140,1307,1,0,0,0,142,1317,1,0,0,0,144,1333,
        1,0,0,0,146,1338,1,0,0,0,148,1378,1,0,0,0,150,1390,1,0,0,0,152,1397,
        1,0,0,0,154,1414,1,0,0,0,156,1416,1,0,0,0,158,1438,1,0,0,0,160,1468,
        1,0,0,0,162,1488,1,0,0,0,164,1490,1,0,0,0,166,1515,1,0,0,0,168,1531,
        1,0,0,0,170,1559,1,0,0,0,172,1576,1,0,0,0,174,1590,1,0,0,0,176,1610,
        1,0,0,0,178,1700,1,0,0,0,180,1702,1,0,0,0,182,1709,1,0,0,0,184,1711,
        1,0,0,0,186,1721,1,0,0,0,188,1727,1,0,0,0,190,1762,1,0,0,0,192,1765,
        1,0,0,0,194,1788,1,0,0,0,196,1817,1,0,0,0,198,1819,1,0,0,0,200,1821,
        1,0,0,0,202,1829,1,0,0,0,204,1832,1,0,0,0,206,1834,1,0,0,0,208,1838,
        1,0,0,0,210,1840,1,0,0,0,212,1842,1,0,0,0,214,1844,1,0,0,0,216,1869,
        1,0,0,0,218,1910,1,0,0,0,220,1912,1,0,0,0,222,1919,1,0,0,0,224,1921,
        1,0,0,0,226,1923,1,0,0,0,228,1925,1,0,0,0,230,1927,1,0,0,0,232,236,
        3,54,27,0,233,236,3,82,41,0,234,236,3,20,10,0,235,232,1,0,0,0,235,
        233,1,0,0,0,235,234,1,0,0,0,236,1,1,0,0,0,237,238,5,58,0,0,238,240,
        5,135,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,241,1,0,0,0,241,243,
        5,59,0,0,242,244,5,135,0,0,243,242,1,0,0,0,243,244,1,0,0,0,244,245,
        1,0,0,0,245,253,3,108,54,0,246,248,5,135,0,0,247,246,1,0,0,0,247,
        248,1,0,0,0,248,251,1,0,0,0,249,252,3,16,8,0,250,252,3,18,9,0,251,
        249,1,0,0,0,251,250,1,0,0,0,252,254,1,0,0,0,253,247,1,0,0,0,253,
        254,1,0,0,0,254,259,1,0,0,0,255,257,5,135,0,0,256,255,1,0,0,0,256,
        257,1,0,0,0,257,258,1,0,0,0,258,260,3,106,53,0,259,256,1,0,0,0,259,
        260,1,0,0,0,260,3,1,0,0,0,261,268,3,72,36,0,262,268,3,68,34,0,263,
        268,3,12,6,0,264,268,3,74,37,0,265,268,3,76,38,0,266,268,3,8,4,0,
        267,261,1,0,0,0,267,262,1,0,0,0,267,263,1,0,0,0,267,264,1,0,0,0,
        267,265,1,0,0,0,267,266,1,0,0,0,268,273,1,0,0,0,269,271,5,135,0,
        0,270,269,1,0,0,0,270,271,1,0,0,0,271,272,1,0,0,0,272,274,3,16,8,
        0,273,270,1,0,0,0,273,274,1,0,0,0,274,5,1,0,0,0,275,277,3,204,102,
        0,276,278,5,135,0,0,277,276,1,0,0,0,277,278,1,0,0,0,278,279,1,0,
        0,0,279,280,3,44,22,0,280,387,1,0,0,0,281,286,3,204,102,0,282,284,
        5,135,0,0,283,282,1,0,0,0,283,284,1,0,0,0,284,285,1,0,0,0,285,287,
        3,44,22,0,286,283,1,0,0,0,286,287,1,0,0,0,287,288,1,0,0,0,288,289,
        5,1,0,0,289,291,3,204,102,0,290,292,5,135,0,0,291,290,1,0,0,0,291,
        292,1,0,0,0,292,293,1,0,0,0,293,294,3,44,22,0,294,387,1,0,0,0,295,
        300,3,204,102,0,296,298,5,135,0,0,297,296,1,0,0,0,297,298,1,0,0,
        0,298,299,1,0,0,0,299,301,3,44,22,0,300,297,1,0,0,0,300,301,1,0,
        0,0,301,302,1,0,0,0,302,303,5,1,0,0,303,308,3,204,102,0,304,306,
        5,135,0,0,305,304,1,0,0,0,305,306,1,0,0,0,306,307,1,0,0,0,307,309,
        3,44,22,0,308,305,1,0,0,0,308,309,1,0,0,0,309,314,1,0,0,0,310,312,
        5,135,0,0,311,310,1,0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,313,315,
        5,47,0,0,314,311,1,0,0,0,314,315,1,0,0,0,315,317,1,0,0,0,316,318,
        5,135,0,0,317,316,1,0,0,0,317,318,1,0,0,0,318,319,1,0,0,0,319,320,
        3,44,22,0,320,387,1,0,0,0,321,326,3,204,102,0,322,324,5,135,0,0,
        323,322,1,0,0,0,323,324,1,0,0,0,324,325,1,0,0,0,325,327,3,44,22,
        0,326,323,1,0,0,0,326,327,1,0,0,0,327,328,1,0,0,0,328,329,5,1,0,
        0,329,334,3,204,102,0,330,332,5,135,0,0,331,330,1,0,0,0,331,332,
        1,0,0,0,332,333,1,0,0,0,333,335,3,44,22,0,334,331,1,0,0,0,334,335,
        1,0,0,0,335,337,1,0,0,0,336,338,5,135,0,0,337,336,1,0,0,0,337,338,
        1,0,0,0,338,339,1,0,0,0,339,341,5,2,0,0,340,342,5,135,0,0,341,340,
        1,0,0,0,341,342,1,0,0,0,342,343,1,0,0,0,343,348,3,136,68,0,344,346,
        5,135,0,0,345,344,1,0,0,0,345,346,1,0,0,0,346,347,1,0,0,0,347,349,
        3,44,22,0,348,345,1,0,0,0,348,349,1,0,0,0,349,387,1,0,0,0,350,352,
        3,134,67,0,351,353,5,135,0,0,352,351,1,0,0,0,352,353,1,0,0,0,353,
        354,1,0,0,0,354,356,5,2,0,0,355,357,5,135,0,0,356,355,1,0,0,0,356,
        357,1,0,0,0,357,358,1,0,0,0,358,359,3,136,68,0,359,387,1,0,0,0,360,
        362,3,204,102,0,361,363,5,135,0,0,362,361,1,0,0,0,362,363,1,0,0,
        0,363,364,1,0,0,0,364,366,5,2,0,0,365,367,5,135,0,0,366,365,1,0,
        0,0,366,367,1,0,0,0,367,368,1,0,0,0,368,369,3,136,68,0,369,387,1,
        0,0,0,370,372,3,204,102,0,371,373,5,135,0,0,372,371,1,0,0,0,372,
        373,1,0,0,0,373,374,1,0,0,0,374,376,5,3,0,0,375,377,5,135,0,0,376,
        375,1,0,0,0,376,377,1,0,0,0,377,378,1,0,0,0,378,379,3,136,68,0,379,
        387,1,0,0,0,380,382,3,204,102,0,381,383,5,135,0,0,382,381,1,0,0,
        0,382,383,1,0,0,0,383,384,1,0,0,0,384,385,3,124,62,0,385,387,1,0,
        0,0,386,275,1,0,0,0,386,281,1,0,0,0,386,295,1,0,0,0,386,321,1,0,
        0,0,386,350,1,0,0,0,386,360,1,0,0,0,386,370,1,0,0,0,386,380,1,0,
        0,0,387,7,1,0,0,0,388,390,5,53,0,0,389,391,5,135,0,0,390,389,1,0,
        0,0,390,391,1,0,0,0,391,392,1,0,0,0,392,403,3,10,5,0,393,395,5,135,
        0,0,394,393,1,0,0,0,394,395,1,0,0,0,395,396,1,0,0,0,396,398,5,4,
        0,0,397,399,5,135,0,0,398,397,1,0,0,0,398,399,1,0,0,0,399,400,1,
        0,0,0,400,402,3,10,5,0,401,394,1,0,0,0,402,405,1,0,0,0,403,401,1,
        0,0,0,403,404,1,0,0,0,404,9,1,0,0,0,405,403,1,0,0,0,406,415,3,204,
        102,0,407,408,5,1,0,0,408,413,3,204,102,0,409,411,5,135,0,0,410,
        409,1,0,0,0,410,411,1,0,0,0,411,412,1,0,0,0,412,414,5,47,0,0,413,
        410,1,0,0,0,413,414,1,0,0,0,414,416,1,0,0,0,415,407,1,0,0,0,415,
        416,1,0,0,0,416,11,1,0,0,0,417,418,5,66,0,0,418,420,5,135,0,0,419,
        417,1,0,0,0,419,420,1,0,0,0,420,421,1,0,0,0,421,423,5,67,0,0,422,
        424,5,135,0,0,423,422,1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,
        436,3,14,7,0,426,428,5,135,0,0,427,426,1,0,0,0,427,428,1,0,0,0,428,
        429,1,0,0,0,429,431,5,4,0,0,430,432,5,135,0,0,431,430,1,0,0,0,431,
        432,1,0,0,0,432,433,1,0,0,0,433,435,3,14,7,0,434,427,1,0,0,0,435,
        438,1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,437,13,1,0,0,0,438,436,
        1,0,0,0,439,448,3,204,102,0,440,441,5,1,0,0,441,446,3,204,102,0,
        442,444,5,135,0,0,443,442,1,0,0,0,443,444,1,0,0,0,444,445,1,0,0,
        0,445,447,5,47,0,0,446,443,1,0,0,0,446,447,1,0,0,0,447,449,1,0,0,
        0,448,440,1,0,0,0,448,449,1,0,0,0,449,15,1,0,0,0,450,452,5,49,0,
        0,451,453,5,135,0,0,452,451,1,0,0,0,452,453,1,0,0,0,453,454,1,0,
        0,0,454,455,3,136,68,0,455,17,1,0,0,0,456,458,5,51,0,0,457,459,5,
        135,0,0,458,457,1,0,0,0,458,459,1,0,0,0,459,460,1,0,0,0,460,461,
        3,136,68,0,461,19,1,0,0,0,462,464,5,50,0,0,463,465,5,135,0,0,464,
        463,1,0,0,0,464,465,1,0,0,0,465,466,1,0,0,0,466,473,3,136,68,0,467,
        469,5,52,0,0,468,470,5,135,0,0,469,468,1,0,0,0,469,470,1,0,0,0,470,
        471,1,0,0,0,471,473,3,136,68,0,472,462,1,0,0,0,472,467,1,0,0,0,473,
        21,1,0,0,0,474,476,3,204,102,0,475,477,5,135,0,0,476,475,1,0,0,0,
        476,477,1,0,0,0,477,478,1,0,0,0,478,480,5,2,0,0,479,481,5,135,0,
        0,480,479,1,0,0,0,480,481,1,0,0,0,481,482,1,0,0,0,482,483,3,24,12,
        0,483,496,1,0,0,0,484,486,3,204,102,0,485,487,5,135,0,0,486,485,
        1,0,0,0,486,487,1,0,0,0,487,488,1,0,0,0,488,490,5,2,0,0,489,491,
        5,135,0,0,490,489,1,0,0,0,490,491,1,0,0,0,491,492,1,0,0,0,492,493,
        3,110,55,0,493,496,1,0,0,0,494,496,3,110,55,0,495,474,1,0,0,0,495,
        484,1,0,0,0,495,494,1,0,0,0,496,23,1,0,0,0,497,499,3,190,95,0,498,
        500,5,135,0,0,499,498,1,0,0,0,499,500,1,0,0,0,500,501,1,0,0,0,501,
        503,5,5,0,0,502,504,5,135,0,0,503,502,1,0,0,0,503,504,1,0,0,0,504,
        505,1,0,0,0,505,507,3,26,13,0,506,508,5,135,0,0,507,506,1,0,0,0,
        507,508,1,0,0,0,508,509,1,0,0,0,509,510,5,6,0,0,510,25,1,0,0,0,511,
        513,3,28,14,0,512,514,5,135,0,0,513,512,1,0,0,0,513,514,1,0,0,0,
        514,515,1,0,0,0,515,517,3,118,59,0,516,518,5,135,0,0,517,516,1,0,
        0,0,517,518,1,0,0,0,518,519,1,0,0,0,519,520,3,28,14,0,520,27,1,0,
        0,0,521,523,5,5,0,0,522,524,5,135,0,0,523,522,1,0,0,0,523,524,1,
        0,0,0,524,529,1,0,0,0,525,527,3,204,102,0,526,528,5,135,0,0,527,
        526,1,0,0,0,527,528,1,0,0,0,528,530,1,0,0,0,529,525,1,0,0,0,529,
        530,1,0,0,0,530,535,1,0,0,0,531,533,3,124,62,0,532,534,5,135,0,0,
        533,532,1,0,0,0,533,534,1,0,0,0,534,536,1,0,0,0,535,531,1,0,0,0,
        535,536,1,0,0,0,536,541,1,0,0,0,537,539,3,44,22,0,538,540,5,135,
        0,0,539,538,1,0,0,0,539,540,1,0,0,0,540,542,1,0,0,0,541,537,1,0,
        0,0,541,542,1,0,0,0,542,547,1,0,0,0,543,545,3,30,15,0,544,546,5,
        135,0,0,545,544,1,0,0,0,545,546,1,0,0,0,546,548,1,0,0,0,547,543,
        1,0,0,0,547,548,1,0,0,0,548,549,1,0,0,0,549,550,5,6,0,0,550,29,1,
        0,0,0,551,554,3,32,16,0,552,554,3,220,110,0,553,551,1,0,0,0,553,
        552,1,0,0,0,554,31,1,0,0,0,555,557,5,7,0,0,556,558,5,135,0,0,557,
        556,1,0,0,0,557,558,1,0,0,0,558,616,1,0,0,0,559,561,3,218,109,0,
        560,562,5,135,0,0,561,560,1,0,0,0,561,562,1,0,0,0,562,567,1,0,0,
        0,563,565,3,44,22,0,564,566,5,135,0,0,565,564,1,0,0,0,565,566,1,
        0,0,0,566,568,1,0,0,0,567,563,1,0,0,0,567,568,1,0,0,0,568,569,1,
        0,0,0,569,571,5,8,0,0,570,572,5,135,0,0,571,570,1,0,0,0,571,572,
        1,0,0,0,572,573,1,0,0,0,573,575,3,136,68,0,574,576,5,135,0,0,575,
        574,1,0,0,0,575,576,1,0,0,0,576,581,1,0,0,0,577,579,3,44,22,0,578,
        580,5,135,0,0,579,578,1,0,0,0,579,580,1,0,0,0,580,582,1,0,0,0,581,
        577,1,0,0,0,581,582,1,0,0,0,582,613,1,0,0,0,583,585,5,4,0,0,584,
        586,5,135,0,0,585,584,1,0,0,0,585,586,1,0,0,0,586,587,1,0,0,0,587,
        589,3,218,109,0,588,590,5,135,0,0,589,588,1,0,0,0,589,590,1,0,0,
        0,590,595,1,0,0,0,591,593,3,44,22,0,592,594,5,135,0,0,593,592,1,
        0,0,0,593,594,1,0,0,0,594,596,1,0,0,0,595,591,1,0,0,0,595,596,1,
        0,0,0,596,597,1,0,0,0,597,599,5,8,0,0,598,600,5,135,0,0,599,598,
        1,0,0,0,599,600,1,0,0,0,600,601,1,0,0,0,601,603,3,136,68,0,602,604,
        5,135,0,0,603,602,1,0,0,0,603,604,1,0,0,0,604,609,1,0,0,0,605,607,
        3,44,22,0,606,608,5,135,0,0,607,606,1,0,0,0,607,608,1,0,0,0,608,
        610,1,0,0,0,609,605,1,0,0,0,609,610,1,0,0,0,610,612,1,0,0,0,611,
        583,1,0,0,0,612,615,1,0,0,0,613,611,1,0,0,0,613,614,1,0,0,0,614,
        617,1,0,0,0,615,613,1,0,0,0,616,559,1,0,0,0,616,617,1,0,0,0,617,
        618,1,0,0,0,618,619,5,9,0,0,619,33,1,0,0,0,620,622,5,10,0,0,621,
        623,5,135,0,0,622,621,1,0,0,0,622,623,1,0,0,0,623,628,1,0,0,0,624,
        626,3,204,102,0,625,627,5,135,0,0,626,625,1,0,0,0,626,627,1,0,0,
        0,627,629,1,0,0,0,628,624,1,0,0,0,628,629,1,0,0,0,629,634,1,0,0,
        0,630,632,3,122,61,0,631,633,5,135,0,0,632,631,1,0,0,0,632,633,1,
        0,0,0,633,635,1,0,0,0,634,630,1,0,0,0,634,635,1,0,0,0,635,637,1,
        0,0,0,636,638,3,128,64,0,637,636,1,0,0,0,637,638,1,0,0,0,638,643,
        1,0,0,0,639,641,3,44,22,0,640,642,5,135,0,0,641,640,1,0,0,0,641,
        642,1,0,0,0,642,644,1,0,0,0,643,639,1,0,0,0,643,644,1,0,0,0,644,
        649,1,0,0,0,645,647,3,120,60,0,646,648,5,135,0,0,647,646,1,0,0,0,
        647,648,1,0,0,0,648,650,1,0,0,0,649,645,1,0,0,0,649,650,1,0,0,0,
        650,651,1,0,0,0,651,652,5,11,0,0,652,35,1,0,0,0,653,660,3,156,78,
        0,654,659,3,38,19,0,655,659,3,150,75,0,656,659,3,152,76,0,657,659,
        3,154,77,0,658,654,1,0,0,0,658,655,1,0,0,0,658,656,1,0,0,0,658,657,
        1,0,0,0,659,662,1,0,0,0,660,658,1,0,0,0,660,661,1,0,0,0,661,37,1,
        0,0,0,662,660,1,0,0,0,663,664,5,135,0,0,664,665,7,0,0,0,665,666,
        5,135,0,0,666,667,3,156,78,0,667,39,1,0,0,0,668,709,3,42,21,0,669,
        709,3,220,110,0,670,709,3,170,85,0,671,673,5,93,0,0,672,674,5,135,
        0,0,673,672,1,0,0,0,673,674,1,0,0,0,674,675,1,0,0,0,675,677,5,5,
        0,0,676,678,5,135,0,0,677,676,1,0,0,0,677,678,1,0,0,0,678,679,1,
        0,0,0,679,681,5,12,0,0,680,682,5,135,0,0,681,680,1,0,0,0,681,682,
        1,0,0,0,682,683,1,0,0,0,683,709,5,6,0,0,684,709,3,174,87,0,685,709,
        3,176,88,0,686,709,3,178,89,0,687,709,3,182,91,0,688,709,3,184,92,
        0,689,709,3,188,94,0,690,709,3,192,96,0,691,700,3,204,102,0,692,
        693,5,1,0,0,693,698,3,204,102,0,694,696,5,135,0,0,695,694,1,0,0,
        0,695,696,1,0,0,0,696,697,1,0,0,0,697,699,5,47,0,0,698,695,1,0,0,
        0,698,699,1,0,0,0,699,701,1,0,0,0,700,692,1,0,0,0,700,701,1,0,0,
        0,701,706,1,0,0,0,702,704,5,135,0,0,703,702,1,0,0,0,703,704,1,0,
        0,0,704,705,1,0,0,0,705,707,5,46,0,0,706,703,1,0,0,0,706,707,1,0,
        0,0,707,709,1,0,0,0,708,668,1,0,0,0,708,669,1,0,0,0,708,670,1,0,
        0,0,708,671,1,0,0,0,708,684,1,0,0,0,708,685,1,0,0,0,708,686,1,0,
        0,0,708,687,1,0,0,0,708,688,1,0,0,0,708,689,1,0,0,0,708,690,1,0,
        0,0,708,691,1,0,0,0,709,41,1,0,0,0,710,718,3,206,103,0,711,718,5,
        92,0,0,712,718,3,208,104,0,713,718,5,117,0,0,714,718,3,214,107,0,
        715,718,3,216,108,0,716,718,5,48,0,0,717,710,1,0,0,0,717,711,1,0,
        0,0,717,712,1,0,0,0,717,713,1,0,0,0,717,714,1,0,0,0,717,715,1,0,
        0,0,717,716,1,0,0,0,718,43,1,0,0,0,719,721,5,46,0,0,720,722,5,135,
        0,0,721,720,1,0,0,0,721,722,1,0,0,0,722,723,1,0,0,0,723,725,5,5,
        0,0,724,726,5,135,0,0,725,724,1,0,0,0,725,726,1,0,0,0,726,727,1,
        0,0,0,727,729,3,46,23,0,728,730,5,135,0,0,729,728,1,0,0,0,729,730,
        1,0,0,0,730,731,1,0,0,0,731,733,5,4,0,0,732,734,5,135,0,0,733,732,
        1,0,0,0,733,734,1,0,0,0,734,737,1,0,0,0,735,738,3,46,23,0,736,738,
        5,48,0,0,737,735,1,0,0,0,737,736,1,0,0,0,738,740,1,0,0,0,739,741,
        5,135,0,0,740,739,1,0,0,0,740,741,1,0,0,0,741,742,1,0,0,0,742,743,
        5,6,0,0,743,45,1,0,0,0,744,747,5,117,0,0,745,747,3,216,108,0,746,
        744,1,0,0,0,746,745,1,0,0,0,747,47,1,0,0,0,748,749,7,1,0,0,749,49,
        1,0,0,0,750,752,5,135,0,0,751,750,1,0,0,0,751,752,1,0,0,0,752,753,
        1,0,0,0,753,758,3,52,26,0,754,756,5,135,0,0,755,754,1,0,0,0,755,
        756,1,0,0,0,756,757,1,0,0,0,757,759,5,13,0,0,758,755,1,0,0,0,758,
        759,1,0,0,0,759,761,1,0,0,0,760,762,5,135,0,0,761,760,1,0,0,0,761,
        762,1,0,0,0,762,763,1,0,0,0,763,764,5,0,0,1,764,51,1,0,0,0,765,766,
        3,0,0,0,766,53,1,0,0,0,767,774,3,58,29,0,768,770,5,135,0,0,769,768,
        1,0,0,0,769,770,1,0,0,0,770,771,1,0,0,0,771,773,3,56,28,0,772,769,
        1,0,0,0,773,776,1,0,0,0,774,772,1,0,0,0,774,775,1,0,0,0,775,55,1,
        0,0,0,776,774,1,0,0,0,777,778,5,56,0,0,778,779,5,135,0,0,779,781,
        5,57,0,0,780,782,5,135,0,0,781,780,1,0,0,0,781,782,1,0,0,0,782,783,
        1,0,0,0,783,790,3,58,29,0,784,786,5,56,0,0,785,787,5,135,0,0,786,
        785,1,0,0,0,786,787,1,0,0,0,787,788,1,0,0,0,788,790,3,58,29,0,789,
        777,1,0,0,0,789,784,1,0,0,0,790,57,1,0,0,0,791,794,3,60,30,0,792,
        794,3,62,31,0,793,791,1,0,0,0,793,792,1,0,0,0,794,59,1,0,0,0,795,
        797,3,64,32,0,796,798,5,135,0,0,797,796,1,0,0,0,797,798,1,0,0,0,
        798,800,1,0,0,0,799,795,1,0,0,0,800,803,1,0,0,0,801,799,1,0,0,0,
        801,802,1,0,0,0,802,804,1,0,0,0,803,801,1,0,0,0,804,831,3,90,45,
        0,805,807,3,64,32,0,806,808,5,135,0,0,807,806,1,0,0,0,807,808,1,
        0,0,0,808,810,1,0,0,0,809,805,1,0,0,0,810,813,1,0,0,0,811,809,1,
        0,0,0,811,812,1,0,0,0,812,814,1,0,0,0,813,811,1,0,0,0,814,821,3,
        4,2,0,815,817,5,135,0,0,816,815,1,0,0,0,816,817,1,0,0,0,817,818,
        1,0,0,0,818,820,3,4,2,0,819,816,1,0,0,0,820,823,1,0,0,0,821,819,
        1,0,0,0,821,822,1,0,0,0,822,828,1,0,0,0,823,821,1,0,0,0,824,826,
        5,135,0,0,825,824,1,0,0,0,825,826,1,0,0,0,826,827,1,0,0,0,827,829,
        3,90,45,0,828,825,1,0,0,0,828,829,1,0,0,0,829,831,1,0,0,0,830,801,
        1,0,0,0,830,811,1,0,0,0,831,61,1,0,0,0,832,834,3,64,32,0,833,835,
        5,135,0,0,834,833,1,0,0,0,834,835,1,0,0,0,835,837,1,0,0,0,836,832,
        1,0,0,0,837,840,1,0,0,0,838,836,1,0,0,0,838,839,1,0,0,0,839,847,
        1,0,0,0,840,838,1,0,0,0,841,843,3,4,2,0,842,844,5,135,0,0,843,842,
        1,0,0,0,843,844,1,0,0,0,844,846,1,0,0,0,845,841,1,0,0,0,846,849,
        1,0,0,0,847,845,1,0,0,0,847,848,1,0,0,0,848,850,1,0,0,0,849,847,
        1,0,0,0,850,852,3,88,44,0,851,853,5,135,0,0,852,851,1,0,0,0,852,
        853,1,0,0,0,853,855,1,0,0,0,854,838,1,0,0,0,855,856,1,0,0,0,856,
        854,1,0,0,0,856,857,1,0,0,0,857,858,1,0,0,0,858,859,3,60,30,0,859,
        63,1,0,0,0,860,864,3,2,1,0,861,864,3,66,33,0,862,864,3,80,40,0,863,
        860,1,0,0,0,863,861,1,0,0,0,863,862,1,0,0,0,864,65,1,0,0,0,865,867,
        5,60,0,0,866,868,5,135,0,0,867,866,1,0,0,0,867,868,1,0,0,0,868,869,
        1,0,0,0,869,870,3,136,68,0,870,871,5,135,0,0,871,872,5,61,0,0,872,
        873,5,135,0,0,873,874,3,204,102,0,874,67,1,0,0,0,875,877,5,62,0,
        0,876,878,5,135,0,0,877,876,1,0,0,0,877,878,1,0,0,0,878,879,1,0,
        0,0,879,884,3,22,11,0,880,881,5,135,0,0,881,883,3,70,35,0,882,880,
        1,0,0,0,883,886,1,0,0,0,884,882,1,0,0,0,884,885,1,0,0,0,885,69,1,
        0,0,0,886,884,1,0,0,0,887,888,5,63,0,0,888,889,5,135,0,0,889,890,
        5,59,0,0,890,891,5,135,0,0,891,898,3,74,37,0,892,893,5,63,0,0,893,
        894,5,135,0,0,894,895,5,64,0,0,895,896,5,135,0,0,896,898,3,74,37,
        0,897,887,1,0,0,0,897,892,1,0,0,0,898,71,1,0,0,0,899,901,5,64,0,
        0,900,902,5,135,0,0,901,900,1,0,0,0,901,902,1,0,0,0,902,903,1,0,
        0,0,903,904,3,108,54,0,904,73,1,0,0,0,905,907,5,65,0,0,906,908,5,
        135,0,0,907,906,1,0,0,0,907,908,1,0,0,0,908,909,1,0,0,0,909,920,
        3,6,3,0,910,912,5,135,0,0,911,910,1,0,0,0,911,912,1,0,0,0,912,913,
        1,0,0,0,913,915,5,4,0,0,914,916,5,135,0,0,915,914,1,0,0,0,915,916,
        1,0,0,0,916,917,1,0,0,0,917,919,3,6,3,0,918,911,1,0,0,0,919,922,
        1,0,0,0,920,918,1,0,0,0,920,921,1,0,0,0,921,75,1,0,0,0,922,920,1,
        0,0,0,923,924,5,68,0,0,924,925,5,135,0,0,925,936,3,78,39,0,926,928,
        5,135,0,0,927,926,1,0,0,0,927,928,1,0,0,0,928,929,1,0,0,0,929,931,
        5,4,0,0,930,932,5,135,0,0,931,930,1,0,0,0,931,932,1,0,0,0,932,933,
        1,0,0,0,933,935,3,78,39,0,934,927,1,0,0,0,935,938,1,0,0,0,936,934,
        1,0,0,0,936,937,1,0,0,0,937,77,1,0,0,0,938,936,1,0,0,0,939,940,3,
        204,102,0,940,941,3,124,62,0,941,944,1,0,0,0,942,944,3,134,67,0,
        943,939,1,0,0,0,943,942,1,0,0,0,944,79,1,0,0,0,945,946,5,69,0,0,
        946,947,5,135,0,0,947,954,3,194,97,0,948,950,5,135,0,0,949,948,1,
        0,0,0,949,950,1,0,0,0,950,951,1,0,0,0,951,952,5,70,0,0,952,953,5,
        135,0,0,953,955,3,84,42,0,954,949,1,0,0,0,954,955,1,0,0,0,955,81,
        1,0,0,0,956,957,5,69,0,0,957,960,5,135,0,0,958,961,3,194,97,0,959,
        961,3,196,98,0,960,958,1,0,0,0,960,959,1,0,0,0,961,971,1,0,0,0,962,
        964,5,135,0,0,963,962,1,0,0,0,963,964,1,0,0,0,964,965,1,0,0,0,965,
        966,5,70,0,0,966,969,5,135,0,0,967,970,5,12,0,0,968,970,3,84,42,
        0,969,967,1,0,0,0,969,968,1,0,0,0,970,972,1,0,0,0,971,963,1,0,0,
        0,971,972,1,0,0,0,972,83,1,0,0,0,973,984,3,86,43,0,974,976,5,135,
        0,0,975,974,1,0,0,0,975,976,1,0,0,0,976,977,1,0,0,0,977,979,5,4,
        0,0,978,980,5,135,0,0,979,978,1,0,0,0,979,980,1,0,0,0,980,981,1,
        0,0,0,981,983,3,86,43,0,982,975,1,0,0,0,983,986,1,0,0,0,984,982,
        1,0,0,0,984,985,1,0,0,0,985,991,1,0,0,0,986,984,1,0,0,0,987,989,
        5,135,0,0,988,987,1,0,0,0,988,989,1,0,0,0,989,990,1,0,0,0,990,992,
        3,106,53,0,991,988,1,0,0,0,991,992,1,0,0,0,992,85,1,0,0,0,993,994,
        3,198,99,0,994,995,5,135,0,0,995,996,5,61,0,0,996,997,5,135,0,0,
        997,999,1,0,0,0,998,993,1,0,0,0,998,999,1,0,0,0,999,1000,1,0,0,0,
        1000,1001,3,204,102,0,1001,87,1,0,0,0,1002,1003,5,71,0,0,1003,1008,
        3,92,46,0,1004,1006,5,135,0,0,1005,1004,1,0,0,0,1005,1006,1,0,0,
        0,1006,1007,1,0,0,0,1007,1009,3,106,53,0,1008,1005,1,0,0,0,1008,
        1009,1,0,0,0,1009,89,1,0,0,0,1010,1011,5,72,0,0,1011,1012,3,92,46,
        0,1012,91,1,0,0,0,1013,1015,5,135,0,0,1014,1013,1,0,0,0,1014,1015,
        1,0,0,0,1015,1016,1,0,0,0,1016,1018,5,73,0,0,1017,1014,1,0,0,0,1017,
        1018,1,0,0,0,1018,1019,1,0,0,0,1019,1020,5,135,0,0,1020,1023,3,94,
        47,0,1021,1022,5,135,0,0,1022,1024,3,98,49,0,1023,1021,1,0,0,0,1023,
        1024,1,0,0,0,1024,1027,1,0,0,0,1025,1026,5,135,0,0,1026,1028,3,100,
        50,0,1027,1025,1,0,0,0,1027,1028,1,0,0,0,1028,1031,1,0,0,0,1029,
        1030,5,135,0,0,1030,1032,3,102,51,0,1031,1029,1,0,0,0,1031,1032,
        1,0,0,0,1032,93,1,0,0,0,1033,1044,5,12,0,0,1034,1036,5,135,0,0,1035,
        1034,1,0,0,0,1035,1036,1,0,0,0,1036,1037,1,0,0,0,1037,1039,5,4,0,
        0,1038,1040,5,135,0,0,1039,1038,1,0,0,0,1039,1040,1,0,0,0,1040,1041,
        1,0,0,0,1041,1043,3,96,48,0,1042,1035,1,0,0,0,1043,1046,1,0,0,0,
        1044,1042,1,0,0,0,1044,1045,1,0,0,0,1045,1062,1,0,0,0,1046,1044,
        1,0,0,0,1047,1058,3,96,48,0,1048,1050,5,135,0,0,1049,1048,1,0,0,
        0,1049,1050,1,0,0,0,1050,1051,1,0,0,0,1051,1053,5,4,0,0,1052,1054,
        5,135,0,0,1053,1052,1,0,0,0,1053,1054,1,0,0,0,1054,1055,1,0,0,0,
        1055,1057,3,96,48,0,1056,1049,1,0,0,0,1057,1060,1,0,0,0,1058,1056,
        1,0,0,0,1058,1059,1,0,0,0,1059,1062,1,0,0,0,1060,1058,1,0,0,0,1061,
        1033,1,0,0,0,1061,1047,1,0,0,0,1062,95,1,0,0,0,1063,1064,3,136,68,
        0,1064,1065,5,135,0,0,1065,1066,5,61,0,0,1066,1067,5,135,0,0,1067,
        1068,3,204,102,0,1068,1071,1,0,0,0,1069,1071,3,136,68,0,1070,1063,
        1,0,0,0,1070,1069,1,0,0,0,1071,97,1,0,0,0,1072,1073,5,74,0,0,1073,
        1074,5,135,0,0,1074,1075,5,75,0,0,1075,1076,5,135,0,0,1076,1084,
        3,104,52,0,1077,1079,5,4,0,0,1078,1080,5,135,0,0,1079,1078,1,0,0,
        0,1079,1080,1,0,0,0,1080,1081,1,0,0,0,1081,1083,3,104,52,0,1082,
        1077,1,0,0,0,1083,1086,1,0,0,0,1084,1082,1,0,0,0,1084,1085,1,0,0,
        0,1085,99,1,0,0,0,1086,1084,1,0,0,0,1087,1088,5,76,0,0,1088,1089,
        5,135,0,0,1089,1090,3,136,68,0,1090,101,1,0,0,0,1091,1092,5,77,0,
        0,1092,1093,5,135,0,0,1093,1094,3,136,68,0,1094,103,1,0,0,0,1095,
        1100,3,136,68,0,1096,1098,5,135,0,0,1097,1096,1,0,0,0,1097,1098,
        1,0,0,0,1098,1099,1,0,0,0,1099,1101,7,2,0,0,1100,1097,1,0,0,0,1100,
        1101,1,0,0,0,1101,105,1,0,0,0,1102,1103,5,82,0,0,1103,1104,5,135,
        0,0,1104,1105,3,136,68,0,1105,107,1,0,0,0,1106,1117,3,22,11,0,1107,
        1109,5,135,0,0,1108,1107,1,0,0,0,1108,1109,1,0,0,0,1109,1110,1,0,
        0,0,1110,1112,5,4,0,0,1111,1113,5,135,0,0,1112,1111,1,0,0,0,1112,
        1113,1,0,0,0,1113,1114,1,0,0,0,1114,1116,3,22,11,0,1115,1108,1,0,
        0,0,1116,1119,1,0,0,0,1117,1115,1,0,0,0,1117,1118,1,0,0,0,1118,109,
        1,0,0,0,1119,1117,1,0,0,0,1120,1121,3,112,56,0,1121,111,1,0,0,0,
        1122,1129,3,28,14,0,1123,1125,5,135,0,0,1124,1123,1,0,0,0,1124,1125,
        1,0,0,0,1125,1126,1,0,0,0,1126,1128,3,116,58,0,1127,1124,1,0,0,0,
        1128,1131,1,0,0,0,1129,1127,1,0,0,0,1129,1130,1,0,0,0,1130,1137,
        1,0,0,0,1131,1129,1,0,0,0,1132,1133,5,5,0,0,1133,1134,3,112,56,0,
        1134,1135,5,6,0,0,1135,1137,1,0,0,0,1136,1122,1,0,0,0,1136,1132,
        1,0,0,0,1137,113,1,0,0,0,1138,1143,3,28,14,0,1139,1141,5,135,0,0,
        1140,1139,1,0,0,0,1140,1141,1,0,0,0,1141,1142,1,0,0,0,1142,1144,
        3,116,58,0,1143,1140,1,0,0,0,1144,1145,1,0,0,0,1145,1143,1,0,0,0,
        1145,1146,1,0,0,0,1146,115,1,0,0,0,1147,1149,3,118,59,0,1148,1150,
        5,135,0,0,1149,1148,1,0,0,0,1149,1150,1,0,0,0,1150,1151,1,0,0,0,
        1151,1152,3,28,14,0,1152,117,1,0,0,0,1153,1155,3,226,113,0,1154,
        1156,5,135,0,0,1155,1154,1,0,0,0,1155,1156,1,0,0,0,1156,1157,1,0,
        0,0,1157,1159,3,230,115,0,1158,1160,5,135,0,0,1159,1158,1,0,0,0,
        1159,1160,1,0,0,0,1160,1162,1,0,0,0,1161,1163,3,34,17,0,1162,1161,
        1,0,0,0,1162,1163,1,0,0,0,1163,1165,1,0,0,0,1164,1166,5,135,0,0,
        1165,1164,1,0,0,0,1165,1166,1,0,0,0,1166,1167,1,0,0,0,1167,1169,
        3,230,115,0,1168,1170,5,135,0,0,1169,1168,1,0,0,0,1169,1170,1,0,
        0,0,1170,1171,1,0,0,0,1171,1172,3,228,114,0,1172,1218,1,0,0,0,1173,
        1175,3,226,113,0,1174,1176,5,135,0,0,1175,1174,1,0,0,0,1175,1176,
        1,0,0,0,1176,1177,1,0,0,0,1177,1179,3,230,115,0,1178,1180,5,135,
        0,0,1179,1178,1,0,0,0,1179,1180,1,0,0,0,1180,1182,1,0,0,0,1181,1183,
        3,34,17,0,1182,1181,1,0,0,0,1182,1183,1,0,0,0,1183,1185,1,0,0,0,
        1184,1186,5,135,0,0,1185,1184,1,0,0,0,1185,1186,1,0,0,0,1186,1187,
        1,0,0,0,1187,1188,3,230,115,0,1188,1218,1,0,0,0,1189,1191,3,230,
        115,0,1190,1192,5,135,0,0,1191,1190,1,0,0,0,1191,1192,1,0,0,0,1192,
        1194,1,0,0,0,1193,1195,3,34,17,0,1194,1193,1,0,0,0,1194,1195,1,0,
        0,0,1195,1197,1,0,0,0,1196,1198,5,135,0,0,1197,1196,1,0,0,0,1197,
        1198,1,0,0,0,1198,1199,1,0,0,0,1199,1201,3,230,115,0,1200,1202,5,
        135,0,0,1201,1200,1,0,0,0,1201,1202,1,0,0,0,1202,1203,1,0,0,0,1203,
        1204,3,228,114,0,1204,1218,1,0,0,0,1205,1207,3,230,115,0,1206,1208,
        5,135,0,0,1207,1206,1,0,0,0,1207,1208,1,0,0,0,1208,1210,1,0,0,0,
        1209,1211,3,34,17,0,1210,1209,1,0,0,0,1210,1211,1,0,0,0,1211,1213,
        1,0,0,0,1212,1214,5,135,0,0,1213,1212,1,0,0,0,1213,1214,1,0,0,0,
        1214,1215,1,0,0,0,1215,1216,3,230,115,0,1216,1218,1,0,0,0,1217,1153,
        1,0,0,0,1217,1173,1,0,0,0,1217,1189,1,0,0,0,1217,1205,1,0,0,0,1218,
        119,1,0,0,0,1219,1222,3,216,108,0,1220,1222,3,220,110,0,1221,1219,
        1,0,0,0,1221,1220,1,0,0,0,1222,121,1,0,0,0,1223,1225,5,8,0,0,1224,
        1226,5,135,0,0,1225,1224,1,0,0,0,1225,1226,1,0,0,0,1226,1227,1,0,
        0,0,1227,1241,3,132,66,0,1228,1230,5,135,0,0,1229,1228,1,0,0,0,1229,
        1230,1,0,0,0,1230,1231,1,0,0,0,1231,1233,5,14,0,0,1232,1234,5,8,
        0,0,1233,1232,1,0,0,0,1233,1234,1,0,0,0,1234,1236,1,0,0,0,1235,1237,
        5,135,0,0,1236,1235,1,0,0,0,1236,1237,1,0,0,0,1237,1238,1,0,0,0,
        1238,1240,3,132,66,0,1239,1229,1,0,0,0,1240,1243,1,0,0,0,1241,1239,
        1,0,0,0,1241,1242,1,0,0,0,1242,123,1,0,0,0,1243,1241,1,0,0,0,1244,
        1251,3,126,63,0,1245,1247,5,135,0,0,1246,1245,1,0,0,0,1246,1247,
        1,0,0,0,1247,1248,1,0,0,0,1248,1250,3,126,63,0,1249,1246,1,0,0,0,
        1250,1253,1,0,0,0,1251,1249,1,0,0,0,1251,1252,1,0,0,0,1252,125,1,
        0,0,0,1253,1251,1,0,0,0,1254,1256,5,8,0,0,1255,1257,5,135,0,0,1256,
        1255,1,0,0,0,1256,1257,1,0,0,0,1257,1258,1,0,0,0,1258,1259,3,130,
        65,0,1259,127,1,0,0,0,1260,1262,5,12,0,0,1261,1263,5,135,0,0,1262,
        1261,1,0,0,0,1262,1263,1,0,0,0,1263,1268,1,0,0,0,1264,1266,3,210,
        105,0,1265,1267,5,135,0,0,1266,1265,1,0,0,0,1266,1267,1,0,0,0,1267,
        1269,1,0,0,0,1268,1264,1,0,0,0,1268,1269,1,0,0,0,1269,1280,1,0,0,
        0,1270,1272,5,15,0,0,1271,1273,5,135,0,0,1272,1271,1,0,0,0,1272,
        1273,1,0,0,0,1273,1278,1,0,0,0,1274,1276,3,210,105,0,1275,1277,5,
        135,0,0,1276,1275,1,0,0,0,1276,1277,1,0,0,0,1277,1279,1,0,0,0,1278,
        1274,1,0,0,0,1278,1279,1,0,0,0,1279,1281,1,0,0,0,1280,1270,1,0,0,
        0,1280,1281,1,0,0,0,1281,129,1,0,0,0,1282,1283,3,222,111,0,1283,
        131,1,0,0,0,1284,1285,3,222,111,0,1285,133,1,0,0,0,1286,1291,3,40,
        20,0,1287,1289,5,135,0,0,1288,1287,1,0,0,0,1288,1289,1,0,0,0,1289,
        1290,1,0,0,0,1290,1292,3,168,84,0,1291,1288,1,0,0,0,1292,1293,1,
        0,0,0,1293,1291,1,0,0,0,1293,1294,1,0,0,0,1294,135,1,0,0,0,1295,
        1296,3,138,69,0,1296,137,1,0,0,0,1297,1304,3,140,70,0,1298,1299,
        5,135,0,0,1299,1300,5,83,0,0,1300,1301,5,135,0,0,1301,1303,3,140,
        70,0,1302,1298,1,0,0,0,1303,1306,1,0,0,0,1304,1302,1,0,0,0,1304,
        1305,1,0,0,0,1305,139,1,0,0,0,1306,1304,1,0,0,0,1307,1314,3,142,
        71,0,1308,1309,5,135,0,0,1309,1310,5,84,0,0,1310,1311,5,135,0,0,
        1311,1313,3,142,71,0,1312,1308,1,0,0,0,1313,1316,1,0,0,0,1314,1312,
        1,0,0,0,1314,1315,1,0,0,0,1315,141,1,0,0,0,1316,1314,1,0,0,0,1317,
        1324,3,144,72,0,1318,1319,5,135,0,0,1319,1320,5,85,0,0,1320,1321,
        5,135,0,0,1321,1323,3,144,72,0,1322,1318,1,0,0,0,1323,1326,1,0,0,
        0,1324,1322,1,0,0,0,1324,1325,1,0,0,0,1325,143,1,0,0,0,1326,1324,
        1,0,0,0,1327,1329,5,86,0,0,1328,1330,5,135,0,0,1329,1328,1,0,0,0,
        1329,1330,1,0,0,0,1330,1332,1,0,0,0,1331,1327,1,0,0,0,1332,1335,
        1,0,0,0,1333,1331,1,0,0,0,1333,1334,1,0,0,0,1334,1336,1,0,0,0,1335,
        1333,1,0,0,0,1336,1337,3,146,73,0,1337,145,1,0,0,0,1338,1345,3,36,
        18,0,1339,1341,5,135,0,0,1340,1339,1,0,0,0,1340,1341,1,0,0,0,1341,
        1342,1,0,0,0,1342,1344,3,148,74,0,1343,1340,1,0,0,0,1344,1347,1,
        0,0,0,1345,1343,1,0,0,0,1345,1346,1,0,0,0,1346,147,1,0,0,0,1347,
        1345,1,0,0,0,1348,1350,5,2,0,0,1349,1351,5,135,0,0,1350,1349,1,0,
        0,0,1350,1351,1,0,0,0,1351,1352,1,0,0,0,1352,1379,3,36,18,0,1353,
        1355,5,16,0,0,1354,1356,5,135,0,0,1355,1354,1,0,0,0,1355,1356,1,
        0,0,0,1356,1357,1,0,0,0,1357,1379,3,36,18,0,1358,1360,5,17,0,0,1359,
        1361,5,135,0,0,1360,1359,1,0,0,0,1360,1361,1,0,0,0,1361,1362,1,0,
        0,0,1362,1379,3,36,18,0,1363,1365,5,18,0,0,1364,1366,5,135,0,0,1365,
        1364,1,0,0,0,1365,1366,1,0,0,0,1366,1367,1,0,0,0,1367,1379,3,36,
        18,0,1368,1370,5,19,0,0,1369,1371,5,135,0,0,1370,1369,1,0,0,0,1370,
        1371,1,0,0,0,1371,1372,1,0,0,0,1372,1379,3,36,18,0,1373,1375,5,20,
        0,0,1374,1376,5,135,0,0,1375,1374,1,0,0,0,1375,1376,1,0,0,0,1376,
        1377,1,0,0,0,1377,1379,3,36,18,0,1378,1348,1,0,0,0,1378,1353,1,0,
        0,0,1378,1358,1,0,0,0,1378,1363,1,0,0,0,1378,1368,1,0,0,0,1378,1373,
        1,0,0,0,1379,149,1,0,0,0,1380,1381,5,135,0,0,1381,1382,5,87,0,0,
        1382,1383,5,135,0,0,1383,1391,5,71,0,0,1384,1385,5,135,0,0,1385,
        1386,5,88,0,0,1386,1387,5,135,0,0,1387,1391,5,71,0,0,1388,1389,5,
        135,0,0,1389,1391,5,89,0,0,1390,1380,1,0,0,0,1390,1384,1,0,0,0,1390,
        1388,1,0,0,0,1391,1393,1,0,0,0,1392,1394,5,135,0,0,1393,1392,1,0,
        0,0,1393,1394,1,0,0,0,1394,1395,1,0,0,0,1395,1396,3,156,78,0,1396,
        151,1,0,0,0,1397,1398,5,135,0,0,1398,1400,5,90,0,0,1399,1401,5,135,
        0,0,1400,1399,1,0,0,0,1400,1401,1,0,0,0,1401,1402,1,0,0,0,1402,1403,
        3,156,78,0,1403,153,1,0,0,0,1404,1405,5,135,0,0,1405,1406,5,91,0,
        0,1406,1407,5,135,0,0,1407,1415,5,92,0,0,1408,1409,5,135,0,0,1409,
        1410,5,91,0,0,1410,1411,5,135,0,0,1411,1412,5,86,0,0,1412,1413,5,
        135,0,0,1413,1415,5,92,0,0,1414,1404,1,0,0,0,1414,1408,1,0,0,0,1415,
        155,1,0,0,0,1416,1435,3,158,79,0,1417,1419,5,135,0,0,1418,1417,1,
        0,0,0,1418,1419,1,0,0,0,1419,1420,1,0,0,0,1420,1422,5,21,0,0,1421,
        1423,5,135,0,0,1422,1421,1,0,0,0,1422,1423,1,0,0,0,1423,1424,1,0,
        0,0,1424,1434,3,158,79,0,1425,1427,5,135,0,0,1426,1425,1,0,0,0,1426,
        1427,1,0,0,0,1427,1428,1,0,0,0,1428,1430,5,22,0,0,1429,1431,5,135,
        0,0,1430,1429,1,0,0,0,1430,1431,1,0,0,0,1431,1432,1,0,0,0,1432,1434,
        3,158,79,0,1433,1418,1,0,0,0,1433,1426,1,0,0,0,1434,1437,1,0,0,0,
        1435,1433,1,0,0,0,1435,1436,1,0,0,0,1436,157,1,0,0,0,1437,1435,1,
        0,0,0,1438,1465,3,160,80,0,1439,1441,5,135,0,0,1440,1439,1,0,0,0,
        1440,1441,1,0,0,0,1441,1442,1,0,0,0,1442,1444,5,12,0,0,1443,1445,
        5,135,0,0,1444,1443,1,0,0,0,1444,1445,1,0,0,0,1445,1446,1,0,0,0,
        1446,1464,3,160,80,0,1447,1449,5,135,0,0,1448,1447,1,0,0,0,1448,
        1449,1,0,0,0,1449,1450,1,0,0,0,1450,1452,5,23,0,0,1451,1453,5,135,
        0,0,1452,1451,1,0,0,0,1452,1453,1,0,0,0,1453,1454,1,0,0,0,1454,1464,
        3,160,80,0,1455,1457,5,135,0,0,1456,1455,1,0,0,0,1456,1457,1,0,0,
        0,1457,1458,1,0,0,0,1458,1460,5,24,0,0,1459,1461,5,135,0,0,1460,
        1459,1,0,0,0,1460,1461,1,0,0,0,1461,1462,1,0,0,0,1462,1464,3,160,
        80,0,1463,1440,1,0,0,0,1463,1448,1,0,0,0,1463,1456,1,0,0,0,1464,
        1467,1,0,0,0,1465,1463,1,0,0,0,1465,1466,1,0,0,0,1466,159,1,0,0,
        0,1467,1465,1,0,0,0,1468,1479,3,162,81,0,1469,1471,5,135,0,0,1470,
        1469,1,0,0,0,1470,1471,1,0,0,0,1471,1472,1,0,0,0,1472,1474,5,25,
        0,0,1473,1475,5,135,0,0,1474,1473,1,0,0,0,1474,1475,1,0,0,0,1475,
        1476,1,0,0,0,1476,1478,3,162,81,0,1477,1470,1,0,0,0,1478,1481,1,
        0,0,0,1479,1477,1,0,0,0,1479,1480,1,0,0,0,1480,161,1,0,0,0,1481,
        1479,1,0,0,0,1482,1489,3,164,82,0,1483,1485,7,3,0,0,1484,1486,5,
        135,0,0,1485,1484,1,0,0,0,1485,1486,1,0,0,0,1486,1487,1,0,0,0,1487,
        1489,3,164,82,0,1488,1482,1,0,0,0,1488,1483,1,0,0,0,1489,163,1,0,
        0,0,1490,1512,3,166,83,0,1491,1493,5,135,0,0,1492,1491,1,0,0,0,1492,
        1493,1,0,0,0,1493,1494,1,0,0,0,1494,1495,5,10,0,0,1495,1496,3,136,
        68,0,1496,1497,5,11,0,0,1497,1511,1,0,0,0,1498,1500,5,135,0,0,1499,
        1498,1,0,0,0,1499,1500,1,0,0,0,1500,1501,1,0,0,0,1501,1503,5,10,
        0,0,1502,1504,3,136,68,0,1503,1502,1,0,0,0,1503,1504,1,0,0,0,1504,
        1505,1,0,0,0,1505,1507,5,15,0,0,1506,1508,3,136,68,0,1507,1506,1,
        0,0,0,1507,1508,1,0,0,0,1508,1509,1,0,0,0,1509,1511,5,11,0,0,1510,
        1492,1,0,0,0,1510,1499,1,0,0,0,1511,1514,1,0,0,0,1512,1510,1,0,0,
        0,1512,1513,1,0,0,0,1513,165,1,0,0,0,1514,1512,1,0,0,0,1515,1522,
        3,40,20,0,1516,1518,5,135,0,0,1517,1516,1,0,0,0,1517,1518,1,0,0,
        0,1518,1519,1,0,0,0,1519,1521,3,168,84,0,1520,1517,1,0,0,0,1521,
        1524,1,0,0,0,1522,1520,1,0,0,0,1522,1523,1,0,0,0,1523,1529,1,0,0,
        0,1524,1522,1,0,0,0,1525,1527,5,135,0,0,1526,1525,1,0,0,0,1526,1527,
        1,0,0,0,1527,1528,1,0,0,0,1528,1530,3,124,62,0,1529,1526,1,0,0,0,
        1529,1530,1,0,0,0,1530,167,1,0,0,0,1531,1533,5,1,0,0,1532,1534,5,
        135,0,0,1533,1532,1,0,0,0,1533,1534,1,0,0,0,1534,1535,1,0,0,0,1535,
        1536,3,218,109,0,1536,169,1,0,0,0,1537,1542,5,94,0,0,1538,1540,5,
        135,0,0,1539,1538,1,0,0,0,1539,1540,1,0,0,0,1540,1541,1,0,0,0,1541,
        1543,3,172,86,0,1542,1539,1,0,0,0,1543,1544,1,0,0,0,1544,1542,1,
        0,0,0,1544,1545,1,0,0,0,1545,1560,1,0,0,0,1546,1548,5,94,0,0,1547,
        1549,5,135,0,0,1548,1547,1,0,0,0,1548,1549,1,0,0,0,1549,1550,1,0,
        0,0,1550,1555,3,136,68,0,1551,1553,5,135,0,0,1552,1551,1,0,0,0,1552,
        1553,1,0,0,0,1553,1554,1,0,0,0,1554,1556,3,172,86,0,1555,1552,1,
        0,0,0,1556,1557,1,0,0,0,1557,1555,1,0,0,0,1557,1558,1,0,0,0,1558,
        1560,1,0,0,0,1559,1537,1,0,0,0,1559,1546,1,0,0,0,1560,1569,1,0,0,
        0,1561,1563,5,135,0,0,1562,1561,1,0,0,0,1562,1563,1,0,0,0,1563,1564,
        1,0,0,0,1564,1566,5,95,0,0,1565,1567,5,135,0,0,1566,1565,1,0,0,0,
        1566,1567,1,0,0,0,1567,1568,1,0,0,0,1568,1570,3,136,68,0,1569,1562,
        1,0,0,0,1569,1570,1,0,0,0,1570,1572,1,0,0,0,1571,1573,5,135,0,0,
        1572,1571,1,0,0,0,1572,1573,1,0,0,0,1573,1574,1,0,0,0,1574,1575,
        5,96,0,0,1575,171,1,0,0,0,1576,1578,5,97,0,0,1577,1579,5,135,0,0,
        1578,1577,1,0,0,0,1578,1579,1,0,0,0,1579,1580,1,0,0,0,1580,1582,
        3,136,68,0,1581,1583,5,135,0,0,1582,1581,1,0,0,0,1582,1583,1,0,0,
        0,1583,1584,1,0,0,0,1584,1586,5,98,0,0,1585,1587,5,135,0,0,1586,
        1585,1,0,0,0,1586,1587,1,0,0,0,1587,1588,1,0,0,0,1588,1589,3,136,
        68,0,1589,173,1,0,0,0,1590,1592,5,10,0,0,1591,1593,5,135,0,0,1592,
        1591,1,0,0,0,1592,1593,1,0,0,0,1593,1594,1,0,0,0,1594,1603,3,180,
        90,0,1595,1597,5,135,0,0,1596,1595,1,0,0,0,1596,1597,1,0,0,0,1597,
        1598,1,0,0,0,1598,1600,5,14,0,0,1599,1601,5,135,0,0,1600,1599,1,
        0,0,0,1600,1601,1,0,0,0,1601,1602,1,0,0,0,1602,1604,3,136,68,0,1603,
        1596,1,0,0,0,1603,1604,1,0,0,0,1604,1606,1,0,0,0,1605,1607,5,135,
        0,0,1606,1605,1,0,0,0,1606,1607,1,0,0,0,1607,1608,1,0,0,0,1608,1609,
        5,11,0,0,1609,175,1,0,0,0,1610,1612,5,10,0,0,1611,1613,5,135,0,0,
        1612,1611,1,0,0,0,1612,1613,1,0,0,0,1613,1622,1,0,0,0,1614,1616,
        3,204,102,0,1615,1617,5,135,0,0,1616,1615,1,0,0,0,1616,1617,1,0,
        0,0,1617,1618,1,0,0,0,1618,1620,5,2,0,0,1619,1621,5,135,0,0,1620,
        1619,1,0,0,0,1620,1621,1,0,0,0,1621,1623,1,0,0,0,1622,1614,1,0,0,
        0,1622,1623,1,0,0,0,1623,1624,1,0,0,0,1624,1626,3,114,57,0,1625,
        1627,5,135,0,0,1626,1625,1,0,0,0,1626,1627,1,0,0,0,1627,1632,1,0,
        0,0,1628,1630,3,106,53,0,1629,1631,5,135,0,0,1630,1629,1,0,0,0,1630,
        1631,1,0,0,0,1631,1633,1,0,0,0,1632,1628,1,0,0,0,1632,1633,1,0,0,
        0,1633,1634,1,0,0,0,1634,1636,5,14,0,0,1635,1637,5,135,0,0,1636,
        1635,1,0,0,0,1636,1637,1,0,0,0,1637,1638,1,0,0,0,1638,1640,3,136,
        68,0,1639,1641,5,135,0,0,1640,1639,1,0,0,0,1640,1641,1,0,0,0,1641,
        1642,1,0,0,0,1642,1643,5,11,0,0,1643,177,1,0,0,0,1644,1646,5,57,
        0,0,1645,1647,5,135,0,0,1646,1645,1,0,0,0,1646,1647,1,0,0,0,1647,
        1648,1,0,0,0,1648,1650,5,5,0,0,1649,1651,5,135,0,0,1650,1649,1,0,
        0,0,1650,1651,1,0,0,0,1651,1652,1,0,0,0,1652,1654,3,180,90,0,1653,
        1655,5,135,0,0,1654,1653,1,0,0,0,1654,1655,1,0,0,0,1655,1656,1,0,
        0,0,1656,1657,5,6,0,0,1657,1701,1,0,0,0,1658,1660,5,99,0,0,1659,
        1661,5,135,0,0,1660,1659,1,0,0,0,1660,1661,1,0,0,0,1661,1662,1,0,
        0,0,1662,1664,5,5,0,0,1663,1665,5,135,0,0,1664,1663,1,0,0,0,1664,
        1665,1,0,0,0,1665,1666,1,0,0,0,1666,1668,3,180,90,0,1667,1669,5,
        135,0,0,1668,1667,1,0,0,0,1668,1669,1,0,0,0,1669,1670,1,0,0,0,1670,
        1671,5,6,0,0,1671,1701,1,0,0,0,1672,1674,5,100,0,0,1673,1675,5,135,
        0,0,1674,1673,1,0,0,0,1674,1675,1,0,0,0,1675,1676,1,0,0,0,1676,1678,
        5,5,0,0,1677,1679,5,135,0,0,1678,1677,1,0,0,0,1678,1679,1,0,0,0,
        1679,1680,1,0,0,0,1680,1682,3,180,90,0,1681,1683,5,135,0,0,1682,
        1681,1,0,0,0,1682,1683,1,0,0,0,1683,1684,1,0,0,0,1684,1685,5,6,0,
        0,1685,1701,1,0,0,0,1686,1688,5,101,0,0,1687,1689,5,135,0,0,1688,
        1687,1,0,0,0,1688,1689,1,0,0,0,1689,1690,1,0,0,0,1690,1692,5,5,0,
        0,1691,1693,5,135,0,0,1692,1691,1,0,0,0,1692,1693,1,0,0,0,1693,1694,
        1,0,0,0,1694,1696,3,180,90,0,1695,1697,5,135,0,0,1696,1695,1,0,0,
        0,1696,1697,1,0,0,0,1697,1698,1,0,0,0,1698,1699,5,6,0,0,1699,1701,
        1,0,0,0,1700,1644,1,0,0,0,1700,1658,1,0,0,0,1700,1672,1,0,0,0,1700,
        1686,1,0,0,0,1701,179,1,0,0,0,1702,1707,3,186,93,0,1703,1705,5,135,
        0,0,1704,1703,1,0,0,0,1704,1705,1,0,0,0,1705,1706,1,0,0,0,1706,1708,
        3,106,53,0,1707,1704,1,0,0,0,1707,1708,1,0,0,0,1708,181,1,0,0,0,
        1709,1710,3,114,57,0,1710,183,1,0,0,0,1711,1713,5,5,0,0,1712,1714,
        5,135,0,0,1713,1712,1,0,0,0,1713,1714,1,0,0,0,1714,1715,1,0,0,0,
        1715,1717,3,136,68,0,1716,1718,5,135,0,0,1717,1716,1,0,0,0,1717,
        1718,1,0,0,0,1718,1719,1,0,0,0,1719,1720,5,6,0,0,1720,185,1,0,0,
        0,1721,1722,3,204,102,0,1722,1723,5,135,0,0,1723,1724,5,90,0,0,1724,
        1725,5,135,0,0,1725,1726,3,136,68,0,1726,187,1,0,0,0,1727,1729,3,
        190,95,0,1728,1730,5,135,0,0,1729,1728,1,0,0,0,1729,1730,1,0,0,0,
        1730,1731,1,0,0,0,1731,1733,5,5,0,0,1732,1734,5,135,0,0,1733,1732,
        1,0,0,0,1733,1734,1,0,0,0,1734,1739,1,0,0,0,1735,1737,5,73,0,0,1736,
        1738,5,135,0,0,1737,1736,1,0,0,0,1737,1738,1,0,0,0,1738,1740,1,0,
        0,0,1739,1735,1,0,0,0,1739,1740,1,0,0,0,1740,1758,1,0,0,0,1741,1743,
        3,136,68,0,1742,1744,5,135,0,0,1743,1742,1,0,0,0,1743,1744,1,0,0,
        0,1744,1755,1,0,0,0,1745,1747,5,4,0,0,1746,1748,5,135,0,0,1747,1746,
        1,0,0,0,1747,1748,1,0,0,0,1748,1749,1,0,0,0,1749,1751,3,136,68,0,
        1750,1752,5,135,0,0,1751,1750,1,0,0,0,1751,1752,1,0,0,0,1752,1754,
        1,0,0,0,1753,1745,1,0,0,0,1754,1757,1,0,0,0,1755,1753,1,0,0,0,1755,
        1756,1,0,0,0,1756,1759,1,0,0,0,1757,1755,1,0,0,0,1758,1741,1,0,0,
        0,1758,1759,1,0,0,0,1759,1760,1,0,0,0,1760,1761,5,6,0,0,1761,189,
        1,0,0,0,1762,1763,3,202,101,0,1763,1764,3,224,112,0,1764,191,1,0,
        0,0,1765,1767,5,102,0,0,1766,1768,5,135,0,0,1767,1766,1,0,0,0,1767,
        1768,1,0,0,0,1768,1769,1,0,0,0,1769,1771,5,7,0,0,1770,1772,5,135,
        0,0,1771,1770,1,0,0,0,1771,1772,1,0,0,0,1772,1781,1,0,0,0,1773,1782,
        3,54,27,0,1774,1779,3,108,54,0,1775,1777,5,135,0,0,1776,1775,1,0,
        0,0,1776,1777,1,0,0,0,1777,1778,1,0,0,0,1778,1780,3,106,53,0,1779,
        1776,1,0,0,0,1779,1780,1,0,0,0,1780,1782,1,0,0,0,1781,1773,1,0,0,
        0,1781,1774,1,0,0,0,1782,1784,1,0,0,0,1783,1785,5,135,0,0,1784,1783,
        1,0,0,0,1784,1785,1,0,0,0,1785,1786,1,0,0,0,1786,1787,5,9,0,0,1787,
        193,1,0,0,0,1788,1790,3,200,100,0,1789,1791,5,135,0,0,1790,1789,
        1,0,0,0,1790,1791,1,0,0,0,1791,1792,1,0,0,0,1792,1794,5,5,0,0,1793,
        1795,5,135,0,0,1794,1793,1,0,0,0,1794,1795,1,0,0,0,1795,1813,1,0,
        0,0,1796,1798,3,136,68,0,1797,1799,5,135,0,0,1798,1797,1,0,0,0,1798,
        1799,1,0,0,0,1799,1810,1,0,0,0,1800,1802,5,4,0,0,1801,1803,5,135,
        0,0,1802,1801,1,0,0,0,1802,1803,1,0,0,0,1803,1804,1,0,0,0,1804,1806,
        3,136,68,0,1805,1807,5,135,0,0,1806,1805,1,0,0,0,1806,1807,1,0,0,
        0,1807,1809,1,0,0,0,1808,1800,1,0,0,0,1809,1812,1,0,0,0,1810,1808,
        1,0,0,0,1810,1811,1,0,0,0,1811,1814,1,0,0,0,1812,1810,1,0,0,0,1813,
        1796,1,0,0,0,1813,1814,1,0,0,0,1814,1815,1,0,0,0,1815,1816,5,6,0,
        0,1816,195,1,0,0,0,1817,1818,3,200,100,0,1818,197,1,0,0,0,1819,1820,
        3,224,112,0,1820,199,1,0,0,0,1821,1822,3,202,101,0,1822,1823,3,224,
        112,0,1823,201,1,0,0,0,1824,1825,3,224,112,0,1825,1826,5,1,0,0,1826,
        1828,1,0,0,0,1827,1824,1,0,0,0,1828,1831,1,0,0,0,1829,1827,1,0,0,
        0,1829,1830,1,0,0,0,1830,203,1,0,0,0,1831,1829,1,0,0,0,1832,1833,
        3,224,112,0,1833,205,1,0,0,0,1834,1835,7,4,0,0,1835,207,1,0,0,0,
        1836,1839,3,212,106,0,1837,1839,3,210,105,0,1838,1836,1,0,0,0,1838,
        1837,1,0,0,0,1839,209,1,0,0,0,1840,1841,7,5,0,0,1841,211,1,0,0,0,
        1842,1843,7,6,0,0,1843,213,1,0,0,0,1844,1846,5,10,0,0,1845,1847,
        5,135,0,0,1846,1845,1,0,0,0,1846,1847,1,0,0,0,1847,1865,1,0,0,0,
        1848,1850,3,136,68,0,1849,1851,5,135,0,0,1850,1849,1,0,0,0,1850,
        1851,1,0,0,0,1851,1862,1,0,0,0,1852,1854,5,4,0,0,1853,1855,5,135,
        0,0,1854,1853,1,0,0,0,1854,1855,1,0,0,0,1855,1856,1,0,0,0,1856,1858,
        3,136,68,0,1857,1859,5,135,0,0,1858,1857,1,0,0,0,1858,1859,1,0,0,
        0,1859,1861,1,0,0,0,1860,1852,1,0,0,0,1861,1864,1,0,0,0,1862,1860,
        1,0,0,0,1862,1863,1,0,0,0,1863,1866,1,0,0,0,1864,1862,1,0,0,0,1865,
        1848,1,0,0,0,1865,1866,1,0,0,0,1866,1867,1,0,0,0,1867,1868,5,11,
        0,0,1868,215,1,0,0,0,1869,1871,5,7,0,0,1870,1872,5,135,0,0,1871,
        1870,1,0,0,0,1871,1872,1,0,0,0,1872,1906,1,0,0,0,1873,1875,3,218,
        109,0,1874,1876,5,135,0,0,1875,1874,1,0,0,0,1875,1876,1,0,0,0,1876,
        1877,1,0,0,0,1877,1879,5,8,0,0,1878,1880,5,135,0,0,1879,1878,1,0,
        0,0,1879,1880,1,0,0,0,1880,1881,1,0,0,0,1881,1883,3,136,68,0,1882,
        1884,5,135,0,0,1883,1882,1,0,0,0,1883,1884,1,0,0,0,1884,1903,1,0,
        0,0,1885,1887,5,4,0,0,1886,1888,5,135,0,0,1887,1886,1,0,0,0,1887,
        1888,1,0,0,0,1888,1889,1,0,0,0,1889,1891,3,218,109,0,1890,1892,5,
        135,0,0,1891,1890,1,0,0,0,1891,1892,1,0,0,0,1892,1893,1,0,0,0,1893,
        1895,5,8,0,0,1894,1896,5,135,0,0,1895,1894,1,0,0,0,1895,1896,1,0,
        0,0,1896,1897,1,0,0,0,1897,1899,3,136,68,0,1898,1900,5,135,0,0,1899,
        1898,1,0,0,0,1899,1900,1,0,0,0,1900,1902,1,0,0,0,1901,1885,1,0,0,
        0,1902,1905,1,0,0,0,1903,1901,1,0,0,0,1903,1904,1,0,0,0,1904,1907,
        1,0,0,0,1905,1903,1,0,0,0,1906,1873,1,0,0,0,1906,1907,1,0,0,0,1907,
        1908,1,0,0,0,1908,1909,5,9,0,0,1909,217,1,0,0,0,1910,1911,3,222,
        111,0,1911,219,1,0,0,0,1912,1915,5,26,0,0,1913,1916,3,224,112,0,
        1914,1916,5,106,0,0,1915,1913,1,0,0,0,1915,1914,1,0,0,0,1916,221,
        1,0,0,0,1917,1920,3,224,112,0,1918,1920,3,48,24,0,1919,1917,1,0,
        0,0,1919,1918,1,0,0,0,1920,223,1,0,0,0,1921,1922,7,7,0,0,1922,225,
        1,0,0,0,1923,1924,7,8,0,0,1924,227,1,0,0,0,1925,1926,7,9,0,0,1926,
        229,1,0,0,0,1927,1928,7,10,0,0,1928,231,1,0,0,0,373,235,239,243,
        247,251,253,256,259,267,270,273,277,283,286,291,297,300,305,308,
        311,314,317,323,326,331,334,337,341,345,348,352,356,362,366,372,
        376,382,386,390,394,398,403,410,413,415,419,423,427,431,436,443,
        446,448,452,458,464,469,472,476,480,486,490,495,499,503,507,513,
        517,523,527,529,533,535,539,541,545,547,553,557,561,565,567,571,
        575,579,581,585,589,593,595,599,603,607,609,613,616,622,626,628,
        632,634,637,641,643,647,649,658,660,673,677,681,695,698,700,703,
        706,708,717,721,725,729,733,737,740,746,751,755,758,761,769,774,
        781,786,789,793,797,801,807,811,816,821,825,828,830,834,838,843,
        847,852,856,863,867,877,884,897,901,907,911,915,920,927,931,936,
        943,949,954,960,963,969,971,975,979,984,988,991,998,1005,1008,1014,
        1017,1023,1027,1031,1035,1039,1044,1049,1053,1058,1061,1070,1079,
        1084,1097,1100,1108,1112,1117,1124,1129,1136,1140,1145,1149,1155,
        1159,1162,1165,1169,1175,1179,1182,1185,1191,1194,1197,1201,1207,
        1210,1213,1217,1221,1225,1229,1233,1236,1241,1246,1251,1256,1262,
        1266,1268,1272,1276,1278,1280,1288,1293,1304,1314,1324,1329,1333,
        1340,1345,1350,1355,1360,1365,1370,1375,1378,1390,1393,1400,1414,
        1418,1422,1426,1430,1433,1435,1440,1444,1448,1452,1456,1460,1463,
        1465,1470,1474,1479,1485,1488,1492,1499,1503,1507,1510,1512,1517,
        1522,1526,1529,1533,1539,1544,1548,1552,1557,1559,1562,1566,1569,
        1572,1578,1582,1586,1592,1596,1600,1603,1606,1612,1616,1620,1622,
        1626,1630,1632,1636,1640,1646,1650,1654,1660,1664,1668,1674,1678,
        1682,1688,1692,1696,1700,1704,1707,1713,1717,1729,1733,1737,1739,
        1743,1747,1751,1755,1758,1767,1771,1776,1779,1781,1784,1790,1794,
        1798,1802,1806,1810,1813,1829,1838,1846,1850,1854,1858,1862,1865,
        1871,1875,1879,1883,1887,1891,1895,1899,1903,1906,1915,1919
    ]

class s_cypherParser ( Parser ):

    grammarFileName = "s_cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "'='", "'+='", "','", "'('", "')'", 
                     "'{'", "':'", "'}'", "'['", "']'", "'*'", "';'", "'|'", 
                     "'..'", "'<>'", "'<'", "'>'", "'<='", "'>='", "'+'", 
                     "'-'", "'/'", "'%'", "'^'", "'$'", "'\\u27E8'", "'\\u3008'", 
                     "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
                     "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", 
                     "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", 
                     "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
                     "'\\uFF0D'", "<INVALID>", "<INVALID>", "'NOW'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "AtT", "PoundValue", "NOW", 
                      "AT_TIME", "SNAPSHOT", "BETWEEN", "SCOPE", "STALE", 
                      "DURING", "OVERLAPS", "UNION", "ALL", "OPTIONAL", 
                      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", 
                      "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", 
                      "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", 
                      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
                      "WHERE", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", 
                      "CONTAINS", "IN", "IS", "NULL", "COUNT", "CASE", "ELSE", 
                      "END", "WHEN", "THEN", "ANY", "NONE", "SINGLE", "EXISTS", 
                      "TRUE", "FALSE", "HexInteger", "DecimalInteger", "OctalInteger", 
                      "HexLetter", "HexDigit", "Digit", "NonZeroDigit", 
                      "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", 
                      "RegularDecimalReal", "StringLiteral", "EscapedChar", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Query = 0
    RULE_oC_Match = 1
    RULE_oC_UpdatingClause = 2
    RULE_oC_SetItem = 3
    RULE_s_Stale = 4
    RULE_s_StaleItem = 5
    RULE_oC_Delete = 6
    RULE_s_DeleteItem = 7
    RULE_s_AtTime = 8
    RULE_s_Between = 9
    RULE_s_TimeWindowLimit = 10
    RULE_oC_PatternPart = 11
    RULE_s_PathFunctionPattern = 12
    RULE_s_SinglePathPattern = 13
    RULE_oC_NodePattern = 14
    RULE_s_Properties = 15
    RULE_s_PropertiesPattern = 16
    RULE_oC_RelationshipDetail = 17
    RULE_oC_StringListNullPredicateExpression = 18
    RULE_s_TimePredicateExpression = 19
    RULE_oC_Atom = 20
    RULE_oC_Literal = 21
    RULE_s_AtTElement = 22
    RULE_s_TimePointLiteral = 23
    RULE_oC_ReservedWord = 24
    RULE_oC_Cypher = 25
    RULE_oC_Statement = 26
    RULE_oC_RegularQuery = 27
    RULE_oC_Union = 28
    RULE_oC_SingleQuery = 29
    RULE_oC_SinglePartQuery = 30
    RULE_oC_MultiPartQuery = 31
    RULE_oC_ReadingClause = 32
    RULE_oC_Unwind = 33
    RULE_oC_Merge = 34
    RULE_oC_MergeAction = 35
    RULE_oC_Create = 36
    RULE_oC_Set = 37
    RULE_oC_Remove = 38
    RULE_oC_RemoveItem = 39
    RULE_oC_InQueryCall = 40
    RULE_oC_StandaloneCall = 41
    RULE_oC_YieldItems = 42
    RULE_oC_YieldItem = 43
    RULE_oC_With = 44
    RULE_oC_Return = 45
    RULE_oC_ProjectionBody = 46
    RULE_oC_ProjectionItems = 47
    RULE_oC_ProjectionItem = 48
    RULE_oC_Order = 49
    RULE_oC_Skip = 50
    RULE_oC_Limit = 51
    RULE_oC_SortItem = 52
    RULE_oC_Where = 53
    RULE_oC_Pattern = 54
    RULE_oC_AnonymousPatternPart = 55
    RULE_oC_PatternElement = 56
    RULE_oC_RelationshipsPattern = 57
    RULE_oC_PatternElementChain = 58
    RULE_oC_RelationshipPattern = 59
    RULE_oC_Properties = 60
    RULE_oC_RelationshipTypes = 61
    RULE_oC_NodeLabels = 62
    RULE_oC_NodeLabel = 63
    RULE_oC_RangeLiteral = 64
    RULE_oC_LabelName = 65
    RULE_oC_RelTypeName = 66
    RULE_oC_PropertyExpression = 67
    RULE_oC_Expression = 68
    RULE_oC_OrExpression = 69
    RULE_oC_XorExpression = 70
    RULE_oC_AndExpression = 71
    RULE_oC_NotExpression = 72
    RULE_oC_ComparisonExpression = 73
    RULE_oC_PartialComparisonExpression = 74
    RULE_oC_StringPredicateExpression = 75
    RULE_oC_ListPredicateExpression = 76
    RULE_oC_NullPredicateExpression = 77
    RULE_oC_AddOrSubtractExpression = 78
    RULE_oC_MultiplyDivideModuloExpression = 79
    RULE_oC_PowerOfExpression = 80
    RULE_oC_UnaryAddOrSubtractExpression = 81
    RULE_oC_ListOperatorExpression = 82
    RULE_oC_PropertyOrLabelsExpression = 83
    RULE_oC_PropertyLookup = 84
    RULE_oC_CaseExpression = 85
    RULE_oC_CaseAlternative = 86
    RULE_oC_ListComprehension = 87
    RULE_oC_PatternComprehension = 88
    RULE_oC_Quantifier = 89
    RULE_oC_FilterExpression = 90
    RULE_oC_PatternPredicate = 91
    RULE_oC_ParenthesizedExpression = 92
    RULE_oC_IdInColl = 93
    RULE_oC_FunctionInvocation = 94
    RULE_oC_FunctionName = 95
    RULE_oC_ExistentialSubquery = 96
    RULE_oC_ExplicitProcedureInvocation = 97
    RULE_oC_ImplicitProcedureInvocation = 98
    RULE_oC_ProcedureResultField = 99
    RULE_oC_ProcedureName = 100
    RULE_oC_Namespace = 101
    RULE_oC_Variable = 102
    RULE_oC_BooleanLiteral = 103
    RULE_oC_NumberLiteral = 104
    RULE_oC_IntegerLiteral = 105
    RULE_oC_DoubleLiteral = 106
    RULE_oC_ListLiteral = 107
    RULE_oC_MapLiteral = 108
    RULE_oC_PropertyKeyName = 109
    RULE_oC_Parameter = 110
    RULE_oC_SchemaName = 111
    RULE_oC_SymbolicName = 112
    RULE_oC_LeftArrowHead = 113
    RULE_oC_RightArrowHead = 114
    RULE_oC_Dash = 115

    ruleNames =  [ "oC_Query", "oC_Match", "oC_UpdatingClause", "oC_SetItem", 
                   "s_Stale", "s_StaleItem", "oC_Delete", "s_DeleteItem", 
                   "s_AtTime", "s_Between", "s_TimeWindowLimit", "oC_PatternPart", 
                   "s_PathFunctionPattern", "s_SinglePathPattern", "oC_NodePattern", 
                   "s_Properties", "s_PropertiesPattern", "oC_RelationshipDetail", 
                   "oC_StringListNullPredicateExpression", "s_TimePredicateExpression", 
                   "oC_Atom", "oC_Literal", "s_AtTElement", "s_TimePointLiteral", 
                   "oC_ReservedWord", "oC_Cypher", "oC_Statement", "oC_RegularQuery", 
                   "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", 
                   "oC_ReadingClause", "oC_Unwind", "oC_Merge", "oC_MergeAction", 
                   "oC_Create", "oC_Set", "oC_Remove", "oC_RemoveItem", 
                   "oC_InQueryCall", "oC_StandaloneCall", "oC_YieldItems", 
                   "oC_YieldItem", "oC_With", "oC_Return", "oC_ProjectionBody", 
                   "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", 
                   "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", 
                   "oC_AnonymousPatternPart", "oC_PatternElement", "oC_RelationshipsPattern", 
                   "oC_PatternElementChain", "oC_RelationshipPattern", "oC_Properties", 
                   "oC_RelationshipTypes", "oC_NodeLabels", "oC_NodeLabel", 
                   "oC_RangeLiteral", "oC_LabelName", "oC_RelTypeName", 
                   "oC_PropertyExpression", "oC_Expression", "oC_OrExpression", 
                   "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", 
                   "oC_ComparisonExpression", "oC_PartialComparisonExpression", 
                   "oC_StringPredicateExpression", "oC_ListPredicateExpression", 
                   "oC_NullPredicateExpression", "oC_AddOrSubtractExpression", 
                   "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", 
                   "oC_UnaryAddOrSubtractExpression", "oC_ListOperatorExpression", 
                   "oC_PropertyOrLabelsExpression", "oC_PropertyLookup", 
                   "oC_CaseExpression", "oC_CaseAlternative", "oC_ListComprehension", 
                   "oC_PatternComprehension", "oC_Quantifier", "oC_FilterExpression", 
                   "oC_PatternPredicate", "oC_ParenthesizedExpression", 
                   "oC_IdInColl", "oC_FunctionInvocation", "oC_FunctionName", 
                   "oC_ExistentialSubquery", "oC_ExplicitProcedureInvocation", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_Variable", "oC_BooleanLiteral", 
                   "oC_NumberLiteral", "oC_IntegerLiteral", "oC_DoubleLiteral", 
                   "oC_ListLiteral", "oC_MapLiteral", "oC_PropertyKeyName", 
                   "oC_Parameter", "oC_SchemaName", "oC_SymbolicName", "oC_LeftArrowHead", 
                   "oC_RightArrowHead", "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    AtT=46
    PoundValue=47
    NOW=48
    AT_TIME=49
    SNAPSHOT=50
    BETWEEN=51
    SCOPE=52
    STALE=53
    DURING=54
    OVERLAPS=55
    UNION=56
    ALL=57
    OPTIONAL=58
    MATCH=59
    UNWIND=60
    AS=61
    MERGE=62
    ON=63
    CREATE=64
    SET=65
    DETACH=66
    DELETE=67
    REMOVE=68
    CALL=69
    YIELD=70
    WITH=71
    RETURN=72
    DISTINCT=73
    ORDER=74
    BY=75
    L_SKIP=76
    LIMIT=77
    ASCENDING=78
    ASC=79
    DESCENDING=80
    DESC=81
    WHERE=82
    OR=83
    XOR=84
    AND=85
    NOT=86
    STARTS=87
    ENDS=88
    CONTAINS=89
    IN=90
    IS=91
    NULL=92
    COUNT=93
    CASE=94
    ELSE=95
    END=96
    WHEN=97
    THEN=98
    ANY=99
    NONE=100
    SINGLE=101
    EXISTS=102
    TRUE=103
    FALSE=104
    HexInteger=105
    DecimalInteger=106
    OctalInteger=107
    HexLetter=108
    HexDigit=109
    Digit=110
    NonZeroDigit=111
    NonZeroOctDigit=112
    OctDigit=113
    ZeroDigit=114
    ExponentDecimalReal=115
    RegularDecimalReal=116
    StringLiteral=117
    EscapedChar=118
    CONSTRAINT=119
    DO=120
    FOR=121
    REQUIRE=122
    UNIQUE=123
    MANDATORY=124
    SCALAR=125
    OF=126
    ADD=127
    DROP=128
    FILTER=129
    EXTRACT=130
    UnescapedSymbolicName=131
    IdentifierStart=132
    IdentifierPart=133
    EscapedSymbolicName=134
    SP=135
    WHITESPACE=136
    Comment=137

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StandaloneCallContext,0)


        def s_TimeWindowLimit(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimeWindowLimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = s_cypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Query)
        try:
            self.state = 235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 232
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 233
                self.oC_StandaloneCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 234
                self.s_TimeWindowLimit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = s_cypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 237
                self.match(s_cypherParser.OPTIONAL)
                self.state = 238
                self.match(s_cypherParser.SP)


            self.state = 241
            self.match(s_cypherParser.MATCH)
            self.state = 243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 242
                self.match(s_cypherParser.SP)


            self.state = 245
            self.oC_Pattern()
            self.state = 253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 246
                    self.match(s_cypherParser.SP)


                self.state = 251
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 249
                    self.s_AtTime()
                    pass
                elif token in [51]:
                    self.state = 250
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 259
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 256
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 255
                    self.match(s_cypherParser.SP)


                self.state = 258
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Create(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CreateContext,0)


        def oC_Merge(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MergeContext,0)


        def oC_Delete(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DeleteContext,0)


        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RemoveContext,0)


        def s_Stale(self):
            return self.getTypedRuleContext(s_cypherParser.S_StaleContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = s_cypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_UpdatingClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.state = 261
                self.oC_Create()
                pass
            elif token in [62]:
                self.state = 262
                self.oC_Merge()
                pass
            elif token in [66, 67]:
                self.state = 263
                self.oC_Delete()
                pass
            elif token in [65]:
                self.state = 264
                self.oC_Set()
                pass
            elif token in [68]:
                self.state = 265
                self.oC_Remove()
                pass
            elif token in [53]:
                self.state = 266
                self.s_Stale()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 269
                    self.match(s_cypherParser.SP)


                self.state = 272
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_VariableContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,i)


        def s_AtTElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AtTElementContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = s_cypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 386
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 275
                self.oC_Variable()
                self.state = 277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 276
                    self.match(s_cypherParser.SP)


                self.state = 279
                self.s_AtTElement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 281
                self.oC_Variable()
                self.state = 286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 283
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 282
                        self.match(s_cypherParser.SP)


                    self.state = 285
                    self.s_AtTElement()


                self.state = 288
                self.match(s_cypherParser.T__0)
                self.state = 289
                self.oC_Variable()
                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 290
                    self.match(s_cypherParser.SP)


                self.state = 293
                self.s_AtTElement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 295
                self.oC_Variable()
                self.state = 300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 297
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 296
                        self.match(s_cypherParser.SP)


                    self.state = 299
                    self.s_AtTElement()


                self.state = 302
                self.match(s_cypherParser.T__0)
                self.state = 303
                self.oC_Variable()
                self.state = 308
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 305
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 304
                        self.match(s_cypherParser.SP)


                    self.state = 307
                    self.s_AtTElement()


                self.state = 314
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
                if la_ == 1:
                    self.state = 311
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 310
                        self.match(s_cypherParser.SP)


                    self.state = 313
                    self.match(s_cypherParser.PoundValue)


                self.state = 317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 316
                    self.match(s_cypherParser.SP)


                self.state = 319
                self.s_AtTElement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 321
                self.oC_Variable()
                self.state = 326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 323
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 322
                        self.match(s_cypherParser.SP)


                    self.state = 325
                    self.s_AtTElement()


                self.state = 328
                self.match(s_cypherParser.T__0)
                self.state = 329
                self.oC_Variable()
                self.state = 334
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 331
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 330
                        self.match(s_cypherParser.SP)


                    self.state = 333
                    self.s_AtTElement()


                self.state = 337
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 336
                    self.match(s_cypherParser.SP)


                self.state = 339
                self.match(s_cypherParser.T__1)
                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 340
                    self.match(s_cypherParser.SP)


                self.state = 343
                self.oC_Expression()
                self.state = 348
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 345
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 344
                        self.match(s_cypherParser.SP)


                    self.state = 347
                    self.s_AtTElement()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 350
                self.oC_PropertyExpression()
                self.state = 352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 351
                    self.match(s_cypherParser.SP)


                self.state = 354
                self.match(s_cypherParser.T__1)
                self.state = 356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 355
                    self.match(s_cypherParser.SP)


                self.state = 358
                self.oC_Expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 360
                self.oC_Variable()
                self.state = 362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 361
                    self.match(s_cypherParser.SP)


                self.state = 364
                self.match(s_cypherParser.T__1)
                self.state = 366
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 365
                    self.match(s_cypherParser.SP)


                self.state = 368
                self.oC_Expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 370
                self.oC_Variable()
                self.state = 372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 371
                    self.match(s_cypherParser.SP)


                self.state = 374
                self.match(s_cypherParser.T__2)
                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 375
                    self.match(s_cypherParser.SP)


                self.state = 378
                self.oC_Expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 380
                self.oC_Variable()
                self.state = 382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 381
                    self.match(s_cypherParser.SP)


                self.state = 384
                self.oC_NodeLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def s_StaleItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StaleItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StaleItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Stale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Stale" ):
                listener.enterS_Stale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Stale" ):
                listener.exitS_Stale(self)




    def s_Stale(self):

        localctx = s_cypherParser.S_StaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_s_Stale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.match(s_cypherParser.STALE)
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 389
                self.match(s_cypherParser.SP)


            self.state = 392
            self.s_StaleItem()
            self.state = 403
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 394
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 393
                        self.match(s_cypherParser.SP)


                    self.state = 396
                    self.match(s_cypherParser.T__3)
                    self.state = 398
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 397
                        self.match(s_cypherParser.SP)


                    self.state = 400
                    self.s_StaleItem() 
                self.state = 405
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_VariableContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StaleItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StaleItem" ):
                listener.enterS_StaleItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StaleItem" ):
                listener.exitS_StaleItem(self)




    def s_StaleItem(self):

        localctx = s_cypherParser.S_StaleItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_s_StaleItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.oC_Variable()
            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 407
                self.match(s_cypherParser.T__0)
                self.state = 408
                self.oC_Variable()
                self.state = 413
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 410
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 409
                        self.match(s_cypherParser.SP)


                    self.state = 412
                    self.match(s_cypherParser.PoundValue)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def s_DeleteItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DeleteItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DeleteItemContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = s_cypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 417
                self.match(s_cypherParser.DETACH)
                self.state = 418
                self.match(s_cypherParser.SP)


            self.state = 421
            self.match(s_cypherParser.DELETE)
            self.state = 423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 422
                self.match(s_cypherParser.SP)


            self.state = 425
            self.s_DeleteItem()
            self.state = 436
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 427
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 426
                        self.match(s_cypherParser.SP)


                    self.state = 429
                    self.match(s_cypherParser.T__3)
                    self.state = 431
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 430
                        self.match(s_cypherParser.SP)


                    self.state = 433
                    self.s_DeleteItem() 
                self.state = 438
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_VariableContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DeleteItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DeleteItem" ):
                listener.enterS_DeleteItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DeleteItem" ):
                listener.exitS_DeleteItem(self)




    def s_DeleteItem(self):

        localctx = s_cypherParser.S_DeleteItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_s_DeleteItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 439
            self.oC_Variable()
            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 440
                self.match(s_cypherParser.T__0)
                self.state = 441
                self.oC_Variable()
                self.state = 446
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 443
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 442
                        self.match(s_cypherParser.SP)


                    self.state = 445
                    self.match(s_cypherParser.PoundValue)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTime" ):
                listener.enterS_AtTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTime" ):
                listener.exitS_AtTime(self)




    def s_AtTime(self):

        localctx = s_cypherParser.S_AtTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_s_AtTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.match(s_cypherParser.AT_TIME)
            self.state = 452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 451
                self.match(s_cypherParser.SP)


            self.state = 454
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_BetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Between

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Between" ):
                listener.enterS_Between(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Between" ):
                listener.exitS_Between(self)




    def s_Between(self):

        localctx = s_cypherParser.S_BetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_s_Between)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.match(s_cypherParser.BETWEEN)
            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 457
                self.match(s_cypherParser.SP)


            self.state = 460
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimeWindowLimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimeWindowLimit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimeWindowLimit" ):
                listener.enterS_TimeWindowLimit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimeWindowLimit" ):
                listener.exitS_TimeWindowLimit(self)




    def s_TimeWindowLimit(self):

        localctx = s_cypherParser.S_TimeWindowLimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_s_TimeWindowLimit)
        self._la = 0 # Token type
        try:
            self.state = 472
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 462
                self.match(s_cypherParser.SNAPSHOT)
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 463
                    self.match(s_cypherParser.SP)


                self.state = 466
                self.oC_Expression()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 467
                self.match(s_cypherParser.SCOPE)
                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 468
                    self.match(s_cypherParser.SP)


                self.state = 471
                self.oC_Expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_PathFunctionPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PathFunctionPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AnonymousPatternPartContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = s_cypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 474
                self.oC_Variable()
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 475
                    self.match(s_cypherParser.SP)


                self.state = 478
                self.match(s_cypherParser.T__1)
                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 479
                    self.match(s_cypherParser.SP)


                self.state = 482
                self.s_PathFunctionPattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 484
                self.oC_Variable()
                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 485
                    self.match(s_cypherParser.SP)


                self.state = 488
                self.match(s_cypherParser.T__1)
                self.state = 490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 489
                    self.match(s_cypherParser.SP)


                self.state = 492
                self.oC_AnonymousPatternPart()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 494
                self.oC_AnonymousPatternPart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PathFunctionPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def s_SinglePathPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_SinglePathPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PathFunctionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PathFunctionPattern" ):
                listener.enterS_PathFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PathFunctionPattern" ):
                listener.exitS_PathFunctionPattern(self)




    def s_PathFunctionPattern(self):

        localctx = s_cypherParser.S_PathFunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_s_PathFunctionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.oC_FunctionName()
            self.state = 499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 498
                self.match(s_cypherParser.SP)


            self.state = 501
            self.match(s_cypherParser.T__4)
            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 502
                self.match(s_cypherParser.SP)


            self.state = 505
            self.s_SinglePathPattern()
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 506
                self.match(s_cypherParser.SP)


            self.state = 509
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SinglePathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodePatternContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,i)


        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SinglePathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SinglePathPattern" ):
                listener.enterS_SinglePathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SinglePathPattern" ):
                listener.exitS_SinglePathPattern(self)




    def s_SinglePathPattern(self):

        localctx = s_cypherParser.S_SinglePathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_s_SinglePathPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self.oC_NodePattern()
            self.state = 513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 512
                self.match(s_cypherParser.SP)


            self.state = 515
            self.oC_RelationshipPattern()
            self.state = 517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 516
                self.match(s_cypherParser.SP)


            self.state = 519
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def s_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = s_cypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(s_cypherParser.T__4)
            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 522
                self.match(s_cypherParser.SP)


            self.state = 529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 525
                self.oC_Variable()
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 526
                    self.match(s_cypherParser.SP)




            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 531
                self.oC_NodeLabels()
                self.state = 533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 532
                    self.match(s_cypherParser.SP)




            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 537
                self.s_AtTElement()
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 538
                    self.match(s_cypherParser.SP)




            self.state = 547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==26:
                self.state = 543
                self.s_Properties()
                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 544
                    self.match(s_cypherParser.SP)




            self.state = 549
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertiesPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesPatternContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Properties" ):
                listener.enterS_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Properties" ):
                listener.exitS_Properties(self)




    def s_Properties(self):

        localctx = s_cypherParser.S_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_s_Properties)
        try:
            self.state = 553
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 551
                self.s_PropertiesPattern()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 552
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyKeyName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyKeyNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,i)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def s_AtTElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AtTElementContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertiesPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertiesPattern" ):
                listener.enterS_PropertiesPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertiesPattern" ):
                listener.exitS_PropertiesPattern(self)




    def s_PropertiesPattern(self):

        localctx = s_cypherParser.S_PropertiesPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_s_PropertiesPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 555
            self.match(s_cypherParser.T__6)
            self.state = 557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 556
                self.match(s_cypherParser.SP)


            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 559
                self.oC_PropertyKeyName()
                self.state = 561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 560
                    self.match(s_cypherParser.SP)


                self.state = 567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 563
                    self.s_AtTElement()
                    self.state = 565
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 564
                        self.match(s_cypherParser.SP)




                self.state = 569
                self.match(s_cypherParser.T__7)
                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 570
                    self.match(s_cypherParser.SP)


                self.state = 573
                self.oC_Expression()
                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 574
                    self.match(s_cypherParser.SP)


                self.state = 581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 577
                    self.s_AtTElement()
                    self.state = 579
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 578
                        self.match(s_cypherParser.SP)




                self.state = 613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 583
                    self.match(s_cypherParser.T__3)
                    self.state = 585
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 584
                        self.match(s_cypherParser.SP)


                    self.state = 587
                    self.oC_PropertyKeyName()
                    self.state = 589
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 588
                        self.match(s_cypherParser.SP)


                    self.state = 595
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==46:
                        self.state = 591
                        self.s_AtTElement()
                        self.state = 593
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 592
                            self.match(s_cypherParser.SP)




                    self.state = 597
                    self.match(s_cypherParser.T__7)
                    self.state = 599
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 598
                        self.match(s_cypherParser.SP)


                    self.state = 601
                    self.oC_Expression()
                    self.state = 603
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 602
                        self.match(s_cypherParser.SP)


                    self.state = 609
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==46:
                        self.state = 605
                        self.s_AtTElement()
                        self.state = 607
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 606
                            self.match(s_cypherParser.SP)




                    self.state = 615
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 618
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RangeLiteralContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = s_cypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self.match(s_cypherParser.T__9)
            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 621
                self.match(s_cypherParser.SP)


            self.state = 628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 624
                self.oC_Variable()
                self.state = 626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 625
                    self.match(s_cypherParser.SP)




            self.state = 634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 630
                self.oC_RelationshipTypes()
                self.state = 632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 631
                    self.match(s_cypherParser.SP)




            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 636
                self.oC_RangeLiteral()


            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 639
                self.s_AtTElement()
                self.state = 641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 640
                    self.match(s_cypherParser.SP)




            self.state = 649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==26:
                self.state = 645
                self.oC_Properties()
                self.state = 647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 646
                    self.match(s_cypherParser.SP)




            self.state = 651
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def s_TimePredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_TimePredicateExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_TimePredicateExpressionContext,i)


        def oC_StringPredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_StringPredicateExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_StringPredicateExpressionContext,i)


        def oC_ListPredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ListPredicateExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ListPredicateExpressionContext,i)


        def oC_NullPredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NullPredicateExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NullPredicateExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringListNullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullPredicateExpression" ):
                listener.enterOC_StringListNullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullPredicateExpression" ):
                listener.exitOC_StringListNullPredicateExpression(self)




    def oC_StringListNullPredicateExpression(self):

        localctx = s_cypherParser.OC_StringListNullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_oC_StringListNullPredicateExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.oC_AddOrSubtractExpression()
            self.state = 660
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 658
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                    if la_ == 1:
                        self.state = 654
                        self.s_TimePredicateExpression()
                        pass

                    elif la_ == 2:
                        self.state = 655
                        self.oC_StringPredicateExpression()
                        pass

                    elif la_ == 3:
                        self.state = 656
                        self.oC_ListPredicateExpression()
                        pass

                    elif la_ == 4:
                        self.state = 657
                        self.oC_NullPredicateExpression()
                        pass

             
                self.state = 662
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateExpression" ):
                listener.enterS_TimePredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateExpression" ):
                listener.exitS_TimePredicateExpression(self)




    def s_TimePredicateExpression(self):

        localctx = s_cypherParser.S_TimePredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_s_TimePredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.match(s_cypherParser.SP)
            self.state = 664
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 665
            self.match(s_cypherParser.SP)
            self.state = 666
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternComprehensionContext,0)


        def oC_Quantifier(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QuantifierContext,0)


        def oC_PatternPredicate(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPredicateContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionInvocationContext,0)


        def oC_ExistentialSubquery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExistentialSubqueryContext,0)


        def oC_Variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_VariableContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,i)


        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = s_cypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 708
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 668
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 669
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 670
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 671
                self.match(s_cypherParser.COUNT)
                self.state = 673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 672
                    self.match(s_cypherParser.SP)


                self.state = 675
                self.match(s_cypherParser.T__4)
                self.state = 677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 676
                    self.match(s_cypherParser.SP)


                self.state = 679
                self.match(s_cypherParser.T__11)
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 680
                    self.match(s_cypherParser.SP)


                self.state = 683
                self.match(s_cypherParser.T__5)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 684
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 685
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 686
                self.oC_Quantifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 687
                self.oC_PatternPredicate()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 688
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 689
                self.oC_FunctionInvocation()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 690
                self.oC_ExistentialSubquery()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 691
                self.oC_Variable()
                self.state = 700
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 692
                    self.match(s_cypherParser.T__0)
                    self.state = 693
                    self.oC_Variable()
                    self.state = 698
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                    if la_ == 1:
                        self.state = 695
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 694
                            self.match(s_cypherParser.SP)


                        self.state = 697
                        self.match(s_cypherParser.PoundValue)




                self.state = 706
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                if la_ == 1:
                    self.state = 703
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 702
                        self.match(s_cypherParser.SP)


                    self.state = 705
                    self.match(s_cypherParser.AtT)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_ListLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListLiteralContext,0)


        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = s_cypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_oC_Literal)
        try:
            self.state = 717
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 710
                self.oC_BooleanLiteral()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 711
                self.match(s_cypherParser.NULL)
                pass
            elif token in [105, 106, 107, 115, 116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 712
                self.oC_NumberLiteral()
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 4)
                self.state = 713
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 5)
                self.state = 714
                self.oC_ListLiteral()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 6)
                self.state = 715
                self.oC_MapLiteral()
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 7)
                self.state = 716
                self.match(s_cypherParser.NOW)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_TimePointLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_TimePointLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_TimePointLiteralContext,i)


        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTElement" ):
                listener.enterS_AtTElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTElement" ):
                listener.exitS_AtTElement(self)




    def s_AtTElement(self):

        localctx = s_cypherParser.S_AtTElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_s_AtTElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.match(s_cypherParser.AtT)
            self.state = 721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 720
                self.match(s_cypherParser.SP)


            self.state = 723
            self.match(s_cypherParser.T__4)
            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 724
                self.match(s_cypherParser.SP)


            self.state = 727
            self.s_TimePointLiteral()
            self.state = 729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 728
                self.match(s_cypherParser.SP)


            self.state = 731
            self.match(s_cypherParser.T__3)
            self.state = 733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 732
                self.match(s_cypherParser.SP)


            self.state = 737
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 117]:
                self.state = 735
                self.s_TimePointLiteral()
                pass
            elif token in [48]:
                self.state = 736
                self.match(s_cypherParser.NOW)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 739
                self.match(s_cypherParser.SP)


            self.state = 742
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePointLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePointLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePointLiteral" ):
                listener.enterS_TimePointLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePointLiteral" ):
                listener.exitS_TimePointLiteral(self)




    def s_TimePointLiteral(self):

        localctx = s_cypherParser.S_TimePointLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_s_TimePointLiteral)
        try:
            self.state = 746
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 744
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 745
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(s_cypherParser.AND, 0)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def OR(self):
            return self.getToken(s_cypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(s_cypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(s_cypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(s_cypherParser.DO, 0)

        def FOR(self):
            return self.getToken(s_cypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(s_cypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(s_cypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(s_cypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(s_cypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(s_cypherParser.OF, 0)

        def ADD(self):
            return self.getToken(s_cypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(s_cypherParser.DROP, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = s_cypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            _la = self._input.LA(1)
            if not(((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 128317405001678847) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(s_cypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = s_cypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 750
                self.match(s_cypherParser.SP)


            self.state = 753
            self.oC_Statement()
            self.state = 758
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 754
                    self.match(s_cypherParser.SP)


                self.state = 757
                self.match(s_cypherParser.T__12)


            self.state = 761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 760
                self.match(s_cypherParser.SP)


            self.state = 763
            self.match(s_cypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = s_cypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = s_cypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.oC_SingleQuery()
            self.state = 774
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 769
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 768
                        self.match(s_cypherParser.SP)


                    self.state = 771
                    self.oC_Union() 
                self.state = 776
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = s_cypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 789
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 777
                self.match(s_cypherParser.UNION)
                self.state = 778
                self.match(s_cypherParser.SP)
                self.state = 779
                self.match(s_cypherParser.ALL)
                self.state = 781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 780
                    self.match(s_cypherParser.SP)


                self.state = 783
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 784
                self.match(s_cypherParser.UNION)
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 785
                    self.match(s_cypherParser.SP)


                self.state = 788
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = s_cypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_oC_SingleQuery)
        try:
            self.state = 793
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 791
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 792
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = s_cypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 830
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 795
                    self.oC_ReadingClause()
                    self.state = 797
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 796
                        self.match(s_cypherParser.SP)


                    self.state = 803
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 804
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 805
                    self.oC_ReadingClause()
                    self.state = 807
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 806
                        self.match(s_cypherParser.SP)


                    self.state = 813
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 814
                self.oC_UpdatingClause()
                self.state = 821
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 816
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 815
                            self.match(s_cypherParser.SP)


                        self.state = 818
                        self.oC_UpdatingClause() 
                    self.state = 823
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

                self.state = 828
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                if la_ == 1:
                    self.state = 825
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 824
                        self.match(s_cypherParser.SP)


                    self.state = 827
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def oC_With(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_WithContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_WithContext,i)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = s_cypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_oC_MultiPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 838
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                        self.state = 832
                        self.oC_ReadingClause()
                        self.state = 834
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 833
                            self.match(s_cypherParser.SP)


                        self.state = 840
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 847
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64001) != 0):
                        self.state = 841
                        self.oC_UpdatingClause()
                        self.state = 843
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 842
                            self.match(s_cypherParser.SP)


                        self.state = 849
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 850
                    self.oC_With()
                    self.state = 852
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 851
                        self.match(s_cypherParser.SP)



                else:
                    raise NoViableAltException(self)
                self.state = 856 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,149,self._ctx)

            self.state = 858
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(s_cypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = s_cypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_oC_ReadingClause)
        try:
            self.state = 863
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 860
                self.oC_Match()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 861
                self.oC_Unwind()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 862
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = s_cypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.match(s_cypherParser.UNWIND)
            self.state = 867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 866
                self.match(s_cypherParser.SP)


            self.state = 869
            self.oC_Expression()
            self.state = 870
            self.match(s_cypherParser.SP)
            self.state = 871
            self.match(s_cypherParser.AS)
            self.state = 872
            self.match(s_cypherParser.SP)
            self.state = 873
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = s_cypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.match(s_cypherParser.MERGE)
            self.state = 877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 876
                self.match(s_cypherParser.SP)


            self.state = 879
            self.oC_PatternPart()
            self.state = 884
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 880
                    self.match(s_cypherParser.SP)
                    self.state = 881
                    self.oC_MergeAction() 
                self.state = 886
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = s_cypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_oC_MergeAction)
        try:
            self.state = 897
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 887
                self.match(s_cypherParser.ON)
                self.state = 888
                self.match(s_cypherParser.SP)
                self.state = 889
                self.match(s_cypherParser.MATCH)
                self.state = 890
                self.match(s_cypherParser.SP)
                self.state = 891
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 892
                self.match(s_cypherParser.ON)
                self.state = 893
                self.match(s_cypherParser.SP)
                self.state = 894
                self.match(s_cypherParser.CREATE)
                self.state = 895
                self.match(s_cypherParser.SP)
                self.state = 896
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = s_cypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self.match(s_cypherParser.CREATE)
            self.state = 901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 900
                self.match(s_cypherParser.SP)


            self.state = 903
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = s_cypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.match(s_cypherParser.SET)
            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 906
                self.match(s_cypherParser.SP)


            self.state = 909
            self.oC_SetItem()
            self.state = 920
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 911
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 910
                        self.match(s_cypherParser.SP)


                    self.state = 913
                    self.match(s_cypherParser.T__3)
                    self.state = 915
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 914
                        self.match(s_cypherParser.SP)


                    self.state = 917
                    self.oC_SetItem() 
                self.state = 922
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = s_cypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self.match(s_cypherParser.REMOVE)
            self.state = 924
            self.match(s_cypherParser.SP)
            self.state = 925
            self.oC_RemoveItem()
            self.state = 936
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,162,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 927
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 926
                        self.match(s_cypherParser.SP)


                    self.state = 929
                    self.match(s_cypherParser.T__3)
                    self.state = 931
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 930
                        self.match(s_cypherParser.SP)


                    self.state = 933
                    self.oC_RemoveItem() 
                self.state = 938
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = s_cypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_oC_RemoveItem)
        try:
            self.state = 943
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 939
                self.oC_Variable()
                self.state = 940
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 942
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = s_cypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            self.match(s_cypherParser.CALL)
            self.state = 946
            self.match(s_cypherParser.SP)
            self.state = 947
            self.oC_ExplicitProcedureInvocation()
            self.state = 954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.state = 949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 948
                    self.match(s_cypherParser.SP)


                self.state = 951
                self.match(s_cypherParser.YIELD)
                self.state = 952
                self.match(s_cypherParser.SP)
                self.state = 953
                self.oC_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = s_cypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_oC_StandaloneCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            self.match(s_cypherParser.CALL)
            self.state = 957
            self.match(s_cypherParser.SP)
            self.state = 960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.state = 958
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 959
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 971
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 962
                    self.match(s_cypherParser.SP)


                self.state = 965
                self.match(s_cypherParser.YIELD)
                self.state = 966
                self.match(s_cypherParser.SP)
                self.state = 969
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [12]:
                    self.state = 967
                    self.match(s_cypherParser.T__11)
                    pass
                elif token in [93, 99, 100, 101, 108, 129, 130, 131, 134]:
                    self.state = 968
                    self.oC_YieldItems()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = s_cypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            self.oC_YieldItem()
            self.state = 984
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 975
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 974
                        self.match(s_cypherParser.SP)


                    self.state = 977
                    self.match(s_cypherParser.T__3)
                    self.state = 979
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 978
                        self.match(s_cypherParser.SP)


                    self.state = 981
                    self.oC_YieldItem() 
                self.state = 986
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

            self.state = 991
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 987
                    self.match(s_cypherParser.SP)


                self.state = 990
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = s_cypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 998
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.state = 993
                self.oC_ProcedureResultField()
                self.state = 994
                self.match(s_cypherParser.SP)
                self.state = 995
                self.match(s_cypherParser.AS)
                self.state = 996
                self.match(s_cypherParser.SP)


            self.state = 1000
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = s_cypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self.match(s_cypherParser.WITH)
            self.state = 1003
            self.oC_ProjectionBody()
            self.state = 1008
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.state = 1005
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1004
                    self.match(s_cypherParser.SP)


                self.state = 1007
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = s_cypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self.match(s_cypherParser.RETURN)
            self.state = 1011
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)




    def oC_ProjectionBody(self):

        localctx = s_cypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1014
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1013
                    self.match(s_cypherParser.SP)


                self.state = 1016
                self.match(s_cypherParser.DISTINCT)


            self.state = 1019
            self.match(s_cypherParser.SP)
            self.state = 1020
            self.oC_ProjectionItems()
            self.state = 1023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.state = 1021
                self.match(s_cypherParser.SP)
                self.state = 1022
                self.oC_Order()


            self.state = 1027
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.state = 1025
                self.match(s_cypherParser.SP)
                self.state = 1026
                self.oC_Skip()


            self.state = 1031
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.state = 1029
                self.match(s_cypherParser.SP)
                self.state = 1030
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)




    def oC_ProjectionItems(self):

        localctx = s_cypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 1061
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1033
                self.match(s_cypherParser.T__11)
                self.state = 1044
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,185,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1035
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1034
                            self.match(s_cypherParser.SP)


                        self.state = 1037
                        self.match(s_cypherParser.T__3)
                        self.state = 1039
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1038
                            self.match(s_cypherParser.SP)


                        self.state = 1041
                        self.oC_ProjectionItem() 
                    self.state = 1046
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,185,self._ctx)

                pass
            elif token in [5, 7, 10, 21, 22, 26, 48, 57, 86, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1047
                self.oC_ProjectionItem()
                self.state = 1058
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,188,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1049
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1048
                            self.match(s_cypherParser.SP)


                        self.state = 1051
                        self.match(s_cypherParser.T__3)
                        self.state = 1053
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1052
                            self.match(s_cypherParser.SP)


                        self.state = 1055
                        self.oC_ProjectionItem() 
                    self.state = 1060
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,188,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)




    def oC_ProjectionItem(self):

        localctx = s_cypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_oC_ProjectionItem)
        try:
            self.state = 1070
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1063
                self.oC_Expression()
                self.state = 1064
                self.match(s_cypherParser.SP)
                self.state = 1065
                self.match(s_cypherParser.AS)
                self.state = 1066
                self.match(s_cypherParser.SP)
                self.state = 1067
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1069
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = s_cypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self.match(s_cypherParser.ORDER)
            self.state = 1073
            self.match(s_cypherParser.SP)
            self.state = 1074
            self.match(s_cypherParser.BY)
            self.state = 1075
            self.match(s_cypherParser.SP)
            self.state = 1076
            self.oC_SortItem()
            self.state = 1084
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1077
                self.match(s_cypherParser.T__3)
                self.state = 1079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1078
                    self.match(s_cypherParser.SP)


                self.state = 1081
                self.oC_SortItem()
                self.state = 1086
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = s_cypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087
            self.match(s_cypherParser.L_SKIP)
            self.state = 1088
            self.match(s_cypherParser.SP)
            self.state = 1089
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = s_cypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            self.match(s_cypherParser.LIMIT)
            self.state = 1092
            self.match(s_cypherParser.SP)
            self.state = 1093
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = s_cypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self.oC_Expression()
            self.state = 1100
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.state = 1097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1096
                    self.match(s_cypherParser.SP)


                self.state = 1099
                _la = self._input.LA(1)
                if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = s_cypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1102
            self.match(s_cypherParser.WHERE)
            self.state = 1103
            self.match(s_cypherParser.SP)
            self.state = 1104
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = s_cypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106
            self.oC_PatternPart()
            self.state = 1117
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,197,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1108
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1107
                        self.match(s_cypherParser.SP)


                    self.state = 1110
                    self.match(s_cypherParser.T__3)
                    self.state = 1112
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1111
                        self.match(s_cypherParser.SP)


                    self.state = 1114
                    self.oC_PatternPart() 
                self.state = 1119
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,197,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = s_cypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = s_cypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 1136
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1122
                self.oC_NodePattern()
                self.state = 1129
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,199,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1124
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1123
                            self.match(s_cypherParser.SP)


                        self.state = 1126
                        self.oC_PatternElementChain() 
                    self.state = 1131
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,199,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1132
                self.match(s_cypherParser.T__4)
                self.state = 1133
                self.oC_PatternElement()
                self.state = 1134
                self.match(s_cypherParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = s_cypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self.oC_NodePattern()
            self.state = 1143 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1140
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1139
                        self.match(s_cypherParser.SP)


                    self.state = 1142
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 1145 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,202,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = s_cypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1147
            self.oC_RelationshipPattern()
            self.state = 1149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1148
                self.match(s_cypherParser.SP)


            self.state = 1151
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = s_cypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 1217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1153
                self.oC_LeftArrowHead()
                self.state = 1155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1154
                    self.match(s_cypherParser.SP)


                self.state = 1157
                self.oC_Dash()
                self.state = 1159
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                if la_ == 1:
                    self.state = 1158
                    self.match(s_cypherParser.SP)


                self.state = 1162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1161
                    self.oC_RelationshipDetail()


                self.state = 1165
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1164
                    self.match(s_cypherParser.SP)


                self.state = 1167
                self.oC_Dash()
                self.state = 1169
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1168
                    self.match(s_cypherParser.SP)


                self.state = 1171
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1173
                self.oC_LeftArrowHead()
                self.state = 1175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1174
                    self.match(s_cypherParser.SP)


                self.state = 1177
                self.oC_Dash()
                self.state = 1179
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                if la_ == 1:
                    self.state = 1178
                    self.match(s_cypherParser.SP)


                self.state = 1182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1181
                    self.oC_RelationshipDetail()


                self.state = 1185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1184
                    self.match(s_cypherParser.SP)


                self.state = 1187
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1189
                self.oC_Dash()
                self.state = 1191
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
                if la_ == 1:
                    self.state = 1190
                    self.match(s_cypherParser.SP)


                self.state = 1194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1193
                    self.oC_RelationshipDetail()


                self.state = 1197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1196
                    self.match(s_cypherParser.SP)


                self.state = 1199
                self.oC_Dash()
                self.state = 1201
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1200
                    self.match(s_cypherParser.SP)


                self.state = 1203
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1205
                self.oC_Dash()
                self.state = 1207
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
                if la_ == 1:
                    self.state = 1206
                    self.match(s_cypherParser.SP)


                self.state = 1210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1209
                    self.oC_RelationshipDetail()


                self.state = 1213
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1212
                    self.match(s_cypherParser.SP)


                self.state = 1215
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = s_cypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_oC_Properties)
        try:
            self.state = 1221
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1219
                self.oC_MapLiteral()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1220
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = s_cypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self.match(s_cypherParser.T__7)
            self.state = 1225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1224
                self.match(s_cypherParser.SP)


            self.state = 1227
            self.oC_RelTypeName()
            self.state = 1241
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,226,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1229
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1228
                        self.match(s_cypherParser.SP)


                    self.state = 1231
                    self.match(s_cypherParser.T__13)
                    self.state = 1233
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==8:
                        self.state = 1232
                        self.match(s_cypherParser.T__7)


                    self.state = 1236
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1235
                        self.match(s_cypherParser.SP)


                    self.state = 1238
                    self.oC_RelTypeName() 
                self.state = 1243
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,226,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = s_cypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1244
            self.oC_NodeLabel()
            self.state = 1251
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,228,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1246
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1245
                        self.match(s_cypherParser.SP)


                    self.state = 1248
                    self.oC_NodeLabel() 
                self.state = 1253
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,228,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = s_cypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1254
            self.match(s_cypherParser.T__7)
            self.state = 1256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1255
                self.match(s_cypherParser.SP)


            self.state = 1258
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = s_cypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            self.match(s_cypherParser.T__11)
            self.state = 1262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1261
                self.match(s_cypherParser.SP)


            self.state = 1268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                self.state = 1264
                self.oC_IntegerLiteral()
                self.state = 1266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1265
                    self.match(s_cypherParser.SP)




            self.state = 1280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 1270
                self.match(s_cypherParser.T__14)
                self.state = 1272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1271
                    self.match(s_cypherParser.SP)


                self.state = 1278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                    self.state = 1274
                    self.oC_IntegerLiteral()
                    self.state = 1276
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1275
                        self.match(s_cypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = s_cypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1282
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = s_cypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1284
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = s_cypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1286
            self.oC_Atom()
            self.state = 1291 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1288
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1287
                        self.match(s_cypherParser.SP)


                    self.state = 1290
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 1293 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,238,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = s_cypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1295
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = s_cypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1297
            self.oC_XorExpression()
            self.state = 1304
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,239,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1298
                    self.match(s_cypherParser.SP)
                    self.state = 1299
                    self.match(s_cypherParser.OR)
                    self.state = 1300
                    self.match(s_cypherParser.SP)
                    self.state = 1301
                    self.oC_XorExpression() 
                self.state = 1306
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,239,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = s_cypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1307
            self.oC_AndExpression()
            self.state = 1314
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,240,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1308
                    self.match(s_cypherParser.SP)
                    self.state = 1309
                    self.match(s_cypherParser.XOR)
                    self.state = 1310
                    self.match(s_cypherParser.SP)
                    self.state = 1311
                    self.oC_AndExpression() 
                self.state = 1316
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,240,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = s_cypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1317
            self.oC_NotExpression()
            self.state = 1324
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,241,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1318
                    self.match(s_cypherParser.SP)
                    self.state = 1319
                    self.match(s_cypherParser.AND)
                    self.state = 1320
                    self.match(s_cypherParser.SP)
                    self.state = 1321
                    self.oC_NotExpression() 
                self.state = 1326
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,241,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = s_cypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1327
                self.match(s_cypherParser.NOT)
                self.state = 1329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1328
                    self.match(s_cypherParser.SP)


                self.state = 1335
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1336
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def oC_PartialComparisonExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PartialComparisonExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PartialComparisonExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = s_cypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1338
            self.oC_StringListNullPredicateExpression()
            self.state = 1345
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,245,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1340
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1339
                        self.match(s_cypherParser.SP)


                    self.state = 1342
                    self.oC_PartialComparisonExpression() 
                self.state = 1347
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,245,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PartialComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PartialComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PartialComparisonExpression" ):
                listener.enterOC_PartialComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PartialComparisonExpression" ):
                listener.exitOC_PartialComparisonExpression(self)




    def oC_PartialComparisonExpression(self):

        localctx = s_cypherParser.OC_PartialComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_PartialComparisonExpression)
        self._la = 0 # Token type
        try:
            self.state = 1378
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1348
                self.match(s_cypherParser.T__1)
                self.state = 1350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1349
                    self.match(s_cypherParser.SP)


                self.state = 1352
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1353
                self.match(s_cypherParser.T__15)
                self.state = 1355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1354
                    self.match(s_cypherParser.SP)


                self.state = 1357
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1358
                self.match(s_cypherParser.T__16)
                self.state = 1360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1359
                    self.match(s_cypherParser.SP)


                self.state = 1362
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1363
                self.match(s_cypherParser.T__17)
                self.state = 1365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1364
                    self.match(s_cypherParser.SP)


                self.state = 1367
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1368
                self.match(s_cypherParser.T__18)
                self.state = 1370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1369
                    self.match(s_cypherParser.SP)


                self.state = 1372
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1373
                self.match(s_cypherParser.T__19)
                self.state = 1375
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1374
                    self.match(s_cypherParser.SP)


                self.state = 1377
                self.oC_StringListNullPredicateExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringPredicateExpression" ):
                listener.enterOC_StringPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringPredicateExpression" ):
                listener.exitOC_StringPredicateExpression(self)




    def oC_StringPredicateExpression(self):

        localctx = s_cypherParser.OC_StringPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_StringPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1390
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
            if la_ == 1:
                self.state = 1380
                self.match(s_cypherParser.SP)
                self.state = 1381
                self.match(s_cypherParser.STARTS)
                self.state = 1382
                self.match(s_cypherParser.SP)
                self.state = 1383
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1384
                self.match(s_cypherParser.SP)
                self.state = 1385
                self.match(s_cypherParser.ENDS)
                self.state = 1386
                self.match(s_cypherParser.SP)
                self.state = 1387
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1388
                self.match(s_cypherParser.SP)
                self.state = 1389
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 1393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1392
                self.match(s_cypherParser.SP)


            self.state = 1395
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListPredicateExpression" ):
                listener.enterOC_ListPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListPredicateExpression" ):
                listener.exitOC_ListPredicateExpression(self)




    def oC_ListPredicateExpression(self):

        localctx = s_cypherParser.OC_ListPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_ListPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1397
            self.match(s_cypherParser.SP)
            self.state = 1398
            self.match(s_cypherParser.IN)
            self.state = 1400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1399
                self.match(s_cypherParser.SP)


            self.state = 1402
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullPredicateExpression" ):
                listener.enterOC_NullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullPredicateExpression" ):
                listener.exitOC_NullPredicateExpression(self)




    def oC_NullPredicateExpression(self):

        localctx = s_cypherParser.OC_NullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_NullPredicateExpression)
        try:
            self.state = 1414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1404
                self.match(s_cypherParser.SP)
                self.state = 1405
                self.match(s_cypherParser.IS)
                self.state = 1406
                self.match(s_cypherParser.SP)
                self.state = 1407
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1408
                self.match(s_cypherParser.SP)
                self.state = 1409
                self.match(s_cypherParser.IS)
                self.state = 1410
                self.match(s_cypherParser.SP)
                self.state = 1411
                self.match(s_cypherParser.NOT)
                self.state = 1412
                self.match(s_cypherParser.SP)
                self.state = 1413
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1416
            self.oC_MultiplyDivideModuloExpression()
            self.state = 1435
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,262,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1433
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
                    if la_ == 1:
                        self.state = 1418
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1417
                            self.match(s_cypherParser.SP)


                        self.state = 1420
                        self.match(s_cypherParser.T__20)
                        self.state = 1422
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1421
                            self.match(s_cypherParser.SP)


                        self.state = 1424
                        self.oC_MultiplyDivideModuloExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1426
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1425
                            self.match(s_cypherParser.SP)


                        self.state = 1428
                        self.match(s_cypherParser.T__21)
                        self.state = 1430
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1429
                            self.match(s_cypherParser.SP)


                        self.state = 1432
                        self.oC_MultiplyDivideModuloExpression()
                        pass

             
                self.state = 1437
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,262,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PowerOfExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = s_cypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1438
            self.oC_PowerOfExpression()
            self.state = 1465
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,270,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1463
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
                    if la_ == 1:
                        self.state = 1440
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1439
                            self.match(s_cypherParser.SP)


                        self.state = 1442
                        self.match(s_cypherParser.T__11)
                        self.state = 1444
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1443
                            self.match(s_cypherParser.SP)


                        self.state = 1446
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1448
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1447
                            self.match(s_cypherParser.SP)


                        self.state = 1450
                        self.match(s_cypherParser.T__22)
                        self.state = 1452
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1451
                            self.match(s_cypherParser.SP)


                        self.state = 1454
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1456
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1455
                            self.match(s_cypherParser.SP)


                        self.state = 1458
                        self.match(s_cypherParser.T__23)
                        self.state = 1460
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1459
                            self.match(s_cypherParser.SP)


                        self.state = 1462
                        self.oC_PowerOfExpression()
                        pass

             
                self.state = 1467
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,270,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = s_cypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1468
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 1479
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,273,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1470
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1469
                        self.match(s_cypherParser.SP)


                    self.state = 1472
                    self.match(s_cypherParser.T__24)
                    self.state = 1474
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1473
                        self.match(s_cypherParser.SP)


                    self.state = 1476
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 1481
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,273,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ListOperatorExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListOperatorExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.state = 1488
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 7, 10, 26, 48, 57, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1482
                self.oC_ListOperatorExpression()
                pass
            elif token in [21, 22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1483
                _la = self._input.LA(1)
                if not(_la==21 or _la==22):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1484
                    self.match(s_cypherParser.SP)


                self.state = 1487
                self.oC_ListOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = s_cypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_ListOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1490
            self.oC_PropertyOrLabelsExpression()
            self.state = 1512
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,281,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1510
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
                    if la_ == 1:
                        self.state = 1492
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1491
                            self.match(s_cypherParser.SP)


                        self.state = 1494
                        self.match(s_cypherParser.T__9)
                        self.state = 1495
                        self.oC_Expression()
                        self.state = 1496
                        self.match(s_cypherParser.T__10)
                        pass

                    elif la_ == 2:
                        self.state = 1499
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1498
                            self.match(s_cypherParser.SP)


                        self.state = 1501
                        self.match(s_cypherParser.T__9)
                        self.state = 1503
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                            self.state = 1502
                            self.oC_Expression()


                        self.state = 1505
                        self.match(s_cypherParser.T__14)
                        self.state = 1507
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                            self.state = 1506
                            self.oC_Expression()


                        self.state = 1509
                        self.match(s_cypherParser.T__10)
                        pass

             
                self.state = 1514
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,281,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyOrLabelsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyOrLabelsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyOrLabelsExpression" ):
                listener.enterOC_PropertyOrLabelsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyOrLabelsExpression" ):
                listener.exitOC_PropertyOrLabelsExpression(self)




    def oC_PropertyOrLabelsExpression(self):

        localctx = s_cypherParser.OC_PropertyOrLabelsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_PropertyOrLabelsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1515
            self.oC_Atom()
            self.state = 1522
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,283,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1517
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1516
                        self.match(s_cypherParser.SP)


                    self.state = 1519
                    self.oC_PropertyLookup() 
                self.state = 1524
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,283,self._ctx)

            self.state = 1529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
            if la_ == 1:
                self.state = 1526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1525
                    self.match(s_cypherParser.SP)


                self.state = 1528
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = s_cypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1531
            self.match(s_cypherParser.T__0)
            self.state = 1533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1532
                self.match(s_cypherParser.SP)


            self.state = 1535
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def oC_CaseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_CaseAlternativeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = s_cypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1559
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
            if la_ == 1:
                self.state = 1537
                self.match(s_cypherParser.CASE)
                self.state = 1542 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1539
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1538
                            self.match(s_cypherParser.SP)


                        self.state = 1541
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1544 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,288,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1546
                self.match(s_cypherParser.CASE)
                self.state = 1548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1547
                    self.match(s_cypherParser.SP)


                self.state = 1550
                self.oC_Expression()
                self.state = 1555 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1552
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1551
                            self.match(s_cypherParser.SP)


                        self.state = 1554
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1557 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,291,self._ctx)

                pass


            self.state = 1569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.state = 1562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1561
                    self.match(s_cypherParser.SP)


                self.state = 1564
                self.match(s_cypherParser.ELSE)
                self.state = 1566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1565
                    self.match(s_cypherParser.SP)


                self.state = 1568
                self.oC_Expression()


            self.state = 1572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1571
                self.match(s_cypherParser.SP)


            self.state = 1574
            self.match(s_cypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternative" ):
                listener.enterOC_CaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternative" ):
                listener.exitOC_CaseAlternative(self)




    def oC_CaseAlternative(self):

        localctx = s_cypherParser.OC_CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_CaseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1576
            self.match(s_cypherParser.WHEN)
            self.state = 1578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1577
                self.match(s_cypherParser.SP)


            self.state = 1580
            self.oC_Expression()
            self.state = 1582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1581
                self.match(s_cypherParser.SP)


            self.state = 1584
            self.match(s_cypherParser.THEN)
            self.state = 1586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1585
                self.match(s_cypherParser.SP)


            self.state = 1588
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = s_cypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1590
            self.match(s_cypherParser.T__9)
            self.state = 1592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1591
                self.match(s_cypherParser.SP)


            self.state = 1594
            self.oC_FilterExpression()
            self.state = 1603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
            if la_ == 1:
                self.state = 1596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1595
                    self.match(s_cypherParser.SP)


                self.state = 1598
                self.match(s_cypherParser.T__13)
                self.state = 1600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1599
                    self.match(s_cypherParser.SP)


                self.state = 1602
                self.oC_Expression()


            self.state = 1606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1605
                self.match(s_cypherParser.SP)


            self.state = 1608
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = s_cypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1610
            self.match(s_cypherParser.T__9)
            self.state = 1612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1611
                self.match(s_cypherParser.SP)


            self.state = 1622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 1614
                self.oC_Variable()
                self.state = 1616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1615
                    self.match(s_cypherParser.SP)


                self.state = 1618
                self.match(s_cypherParser.T__1)
                self.state = 1620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1619
                    self.match(s_cypherParser.SP)




            self.state = 1624
            self.oC_RelationshipsPattern()
            self.state = 1626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1625
                self.match(s_cypherParser.SP)


            self.state = 1632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 1628
                self.oC_Where()
                self.state = 1630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1629
                    self.match(s_cypherParser.SP)




            self.state = 1634
            self.match(s_cypherParser.T__13)
            self.state = 1636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1635
                self.match(s_cypherParser.SP)


            self.state = 1638
            self.oC_Expression()
            self.state = 1640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1639
                self.match(s_cypherParser.SP)


            self.state = 1642
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Quantifier" ):
                listener.enterOC_Quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Quantifier" ):
                listener.exitOC_Quantifier(self)




    def oC_Quantifier(self):

        localctx = s_cypherParser.OC_QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_Quantifier)
        self._la = 0 # Token type
        try:
            self.state = 1700
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1644
                self.match(s_cypherParser.ALL)
                self.state = 1646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1645
                    self.match(s_cypherParser.SP)


                self.state = 1648
                self.match(s_cypherParser.T__4)
                self.state = 1650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1649
                    self.match(s_cypherParser.SP)


                self.state = 1652
                self.oC_FilterExpression()
                self.state = 1654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1653
                    self.match(s_cypherParser.SP)


                self.state = 1656
                self.match(s_cypherParser.T__5)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1658
                self.match(s_cypherParser.ANY)
                self.state = 1660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1659
                    self.match(s_cypherParser.SP)


                self.state = 1662
                self.match(s_cypherParser.T__4)
                self.state = 1664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1663
                    self.match(s_cypherParser.SP)


                self.state = 1666
                self.oC_FilterExpression()
                self.state = 1668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1667
                    self.match(s_cypherParser.SP)


                self.state = 1670
                self.match(s_cypherParser.T__5)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1672
                self.match(s_cypherParser.NONE)
                self.state = 1674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1673
                    self.match(s_cypherParser.SP)


                self.state = 1676
                self.match(s_cypherParser.T__4)
                self.state = 1678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1677
                    self.match(s_cypherParser.SP)


                self.state = 1680
                self.oC_FilterExpression()
                self.state = 1682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1681
                    self.match(s_cypherParser.SP)


                self.state = 1684
                self.match(s_cypherParser.T__5)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1686
                self.match(s_cypherParser.SINGLE)
                self.state = 1688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1687
                    self.match(s_cypherParser.SP)


                self.state = 1690
                self.match(s_cypherParser.T__4)
                self.state = 1692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1691
                    self.match(s_cypherParser.SP)


                self.state = 1694
                self.oC_FilterExpression()
                self.state = 1696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1695
                    self.match(s_cypherParser.SP)


                self.state = 1698
                self.match(s_cypherParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IdInCollContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = s_cypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1702
            self.oC_IdInColl()
            self.state = 1707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
            if la_ == 1:
                self.state = 1704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1703
                    self.match(s_cypherParser.SP)


                self.state = 1706
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPredicate" ):
                listener.enterOC_PatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPredicate" ):
                listener.exitOC_PatternPredicate(self)




    def oC_PatternPredicate(self):

        localctx = s_cypherParser.OC_PatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_PatternPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1709
            self.oC_RelationshipsPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = s_cypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1711
            self.match(s_cypherParser.T__4)
            self.state = 1713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1712
                self.match(s_cypherParser.SP)


            self.state = 1715
            self.oC_Expression()
            self.state = 1717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1716
                self.match(s_cypherParser.SP)


            self.state = 1719
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = s_cypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1721
            self.oC_Variable()
            self.state = 1722
            self.match(s_cypherParser.SP)
            self.state = 1723
            self.match(s_cypherParser.IN)
            self.state = 1724
            self.match(s_cypherParser.SP)
            self.state = 1725
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = s_cypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1727
            self.oC_FunctionName()
            self.state = 1729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1728
                self.match(s_cypherParser.SP)


            self.state = 1731
            self.match(s_cypherParser.T__4)
            self.state = 1733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1732
                self.match(s_cypherParser.SP)


            self.state = 1739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 1735
                self.match(s_cypherParser.DISTINCT)
                self.state = 1737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1736
                    self.match(s_cypherParser.SP)




            self.state = 1758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1741
                self.oC_Expression()
                self.state = 1743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1742
                    self.match(s_cypherParser.SP)


                self.state = 1755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1745
                    self.match(s_cypherParser.T__3)
                    self.state = 1747
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1746
                        self.match(s_cypherParser.SP)


                    self.state = 1749
                    self.oC_Expression()
                    self.state = 1751
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1750
                        self.match(s_cypherParser.SP)


                    self.state = 1757
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1760
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = s_cypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_FunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1762
            self.oC_Namespace()
            self.state = 1763
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExistentialSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExistentialSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExistentialSubquery" ):
                listener.enterOC_ExistentialSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExistentialSubquery" ):
                listener.exitOC_ExistentialSubquery(self)




    def oC_ExistentialSubquery(self):

        localctx = s_cypherParser.OC_ExistentialSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_ExistentialSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1765
            self.match(s_cypherParser.EXISTS)
            self.state = 1767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1766
                self.match(s_cypherParser.SP)


            self.state = 1769
            self.match(s_cypherParser.T__6)
            self.state = 1771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1770
                self.match(s_cypherParser.SP)


            self.state = 1781
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 71, 72]:
                self.state = 1773
                self.oC_RegularQuery()
                pass
            elif token in [5, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 1774
                self.oC_Pattern()
                self.state = 1779
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
                if la_ == 1:
                    self.state = 1776
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1775
                        self.match(s_cypherParser.SP)


                    self.state = 1778
                    self.oC_Where()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1783
                self.match(s_cypherParser.SP)


            self.state = 1786
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1788
            self.oC_ProcedureName()
            self.state = 1790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1789
                self.match(s_cypherParser.SP)


            self.state = 1792
            self.match(s_cypherParser.T__4)
            self.state = 1794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1793
                self.match(s_cypherParser.SP)


            self.state = 1813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1796
                self.oC_Expression()
                self.state = 1798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1797
                    self.match(s_cypherParser.SP)


                self.state = 1810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1800
                    self.match(s_cypherParser.T__3)
                    self.state = 1802
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1801
                        self.match(s_cypherParser.SP)


                    self.state = 1804
                    self.oC_Expression()
                    self.state = 1806
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1805
                        self.match(s_cypherParser.SP)


                    self.state = 1812
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1815
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1817
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = s_cypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1819
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = s_cypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1821
            self.oC_Namespace()
            self.state = 1822
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = s_cypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1829
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,353,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1824
                    self.oC_SymbolicName()
                    self.state = 1825
                    self.match(s_cypherParser.T__0) 
                self.state = 1831
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,353,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = s_cypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1832
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = s_cypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1834
            _la = self._input.LA(1)
            if not(_la==103 or _la==104):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = s_cypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_oC_NumberLiteral)
        try:
            self.state = 1838
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115, 116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1836
                self.oC_DoubleLiteral()
                pass
            elif token in [105, 106, 107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1837
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(s_cypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(s_cypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = s_cypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1840
            _la = self._input.LA(1)
            if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(s_cypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(s_cypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = s_cypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1842
            _la = self._input.LA(1)
            if not(_la==115 or _la==116):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = s_cypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1844
            self.match(s_cypherParser.T__9)
            self.state = 1846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1845
                self.match(s_cypherParser.SP)


            self.state = 1865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1848
                self.oC_Expression()
                self.state = 1850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1849
                    self.match(s_cypherParser.SP)


                self.state = 1862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1852
                    self.match(s_cypherParser.T__3)
                    self.state = 1854
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1853
                        self.match(s_cypherParser.SP)


                    self.state = 1856
                    self.oC_Expression()
                    self.state = 1858
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1857
                        self.match(s_cypherParser.SP)


                    self.state = 1864
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1867
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyKeyName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyKeyNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,i)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = s_cypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1869
            self.match(s_cypherParser.T__6)
            self.state = 1871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1870
                self.match(s_cypherParser.SP)


            self.state = 1906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 1873
                self.oC_PropertyKeyName()
                self.state = 1875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1874
                    self.match(s_cypherParser.SP)


                self.state = 1877
                self.match(s_cypherParser.T__7)
                self.state = 1879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1878
                    self.match(s_cypherParser.SP)


                self.state = 1881
                self.oC_Expression()
                self.state = 1883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1882
                    self.match(s_cypherParser.SP)


                self.state = 1903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1885
                    self.match(s_cypherParser.T__3)
                    self.state = 1887
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1886
                        self.match(s_cypherParser.SP)


                    self.state = 1889
                    self.oC_PropertyKeyName()
                    self.state = 1891
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1890
                        self.match(s_cypherParser.SP)


                    self.state = 1893
                    self.match(s_cypherParser.T__7)
                    self.state = 1895
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1894
                        self.match(s_cypherParser.SP)


                    self.state = 1897
                    self.oC_Expression()
                    self.state = 1899
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1898
                        self.match(s_cypherParser.SP)


                    self.state = 1905
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1908
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = s_cypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1910
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = s_cypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1912
            self.match(s_cypherParser.T__25)
            self.state = 1915
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 1913
                self.oC_SymbolicName()
                pass
            elif token in [106]:
                self.state = 1914
                self.match(s_cypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = s_cypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_oC_SchemaName)
        try:
            self.state = 1919
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1917
                self.oC_SymbolicName()
                pass
            elif token in [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 102, 103, 104, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1918
                self.oC_ReservedWord()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(s_cypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(s_cypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(s_cypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(s_cypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(s_cypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = s_cypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1921
            _la = self._input.LA(1)
            if not(((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = s_cypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1923
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2013396992) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = s_cypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1925
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32212516864) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = s_cypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1927
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70334388633600) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





