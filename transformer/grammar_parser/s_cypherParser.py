# Generated from s_cypher.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,137,1929,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,1,0,1,0,1,0,3,0,
        242,8,0,1,1,1,1,3,1,246,8,1,1,1,1,1,3,1,250,8,1,1,1,1,1,3,1,254,
        8,1,1,1,1,1,3,1,258,8,1,3,1,260,8,1,1,1,3,1,263,8,1,1,1,3,1,266,
        8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,274,8,2,1,2,3,2,277,8,2,1,2,3,2,
        280,8,2,1,3,1,3,3,3,284,8,3,1,3,1,3,1,3,1,3,3,3,290,8,3,1,3,3,3,
        293,8,3,1,3,1,3,1,3,3,3,298,8,3,1,3,1,3,1,3,1,3,3,3,304,8,3,1,3,
        3,3,307,8,3,1,3,1,3,1,3,3,3,312,8,3,1,3,3,3,315,8,3,1,3,3,3,318,
        8,3,1,3,1,3,3,3,322,8,3,1,3,1,3,1,3,1,3,3,3,328,8,3,1,3,3,3,331,
        8,3,1,3,1,3,1,3,3,3,336,8,3,1,3,3,3,339,8,3,1,3,3,3,342,8,3,1,3,
        1,3,3,3,346,8,3,1,3,1,3,3,3,350,8,3,1,3,3,3,353,8,3,1,3,1,3,3,3,
        357,8,3,1,3,1,3,3,3,361,8,3,1,3,1,3,1,3,1,3,3,3,367,8,3,1,3,1,3,
        3,3,371,8,3,1,3,1,3,1,3,1,3,3,3,377,8,3,1,3,1,3,3,3,381,8,3,1,3,
        1,3,1,3,1,3,3,3,387,8,3,1,3,1,3,3,3,391,8,3,1,4,1,4,3,4,395,8,4,
        1,4,1,4,3,4,399,8,4,1,4,1,4,3,4,403,8,4,1,4,5,4,406,8,4,10,4,12,
        4,409,9,4,1,5,1,5,1,5,1,5,3,5,415,8,5,1,5,1,5,1,5,3,5,420,8,5,1,
        6,1,6,3,6,424,8,6,1,6,1,6,3,6,428,8,6,1,6,1,6,3,6,432,8,6,1,6,1,
        6,3,6,436,8,6,1,6,5,6,439,8,6,10,6,12,6,442,9,6,1,7,1,7,1,7,1,7,
        3,7,448,8,7,1,7,1,7,1,7,3,7,453,8,7,1,8,1,8,3,8,457,8,8,1,8,1,8,
        1,9,1,9,3,9,463,8,9,1,9,1,9,1,10,1,10,3,10,469,8,10,1,10,1,10,1,
        10,3,10,474,8,10,1,10,3,10,477,8,10,1,11,1,11,3,11,481,8,11,1,11,
        1,11,3,11,485,8,11,1,11,1,11,1,11,1,11,3,11,491,8,11,1,11,1,11,3,
        11,495,8,11,1,11,1,11,1,11,3,11,500,8,11,1,12,1,12,3,12,504,8,12,
        1,12,1,12,3,12,508,8,12,1,12,1,12,3,12,512,8,12,1,12,1,12,1,13,1,
        13,3,13,518,8,13,1,13,1,13,3,13,522,8,13,1,13,1,13,1,14,1,14,3,14,
        528,8,14,1,14,1,14,3,14,532,8,14,3,14,534,8,14,1,14,1,14,3,14,538,
        8,14,3,14,540,8,14,1,14,1,14,3,14,544,8,14,3,14,546,8,14,1,14,1,
        14,3,14,550,8,14,3,14,552,8,14,1,14,1,14,1,15,1,15,3,15,558,8,15,
        1,16,1,16,3,16,562,8,16,1,16,1,16,1,16,1,16,1,16,3,16,569,8,16,1,
        16,1,16,1,16,1,16,5,16,575,8,16,10,16,12,16,578,9,16,3,16,580,8,
        16,1,16,1,16,1,17,1,17,3,17,586,8,17,1,17,1,17,3,17,590,8,17,3,17,
        592,8,17,1,18,3,18,595,8,18,1,18,1,18,3,18,599,8,18,1,18,1,18,3,
        18,603,8,18,3,18,605,8,18,1,19,1,19,3,19,609,8,19,1,19,1,19,3,19,
        613,8,19,3,19,615,8,19,1,19,1,19,3,19,619,8,19,3,19,621,8,19,1,19,
        3,19,624,8,19,1,19,1,19,3,19,628,8,19,3,19,630,8,19,1,19,1,19,3,
        19,634,8,19,3,19,636,8,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,3,20,
        645,8,20,1,21,1,21,3,21,649,8,21,1,21,3,21,652,8,21,1,21,1,21,1,
        21,1,21,1,21,3,21,659,8,21,1,21,1,21,3,21,663,8,21,1,21,1,21,3,21,
        667,8,21,1,21,5,21,670,8,21,10,21,12,21,673,9,21,1,22,1,22,3,22,
        677,8,22,1,22,4,22,680,8,22,11,22,12,22,681,1,22,3,22,685,8,22,1,
        22,3,22,688,8,22,3,22,690,8,22,1,22,3,22,693,8,22,1,22,1,22,3,22,
        697,8,22,1,22,5,22,700,8,22,10,22,12,22,703,9,22,1,23,1,23,1,23,
        1,23,1,23,1,24,1,24,3,24,712,8,24,1,24,1,24,3,24,716,8,24,1,24,1,
        24,3,24,720,8,24,1,24,1,24,3,24,724,8,24,1,24,1,24,3,24,728,8,24,
        1,24,3,24,731,8,24,1,24,1,24,1,25,1,25,3,25,737,8,25,1,26,1,26,1,
        27,1,27,1,28,3,28,744,8,28,1,28,1,28,3,28,748,8,28,1,28,3,28,751,
        8,28,1,28,3,28,754,8,28,1,28,1,28,1,29,1,29,1,30,1,30,3,30,762,8,
        30,1,30,5,30,765,8,30,10,30,12,30,768,9,30,1,31,1,31,1,31,1,31,3,
        31,774,8,31,1,31,1,31,1,31,3,31,779,8,31,1,31,3,31,782,8,31,1,32,
        1,32,3,32,786,8,32,1,33,1,33,3,33,790,8,33,5,33,792,8,33,10,33,12,
        33,795,9,33,1,33,1,33,1,33,3,33,800,8,33,5,33,802,8,33,10,33,12,
        33,805,9,33,1,33,1,33,3,33,809,8,33,1,33,5,33,812,8,33,10,33,12,
        33,815,9,33,1,33,3,33,818,8,33,1,33,3,33,821,8,33,3,33,823,8,33,
        1,34,1,34,3,34,827,8,34,5,34,829,8,34,10,34,12,34,832,9,34,1,34,
        1,34,3,34,836,8,34,5,34,838,8,34,10,34,12,34,841,9,34,1,34,1,34,
        3,34,845,8,34,4,34,847,8,34,11,34,12,34,848,1,34,1,34,1,35,1,35,
        1,35,3,35,856,8,35,1,36,1,36,3,36,860,8,36,1,36,1,36,1,36,1,36,1,
        36,1,36,1,37,1,37,3,37,870,8,37,1,37,1,37,1,37,5,37,875,8,37,10,
        37,12,37,878,9,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,3,38,890,8,38,1,39,1,39,3,39,894,8,39,1,39,1,39,1,40,1,40,3,40,
        900,8,40,1,40,1,40,3,40,904,8,40,1,40,1,40,3,40,908,8,40,1,40,5,
        40,911,8,40,10,40,12,40,914,9,40,1,41,1,41,1,41,1,41,3,41,920,8,
        41,1,41,1,41,3,41,924,8,41,1,41,5,41,927,8,41,10,41,12,41,930,9,
        41,1,42,1,42,1,42,1,42,3,42,936,8,42,1,43,1,43,1,43,1,43,3,43,942,
        8,43,1,43,1,43,1,43,3,43,947,8,43,1,44,1,44,1,44,1,44,3,44,953,8,
        44,1,44,3,44,956,8,44,1,44,1,44,1,44,1,44,3,44,962,8,44,3,44,964,
        8,44,1,45,1,45,3,45,968,8,45,1,45,1,45,3,45,972,8,45,1,45,5,45,975,
        8,45,10,45,12,45,978,9,45,1,45,3,45,981,8,45,1,45,3,45,984,8,45,
        1,46,1,46,1,46,1,46,1,46,3,46,991,8,46,1,46,1,46,1,47,1,47,1,47,
        3,47,998,8,47,1,47,3,47,1001,8,47,1,48,1,48,1,48,1,49,3,49,1007,
        8,49,1,49,3,49,1010,8,49,1,49,1,49,1,49,1,49,3,49,1016,8,49,1,49,
        1,49,3,49,1020,8,49,1,49,1,49,3,49,1024,8,49,1,50,1,50,3,50,1028,
        8,50,1,50,1,50,3,50,1032,8,50,1,50,5,50,1035,8,50,10,50,12,50,1038,
        9,50,1,50,1,50,3,50,1042,8,50,1,50,1,50,3,50,1046,8,50,1,50,5,50,
        1049,8,50,10,50,12,50,1052,9,50,3,50,1054,8,50,1,51,1,51,1,51,1,
        51,1,51,1,51,1,51,3,51,1063,8,51,1,52,1,52,1,52,1,52,1,52,1,52,1,
        52,3,52,1072,8,52,1,52,5,52,1075,8,52,10,52,12,52,1078,9,52,1,53,
        1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,55,1,55,3,55,1090,8,55,1,55,
        3,55,1093,8,55,1,56,1,56,1,56,1,56,1,57,1,57,3,57,1101,8,57,1,57,
        1,57,3,57,1105,8,57,1,57,5,57,1108,8,57,10,57,12,57,1111,9,57,1,
        58,1,58,1,59,1,59,3,59,1117,8,59,1,59,5,59,1120,8,59,10,59,12,59,
        1123,9,59,1,59,1,59,1,59,1,59,3,59,1129,8,59,1,60,1,60,3,60,1133,
        8,60,1,60,4,60,1136,8,60,11,60,12,60,1137,1,61,1,61,3,61,1142,8,
        61,1,61,1,61,1,62,1,62,3,62,1148,8,62,1,62,1,62,3,62,1152,8,62,1,
        62,3,62,1155,8,62,1,62,3,62,1158,8,62,1,62,1,62,3,62,1162,8,62,1,
        62,1,62,1,62,1,62,3,62,1168,8,62,1,62,1,62,3,62,1172,8,62,1,62,3,
        62,1175,8,62,1,62,3,62,1178,8,62,1,62,1,62,1,62,1,62,3,62,1184,8,
        62,1,62,3,62,1187,8,62,1,62,3,62,1190,8,62,1,62,1,62,3,62,1194,8,
        62,1,62,1,62,1,62,1,62,3,62,1200,8,62,1,62,3,62,1203,8,62,1,62,3,
        62,1206,8,62,1,62,1,62,3,62,1210,8,62,1,63,1,63,3,63,1214,8,63,1,
        64,1,64,3,64,1218,8,64,1,64,1,64,3,64,1222,8,64,1,64,1,64,3,64,1226,
        8,64,1,64,3,64,1229,8,64,1,64,5,64,1232,8,64,10,64,12,64,1235,9,
        64,1,65,1,65,3,65,1239,8,65,1,65,5,65,1242,8,65,10,65,12,65,1245,
        9,65,1,66,1,66,3,66,1249,8,66,1,66,1,66,1,67,1,67,3,67,1255,8,67,
        1,67,1,67,3,67,1259,8,67,3,67,1261,8,67,1,67,1,67,3,67,1265,8,67,
        1,67,1,67,3,67,1269,8,67,3,67,1271,8,67,3,67,1273,8,67,1,68,1,68,
        1,69,1,69,1,70,1,70,3,70,1281,8,70,1,70,4,70,1284,8,70,11,70,12,
        70,1285,1,71,1,71,1,72,1,72,1,72,1,72,1,72,5,72,1295,8,72,10,72,
        12,72,1298,9,72,1,73,1,73,1,73,1,73,1,73,5,73,1305,8,73,10,73,12,
        73,1308,9,73,1,74,1,74,1,74,1,74,1,74,5,74,1315,8,74,10,74,12,74,
        1318,9,74,1,75,1,75,3,75,1322,8,75,5,75,1324,8,75,10,75,12,75,1327,
        9,75,1,75,1,75,1,76,1,76,3,76,1333,8,76,1,76,5,76,1336,8,76,10,76,
        12,76,1339,9,76,1,77,1,77,3,77,1343,8,77,1,77,1,77,1,77,3,77,1348,
        8,77,1,77,1,77,1,77,3,77,1353,8,77,1,77,1,77,1,77,3,77,1358,8,77,
        1,77,1,77,1,77,3,77,1363,8,77,1,77,1,77,1,77,3,77,1368,8,77,1,77,
        3,77,1371,8,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
        3,78,1383,8,78,1,78,3,78,1386,8,78,1,78,1,78,1,79,1,79,1,79,3,79,
        1393,8,79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,
        1,80,3,80,1407,8,80,1,81,1,81,3,81,1411,8,81,1,81,1,81,3,81,1415,
        8,81,1,81,1,81,3,81,1419,8,81,1,81,1,81,3,81,1423,8,81,1,81,5,81,
        1426,8,81,10,81,12,81,1429,9,81,1,82,1,82,3,82,1433,8,82,1,82,1,
        82,3,82,1437,8,82,1,82,1,82,3,82,1441,8,82,1,82,1,82,3,82,1445,8,
        82,1,82,1,82,3,82,1449,8,82,1,82,1,82,3,82,1453,8,82,1,82,5,82,1456,
        8,82,10,82,12,82,1459,9,82,1,83,1,83,3,83,1463,8,83,1,83,1,83,3,
        83,1467,8,83,1,83,5,83,1470,8,83,10,83,12,83,1473,9,83,1,84,1,84,
        1,84,3,84,1478,8,84,1,84,3,84,1481,8,84,1,85,1,85,3,85,1485,8,85,
        1,85,5,85,1488,8,85,10,85,12,85,1491,9,85,1,85,3,85,1494,8,85,1,
        85,3,85,1497,8,85,1,86,1,86,3,86,1501,8,86,1,86,1,86,1,87,1,87,1,
        87,1,87,1,87,3,87,1510,8,87,1,87,1,87,3,87,1514,8,87,1,87,1,87,3,
        87,1518,8,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1529,
        8,87,1,88,1,88,3,88,1533,8,88,1,88,4,88,1536,8,88,11,88,12,88,1537,
        1,88,1,88,3,88,1542,8,88,1,88,1,88,3,88,1546,8,88,1,88,4,88,1549,
        8,88,11,88,12,88,1550,3,88,1553,8,88,1,88,3,88,1556,8,88,1,88,1,
        88,3,88,1560,8,88,1,88,3,88,1563,8,88,1,88,3,88,1566,8,88,1,88,1,
        88,1,89,1,89,3,89,1572,8,89,1,89,1,89,3,89,1576,8,89,1,89,1,89,3,
        89,1580,8,89,1,89,1,89,1,90,1,90,3,90,1586,8,90,1,90,1,90,3,90,1590,
        8,90,1,90,1,90,3,90,1594,8,90,1,90,3,90,1597,8,90,1,90,3,90,1600,
        8,90,1,90,1,90,1,91,1,91,3,91,1606,8,91,1,91,1,91,3,91,1610,8,91,
        1,91,1,91,3,91,1614,8,91,3,91,1616,8,91,1,91,1,91,3,91,1620,8,91,
        1,91,1,91,3,91,1624,8,91,3,91,1626,8,91,1,91,1,91,3,91,1630,8,91,
        1,91,1,91,3,91,1634,8,91,1,91,1,91,1,92,1,92,3,92,1640,8,92,1,92,
        1,92,3,92,1644,8,92,1,92,1,92,3,92,1648,8,92,1,92,1,92,1,92,1,92,
        3,92,1654,8,92,1,92,1,92,3,92,1658,8,92,1,92,1,92,3,92,1662,8,92,
        1,92,1,92,1,92,1,92,3,92,1668,8,92,1,92,1,92,3,92,1672,8,92,1,92,
        1,92,3,92,1676,8,92,1,92,1,92,1,92,1,92,3,92,1682,8,92,1,92,1,92,
        3,92,1686,8,92,1,92,1,92,3,92,1690,8,92,1,92,1,92,3,92,1694,8,92,
        1,93,1,93,3,93,1698,8,93,1,93,3,93,1701,8,93,1,94,1,94,1,95,1,95,
        3,95,1707,8,95,1,95,1,95,3,95,1711,8,95,1,95,1,95,1,96,1,96,1,96,
        1,96,1,96,1,96,1,97,1,97,3,97,1723,8,97,1,97,1,97,3,97,1727,8,97,
        1,97,1,97,3,97,1731,8,97,3,97,1733,8,97,1,97,1,97,3,97,1737,8,97,
        1,97,1,97,3,97,1741,8,97,1,97,1,97,3,97,1745,8,97,5,97,1747,8,97,
        10,97,12,97,1750,9,97,3,97,1752,8,97,1,97,1,97,1,98,1,98,1,98,1,
        99,1,99,3,99,1761,8,99,1,99,1,99,3,99,1765,8,99,1,99,1,99,1,99,3,
        99,1770,8,99,1,99,3,99,1773,8,99,3,99,1775,8,99,1,99,3,99,1778,8,
        99,1,99,1,99,1,100,1,100,3,100,1784,8,100,1,100,1,100,3,100,1788,
        8,100,1,100,1,100,3,100,1792,8,100,1,100,1,100,3,100,1796,8,100,
        1,100,1,100,3,100,1800,8,100,5,100,1802,8,100,10,100,12,100,1805,
        9,100,3,100,1807,8,100,1,100,1,100,1,101,1,101,1,102,1,102,1,103,
        1,103,1,103,1,104,1,104,1,104,5,104,1821,8,104,10,104,12,104,1824,
        9,104,1,105,1,105,1,106,1,106,1,106,1,106,1,106,1,106,3,106,1834,
        8,106,1,107,1,107,1,108,1,108,3,108,1840,8,108,1,109,1,109,1,110,
        1,110,1,111,1,111,3,111,1848,8,111,1,111,1,111,3,111,1852,8,111,
        1,111,1,111,3,111,1856,8,111,1,111,1,111,3,111,1860,8,111,5,111,
        1862,8,111,10,111,12,111,1865,9,111,3,111,1867,8,111,1,111,1,111,
        1,112,1,112,3,112,1873,8,112,1,112,1,112,3,112,1877,8,112,1,112,
        1,112,3,112,1881,8,112,1,112,1,112,3,112,1885,8,112,1,112,1,112,
        3,112,1889,8,112,1,112,1,112,3,112,1893,8,112,1,112,1,112,3,112,
        1897,8,112,1,112,1,112,3,112,1901,8,112,5,112,1903,8,112,10,112,
        12,112,1906,9,112,3,112,1908,8,112,1,112,1,112,1,113,1,113,1,114,
        1,114,1,114,3,114,1917,8,114,1,115,1,115,3,115,1921,8,115,1,116,
        1,116,1,117,1,117,1,118,1,118,1,118,0,0,119,0,2,4,6,8,10,12,14,16,
        18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
        62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
        104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
        136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
        168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
        200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,
        232,234,236,0,11,1,0,54,55,6,0,48,48,93,93,99,101,108,108,129,131,
        134,134,5,0,48,68,71,92,94,98,102,104,119,128,1,0,78,81,1,0,21,22,
        1,0,103,104,1,0,105,107,1,0,115,116,2,0,17,17,27,30,2,0,18,18,31,
        34,2,0,22,22,35,45,2215,0,241,1,0,0,0,2,245,1,0,0,0,4,273,1,0,0,
        0,6,390,1,0,0,0,8,392,1,0,0,0,10,419,1,0,0,0,12,423,1,0,0,0,14,452,
        1,0,0,0,16,454,1,0,0,0,18,460,1,0,0,0,20,476,1,0,0,0,22,499,1,0,
        0,0,24,501,1,0,0,0,26,515,1,0,0,0,28,525,1,0,0,0,30,557,1,0,0,0,
        32,559,1,0,0,0,34,583,1,0,0,0,36,594,1,0,0,0,38,606,1,0,0,0,40,639,
        1,0,0,0,42,648,1,0,0,0,44,674,1,0,0,0,46,704,1,0,0,0,48,709,1,0,
        0,0,50,736,1,0,0,0,52,738,1,0,0,0,54,740,1,0,0,0,56,743,1,0,0,0,
        58,757,1,0,0,0,60,759,1,0,0,0,62,781,1,0,0,0,64,785,1,0,0,0,66,822,
        1,0,0,0,68,846,1,0,0,0,70,855,1,0,0,0,72,857,1,0,0,0,74,867,1,0,
        0,0,76,889,1,0,0,0,78,891,1,0,0,0,80,897,1,0,0,0,82,915,1,0,0,0,
        84,935,1,0,0,0,86,937,1,0,0,0,88,948,1,0,0,0,90,965,1,0,0,0,92,990,
        1,0,0,0,94,994,1,0,0,0,96,1002,1,0,0,0,98,1009,1,0,0,0,100,1053,
        1,0,0,0,102,1062,1,0,0,0,104,1064,1,0,0,0,106,1079,1,0,0,0,108,1083,
        1,0,0,0,110,1087,1,0,0,0,112,1094,1,0,0,0,114,1098,1,0,0,0,116,1112,
        1,0,0,0,118,1128,1,0,0,0,120,1130,1,0,0,0,122,1139,1,0,0,0,124,1209,
        1,0,0,0,126,1213,1,0,0,0,128,1215,1,0,0,0,130,1236,1,0,0,0,132,1246,
        1,0,0,0,134,1252,1,0,0,0,136,1274,1,0,0,0,138,1276,1,0,0,0,140,1278,
        1,0,0,0,142,1287,1,0,0,0,144,1289,1,0,0,0,146,1299,1,0,0,0,148,1309,
        1,0,0,0,150,1325,1,0,0,0,152,1330,1,0,0,0,154,1370,1,0,0,0,156,1382,
        1,0,0,0,158,1389,1,0,0,0,160,1406,1,0,0,0,162,1408,1,0,0,0,164,1430,
        1,0,0,0,166,1460,1,0,0,0,168,1480,1,0,0,0,170,1482,1,0,0,0,172,1498,
        1,0,0,0,174,1528,1,0,0,0,176,1552,1,0,0,0,178,1569,1,0,0,0,180,1583,
        1,0,0,0,182,1603,1,0,0,0,184,1693,1,0,0,0,186,1695,1,0,0,0,188,1702,
        1,0,0,0,190,1704,1,0,0,0,192,1714,1,0,0,0,194,1720,1,0,0,0,196,1755,
        1,0,0,0,198,1758,1,0,0,0,200,1781,1,0,0,0,202,1810,1,0,0,0,204,1812,
        1,0,0,0,206,1814,1,0,0,0,208,1822,1,0,0,0,210,1825,1,0,0,0,212,1833,
        1,0,0,0,214,1835,1,0,0,0,216,1839,1,0,0,0,218,1841,1,0,0,0,220,1843,
        1,0,0,0,222,1845,1,0,0,0,224,1870,1,0,0,0,226,1911,1,0,0,0,228,1913,
        1,0,0,0,230,1920,1,0,0,0,232,1922,1,0,0,0,234,1924,1,0,0,0,236,1926,
        1,0,0,0,238,242,3,60,30,0,239,242,3,88,44,0,240,242,3,20,10,0,241,
        238,1,0,0,0,241,239,1,0,0,0,241,240,1,0,0,0,242,1,1,0,0,0,243,244,
        5,58,0,0,244,246,5,135,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,247,
        1,0,0,0,247,249,5,59,0,0,248,250,5,135,0,0,249,248,1,0,0,0,249,250,
        1,0,0,0,250,251,1,0,0,0,251,259,3,114,57,0,252,254,5,135,0,0,253,
        252,1,0,0,0,253,254,1,0,0,0,254,257,1,0,0,0,255,258,3,16,8,0,256,
        258,3,18,9,0,257,255,1,0,0,0,257,256,1,0,0,0,258,260,1,0,0,0,259,
        253,1,0,0,0,259,260,1,0,0,0,260,265,1,0,0,0,261,263,5,135,0,0,262,
        261,1,0,0,0,262,263,1,0,0,0,263,264,1,0,0,0,264,266,3,112,56,0,265,
        262,1,0,0,0,265,266,1,0,0,0,266,3,1,0,0,0,267,274,3,78,39,0,268,
        274,3,74,37,0,269,274,3,12,6,0,270,274,3,80,40,0,271,274,3,82,41,
        0,272,274,3,8,4,0,273,267,1,0,0,0,273,268,1,0,0,0,273,269,1,0,0,
        0,273,270,1,0,0,0,273,271,1,0,0,0,273,272,1,0,0,0,274,279,1,0,0,
        0,275,277,5,135,0,0,276,275,1,0,0,0,276,277,1,0,0,0,277,278,1,0,
        0,0,278,280,3,16,8,0,279,276,1,0,0,0,279,280,1,0,0,0,280,5,1,0,0,
        0,281,283,3,210,105,0,282,284,5,135,0,0,283,282,1,0,0,0,283,284,
        1,0,0,0,284,285,1,0,0,0,285,286,3,48,24,0,286,391,1,0,0,0,287,292,
        3,210,105,0,288,290,5,135,0,0,289,288,1,0,0,0,289,290,1,0,0,0,290,
        291,1,0,0,0,291,293,3,48,24,0,292,289,1,0,0,0,292,293,1,0,0,0,293,
        294,1,0,0,0,294,295,5,1,0,0,295,297,3,226,113,0,296,298,5,135,0,
        0,297,296,1,0,0,0,297,298,1,0,0,0,298,299,1,0,0,0,299,300,3,48,24,
        0,300,391,1,0,0,0,301,306,3,210,105,0,302,304,5,135,0,0,303,302,
        1,0,0,0,303,304,1,0,0,0,304,305,1,0,0,0,305,307,3,48,24,0,306,303,
        1,0,0,0,306,307,1,0,0,0,307,308,1,0,0,0,308,309,5,1,0,0,309,314,
        3,226,113,0,310,312,5,135,0,0,311,310,1,0,0,0,311,312,1,0,0,0,312,
        313,1,0,0,0,313,315,3,48,24,0,314,311,1,0,0,0,314,315,1,0,0,0,315,
        317,1,0,0,0,316,318,5,135,0,0,317,316,1,0,0,0,317,318,1,0,0,0,318,
        319,1,0,0,0,319,321,5,47,0,0,320,322,5,135,0,0,321,320,1,0,0,0,321,
        322,1,0,0,0,322,323,1,0,0,0,323,324,3,48,24,0,324,391,1,0,0,0,325,
        330,3,210,105,0,326,328,5,135,0,0,327,326,1,0,0,0,327,328,1,0,0,
        0,328,329,1,0,0,0,329,331,3,48,24,0,330,327,1,0,0,0,330,331,1,0,
        0,0,331,332,1,0,0,0,332,333,5,1,0,0,333,338,3,226,113,0,334,336,
        5,135,0,0,335,334,1,0,0,0,335,336,1,0,0,0,336,337,1,0,0,0,337,339,
        3,48,24,0,338,335,1,0,0,0,338,339,1,0,0,0,339,341,1,0,0,0,340,342,
        5,135,0,0,341,340,1,0,0,0,341,342,1,0,0,0,342,343,1,0,0,0,343,345,
        5,2,0,0,344,346,5,135,0,0,345,344,1,0,0,0,345,346,1,0,0,0,346,347,
        1,0,0,0,347,352,3,142,71,0,348,350,5,135,0,0,349,348,1,0,0,0,349,
        350,1,0,0,0,350,351,1,0,0,0,351,353,3,48,24,0,352,349,1,0,0,0,352,
        353,1,0,0,0,353,391,1,0,0,0,354,356,3,140,70,0,355,357,5,135,0,0,
        356,355,1,0,0,0,356,357,1,0,0,0,357,358,1,0,0,0,358,360,5,2,0,0,
        359,361,5,135,0,0,360,359,1,0,0,0,360,361,1,0,0,0,361,362,1,0,0,
        0,362,363,3,142,71,0,363,391,1,0,0,0,364,366,3,210,105,0,365,367,
        5,135,0,0,366,365,1,0,0,0,366,367,1,0,0,0,367,368,1,0,0,0,368,370,
        5,2,0,0,369,371,5,135,0,0,370,369,1,0,0,0,370,371,1,0,0,0,371,372,
        1,0,0,0,372,373,3,142,71,0,373,391,1,0,0,0,374,376,3,210,105,0,375,
        377,5,135,0,0,376,375,1,0,0,0,376,377,1,0,0,0,377,378,1,0,0,0,378,
        380,5,3,0,0,379,381,5,135,0,0,380,379,1,0,0,0,380,381,1,0,0,0,381,
        382,1,0,0,0,382,383,3,142,71,0,383,391,1,0,0,0,384,386,3,210,105,
        0,385,387,5,135,0,0,386,385,1,0,0,0,386,387,1,0,0,0,387,388,1,0,
        0,0,388,389,3,130,65,0,389,391,1,0,0,0,390,281,1,0,0,0,390,287,1,
        0,0,0,390,301,1,0,0,0,390,325,1,0,0,0,390,354,1,0,0,0,390,364,1,
        0,0,0,390,374,1,0,0,0,390,384,1,0,0,0,391,7,1,0,0,0,392,394,5,53,
        0,0,393,395,5,135,0,0,394,393,1,0,0,0,394,395,1,0,0,0,395,396,1,
        0,0,0,396,407,3,10,5,0,397,399,5,135,0,0,398,397,1,0,0,0,398,399,
        1,0,0,0,399,400,1,0,0,0,400,402,5,4,0,0,401,403,5,135,0,0,402,401,
        1,0,0,0,402,403,1,0,0,0,403,404,1,0,0,0,404,406,3,10,5,0,405,398,
        1,0,0,0,406,409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,9,1,
        0,0,0,409,407,1,0,0,0,410,411,3,142,71,0,411,412,5,1,0,0,412,414,
        3,226,113,0,413,415,5,135,0,0,414,413,1,0,0,0,414,415,1,0,0,0,415,
        416,1,0,0,0,416,417,5,47,0,0,417,420,1,0,0,0,418,420,3,142,71,0,
        419,410,1,0,0,0,419,418,1,0,0,0,420,11,1,0,0,0,421,422,5,66,0,0,
        422,424,5,135,0,0,423,421,1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,
        0,425,427,5,67,0,0,426,428,5,135,0,0,427,426,1,0,0,0,427,428,1,0,
        0,0,428,429,1,0,0,0,429,440,3,14,7,0,430,432,5,135,0,0,431,430,1,
        0,0,0,431,432,1,0,0,0,432,433,1,0,0,0,433,435,5,4,0,0,434,436,5,
        135,0,0,435,434,1,0,0,0,435,436,1,0,0,0,436,437,1,0,0,0,437,439,
        3,14,7,0,438,431,1,0,0,0,439,442,1,0,0,0,440,438,1,0,0,0,440,441,
        1,0,0,0,441,13,1,0,0,0,442,440,1,0,0,0,443,444,3,142,71,0,444,445,
        5,1,0,0,445,447,3,226,113,0,446,448,5,135,0,0,447,446,1,0,0,0,447,
        448,1,0,0,0,448,449,1,0,0,0,449,450,5,47,0,0,450,453,1,0,0,0,451,
        453,3,142,71,0,452,443,1,0,0,0,452,451,1,0,0,0,453,15,1,0,0,0,454,
        456,5,49,0,0,455,457,5,135,0,0,456,455,1,0,0,0,456,457,1,0,0,0,457,
        458,1,0,0,0,458,459,3,142,71,0,459,17,1,0,0,0,460,462,5,51,0,0,461,
        463,5,135,0,0,462,461,1,0,0,0,462,463,1,0,0,0,463,464,1,0,0,0,464,
        465,3,142,71,0,465,19,1,0,0,0,466,468,5,50,0,0,467,469,5,135,0,0,
        468,467,1,0,0,0,468,469,1,0,0,0,469,470,1,0,0,0,470,477,3,142,71,
        0,471,473,5,52,0,0,472,474,5,135,0,0,473,472,1,0,0,0,473,474,1,0,
        0,0,474,475,1,0,0,0,475,477,3,142,71,0,476,466,1,0,0,0,476,471,1,
        0,0,0,477,21,1,0,0,0,478,480,3,210,105,0,479,481,5,135,0,0,480,479,
        1,0,0,0,480,481,1,0,0,0,481,482,1,0,0,0,482,484,5,2,0,0,483,485,
        5,135,0,0,484,483,1,0,0,0,484,485,1,0,0,0,485,486,1,0,0,0,486,487,
        3,24,12,0,487,500,1,0,0,0,488,490,3,210,105,0,489,491,5,135,0,0,
        490,489,1,0,0,0,490,491,1,0,0,0,491,492,1,0,0,0,492,494,5,2,0,0,
        493,495,5,135,0,0,494,493,1,0,0,0,494,495,1,0,0,0,495,496,1,0,0,
        0,496,497,3,116,58,0,497,500,1,0,0,0,498,500,3,116,58,0,499,478,
        1,0,0,0,499,488,1,0,0,0,499,498,1,0,0,0,500,23,1,0,0,0,501,503,3,
        196,98,0,502,504,5,135,0,0,503,502,1,0,0,0,503,504,1,0,0,0,504,505,
        1,0,0,0,505,507,5,5,0,0,506,508,5,135,0,0,507,506,1,0,0,0,507,508,
        1,0,0,0,508,509,1,0,0,0,509,511,3,26,13,0,510,512,5,135,0,0,511,
        510,1,0,0,0,511,512,1,0,0,0,512,513,1,0,0,0,513,514,5,6,0,0,514,
        25,1,0,0,0,515,517,3,28,14,0,516,518,5,135,0,0,517,516,1,0,0,0,517,
        518,1,0,0,0,518,519,1,0,0,0,519,521,3,124,62,0,520,522,5,135,0,0,
        521,520,1,0,0,0,521,522,1,0,0,0,522,523,1,0,0,0,523,524,3,28,14,
        0,524,27,1,0,0,0,525,527,5,5,0,0,526,528,5,135,0,0,527,526,1,0,0,
        0,527,528,1,0,0,0,528,533,1,0,0,0,529,531,3,210,105,0,530,532,5,
        135,0,0,531,530,1,0,0,0,531,532,1,0,0,0,532,534,1,0,0,0,533,529,
        1,0,0,0,533,534,1,0,0,0,534,539,1,0,0,0,535,537,3,130,65,0,536,538,
        5,135,0,0,537,536,1,0,0,0,537,538,1,0,0,0,538,540,1,0,0,0,539,535,
        1,0,0,0,539,540,1,0,0,0,540,545,1,0,0,0,541,543,3,48,24,0,542,544,
        5,135,0,0,543,542,1,0,0,0,543,544,1,0,0,0,544,546,1,0,0,0,545,541,
        1,0,0,0,545,546,1,0,0,0,546,551,1,0,0,0,547,549,3,30,15,0,548,550,
        5,135,0,0,549,548,1,0,0,0,549,550,1,0,0,0,550,552,1,0,0,0,551,547,
        1,0,0,0,551,552,1,0,0,0,552,553,1,0,0,0,553,554,5,6,0,0,554,29,1,
        0,0,0,555,558,3,32,16,0,556,558,3,228,114,0,557,555,1,0,0,0,557,
        556,1,0,0,0,558,31,1,0,0,0,559,561,5,7,0,0,560,562,5,135,0,0,561,
        560,1,0,0,0,561,562,1,0,0,0,562,579,1,0,0,0,563,564,3,34,17,0,564,
        565,5,8,0,0,565,576,3,36,18,0,566,568,5,4,0,0,567,569,5,135,0,0,
        568,567,1,0,0,0,568,569,1,0,0,0,569,570,1,0,0,0,570,571,3,34,17,
        0,571,572,5,8,0,0,572,573,3,36,18,0,573,575,1,0,0,0,574,566,1,0,
        0,0,575,578,1,0,0,0,576,574,1,0,0,0,576,577,1,0,0,0,577,580,1,0,
        0,0,578,576,1,0,0,0,579,563,1,0,0,0,579,580,1,0,0,0,580,581,1,0,
        0,0,581,582,5,9,0,0,582,33,1,0,0,0,583,585,3,226,113,0,584,586,5,
        135,0,0,585,584,1,0,0,0,585,586,1,0,0,0,586,591,1,0,0,0,587,589,
        3,48,24,0,588,590,5,135,0,0,589,588,1,0,0,0,589,590,1,0,0,0,590,
        592,1,0,0,0,591,587,1,0,0,0,591,592,1,0,0,0,592,35,1,0,0,0,593,595,
        5,135,0,0,594,593,1,0,0,0,594,595,1,0,0,0,595,596,1,0,0,0,596,598,
        3,142,71,0,597,599,5,135,0,0,598,597,1,0,0,0,598,599,1,0,0,0,599,
        604,1,0,0,0,600,602,3,48,24,0,601,603,5,135,0,0,602,601,1,0,0,0,
        602,603,1,0,0,0,603,605,1,0,0,0,604,600,1,0,0,0,604,605,1,0,0,0,
        605,37,1,0,0,0,606,608,5,10,0,0,607,609,5,135,0,0,608,607,1,0,0,
        0,608,609,1,0,0,0,609,614,1,0,0,0,610,612,3,210,105,0,611,613,5,
        135,0,0,612,611,1,0,0,0,612,613,1,0,0,0,613,615,1,0,0,0,614,610,
        1,0,0,0,614,615,1,0,0,0,615,620,1,0,0,0,616,618,3,128,64,0,617,619,
        5,135,0,0,618,617,1,0,0,0,618,619,1,0,0,0,619,621,1,0,0,0,620,616,
        1,0,0,0,620,621,1,0,0,0,621,623,1,0,0,0,622,624,3,134,67,0,623,622,
        1,0,0,0,623,624,1,0,0,0,624,629,1,0,0,0,625,627,3,48,24,0,626,628,
        5,135,0,0,627,626,1,0,0,0,627,628,1,0,0,0,628,630,1,0,0,0,629,625,
        1,0,0,0,629,630,1,0,0,0,630,635,1,0,0,0,631,633,3,126,63,0,632,634,
        5,135,0,0,633,632,1,0,0,0,633,634,1,0,0,0,634,636,1,0,0,0,635,631,
        1,0,0,0,635,636,1,0,0,0,636,637,1,0,0,0,637,638,5,11,0,0,638,39,
        1,0,0,0,639,644,3,162,81,0,640,645,3,46,23,0,641,645,3,156,78,0,
        642,645,3,158,79,0,643,645,3,160,80,0,644,640,1,0,0,0,644,641,1,
        0,0,0,644,642,1,0,0,0,644,643,1,0,0,0,644,645,1,0,0,0,645,41,1,0,
        0,0,646,649,3,170,85,0,647,649,3,44,22,0,648,646,1,0,0,0,648,647,
        1,0,0,0,649,671,1,0,0,0,650,652,5,135,0,0,651,650,1,0,0,0,651,652,
        1,0,0,0,652,653,1,0,0,0,653,654,5,10,0,0,654,655,3,142,71,0,655,
        656,5,11,0,0,656,670,1,0,0,0,657,659,5,135,0,0,658,657,1,0,0,0,658,
        659,1,0,0,0,659,660,1,0,0,0,660,662,5,10,0,0,661,663,3,142,71,0,
        662,661,1,0,0,0,662,663,1,0,0,0,663,664,1,0,0,0,664,666,5,12,0,0,
        665,667,3,142,71,0,666,665,1,0,0,0,666,667,1,0,0,0,667,668,1,0,0,
        0,668,670,5,11,0,0,669,651,1,0,0,0,669,658,1,0,0,0,670,673,1,0,0,
        0,671,669,1,0,0,0,671,672,1,0,0,0,672,43,1,0,0,0,673,671,1,0,0,0,
        674,689,3,174,87,0,675,677,5,135,0,0,676,675,1,0,0,0,676,677,1,0,
        0,0,677,678,1,0,0,0,678,680,3,172,86,0,679,676,1,0,0,0,680,681,1,
        0,0,0,681,679,1,0,0,0,681,682,1,0,0,0,682,687,1,0,0,0,683,685,5,
        135,0,0,684,683,1,0,0,0,684,685,1,0,0,0,685,686,1,0,0,0,686,688,
        5,47,0,0,687,684,1,0,0,0,687,688,1,0,0,0,688,690,1,0,0,0,689,679,
        1,0,0,0,689,690,1,0,0,0,690,692,1,0,0,0,691,693,5,135,0,0,692,691,
        1,0,0,0,692,693,1,0,0,0,693,694,1,0,0,0,694,701,5,46,0,0,695,697,
        5,135,0,0,696,695,1,0,0,0,696,697,1,0,0,0,697,698,1,0,0,0,698,700,
        3,172,86,0,699,696,1,0,0,0,700,703,1,0,0,0,701,699,1,0,0,0,701,702,
        1,0,0,0,702,45,1,0,0,0,703,701,1,0,0,0,704,705,5,135,0,0,705,706,
        7,0,0,0,706,707,5,135,0,0,707,708,3,162,81,0,708,47,1,0,0,0,709,
        711,5,46,0,0,710,712,5,135,0,0,711,710,1,0,0,0,711,712,1,0,0,0,712,
        713,1,0,0,0,713,715,5,5,0,0,714,716,5,135,0,0,715,714,1,0,0,0,715,
        716,1,0,0,0,716,717,1,0,0,0,717,719,3,50,25,0,718,720,5,135,0,0,
        719,718,1,0,0,0,719,720,1,0,0,0,720,721,1,0,0,0,721,723,5,4,0,0,
        722,724,5,135,0,0,723,722,1,0,0,0,723,724,1,0,0,0,724,727,1,0,0,
        0,725,728,3,50,25,0,726,728,5,48,0,0,727,725,1,0,0,0,727,726,1,0,
        0,0,728,730,1,0,0,0,729,731,5,135,0,0,730,729,1,0,0,0,730,731,1,
        0,0,0,731,732,1,0,0,0,732,733,5,6,0,0,733,49,1,0,0,0,734,737,5,117,
        0,0,735,737,3,224,112,0,736,734,1,0,0,0,736,735,1,0,0,0,737,51,1,
        0,0,0,738,739,7,1,0,0,739,53,1,0,0,0,740,741,7,2,0,0,741,55,1,0,
        0,0,742,744,5,135,0,0,743,742,1,0,0,0,743,744,1,0,0,0,744,745,1,
        0,0,0,745,750,3,58,29,0,746,748,5,135,0,0,747,746,1,0,0,0,747,748,
        1,0,0,0,748,749,1,0,0,0,749,751,5,13,0,0,750,747,1,0,0,0,750,751,
        1,0,0,0,751,753,1,0,0,0,752,754,5,135,0,0,753,752,1,0,0,0,753,754,
        1,0,0,0,754,755,1,0,0,0,755,756,5,0,0,1,756,57,1,0,0,0,757,758,3,
        0,0,0,758,59,1,0,0,0,759,766,3,64,32,0,760,762,5,135,0,0,761,760,
        1,0,0,0,761,762,1,0,0,0,762,763,1,0,0,0,763,765,3,62,31,0,764,761,
        1,0,0,0,765,768,1,0,0,0,766,764,1,0,0,0,766,767,1,0,0,0,767,61,1,
        0,0,0,768,766,1,0,0,0,769,770,5,56,0,0,770,771,5,135,0,0,771,773,
        5,57,0,0,772,774,5,135,0,0,773,772,1,0,0,0,773,774,1,0,0,0,774,775,
        1,0,0,0,775,782,3,64,32,0,776,778,5,56,0,0,777,779,5,135,0,0,778,
        777,1,0,0,0,778,779,1,0,0,0,779,780,1,0,0,0,780,782,3,64,32,0,781,
        769,1,0,0,0,781,776,1,0,0,0,782,63,1,0,0,0,783,786,3,66,33,0,784,
        786,3,68,34,0,785,783,1,0,0,0,785,784,1,0,0,0,786,65,1,0,0,0,787,
        789,3,70,35,0,788,790,5,135,0,0,789,788,1,0,0,0,789,790,1,0,0,0,
        790,792,1,0,0,0,791,787,1,0,0,0,792,795,1,0,0,0,793,791,1,0,0,0,
        793,794,1,0,0,0,794,796,1,0,0,0,795,793,1,0,0,0,796,823,3,96,48,
        0,797,799,3,70,35,0,798,800,5,135,0,0,799,798,1,0,0,0,799,800,1,
        0,0,0,800,802,1,0,0,0,801,797,1,0,0,0,802,805,1,0,0,0,803,801,1,
        0,0,0,803,804,1,0,0,0,804,806,1,0,0,0,805,803,1,0,0,0,806,813,3,
        4,2,0,807,809,5,135,0,0,808,807,1,0,0,0,808,809,1,0,0,0,809,810,
        1,0,0,0,810,812,3,4,2,0,811,808,1,0,0,0,812,815,1,0,0,0,813,811,
        1,0,0,0,813,814,1,0,0,0,814,820,1,0,0,0,815,813,1,0,0,0,816,818,
        5,135,0,0,817,816,1,0,0,0,817,818,1,0,0,0,818,819,1,0,0,0,819,821,
        3,96,48,0,820,817,1,0,0,0,820,821,1,0,0,0,821,823,1,0,0,0,822,793,
        1,0,0,0,822,803,1,0,0,0,823,67,1,0,0,0,824,826,3,70,35,0,825,827,
        5,135,0,0,826,825,1,0,0,0,826,827,1,0,0,0,827,829,1,0,0,0,828,824,
        1,0,0,0,829,832,1,0,0,0,830,828,1,0,0,0,830,831,1,0,0,0,831,839,
        1,0,0,0,832,830,1,0,0,0,833,835,3,4,2,0,834,836,5,135,0,0,835,834,
        1,0,0,0,835,836,1,0,0,0,836,838,1,0,0,0,837,833,1,0,0,0,838,841,
        1,0,0,0,839,837,1,0,0,0,839,840,1,0,0,0,840,842,1,0,0,0,841,839,
        1,0,0,0,842,844,3,94,47,0,843,845,5,135,0,0,844,843,1,0,0,0,844,
        845,1,0,0,0,845,847,1,0,0,0,846,830,1,0,0,0,847,848,1,0,0,0,848,
        846,1,0,0,0,848,849,1,0,0,0,849,850,1,0,0,0,850,851,3,66,33,0,851,
        69,1,0,0,0,852,856,3,2,1,0,853,856,3,72,36,0,854,856,3,86,43,0,855,
        852,1,0,0,0,855,853,1,0,0,0,855,854,1,0,0,0,856,71,1,0,0,0,857,859,
        5,60,0,0,858,860,5,135,0,0,859,858,1,0,0,0,859,860,1,0,0,0,860,861,
        1,0,0,0,861,862,3,142,71,0,862,863,5,135,0,0,863,864,5,61,0,0,864,
        865,5,135,0,0,865,866,3,210,105,0,866,73,1,0,0,0,867,869,5,62,0,
        0,868,870,5,135,0,0,869,868,1,0,0,0,869,870,1,0,0,0,870,871,1,0,
        0,0,871,876,3,22,11,0,872,873,5,135,0,0,873,875,3,76,38,0,874,872,
        1,0,0,0,875,878,1,0,0,0,876,874,1,0,0,0,876,877,1,0,0,0,877,75,1,
        0,0,0,878,876,1,0,0,0,879,880,5,63,0,0,880,881,5,135,0,0,881,882,
        5,59,0,0,882,883,5,135,0,0,883,890,3,80,40,0,884,885,5,63,0,0,885,
        886,5,135,0,0,886,887,5,64,0,0,887,888,5,135,0,0,888,890,3,80,40,
        0,889,879,1,0,0,0,889,884,1,0,0,0,890,77,1,0,0,0,891,893,5,64,0,
        0,892,894,5,135,0,0,893,892,1,0,0,0,893,894,1,0,0,0,894,895,1,0,
        0,0,895,896,3,114,57,0,896,79,1,0,0,0,897,899,5,65,0,0,898,900,5,
        135,0,0,899,898,1,0,0,0,899,900,1,0,0,0,900,901,1,0,0,0,901,912,
        3,6,3,0,902,904,5,135,0,0,903,902,1,0,0,0,903,904,1,0,0,0,904,905,
        1,0,0,0,905,907,5,4,0,0,906,908,5,135,0,0,907,906,1,0,0,0,907,908,
        1,0,0,0,908,909,1,0,0,0,909,911,3,6,3,0,910,903,1,0,0,0,911,914,
        1,0,0,0,912,910,1,0,0,0,912,913,1,0,0,0,913,81,1,0,0,0,914,912,1,
        0,0,0,915,916,5,68,0,0,916,917,5,135,0,0,917,928,3,84,42,0,918,920,
        5,135,0,0,919,918,1,0,0,0,919,920,1,0,0,0,920,921,1,0,0,0,921,923,
        5,4,0,0,922,924,5,135,0,0,923,922,1,0,0,0,923,924,1,0,0,0,924,925,
        1,0,0,0,925,927,3,84,42,0,926,919,1,0,0,0,927,930,1,0,0,0,928,926,
        1,0,0,0,928,929,1,0,0,0,929,83,1,0,0,0,930,928,1,0,0,0,931,932,3,
        210,105,0,932,933,3,130,65,0,933,936,1,0,0,0,934,936,3,140,70,0,
        935,931,1,0,0,0,935,934,1,0,0,0,936,85,1,0,0,0,937,938,5,69,0,0,
        938,939,5,135,0,0,939,946,3,200,100,0,940,942,5,135,0,0,941,940,
        1,0,0,0,941,942,1,0,0,0,942,943,1,0,0,0,943,944,5,70,0,0,944,945,
        5,135,0,0,945,947,3,90,45,0,946,941,1,0,0,0,946,947,1,0,0,0,947,
        87,1,0,0,0,948,949,5,69,0,0,949,952,5,135,0,0,950,953,3,200,100,
        0,951,953,3,202,101,0,952,950,1,0,0,0,952,951,1,0,0,0,953,963,1,
        0,0,0,954,956,5,135,0,0,955,954,1,0,0,0,955,956,1,0,0,0,956,957,
        1,0,0,0,957,958,5,70,0,0,958,961,5,135,0,0,959,962,5,14,0,0,960,
        962,3,90,45,0,961,959,1,0,0,0,961,960,1,0,0,0,962,964,1,0,0,0,963,
        955,1,0,0,0,963,964,1,0,0,0,964,89,1,0,0,0,965,976,3,92,46,0,966,
        968,5,135,0,0,967,966,1,0,0,0,967,968,1,0,0,0,968,969,1,0,0,0,969,
        971,5,4,0,0,970,972,5,135,0,0,971,970,1,0,0,0,971,972,1,0,0,0,972,
        973,1,0,0,0,973,975,3,92,46,0,974,967,1,0,0,0,975,978,1,0,0,0,976,
        974,1,0,0,0,976,977,1,0,0,0,977,983,1,0,0,0,978,976,1,0,0,0,979,
        981,5,135,0,0,980,979,1,0,0,0,980,981,1,0,0,0,981,982,1,0,0,0,982,
        984,3,112,56,0,983,980,1,0,0,0,983,984,1,0,0,0,984,91,1,0,0,0,985,
        986,3,204,102,0,986,987,5,135,0,0,987,988,5,61,0,0,988,989,5,135,
        0,0,989,991,1,0,0,0,990,985,1,0,0,0,990,991,1,0,0,0,991,992,1,0,
        0,0,992,993,3,210,105,0,993,93,1,0,0,0,994,995,5,71,0,0,995,1000,
        3,98,49,0,996,998,5,135,0,0,997,996,1,0,0,0,997,998,1,0,0,0,998,
        999,1,0,0,0,999,1001,3,112,56,0,1000,997,1,0,0,0,1000,1001,1,0,0,
        0,1001,95,1,0,0,0,1002,1003,5,72,0,0,1003,1004,3,98,49,0,1004,97,
        1,0,0,0,1005,1007,5,135,0,0,1006,1005,1,0,0,0,1006,1007,1,0,0,0,
        1007,1008,1,0,0,0,1008,1010,5,73,0,0,1009,1006,1,0,0,0,1009,1010,
        1,0,0,0,1010,1011,1,0,0,0,1011,1012,5,135,0,0,1012,1015,3,100,50,
        0,1013,1014,5,135,0,0,1014,1016,3,104,52,0,1015,1013,1,0,0,0,1015,
        1016,1,0,0,0,1016,1019,1,0,0,0,1017,1018,5,135,0,0,1018,1020,3,106,
        53,0,1019,1017,1,0,0,0,1019,1020,1,0,0,0,1020,1023,1,0,0,0,1021,
        1022,5,135,0,0,1022,1024,3,108,54,0,1023,1021,1,0,0,0,1023,1024,
        1,0,0,0,1024,99,1,0,0,0,1025,1036,5,14,0,0,1026,1028,5,135,0,0,1027,
        1026,1,0,0,0,1027,1028,1,0,0,0,1028,1029,1,0,0,0,1029,1031,5,4,0,
        0,1030,1032,5,135,0,0,1031,1030,1,0,0,0,1031,1032,1,0,0,0,1032,1033,
        1,0,0,0,1033,1035,3,102,51,0,1034,1027,1,0,0,0,1035,1038,1,0,0,0,
        1036,1034,1,0,0,0,1036,1037,1,0,0,0,1037,1054,1,0,0,0,1038,1036,
        1,0,0,0,1039,1050,3,102,51,0,1040,1042,5,135,0,0,1041,1040,1,0,0,
        0,1041,1042,1,0,0,0,1042,1043,1,0,0,0,1043,1045,5,4,0,0,1044,1046,
        5,135,0,0,1045,1044,1,0,0,0,1045,1046,1,0,0,0,1046,1047,1,0,0,0,
        1047,1049,3,102,51,0,1048,1041,1,0,0,0,1049,1052,1,0,0,0,1050,1048,
        1,0,0,0,1050,1051,1,0,0,0,1051,1054,1,0,0,0,1052,1050,1,0,0,0,1053,
        1025,1,0,0,0,1053,1039,1,0,0,0,1054,101,1,0,0,0,1055,1056,3,142,
        71,0,1056,1057,5,135,0,0,1057,1058,5,61,0,0,1058,1059,5,135,0,0,
        1059,1060,3,210,105,0,1060,1063,1,0,0,0,1061,1063,3,142,71,0,1062,
        1055,1,0,0,0,1062,1061,1,0,0,0,1063,103,1,0,0,0,1064,1065,5,74,0,
        0,1065,1066,5,135,0,0,1066,1067,5,75,0,0,1067,1068,5,135,0,0,1068,
        1076,3,110,55,0,1069,1071,5,4,0,0,1070,1072,5,135,0,0,1071,1070,
        1,0,0,0,1071,1072,1,0,0,0,1072,1073,1,0,0,0,1073,1075,3,110,55,0,
        1074,1069,1,0,0,0,1075,1078,1,0,0,0,1076,1074,1,0,0,0,1076,1077,
        1,0,0,0,1077,105,1,0,0,0,1078,1076,1,0,0,0,1079,1080,5,76,0,0,1080,
        1081,5,135,0,0,1081,1082,3,142,71,0,1082,107,1,0,0,0,1083,1084,5,
        77,0,0,1084,1085,5,135,0,0,1085,1086,3,142,71,0,1086,109,1,0,0,0,
        1087,1092,3,142,71,0,1088,1090,5,135,0,0,1089,1088,1,0,0,0,1089,
        1090,1,0,0,0,1090,1091,1,0,0,0,1091,1093,7,3,0,0,1092,1089,1,0,0,
        0,1092,1093,1,0,0,0,1093,111,1,0,0,0,1094,1095,5,82,0,0,1095,1096,
        5,135,0,0,1096,1097,3,142,71,0,1097,113,1,0,0,0,1098,1109,3,22,11,
        0,1099,1101,5,135,0,0,1100,1099,1,0,0,0,1100,1101,1,0,0,0,1101,1102,
        1,0,0,0,1102,1104,5,4,0,0,1103,1105,5,135,0,0,1104,1103,1,0,0,0,
        1104,1105,1,0,0,0,1105,1106,1,0,0,0,1106,1108,3,22,11,0,1107,1100,
        1,0,0,0,1108,1111,1,0,0,0,1109,1107,1,0,0,0,1109,1110,1,0,0,0,1110,
        115,1,0,0,0,1111,1109,1,0,0,0,1112,1113,3,118,59,0,1113,117,1,0,
        0,0,1114,1121,3,28,14,0,1115,1117,5,135,0,0,1116,1115,1,0,0,0,1116,
        1117,1,0,0,0,1117,1118,1,0,0,0,1118,1120,3,122,61,0,1119,1116,1,
        0,0,0,1120,1123,1,0,0,0,1121,1119,1,0,0,0,1121,1122,1,0,0,0,1122,
        1129,1,0,0,0,1123,1121,1,0,0,0,1124,1125,5,5,0,0,1125,1126,3,118,
        59,0,1126,1127,5,6,0,0,1127,1129,1,0,0,0,1128,1114,1,0,0,0,1128,
        1124,1,0,0,0,1129,119,1,0,0,0,1130,1135,3,28,14,0,1131,1133,5,135,
        0,0,1132,1131,1,0,0,0,1132,1133,1,0,0,0,1133,1134,1,0,0,0,1134,1136,
        3,122,61,0,1135,1132,1,0,0,0,1136,1137,1,0,0,0,1137,1135,1,0,0,0,
        1137,1138,1,0,0,0,1138,121,1,0,0,0,1139,1141,3,124,62,0,1140,1142,
        5,135,0,0,1141,1140,1,0,0,0,1141,1142,1,0,0,0,1142,1143,1,0,0,0,
        1143,1144,3,28,14,0,1144,123,1,0,0,0,1145,1147,3,232,116,0,1146,
        1148,5,135,0,0,1147,1146,1,0,0,0,1147,1148,1,0,0,0,1148,1149,1,0,
        0,0,1149,1151,3,236,118,0,1150,1152,5,135,0,0,1151,1150,1,0,0,0,
        1151,1152,1,0,0,0,1152,1154,1,0,0,0,1153,1155,3,38,19,0,1154,1153,
        1,0,0,0,1154,1155,1,0,0,0,1155,1157,1,0,0,0,1156,1158,5,135,0,0,
        1157,1156,1,0,0,0,1157,1158,1,0,0,0,1158,1159,1,0,0,0,1159,1161,
        3,236,118,0,1160,1162,5,135,0,0,1161,1160,1,0,0,0,1161,1162,1,0,
        0,0,1162,1163,1,0,0,0,1163,1164,3,234,117,0,1164,1210,1,0,0,0,1165,
        1167,3,232,116,0,1166,1168,5,135,0,0,1167,1166,1,0,0,0,1167,1168,
        1,0,0,0,1168,1169,1,0,0,0,1169,1171,3,236,118,0,1170,1172,5,135,
        0,0,1171,1170,1,0,0,0,1171,1172,1,0,0,0,1172,1174,1,0,0,0,1173,1175,
        3,38,19,0,1174,1173,1,0,0,0,1174,1175,1,0,0,0,1175,1177,1,0,0,0,
        1176,1178,5,135,0,0,1177,1176,1,0,0,0,1177,1178,1,0,0,0,1178,1179,
        1,0,0,0,1179,1180,3,236,118,0,1180,1210,1,0,0,0,1181,1183,3,236,
        118,0,1182,1184,5,135,0,0,1183,1182,1,0,0,0,1183,1184,1,0,0,0,1184,
        1186,1,0,0,0,1185,1187,3,38,19,0,1186,1185,1,0,0,0,1186,1187,1,0,
        0,0,1187,1189,1,0,0,0,1188,1190,5,135,0,0,1189,1188,1,0,0,0,1189,
        1190,1,0,0,0,1190,1191,1,0,0,0,1191,1193,3,236,118,0,1192,1194,5,
        135,0,0,1193,1192,1,0,0,0,1193,1194,1,0,0,0,1194,1195,1,0,0,0,1195,
        1196,3,234,117,0,1196,1210,1,0,0,0,1197,1199,3,236,118,0,1198,1200,
        5,135,0,0,1199,1198,1,0,0,0,1199,1200,1,0,0,0,1200,1202,1,0,0,0,
        1201,1203,3,38,19,0,1202,1201,1,0,0,0,1202,1203,1,0,0,0,1203,1205,
        1,0,0,0,1204,1206,5,135,0,0,1205,1204,1,0,0,0,1205,1206,1,0,0,0,
        1206,1207,1,0,0,0,1207,1208,3,236,118,0,1208,1210,1,0,0,0,1209,1145,
        1,0,0,0,1209,1165,1,0,0,0,1209,1181,1,0,0,0,1209,1197,1,0,0,0,1210,
        125,1,0,0,0,1211,1214,3,224,112,0,1212,1214,3,228,114,0,1213,1211,
        1,0,0,0,1213,1212,1,0,0,0,1214,127,1,0,0,0,1215,1217,5,8,0,0,1216,
        1218,5,135,0,0,1217,1216,1,0,0,0,1217,1218,1,0,0,0,1218,1219,1,0,
        0,0,1219,1233,3,138,69,0,1220,1222,5,135,0,0,1221,1220,1,0,0,0,1221,
        1222,1,0,0,0,1222,1223,1,0,0,0,1223,1225,5,15,0,0,1224,1226,5,8,
        0,0,1225,1224,1,0,0,0,1225,1226,1,0,0,0,1226,1228,1,0,0,0,1227,1229,
        5,135,0,0,1228,1227,1,0,0,0,1228,1229,1,0,0,0,1229,1230,1,0,0,0,
        1230,1232,3,138,69,0,1231,1221,1,0,0,0,1232,1235,1,0,0,0,1233,1231,
        1,0,0,0,1233,1234,1,0,0,0,1234,129,1,0,0,0,1235,1233,1,0,0,0,1236,
        1243,3,132,66,0,1237,1239,5,135,0,0,1238,1237,1,0,0,0,1238,1239,
        1,0,0,0,1239,1240,1,0,0,0,1240,1242,3,132,66,0,1241,1238,1,0,0,0,
        1242,1245,1,0,0,0,1243,1241,1,0,0,0,1243,1244,1,0,0,0,1244,131,1,
        0,0,0,1245,1243,1,0,0,0,1246,1248,5,8,0,0,1247,1249,5,135,0,0,1248,
        1247,1,0,0,0,1248,1249,1,0,0,0,1249,1250,1,0,0,0,1250,1251,3,136,
        68,0,1251,133,1,0,0,0,1252,1254,5,14,0,0,1253,1255,5,135,0,0,1254,
        1253,1,0,0,0,1254,1255,1,0,0,0,1255,1260,1,0,0,0,1256,1258,3,218,
        109,0,1257,1259,5,135,0,0,1258,1257,1,0,0,0,1258,1259,1,0,0,0,1259,
        1261,1,0,0,0,1260,1256,1,0,0,0,1260,1261,1,0,0,0,1261,1272,1,0,0,
        0,1262,1264,5,12,0,0,1263,1265,5,135,0,0,1264,1263,1,0,0,0,1264,
        1265,1,0,0,0,1265,1270,1,0,0,0,1266,1268,3,218,109,0,1267,1269,5,
        135,0,0,1268,1267,1,0,0,0,1268,1269,1,0,0,0,1269,1271,1,0,0,0,1270,
        1266,1,0,0,0,1270,1271,1,0,0,0,1271,1273,1,0,0,0,1272,1262,1,0,0,
        0,1272,1273,1,0,0,0,1273,135,1,0,0,0,1274,1275,3,230,115,0,1275,
        137,1,0,0,0,1276,1277,3,230,115,0,1277,139,1,0,0,0,1278,1283,3,174,
        87,0,1279,1281,5,135,0,0,1280,1279,1,0,0,0,1280,1281,1,0,0,0,1281,
        1282,1,0,0,0,1282,1284,3,172,86,0,1283,1280,1,0,0,0,1284,1285,1,
        0,0,0,1285,1283,1,0,0,0,1285,1286,1,0,0,0,1286,141,1,0,0,0,1287,
        1288,3,144,72,0,1288,143,1,0,0,0,1289,1296,3,146,73,0,1290,1291,
        5,135,0,0,1291,1292,5,83,0,0,1292,1293,5,135,0,0,1293,1295,3,146,
        73,0,1294,1290,1,0,0,0,1295,1298,1,0,0,0,1296,1294,1,0,0,0,1296,
        1297,1,0,0,0,1297,145,1,0,0,0,1298,1296,1,0,0,0,1299,1306,3,148,
        74,0,1300,1301,5,135,0,0,1301,1302,5,84,0,0,1302,1303,5,135,0,0,
        1303,1305,3,148,74,0,1304,1300,1,0,0,0,1305,1308,1,0,0,0,1306,1304,
        1,0,0,0,1306,1307,1,0,0,0,1307,147,1,0,0,0,1308,1306,1,0,0,0,1309,
        1316,3,150,75,0,1310,1311,5,135,0,0,1311,1312,5,85,0,0,1312,1313,
        5,135,0,0,1313,1315,3,150,75,0,1314,1310,1,0,0,0,1315,1318,1,0,0,
        0,1316,1314,1,0,0,0,1316,1317,1,0,0,0,1317,149,1,0,0,0,1318,1316,
        1,0,0,0,1319,1321,5,86,0,0,1320,1322,5,135,0,0,1321,1320,1,0,0,0,
        1321,1322,1,0,0,0,1322,1324,1,0,0,0,1323,1319,1,0,0,0,1324,1327,
        1,0,0,0,1325,1323,1,0,0,0,1325,1326,1,0,0,0,1326,1328,1,0,0,0,1327,
        1325,1,0,0,0,1328,1329,3,152,76,0,1329,151,1,0,0,0,1330,1337,3,40,
        20,0,1331,1333,5,135,0,0,1332,1331,1,0,0,0,1332,1333,1,0,0,0,1333,
        1334,1,0,0,0,1334,1336,3,154,77,0,1335,1332,1,0,0,0,1336,1339,1,
        0,0,0,1337,1335,1,0,0,0,1337,1338,1,0,0,0,1338,153,1,0,0,0,1339,
        1337,1,0,0,0,1340,1342,5,2,0,0,1341,1343,5,135,0,0,1342,1341,1,0,
        0,0,1342,1343,1,0,0,0,1343,1344,1,0,0,0,1344,1371,3,40,20,0,1345,
        1347,5,16,0,0,1346,1348,5,135,0,0,1347,1346,1,0,0,0,1347,1348,1,
        0,0,0,1348,1349,1,0,0,0,1349,1371,3,40,20,0,1350,1352,5,17,0,0,1351,
        1353,5,135,0,0,1352,1351,1,0,0,0,1352,1353,1,0,0,0,1353,1354,1,0,
        0,0,1354,1371,3,40,20,0,1355,1357,5,18,0,0,1356,1358,5,135,0,0,1357,
        1356,1,0,0,0,1357,1358,1,0,0,0,1358,1359,1,0,0,0,1359,1371,3,40,
        20,0,1360,1362,5,19,0,0,1361,1363,5,135,0,0,1362,1361,1,0,0,0,1362,
        1363,1,0,0,0,1363,1364,1,0,0,0,1364,1371,3,40,20,0,1365,1367,5,20,
        0,0,1366,1368,5,135,0,0,1367,1366,1,0,0,0,1367,1368,1,0,0,0,1368,
        1369,1,0,0,0,1369,1371,3,40,20,0,1370,1340,1,0,0,0,1370,1345,1,0,
        0,0,1370,1350,1,0,0,0,1370,1355,1,0,0,0,1370,1360,1,0,0,0,1370,1365,
        1,0,0,0,1371,155,1,0,0,0,1372,1373,5,135,0,0,1373,1374,5,87,0,0,
        1374,1375,5,135,0,0,1375,1383,5,71,0,0,1376,1377,5,135,0,0,1377,
        1378,5,88,0,0,1378,1379,5,135,0,0,1379,1383,5,71,0,0,1380,1381,5,
        135,0,0,1381,1383,5,89,0,0,1382,1372,1,0,0,0,1382,1376,1,0,0,0,1382,
        1380,1,0,0,0,1383,1385,1,0,0,0,1384,1386,5,135,0,0,1385,1384,1,0,
        0,0,1385,1386,1,0,0,0,1386,1387,1,0,0,0,1387,1388,3,162,81,0,1388,
        157,1,0,0,0,1389,1390,5,135,0,0,1390,1392,5,90,0,0,1391,1393,5,135,
        0,0,1392,1391,1,0,0,0,1392,1393,1,0,0,0,1393,1394,1,0,0,0,1394,1395,
        3,162,81,0,1395,159,1,0,0,0,1396,1397,5,135,0,0,1397,1398,5,91,0,
        0,1398,1399,5,135,0,0,1399,1407,5,92,0,0,1400,1401,5,135,0,0,1401,
        1402,5,91,0,0,1402,1403,5,135,0,0,1403,1404,5,86,0,0,1404,1405,5,
        135,0,0,1405,1407,5,92,0,0,1406,1396,1,0,0,0,1406,1400,1,0,0,0,1407,
        161,1,0,0,0,1408,1427,3,164,82,0,1409,1411,5,135,0,0,1410,1409,1,
        0,0,0,1410,1411,1,0,0,0,1411,1412,1,0,0,0,1412,1414,5,21,0,0,1413,
        1415,5,135,0,0,1414,1413,1,0,0,0,1414,1415,1,0,0,0,1415,1416,1,0,
        0,0,1416,1426,3,164,82,0,1417,1419,5,135,0,0,1418,1417,1,0,0,0,1418,
        1419,1,0,0,0,1419,1420,1,0,0,0,1420,1422,5,22,0,0,1421,1423,5,135,
        0,0,1422,1421,1,0,0,0,1422,1423,1,0,0,0,1423,1424,1,0,0,0,1424,1426,
        3,164,82,0,1425,1410,1,0,0,0,1425,1418,1,0,0,0,1426,1429,1,0,0,0,
        1427,1425,1,0,0,0,1427,1428,1,0,0,0,1428,163,1,0,0,0,1429,1427,1,
        0,0,0,1430,1457,3,166,83,0,1431,1433,5,135,0,0,1432,1431,1,0,0,0,
        1432,1433,1,0,0,0,1433,1434,1,0,0,0,1434,1436,5,14,0,0,1435,1437,
        5,135,0,0,1436,1435,1,0,0,0,1436,1437,1,0,0,0,1437,1438,1,0,0,0,
        1438,1456,3,166,83,0,1439,1441,5,135,0,0,1440,1439,1,0,0,0,1440,
        1441,1,0,0,0,1441,1442,1,0,0,0,1442,1444,5,23,0,0,1443,1445,5,135,
        0,0,1444,1443,1,0,0,0,1444,1445,1,0,0,0,1445,1446,1,0,0,0,1446,1456,
        3,166,83,0,1447,1449,5,135,0,0,1448,1447,1,0,0,0,1448,1449,1,0,0,
        0,1449,1450,1,0,0,0,1450,1452,5,24,0,0,1451,1453,5,135,0,0,1452,
        1451,1,0,0,0,1452,1453,1,0,0,0,1453,1454,1,0,0,0,1454,1456,3,166,
        83,0,1455,1432,1,0,0,0,1455,1440,1,0,0,0,1455,1448,1,0,0,0,1456,
        1459,1,0,0,0,1457,1455,1,0,0,0,1457,1458,1,0,0,0,1458,165,1,0,0,
        0,1459,1457,1,0,0,0,1460,1471,3,168,84,0,1461,1463,5,135,0,0,1462,
        1461,1,0,0,0,1462,1463,1,0,0,0,1463,1464,1,0,0,0,1464,1466,5,25,
        0,0,1465,1467,5,135,0,0,1466,1465,1,0,0,0,1466,1467,1,0,0,0,1467,
        1468,1,0,0,0,1468,1470,3,168,84,0,1469,1462,1,0,0,0,1470,1473,1,
        0,0,0,1471,1469,1,0,0,0,1471,1472,1,0,0,0,1472,167,1,0,0,0,1473,
        1471,1,0,0,0,1474,1481,3,42,21,0,1475,1477,7,4,0,0,1476,1478,5,135,
        0,0,1477,1476,1,0,0,0,1477,1478,1,0,0,0,1478,1479,1,0,0,0,1479,1481,
        3,42,21,0,1480,1474,1,0,0,0,1480,1475,1,0,0,0,1481,169,1,0,0,0,1482,
        1489,3,174,87,0,1483,1485,5,135,0,0,1484,1483,1,0,0,0,1484,1485,
        1,0,0,0,1485,1486,1,0,0,0,1486,1488,3,172,86,0,1487,1484,1,0,0,0,
        1488,1491,1,0,0,0,1489,1487,1,0,0,0,1489,1490,1,0,0,0,1490,1496,
        1,0,0,0,1491,1489,1,0,0,0,1492,1494,5,135,0,0,1493,1492,1,0,0,0,
        1493,1494,1,0,0,0,1494,1495,1,0,0,0,1495,1497,3,130,65,0,1496,1493,
        1,0,0,0,1496,1497,1,0,0,0,1497,171,1,0,0,0,1498,1500,5,1,0,0,1499,
        1501,5,135,0,0,1500,1499,1,0,0,0,1500,1501,1,0,0,0,1501,1502,1,0,
        0,0,1502,1503,3,226,113,0,1503,173,1,0,0,0,1504,1529,3,212,106,0,
        1505,1529,3,228,114,0,1506,1529,3,176,88,0,1507,1509,5,93,0,0,1508,
        1510,5,135,0,0,1509,1508,1,0,0,0,1509,1510,1,0,0,0,1510,1511,1,0,
        0,0,1511,1513,5,5,0,0,1512,1514,5,135,0,0,1513,1512,1,0,0,0,1513,
        1514,1,0,0,0,1514,1515,1,0,0,0,1515,1517,5,14,0,0,1516,1518,5,135,
        0,0,1517,1516,1,0,0,0,1517,1518,1,0,0,0,1518,1519,1,0,0,0,1519,1529,
        5,6,0,0,1520,1529,3,180,90,0,1521,1529,3,182,91,0,1522,1529,3,184,
        92,0,1523,1529,3,188,94,0,1524,1529,3,190,95,0,1525,1529,3,194,97,
        0,1526,1529,3,198,99,0,1527,1529,3,210,105,0,1528,1504,1,0,0,0,1528,
        1505,1,0,0,0,1528,1506,1,0,0,0,1528,1507,1,0,0,0,1528,1520,1,0,0,
        0,1528,1521,1,0,0,0,1528,1522,1,0,0,0,1528,1523,1,0,0,0,1528,1524,
        1,0,0,0,1528,1525,1,0,0,0,1528,1526,1,0,0,0,1528,1527,1,0,0,0,1529,
        175,1,0,0,0,1530,1535,5,94,0,0,1531,1533,5,135,0,0,1532,1531,1,0,
        0,0,1532,1533,1,0,0,0,1533,1534,1,0,0,0,1534,1536,3,178,89,0,1535,
        1532,1,0,0,0,1536,1537,1,0,0,0,1537,1535,1,0,0,0,1537,1538,1,0,0,
        0,1538,1553,1,0,0,0,1539,1541,5,94,0,0,1540,1542,5,135,0,0,1541,
        1540,1,0,0,0,1541,1542,1,0,0,0,1542,1543,1,0,0,0,1543,1548,3,142,
        71,0,1544,1546,5,135,0,0,1545,1544,1,0,0,0,1545,1546,1,0,0,0,1546,
        1547,1,0,0,0,1547,1549,3,178,89,0,1548,1545,1,0,0,0,1549,1550,1,
        0,0,0,1550,1548,1,0,0,0,1550,1551,1,0,0,0,1551,1553,1,0,0,0,1552,
        1530,1,0,0,0,1552,1539,1,0,0,0,1553,1562,1,0,0,0,1554,1556,5,135,
        0,0,1555,1554,1,0,0,0,1555,1556,1,0,0,0,1556,1557,1,0,0,0,1557,1559,
        5,95,0,0,1558,1560,5,135,0,0,1559,1558,1,0,0,0,1559,1560,1,0,0,0,
        1560,1561,1,0,0,0,1561,1563,3,142,71,0,1562,1555,1,0,0,0,1562,1563,
        1,0,0,0,1563,1565,1,0,0,0,1564,1566,5,135,0,0,1565,1564,1,0,0,0,
        1565,1566,1,0,0,0,1566,1567,1,0,0,0,1567,1568,5,96,0,0,1568,177,
        1,0,0,0,1569,1571,5,97,0,0,1570,1572,5,135,0,0,1571,1570,1,0,0,0,
        1571,1572,1,0,0,0,1572,1573,1,0,0,0,1573,1575,3,142,71,0,1574,1576,
        5,135,0,0,1575,1574,1,0,0,0,1575,1576,1,0,0,0,1576,1577,1,0,0,0,
        1577,1579,5,98,0,0,1578,1580,5,135,0,0,1579,1578,1,0,0,0,1579,1580,
        1,0,0,0,1580,1581,1,0,0,0,1581,1582,3,142,71,0,1582,179,1,0,0,0,
        1583,1585,5,10,0,0,1584,1586,5,135,0,0,1585,1584,1,0,0,0,1585,1586,
        1,0,0,0,1586,1587,1,0,0,0,1587,1596,3,186,93,0,1588,1590,5,135,0,
        0,1589,1588,1,0,0,0,1589,1590,1,0,0,0,1590,1591,1,0,0,0,1591,1593,
        5,15,0,0,1592,1594,5,135,0,0,1593,1592,1,0,0,0,1593,1594,1,0,0,0,
        1594,1595,1,0,0,0,1595,1597,3,142,71,0,1596,1589,1,0,0,0,1596,1597,
        1,0,0,0,1597,1599,1,0,0,0,1598,1600,5,135,0,0,1599,1598,1,0,0,0,
        1599,1600,1,0,0,0,1600,1601,1,0,0,0,1601,1602,5,11,0,0,1602,181,
        1,0,0,0,1603,1605,5,10,0,0,1604,1606,5,135,0,0,1605,1604,1,0,0,0,
        1605,1606,1,0,0,0,1606,1615,1,0,0,0,1607,1609,3,210,105,0,1608,1610,
        5,135,0,0,1609,1608,1,0,0,0,1609,1610,1,0,0,0,1610,1611,1,0,0,0,
        1611,1613,5,2,0,0,1612,1614,5,135,0,0,1613,1612,1,0,0,0,1613,1614,
        1,0,0,0,1614,1616,1,0,0,0,1615,1607,1,0,0,0,1615,1616,1,0,0,0,1616,
        1617,1,0,0,0,1617,1619,3,120,60,0,1618,1620,5,135,0,0,1619,1618,
        1,0,0,0,1619,1620,1,0,0,0,1620,1625,1,0,0,0,1621,1623,3,112,56,0,
        1622,1624,5,135,0,0,1623,1622,1,0,0,0,1623,1624,1,0,0,0,1624,1626,
        1,0,0,0,1625,1621,1,0,0,0,1625,1626,1,0,0,0,1626,1627,1,0,0,0,1627,
        1629,5,15,0,0,1628,1630,5,135,0,0,1629,1628,1,0,0,0,1629,1630,1,
        0,0,0,1630,1631,1,0,0,0,1631,1633,3,142,71,0,1632,1634,5,135,0,0,
        1633,1632,1,0,0,0,1633,1634,1,0,0,0,1634,1635,1,0,0,0,1635,1636,
        5,11,0,0,1636,183,1,0,0,0,1637,1639,5,57,0,0,1638,1640,5,135,0,0,
        1639,1638,1,0,0,0,1639,1640,1,0,0,0,1640,1641,1,0,0,0,1641,1643,
        5,5,0,0,1642,1644,5,135,0,0,1643,1642,1,0,0,0,1643,1644,1,0,0,0,
        1644,1645,1,0,0,0,1645,1647,3,186,93,0,1646,1648,5,135,0,0,1647,
        1646,1,0,0,0,1647,1648,1,0,0,0,1648,1649,1,0,0,0,1649,1650,5,6,0,
        0,1650,1694,1,0,0,0,1651,1653,5,99,0,0,1652,1654,5,135,0,0,1653,
        1652,1,0,0,0,1653,1654,1,0,0,0,1654,1655,1,0,0,0,1655,1657,5,5,0,
        0,1656,1658,5,135,0,0,1657,1656,1,0,0,0,1657,1658,1,0,0,0,1658,1659,
        1,0,0,0,1659,1661,3,186,93,0,1660,1662,5,135,0,0,1661,1660,1,0,0,
        0,1661,1662,1,0,0,0,1662,1663,1,0,0,0,1663,1664,5,6,0,0,1664,1694,
        1,0,0,0,1665,1667,5,100,0,0,1666,1668,5,135,0,0,1667,1666,1,0,0,
        0,1667,1668,1,0,0,0,1668,1669,1,0,0,0,1669,1671,5,5,0,0,1670,1672,
        5,135,0,0,1671,1670,1,0,0,0,1671,1672,1,0,0,0,1672,1673,1,0,0,0,
        1673,1675,3,186,93,0,1674,1676,5,135,0,0,1675,1674,1,0,0,0,1675,
        1676,1,0,0,0,1676,1677,1,0,0,0,1677,1678,5,6,0,0,1678,1694,1,0,0,
        0,1679,1681,5,101,0,0,1680,1682,5,135,0,0,1681,1680,1,0,0,0,1681,
        1682,1,0,0,0,1682,1683,1,0,0,0,1683,1685,5,5,0,0,1684,1686,5,135,
        0,0,1685,1684,1,0,0,0,1685,1686,1,0,0,0,1686,1687,1,0,0,0,1687,1689,
        3,186,93,0,1688,1690,5,135,0,0,1689,1688,1,0,0,0,1689,1690,1,0,0,
        0,1690,1691,1,0,0,0,1691,1692,5,6,0,0,1692,1694,1,0,0,0,1693,1637,
        1,0,0,0,1693,1651,1,0,0,0,1693,1665,1,0,0,0,1693,1679,1,0,0,0,1694,
        185,1,0,0,0,1695,1700,3,192,96,0,1696,1698,5,135,0,0,1697,1696,1,
        0,0,0,1697,1698,1,0,0,0,1698,1699,1,0,0,0,1699,1701,3,112,56,0,1700,
        1697,1,0,0,0,1700,1701,1,0,0,0,1701,187,1,0,0,0,1702,1703,3,120,
        60,0,1703,189,1,0,0,0,1704,1706,5,5,0,0,1705,1707,5,135,0,0,1706,
        1705,1,0,0,0,1706,1707,1,0,0,0,1707,1708,1,0,0,0,1708,1710,3,142,
        71,0,1709,1711,5,135,0,0,1710,1709,1,0,0,0,1710,1711,1,0,0,0,1711,
        1712,1,0,0,0,1712,1713,5,6,0,0,1713,191,1,0,0,0,1714,1715,3,210,
        105,0,1715,1716,5,135,0,0,1716,1717,5,90,0,0,1717,1718,5,135,0,0,
        1718,1719,3,142,71,0,1719,193,1,0,0,0,1720,1722,3,196,98,0,1721,
        1723,5,135,0,0,1722,1721,1,0,0,0,1722,1723,1,0,0,0,1723,1724,1,0,
        0,0,1724,1726,5,5,0,0,1725,1727,5,135,0,0,1726,1725,1,0,0,0,1726,
        1727,1,0,0,0,1727,1732,1,0,0,0,1728,1730,5,73,0,0,1729,1731,5,135,
        0,0,1730,1729,1,0,0,0,1730,1731,1,0,0,0,1731,1733,1,0,0,0,1732,1728,
        1,0,0,0,1732,1733,1,0,0,0,1733,1751,1,0,0,0,1734,1736,3,142,71,0,
        1735,1737,5,135,0,0,1736,1735,1,0,0,0,1736,1737,1,0,0,0,1737,1748,
        1,0,0,0,1738,1740,5,4,0,0,1739,1741,5,135,0,0,1740,1739,1,0,0,0,
        1740,1741,1,0,0,0,1741,1742,1,0,0,0,1742,1744,3,142,71,0,1743,1745,
        5,135,0,0,1744,1743,1,0,0,0,1744,1745,1,0,0,0,1745,1747,1,0,0,0,
        1746,1738,1,0,0,0,1747,1750,1,0,0,0,1748,1746,1,0,0,0,1748,1749,
        1,0,0,0,1749,1752,1,0,0,0,1750,1748,1,0,0,0,1751,1734,1,0,0,0,1751,
        1752,1,0,0,0,1752,1753,1,0,0,0,1753,1754,5,6,0,0,1754,195,1,0,0,
        0,1755,1756,3,208,104,0,1756,1757,3,52,26,0,1757,197,1,0,0,0,1758,
        1760,5,102,0,0,1759,1761,5,135,0,0,1760,1759,1,0,0,0,1760,1761,1,
        0,0,0,1761,1762,1,0,0,0,1762,1764,5,7,0,0,1763,1765,5,135,0,0,1764,
        1763,1,0,0,0,1764,1765,1,0,0,0,1765,1774,1,0,0,0,1766,1775,3,60,
        30,0,1767,1772,3,114,57,0,1768,1770,5,135,0,0,1769,1768,1,0,0,0,
        1769,1770,1,0,0,0,1770,1771,1,0,0,0,1771,1773,3,112,56,0,1772,1769,
        1,0,0,0,1772,1773,1,0,0,0,1773,1775,1,0,0,0,1774,1766,1,0,0,0,1774,
        1767,1,0,0,0,1775,1777,1,0,0,0,1776,1778,5,135,0,0,1777,1776,1,0,
        0,0,1777,1778,1,0,0,0,1778,1779,1,0,0,0,1779,1780,5,9,0,0,1780,199,
        1,0,0,0,1781,1783,3,206,103,0,1782,1784,5,135,0,0,1783,1782,1,0,
        0,0,1783,1784,1,0,0,0,1784,1785,1,0,0,0,1785,1787,5,5,0,0,1786,1788,
        5,135,0,0,1787,1786,1,0,0,0,1787,1788,1,0,0,0,1788,1806,1,0,0,0,
        1789,1791,3,142,71,0,1790,1792,5,135,0,0,1791,1790,1,0,0,0,1791,
        1792,1,0,0,0,1792,1803,1,0,0,0,1793,1795,5,4,0,0,1794,1796,5,135,
        0,0,1795,1794,1,0,0,0,1795,1796,1,0,0,0,1796,1797,1,0,0,0,1797,1799,
        3,142,71,0,1798,1800,5,135,0,0,1799,1798,1,0,0,0,1799,1800,1,0,0,
        0,1800,1802,1,0,0,0,1801,1793,1,0,0,0,1802,1805,1,0,0,0,1803,1801,
        1,0,0,0,1803,1804,1,0,0,0,1804,1807,1,0,0,0,1805,1803,1,0,0,0,1806,
        1789,1,0,0,0,1806,1807,1,0,0,0,1807,1808,1,0,0,0,1808,1809,5,6,0,
        0,1809,201,1,0,0,0,1810,1811,3,206,103,0,1811,203,1,0,0,0,1812,1813,
        3,52,26,0,1813,205,1,0,0,0,1814,1815,3,208,104,0,1815,1816,3,52,
        26,0,1816,207,1,0,0,0,1817,1818,3,52,26,0,1818,1819,5,1,0,0,1819,
        1821,1,0,0,0,1820,1817,1,0,0,0,1821,1824,1,0,0,0,1822,1820,1,0,0,
        0,1822,1823,1,0,0,0,1823,209,1,0,0,0,1824,1822,1,0,0,0,1825,1826,
        3,52,26,0,1826,211,1,0,0,0,1827,1834,3,214,107,0,1828,1834,5,92,
        0,0,1829,1834,3,216,108,0,1830,1834,5,117,0,0,1831,1834,3,222,111,
        0,1832,1834,3,224,112,0,1833,1827,1,0,0,0,1833,1828,1,0,0,0,1833,
        1829,1,0,0,0,1833,1830,1,0,0,0,1833,1831,1,0,0,0,1833,1832,1,0,0,
        0,1834,213,1,0,0,0,1835,1836,7,5,0,0,1836,215,1,0,0,0,1837,1840,
        3,220,110,0,1838,1840,3,218,109,0,1839,1837,1,0,0,0,1839,1838,1,
        0,0,0,1840,217,1,0,0,0,1841,1842,7,6,0,0,1842,219,1,0,0,0,1843,1844,
        7,7,0,0,1844,221,1,0,0,0,1845,1847,5,10,0,0,1846,1848,5,135,0,0,
        1847,1846,1,0,0,0,1847,1848,1,0,0,0,1848,1866,1,0,0,0,1849,1851,
        3,142,71,0,1850,1852,5,135,0,0,1851,1850,1,0,0,0,1851,1852,1,0,0,
        0,1852,1863,1,0,0,0,1853,1855,5,4,0,0,1854,1856,5,135,0,0,1855,1854,
        1,0,0,0,1855,1856,1,0,0,0,1856,1857,1,0,0,0,1857,1859,3,142,71,0,
        1858,1860,5,135,0,0,1859,1858,1,0,0,0,1859,1860,1,0,0,0,1860,1862,
        1,0,0,0,1861,1853,1,0,0,0,1862,1865,1,0,0,0,1863,1861,1,0,0,0,1863,
        1864,1,0,0,0,1864,1867,1,0,0,0,1865,1863,1,0,0,0,1866,1849,1,0,0,
        0,1866,1867,1,0,0,0,1867,1868,1,0,0,0,1868,1869,5,11,0,0,1869,223,
        1,0,0,0,1870,1872,5,7,0,0,1871,1873,5,135,0,0,1872,1871,1,0,0,0,
        1872,1873,1,0,0,0,1873,1907,1,0,0,0,1874,1876,3,226,113,0,1875,1877,
        5,135,0,0,1876,1875,1,0,0,0,1876,1877,1,0,0,0,1877,1878,1,0,0,0,
        1878,1880,5,8,0,0,1879,1881,5,135,0,0,1880,1879,1,0,0,0,1880,1881,
        1,0,0,0,1881,1882,1,0,0,0,1882,1884,3,142,71,0,1883,1885,5,135,0,
        0,1884,1883,1,0,0,0,1884,1885,1,0,0,0,1885,1904,1,0,0,0,1886,1888,
        5,4,0,0,1887,1889,5,135,0,0,1888,1887,1,0,0,0,1888,1889,1,0,0,0,
        1889,1890,1,0,0,0,1890,1892,3,226,113,0,1891,1893,5,135,0,0,1892,
        1891,1,0,0,0,1892,1893,1,0,0,0,1893,1894,1,0,0,0,1894,1896,5,8,0,
        0,1895,1897,5,135,0,0,1896,1895,1,0,0,0,1896,1897,1,0,0,0,1897,1898,
        1,0,0,0,1898,1900,3,142,71,0,1899,1901,5,135,0,0,1900,1899,1,0,0,
        0,1900,1901,1,0,0,0,1901,1903,1,0,0,0,1902,1886,1,0,0,0,1903,1906,
        1,0,0,0,1904,1902,1,0,0,0,1904,1905,1,0,0,0,1905,1908,1,0,0,0,1906,
        1904,1,0,0,0,1907,1874,1,0,0,0,1907,1908,1,0,0,0,1908,1909,1,0,0,
        0,1909,1910,5,9,0,0,1910,225,1,0,0,0,1911,1912,3,230,115,0,1912,
        227,1,0,0,0,1913,1916,5,26,0,0,1914,1917,3,52,26,0,1915,1917,5,106,
        0,0,1916,1914,1,0,0,0,1916,1915,1,0,0,0,1917,229,1,0,0,0,1918,1921,
        3,52,26,0,1919,1921,3,54,27,0,1920,1918,1,0,0,0,1920,1919,1,0,0,
        0,1921,231,1,0,0,0,1922,1923,7,8,0,0,1923,233,1,0,0,0,1924,1925,
        7,9,0,0,1925,235,1,0,0,0,1926,1927,7,10,0,0,1927,237,1,0,0,0,366,
        241,245,249,253,257,259,262,265,273,276,279,283,289,292,297,303,
        306,311,314,317,321,327,330,335,338,341,345,349,352,356,360,366,
        370,376,380,386,390,394,398,402,407,414,419,423,427,431,435,440,
        447,452,456,462,468,473,476,480,484,490,494,499,503,507,511,517,
        521,527,531,533,537,539,543,545,549,551,557,561,568,576,579,585,
        589,591,594,598,602,604,608,612,614,618,620,623,627,629,633,635,
        644,648,651,658,662,666,669,671,676,681,684,687,689,692,696,701,
        711,715,719,723,727,730,736,743,747,750,753,761,766,773,778,781,
        785,789,793,799,803,808,813,817,820,822,826,830,835,839,844,848,
        855,859,869,876,889,893,899,903,907,912,919,923,928,935,941,946,
        952,955,961,963,967,971,976,980,983,990,997,1000,1006,1009,1015,
        1019,1023,1027,1031,1036,1041,1045,1050,1053,1062,1071,1076,1089,
        1092,1100,1104,1109,1116,1121,1128,1132,1137,1141,1147,1151,1154,
        1157,1161,1167,1171,1174,1177,1183,1186,1189,1193,1199,1202,1205,
        1209,1213,1217,1221,1225,1228,1233,1238,1243,1248,1254,1258,1260,
        1264,1268,1270,1272,1280,1285,1296,1306,1316,1321,1325,1332,1337,
        1342,1347,1352,1357,1362,1367,1370,1382,1385,1392,1406,1410,1414,
        1418,1422,1425,1427,1432,1436,1440,1444,1448,1452,1455,1457,1462,
        1466,1471,1477,1480,1484,1489,1493,1496,1500,1509,1513,1517,1528,
        1532,1537,1541,1545,1550,1552,1555,1559,1562,1565,1571,1575,1579,
        1585,1589,1593,1596,1599,1605,1609,1613,1615,1619,1623,1625,1629,
        1633,1639,1643,1647,1653,1657,1661,1667,1671,1675,1681,1685,1689,
        1693,1697,1700,1706,1710,1722,1726,1730,1732,1736,1740,1744,1748,
        1751,1760,1764,1769,1772,1774,1777,1783,1787,1791,1795,1799,1803,
        1806,1822,1833,1839,1847,1851,1855,1859,1863,1866,1872,1876,1880,
        1884,1888,1892,1896,1900,1904,1907,1916,1920
    ]

class s_cypherParser ( Parser ):

    grammarFileName = "s_cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "'='", "'+='", "','", "'('", "')'", 
                     "'{'", "':'", "'}'", "'['", "']'", "'..'", "';'", "'*'", 
                     "'|'", "'<>'", "'<'", "'>'", "'<='", "'>='", "'+'", 
                     "'-'", "'/'", "'%'", "'^'", "'$'", "'\\u27E8'", "'\\u3008'", 
                     "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
                     "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", 
                     "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", 
                     "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
                     "'\\uFF0D'", "<INVALID>", "<INVALID>", "'NOW'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "AtT", "PoundValue", "NOW", 
                      "AT_TIME", "SNAPSHOT", "BETWEEN", "SCOPE", "STALE", 
                      "DURING", "OVERLAPS", "UNION", "ALL", "OPTIONAL", 
                      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", 
                      "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", 
                      "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", 
                      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
                      "WHERE", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", 
                      "CONTAINS", "IN", "IS", "NULL", "COUNT", "CASE", "ELSE", 
                      "END", "WHEN", "THEN", "ANY", "NONE", "SINGLE", "EXISTS", 
                      "TRUE", "FALSE", "HexInteger", "DecimalInteger", "OctalInteger", 
                      "HexLetter", "HexDigit", "Digit", "NonZeroDigit", 
                      "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", 
                      "RegularDecimalReal", "StringLiteral", "EscapedChar", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Query = 0
    RULE_oC_Match = 1
    RULE_oC_UpdatingClause = 2
    RULE_oC_SetItem = 3
    RULE_s_Stale = 4
    RULE_s_StaleItem = 5
    RULE_oC_Delete = 6
    RULE_s_DeleteItem = 7
    RULE_s_AtTime = 8
    RULE_s_Between = 9
    RULE_s_TimeWindowLimit = 10
    RULE_oC_PatternPart = 11
    RULE_s_PathFunctionPattern = 12
    RULE_s_SinglePathPattern = 13
    RULE_oC_NodePattern = 14
    RULE_s_Properties = 15
    RULE_s_PropertiesPattern = 16
    RULE_s_PropertyNode = 17
    RULE_s_ValueNode = 18
    RULE_oC_RelationshipDetail = 19
    RULE_oC_StringListNullPredicateExpression = 20
    RULE_oC_ListOperatorExpression = 21
    RULE_s_AtTExpression = 22
    RULE_s_TimePredicateExpression = 23
    RULE_s_AtTElement = 24
    RULE_s_TimePointLiteral = 25
    RULE_oC_SymbolicName = 26
    RULE_oC_ReservedWord = 27
    RULE_oC_Cypher = 28
    RULE_oC_Statement = 29
    RULE_oC_RegularQuery = 30
    RULE_oC_Union = 31
    RULE_oC_SingleQuery = 32
    RULE_oC_SinglePartQuery = 33
    RULE_oC_MultiPartQuery = 34
    RULE_oC_ReadingClause = 35
    RULE_oC_Unwind = 36
    RULE_oC_Merge = 37
    RULE_oC_MergeAction = 38
    RULE_oC_Create = 39
    RULE_oC_Set = 40
    RULE_oC_Remove = 41
    RULE_oC_RemoveItem = 42
    RULE_oC_InQueryCall = 43
    RULE_oC_StandaloneCall = 44
    RULE_oC_YieldItems = 45
    RULE_oC_YieldItem = 46
    RULE_oC_With = 47
    RULE_oC_Return = 48
    RULE_oC_ProjectionBody = 49
    RULE_oC_ProjectionItems = 50
    RULE_oC_ProjectionItem = 51
    RULE_oC_Order = 52
    RULE_oC_Skip = 53
    RULE_oC_Limit = 54
    RULE_oC_SortItem = 55
    RULE_oC_Where = 56
    RULE_oC_Pattern = 57
    RULE_oC_AnonymousPatternPart = 58
    RULE_oC_PatternElement = 59
    RULE_oC_RelationshipsPattern = 60
    RULE_oC_PatternElementChain = 61
    RULE_oC_RelationshipPattern = 62
    RULE_oC_Properties = 63
    RULE_oC_RelationshipTypes = 64
    RULE_oC_NodeLabels = 65
    RULE_oC_NodeLabel = 66
    RULE_oC_RangeLiteral = 67
    RULE_oC_LabelName = 68
    RULE_oC_RelTypeName = 69
    RULE_oC_PropertyExpression = 70
    RULE_oC_Expression = 71
    RULE_oC_OrExpression = 72
    RULE_oC_XorExpression = 73
    RULE_oC_AndExpression = 74
    RULE_oC_NotExpression = 75
    RULE_oC_ComparisonExpression = 76
    RULE_oC_PartialComparisonExpression = 77
    RULE_oC_StringPredicateExpression = 78
    RULE_oC_ListPredicateExpression = 79
    RULE_oC_NullPredicateExpression = 80
    RULE_oC_AddOrSubtractExpression = 81
    RULE_oC_MultiplyDivideModuloExpression = 82
    RULE_oC_PowerOfExpression = 83
    RULE_oC_UnaryAddOrSubtractExpression = 84
    RULE_oC_PropertyOrLabelsExpression = 85
    RULE_oC_PropertyLookup = 86
    RULE_oC_Atom = 87
    RULE_oC_CaseExpression = 88
    RULE_oC_CaseAlternative = 89
    RULE_oC_ListComprehension = 90
    RULE_oC_PatternComprehension = 91
    RULE_oC_Quantifier = 92
    RULE_oC_FilterExpression = 93
    RULE_oC_PatternPredicate = 94
    RULE_oC_ParenthesizedExpression = 95
    RULE_oC_IdInColl = 96
    RULE_oC_FunctionInvocation = 97
    RULE_oC_FunctionName = 98
    RULE_oC_ExistentialSubquery = 99
    RULE_oC_ExplicitProcedureInvocation = 100
    RULE_oC_ImplicitProcedureInvocation = 101
    RULE_oC_ProcedureResultField = 102
    RULE_oC_ProcedureName = 103
    RULE_oC_Namespace = 104
    RULE_oC_Variable = 105
    RULE_oC_Literal = 106
    RULE_oC_BooleanLiteral = 107
    RULE_oC_NumberLiteral = 108
    RULE_oC_IntegerLiteral = 109
    RULE_oC_DoubleLiteral = 110
    RULE_oC_ListLiteral = 111
    RULE_oC_MapLiteral = 112
    RULE_oC_PropertyKeyName = 113
    RULE_oC_Parameter = 114
    RULE_oC_SchemaName = 115
    RULE_oC_LeftArrowHead = 116
    RULE_oC_RightArrowHead = 117
    RULE_oC_Dash = 118

    ruleNames =  [ "oC_Query", "oC_Match", "oC_UpdatingClause", "oC_SetItem", 
                   "s_Stale", "s_StaleItem", "oC_Delete", "s_DeleteItem", 
                   "s_AtTime", "s_Between", "s_TimeWindowLimit", "oC_PatternPart", 
                   "s_PathFunctionPattern", "s_SinglePathPattern", "oC_NodePattern", 
                   "s_Properties", "s_PropertiesPattern", "s_PropertyNode", 
                   "s_ValueNode", "oC_RelationshipDetail", "oC_StringListNullPredicateExpression", 
                   "oC_ListOperatorExpression", "s_AtTExpression", "s_TimePredicateExpression", 
                   "s_AtTElement", "s_TimePointLiteral", "oC_SymbolicName", 
                   "oC_ReservedWord", "oC_Cypher", "oC_Statement", "oC_RegularQuery", 
                   "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", 
                   "oC_ReadingClause", "oC_Unwind", "oC_Merge", "oC_MergeAction", 
                   "oC_Create", "oC_Set", "oC_Remove", "oC_RemoveItem", 
                   "oC_InQueryCall", "oC_StandaloneCall", "oC_YieldItems", 
                   "oC_YieldItem", "oC_With", "oC_Return", "oC_ProjectionBody", 
                   "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", 
                   "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", 
                   "oC_AnonymousPatternPart", "oC_PatternElement", "oC_RelationshipsPattern", 
                   "oC_PatternElementChain", "oC_RelationshipPattern", "oC_Properties", 
                   "oC_RelationshipTypes", "oC_NodeLabels", "oC_NodeLabel", 
                   "oC_RangeLiteral", "oC_LabelName", "oC_RelTypeName", 
                   "oC_PropertyExpression", "oC_Expression", "oC_OrExpression", 
                   "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", 
                   "oC_ComparisonExpression", "oC_PartialComparisonExpression", 
                   "oC_StringPredicateExpression", "oC_ListPredicateExpression", 
                   "oC_NullPredicateExpression", "oC_AddOrSubtractExpression", 
                   "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", 
                   "oC_UnaryAddOrSubtractExpression", "oC_PropertyOrLabelsExpression", 
                   "oC_PropertyLookup", "oC_Atom", "oC_CaseExpression", 
                   "oC_CaseAlternative", "oC_ListComprehension", "oC_PatternComprehension", 
                   "oC_Quantifier", "oC_FilterExpression", "oC_PatternPredicate", 
                   "oC_ParenthesizedExpression", "oC_IdInColl", "oC_FunctionInvocation", 
                   "oC_FunctionName", "oC_ExistentialSubquery", "oC_ExplicitProcedureInvocation", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_Variable", "oC_Literal", 
                   "oC_BooleanLiteral", "oC_NumberLiteral", "oC_IntegerLiteral", 
                   "oC_DoubleLiteral", "oC_ListLiteral", "oC_MapLiteral", 
                   "oC_PropertyKeyName", "oC_Parameter", "oC_SchemaName", 
                   "oC_LeftArrowHead", "oC_RightArrowHead", "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    AtT=46
    PoundValue=47
    NOW=48
    AT_TIME=49
    SNAPSHOT=50
    BETWEEN=51
    SCOPE=52
    STALE=53
    DURING=54
    OVERLAPS=55
    UNION=56
    ALL=57
    OPTIONAL=58
    MATCH=59
    UNWIND=60
    AS=61
    MERGE=62
    ON=63
    CREATE=64
    SET=65
    DETACH=66
    DELETE=67
    REMOVE=68
    CALL=69
    YIELD=70
    WITH=71
    RETURN=72
    DISTINCT=73
    ORDER=74
    BY=75
    L_SKIP=76
    LIMIT=77
    ASCENDING=78
    ASC=79
    DESCENDING=80
    DESC=81
    WHERE=82
    OR=83
    XOR=84
    AND=85
    NOT=86
    STARTS=87
    ENDS=88
    CONTAINS=89
    IN=90
    IS=91
    NULL=92
    COUNT=93
    CASE=94
    ELSE=95
    END=96
    WHEN=97
    THEN=98
    ANY=99
    NONE=100
    SINGLE=101
    EXISTS=102
    TRUE=103
    FALSE=104
    HexInteger=105
    DecimalInteger=106
    OctalInteger=107
    HexLetter=108
    HexDigit=109
    Digit=110
    NonZeroDigit=111
    NonZeroOctDigit=112
    OctDigit=113
    ZeroDigit=114
    ExponentDecimalReal=115
    RegularDecimalReal=116
    StringLiteral=117
    EscapedChar=118
    CONSTRAINT=119
    DO=120
    FOR=121
    REQUIRE=122
    UNIQUE=123
    MANDATORY=124
    SCALAR=125
    OF=126
    ADD=127
    DROP=128
    FILTER=129
    EXTRACT=130
    UnescapedSymbolicName=131
    IdentifierStart=132
    IdentifierPart=133
    EscapedSymbolicName=134
    SP=135
    WHITESPACE=136
    Comment=137

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StandaloneCallContext,0)


        def s_TimeWindowLimit(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimeWindowLimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = s_cypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Query)
        try:
            self.state = 241
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 238
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 239
                self.oC_StandaloneCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 240
                self.s_TimeWindowLimit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = s_cypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 243
                self.match(s_cypherParser.OPTIONAL)
                self.state = 244
                self.match(s_cypherParser.SP)


            self.state = 247
            self.match(s_cypherParser.MATCH)
            self.state = 249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 248
                self.match(s_cypherParser.SP)


            self.state = 251
            self.oC_Pattern()
            self.state = 259
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 252
                    self.match(s_cypherParser.SP)


                self.state = 257
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 255
                    self.s_AtTime()
                    pass
                elif token in [51]:
                    self.state = 256
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 265
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 261
                    self.match(s_cypherParser.SP)


                self.state = 264
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Create(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CreateContext,0)


        def oC_Merge(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MergeContext,0)


        def oC_Delete(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DeleteContext,0)


        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RemoveContext,0)


        def s_Stale(self):
            return self.getTypedRuleContext(s_cypherParser.S_StaleContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = s_cypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_UpdatingClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.state = 267
                self.oC_Create()
                pass
            elif token in [62]:
                self.state = 268
                self.oC_Merge()
                pass
            elif token in [66, 67]:
                self.state = 269
                self.oC_Delete()
                pass
            elif token in [65]:
                self.state = 270
                self.oC_Set()
                pass
            elif token in [68]:
                self.state = 271
                self.oC_Remove()
                pass
            elif token in [53]:
                self.state = 272
                self.s_Stale()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 275
                    self.match(s_cypherParser.SP)


                self.state = 278
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_AtTElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AtTElementContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = s_cypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 390
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 281
                self.oC_Variable()
                self.state = 283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 282
                    self.match(s_cypherParser.SP)


                self.state = 285
                self.s_AtTElement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 287
                self.oC_Variable()
                self.state = 292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 289
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 288
                        self.match(s_cypherParser.SP)


                    self.state = 291
                    self.s_AtTElement()


                self.state = 294
                self.match(s_cypherParser.T__0)
                self.state = 295
                self.oC_PropertyKeyName()
                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 296
                    self.match(s_cypherParser.SP)


                self.state = 299
                self.s_AtTElement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 301
                self.oC_Variable()
                self.state = 306
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 303
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 302
                        self.match(s_cypherParser.SP)


                    self.state = 305
                    self.s_AtTElement()


                self.state = 308
                self.match(s_cypherParser.T__0)
                self.state = 309
                self.oC_PropertyKeyName()
                self.state = 314
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 311
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 310
                        self.match(s_cypherParser.SP)


                    self.state = 313
                    self.s_AtTElement()


                self.state = 317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 316
                    self.match(s_cypherParser.SP)


                self.state = 319
                self.match(s_cypherParser.PoundValue)
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 320
                    self.match(s_cypherParser.SP)


                self.state = 323
                self.s_AtTElement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 325
                self.oC_Variable()
                self.state = 330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 327
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 326
                        self.match(s_cypherParser.SP)


                    self.state = 329
                    self.s_AtTElement()


                self.state = 332
                self.match(s_cypherParser.T__0)
                self.state = 333
                self.oC_PropertyKeyName()
                self.state = 338
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                if la_ == 1:
                    self.state = 335
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 334
                        self.match(s_cypherParser.SP)


                    self.state = 337
                    self.s_AtTElement()


                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 340
                    self.match(s_cypherParser.SP)


                self.state = 343
                self.match(s_cypherParser.T__1)
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 344
                    self.match(s_cypherParser.SP)


                self.state = 347
                self.oC_Expression()
                self.state = 352
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 349
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 348
                        self.match(s_cypherParser.SP)


                    self.state = 351
                    self.s_AtTElement()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 354
                self.oC_PropertyExpression()
                self.state = 356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 355
                    self.match(s_cypherParser.SP)


                self.state = 358
                self.match(s_cypherParser.T__1)
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 359
                    self.match(s_cypherParser.SP)


                self.state = 362
                self.oC_Expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 364
                self.oC_Variable()
                self.state = 366
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 365
                    self.match(s_cypherParser.SP)


                self.state = 368
                self.match(s_cypherParser.T__1)
                self.state = 370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 369
                    self.match(s_cypherParser.SP)


                self.state = 372
                self.oC_Expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 374
                self.oC_Variable()
                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 375
                    self.match(s_cypherParser.SP)


                self.state = 378
                self.match(s_cypherParser.T__2)
                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 379
                    self.match(s_cypherParser.SP)


                self.state = 382
                self.oC_Expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 384
                self.oC_Variable()
                self.state = 386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 385
                    self.match(s_cypherParser.SP)


                self.state = 388
                self.oC_NodeLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def s_StaleItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StaleItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StaleItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Stale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Stale" ):
                listener.enterS_Stale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Stale" ):
                listener.exitS_Stale(self)




    def s_Stale(self):

        localctx = s_cypherParser.S_StaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_s_Stale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.match(s_cypherParser.STALE)
            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 393
                self.match(s_cypherParser.SP)


            self.state = 396
            self.s_StaleItem()
            self.state = 407
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 398
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 397
                        self.match(s_cypherParser.SP)


                    self.state = 400
                    self.match(s_cypherParser.T__3)
                    self.state = 402
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 401
                        self.match(s_cypherParser.SP)


                    self.state = 404
                    self.s_StaleItem() 
                self.state = 409
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StaleItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StaleItem" ):
                listener.enterS_StaleItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StaleItem" ):
                listener.exitS_StaleItem(self)




    def s_StaleItem(self):

        localctx = s_cypherParser.S_StaleItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_s_StaleItem)
        self._la = 0 # Token type
        try:
            self.state = 419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 410
                self.oC_Expression()
                self.state = 411
                self.match(s_cypherParser.T__0)
                self.state = 412
                self.oC_PropertyKeyName()
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 413
                    self.match(s_cypherParser.SP)


                self.state = 416
                self.match(s_cypherParser.PoundValue)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 418
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def s_DeleteItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DeleteItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DeleteItemContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = s_cypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 421
                self.match(s_cypherParser.DETACH)
                self.state = 422
                self.match(s_cypherParser.SP)


            self.state = 425
            self.match(s_cypherParser.DELETE)
            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 426
                self.match(s_cypherParser.SP)


            self.state = 429
            self.s_DeleteItem()
            self.state = 440
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 431
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 430
                        self.match(s_cypherParser.SP)


                    self.state = 433
                    self.match(s_cypherParser.T__3)
                    self.state = 435
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 434
                        self.match(s_cypherParser.SP)


                    self.state = 437
                    self.s_DeleteItem() 
                self.state = 442
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DeleteItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DeleteItem" ):
                listener.enterS_DeleteItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DeleteItem" ):
                listener.exitS_DeleteItem(self)




    def s_DeleteItem(self):

        localctx = s_cypherParser.S_DeleteItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_s_DeleteItem)
        self._la = 0 # Token type
        try:
            self.state = 452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 443
                self.oC_Expression()
                self.state = 444
                self.match(s_cypherParser.T__0)
                self.state = 445
                self.oC_PropertyKeyName()
                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 446
                    self.match(s_cypherParser.SP)


                self.state = 449
                self.match(s_cypherParser.PoundValue)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 451
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTime" ):
                listener.enterS_AtTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTime" ):
                listener.exitS_AtTime(self)




    def s_AtTime(self):

        localctx = s_cypherParser.S_AtTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_s_AtTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.match(s_cypherParser.AT_TIME)
            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 455
                self.match(s_cypherParser.SP)


            self.state = 458
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_BetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Between

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Between" ):
                listener.enterS_Between(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Between" ):
                listener.exitS_Between(self)




    def s_Between(self):

        localctx = s_cypherParser.S_BetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_s_Between)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.match(s_cypherParser.BETWEEN)
            self.state = 462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 461
                self.match(s_cypherParser.SP)


            self.state = 464
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimeWindowLimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimeWindowLimit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimeWindowLimit" ):
                listener.enterS_TimeWindowLimit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimeWindowLimit" ):
                listener.exitS_TimeWindowLimit(self)




    def s_TimeWindowLimit(self):

        localctx = s_cypherParser.S_TimeWindowLimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_s_TimeWindowLimit)
        self._la = 0 # Token type
        try:
            self.state = 476
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 466
                self.match(s_cypherParser.SNAPSHOT)
                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 467
                    self.match(s_cypherParser.SP)


                self.state = 470
                self.oC_Expression()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 471
                self.match(s_cypherParser.SCOPE)
                self.state = 473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 472
                    self.match(s_cypherParser.SP)


                self.state = 475
                self.oC_Expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_PathFunctionPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PathFunctionPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AnonymousPatternPartContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = s_cypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 499
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 478
                self.oC_Variable()
                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 479
                    self.match(s_cypherParser.SP)


                self.state = 482
                self.match(s_cypherParser.T__1)
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 483
                    self.match(s_cypherParser.SP)


                self.state = 486
                self.s_PathFunctionPattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 488
                self.oC_Variable()
                self.state = 490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 489
                    self.match(s_cypherParser.SP)


                self.state = 492
                self.match(s_cypherParser.T__1)
                self.state = 494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 493
                    self.match(s_cypherParser.SP)


                self.state = 496
                self.oC_AnonymousPatternPart()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 498
                self.oC_AnonymousPatternPart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PathFunctionPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def s_SinglePathPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_SinglePathPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PathFunctionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PathFunctionPattern" ):
                listener.enterS_PathFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PathFunctionPattern" ):
                listener.exitS_PathFunctionPattern(self)




    def s_PathFunctionPattern(self):

        localctx = s_cypherParser.S_PathFunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_s_PathFunctionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            self.oC_FunctionName()
            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 502
                self.match(s_cypherParser.SP)


            self.state = 505
            self.match(s_cypherParser.T__4)
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 506
                self.match(s_cypherParser.SP)


            self.state = 509
            self.s_SinglePathPattern()
            self.state = 511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 510
                self.match(s_cypherParser.SP)


            self.state = 513
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SinglePathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodePatternContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,i)


        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SinglePathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SinglePathPattern" ):
                listener.enterS_SinglePathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SinglePathPattern" ):
                listener.exitS_SinglePathPattern(self)




    def s_SinglePathPattern(self):

        localctx = s_cypherParser.S_SinglePathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_s_SinglePathPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.oC_NodePattern()
            self.state = 517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 516
                self.match(s_cypherParser.SP)


            self.state = 519
            self.oC_RelationshipPattern()
            self.state = 521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 520
                self.match(s_cypherParser.SP)


            self.state = 523
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def s_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = s_cypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.match(s_cypherParser.T__4)
            self.state = 527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 526
                self.match(s_cypherParser.SP)


            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 529
                self.oC_Variable()
                self.state = 531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 530
                    self.match(s_cypherParser.SP)




            self.state = 539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 535
                self.oC_NodeLabels()
                self.state = 537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 536
                    self.match(s_cypherParser.SP)




            self.state = 545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 541
                self.s_AtTElement()
                self.state = 543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 542
                    self.match(s_cypherParser.SP)




            self.state = 551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==26:
                self.state = 547
                self.s_Properties()
                self.state = 549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 548
                    self.match(s_cypherParser.SP)




            self.state = 553
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertiesPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesPatternContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Properties" ):
                listener.enterS_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Properties" ):
                listener.exitS_Properties(self)




    def s_Properties(self):

        localctx = s_cypherParser.S_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_s_Properties)
        try:
            self.state = 557
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 555
                self.s_PropertiesPattern()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 556
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_PropertyNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PropertyNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PropertyNodeContext,i)


        def s_ValueNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ValueNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ValueNodeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertiesPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertiesPattern" ):
                listener.enterS_PropertiesPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertiesPattern" ):
                listener.exitS_PropertiesPattern(self)




    def s_PropertiesPattern(self):

        localctx = s_cypherParser.S_PropertiesPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_s_PropertiesPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self.match(s_cypherParser.T__6)
            self.state = 561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 560
                self.match(s_cypherParser.SP)


            self.state = 579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 563
                self.s_PropertyNode()
                self.state = 564
                self.match(s_cypherParser.T__7)
                self.state = 565
                self.s_ValueNode()
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 566
                    self.match(s_cypherParser.T__3)
                    self.state = 568
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 567
                        self.match(s_cypherParser.SP)


                    self.state = 570
                    self.s_PropertyNode()
                    self.state = 571
                    self.match(s_cypherParser.T__7)
                    self.state = 572
                    self.s_ValueNode()
                    self.state = 578
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 581
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyNode" ):
                listener.enterS_PropertyNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyNode" ):
                listener.exitS_PropertyNode(self)




    def s_PropertyNode(self):

        localctx = s_cypherParser.S_PropertyNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_s_PropertyNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self.oC_PropertyKeyName()
            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 584
                self.match(s_cypherParser.SP)


            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 587
                self.s_AtTElement()
                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 588
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ValueNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ValueNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ValueNode" ):
                listener.enterS_ValueNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ValueNode" ):
                listener.exitS_ValueNode(self)




    def s_ValueNode(self):

        localctx = s_cypherParser.S_ValueNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_s_ValueNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 593
                self.match(s_cypherParser.SP)


            self.state = 596
            self.oC_Expression()
            self.state = 598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 597
                self.match(s_cypherParser.SP)


            self.state = 604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 600
                self.s_AtTElement()
                self.state = 602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 601
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RangeLiteralContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = s_cypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self.match(s_cypherParser.T__9)
            self.state = 608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 607
                self.match(s_cypherParser.SP)


            self.state = 614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 610
                self.oC_Variable()
                self.state = 612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 611
                    self.match(s_cypherParser.SP)




            self.state = 620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 616
                self.oC_RelationshipTypes()
                self.state = 618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 617
                    self.match(s_cypherParser.SP)




            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 622
                self.oC_RangeLiteral()


            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 625
                self.s_AtTElement()
                self.state = 627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 626
                    self.match(s_cypherParser.SP)




            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==26:
                self.state = 631
                self.oC_Properties()
                self.state = 633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 632
                    self.match(s_cypherParser.SP)




            self.state = 637
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def s_TimePredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateExpressionContext,0)


        def oC_StringPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringPredicateExpressionContext,0)


        def oC_ListPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListPredicateExpressionContext,0)


        def oC_NullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NullPredicateExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringListNullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullPredicateExpression" ):
                listener.enterOC_StringListNullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullPredicateExpression" ):
                listener.exitOC_StringListNullPredicateExpression(self)




    def oC_StringListNullPredicateExpression(self):

        localctx = s_cypherParser.OC_StringListNullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_oC_StringListNullPredicateExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.oC_AddOrSubtractExpression()
            self.state = 644
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 640
                self.s_TimePredicateExpression()

            elif la_ == 2:
                self.state = 641
                self.oC_StringPredicateExpression()

            elif la_ == 3:
                self.state = 642
                self.oC_ListPredicateExpression()

            elif la_ == 4:
                self.state = 643
                self.oC_NullPredicateExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def s_AtTExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTExpressionContext,0)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = s_cypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_oC_ListOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 646
                self.oC_PropertyOrLabelsExpression()
                pass

            elif la_ == 2:
                self.state = 647
                self.s_AtTExpression()
                pass


            self.state = 671
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,103,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 669
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                    if la_ == 1:
                        self.state = 651
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 650
                            self.match(s_cypherParser.SP)


                        self.state = 653
                        self.match(s_cypherParser.T__9)
                        self.state = 654
                        self.oC_Expression()
                        self.state = 655
                        self.match(s_cypherParser.T__10)
                        pass

                    elif la_ == 2:
                        self.state = 658
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 657
                            self.match(s_cypherParser.SP)


                        self.state = 660
                        self.match(s_cypherParser.T__9)
                        self.state = 662
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                            self.state = 661
                            self.oC_Expression()


                        self.state = 664
                        self.match(s_cypherParser.T__11)
                        self.state = 666
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                            self.state = 665
                            self.oC_Expression()


                        self.state = 668
                        self.match(s_cypherParser.T__10)
                        pass

             
                self.state = 673
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTExpression" ):
                listener.enterS_AtTExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTExpression" ):
                listener.exitS_AtTExpression(self)




    def s_AtTExpression(self):

        localctx = s_cypherParser.S_AtTExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_s_AtTExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.oC_Atom()
            self.state = 689
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 679 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 676
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 675
                            self.match(s_cypherParser.SP)


                        self.state = 678
                        self.oC_PropertyLookup()

                    else:
                        raise NoViableAltException(self)
                    self.state = 681 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                self.state = 687
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 684
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 683
                        self.match(s_cypherParser.SP)


                    self.state = 686
                    self.match(s_cypherParser.PoundValue)




            self.state = 692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 691
                self.match(s_cypherParser.SP)


            self.state = 694
            self.match(s_cypherParser.AtT)
            self.state = 701
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 696
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 695
                        self.match(s_cypherParser.SP)


                    self.state = 698
                    self.oC_PropertyLookup() 
                self.state = 703
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateExpression" ):
                listener.enterS_TimePredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateExpression" ):
                listener.exitS_TimePredicateExpression(self)




    def s_TimePredicateExpression(self):

        localctx = s_cypherParser.S_TimePredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_s_TimePredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.match(s_cypherParser.SP)
            self.state = 705
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 706
            self.match(s_cypherParser.SP)
            self.state = 707
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_TimePointLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_TimePointLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_TimePointLiteralContext,i)


        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTElement" ):
                listener.enterS_AtTElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTElement" ):
                listener.exitS_AtTElement(self)




    def s_AtTElement(self):

        localctx = s_cypherParser.S_AtTElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_s_AtTElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.match(s_cypherParser.AtT)
            self.state = 711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 710
                self.match(s_cypherParser.SP)


            self.state = 713
            self.match(s_cypherParser.T__4)
            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 714
                self.match(s_cypherParser.SP)


            self.state = 717
            self.s_TimePointLiteral()
            self.state = 719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 718
                self.match(s_cypherParser.SP)


            self.state = 721
            self.match(s_cypherParser.T__3)
            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 722
                self.match(s_cypherParser.SP)


            self.state = 727
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 117]:
                self.state = 725
                self.s_TimePointLiteral()
                pass
            elif token in [48]:
                self.state = 726
                self.match(s_cypherParser.NOW)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 729
                self.match(s_cypherParser.SP)


            self.state = 732
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePointLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePointLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePointLiteral" ):
                listener.enterS_TimePointLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePointLiteral" ):
                listener.exitS_TimePointLiteral(self)




    def s_TimePointLiteral(self):

        localctx = s_cypherParser.S_TimePointLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_s_TimePointLiteral)
        try:
            self.state = 736
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 734
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 735
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(s_cypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(s_cypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(s_cypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(s_cypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(s_cypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = s_cypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            _la = self._input.LA(1)
            if not(_la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(s_cypherParser.AND, 0)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def OR(self):
            return self.getToken(s_cypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(s_cypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(s_cypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(s_cypherParser.DO, 0)

        def FOR(self):
            return self.getToken(s_cypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(s_cypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(s_cypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(s_cypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(s_cypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(s_cypherParser.OF, 0)

        def ADD(self):
            return self.getToken(s_cypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(s_cypherParser.DROP, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = s_cypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            _la = self._input.LA(1)
            if not(((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 128317405001678847) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(s_cypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = s_cypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 742
                self.match(s_cypherParser.SP)


            self.state = 745
            self.oC_Statement()
            self.state = 750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 746
                    self.match(s_cypherParser.SP)


                self.state = 749
                self.match(s_cypherParser.T__12)


            self.state = 753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 752
                self.match(s_cypherParser.SP)


            self.state = 755
            self.match(s_cypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = s_cypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = s_cypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.oC_SingleQuery()
            self.state = 766
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 761
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 760
                        self.match(s_cypherParser.SP)


                    self.state = 763
                    self.oC_Union() 
                self.state = 768
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = s_cypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 781
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 769
                self.match(s_cypherParser.UNION)
                self.state = 770
                self.match(s_cypherParser.SP)
                self.state = 771
                self.match(s_cypherParser.ALL)
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 772
                    self.match(s_cypherParser.SP)


                self.state = 775
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 776
                self.match(s_cypherParser.UNION)
                self.state = 778
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 777
                    self.match(s_cypherParser.SP)


                self.state = 780
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = s_cypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_oC_SingleQuery)
        try:
            self.state = 785
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 783
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 784
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = s_cypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 787
                    self.oC_ReadingClause()
                    self.state = 789
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 788
                        self.match(s_cypherParser.SP)


                    self.state = 795
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 796
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 797
                    self.oC_ReadingClause()
                    self.state = 799
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 798
                        self.match(s_cypherParser.SP)


                    self.state = 805
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 806
                self.oC_UpdatingClause()
                self.state = 813
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 808
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 807
                            self.match(s_cypherParser.SP)


                        self.state = 810
                        self.oC_UpdatingClause() 
                    self.state = 815
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

                self.state = 820
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 817
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 816
                        self.match(s_cypherParser.SP)


                    self.state = 819
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def oC_With(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_WithContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_WithContext,i)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = s_cypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_oC_MultiPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                        self.state = 824
                        self.oC_ReadingClause()
                        self.state = 826
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 825
                            self.match(s_cypherParser.SP)


                        self.state = 832
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 839
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64001) != 0):
                        self.state = 833
                        self.oC_UpdatingClause()
                        self.state = 835
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 834
                            self.match(s_cypherParser.SP)


                        self.state = 841
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 842
                    self.oC_With()
                    self.state = 844
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 843
                        self.match(s_cypherParser.SP)



                else:
                    raise NoViableAltException(self)
                self.state = 848 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

            self.state = 850
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(s_cypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = s_cypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_oC_ReadingClause)
        try:
            self.state = 855
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 852
                self.oC_Match()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 853
                self.oC_Unwind()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 854
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = s_cypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.match(s_cypherParser.UNWIND)
            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 858
                self.match(s_cypherParser.SP)


            self.state = 861
            self.oC_Expression()
            self.state = 862
            self.match(s_cypherParser.SP)
            self.state = 863
            self.match(s_cypherParser.AS)
            self.state = 864
            self.match(s_cypherParser.SP)
            self.state = 865
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = s_cypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.match(s_cypherParser.MERGE)
            self.state = 869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 868
                self.match(s_cypherParser.SP)


            self.state = 871
            self.oC_PatternPart()
            self.state = 876
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 872
                    self.match(s_cypherParser.SP)
                    self.state = 873
                    self.oC_MergeAction() 
                self.state = 878
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = s_cypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_oC_MergeAction)
        try:
            self.state = 889
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 879
                self.match(s_cypherParser.ON)
                self.state = 880
                self.match(s_cypherParser.SP)
                self.state = 881
                self.match(s_cypherParser.MATCH)
                self.state = 882
                self.match(s_cypherParser.SP)
                self.state = 883
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 884
                self.match(s_cypherParser.ON)
                self.state = 885
                self.match(s_cypherParser.SP)
                self.state = 886
                self.match(s_cypherParser.CREATE)
                self.state = 887
                self.match(s_cypherParser.SP)
                self.state = 888
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = s_cypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.match(s_cypherParser.CREATE)
            self.state = 893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 892
                self.match(s_cypherParser.SP)


            self.state = 895
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = s_cypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.match(s_cypherParser.SET)
            self.state = 899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 898
                self.match(s_cypherParser.SP)


            self.state = 901
            self.oC_SetItem()
            self.state = 912
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 903
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 902
                        self.match(s_cypherParser.SP)


                    self.state = 905
                    self.match(s_cypherParser.T__3)
                    self.state = 907
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 906
                        self.match(s_cypherParser.SP)


                    self.state = 909
                    self.oC_SetItem() 
                self.state = 914
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = s_cypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.match(s_cypherParser.REMOVE)
            self.state = 916
            self.match(s_cypherParser.SP)
            self.state = 917
            self.oC_RemoveItem()
            self.state = 928
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 919
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 918
                        self.match(s_cypherParser.SP)


                    self.state = 921
                    self.match(s_cypherParser.T__3)
                    self.state = 923
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 922
                        self.match(s_cypherParser.SP)


                    self.state = 925
                    self.oC_RemoveItem() 
                self.state = 930
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = s_cypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_oC_RemoveItem)
        try:
            self.state = 935
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 931
                self.oC_Variable()
                self.state = 932
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 934
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = s_cypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self.match(s_cypherParser.CALL)
            self.state = 938
            self.match(s_cypherParser.SP)
            self.state = 939
            self.oC_ExplicitProcedureInvocation()
            self.state = 946
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 940
                    self.match(s_cypherParser.SP)


                self.state = 943
                self.match(s_cypherParser.YIELD)
                self.state = 944
                self.match(s_cypherParser.SP)
                self.state = 945
                self.oC_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = s_cypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_oC_StandaloneCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.match(s_cypherParser.CALL)
            self.state = 949
            self.match(s_cypherParser.SP)
            self.state = 952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 950
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 951
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 963
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.state = 955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 954
                    self.match(s_cypherParser.SP)


                self.state = 957
                self.match(s_cypherParser.YIELD)
                self.state = 958
                self.match(s_cypherParser.SP)
                self.state = 961
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14]:
                    self.state = 959
                    self.match(s_cypherParser.T__13)
                    pass
                elif token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                    self.state = 960
                    self.oC_YieldItems()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = s_cypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.oC_YieldItem()
            self.state = 976
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,166,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 967
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 966
                        self.match(s_cypherParser.SP)


                    self.state = 969
                    self.match(s_cypherParser.T__3)
                    self.state = 971
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 970
                        self.match(s_cypherParser.SP)


                    self.state = 973
                    self.oC_YieldItem() 
                self.state = 978
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,166,self._ctx)

            self.state = 983
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 979
                    self.match(s_cypherParser.SP)


                self.state = 982
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = s_cypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 985
                self.oC_ProcedureResultField()
                self.state = 986
                self.match(s_cypherParser.SP)
                self.state = 987
                self.match(s_cypherParser.AS)
                self.state = 988
                self.match(s_cypherParser.SP)


            self.state = 992
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = s_cypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            self.match(s_cypherParser.WITH)
            self.state = 995
            self.oC_ProjectionBody()
            self.state = 1000
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 996
                    self.match(s_cypherParser.SP)


                self.state = 999
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = s_cypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self.match(s_cypherParser.RETURN)
            self.state = 1003
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)




    def oC_ProjectionBody(self):

        localctx = s_cypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1005
                    self.match(s_cypherParser.SP)


                self.state = 1008
                self.match(s_cypherParser.DISTINCT)


            self.state = 1011
            self.match(s_cypherParser.SP)
            self.state = 1012
            self.oC_ProjectionItems()
            self.state = 1015
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1013
                self.match(s_cypherParser.SP)
                self.state = 1014
                self.oC_Order()


            self.state = 1019
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.state = 1017
                self.match(s_cypherParser.SP)
                self.state = 1018
                self.oC_Skip()


            self.state = 1023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.state = 1021
                self.match(s_cypherParser.SP)
                self.state = 1022
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)




    def oC_ProjectionItems(self):

        localctx = s_cypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 1053
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1025
                self.match(s_cypherParser.T__13)
                self.state = 1036
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,179,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1027
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1026
                            self.match(s_cypherParser.SP)


                        self.state = 1029
                        self.match(s_cypherParser.T__3)
                        self.state = 1031
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1030
                            self.match(s_cypherParser.SP)


                        self.state = 1033
                        self.oC_ProjectionItem() 
                    self.state = 1038
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,179,self._ctx)

                pass
            elif token in [5, 7, 10, 21, 22, 26, 48, 57, 86, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1039
                self.oC_ProjectionItem()
                self.state = 1050
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,182,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1041
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1040
                            self.match(s_cypherParser.SP)


                        self.state = 1043
                        self.match(s_cypherParser.T__3)
                        self.state = 1045
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1044
                            self.match(s_cypherParser.SP)


                        self.state = 1047
                        self.oC_ProjectionItem() 
                    self.state = 1052
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)




    def oC_ProjectionItem(self):

        localctx = s_cypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_oC_ProjectionItem)
        try:
            self.state = 1062
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1055
                self.oC_Expression()
                self.state = 1056
                self.match(s_cypherParser.SP)
                self.state = 1057
                self.match(s_cypherParser.AS)
                self.state = 1058
                self.match(s_cypherParser.SP)
                self.state = 1059
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1061
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = s_cypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self.match(s_cypherParser.ORDER)
            self.state = 1065
            self.match(s_cypherParser.SP)
            self.state = 1066
            self.match(s_cypherParser.BY)
            self.state = 1067
            self.match(s_cypherParser.SP)
            self.state = 1068
            self.oC_SortItem()
            self.state = 1076
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1069
                self.match(s_cypherParser.T__3)
                self.state = 1071
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1070
                    self.match(s_cypherParser.SP)


                self.state = 1073
                self.oC_SortItem()
                self.state = 1078
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = s_cypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1079
            self.match(s_cypherParser.L_SKIP)
            self.state = 1080
            self.match(s_cypherParser.SP)
            self.state = 1081
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = s_cypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1083
            self.match(s_cypherParser.LIMIT)
            self.state = 1084
            self.match(s_cypherParser.SP)
            self.state = 1085
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = s_cypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087
            self.oC_Expression()
            self.state = 1092
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.state = 1089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1088
                    self.match(s_cypherParser.SP)


                self.state = 1091
                _la = self._input.LA(1)
                if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = s_cypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self.match(s_cypherParser.WHERE)
            self.state = 1095
            self.match(s_cypherParser.SP)
            self.state = 1096
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = s_cypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self.oC_PatternPart()
            self.state = 1109
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,191,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1100
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1099
                        self.match(s_cypherParser.SP)


                    self.state = 1102
                    self.match(s_cypherParser.T__3)
                    self.state = 1104
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1103
                        self.match(s_cypherParser.SP)


                    self.state = 1106
                    self.oC_PatternPart() 
                self.state = 1111
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,191,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = s_cypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1112
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = s_cypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 1128
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1114
                self.oC_NodePattern()
                self.state = 1121
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,193,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1116
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1115
                            self.match(s_cypherParser.SP)


                        self.state = 1118
                        self.oC_PatternElementChain() 
                    self.state = 1123
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,193,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1124
                self.match(s_cypherParser.T__4)
                self.state = 1125
                self.oC_PatternElement()
                self.state = 1126
                self.match(s_cypherParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = s_cypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self.oC_NodePattern()
            self.state = 1135 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1132
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1131
                        self.match(s_cypherParser.SP)


                    self.state = 1134
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 1137 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,196,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = s_cypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1139
            self.oC_RelationshipPattern()
            self.state = 1141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1140
                self.match(s_cypherParser.SP)


            self.state = 1143
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = s_cypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 1209
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1145
                self.oC_LeftArrowHead()
                self.state = 1147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1146
                    self.match(s_cypherParser.SP)


                self.state = 1149
                self.oC_Dash()
                self.state = 1151
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                if la_ == 1:
                    self.state = 1150
                    self.match(s_cypherParser.SP)


                self.state = 1154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1153
                    self.oC_RelationshipDetail()


                self.state = 1157
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1156
                    self.match(s_cypherParser.SP)


                self.state = 1159
                self.oC_Dash()
                self.state = 1161
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1160
                    self.match(s_cypherParser.SP)


                self.state = 1163
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1165
                self.oC_LeftArrowHead()
                self.state = 1167
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1166
                    self.match(s_cypherParser.SP)


                self.state = 1169
                self.oC_Dash()
                self.state = 1171
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
                if la_ == 1:
                    self.state = 1170
                    self.match(s_cypherParser.SP)


                self.state = 1174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1173
                    self.oC_RelationshipDetail()


                self.state = 1177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1176
                    self.match(s_cypherParser.SP)


                self.state = 1179
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1181
                self.oC_Dash()
                self.state = 1183
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
                if la_ == 1:
                    self.state = 1182
                    self.match(s_cypherParser.SP)


                self.state = 1186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1185
                    self.oC_RelationshipDetail()


                self.state = 1189
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1188
                    self.match(s_cypherParser.SP)


                self.state = 1191
                self.oC_Dash()
                self.state = 1193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1192
                    self.match(s_cypherParser.SP)


                self.state = 1195
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1197
                self.oC_Dash()
                self.state = 1199
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
                if la_ == 1:
                    self.state = 1198
                    self.match(s_cypherParser.SP)


                self.state = 1202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1201
                    self.oC_RelationshipDetail()


                self.state = 1205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1204
                    self.match(s_cypherParser.SP)


                self.state = 1207
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = s_cypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_oC_Properties)
        try:
            self.state = 1213
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1211
                self.oC_MapLiteral()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1212
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = s_cypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1215
            self.match(s_cypherParser.T__7)
            self.state = 1217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1216
                self.match(s_cypherParser.SP)


            self.state = 1219
            self.oC_RelTypeName()
            self.state = 1233
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,220,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1221
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1220
                        self.match(s_cypherParser.SP)


                    self.state = 1223
                    self.match(s_cypherParser.T__14)
                    self.state = 1225
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==8:
                        self.state = 1224
                        self.match(s_cypherParser.T__7)


                    self.state = 1228
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1227
                        self.match(s_cypherParser.SP)


                    self.state = 1230
                    self.oC_RelTypeName() 
                self.state = 1235
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,220,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = s_cypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1236
            self.oC_NodeLabel()
            self.state = 1243
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,222,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1238
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1237
                        self.match(s_cypherParser.SP)


                    self.state = 1240
                    self.oC_NodeLabel() 
                self.state = 1245
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,222,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = s_cypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1246
            self.match(s_cypherParser.T__7)
            self.state = 1248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1247
                self.match(s_cypherParser.SP)


            self.state = 1250
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = s_cypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            self.match(s_cypherParser.T__13)
            self.state = 1254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1253
                self.match(s_cypherParser.SP)


            self.state = 1260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                self.state = 1256
                self.oC_IntegerLiteral()
                self.state = 1258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1257
                    self.match(s_cypherParser.SP)




            self.state = 1272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 1262
                self.match(s_cypherParser.T__11)
                self.state = 1264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1263
                    self.match(s_cypherParser.SP)


                self.state = 1270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                    self.state = 1266
                    self.oC_IntegerLiteral()
                    self.state = 1268
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1267
                        self.match(s_cypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = s_cypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1274
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = s_cypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1276
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = s_cypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self.oC_Atom()
            self.state = 1283 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1280
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1279
                        self.match(s_cypherParser.SP)


                    self.state = 1282
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 1285 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = s_cypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1287
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = s_cypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            self.oC_XorExpression()
            self.state = 1296
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,233,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1290
                    self.match(s_cypherParser.SP)
                    self.state = 1291
                    self.match(s_cypherParser.OR)
                    self.state = 1292
                    self.match(s_cypherParser.SP)
                    self.state = 1293
                    self.oC_XorExpression() 
                self.state = 1298
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,233,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = s_cypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1299
            self.oC_AndExpression()
            self.state = 1306
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,234,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1300
                    self.match(s_cypherParser.SP)
                    self.state = 1301
                    self.match(s_cypherParser.XOR)
                    self.state = 1302
                    self.match(s_cypherParser.SP)
                    self.state = 1303
                    self.oC_AndExpression() 
                self.state = 1308
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,234,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = s_cypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1309
            self.oC_NotExpression()
            self.state = 1316
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,235,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1310
                    self.match(s_cypherParser.SP)
                    self.state = 1311
                    self.match(s_cypherParser.AND)
                    self.state = 1312
                    self.match(s_cypherParser.SP)
                    self.state = 1313
                    self.oC_NotExpression() 
                self.state = 1318
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,235,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = s_cypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1319
                self.match(s_cypherParser.NOT)
                self.state = 1321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1320
                    self.match(s_cypherParser.SP)


                self.state = 1327
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1328
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def oC_PartialComparisonExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PartialComparisonExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PartialComparisonExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = s_cypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1330
            self.oC_StringListNullPredicateExpression()
            self.state = 1337
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,239,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1332
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1331
                        self.match(s_cypherParser.SP)


                    self.state = 1334
                    self.oC_PartialComparisonExpression() 
                self.state = 1339
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,239,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PartialComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PartialComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PartialComparisonExpression" ):
                listener.enterOC_PartialComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PartialComparisonExpression" ):
                listener.exitOC_PartialComparisonExpression(self)




    def oC_PartialComparisonExpression(self):

        localctx = s_cypherParser.OC_PartialComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_PartialComparisonExpression)
        self._la = 0 # Token type
        try:
            self.state = 1370
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1340
                self.match(s_cypherParser.T__1)
                self.state = 1342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1341
                    self.match(s_cypherParser.SP)


                self.state = 1344
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1345
                self.match(s_cypherParser.T__15)
                self.state = 1347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1346
                    self.match(s_cypherParser.SP)


                self.state = 1349
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1350
                self.match(s_cypherParser.T__16)
                self.state = 1352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1351
                    self.match(s_cypherParser.SP)


                self.state = 1354
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1355
                self.match(s_cypherParser.T__17)
                self.state = 1357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1356
                    self.match(s_cypherParser.SP)


                self.state = 1359
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1360
                self.match(s_cypherParser.T__18)
                self.state = 1362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1361
                    self.match(s_cypherParser.SP)


                self.state = 1364
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1365
                self.match(s_cypherParser.T__19)
                self.state = 1367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1366
                    self.match(s_cypherParser.SP)


                self.state = 1369
                self.oC_StringListNullPredicateExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringPredicateExpression" ):
                listener.enterOC_StringPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringPredicateExpression" ):
                listener.exitOC_StringPredicateExpression(self)




    def oC_StringPredicateExpression(self):

        localctx = s_cypherParser.OC_StringPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_StringPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
            if la_ == 1:
                self.state = 1372
                self.match(s_cypherParser.SP)
                self.state = 1373
                self.match(s_cypherParser.STARTS)
                self.state = 1374
                self.match(s_cypherParser.SP)
                self.state = 1375
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1376
                self.match(s_cypherParser.SP)
                self.state = 1377
                self.match(s_cypherParser.ENDS)
                self.state = 1378
                self.match(s_cypherParser.SP)
                self.state = 1379
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1380
                self.match(s_cypherParser.SP)
                self.state = 1381
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 1385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1384
                self.match(s_cypherParser.SP)


            self.state = 1387
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListPredicateExpression" ):
                listener.enterOC_ListPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListPredicateExpression" ):
                listener.exitOC_ListPredicateExpression(self)




    def oC_ListPredicateExpression(self):

        localctx = s_cypherParser.OC_ListPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_ListPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1389
            self.match(s_cypherParser.SP)
            self.state = 1390
            self.match(s_cypherParser.IN)
            self.state = 1392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1391
                self.match(s_cypherParser.SP)


            self.state = 1394
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullPredicateExpression" ):
                listener.enterOC_NullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullPredicateExpression" ):
                listener.exitOC_NullPredicateExpression(self)




    def oC_NullPredicateExpression(self):

        localctx = s_cypherParser.OC_NullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_NullPredicateExpression)
        try:
            self.state = 1406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1396
                self.match(s_cypherParser.SP)
                self.state = 1397
                self.match(s_cypherParser.IS)
                self.state = 1398
                self.match(s_cypherParser.SP)
                self.state = 1399
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1400
                self.match(s_cypherParser.SP)
                self.state = 1401
                self.match(s_cypherParser.IS)
                self.state = 1402
                self.match(s_cypherParser.SP)
                self.state = 1403
                self.match(s_cypherParser.NOT)
                self.state = 1404
                self.match(s_cypherParser.SP)
                self.state = 1405
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1408
            self.oC_MultiplyDivideModuloExpression()
            self.state = 1427
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,256,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1425
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
                    if la_ == 1:
                        self.state = 1410
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1409
                            self.match(s_cypherParser.SP)


                        self.state = 1412
                        self.match(s_cypherParser.T__20)
                        self.state = 1414
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1413
                            self.match(s_cypherParser.SP)


                        self.state = 1416
                        self.oC_MultiplyDivideModuloExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1418
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1417
                            self.match(s_cypherParser.SP)


                        self.state = 1420
                        self.match(s_cypherParser.T__21)
                        self.state = 1422
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1421
                            self.match(s_cypherParser.SP)


                        self.state = 1424
                        self.oC_MultiplyDivideModuloExpression()
                        pass

             
                self.state = 1429
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,256,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PowerOfExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = s_cypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1430
            self.oC_PowerOfExpression()
            self.state = 1457
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,264,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1455
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
                    if la_ == 1:
                        self.state = 1432
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1431
                            self.match(s_cypherParser.SP)


                        self.state = 1434
                        self.match(s_cypherParser.T__13)
                        self.state = 1436
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1435
                            self.match(s_cypherParser.SP)


                        self.state = 1438
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1440
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1439
                            self.match(s_cypherParser.SP)


                        self.state = 1442
                        self.match(s_cypherParser.T__22)
                        self.state = 1444
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1443
                            self.match(s_cypherParser.SP)


                        self.state = 1446
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1448
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1447
                            self.match(s_cypherParser.SP)


                        self.state = 1450
                        self.match(s_cypherParser.T__23)
                        self.state = 1452
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1451
                            self.match(s_cypherParser.SP)


                        self.state = 1454
                        self.oC_PowerOfExpression()
                        pass

             
                self.state = 1459
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,264,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = s_cypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1460
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 1471
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,267,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1462
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1461
                        self.match(s_cypherParser.SP)


                    self.state = 1464
                    self.match(s_cypherParser.T__24)
                    self.state = 1466
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1465
                        self.match(s_cypherParser.SP)


                    self.state = 1468
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 1473
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,267,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ListOperatorExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListOperatorExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.state = 1480
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 7, 10, 26, 48, 57, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1474
                self.oC_ListOperatorExpression()
                pass
            elif token in [21, 22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1475
                _la = self._input.LA(1)
                if not(_la==21 or _la==22):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1476
                    self.match(s_cypherParser.SP)


                self.state = 1479
                self.oC_ListOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyOrLabelsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyOrLabelsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyOrLabelsExpression" ):
                listener.enterOC_PropertyOrLabelsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyOrLabelsExpression" ):
                listener.exitOC_PropertyOrLabelsExpression(self)




    def oC_PropertyOrLabelsExpression(self):

        localctx = s_cypherParser.OC_PropertyOrLabelsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_PropertyOrLabelsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1482
            self.oC_Atom()
            self.state = 1489
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,271,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1484
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1483
                        self.match(s_cypherParser.SP)


                    self.state = 1486
                    self.oC_PropertyLookup() 
                self.state = 1491
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,271,self._ctx)

            self.state = 1496
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.state = 1493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1492
                    self.match(s_cypherParser.SP)


                self.state = 1495
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = s_cypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1498
            self.match(s_cypherParser.T__0)
            self.state = 1500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1499
                self.match(s_cypherParser.SP)


            self.state = 1502
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternComprehensionContext,0)


        def oC_Quantifier(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QuantifierContext,0)


        def oC_PatternPredicate(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPredicateContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionInvocationContext,0)


        def oC_ExistentialSubquery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExistentialSubqueryContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = s_cypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 1528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1504
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1505
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1506
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1507
                self.match(s_cypherParser.COUNT)
                self.state = 1509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1508
                    self.match(s_cypherParser.SP)


                self.state = 1511
                self.match(s_cypherParser.T__4)
                self.state = 1513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1512
                    self.match(s_cypherParser.SP)


                self.state = 1515
                self.match(s_cypherParser.T__13)
                self.state = 1517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1516
                    self.match(s_cypherParser.SP)


                self.state = 1519
                self.match(s_cypherParser.T__5)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1520
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1521
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1522
                self.oC_Quantifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1523
                self.oC_PatternPredicate()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1524
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1525
                self.oC_FunctionInvocation()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1526
                self.oC_ExistentialSubquery()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1527
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def oC_CaseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_CaseAlternativeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = s_cypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.state = 1530
                self.match(s_cypherParser.CASE)
                self.state = 1535 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1532
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1531
                            self.match(s_cypherParser.SP)


                        self.state = 1534
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1537 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,280,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1539
                self.match(s_cypherParser.CASE)
                self.state = 1541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1540
                    self.match(s_cypherParser.SP)


                self.state = 1543
                self.oC_Expression()
                self.state = 1548 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1545
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1544
                            self.match(s_cypherParser.SP)


                        self.state = 1547
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1550 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,283,self._ctx)

                pass


            self.state = 1562
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.state = 1555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1554
                    self.match(s_cypherParser.SP)


                self.state = 1557
                self.match(s_cypherParser.ELSE)
                self.state = 1559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1558
                    self.match(s_cypherParser.SP)


                self.state = 1561
                self.oC_Expression()


            self.state = 1565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1564
                self.match(s_cypherParser.SP)


            self.state = 1567
            self.match(s_cypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternative" ):
                listener.enterOC_CaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternative" ):
                listener.exitOC_CaseAlternative(self)




    def oC_CaseAlternative(self):

        localctx = s_cypherParser.OC_CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_CaseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1569
            self.match(s_cypherParser.WHEN)
            self.state = 1571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1570
                self.match(s_cypherParser.SP)


            self.state = 1573
            self.oC_Expression()
            self.state = 1575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1574
                self.match(s_cypherParser.SP)


            self.state = 1577
            self.match(s_cypherParser.THEN)
            self.state = 1579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1578
                self.match(s_cypherParser.SP)


            self.state = 1581
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = s_cypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1583
            self.match(s_cypherParser.T__9)
            self.state = 1585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1584
                self.match(s_cypherParser.SP)


            self.state = 1587
            self.oC_FilterExpression()
            self.state = 1596
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.state = 1589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1588
                    self.match(s_cypherParser.SP)


                self.state = 1591
                self.match(s_cypherParser.T__14)
                self.state = 1593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1592
                    self.match(s_cypherParser.SP)


                self.state = 1595
                self.oC_Expression()


            self.state = 1599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1598
                self.match(s_cypherParser.SP)


            self.state = 1601
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = s_cypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1603
            self.match(s_cypherParser.T__9)
            self.state = 1605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1604
                self.match(s_cypherParser.SP)


            self.state = 1615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 1607
                self.oC_Variable()
                self.state = 1609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1608
                    self.match(s_cypherParser.SP)


                self.state = 1611
                self.match(s_cypherParser.T__1)
                self.state = 1613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1612
                    self.match(s_cypherParser.SP)




            self.state = 1617
            self.oC_RelationshipsPattern()
            self.state = 1619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1618
                self.match(s_cypherParser.SP)


            self.state = 1625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 1621
                self.oC_Where()
                self.state = 1623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1622
                    self.match(s_cypherParser.SP)




            self.state = 1627
            self.match(s_cypherParser.T__14)
            self.state = 1629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1628
                self.match(s_cypherParser.SP)


            self.state = 1631
            self.oC_Expression()
            self.state = 1633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1632
                self.match(s_cypherParser.SP)


            self.state = 1635
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Quantifier" ):
                listener.enterOC_Quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Quantifier" ):
                listener.exitOC_Quantifier(self)




    def oC_Quantifier(self):

        localctx = s_cypherParser.OC_QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_Quantifier)
        self._la = 0 # Token type
        try:
            self.state = 1693
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1637
                self.match(s_cypherParser.ALL)
                self.state = 1639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1638
                    self.match(s_cypherParser.SP)


                self.state = 1641
                self.match(s_cypherParser.T__4)
                self.state = 1643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1642
                    self.match(s_cypherParser.SP)


                self.state = 1645
                self.oC_FilterExpression()
                self.state = 1647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1646
                    self.match(s_cypherParser.SP)


                self.state = 1649
                self.match(s_cypherParser.T__5)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1651
                self.match(s_cypherParser.ANY)
                self.state = 1653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1652
                    self.match(s_cypherParser.SP)


                self.state = 1655
                self.match(s_cypherParser.T__4)
                self.state = 1657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1656
                    self.match(s_cypherParser.SP)


                self.state = 1659
                self.oC_FilterExpression()
                self.state = 1661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1660
                    self.match(s_cypherParser.SP)


                self.state = 1663
                self.match(s_cypherParser.T__5)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1665
                self.match(s_cypherParser.NONE)
                self.state = 1667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1666
                    self.match(s_cypherParser.SP)


                self.state = 1669
                self.match(s_cypherParser.T__4)
                self.state = 1671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1670
                    self.match(s_cypherParser.SP)


                self.state = 1673
                self.oC_FilterExpression()
                self.state = 1675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1674
                    self.match(s_cypherParser.SP)


                self.state = 1677
                self.match(s_cypherParser.T__5)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1679
                self.match(s_cypherParser.SINGLE)
                self.state = 1681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1680
                    self.match(s_cypherParser.SP)


                self.state = 1683
                self.match(s_cypherParser.T__4)
                self.state = 1685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1684
                    self.match(s_cypherParser.SP)


                self.state = 1687
                self.oC_FilterExpression()
                self.state = 1689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1688
                    self.match(s_cypherParser.SP)


                self.state = 1691
                self.match(s_cypherParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IdInCollContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = s_cypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1695
            self.oC_IdInColl()
            self.state = 1700
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,320,self._ctx)
            if la_ == 1:
                self.state = 1697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1696
                    self.match(s_cypherParser.SP)


                self.state = 1699
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPredicate" ):
                listener.enterOC_PatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPredicate" ):
                listener.exitOC_PatternPredicate(self)




    def oC_PatternPredicate(self):

        localctx = s_cypherParser.OC_PatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_PatternPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1702
            self.oC_RelationshipsPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = s_cypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1704
            self.match(s_cypherParser.T__4)
            self.state = 1706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1705
                self.match(s_cypherParser.SP)


            self.state = 1708
            self.oC_Expression()
            self.state = 1710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1709
                self.match(s_cypherParser.SP)


            self.state = 1712
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = s_cypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1714
            self.oC_Variable()
            self.state = 1715
            self.match(s_cypherParser.SP)
            self.state = 1716
            self.match(s_cypherParser.IN)
            self.state = 1717
            self.match(s_cypherParser.SP)
            self.state = 1718
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = s_cypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1720
            self.oC_FunctionName()
            self.state = 1722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1721
                self.match(s_cypherParser.SP)


            self.state = 1724
            self.match(s_cypherParser.T__4)
            self.state = 1726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1725
                self.match(s_cypherParser.SP)


            self.state = 1732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 1728
                self.match(s_cypherParser.DISTINCT)
                self.state = 1730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1729
                    self.match(s_cypherParser.SP)




            self.state = 1751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1734
                self.oC_Expression()
                self.state = 1736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1735
                    self.match(s_cypherParser.SP)


                self.state = 1748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1738
                    self.match(s_cypherParser.T__3)
                    self.state = 1740
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1739
                        self.match(s_cypherParser.SP)


                    self.state = 1742
                    self.oC_Expression()
                    self.state = 1744
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1743
                        self.match(s_cypherParser.SP)


                    self.state = 1750
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1753
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = s_cypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_FunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1755
            self.oC_Namespace()
            self.state = 1756
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExistentialSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExistentialSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExistentialSubquery" ):
                listener.enterOC_ExistentialSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExistentialSubquery" ):
                listener.exitOC_ExistentialSubquery(self)




    def oC_ExistentialSubquery(self):

        localctx = s_cypherParser.OC_ExistentialSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_ExistentialSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1758
            self.match(s_cypherParser.EXISTS)
            self.state = 1760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1759
                self.match(s_cypherParser.SP)


            self.state = 1762
            self.match(s_cypherParser.T__6)
            self.state = 1764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1763
                self.match(s_cypherParser.SP)


            self.state = 1774
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 71, 72]:
                self.state = 1766
                self.oC_RegularQuery()
                pass
            elif token in [5, 48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 1767
                self.oC_Pattern()
                self.state = 1772
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
                if la_ == 1:
                    self.state = 1769
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1768
                        self.match(s_cypherParser.SP)


                    self.state = 1771
                    self.oC_Where()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1776
                self.match(s_cypherParser.SP)


            self.state = 1779
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1781
            self.oC_ProcedureName()
            self.state = 1783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1782
                self.match(s_cypherParser.SP)


            self.state = 1785
            self.match(s_cypherParser.T__4)
            self.state = 1787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1786
                self.match(s_cypherParser.SP)


            self.state = 1806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1789
                self.oC_Expression()
                self.state = 1791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1790
                    self.match(s_cypherParser.SP)


                self.state = 1803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1793
                    self.match(s_cypherParser.T__3)
                    self.state = 1795
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1794
                        self.match(s_cypherParser.SP)


                    self.state = 1797
                    self.oC_Expression()
                    self.state = 1799
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1798
                        self.match(s_cypherParser.SP)


                    self.state = 1805
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1808
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1810
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = s_cypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1812
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = s_cypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1814
            self.oC_Namespace()
            self.state = 1815
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = s_cypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1822
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,345,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1817
                    self.oC_SymbolicName()
                    self.state = 1818
                    self.match(s_cypherParser.T__0) 
                self.state = 1824
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,345,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = s_cypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1825
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_ListLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListLiteralContext,0)


        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = s_cypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_oC_Literal)
        try:
            self.state = 1833
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1827
                self.oC_BooleanLiteral()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1828
                self.match(s_cypherParser.NULL)
                pass
            elif token in [105, 106, 107, 115, 116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1829
                self.oC_NumberLiteral()
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1830
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1831
                self.oC_ListLiteral()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1832
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = s_cypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1835
            _la = self._input.LA(1)
            if not(_la==103 or _la==104):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = s_cypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_oC_NumberLiteral)
        try:
            self.state = 1839
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115, 116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1837
                self.oC_DoubleLiteral()
                pass
            elif token in [105, 106, 107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1838
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(s_cypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(s_cypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = s_cypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1841
            _la = self._input.LA(1)
            if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(s_cypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(s_cypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = s_cypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1843
            _la = self._input.LA(1)
            if not(_la==115 or _la==116):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = s_cypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1845
            self.match(s_cypherParser.T__9)
            self.state = 1847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1846
                self.match(s_cypherParser.SP)


            self.state = 1866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1849
                self.oC_Expression()
                self.state = 1851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1850
                    self.match(s_cypherParser.SP)


                self.state = 1863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1853
                    self.match(s_cypherParser.T__3)
                    self.state = 1855
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1854
                        self.match(s_cypherParser.SP)


                    self.state = 1857
                    self.oC_Expression()
                    self.state = 1859
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1858
                        self.match(s_cypherParser.SP)


                    self.state = 1865
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1868
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyKeyName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyKeyNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,i)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = s_cypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1870
            self.match(s_cypherParser.T__6)
            self.state = 1872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1871
                self.match(s_cypherParser.SP)


            self.state = 1907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 1874
                self.oC_PropertyKeyName()
                self.state = 1876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1875
                    self.match(s_cypherParser.SP)


                self.state = 1878
                self.match(s_cypherParser.T__7)
                self.state = 1880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1879
                    self.match(s_cypherParser.SP)


                self.state = 1882
                self.oC_Expression()
                self.state = 1884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1883
                    self.match(s_cypherParser.SP)


                self.state = 1904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1886
                    self.match(s_cypherParser.T__3)
                    self.state = 1888
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1887
                        self.match(s_cypherParser.SP)


                    self.state = 1890
                    self.oC_PropertyKeyName()
                    self.state = 1892
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1891
                        self.match(s_cypherParser.SP)


                    self.state = 1894
                    self.match(s_cypherParser.T__7)
                    self.state = 1896
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1895
                        self.match(s_cypherParser.SP)


                    self.state = 1898
                    self.oC_Expression()
                    self.state = 1900
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1899
                        self.match(s_cypherParser.SP)


                    self.state = 1906
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1909
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = s_cypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1911
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = s_cypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1913
            self.match(s_cypherParser.T__25)
            self.state = 1916
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 1914
                self.oC_SymbolicName()
                pass
            elif token in [106]:
                self.state = 1915
                self.match(s_cypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = s_cypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_oC_SchemaName)
        try:
            self.state = 1920
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1918
                self.oC_SymbolicName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1919
                self.oC_ReservedWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = s_cypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1922
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2013396992) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = s_cypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1924
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32212516864) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = s_cypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1926
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70334388633600) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





