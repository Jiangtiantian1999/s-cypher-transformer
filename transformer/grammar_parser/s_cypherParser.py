# Generated from s_cypher.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,138,2176,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,1,0,1,0,1,0,3,0,302,8,0,1,1,4,1,305,8,1,11,1,12,1,306,
        1,1,1,1,1,2,1,2,3,2,313,8,2,1,2,1,2,3,2,317,8,2,1,2,1,2,3,2,321,
        8,2,1,2,1,2,3,2,325,8,2,3,2,327,8,2,1,2,3,2,330,8,2,1,2,3,2,333,
        8,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,341,8,3,1,4,1,4,3,4,345,8,4,1,4,
        1,4,3,4,349,8,4,1,4,3,4,352,8,4,1,5,1,5,3,5,356,8,5,1,5,1,5,1,5,
        5,5,361,8,5,10,5,12,5,364,9,5,1,5,3,5,367,8,5,1,5,3,5,370,8,5,1,
        6,1,6,3,6,374,8,6,1,6,1,6,3,6,378,8,6,1,6,1,6,3,6,382,8,6,1,6,5,
        6,385,8,6,10,6,12,6,388,9,6,1,6,3,6,391,8,6,1,6,3,6,394,8,6,1,7,
        1,7,3,7,398,8,7,1,7,1,7,3,7,402,8,7,1,7,1,7,3,7,406,8,7,1,7,5,7,
        409,8,7,10,7,12,7,412,9,7,1,7,3,7,415,8,7,1,7,3,7,418,8,7,1,8,1,
        8,3,8,422,8,8,1,8,3,8,425,8,8,1,8,3,8,428,8,8,1,8,1,8,3,8,432,8,
        8,1,8,1,8,1,8,1,8,3,8,438,8,8,1,8,1,8,3,8,442,8,8,1,8,1,8,1,8,1,
        8,3,8,448,8,8,1,8,1,8,3,8,452,8,8,1,8,1,8,1,8,1,8,3,8,458,8,8,1,
        8,1,8,1,8,1,8,3,8,464,8,8,1,8,1,8,1,8,1,8,3,8,470,8,8,1,8,3,8,473,
        8,8,1,8,3,8,476,8,8,1,8,1,8,3,8,480,8,8,1,8,1,8,1,8,1,8,3,8,486,
        8,8,1,8,3,8,489,8,8,1,8,3,8,492,8,8,1,8,1,8,3,8,496,8,8,1,8,1,8,
        3,8,500,8,8,1,8,1,8,3,8,504,8,8,1,9,1,9,3,9,508,8,9,1,9,1,9,1,10,
        1,10,3,10,514,8,10,1,10,3,10,517,8,10,1,11,1,11,3,11,521,8,11,1,
        11,1,11,1,12,1,12,3,12,527,8,12,1,12,1,12,3,12,531,8,12,1,12,3,12,
        534,8,12,1,12,3,12,537,8,12,1,13,1,13,3,13,541,8,13,1,13,1,13,3,
        13,545,8,13,1,13,1,13,3,13,549,8,13,1,13,1,13,3,13,553,8,13,1,13,
        5,13,556,8,13,10,13,12,13,559,9,13,1,13,3,13,562,8,13,1,13,1,13,
        3,13,566,8,13,3,13,568,8,13,1,14,1,14,1,14,3,14,573,8,14,1,14,1,
        14,3,14,577,8,14,3,14,579,8,14,1,14,1,14,3,14,583,8,14,1,14,1,14,
        3,14,587,8,14,3,14,589,8,14,3,14,591,8,14,1,15,1,15,1,15,1,15,3,
        15,597,8,15,1,16,1,16,3,16,601,8,16,1,16,1,16,1,17,1,17,3,17,607,
        8,17,1,17,1,17,1,18,1,18,3,18,613,8,18,1,19,1,19,1,19,1,19,3,19,
        619,8,19,1,19,1,19,1,19,3,19,624,8,19,1,20,1,20,1,20,1,20,3,20,630,
        8,20,1,20,3,20,633,8,20,1,20,1,20,1,20,1,20,3,20,639,8,20,3,20,641,
        8,20,1,21,1,21,3,21,645,8,21,1,21,1,21,3,21,649,8,21,1,21,1,21,1,
        21,3,21,654,8,21,1,21,5,21,657,8,21,10,21,12,21,660,9,21,3,21,662,
        8,21,1,21,1,21,1,22,1,22,3,22,668,8,22,1,23,1,23,3,23,672,8,23,1,
        23,1,23,3,23,676,8,23,1,23,5,23,679,8,23,10,23,12,23,682,9,23,1,
        23,3,23,685,8,23,1,23,3,23,688,8,23,1,24,1,24,1,24,1,24,1,24,3,24,
        695,8,24,1,25,1,25,3,25,699,8,25,5,25,701,8,25,10,25,12,25,704,9,
        25,1,25,1,25,3,25,708,8,25,5,25,710,8,25,10,25,12,25,713,9,25,1,
        25,1,25,3,25,717,8,25,1,26,1,26,1,26,3,26,722,8,26,1,26,3,26,725,
        8,26,1,27,1,27,3,27,729,8,27,1,27,1,27,3,27,733,8,27,1,27,1,27,1,
        27,3,27,738,8,27,1,27,3,27,741,8,27,3,27,743,8,27,1,27,3,27,746,
        8,27,1,27,1,27,1,28,1,28,3,28,752,8,28,1,28,3,28,755,8,28,1,29,1,
        29,3,29,759,8,29,1,29,1,29,1,30,1,30,3,30,765,8,30,1,30,1,30,1,31,
        1,31,3,31,771,8,31,1,31,1,31,3,31,775,8,31,1,31,1,31,1,31,1,31,3,
        31,781,8,31,1,31,1,31,3,31,785,8,31,1,31,1,31,1,31,3,31,790,8,31,
        1,32,1,32,3,32,794,8,32,1,32,1,32,3,32,798,8,32,1,32,1,32,3,32,802,
        8,32,1,32,1,32,1,33,1,33,3,33,808,8,33,1,33,1,33,3,33,812,8,33,1,
        33,1,33,1,34,1,34,3,34,818,8,34,1,34,1,34,3,34,822,8,34,3,34,824,
        8,34,1,34,1,34,3,34,828,8,34,3,34,830,8,34,1,34,1,34,3,34,834,8,
        34,3,34,836,8,34,1,34,1,34,3,34,840,8,34,3,34,842,8,34,1,34,1,34,
        1,35,1,35,3,35,848,8,35,1,36,1,36,3,36,852,8,36,1,36,1,36,3,36,856,
        8,36,1,36,1,36,3,36,860,8,36,1,36,1,36,3,36,864,8,36,1,36,1,36,3,
        36,868,8,36,1,36,1,36,3,36,872,8,36,1,36,1,36,3,36,876,8,36,1,36,
        1,36,5,36,880,8,36,10,36,12,36,883,9,36,3,36,885,8,36,1,36,3,36,
        888,8,36,1,36,1,36,1,37,1,37,3,37,894,8,37,1,37,3,37,897,8,37,1,
        38,1,38,3,38,901,8,38,1,38,3,38,904,8,38,1,39,1,39,3,39,908,8,39,
        1,39,1,39,3,39,912,8,39,3,39,914,8,39,1,39,1,39,3,39,918,8,39,3,
        39,920,8,39,1,39,3,39,923,8,39,1,39,1,39,3,39,927,8,39,3,39,929,
        8,39,1,39,1,39,3,39,933,8,39,3,39,935,8,39,1,39,1,39,1,40,1,40,3,
        40,941,8,40,1,40,1,40,3,40,945,8,40,1,40,1,40,5,40,949,8,40,10,40,
        12,40,952,9,40,1,41,1,41,1,41,1,41,1,41,3,41,959,8,41,1,42,1,42,
        3,42,963,8,42,1,42,1,42,3,42,967,8,42,1,42,1,42,5,42,971,8,42,10,
        42,12,42,974,9,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,
        47,3,47,986,8,47,1,47,1,47,3,47,990,8,47,1,47,1,47,5,47,994,8,47,
        10,47,12,47,997,9,47,1,48,1,48,3,48,1001,8,48,1,48,1,48,3,48,1005,
        8,48,1,48,1,48,5,48,1009,8,48,10,48,12,48,1012,9,48,1,49,1,49,3,
        49,1016,8,49,1,49,1,49,5,49,1020,8,49,10,49,12,49,1023,9,49,1,50,
        3,50,1026,8,50,1,50,1,50,3,50,1030,8,50,1,50,1,50,3,50,1034,8,50,
        1,50,1,50,1,51,3,51,1039,8,51,1,51,1,51,3,51,1043,8,51,1,51,3,51,
        1046,8,51,1,51,3,51,1049,8,51,1,51,1,51,3,51,1053,8,51,1,51,3,51,
        1056,8,51,1,51,3,51,1059,8,51,1,51,1,51,1,52,1,52,1,53,1,53,1,54,
        1,54,3,54,1069,8,54,1,54,5,54,1072,8,54,10,54,12,54,1075,9,54,1,
        54,3,54,1078,8,54,1,54,1,54,3,54,1082,8,54,3,54,1084,8,54,1,55,1,
        55,3,55,1088,8,55,1,55,5,55,1091,8,55,10,55,12,55,1094,9,55,1,55,
        1,55,3,55,1098,8,55,1,55,1,55,3,55,1102,8,55,3,55,1104,8,55,3,55,
        1106,8,55,1,55,3,55,1109,8,55,1,55,1,55,1,56,3,56,1114,8,56,1,56,
        1,56,3,56,1118,8,56,1,56,1,56,1,57,1,57,3,57,1124,8,57,1,57,5,57,
        1127,8,57,10,57,12,57,1130,9,57,1,58,1,58,3,58,1134,8,58,1,58,1,
        58,1,59,1,59,1,59,1,59,1,59,1,60,1,60,3,60,1145,8,60,1,60,1,60,1,
        61,1,61,3,61,1151,8,61,1,61,1,61,1,62,1,62,3,62,1157,8,62,1,62,1,
        62,3,62,1161,8,62,1,62,1,62,3,62,1165,8,62,1,62,3,62,1168,8,62,1,
        62,1,62,3,62,1172,8,62,1,62,3,62,1175,8,62,1,62,1,62,1,63,1,63,3,
        63,1181,8,63,1,64,1,64,3,64,1185,8,64,1,64,1,64,3,64,1189,8,64,1,
        64,1,64,3,64,1193,8,64,3,64,1195,8,64,1,64,1,64,3,64,1199,8,64,1,
        64,1,64,3,64,1203,8,64,1,64,1,64,3,64,1207,8,64,5,64,1209,8,64,10,
        64,12,64,1212,9,64,3,64,1214,8,64,1,64,1,64,1,65,1,65,1,66,1,66,
        3,66,1222,8,66,1,66,1,66,3,66,1226,8,66,1,66,1,66,3,66,1230,8,66,
        1,66,1,66,3,66,1234,8,66,5,66,1236,8,66,10,66,12,66,1239,9,66,3,
        66,1241,8,66,1,66,1,66,1,67,1,67,1,68,1,68,3,68,1249,8,68,1,68,1,
        68,1,68,3,68,1254,8,68,1,68,5,68,1257,8,68,10,68,12,68,1260,9,68,
        3,68,1262,8,68,1,68,1,68,1,69,1,69,3,69,1268,8,69,1,69,1,69,3,69,
        1272,8,69,1,69,1,69,3,69,1276,8,69,1,70,1,70,1,71,1,71,1,72,3,72,
        1283,8,72,1,72,1,72,3,72,1287,8,72,1,72,3,72,1290,8,72,1,72,3,72,
        1293,8,72,1,72,1,72,1,73,1,73,1,74,1,74,3,74,1301,8,74,1,74,5,74,
        1304,8,74,10,74,12,74,1307,9,74,1,75,1,75,1,75,1,75,3,75,1313,8,
        75,1,75,1,75,1,75,3,75,1318,8,75,1,75,3,75,1321,8,75,1,76,1,76,3,
        76,1325,8,76,1,77,1,77,3,77,1329,8,77,5,77,1331,8,77,10,77,12,77,
        1334,9,77,1,77,1,77,1,77,3,77,1339,8,77,5,77,1341,8,77,10,77,12,
        77,1344,9,77,1,77,1,77,3,77,1348,8,77,1,77,5,77,1351,8,77,10,77,
        12,77,1354,9,77,1,77,3,77,1357,8,77,1,77,3,77,1360,8,77,3,77,1362,
        8,77,1,78,1,78,1,78,3,78,1367,8,78,1,79,1,79,3,79,1371,8,79,1,79,
        1,79,1,79,1,79,1,79,1,79,1,80,1,80,3,80,1381,8,80,1,80,1,80,1,80,
        5,80,1386,8,80,10,80,12,80,1389,9,80,1,81,1,81,1,81,1,81,1,81,1,
        81,1,81,1,81,1,81,1,81,3,81,1401,8,81,1,82,1,82,3,82,1405,8,82,1,
        82,1,82,1,83,1,83,3,83,1411,8,83,1,83,1,83,3,83,1415,8,83,1,83,1,
        83,3,83,1419,8,83,1,83,5,83,1422,8,83,10,83,12,83,1425,9,83,1,84,
        1,84,3,84,1429,8,84,1,84,1,84,3,84,1433,8,84,1,84,1,84,3,84,1437,
        8,84,1,84,1,84,3,84,1441,8,84,1,84,5,84,1444,8,84,10,84,12,84,1447,
        9,84,1,85,1,85,1,85,1,85,3,85,1453,8,85,1,85,1,85,3,85,1457,8,85,
        1,85,5,85,1460,8,85,10,85,12,85,1463,9,85,1,86,1,86,3,86,1467,8,
        86,1,86,1,86,3,86,1471,8,86,1,86,5,86,1474,8,86,10,86,12,86,1477,
        9,86,1,86,3,86,1480,8,86,1,86,3,86,1483,8,86,1,87,1,87,1,87,1,87,
        1,87,3,87,1490,8,87,1,87,1,87,1,88,1,88,1,88,3,88,1497,8,88,1,88,
        3,88,1500,8,88,1,89,1,89,1,89,1,90,3,90,1506,8,90,1,90,3,90,1509,
        8,90,1,90,1,90,1,90,1,90,3,90,1515,8,90,1,90,1,90,3,90,1519,8,90,
        1,90,1,90,3,90,1523,8,90,1,91,1,91,3,91,1527,8,91,1,91,1,91,3,91,
        1531,8,91,1,91,5,91,1534,8,91,10,91,12,91,1537,9,91,1,91,1,91,3,
        91,1541,8,91,1,91,1,91,3,91,1545,8,91,1,91,5,91,1548,8,91,10,91,
        12,91,1551,9,91,3,91,1553,8,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,
        3,92,1562,8,92,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,1571,8,93,
        1,93,5,93,1574,8,93,10,93,12,93,1577,9,93,1,94,1,94,1,94,1,94,1,
        95,1,95,1,95,1,95,1,96,1,96,3,96,1589,8,96,1,96,3,96,1592,8,96,1,
        97,1,97,1,97,1,97,1,98,1,98,3,98,1600,8,98,1,98,1,98,3,98,1604,8,
        98,1,98,5,98,1607,8,98,10,98,12,98,1610,9,98,1,99,1,99,1,100,1,100,
        3,100,1616,8,100,1,100,5,100,1619,8,100,10,100,12,100,1622,9,100,
        1,100,1,100,1,100,1,100,3,100,1628,8,100,1,101,1,101,3,101,1632,
        8,101,1,101,4,101,1635,8,101,11,101,12,101,1636,1,102,1,102,3,102,
        1641,8,102,1,102,1,102,1,103,1,103,3,103,1647,8,103,1,103,1,103,
        3,103,1651,8,103,1,103,3,103,1654,8,103,1,103,3,103,1657,8,103,1,
        103,1,103,3,103,1661,8,103,1,103,1,103,1,103,1,103,3,103,1667,8,
        103,1,103,1,103,3,103,1671,8,103,1,103,3,103,1674,8,103,1,103,3,
        103,1677,8,103,1,103,1,103,1,103,1,103,3,103,1683,8,103,1,103,3,
        103,1686,8,103,1,103,3,103,1689,8,103,1,103,1,103,3,103,1693,8,103,
        1,103,1,103,1,103,1,103,3,103,1699,8,103,1,103,3,103,1702,8,103,
        1,103,3,103,1705,8,103,1,103,1,103,3,103,1709,8,103,1,104,1,104,
        3,104,1713,8,104,1,105,1,105,3,105,1717,8,105,1,105,1,105,3,105,
        1721,8,105,1,105,1,105,3,105,1725,8,105,1,105,3,105,1728,8,105,1,
        105,5,105,1731,8,105,10,105,12,105,1734,9,105,1,106,1,106,3,106,
        1738,8,106,1,106,5,106,1741,8,106,10,106,12,106,1744,9,106,1,107,
        1,107,3,107,1748,8,107,1,107,1,107,1,108,1,108,3,108,1754,8,108,
        1,108,1,108,3,108,1758,8,108,3,108,1760,8,108,1,108,1,108,3,108,
        1764,8,108,1,108,1,108,3,108,1768,8,108,3,108,1770,8,108,3,108,1772,
        8,108,1,109,1,109,1,110,1,110,1,111,1,111,3,111,1780,8,111,1,111,
        4,111,1783,8,111,11,111,12,111,1784,1,112,1,112,1,113,1,113,1,113,
        1,113,1,113,5,113,1794,8,113,10,113,12,113,1797,9,113,1,114,1,114,
        1,114,1,114,1,114,5,114,1804,8,114,10,114,12,114,1807,9,114,1,115,
        1,115,1,115,1,115,1,115,5,115,1814,8,115,10,115,12,115,1817,9,115,
        1,116,1,116,3,116,1821,8,116,5,116,1823,8,116,10,116,12,116,1826,
        9,116,1,116,1,116,1,117,1,117,3,117,1832,8,117,1,117,1,117,1,117,
        3,117,1837,8,117,1,117,1,117,1,117,3,117,1842,8,117,1,117,1,117,
        1,117,3,117,1847,8,117,1,117,1,117,1,117,3,117,1852,8,117,1,117,
        1,117,1,117,3,117,1857,8,117,1,117,3,117,1860,8,117,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,3,118,1872,8,118,
        1,118,3,118,1875,8,118,1,118,1,118,1,119,1,119,1,119,3,119,1882,
        8,119,1,119,1,119,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,
        1,120,1,120,3,120,1896,8,120,1,121,1,121,1,121,3,121,1901,8,121,
        1,121,3,121,1904,8,121,1,122,1,122,3,122,1908,8,122,1,122,1,122,
        1,123,1,123,1,123,1,123,1,123,3,123,1917,8,123,1,123,1,123,3,123,
        1921,8,123,1,123,1,123,3,123,1925,8,123,1,123,1,123,1,123,1,123,
        1,123,1,123,1,123,1,123,1,123,3,123,1936,8,123,1,124,1,124,3,124,
        1940,8,124,1,124,4,124,1943,8,124,11,124,12,124,1944,1,124,1,124,
        3,124,1949,8,124,1,124,1,124,3,124,1953,8,124,1,124,4,124,1956,8,
        124,11,124,12,124,1957,3,124,1960,8,124,1,124,3,124,1963,8,124,1,
        124,1,124,3,124,1967,8,124,1,124,3,124,1970,8,124,1,124,3,124,1973,
        8,124,1,124,1,124,1,125,1,125,3,125,1979,8,125,1,125,1,125,3,125,
        1983,8,125,1,125,1,125,3,125,1987,8,125,1,125,1,125,1,126,1,126,
        3,126,1993,8,126,1,126,1,126,3,126,1997,8,126,1,126,1,126,3,126,
        2001,8,126,1,126,3,126,2004,8,126,1,126,3,126,2007,8,126,1,126,1,
        126,1,127,1,127,3,127,2013,8,127,1,127,1,127,3,127,2017,8,127,1,
        127,1,127,3,127,2021,8,127,3,127,2023,8,127,1,127,1,127,3,127,2027,
        8,127,1,127,1,127,3,127,2031,8,127,3,127,2033,8,127,1,127,1,127,
        3,127,2037,8,127,1,127,1,127,3,127,2041,8,127,1,127,1,127,1,128,
        1,128,3,128,2047,8,128,1,128,1,128,3,128,2051,8,128,1,128,1,128,
        3,128,2055,8,128,1,128,1,128,1,128,1,128,3,128,2061,8,128,1,128,
        1,128,3,128,2065,8,128,1,128,1,128,3,128,2069,8,128,1,128,1,128,
        1,128,1,128,3,128,2075,8,128,1,128,1,128,3,128,2079,8,128,1,128,
        1,128,3,128,2083,8,128,1,128,1,128,1,128,1,128,3,128,2089,8,128,
        1,128,1,128,3,128,2093,8,128,1,128,1,128,3,128,2097,8,128,1,128,
        1,128,3,128,2101,8,128,1,129,1,129,1,130,1,130,3,130,2107,8,130,
        1,130,1,130,3,130,2111,8,130,1,130,1,130,1,131,1,131,1,131,1,131,
        1,131,1,131,1,132,1,132,1,132,1,133,1,133,1,134,1,134,1,135,1,135,
        1,135,1,136,1,136,1,136,5,136,2134,8,136,10,136,12,136,2137,9,136,
        1,137,1,137,1,138,1,138,1,138,1,138,1,138,1,138,3,138,2147,8,138,
        1,139,1,139,1,140,1,140,3,140,2153,8,140,1,141,1,141,1,142,1,142,
        1,143,1,143,1,144,1,144,1,144,3,144,2164,8,144,1,145,1,145,3,145,
        2168,8,145,1,146,1,146,1,147,1,147,1,148,1,148,1,148,0,0,149,0,2,
        4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
        50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
        94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
        128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
        160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
        192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,
        224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,
        256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,
        288,290,292,294,296,0,13,2,0,5,5,13,14,1,0,16,17,2,0,2,2,18,22,1,
        0,55,56,8,0,49,49,52,52,94,94,98,98,100,103,109,109,130,132,135,
        135,5,0,49,69,72,93,95,99,103,105,120,129,1,0,79,82,1,0,104,105,
        1,0,106,108,1,0,116,117,2,0,19,19,27,30,2,0,21,21,31,34,2,0,17,17,
        35,45,2469,0,301,1,0,0,0,2,304,1,0,0,0,4,312,1,0,0,0,6,340,1,0,0,
        0,8,342,1,0,0,0,10,353,1,0,0,0,12,371,1,0,0,0,14,395,1,0,0,0,16,
        503,1,0,0,0,18,505,1,0,0,0,20,511,1,0,0,0,22,518,1,0,0,0,24,536,
        1,0,0,0,26,540,1,0,0,0,28,590,1,0,0,0,30,596,1,0,0,0,32,598,1,0,
        0,0,34,604,1,0,0,0,36,612,1,0,0,0,38,614,1,0,0,0,40,625,1,0,0,0,
        42,642,1,0,0,0,44,665,1,0,0,0,46,669,1,0,0,0,48,689,1,0,0,0,50,702,
        1,0,0,0,52,718,1,0,0,0,54,726,1,0,0,0,56,749,1,0,0,0,58,756,1,0,
        0,0,60,762,1,0,0,0,62,789,1,0,0,0,64,791,1,0,0,0,66,805,1,0,0,0,
        68,815,1,0,0,0,70,847,1,0,0,0,72,849,1,0,0,0,74,891,1,0,0,0,76,898,
        1,0,0,0,78,905,1,0,0,0,80,938,1,0,0,0,82,953,1,0,0,0,84,960,1,0,
        0,0,86,975,1,0,0,0,88,977,1,0,0,0,90,979,1,0,0,0,92,981,1,0,0,0,
        94,983,1,0,0,0,96,998,1,0,0,0,98,1015,1,0,0,0,100,1025,1,0,0,0,102,
        1038,1,0,0,0,104,1062,1,0,0,0,106,1064,1,0,0,0,108,1066,1,0,0,0,
        110,1085,1,0,0,0,112,1113,1,0,0,0,114,1121,1,0,0,0,116,1131,1,0,
        0,0,118,1137,1,0,0,0,120,1142,1,0,0,0,122,1148,1,0,0,0,124,1154,
        1,0,0,0,126,1180,1,0,0,0,128,1182,1,0,0,0,130,1217,1,0,0,0,132,1219,
        1,0,0,0,134,1244,1,0,0,0,136,1246,1,0,0,0,138,1265,1,0,0,0,140,1277,
        1,0,0,0,142,1279,1,0,0,0,144,1282,1,0,0,0,146,1296,1,0,0,0,148,1298,
        1,0,0,0,150,1320,1,0,0,0,152,1324,1,0,0,0,154,1361,1,0,0,0,156,1366,
        1,0,0,0,158,1368,1,0,0,0,160,1378,1,0,0,0,162,1400,1,0,0,0,164,1402,
        1,0,0,0,166,1408,1,0,0,0,168,1428,1,0,0,0,170,1448,1,0,0,0,172,1464,
        1,0,0,0,174,1489,1,0,0,0,176,1493,1,0,0,0,178,1501,1,0,0,0,180,1508,
        1,0,0,0,182,1552,1,0,0,0,184,1561,1,0,0,0,186,1563,1,0,0,0,188,1578,
        1,0,0,0,190,1582,1,0,0,0,192,1586,1,0,0,0,194,1593,1,0,0,0,196,1597,
        1,0,0,0,198,1611,1,0,0,0,200,1627,1,0,0,0,202,1629,1,0,0,0,204,1638,
        1,0,0,0,206,1708,1,0,0,0,208,1712,1,0,0,0,210,1714,1,0,0,0,212,1735,
        1,0,0,0,214,1745,1,0,0,0,216,1751,1,0,0,0,218,1773,1,0,0,0,220,1775,
        1,0,0,0,222,1777,1,0,0,0,224,1786,1,0,0,0,226,1788,1,0,0,0,228,1798,
        1,0,0,0,230,1808,1,0,0,0,232,1824,1,0,0,0,234,1859,1,0,0,0,236,1871,
        1,0,0,0,238,1878,1,0,0,0,240,1895,1,0,0,0,242,1903,1,0,0,0,244,1905,
        1,0,0,0,246,1935,1,0,0,0,248,1959,1,0,0,0,250,1976,1,0,0,0,252,1990,
        1,0,0,0,254,2010,1,0,0,0,256,2100,1,0,0,0,258,2102,1,0,0,0,260,2104,
        1,0,0,0,262,2114,1,0,0,0,264,2120,1,0,0,0,266,2123,1,0,0,0,268,2125,
        1,0,0,0,270,2127,1,0,0,0,272,2135,1,0,0,0,274,2138,1,0,0,0,276,2146,
        1,0,0,0,278,2148,1,0,0,0,280,2152,1,0,0,0,282,2154,1,0,0,0,284,2156,
        1,0,0,0,286,2158,1,0,0,0,288,2160,1,0,0,0,290,2167,1,0,0,0,292,2169,
        1,0,0,0,294,2171,1,0,0,0,296,2173,1,0,0,0,298,302,3,148,74,0,299,
        302,3,40,20,0,300,302,3,36,18,0,301,298,1,0,0,0,301,299,1,0,0,0,
        301,300,1,0,0,0,302,1,1,0,0,0,303,305,3,50,25,0,304,303,1,0,0,0,
        305,306,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,308,1,0,0,0,
        308,309,3,154,77,0,309,3,1,0,0,0,310,311,5,59,0,0,311,313,5,136,
        0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,314,1,0,0,0,314,316,5,60,
        0,0,315,317,5,136,0,0,316,315,1,0,0,0,316,317,1,0,0,0,317,318,1,
        0,0,0,318,326,3,196,98,0,319,321,5,136,0,0,320,319,1,0,0,0,320,321,
        1,0,0,0,321,324,1,0,0,0,322,325,3,32,16,0,323,325,3,34,17,0,324,
        322,1,0,0,0,324,323,1,0,0,0,325,327,1,0,0,0,326,320,1,0,0,0,326,
        327,1,0,0,0,327,332,1,0,0,0,328,330,5,136,0,0,329,328,1,0,0,0,329,
        330,1,0,0,0,330,331,1,0,0,0,331,333,3,194,97,0,332,329,1,0,0,0,332,
        333,1,0,0,0,333,5,1,0,0,0,334,341,3,8,4,0,335,341,3,10,5,0,336,341,
        3,12,6,0,337,341,3,170,85,0,338,341,3,14,7,0,339,341,3,26,13,0,340,
        334,1,0,0,0,340,335,1,0,0,0,340,336,1,0,0,0,340,337,1,0,0,0,340,
        338,1,0,0,0,340,339,1,0,0,0,341,7,1,0,0,0,342,344,5,65,0,0,343,345,
        5,136,0,0,344,343,1,0,0,0,344,345,1,0,0,0,345,346,1,0,0,0,346,351,
        3,196,98,0,347,349,5,136,0,0,348,347,1,0,0,0,348,349,1,0,0,0,349,
        350,1,0,0,0,350,352,3,32,16,0,351,348,1,0,0,0,351,352,1,0,0,0,352,
        9,1,0,0,0,353,355,5,63,0,0,354,356,5,136,0,0,355,354,1,0,0,0,355,
        356,1,0,0,0,356,357,1,0,0,0,357,362,3,62,31,0,358,359,5,136,0,0,
        359,361,3,162,81,0,360,358,1,0,0,0,361,364,1,0,0,0,362,360,1,0,0,
        0,362,363,1,0,0,0,363,369,1,0,0,0,364,362,1,0,0,0,365,367,5,136,
        0,0,366,365,1,0,0,0,366,367,1,0,0,0,367,368,1,0,0,0,368,370,3,32,
        16,0,369,366,1,0,0,0,369,370,1,0,0,0,370,11,1,0,0,0,371,373,5,66,
        0,0,372,374,5,136,0,0,373,372,1,0,0,0,373,374,1,0,0,0,374,375,1,
        0,0,0,375,386,3,16,8,0,376,378,5,136,0,0,377,376,1,0,0,0,377,378,
        1,0,0,0,378,379,1,0,0,0,379,381,5,1,0,0,380,382,5,136,0,0,381,380,
        1,0,0,0,381,382,1,0,0,0,382,383,1,0,0,0,383,385,3,16,8,0,384,377,
        1,0,0,0,385,388,1,0,0,0,386,384,1,0,0,0,386,387,1,0,0,0,387,393,
        1,0,0,0,388,386,1,0,0,0,389,391,5,136,0,0,390,389,1,0,0,0,390,391,
        1,0,0,0,391,392,1,0,0,0,392,394,3,32,16,0,393,390,1,0,0,0,393,394,
        1,0,0,0,394,13,1,0,0,0,395,397,5,54,0,0,396,398,5,136,0,0,397,396,
        1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,410,3,24,12,0,400,402,
        5,136,0,0,401,400,1,0,0,0,401,402,1,0,0,0,402,403,1,0,0,0,403,405,
        5,1,0,0,404,406,5,136,0,0,405,404,1,0,0,0,405,406,1,0,0,0,406,407,
        1,0,0,0,407,409,3,24,12,0,408,401,1,0,0,0,409,412,1,0,0,0,410,408,
        1,0,0,0,410,411,1,0,0,0,411,417,1,0,0,0,412,410,1,0,0,0,413,415,
        5,136,0,0,414,413,1,0,0,0,414,415,1,0,0,0,415,416,1,0,0,0,416,418,
        3,32,16,0,417,414,1,0,0,0,417,418,1,0,0,0,418,15,1,0,0,0,419,424,
        3,222,111,0,420,422,5,136,0,0,421,420,1,0,0,0,421,422,1,0,0,0,422,
        423,1,0,0,0,423,425,3,120,60,0,424,421,1,0,0,0,424,425,1,0,0,0,425,
        427,1,0,0,0,426,428,5,136,0,0,427,426,1,0,0,0,427,428,1,0,0,0,428,
        429,1,0,0,0,429,431,5,2,0,0,430,432,5,136,0,0,431,430,1,0,0,0,431,
        432,1,0,0,0,432,433,1,0,0,0,433,434,3,224,112,0,434,504,1,0,0,0,
        435,437,3,274,137,0,436,438,5,136,0,0,437,436,1,0,0,0,437,438,1,
        0,0,0,438,439,1,0,0,0,439,441,5,2,0,0,440,442,5,136,0,0,441,440,
        1,0,0,0,441,442,1,0,0,0,442,443,1,0,0,0,443,444,3,224,112,0,444,
        504,1,0,0,0,445,447,3,274,137,0,446,448,5,136,0,0,447,446,1,0,0,
        0,447,448,1,0,0,0,448,449,1,0,0,0,449,451,5,3,0,0,450,452,5,136,
        0,0,451,450,1,0,0,0,451,452,1,0,0,0,452,453,1,0,0,0,453,454,3,224,
        112,0,454,504,1,0,0,0,455,457,3,274,137,0,456,458,5,136,0,0,457,
        456,1,0,0,0,457,458,1,0,0,0,458,459,1,0,0,0,459,460,3,212,106,0,
        460,504,1,0,0,0,461,463,3,274,137,0,462,464,5,136,0,0,463,462,1,
        0,0,0,463,464,1,0,0,0,464,465,1,0,0,0,465,466,3,120,60,0,466,504,
        1,0,0,0,467,472,3,274,137,0,468,470,5,136,0,0,469,468,1,0,0,0,469,
        470,1,0,0,0,470,471,1,0,0,0,471,473,3,120,60,0,472,469,1,0,0,0,472,
        473,1,0,0,0,473,475,1,0,0,0,474,476,5,136,0,0,475,474,1,0,0,0,475,
        476,1,0,0,0,476,477,1,0,0,0,477,479,5,4,0,0,478,480,5,136,0,0,479,
        478,1,0,0,0,479,480,1,0,0,0,480,481,1,0,0,0,481,482,3,18,9,0,482,
        504,1,0,0,0,483,488,3,274,137,0,484,486,5,136,0,0,485,484,1,0,0,
        0,485,486,1,0,0,0,486,487,1,0,0,0,487,489,3,120,60,0,488,485,1,0,
        0,0,488,489,1,0,0,0,489,491,1,0,0,0,490,492,5,136,0,0,491,490,1,
        0,0,0,491,492,1,0,0,0,492,493,1,0,0,0,493,495,5,4,0,0,494,496,5,
        136,0,0,495,494,1,0,0,0,495,496,1,0,0,0,496,497,1,0,0,0,497,499,
        3,20,10,0,498,500,5,136,0,0,499,498,1,0,0,0,499,500,1,0,0,0,500,
        501,1,0,0,0,501,502,3,22,11,0,502,504,1,0,0,0,503,419,1,0,0,0,503,
        435,1,0,0,0,503,445,1,0,0,0,503,455,1,0,0,0,503,461,1,0,0,0,503,
        467,1,0,0,0,503,483,1,0,0,0,504,17,1,0,0,0,505,507,3,286,143,0,506,
        508,5,136,0,0,507,506,1,0,0,0,507,508,1,0,0,0,508,509,1,0,0,0,509,
        510,3,120,60,0,510,19,1,0,0,0,511,516,3,286,143,0,512,514,5,136,
        0,0,513,512,1,0,0,0,513,514,1,0,0,0,514,515,1,0,0,0,515,517,3,120,
        60,0,516,513,1,0,0,0,516,517,1,0,0,0,517,21,1,0,0,0,518,520,5,48,
        0,0,519,521,5,136,0,0,520,519,1,0,0,0,520,521,1,0,0,0,521,522,1,
        0,0,0,522,523,3,120,60,0,523,23,1,0,0,0,524,526,3,224,112,0,525,
        527,5,136,0,0,526,525,1,0,0,0,526,527,1,0,0,0,527,528,1,0,0,0,528,
        533,3,112,56,0,529,531,5,136,0,0,530,529,1,0,0,0,530,531,1,0,0,0,
        531,532,1,0,0,0,532,534,5,48,0,0,533,530,1,0,0,0,533,534,1,0,0,0,
        534,537,1,0,0,0,535,537,3,224,112,0,536,524,1,0,0,0,536,535,1,0,
        0,0,537,25,1,0,0,0,538,539,5,67,0,0,539,541,5,136,0,0,540,538,1,
        0,0,0,540,541,1,0,0,0,541,542,1,0,0,0,542,544,5,68,0,0,543,545,5,
        136,0,0,544,543,1,0,0,0,544,545,1,0,0,0,545,546,1,0,0,0,546,557,
        3,28,14,0,547,549,5,136,0,0,548,547,1,0,0,0,548,549,1,0,0,0,549,
        550,1,0,0,0,550,552,5,1,0,0,551,553,5,136,0,0,552,551,1,0,0,0,552,
        553,1,0,0,0,553,554,1,0,0,0,554,556,3,28,14,0,555,548,1,0,0,0,556,
        559,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,0,558,567,1,0,0,0,559,
        557,1,0,0,0,560,562,5,136,0,0,561,560,1,0,0,0,561,562,1,0,0,0,562,
        565,1,0,0,0,563,566,3,32,16,0,564,566,3,34,17,0,565,563,1,0,0,0,
        565,564,1,0,0,0,566,568,1,0,0,0,567,561,1,0,0,0,567,568,1,0,0,0,
        568,27,1,0,0,0,569,570,3,224,112,0,570,578,3,112,56,0,571,573,5,
        136,0,0,572,571,1,0,0,0,572,573,1,0,0,0,573,576,1,0,0,0,574,577,
        5,48,0,0,575,577,3,120,60,0,576,574,1,0,0,0,576,575,1,0,0,0,577,
        579,1,0,0,0,578,572,1,0,0,0,578,579,1,0,0,0,579,591,1,0,0,0,580,
        588,3,224,112,0,581,583,5,136,0,0,582,581,1,0,0,0,582,583,1,0,0,
        0,583,586,1,0,0,0,584,587,5,48,0,0,585,587,3,120,60,0,586,584,1,
        0,0,0,586,585,1,0,0,0,587,589,1,0,0,0,588,582,1,0,0,0,588,589,1,
        0,0,0,589,591,1,0,0,0,590,569,1,0,0,0,590,580,1,0,0,0,591,29,1,0,
        0,0,592,593,3,274,137,0,593,594,3,212,106,0,594,597,1,0,0,0,595,
        597,3,222,111,0,596,592,1,0,0,0,596,595,1,0,0,0,597,31,1,0,0,0,598,
        600,5,50,0,0,599,601,5,136,0,0,600,599,1,0,0,0,600,601,1,0,0,0,601,
        602,1,0,0,0,602,603,3,224,112,0,603,33,1,0,0,0,604,606,5,52,0,0,
        605,607,5,136,0,0,606,605,1,0,0,0,606,607,1,0,0,0,607,608,1,0,0,
        0,608,609,3,224,112,0,609,35,1,0,0,0,610,613,3,58,29,0,611,613,3,
        60,30,0,612,610,1,0,0,0,612,611,1,0,0,0,613,37,1,0,0,0,614,615,5,
        70,0,0,615,616,5,136,0,0,616,623,3,42,21,0,617,619,5,136,0,0,618,
        617,1,0,0,0,618,619,1,0,0,0,619,620,1,0,0,0,620,621,5,71,0,0,621,
        622,5,136,0,0,622,624,3,46,23,0,623,618,1,0,0,0,623,624,1,0,0,0,
        624,39,1,0,0,0,625,626,5,70,0,0,626,629,5,136,0,0,627,630,3,42,21,
        0,628,630,3,266,133,0,629,627,1,0,0,0,629,628,1,0,0,0,630,640,1,
        0,0,0,631,633,5,136,0,0,632,631,1,0,0,0,632,633,1,0,0,0,633,634,
        1,0,0,0,634,635,5,71,0,0,635,638,5,136,0,0,636,639,5,5,0,0,637,639,
        3,46,23,0,638,636,1,0,0,0,638,637,1,0,0,0,639,641,1,0,0,0,640,632,
        1,0,0,0,640,641,1,0,0,0,641,41,1,0,0,0,642,644,3,270,135,0,643,645,
        5,136,0,0,644,643,1,0,0,0,644,645,1,0,0,0,645,646,1,0,0,0,646,648,
        5,6,0,0,647,649,5,136,0,0,648,647,1,0,0,0,648,649,1,0,0,0,649,661,
        1,0,0,0,650,658,3,44,22,0,651,653,5,1,0,0,652,654,5,136,0,0,653,
        652,1,0,0,0,653,654,1,0,0,0,654,655,1,0,0,0,655,657,3,44,22,0,656,
        651,1,0,0,0,657,660,1,0,0,0,658,656,1,0,0,0,658,659,1,0,0,0,659,
        662,1,0,0,0,660,658,1,0,0,0,661,650,1,0,0,0,661,662,1,0,0,0,662,
        663,1,0,0,0,663,664,5,7,0,0,664,43,1,0,0,0,665,667,3,224,112,0,666,
        668,5,136,0,0,667,666,1,0,0,0,667,668,1,0,0,0,668,45,1,0,0,0,669,
        680,3,48,24,0,670,672,5,136,0,0,671,670,1,0,0,0,671,672,1,0,0,0,
        672,673,1,0,0,0,673,675,5,1,0,0,674,676,5,136,0,0,675,674,1,0,0,
        0,675,676,1,0,0,0,676,677,1,0,0,0,677,679,3,48,24,0,678,671,1,0,
        0,0,679,682,1,0,0,0,680,678,1,0,0,0,680,681,1,0,0,0,681,687,1,0,
        0,0,682,680,1,0,0,0,683,685,5,136,0,0,684,683,1,0,0,0,684,685,1,
        0,0,0,685,686,1,0,0,0,686,688,3,194,97,0,687,684,1,0,0,0,687,688,
        1,0,0,0,688,47,1,0,0,0,689,694,3,268,134,0,690,691,5,136,0,0,691,
        692,5,62,0,0,692,693,5,136,0,0,693,695,3,274,137,0,694,690,1,0,0,
        0,694,695,1,0,0,0,695,49,1,0,0,0,696,698,3,156,78,0,697,699,5,136,
        0,0,698,697,1,0,0,0,698,699,1,0,0,0,699,701,1,0,0,0,700,696,1,0,
        0,0,701,704,1,0,0,0,702,700,1,0,0,0,702,703,1,0,0,0,703,711,1,0,
        0,0,704,702,1,0,0,0,705,707,3,6,3,0,706,708,5,136,0,0,707,706,1,
        0,0,0,707,708,1,0,0,0,708,710,1,0,0,0,709,705,1,0,0,0,710,713,1,
        0,0,0,711,709,1,0,0,0,711,712,1,0,0,0,712,714,1,0,0,0,713,711,1,
        0,0,0,714,716,3,52,26,0,715,717,5,136,0,0,716,715,1,0,0,0,716,717,
        1,0,0,0,717,51,1,0,0,0,718,719,5,72,0,0,719,724,3,180,90,0,720,722,
        5,136,0,0,721,720,1,0,0,0,721,722,1,0,0,0,722,723,1,0,0,0,723,725,
        3,194,97,0,724,721,1,0,0,0,724,725,1,0,0,0,725,53,1,0,0,0,726,728,
        5,103,0,0,727,729,5,136,0,0,728,727,1,0,0,0,728,729,1,0,0,0,729,
        730,1,0,0,0,730,732,5,8,0,0,731,733,5,136,0,0,732,731,1,0,0,0,732,
        733,1,0,0,0,733,742,1,0,0,0,734,743,3,148,74,0,735,740,3,196,98,
        0,736,738,5,136,0,0,737,736,1,0,0,0,737,738,1,0,0,0,738,739,1,0,
        0,0,739,741,3,194,97,0,740,737,1,0,0,0,740,741,1,0,0,0,741,743,1,
        0,0,0,742,734,1,0,0,0,742,735,1,0,0,0,743,745,1,0,0,0,744,746,5,
        136,0,0,745,744,1,0,0,0,745,746,1,0,0,0,746,747,1,0,0,0,747,748,
        5,9,0,0,748,55,1,0,0,0,749,754,3,262,131,0,750,752,5,136,0,0,751,
        750,1,0,0,0,751,752,1,0,0,0,752,753,1,0,0,0,753,755,3,194,97,0,754,
        751,1,0,0,0,754,755,1,0,0,0,755,57,1,0,0,0,756,758,5,51,0,0,757,
        759,5,136,0,0,758,757,1,0,0,0,758,759,1,0,0,0,759,760,1,0,0,0,760,
        761,3,224,112,0,761,59,1,0,0,0,762,764,5,53,0,0,763,765,5,136,0,
        0,764,763,1,0,0,0,764,765,1,0,0,0,765,766,1,0,0,0,766,767,3,224,
        112,0,767,61,1,0,0,0,768,770,3,274,137,0,769,771,5,136,0,0,770,769,
        1,0,0,0,770,771,1,0,0,0,771,772,1,0,0,0,772,774,5,2,0,0,773,775,
        5,136,0,0,774,773,1,0,0,0,774,775,1,0,0,0,775,776,1,0,0,0,776,777,
        3,64,32,0,777,790,1,0,0,0,778,780,3,274,137,0,779,781,5,136,0,0,
        780,779,1,0,0,0,780,781,1,0,0,0,781,782,1,0,0,0,782,784,5,2,0,0,
        783,785,5,136,0,0,784,783,1,0,0,0,784,785,1,0,0,0,785,786,1,0,0,
        0,786,787,3,198,99,0,787,790,1,0,0,0,788,790,3,198,99,0,789,768,
        1,0,0,0,789,778,1,0,0,0,789,788,1,0,0,0,790,63,1,0,0,0,791,793,3,
        264,132,0,792,794,5,136,0,0,793,792,1,0,0,0,793,794,1,0,0,0,794,
        795,1,0,0,0,795,797,5,6,0,0,796,798,5,136,0,0,797,796,1,0,0,0,797,
        798,1,0,0,0,798,799,1,0,0,0,799,801,3,66,33,0,800,802,5,136,0,0,
        801,800,1,0,0,0,801,802,1,0,0,0,802,803,1,0,0,0,803,804,5,7,0,0,
        804,65,1,0,0,0,805,807,3,68,34,0,806,808,5,136,0,0,807,806,1,0,0,
        0,807,808,1,0,0,0,808,809,1,0,0,0,809,811,3,206,103,0,810,812,5,
        136,0,0,811,810,1,0,0,0,811,812,1,0,0,0,812,813,1,0,0,0,813,814,
        3,68,34,0,814,67,1,0,0,0,815,817,5,6,0,0,816,818,5,136,0,0,817,816,
        1,0,0,0,817,818,1,0,0,0,818,823,1,0,0,0,819,821,3,274,137,0,820,
        822,5,136,0,0,821,820,1,0,0,0,821,822,1,0,0,0,822,824,1,0,0,0,823,
        819,1,0,0,0,823,824,1,0,0,0,824,829,1,0,0,0,825,827,3,212,106,0,
        826,828,5,136,0,0,827,826,1,0,0,0,827,828,1,0,0,0,828,830,1,0,0,
        0,829,825,1,0,0,0,829,830,1,0,0,0,830,835,1,0,0,0,831,833,3,120,
        60,0,832,834,5,136,0,0,833,832,1,0,0,0,833,834,1,0,0,0,834,836,1,
        0,0,0,835,831,1,0,0,0,835,836,1,0,0,0,836,841,1,0,0,0,837,839,3,
        70,35,0,838,840,5,136,0,0,839,838,1,0,0,0,839,840,1,0,0,0,840,842,
        1,0,0,0,841,837,1,0,0,0,841,842,1,0,0,0,842,843,1,0,0,0,843,844,
        5,7,0,0,844,69,1,0,0,0,845,848,3,72,36,0,846,848,3,288,144,0,847,
        845,1,0,0,0,847,846,1,0,0,0,848,71,1,0,0,0,849,884,5,8,0,0,850,852,
        5,136,0,0,851,850,1,0,0,0,851,852,1,0,0,0,852,853,1,0,0,0,853,855,
        3,74,37,0,854,856,5,136,0,0,855,854,1,0,0,0,855,856,1,0,0,0,856,
        857,1,0,0,0,857,859,5,10,0,0,858,860,5,136,0,0,859,858,1,0,0,0,859,
        860,1,0,0,0,860,861,1,0,0,0,861,881,3,76,38,0,862,864,5,136,0,0,
        863,862,1,0,0,0,863,864,1,0,0,0,864,865,1,0,0,0,865,867,5,1,0,0,
        866,868,5,136,0,0,867,866,1,0,0,0,867,868,1,0,0,0,868,869,1,0,0,
        0,869,871,3,74,37,0,870,872,5,136,0,0,871,870,1,0,0,0,871,872,1,
        0,0,0,872,873,1,0,0,0,873,875,5,10,0,0,874,876,5,136,0,0,875,874,
        1,0,0,0,875,876,1,0,0,0,876,877,1,0,0,0,877,878,3,76,38,0,878,880,
        1,0,0,0,879,863,1,0,0,0,880,883,1,0,0,0,881,879,1,0,0,0,881,882,
        1,0,0,0,882,885,1,0,0,0,883,881,1,0,0,0,884,851,1,0,0,0,884,885,
        1,0,0,0,885,887,1,0,0,0,886,888,5,136,0,0,887,886,1,0,0,0,887,888,
        1,0,0,0,888,889,1,0,0,0,889,890,5,9,0,0,890,73,1,0,0,0,891,896,3,
        286,143,0,892,894,5,136,0,0,893,892,1,0,0,0,893,894,1,0,0,0,894,
        895,1,0,0,0,895,897,3,120,60,0,896,893,1,0,0,0,896,897,1,0,0,0,897,
        75,1,0,0,0,898,903,3,224,112,0,899,901,5,136,0,0,900,899,1,0,0,0,
        900,901,1,0,0,0,901,902,1,0,0,0,902,904,3,120,60,0,903,900,1,0,0,
        0,903,904,1,0,0,0,904,77,1,0,0,0,905,907,5,11,0,0,906,908,5,136,
        0,0,907,906,1,0,0,0,907,908,1,0,0,0,908,913,1,0,0,0,909,911,3,274,
        137,0,910,912,5,136,0,0,911,910,1,0,0,0,911,912,1,0,0,0,912,914,
        1,0,0,0,913,909,1,0,0,0,913,914,1,0,0,0,914,919,1,0,0,0,915,917,
        3,210,105,0,916,918,5,136,0,0,917,916,1,0,0,0,917,918,1,0,0,0,918,
        920,1,0,0,0,919,915,1,0,0,0,919,920,1,0,0,0,920,922,1,0,0,0,921,
        923,3,216,108,0,922,921,1,0,0,0,922,923,1,0,0,0,923,928,1,0,0,0,
        924,926,3,120,60,0,925,927,5,136,0,0,926,925,1,0,0,0,926,927,1,0,
        0,0,927,929,1,0,0,0,928,924,1,0,0,0,928,929,1,0,0,0,929,934,1,0,
        0,0,930,932,3,208,104,0,931,933,5,136,0,0,932,931,1,0,0,0,932,933,
        1,0,0,0,933,935,1,0,0,0,934,930,1,0,0,0,934,935,1,0,0,0,935,936,
        1,0,0,0,936,937,5,12,0,0,937,79,1,0,0,0,938,950,3,82,41,0,939,941,
        5,136,0,0,940,939,1,0,0,0,940,941,1,0,0,0,941,942,1,0,0,0,942,944,
        3,92,46,0,943,945,5,136,0,0,944,943,1,0,0,0,944,945,1,0,0,0,945,
        946,1,0,0,0,946,947,3,82,41,0,947,949,1,0,0,0,948,940,1,0,0,0,949,
        952,1,0,0,0,950,948,1,0,0,0,950,951,1,0,0,0,951,81,1,0,0,0,952,950,
        1,0,0,0,953,958,3,84,42,0,954,959,3,118,59,0,955,959,3,236,118,0,
        956,959,3,238,119,0,957,959,3,240,120,0,958,954,1,0,0,0,958,955,
        1,0,0,0,958,956,1,0,0,0,958,957,1,0,0,0,958,959,1,0,0,0,959,83,1,
        0,0,0,960,972,3,94,47,0,961,963,5,136,0,0,962,961,1,0,0,0,962,963,
        1,0,0,0,963,964,1,0,0,0,964,966,3,90,45,0,965,967,5,136,0,0,966,
        965,1,0,0,0,966,967,1,0,0,0,967,968,1,0,0,0,968,969,3,94,47,0,969,
        971,1,0,0,0,970,962,1,0,0,0,971,974,1,0,0,0,972,970,1,0,0,0,972,
        973,1,0,0,0,973,85,1,0,0,0,974,972,1,0,0,0,975,976,7,0,0,0,976,87,
        1,0,0,0,977,978,5,15,0,0,978,89,1,0,0,0,979,980,7,1,0,0,980,91,1,
        0,0,0,981,982,7,2,0,0,982,93,1,0,0,0,983,995,3,96,48,0,984,986,5,
        136,0,0,985,984,1,0,0,0,985,986,1,0,0,0,986,987,1,0,0,0,987,989,
        3,86,43,0,988,990,5,136,0,0,989,988,1,0,0,0,989,990,1,0,0,0,990,
        991,1,0,0,0,991,992,3,96,48,0,992,994,1,0,0,0,993,985,1,0,0,0,994,
        997,1,0,0,0,995,993,1,0,0,0,995,996,1,0,0,0,996,95,1,0,0,0,997,995,
        1,0,0,0,998,1010,3,242,121,0,999,1001,5,136,0,0,1000,999,1,0,0,0,
        1000,1001,1,0,0,0,1001,1002,1,0,0,0,1002,1004,3,88,44,0,1003,1005,
        5,136,0,0,1004,1003,1,0,0,0,1004,1005,1,0,0,0,1005,1006,1,0,0,0,
        1006,1007,3,242,121,0,1007,1009,1,0,0,0,1008,1000,1,0,0,0,1009,1012,
        1,0,0,0,1010,1008,1,0,0,0,1010,1011,1,0,0,0,1011,97,1,0,0,0,1012,
        1010,1,0,0,0,1013,1016,3,108,54,0,1014,1016,3,110,55,0,1015,1013,
        1,0,0,0,1015,1014,1,0,0,0,1016,1021,1,0,0,0,1017,1020,3,100,50,0,
        1018,1020,3,102,51,0,1019,1017,1,0,0,0,1019,1018,1,0,0,0,1020,1023,
        1,0,0,0,1021,1019,1,0,0,0,1021,1022,1,0,0,0,1022,99,1,0,0,0,1023,
        1021,1,0,0,0,1024,1026,5,136,0,0,1025,1024,1,0,0,0,1025,1026,1,0,
        0,0,1026,1027,1,0,0,0,1027,1029,5,11,0,0,1028,1030,5,136,0,0,1029,
        1028,1,0,0,0,1029,1030,1,0,0,0,1030,1031,1,0,0,0,1031,1033,3,104,
        52,0,1032,1034,5,136,0,0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,1034,
        1035,1,0,0,0,1035,1036,5,12,0,0,1036,101,1,0,0,0,1037,1039,5,136,
        0,0,1038,1037,1,0,0,0,1038,1039,1,0,0,0,1039,1040,1,0,0,0,1040,1042,
        5,11,0,0,1041,1043,5,136,0,0,1042,1041,1,0,0,0,1042,1043,1,0,0,0,
        1043,1045,1,0,0,0,1044,1046,3,104,52,0,1045,1044,1,0,0,0,1045,1046,
        1,0,0,0,1046,1048,1,0,0,0,1047,1049,5,136,0,0,1048,1047,1,0,0,0,
        1048,1049,1,0,0,0,1049,1050,1,0,0,0,1050,1052,5,23,0,0,1051,1053,
        5,136,0,0,1052,1051,1,0,0,0,1052,1053,1,0,0,0,1053,1055,1,0,0,0,
        1054,1056,3,106,53,0,1055,1054,1,0,0,0,1055,1056,1,0,0,0,1056,1058,
        1,0,0,0,1057,1059,5,136,0,0,1058,1057,1,0,0,0,1058,1059,1,0,0,0,
        1059,1060,1,0,0,0,1060,1061,5,12,0,0,1061,103,1,0,0,0,1062,1063,
        3,224,112,0,1063,105,1,0,0,0,1064,1065,3,224,112,0,1065,107,1,0,
        0,0,1066,1073,3,246,123,0,1067,1069,5,136,0,0,1068,1067,1,0,0,0,
        1068,1069,1,0,0,0,1069,1070,1,0,0,0,1070,1072,3,244,122,0,1071,1068,
        1,0,0,0,1072,1075,1,0,0,0,1073,1071,1,0,0,0,1073,1074,1,0,0,0,1074,
        1083,1,0,0,0,1075,1073,1,0,0,0,1076,1078,5,136,0,0,1077,1076,1,0,
        0,0,1077,1078,1,0,0,0,1078,1081,1,0,0,0,1079,1082,3,212,106,0,1080,
        1082,3,122,61,0,1081,1079,1,0,0,0,1081,1080,1,0,0,0,1082,1084,1,
        0,0,0,1083,1077,1,0,0,0,1083,1084,1,0,0,0,1084,109,1,0,0,0,1085,
        1092,3,246,123,0,1086,1088,5,136,0,0,1087,1086,1,0,0,0,1087,1088,
        1,0,0,0,1088,1089,1,0,0,0,1089,1091,3,244,122,0,1090,1087,1,0,0,
        0,1091,1094,1,0,0,0,1092,1090,1,0,0,0,1092,1093,1,0,0,0,1093,1105,
        1,0,0,0,1094,1092,1,0,0,0,1095,1103,3,112,56,0,1096,1098,5,136,0,
        0,1097,1096,1,0,0,0,1097,1098,1,0,0,0,1098,1101,1,0,0,0,1099,1102,
        5,48,0,0,1100,1102,3,122,61,0,1101,1099,1,0,0,0,1101,1100,1,0,0,
        0,1102,1104,1,0,0,0,1103,1097,1,0,0,0,1103,1104,1,0,0,0,1104,1106,
        1,0,0,0,1105,1095,1,0,0,0,1105,1106,1,0,0,0,1106,1108,1,0,0,0,1107,
        1109,5,136,0,0,1108,1107,1,0,0,0,1108,1109,1,0,0,0,1109,1110,1,0,
        0,0,1110,1111,3,114,57,0,1111,111,1,0,0,0,1112,1114,5,136,0,0,1113,
        1112,1,0,0,0,1113,1114,1,0,0,0,1114,1115,1,0,0,0,1115,1117,5,4,0,
        0,1116,1118,5,136,0,0,1117,1116,1,0,0,0,1117,1118,1,0,0,0,1118,1119,
        1,0,0,0,1119,1120,3,286,143,0,1120,113,1,0,0,0,1121,1128,5,46,0,
        0,1122,1124,5,136,0,0,1123,1122,1,0,0,0,1123,1124,1,0,0,0,1124,1125,
        1,0,0,0,1125,1127,3,116,58,0,1126,1123,1,0,0,0,1127,1130,1,0,0,0,
        1128,1126,1,0,0,0,1128,1129,1,0,0,0,1129,115,1,0,0,0,1130,1128,1,
        0,0,0,1131,1133,5,4,0,0,1132,1134,5,136,0,0,1133,1132,1,0,0,0,1133,
        1134,1,0,0,0,1134,1135,1,0,0,0,1135,1136,3,286,143,0,1136,117,1,
        0,0,0,1137,1138,5,136,0,0,1138,1139,7,3,0,0,1139,1140,5,136,0,0,
        1140,1141,3,84,42,0,1141,119,1,0,0,0,1142,1144,5,46,0,0,1143,1145,
        5,136,0,0,1144,1143,1,0,0,0,1144,1145,1,0,0,0,1145,1146,1,0,0,0,
        1146,1147,3,124,62,0,1147,121,1,0,0,0,1148,1150,5,47,0,0,1149,1151,
        5,136,0,0,1150,1149,1,0,0,0,1150,1151,1,0,0,0,1151,1152,1,0,0,0,
        1152,1153,3,124,62,0,1153,123,1,0,0,0,1154,1164,5,6,0,0,1155,1157,
        5,136,0,0,1156,1155,1,0,0,0,1156,1157,1,0,0,0,1157,1158,1,0,0,0,
        1158,1160,3,126,63,0,1159,1161,5,136,0,0,1160,1159,1,0,0,0,1160,
        1161,1,0,0,0,1161,1162,1,0,0,0,1162,1163,5,1,0,0,1163,1165,1,0,0,
        0,1164,1156,1,0,0,0,1164,1165,1,0,0,0,1165,1167,1,0,0,0,1166,1168,
        5,136,0,0,1167,1166,1,0,0,0,1167,1168,1,0,0,0,1168,1171,1,0,0,0,
        1169,1172,5,49,0,0,1170,1172,3,126,63,0,1171,1169,1,0,0,0,1171,1170,
        1,0,0,0,1172,1174,1,0,0,0,1173,1175,5,136,0,0,1174,1173,1,0,0,0,
        1174,1175,1,0,0,0,1175,1176,1,0,0,0,1176,1177,5,7,0,0,1177,125,1,
        0,0,0,1178,1181,5,118,0,0,1179,1181,3,136,68,0,1180,1178,1,0,0,0,
        1180,1179,1,0,0,0,1181,127,1,0,0,0,1182,1184,3,264,132,0,1183,1185,
        5,136,0,0,1184,1183,1,0,0,0,1184,1185,1,0,0,0,1185,1186,1,0,0,0,
        1186,1188,5,6,0,0,1187,1189,5,136,0,0,1188,1187,1,0,0,0,1188,1189,
        1,0,0,0,1189,1194,1,0,0,0,1190,1192,5,74,0,0,1191,1193,5,136,0,0,
        1192,1191,1,0,0,0,1192,1193,1,0,0,0,1193,1195,1,0,0,0,1194,1190,
        1,0,0,0,1194,1195,1,0,0,0,1195,1213,1,0,0,0,1196,1198,3,130,65,0,
        1197,1199,5,136,0,0,1198,1197,1,0,0,0,1198,1199,1,0,0,0,1199,1210,
        1,0,0,0,1200,1202,5,1,0,0,1201,1203,5,136,0,0,1202,1201,1,0,0,0,
        1202,1203,1,0,0,0,1203,1204,1,0,0,0,1204,1206,3,130,65,0,1205,1207,
        5,136,0,0,1206,1205,1,0,0,0,1206,1207,1,0,0,0,1207,1209,1,0,0,0,
        1208,1200,1,0,0,0,1209,1212,1,0,0,0,1210,1208,1,0,0,0,1210,1211,
        1,0,0,0,1211,1214,1,0,0,0,1212,1210,1,0,0,0,1213,1196,1,0,0,0,1213,
        1214,1,0,0,0,1214,1215,1,0,0,0,1215,1216,5,7,0,0,1216,129,1,0,0,
        0,1217,1218,3,224,112,0,1218,131,1,0,0,0,1219,1221,5,11,0,0,1220,
        1222,5,136,0,0,1221,1220,1,0,0,0,1221,1222,1,0,0,0,1222,1240,1,0,
        0,0,1223,1225,3,134,67,0,1224,1226,5,136,0,0,1225,1224,1,0,0,0,1225,
        1226,1,0,0,0,1226,1237,1,0,0,0,1227,1229,5,1,0,0,1228,1230,5,136,
        0,0,1229,1228,1,0,0,0,1229,1230,1,0,0,0,1230,1231,1,0,0,0,1231,1233,
        3,134,67,0,1232,1234,5,136,0,0,1233,1232,1,0,0,0,1233,1234,1,0,0,
        0,1234,1236,1,0,0,0,1235,1227,1,0,0,0,1236,1239,1,0,0,0,1237,1235,
        1,0,0,0,1237,1238,1,0,0,0,1238,1241,1,0,0,0,1239,1237,1,0,0,0,1240,
        1223,1,0,0,0,1240,1241,1,0,0,0,1241,1242,1,0,0,0,1242,1243,5,12,
        0,0,1243,133,1,0,0,0,1244,1245,3,224,112,0,1245,135,1,0,0,0,1246,
        1248,5,8,0,0,1247,1249,5,136,0,0,1248,1247,1,0,0,0,1248,1249,1,0,
        0,0,1249,1261,1,0,0,0,1250,1258,3,138,69,0,1251,1253,5,1,0,0,1252,
        1254,5,136,0,0,1253,1252,1,0,0,0,1253,1254,1,0,0,0,1254,1255,1,0,
        0,0,1255,1257,3,138,69,0,1256,1251,1,0,0,0,1257,1260,1,0,0,0,1258,
        1256,1,0,0,0,1258,1259,1,0,0,0,1259,1262,1,0,0,0,1260,1258,1,0,0,
        0,1261,1250,1,0,0,0,1261,1262,1,0,0,0,1262,1263,1,0,0,0,1263,1264,
        5,9,0,0,1264,137,1,0,0,0,1265,1267,3,286,143,0,1266,1268,5,136,0,
        0,1267,1266,1,0,0,0,1267,1268,1,0,0,0,1268,1269,1,0,0,0,1269,1271,
        5,10,0,0,1270,1272,5,136,0,0,1271,1270,1,0,0,0,1271,1272,1,0,0,0,
        1272,1273,1,0,0,0,1273,1275,3,224,112,0,1274,1276,5,136,0,0,1275,
        1274,1,0,0,0,1275,1276,1,0,0,0,1276,139,1,0,0,0,1277,1278,7,4,0,
        0,1278,141,1,0,0,0,1279,1280,7,5,0,0,1280,143,1,0,0,0,1281,1283,
        5,136,0,0,1282,1281,1,0,0,0,1282,1283,1,0,0,0,1283,1284,1,0,0,0,
        1284,1289,3,146,73,0,1285,1287,5,136,0,0,1286,1285,1,0,0,0,1286,
        1287,1,0,0,0,1287,1288,1,0,0,0,1288,1290,5,24,0,0,1289,1286,1,0,
        0,0,1289,1290,1,0,0,0,1290,1292,1,0,0,0,1291,1293,5,136,0,0,1292,
        1291,1,0,0,0,1292,1293,1,0,0,0,1293,1294,1,0,0,0,1294,1295,5,0,0,
        1,1295,145,1,0,0,0,1296,1297,3,0,0,0,1297,147,1,0,0,0,1298,1305,
        3,152,76,0,1299,1301,5,136,0,0,1300,1299,1,0,0,0,1300,1301,1,0,0,
        0,1301,1302,1,0,0,0,1302,1304,3,150,75,0,1303,1300,1,0,0,0,1304,
        1307,1,0,0,0,1305,1303,1,0,0,0,1305,1306,1,0,0,0,1306,149,1,0,0,
        0,1307,1305,1,0,0,0,1308,1309,5,57,0,0,1309,1310,5,136,0,0,1310,
        1312,5,58,0,0,1311,1313,5,136,0,0,1312,1311,1,0,0,0,1312,1313,1,
        0,0,0,1313,1314,1,0,0,0,1314,1321,3,152,76,0,1315,1317,5,57,0,0,
        1316,1318,5,136,0,0,1317,1316,1,0,0,0,1317,1318,1,0,0,0,1318,1319,
        1,0,0,0,1319,1321,3,152,76,0,1320,1308,1,0,0,0,1320,1315,1,0,0,0,
        1321,151,1,0,0,0,1322,1325,3,154,77,0,1323,1325,3,2,1,0,1324,1322,
        1,0,0,0,1324,1323,1,0,0,0,1325,153,1,0,0,0,1326,1328,3,156,78,0,
        1327,1329,5,136,0,0,1328,1327,1,0,0,0,1328,1329,1,0,0,0,1329,1331,
        1,0,0,0,1330,1326,1,0,0,0,1331,1334,1,0,0,0,1332,1330,1,0,0,0,1332,
        1333,1,0,0,0,1333,1335,1,0,0,0,1334,1332,1,0,0,0,1335,1362,3,178,
        89,0,1336,1338,3,156,78,0,1337,1339,5,136,0,0,1338,1337,1,0,0,0,
        1338,1339,1,0,0,0,1339,1341,1,0,0,0,1340,1336,1,0,0,0,1341,1344,
        1,0,0,0,1342,1340,1,0,0,0,1342,1343,1,0,0,0,1343,1345,1,0,0,0,1344,
        1342,1,0,0,0,1345,1352,3,6,3,0,1346,1348,5,136,0,0,1347,1346,1,0,
        0,0,1347,1348,1,0,0,0,1348,1349,1,0,0,0,1349,1351,3,6,3,0,1350,1347,
        1,0,0,0,1351,1354,1,0,0,0,1352,1350,1,0,0,0,1352,1353,1,0,0,0,1353,
        1359,1,0,0,0,1354,1352,1,0,0,0,1355,1357,5,136,0,0,1356,1355,1,0,
        0,0,1356,1357,1,0,0,0,1357,1358,1,0,0,0,1358,1360,3,178,89,0,1359,
        1356,1,0,0,0,1359,1360,1,0,0,0,1360,1362,1,0,0,0,1361,1332,1,0,0,
        0,1361,1342,1,0,0,0,1362,155,1,0,0,0,1363,1367,3,4,2,0,1364,1367,
        3,158,79,0,1365,1367,3,38,19,0,1366,1363,1,0,0,0,1366,1364,1,0,0,
        0,1366,1365,1,0,0,0,1367,157,1,0,0,0,1368,1370,5,61,0,0,1369,1371,
        5,136,0,0,1370,1369,1,0,0,0,1370,1371,1,0,0,0,1371,1372,1,0,0,0,
        1372,1373,3,224,112,0,1373,1374,5,136,0,0,1374,1375,5,62,0,0,1375,
        1376,5,136,0,0,1376,1377,3,274,137,0,1377,159,1,0,0,0,1378,1380,
        5,63,0,0,1379,1381,5,136,0,0,1380,1379,1,0,0,0,1380,1381,1,0,0,0,
        1381,1382,1,0,0,0,1382,1387,3,62,31,0,1383,1384,5,136,0,0,1384,1386,
        3,162,81,0,1385,1383,1,0,0,0,1386,1389,1,0,0,0,1387,1385,1,0,0,0,
        1387,1388,1,0,0,0,1388,161,1,0,0,0,1389,1387,1,0,0,0,1390,1391,5,
        64,0,0,1391,1392,5,136,0,0,1392,1393,5,60,0,0,1393,1394,5,136,0,
        0,1394,1401,3,166,83,0,1395,1396,5,64,0,0,1396,1397,5,136,0,0,1397,
        1398,5,65,0,0,1398,1399,5,136,0,0,1399,1401,3,166,83,0,1400,1390,
        1,0,0,0,1400,1395,1,0,0,0,1401,163,1,0,0,0,1402,1404,5,65,0,0,1403,
        1405,5,136,0,0,1404,1403,1,0,0,0,1404,1405,1,0,0,0,1405,1406,1,0,
        0,0,1406,1407,3,196,98,0,1407,165,1,0,0,0,1408,1410,5,66,0,0,1409,
        1411,5,136,0,0,1410,1409,1,0,0,0,1410,1411,1,0,0,0,1411,1412,1,0,
        0,0,1412,1423,3,16,8,0,1413,1415,5,136,0,0,1414,1413,1,0,0,0,1414,
        1415,1,0,0,0,1415,1416,1,0,0,0,1416,1418,5,1,0,0,1417,1419,5,136,
        0,0,1418,1417,1,0,0,0,1418,1419,1,0,0,0,1419,1420,1,0,0,0,1420,1422,
        3,16,8,0,1421,1414,1,0,0,0,1422,1425,1,0,0,0,1423,1421,1,0,0,0,1423,
        1424,1,0,0,0,1424,167,1,0,0,0,1425,1423,1,0,0,0,1426,1427,5,67,0,
        0,1427,1429,5,136,0,0,1428,1426,1,0,0,0,1428,1429,1,0,0,0,1429,1430,
        1,0,0,0,1430,1432,5,68,0,0,1431,1433,5,136,0,0,1432,1431,1,0,0,0,
        1432,1433,1,0,0,0,1433,1434,1,0,0,0,1434,1445,3,224,112,0,1435,1437,
        5,136,0,0,1436,1435,1,0,0,0,1436,1437,1,0,0,0,1437,1438,1,0,0,0,
        1438,1440,5,1,0,0,1439,1441,5,136,0,0,1440,1439,1,0,0,0,1440,1441,
        1,0,0,0,1441,1442,1,0,0,0,1442,1444,3,224,112,0,1443,1436,1,0,0,
        0,1444,1447,1,0,0,0,1445,1443,1,0,0,0,1445,1446,1,0,0,0,1446,169,
        1,0,0,0,1447,1445,1,0,0,0,1448,1449,5,69,0,0,1449,1450,5,136,0,0,
        1450,1461,3,30,15,0,1451,1453,5,136,0,0,1452,1451,1,0,0,0,1452,1453,
        1,0,0,0,1453,1454,1,0,0,0,1454,1456,5,1,0,0,1455,1457,5,136,0,0,
        1456,1455,1,0,0,0,1456,1457,1,0,0,0,1457,1458,1,0,0,0,1458,1460,
        3,30,15,0,1459,1452,1,0,0,0,1460,1463,1,0,0,0,1461,1459,1,0,0,0,
        1461,1462,1,0,0,0,1462,171,1,0,0,0,1463,1461,1,0,0,0,1464,1475,3,
        174,87,0,1465,1467,5,136,0,0,1466,1465,1,0,0,0,1466,1467,1,0,0,0,
        1467,1468,1,0,0,0,1468,1470,5,1,0,0,1469,1471,5,136,0,0,1470,1469,
        1,0,0,0,1470,1471,1,0,0,0,1471,1472,1,0,0,0,1472,1474,3,174,87,0,
        1473,1466,1,0,0,0,1474,1477,1,0,0,0,1475,1473,1,0,0,0,1475,1476,
        1,0,0,0,1476,1482,1,0,0,0,1477,1475,1,0,0,0,1478,1480,5,136,0,0,
        1479,1478,1,0,0,0,1479,1480,1,0,0,0,1480,1481,1,0,0,0,1481,1483,
        3,194,97,0,1482,1479,1,0,0,0,1482,1483,1,0,0,0,1483,173,1,0,0,0,
        1484,1485,3,268,134,0,1485,1486,5,136,0,0,1486,1487,5,62,0,0,1487,
        1488,5,136,0,0,1488,1490,1,0,0,0,1489,1484,1,0,0,0,1489,1490,1,0,
        0,0,1490,1491,1,0,0,0,1491,1492,3,274,137,0,1492,175,1,0,0,0,1493,
        1494,5,72,0,0,1494,1499,3,180,90,0,1495,1497,5,136,0,0,1496,1495,
        1,0,0,0,1496,1497,1,0,0,0,1497,1498,1,0,0,0,1498,1500,3,194,97,0,
        1499,1496,1,0,0,0,1499,1500,1,0,0,0,1500,177,1,0,0,0,1501,1502,5,
        73,0,0,1502,1503,3,180,90,0,1503,179,1,0,0,0,1504,1506,5,136,0,0,
        1505,1504,1,0,0,0,1505,1506,1,0,0,0,1506,1507,1,0,0,0,1507,1509,
        5,74,0,0,1508,1505,1,0,0,0,1508,1509,1,0,0,0,1509,1510,1,0,0,0,1510,
        1511,5,136,0,0,1511,1514,3,182,91,0,1512,1513,5,136,0,0,1513,1515,
        3,186,93,0,1514,1512,1,0,0,0,1514,1515,1,0,0,0,1515,1518,1,0,0,0,
        1516,1517,5,136,0,0,1517,1519,3,188,94,0,1518,1516,1,0,0,0,1518,
        1519,1,0,0,0,1519,1522,1,0,0,0,1520,1521,5,136,0,0,1521,1523,3,190,
        95,0,1522,1520,1,0,0,0,1522,1523,1,0,0,0,1523,181,1,0,0,0,1524,1535,
        5,5,0,0,1525,1527,5,136,0,0,1526,1525,1,0,0,0,1526,1527,1,0,0,0,
        1527,1528,1,0,0,0,1528,1530,5,1,0,0,1529,1531,5,136,0,0,1530,1529,
        1,0,0,0,1530,1531,1,0,0,0,1531,1532,1,0,0,0,1532,1534,3,184,92,0,
        1533,1526,1,0,0,0,1534,1537,1,0,0,0,1535,1533,1,0,0,0,1535,1536,
        1,0,0,0,1536,1553,1,0,0,0,1537,1535,1,0,0,0,1538,1549,3,184,92,0,
        1539,1541,5,136,0,0,1540,1539,1,0,0,0,1540,1541,1,0,0,0,1541,1542,
        1,0,0,0,1542,1544,5,1,0,0,1543,1545,5,136,0,0,1544,1543,1,0,0,0,
        1544,1545,1,0,0,0,1545,1546,1,0,0,0,1546,1548,3,184,92,0,1547,1540,
        1,0,0,0,1548,1551,1,0,0,0,1549,1547,1,0,0,0,1549,1550,1,0,0,0,1550,
        1553,1,0,0,0,1551,1549,1,0,0,0,1552,1524,1,0,0,0,1552,1538,1,0,0,
        0,1553,183,1,0,0,0,1554,1555,3,224,112,0,1555,1556,5,136,0,0,1556,
        1557,5,62,0,0,1557,1558,5,136,0,0,1558,1559,3,274,137,0,1559,1562,
        1,0,0,0,1560,1562,3,224,112,0,1561,1554,1,0,0,0,1561,1560,1,0,0,
        0,1562,185,1,0,0,0,1563,1564,5,75,0,0,1564,1565,5,136,0,0,1565,1566,
        5,76,0,0,1566,1567,5,136,0,0,1567,1575,3,192,96,0,1568,1570,5,1,
        0,0,1569,1571,5,136,0,0,1570,1569,1,0,0,0,1570,1571,1,0,0,0,1571,
        1572,1,0,0,0,1572,1574,3,192,96,0,1573,1568,1,0,0,0,1574,1577,1,
        0,0,0,1575,1573,1,0,0,0,1575,1576,1,0,0,0,1576,187,1,0,0,0,1577,
        1575,1,0,0,0,1578,1579,5,77,0,0,1579,1580,5,136,0,0,1580,1581,3,
        224,112,0,1581,189,1,0,0,0,1582,1583,5,78,0,0,1583,1584,5,136,0,
        0,1584,1585,3,224,112,0,1585,191,1,0,0,0,1586,1591,3,224,112,0,1587,
        1589,5,136,0,0,1588,1587,1,0,0,0,1588,1589,1,0,0,0,1589,1590,1,0,
        0,0,1590,1592,7,6,0,0,1591,1588,1,0,0,0,1591,1592,1,0,0,0,1592,193,
        1,0,0,0,1593,1594,5,83,0,0,1594,1595,5,136,0,0,1595,1596,3,224,112,
        0,1596,195,1,0,0,0,1597,1608,3,62,31,0,1598,1600,5,136,0,0,1599,
        1598,1,0,0,0,1599,1600,1,0,0,0,1600,1601,1,0,0,0,1601,1603,5,1,0,
        0,1602,1604,5,136,0,0,1603,1602,1,0,0,0,1603,1604,1,0,0,0,1604,1605,
        1,0,0,0,1605,1607,3,62,31,0,1606,1599,1,0,0,0,1607,1610,1,0,0,0,
        1608,1606,1,0,0,0,1608,1609,1,0,0,0,1609,197,1,0,0,0,1610,1608,1,
        0,0,0,1611,1612,3,200,100,0,1612,199,1,0,0,0,1613,1620,3,68,34,0,
        1614,1616,5,136,0,0,1615,1614,1,0,0,0,1615,1616,1,0,0,0,1616,1617,
        1,0,0,0,1617,1619,3,204,102,0,1618,1615,1,0,0,0,1619,1622,1,0,0,
        0,1620,1618,1,0,0,0,1620,1621,1,0,0,0,1621,1628,1,0,0,0,1622,1620,
        1,0,0,0,1623,1624,5,6,0,0,1624,1625,3,200,100,0,1625,1626,5,7,0,
        0,1626,1628,1,0,0,0,1627,1613,1,0,0,0,1627,1623,1,0,0,0,1628,201,
        1,0,0,0,1629,1634,3,68,34,0,1630,1632,5,136,0,0,1631,1630,1,0,0,
        0,1631,1632,1,0,0,0,1632,1633,1,0,0,0,1633,1635,3,204,102,0,1634,
        1631,1,0,0,0,1635,1636,1,0,0,0,1636,1634,1,0,0,0,1636,1637,1,0,0,
        0,1637,203,1,0,0,0,1638,1640,3,206,103,0,1639,1641,5,136,0,0,1640,
        1639,1,0,0,0,1640,1641,1,0,0,0,1641,1642,1,0,0,0,1642,1643,3,68,
        34,0,1643,205,1,0,0,0,1644,1646,3,292,146,0,1645,1647,5,136,0,0,
        1646,1645,1,0,0,0,1646,1647,1,0,0,0,1647,1648,1,0,0,0,1648,1650,
        3,296,148,0,1649,1651,5,136,0,0,1650,1649,1,0,0,0,1650,1651,1,0,
        0,0,1651,1653,1,0,0,0,1652,1654,3,78,39,0,1653,1652,1,0,0,0,1653,
        1654,1,0,0,0,1654,1656,1,0,0,0,1655,1657,5,136,0,0,1656,1655,1,0,
        0,0,1656,1657,1,0,0,0,1657,1658,1,0,0,0,1658,1660,3,296,148,0,1659,
        1661,5,136,0,0,1660,1659,1,0,0,0,1660,1661,1,0,0,0,1661,1662,1,0,
        0,0,1662,1663,3,294,147,0,1663,1709,1,0,0,0,1664,1666,3,292,146,
        0,1665,1667,5,136,0,0,1666,1665,1,0,0,0,1666,1667,1,0,0,0,1667,1668,
        1,0,0,0,1668,1670,3,296,148,0,1669,1671,5,136,0,0,1670,1669,1,0,
        0,0,1670,1671,1,0,0,0,1671,1673,1,0,0,0,1672,1674,3,78,39,0,1673,
        1672,1,0,0,0,1673,1674,1,0,0,0,1674,1676,1,0,0,0,1675,1677,5,136,
        0,0,1676,1675,1,0,0,0,1676,1677,1,0,0,0,1677,1678,1,0,0,0,1678,1679,
        3,296,148,0,1679,1709,1,0,0,0,1680,1682,3,296,148,0,1681,1683,5,
        136,0,0,1682,1681,1,0,0,0,1682,1683,1,0,0,0,1683,1685,1,0,0,0,1684,
        1686,3,78,39,0,1685,1684,1,0,0,0,1685,1686,1,0,0,0,1686,1688,1,0,
        0,0,1687,1689,5,136,0,0,1688,1687,1,0,0,0,1688,1689,1,0,0,0,1689,
        1690,1,0,0,0,1690,1692,3,296,148,0,1691,1693,5,136,0,0,1692,1691,
        1,0,0,0,1692,1693,1,0,0,0,1693,1694,1,0,0,0,1694,1695,3,294,147,
        0,1695,1709,1,0,0,0,1696,1698,3,296,148,0,1697,1699,5,136,0,0,1698,
        1697,1,0,0,0,1698,1699,1,0,0,0,1699,1701,1,0,0,0,1700,1702,3,78,
        39,0,1701,1700,1,0,0,0,1701,1702,1,0,0,0,1702,1704,1,0,0,0,1703,
        1705,5,136,0,0,1704,1703,1,0,0,0,1704,1705,1,0,0,0,1705,1706,1,0,
        0,0,1706,1707,3,296,148,0,1707,1709,1,0,0,0,1708,1644,1,0,0,0,1708,
        1664,1,0,0,0,1708,1680,1,0,0,0,1708,1696,1,0,0,0,1709,207,1,0,0,
        0,1710,1713,3,136,68,0,1711,1713,3,288,144,0,1712,1710,1,0,0,0,1712,
        1711,1,0,0,0,1713,209,1,0,0,0,1714,1716,5,10,0,0,1715,1717,5,136,
        0,0,1716,1715,1,0,0,0,1716,1717,1,0,0,0,1717,1718,1,0,0,0,1718,1732,
        3,220,110,0,1719,1721,5,136,0,0,1720,1719,1,0,0,0,1720,1721,1,0,
        0,0,1721,1722,1,0,0,0,1722,1724,5,25,0,0,1723,1725,5,10,0,0,1724,
        1723,1,0,0,0,1724,1725,1,0,0,0,1725,1727,1,0,0,0,1726,1728,5,136,
        0,0,1727,1726,1,0,0,0,1727,1728,1,0,0,0,1728,1729,1,0,0,0,1729,1731,
        3,220,110,0,1730,1720,1,0,0,0,1731,1734,1,0,0,0,1732,1730,1,0,0,
        0,1732,1733,1,0,0,0,1733,211,1,0,0,0,1734,1732,1,0,0,0,1735,1742,
        3,214,107,0,1736,1738,5,136,0,0,1737,1736,1,0,0,0,1737,1738,1,0,
        0,0,1738,1739,1,0,0,0,1739,1741,3,214,107,0,1740,1737,1,0,0,0,1741,
        1744,1,0,0,0,1742,1740,1,0,0,0,1742,1743,1,0,0,0,1743,213,1,0,0,
        0,1744,1742,1,0,0,0,1745,1747,5,10,0,0,1746,1748,5,136,0,0,1747,
        1746,1,0,0,0,1747,1748,1,0,0,0,1748,1749,1,0,0,0,1749,1750,3,218,
        109,0,1750,215,1,0,0,0,1751,1753,5,5,0,0,1752,1754,5,136,0,0,1753,
        1752,1,0,0,0,1753,1754,1,0,0,0,1754,1759,1,0,0,0,1755,1757,3,282,
        141,0,1756,1758,5,136,0,0,1757,1756,1,0,0,0,1757,1758,1,0,0,0,1758,
        1760,1,0,0,0,1759,1755,1,0,0,0,1759,1760,1,0,0,0,1760,1771,1,0,0,
        0,1761,1763,5,23,0,0,1762,1764,5,136,0,0,1763,1762,1,0,0,0,1763,
        1764,1,0,0,0,1764,1769,1,0,0,0,1765,1767,3,282,141,0,1766,1768,5,
        136,0,0,1767,1766,1,0,0,0,1767,1768,1,0,0,0,1768,1770,1,0,0,0,1769,
        1765,1,0,0,0,1769,1770,1,0,0,0,1770,1772,1,0,0,0,1771,1761,1,0,0,
        0,1771,1772,1,0,0,0,1772,217,1,0,0,0,1773,1774,3,290,145,0,1774,
        219,1,0,0,0,1775,1776,3,290,145,0,1776,221,1,0,0,0,1777,1782,3,246,
        123,0,1778,1780,5,136,0,0,1779,1778,1,0,0,0,1779,1780,1,0,0,0,1780,
        1781,1,0,0,0,1781,1783,3,244,122,0,1782,1779,1,0,0,0,1783,1784,1,
        0,0,0,1784,1782,1,0,0,0,1784,1785,1,0,0,0,1785,223,1,0,0,0,1786,
        1787,3,226,113,0,1787,225,1,0,0,0,1788,1795,3,228,114,0,1789,1790,
        5,136,0,0,1790,1791,5,84,0,0,1791,1792,5,136,0,0,1792,1794,3,228,
        114,0,1793,1789,1,0,0,0,1794,1797,1,0,0,0,1795,1793,1,0,0,0,1795,
        1796,1,0,0,0,1796,227,1,0,0,0,1797,1795,1,0,0,0,1798,1805,3,230,
        115,0,1799,1800,5,136,0,0,1800,1801,5,85,0,0,1801,1802,5,136,0,0,
        1802,1804,3,230,115,0,1803,1799,1,0,0,0,1804,1807,1,0,0,0,1805,1803,
        1,0,0,0,1805,1806,1,0,0,0,1806,229,1,0,0,0,1807,1805,1,0,0,0,1808,
        1815,3,232,116,0,1809,1810,5,136,0,0,1810,1811,5,86,0,0,1811,1812,
        5,136,0,0,1812,1814,3,232,116,0,1813,1809,1,0,0,0,1814,1817,1,0,
        0,0,1815,1813,1,0,0,0,1815,1816,1,0,0,0,1816,231,1,0,0,0,1817,1815,
        1,0,0,0,1818,1820,5,87,0,0,1819,1821,5,136,0,0,1820,1819,1,0,0,0,
        1820,1821,1,0,0,0,1821,1823,1,0,0,0,1822,1818,1,0,0,0,1823,1826,
        1,0,0,0,1824,1822,1,0,0,0,1824,1825,1,0,0,0,1825,1827,1,0,0,0,1826,
        1824,1,0,0,0,1827,1828,3,80,40,0,1828,233,1,0,0,0,1829,1831,5,2,
        0,0,1830,1832,5,136,0,0,1831,1830,1,0,0,0,1831,1832,1,0,0,0,1832,
        1833,1,0,0,0,1833,1860,3,82,41,0,1834,1836,5,18,0,0,1835,1837,5,
        136,0,0,1836,1835,1,0,0,0,1836,1837,1,0,0,0,1837,1838,1,0,0,0,1838,
        1860,3,82,41,0,1839,1841,5,19,0,0,1840,1842,5,136,0,0,1841,1840,
        1,0,0,0,1841,1842,1,0,0,0,1842,1843,1,0,0,0,1843,1860,3,82,41,0,
        1844,1846,5,21,0,0,1845,1847,5,136,0,0,1846,1845,1,0,0,0,1846,1847,
        1,0,0,0,1847,1848,1,0,0,0,1848,1860,3,82,41,0,1849,1851,5,20,0,0,
        1850,1852,5,136,0,0,1851,1850,1,0,0,0,1851,1852,1,0,0,0,1852,1853,
        1,0,0,0,1853,1860,3,82,41,0,1854,1856,5,22,0,0,1855,1857,5,136,0,
        0,1856,1855,1,0,0,0,1856,1857,1,0,0,0,1857,1858,1,0,0,0,1858,1860,
        3,82,41,0,1859,1829,1,0,0,0,1859,1834,1,0,0,0,1859,1839,1,0,0,0,
        1859,1844,1,0,0,0,1859,1849,1,0,0,0,1859,1854,1,0,0,0,1860,235,1,
        0,0,0,1861,1862,5,136,0,0,1862,1863,5,88,0,0,1863,1864,5,136,0,0,
        1864,1872,5,72,0,0,1865,1866,5,136,0,0,1866,1867,5,89,0,0,1867,1868,
        5,136,0,0,1868,1872,5,72,0,0,1869,1870,5,136,0,0,1870,1872,5,90,
        0,0,1871,1861,1,0,0,0,1871,1865,1,0,0,0,1871,1869,1,0,0,0,1872,1874,
        1,0,0,0,1873,1875,5,136,0,0,1874,1873,1,0,0,0,1874,1875,1,0,0,0,
        1875,1876,1,0,0,0,1876,1877,3,84,42,0,1877,237,1,0,0,0,1878,1879,
        5,136,0,0,1879,1881,5,91,0,0,1880,1882,5,136,0,0,1881,1880,1,0,0,
        0,1881,1882,1,0,0,0,1882,1883,1,0,0,0,1883,1884,3,84,42,0,1884,239,
        1,0,0,0,1885,1886,5,136,0,0,1886,1887,5,92,0,0,1887,1888,5,136,0,
        0,1888,1896,5,93,0,0,1889,1890,5,136,0,0,1890,1891,5,92,0,0,1891,
        1892,5,136,0,0,1892,1893,5,87,0,0,1893,1894,5,136,0,0,1894,1896,
        5,93,0,0,1895,1885,1,0,0,0,1895,1889,1,0,0,0,1896,241,1,0,0,0,1897,
        1904,3,98,49,0,1898,1900,7,1,0,0,1899,1901,5,136,0,0,1900,1899,1,
        0,0,0,1900,1901,1,0,0,0,1901,1902,1,0,0,0,1902,1904,3,98,49,0,1903,
        1897,1,0,0,0,1903,1898,1,0,0,0,1904,243,1,0,0,0,1905,1907,5,4,0,
        0,1906,1908,5,136,0,0,1907,1906,1,0,0,0,1907,1908,1,0,0,0,1908,1909,
        1,0,0,0,1909,1910,3,286,143,0,1910,245,1,0,0,0,1911,1936,3,276,138,
        0,1912,1936,3,288,144,0,1913,1936,3,248,124,0,1914,1916,5,94,0,0,
        1915,1917,5,136,0,0,1916,1915,1,0,0,0,1916,1917,1,0,0,0,1917,1918,
        1,0,0,0,1918,1920,5,6,0,0,1919,1921,5,136,0,0,1920,1919,1,0,0,0,
        1920,1921,1,0,0,0,1921,1922,1,0,0,0,1922,1924,5,5,0,0,1923,1925,
        5,136,0,0,1924,1923,1,0,0,0,1924,1925,1,0,0,0,1925,1926,1,0,0,0,
        1926,1936,5,7,0,0,1927,1936,3,252,126,0,1928,1936,3,254,127,0,1929,
        1936,3,256,128,0,1930,1936,3,258,129,0,1931,1936,3,260,130,0,1932,
        1936,3,128,64,0,1933,1936,3,54,27,0,1934,1936,3,274,137,0,1935,1911,
        1,0,0,0,1935,1912,1,0,0,0,1935,1913,1,0,0,0,1935,1914,1,0,0,0,1935,
        1927,1,0,0,0,1935,1928,1,0,0,0,1935,1929,1,0,0,0,1935,1930,1,0,0,
        0,1935,1931,1,0,0,0,1935,1932,1,0,0,0,1935,1933,1,0,0,0,1935,1934,
        1,0,0,0,1936,247,1,0,0,0,1937,1942,5,95,0,0,1938,1940,5,136,0,0,
        1939,1938,1,0,0,0,1939,1940,1,0,0,0,1940,1941,1,0,0,0,1941,1943,
        3,250,125,0,1942,1939,1,0,0,0,1943,1944,1,0,0,0,1944,1942,1,0,0,
        0,1944,1945,1,0,0,0,1945,1960,1,0,0,0,1946,1948,5,95,0,0,1947,1949,
        5,136,0,0,1948,1947,1,0,0,0,1948,1949,1,0,0,0,1949,1950,1,0,0,0,
        1950,1955,3,224,112,0,1951,1953,5,136,0,0,1952,1951,1,0,0,0,1952,
        1953,1,0,0,0,1953,1954,1,0,0,0,1954,1956,3,250,125,0,1955,1952,1,
        0,0,0,1956,1957,1,0,0,0,1957,1955,1,0,0,0,1957,1958,1,0,0,0,1958,
        1960,1,0,0,0,1959,1937,1,0,0,0,1959,1946,1,0,0,0,1960,1969,1,0,0,
        0,1961,1963,5,136,0,0,1962,1961,1,0,0,0,1962,1963,1,0,0,0,1963,1964,
        1,0,0,0,1964,1966,5,96,0,0,1965,1967,5,136,0,0,1966,1965,1,0,0,0,
        1966,1967,1,0,0,0,1967,1968,1,0,0,0,1968,1970,3,224,112,0,1969,1962,
        1,0,0,0,1969,1970,1,0,0,0,1970,1972,1,0,0,0,1971,1973,5,136,0,0,
        1972,1971,1,0,0,0,1972,1973,1,0,0,0,1973,1974,1,0,0,0,1974,1975,
        5,97,0,0,1975,249,1,0,0,0,1976,1978,5,98,0,0,1977,1979,5,136,0,0,
        1978,1977,1,0,0,0,1978,1979,1,0,0,0,1979,1980,1,0,0,0,1980,1982,
        3,224,112,0,1981,1983,5,136,0,0,1982,1981,1,0,0,0,1982,1983,1,0,
        0,0,1983,1984,1,0,0,0,1984,1986,5,99,0,0,1985,1987,5,136,0,0,1986,
        1985,1,0,0,0,1986,1987,1,0,0,0,1987,1988,1,0,0,0,1988,1989,3,224,
        112,0,1989,251,1,0,0,0,1990,1992,5,11,0,0,1991,1993,5,136,0,0,1992,
        1991,1,0,0,0,1992,1993,1,0,0,0,1993,1994,1,0,0,0,1994,2003,3,56,
        28,0,1995,1997,5,136,0,0,1996,1995,1,0,0,0,1996,1997,1,0,0,0,1997,
        1998,1,0,0,0,1998,2000,5,25,0,0,1999,2001,5,136,0,0,2000,1999,1,
        0,0,0,2000,2001,1,0,0,0,2001,2002,1,0,0,0,2002,2004,3,224,112,0,
        2003,1996,1,0,0,0,2003,2004,1,0,0,0,2004,2006,1,0,0,0,2005,2007,
        5,136,0,0,2006,2005,1,0,0,0,2006,2007,1,0,0,0,2007,2008,1,0,0,0,
        2008,2009,5,12,0,0,2009,253,1,0,0,0,2010,2012,5,11,0,0,2011,2013,
        5,136,0,0,2012,2011,1,0,0,0,2012,2013,1,0,0,0,2013,2022,1,0,0,0,
        2014,2016,3,274,137,0,2015,2017,5,136,0,0,2016,2015,1,0,0,0,2016,
        2017,1,0,0,0,2017,2018,1,0,0,0,2018,2020,5,2,0,0,2019,2021,5,136,
        0,0,2020,2019,1,0,0,0,2020,2021,1,0,0,0,2021,2023,1,0,0,0,2022,2014,
        1,0,0,0,2022,2023,1,0,0,0,2023,2024,1,0,0,0,2024,2026,3,202,101,
        0,2025,2027,5,136,0,0,2026,2025,1,0,0,0,2026,2027,1,0,0,0,2027,2032,
        1,0,0,0,2028,2030,3,194,97,0,2029,2031,5,136,0,0,2030,2029,1,0,0,
        0,2030,2031,1,0,0,0,2031,2033,1,0,0,0,2032,2028,1,0,0,0,2032,2033,
        1,0,0,0,2033,2034,1,0,0,0,2034,2036,5,25,0,0,2035,2037,5,136,0,0,
        2036,2035,1,0,0,0,2036,2037,1,0,0,0,2037,2038,1,0,0,0,2038,2040,
        3,224,112,0,2039,2041,5,136,0,0,2040,2039,1,0,0,0,2040,2041,1,0,
        0,0,2041,2042,1,0,0,0,2042,2043,5,12,0,0,2043,255,1,0,0,0,2044,2046,
        5,58,0,0,2045,2047,5,136,0,0,2046,2045,1,0,0,0,2046,2047,1,0,0,0,
        2047,2048,1,0,0,0,2048,2050,5,6,0,0,2049,2051,5,136,0,0,2050,2049,
        1,0,0,0,2050,2051,1,0,0,0,2051,2052,1,0,0,0,2052,2054,3,56,28,0,
        2053,2055,5,136,0,0,2054,2053,1,0,0,0,2054,2055,1,0,0,0,2055,2056,
        1,0,0,0,2056,2057,5,7,0,0,2057,2101,1,0,0,0,2058,2060,5,100,0,0,
        2059,2061,5,136,0,0,2060,2059,1,0,0,0,2060,2061,1,0,0,0,2061,2062,
        1,0,0,0,2062,2064,5,6,0,0,2063,2065,5,136,0,0,2064,2063,1,0,0,0,
        2064,2065,1,0,0,0,2065,2066,1,0,0,0,2066,2068,3,56,28,0,2067,2069,
        5,136,0,0,2068,2067,1,0,0,0,2068,2069,1,0,0,0,2069,2070,1,0,0,0,
        2070,2071,5,7,0,0,2071,2101,1,0,0,0,2072,2074,5,101,0,0,2073,2075,
        5,136,0,0,2074,2073,1,0,0,0,2074,2075,1,0,0,0,2075,2076,1,0,0,0,
        2076,2078,5,6,0,0,2077,2079,5,136,0,0,2078,2077,1,0,0,0,2078,2079,
        1,0,0,0,2079,2080,1,0,0,0,2080,2082,3,56,28,0,2081,2083,5,136,0,
        0,2082,2081,1,0,0,0,2082,2083,1,0,0,0,2083,2084,1,0,0,0,2084,2085,
        5,7,0,0,2085,2101,1,0,0,0,2086,2088,5,102,0,0,2087,2089,5,136,0,
        0,2088,2087,1,0,0,0,2088,2089,1,0,0,0,2089,2090,1,0,0,0,2090,2092,
        5,6,0,0,2091,2093,5,136,0,0,2092,2091,1,0,0,0,2092,2093,1,0,0,0,
        2093,2094,1,0,0,0,2094,2096,3,56,28,0,2095,2097,5,136,0,0,2096,2095,
        1,0,0,0,2096,2097,1,0,0,0,2097,2098,1,0,0,0,2098,2099,5,7,0,0,2099,
        2101,1,0,0,0,2100,2044,1,0,0,0,2100,2058,1,0,0,0,2100,2072,1,0,0,
        0,2100,2086,1,0,0,0,2101,257,1,0,0,0,2102,2103,3,202,101,0,2103,
        259,1,0,0,0,2104,2106,5,6,0,0,2105,2107,5,136,0,0,2106,2105,1,0,
        0,0,2106,2107,1,0,0,0,2107,2108,1,0,0,0,2108,2110,3,224,112,0,2109,
        2111,5,136,0,0,2110,2109,1,0,0,0,2110,2111,1,0,0,0,2111,2112,1,0,
        0,0,2112,2113,5,7,0,0,2113,261,1,0,0,0,2114,2115,3,274,137,0,2115,
        2116,5,136,0,0,2116,2117,5,91,0,0,2117,2118,5,136,0,0,2118,2119,
        3,224,112,0,2119,263,1,0,0,0,2120,2121,3,272,136,0,2121,2122,3,140,
        70,0,2122,265,1,0,0,0,2123,2124,3,270,135,0,2124,267,1,0,0,0,2125,
        2126,3,140,70,0,2126,269,1,0,0,0,2127,2128,3,272,136,0,2128,2129,
        3,140,70,0,2129,271,1,0,0,0,2130,2131,3,140,70,0,2131,2132,5,4,0,
        0,2132,2134,1,0,0,0,2133,2130,1,0,0,0,2134,2137,1,0,0,0,2135,2133,
        1,0,0,0,2135,2136,1,0,0,0,2136,273,1,0,0,0,2137,2135,1,0,0,0,2138,
        2139,3,140,70,0,2139,275,1,0,0,0,2140,2147,3,278,139,0,2141,2147,
        5,93,0,0,2142,2147,3,280,140,0,2143,2147,5,118,0,0,2144,2147,3,132,
        66,0,2145,2147,3,136,68,0,2146,2140,1,0,0,0,2146,2141,1,0,0,0,2146,
        2142,1,0,0,0,2146,2143,1,0,0,0,2146,2144,1,0,0,0,2146,2145,1,0,0,
        0,2147,277,1,0,0,0,2148,2149,7,7,0,0,2149,279,1,0,0,0,2150,2153,
        3,284,142,0,2151,2153,3,282,141,0,2152,2150,1,0,0,0,2152,2151,1,
        0,0,0,2153,281,1,0,0,0,2154,2155,7,8,0,0,2155,283,1,0,0,0,2156,2157,
        7,9,0,0,2157,285,1,0,0,0,2158,2159,3,290,145,0,2159,287,1,0,0,0,
        2160,2163,5,26,0,0,2161,2164,3,140,70,0,2162,2164,5,107,0,0,2163,
        2161,1,0,0,0,2163,2162,1,0,0,0,2164,289,1,0,0,0,2165,2168,3,140,
        70,0,2166,2168,3,142,71,0,2167,2165,1,0,0,0,2167,2166,1,0,0,0,2168,
        291,1,0,0,0,2169,2170,7,10,0,0,2170,293,1,0,0,0,2171,2172,7,11,0,
        0,2172,295,1,0,0,0,2173,2174,7,12,0,0,2174,297,1,0,0,0,405,301,306,
        312,316,320,324,326,329,332,340,344,348,351,355,362,366,369,373,
        377,381,386,390,393,397,401,405,410,414,417,421,424,427,431,437,
        441,447,451,457,463,469,472,475,479,485,488,491,495,499,503,507,
        513,516,520,526,530,533,536,540,544,548,552,557,561,565,567,572,
        576,578,582,586,588,590,596,600,606,612,618,623,629,632,638,640,
        644,648,653,658,661,667,671,675,680,684,687,694,698,702,707,711,
        716,721,724,728,732,737,740,742,745,751,754,758,764,770,774,780,
        784,789,793,797,801,807,811,817,821,823,827,829,833,835,839,841,
        847,851,855,859,863,867,871,875,881,884,887,893,896,900,903,907,
        911,913,917,919,922,926,928,932,934,940,944,950,958,962,966,972,
        985,989,995,1000,1004,1010,1015,1019,1021,1025,1029,1033,1038,1042,
        1045,1048,1052,1055,1058,1068,1073,1077,1081,1083,1087,1092,1097,
        1101,1103,1105,1108,1113,1117,1123,1128,1133,1144,1150,1156,1160,
        1164,1167,1171,1174,1180,1184,1188,1192,1194,1198,1202,1206,1210,
        1213,1221,1225,1229,1233,1237,1240,1248,1253,1258,1261,1267,1271,
        1275,1282,1286,1289,1292,1300,1305,1312,1317,1320,1324,1328,1332,
        1338,1342,1347,1352,1356,1359,1361,1366,1370,1380,1387,1400,1404,
        1410,1414,1418,1423,1428,1432,1436,1440,1445,1452,1456,1461,1466,
        1470,1475,1479,1482,1489,1496,1499,1505,1508,1514,1518,1522,1526,
        1530,1535,1540,1544,1549,1552,1561,1570,1575,1588,1591,1599,1603,
        1608,1615,1620,1627,1631,1636,1640,1646,1650,1653,1656,1660,1666,
        1670,1673,1676,1682,1685,1688,1692,1698,1701,1704,1708,1712,1716,
        1720,1724,1727,1732,1737,1742,1747,1753,1757,1759,1763,1767,1769,
        1771,1779,1784,1795,1805,1815,1820,1824,1831,1836,1841,1846,1851,
        1856,1859,1871,1874,1881,1895,1900,1903,1907,1916,1920,1924,1935,
        1939,1944,1948,1952,1957,1959,1962,1966,1969,1972,1978,1982,1986,
        1992,1996,2000,2003,2006,2012,2016,2020,2022,2026,2030,2032,2036,
        2040,2046,2050,2054,2060,2064,2068,2074,2078,2082,2088,2092,2096,
        2100,2106,2110,2135,2146,2152,2163,2167
    ]

class s_cypherParser ( Parser ):

    grammarFileName = "s_cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "','", "'='", "'+='", "'.'", "'*'", "'('", 
                     "')'", "'{'", "'}'", "':'", "'['", "']'", "'/'", "'%'", 
                     "'^'", "'+'", "'-'", "'<>'", "'<'", "'<='", "'>'", 
                     "'>='", "'..'", "';'", "'|'", "'$'", "'\\u27E8'", "'\\u3008'", 
                     "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
                     "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", 
                     "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", 
                     "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
                     "'\\uFF0D'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'NOW'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "AtT", "PoundT", "PoundValue", 
                      "NOW", "AT_TIME", "SNAPSHOT", "BETWEEN", "SCOPE", 
                      "STALE", "DURING", "OVERLAPS", "UNION", "ALL", "OPTIONAL", 
                      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", 
                      "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", 
                      "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", 
                      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
                      "WHERE", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", 
                      "CONTAINS", "IN", "IS", "NULL", "COUNT", "CASE", "ELSE", 
                      "END", "WHEN", "THEN", "ANY", "NONE", "SINGLE", "EXISTS", 
                      "TRUE", "FALSE", "HexInteger", "DecimalInteger", "OctalInteger", 
                      "HexLetter", "HexDigit", "Digit", "NonZeroDigit", 
                      "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", 
                      "RegularDecimalReal", "StringLiteral", "EscapedChar", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Query = 0
    RULE_oC_MultiPartQuery = 1
    RULE_oC_Match = 2
    RULE_oC_UpdatingClause = 3
    RULE_s_Create = 4
    RULE_s_Merge = 5
    RULE_s_Set = 6
    RULE_s_Stale = 7
    RULE_oC_SetItem = 8
    RULE_s_SetPropertyItemOne = 9
    RULE_s_SetPropertyItemTwo = 10
    RULE_s_SetValueItem = 11
    RULE_s_StaleItem = 12
    RULE_s_Delete = 13
    RULE_s_DeleteItem = 14
    RULE_oC_RemoveItem = 15
    RULE_s_AtTime = 16
    RULE_s_Between = 17
    RULE_s_TimeWindowLimit = 18
    RULE_oC_InQueryCall = 19
    RULE_oC_StandaloneCall = 20
    RULE_oC_ExplicitProcedureInvocation = 21
    RULE_s_ExplicitExpression = 22
    RULE_s_YieldItems = 23
    RULE_s_YieldItem = 24
    RULE_s_WithPartQuery = 25
    RULE_s_With = 26
    RULE_oC_ExistentialSubquery = 27
    RULE_oC_FilterExpression = 28
    RULE_s_Snapshot = 29
    RULE_s_Scope = 30
    RULE_oC_PatternPart = 31
    RULE_s_PathFunctionPattern = 32
    RULE_s_SinglePathPattern = 33
    RULE_oC_NodePattern = 34
    RULE_s_Properties = 35
    RULE_s_PropertiesPattern = 36
    RULE_s_PropertyNode = 37
    RULE_s_ValueNode = 38
    RULE_oC_RelationshipDetail = 39
    RULE_oC_ComparisonExpression = 40
    RULE_oC_StringListNullPredicateExpression = 41
    RULE_oC_AddOrSubtractExpression = 42
    RULE_s_MultiplyDivideModuloOperator = 43
    RULE_s_PowerOfOperator = 44
    RULE_s_AddOrSubtractOperator = 45
    RULE_s_ComparisonOperator = 46
    RULE_oC_MultiplyDivideModuloExpression = 47
    RULE_oC_PowerOfExpression = 48
    RULE_oC_ListOperatorExpression = 49
    RULE_s_SingleIndexExpression = 50
    RULE_s_DoubleIndexExpression = 51
    RULE_s_LeftExpression = 52
    RULE_s_RightExpression = 53
    RULE_oC_PropertyOrLabelsExpression = 54
    RULE_s_PoundTExpression = 55
    RULE_s_PropertyLookupName = 56
    RULE_s_PropertyLookupTime = 57
    RULE_s_TimePropertyItem = 58
    RULE_s_TimePredicateExpression = 59
    RULE_s_AtTElement = 60
    RULE_s_PoundTElement = 61
    RULE_s_TElement = 62
    RULE_s_TimePointLiteral = 63
    RULE_oC_FunctionInvocation = 64
    RULE_s_FunctionInvocationExpression = 65
    RULE_oC_ListLiteral = 66
    RULE_s_ListLiteralExpression = 67
    RULE_oC_MapLiteral = 68
    RULE_s_MapKeyValue = 69
    RULE_oC_SymbolicName = 70
    RULE_oC_ReservedWord = 71
    RULE_oC_Cypher = 72
    RULE_oC_Statement = 73
    RULE_oC_RegularQuery = 74
    RULE_oC_Union = 75
    RULE_oC_SingleQuery = 76
    RULE_oC_SinglePartQuery = 77
    RULE_oC_ReadingClause = 78
    RULE_oC_Unwind = 79
    RULE_oC_Merge = 80
    RULE_oC_MergeAction = 81
    RULE_oC_Create = 82
    RULE_oC_Set = 83
    RULE_oC_Delete = 84
    RULE_oC_Remove = 85
    RULE_oC_YieldItems = 86
    RULE_oC_YieldItem = 87
    RULE_oC_With = 88
    RULE_oC_Return = 89
    RULE_oC_ProjectionBody = 90
    RULE_oC_ProjectionItems = 91
    RULE_oC_ProjectionItem = 92
    RULE_oC_Order = 93
    RULE_oC_Skip = 94
    RULE_oC_Limit = 95
    RULE_oC_SortItem = 96
    RULE_oC_Where = 97
    RULE_oC_Pattern = 98
    RULE_oC_AnonymousPatternPart = 99
    RULE_oC_PatternElement = 100
    RULE_oC_RelationshipsPattern = 101
    RULE_oC_PatternElementChain = 102
    RULE_oC_RelationshipPattern = 103
    RULE_oC_Properties = 104
    RULE_oC_RelationshipTypes = 105
    RULE_oC_NodeLabels = 106
    RULE_oC_NodeLabel = 107
    RULE_oC_RangeLiteral = 108
    RULE_oC_LabelName = 109
    RULE_oC_RelTypeName = 110
    RULE_oC_PropertyExpression = 111
    RULE_oC_Expression = 112
    RULE_oC_OrExpression = 113
    RULE_oC_XorExpression = 114
    RULE_oC_AndExpression = 115
    RULE_oC_NotExpression = 116
    RULE_oC_PartialComparisonExpression = 117
    RULE_oC_StringPredicateExpression = 118
    RULE_oC_ListPredicateExpression = 119
    RULE_oC_NullPredicateExpression = 120
    RULE_oC_UnaryAddOrSubtractExpression = 121
    RULE_oC_PropertyLookup = 122
    RULE_oC_Atom = 123
    RULE_oC_CaseExpression = 124
    RULE_oC_CaseAlternative = 125
    RULE_oC_ListComprehension = 126
    RULE_oC_PatternComprehension = 127
    RULE_oC_Quantifier = 128
    RULE_oC_PatternPredicate = 129
    RULE_oC_ParenthesizedExpression = 130
    RULE_oC_IdInColl = 131
    RULE_oC_FunctionName = 132
    RULE_oC_ImplicitProcedureInvocation = 133
    RULE_oC_ProcedureResultField = 134
    RULE_oC_ProcedureName = 135
    RULE_oC_Namespace = 136
    RULE_oC_Variable = 137
    RULE_oC_Literal = 138
    RULE_oC_BooleanLiteral = 139
    RULE_oC_NumberLiteral = 140
    RULE_oC_IntegerLiteral = 141
    RULE_oC_DoubleLiteral = 142
    RULE_oC_PropertyKeyName = 143
    RULE_oC_Parameter = 144
    RULE_oC_SchemaName = 145
    RULE_oC_LeftArrowHead = 146
    RULE_oC_RightArrowHead = 147
    RULE_oC_Dash = 148

    ruleNames =  [ "oC_Query", "oC_MultiPartQuery", "oC_Match", "oC_UpdatingClause", 
                   "s_Create", "s_Merge", "s_Set", "s_Stale", "oC_SetItem", 
                   "s_SetPropertyItemOne", "s_SetPropertyItemTwo", "s_SetValueItem", 
                   "s_StaleItem", "s_Delete", "s_DeleteItem", "oC_RemoveItem", 
                   "s_AtTime", "s_Between", "s_TimeWindowLimit", "oC_InQueryCall", 
                   "oC_StandaloneCall", "oC_ExplicitProcedureInvocation", 
                   "s_ExplicitExpression", "s_YieldItems", "s_YieldItem", 
                   "s_WithPartQuery", "s_With", "oC_ExistentialSubquery", 
                   "oC_FilterExpression", "s_Snapshot", "s_Scope", "oC_PatternPart", 
                   "s_PathFunctionPattern", "s_SinglePathPattern", "oC_NodePattern", 
                   "s_Properties", "s_PropertiesPattern", "s_PropertyNode", 
                   "s_ValueNode", "oC_RelationshipDetail", "oC_ComparisonExpression", 
                   "oC_StringListNullPredicateExpression", "oC_AddOrSubtractExpression", 
                   "s_MultiplyDivideModuloOperator", "s_PowerOfOperator", 
                   "s_AddOrSubtractOperator", "s_ComparisonOperator", "oC_MultiplyDivideModuloExpression", 
                   "oC_PowerOfExpression", "oC_ListOperatorExpression", 
                   "s_SingleIndexExpression", "s_DoubleIndexExpression", 
                   "s_LeftExpression", "s_RightExpression", "oC_PropertyOrLabelsExpression", 
                   "s_PoundTExpression", "s_PropertyLookupName", "s_PropertyLookupTime", 
                   "s_TimePropertyItem", "s_TimePredicateExpression", "s_AtTElement", 
                   "s_PoundTElement", "s_TElement", "s_TimePointLiteral", 
                   "oC_FunctionInvocation", "s_FunctionInvocationExpression", 
                   "oC_ListLiteral", "s_ListLiteralExpression", "oC_MapLiteral", 
                   "s_MapKeyValue", "oC_SymbolicName", "oC_ReservedWord", 
                   "oC_Cypher", "oC_Statement", "oC_RegularQuery", "oC_Union", 
                   "oC_SingleQuery", "oC_SinglePartQuery", "oC_ReadingClause", 
                   "oC_Unwind", "oC_Merge", "oC_MergeAction", "oC_Create", 
                   "oC_Set", "oC_Delete", "oC_Remove", "oC_YieldItems", 
                   "oC_YieldItem", "oC_With", "oC_Return", "oC_ProjectionBody", 
                   "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", 
                   "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", 
                   "oC_AnonymousPatternPart", "oC_PatternElement", "oC_RelationshipsPattern", 
                   "oC_PatternElementChain", "oC_RelationshipPattern", "oC_Properties", 
                   "oC_RelationshipTypes", "oC_NodeLabels", "oC_NodeLabel", 
                   "oC_RangeLiteral", "oC_LabelName", "oC_RelTypeName", 
                   "oC_PropertyExpression", "oC_Expression", "oC_OrExpression", 
                   "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", 
                   "oC_PartialComparisonExpression", "oC_StringPredicateExpression", 
                   "oC_ListPredicateExpression", "oC_NullPredicateExpression", 
                   "oC_UnaryAddOrSubtractExpression", "oC_PropertyLookup", 
                   "oC_Atom", "oC_CaseExpression", "oC_CaseAlternative", 
                   "oC_ListComprehension", "oC_PatternComprehension", "oC_Quantifier", 
                   "oC_PatternPredicate", "oC_ParenthesizedExpression", 
                   "oC_IdInColl", "oC_FunctionName", "oC_ImplicitProcedureInvocation", 
                   "oC_ProcedureResultField", "oC_ProcedureName", "oC_Namespace", 
                   "oC_Variable", "oC_Literal", "oC_BooleanLiteral", "oC_NumberLiteral", 
                   "oC_IntegerLiteral", "oC_DoubleLiteral", "oC_PropertyKeyName", 
                   "oC_Parameter", "oC_SchemaName", "oC_LeftArrowHead", 
                   "oC_RightArrowHead", "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    AtT=46
    PoundT=47
    PoundValue=48
    NOW=49
    AT_TIME=50
    SNAPSHOT=51
    BETWEEN=52
    SCOPE=53
    STALE=54
    DURING=55
    OVERLAPS=56
    UNION=57
    ALL=58
    OPTIONAL=59
    MATCH=60
    UNWIND=61
    AS=62
    MERGE=63
    ON=64
    CREATE=65
    SET=66
    DETACH=67
    DELETE=68
    REMOVE=69
    CALL=70
    YIELD=71
    WITH=72
    RETURN=73
    DISTINCT=74
    ORDER=75
    BY=76
    L_SKIP=77
    LIMIT=78
    ASCENDING=79
    ASC=80
    DESCENDING=81
    DESC=82
    WHERE=83
    OR=84
    XOR=85
    AND=86
    NOT=87
    STARTS=88
    ENDS=89
    CONTAINS=90
    IN=91
    IS=92
    NULL=93
    COUNT=94
    CASE=95
    ELSE=96
    END=97
    WHEN=98
    THEN=99
    ANY=100
    NONE=101
    SINGLE=102
    EXISTS=103
    TRUE=104
    FALSE=105
    HexInteger=106
    DecimalInteger=107
    OctalInteger=108
    HexLetter=109
    HexDigit=110
    Digit=111
    NonZeroDigit=112
    NonZeroOctDigit=113
    OctDigit=114
    ZeroDigit=115
    ExponentDecimalReal=116
    RegularDecimalReal=117
    StringLiteral=118
    EscapedChar=119
    CONSTRAINT=120
    DO=121
    FOR=122
    REQUIRE=123
    UNIQUE=124
    MANDATORY=125
    SCALAR=126
    OF=127
    ADD=128
    DROP=129
    FILTER=130
    EXTRACT=131
    UnescapedSymbolicName=132
    IdentifierStart=133
    IdentifierPart=134
    EscapedSymbolicName=135
    SP=136
    WHITESPACE=137
    Comment=138

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StandaloneCallContext,0)


        def s_TimeWindowLimit(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimeWindowLimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = s_cypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Query)
        try:
            self.state = 301
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 298
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 299
                self.oC_StandaloneCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 300
                self.s_TimeWindowLimit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def s_WithPartQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_WithPartQueryContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_WithPartQueryContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = s_cypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_MultiPartQuery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 304 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 303
                    self.s_WithPartQuery()

                else:
                    raise NoViableAltException(self)
                self.state = 306 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

            self.state = 308
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = s_cypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 310
                self.match(s_cypherParser.OPTIONAL)
                self.state = 311
                self.match(s_cypherParser.SP)


            self.state = 314
            self.match(s_cypherParser.MATCH)
            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 315
                self.match(s_cypherParser.SP)


            self.state = 318
            self.oC_Pattern()
            self.state = 326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 319
                    self.match(s_cypherParser.SP)


                self.state = 324
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [50]:
                    self.state = 322
                    self.s_AtTime()
                    pass
                elif token in [52]:
                    self.state = 323
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 328
                    self.match(s_cypherParser.SP)


                self.state = 331
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_Create(self):
            return self.getTypedRuleContext(s_cypherParser.S_CreateContext,0)


        def s_Merge(self):
            return self.getTypedRuleContext(s_cypherParser.S_MergeContext,0)


        def s_Set(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RemoveContext,0)


        def s_Stale(self):
            return self.getTypedRuleContext(s_cypherParser.S_StaleContext,0)


        def s_Delete(self):
            return self.getTypedRuleContext(s_cypherParser.S_DeleteContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = s_cypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_oC_UpdatingClause)
        try:
            self.state = 340
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65]:
                self.enterOuterAlt(localctx, 1)
                self.state = 334
                self.s_Create()
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 2)
                self.state = 335
                self.s_Merge()
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 3)
                self.state = 336
                self.s_Set()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 4)
                self.state = 337
                self.oC_Remove()
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 5)
                self.state = 338
                self.s_Stale()
                pass
            elif token in [67, 68]:
                self.enterOuterAlt(localctx, 6)
                self.state = 339
                self.s_Delete()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Create" ):
                listener.enterS_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Create" ):
                listener.exitS_Create(self)




    def s_Create(self):

        localctx = s_cypherParser.S_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_s_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            self.match(s_cypherParser.CREATE)
            self.state = 344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 343
                self.match(s_cypherParser.SP)


            self.state = 346
            self.oC_Pattern()
            self.state = 351
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 347
                    self.match(s_cypherParser.SP)


                self.state = 350
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Merge" ):
                listener.enterS_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Merge" ):
                listener.exitS_Merge(self)




    def s_Merge(self):

        localctx = s_cypherParser.S_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_s_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self.match(s_cypherParser.MERGE)
            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 354
                self.match(s_cypherParser.SP)


            self.state = 357
            self.oC_PatternPart()
            self.state = 362
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 358
                    self.match(s_cypherParser.SP)
                    self.state = 359
                    self.oC_MergeAction() 
                self.state = 364
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

            self.state = 369
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 366
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 365
                    self.match(s_cypherParser.SP)


                self.state = 368
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Set" ):
                listener.enterS_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Set" ):
                listener.exitS_Set(self)




    def s_Set(self):

        localctx = s_cypherParser.S_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_s_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.match(s_cypherParser.SET)
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 372
                self.match(s_cypherParser.SP)


            self.state = 375
            self.oC_SetItem()
            self.state = 386
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 377
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 376
                        self.match(s_cypherParser.SP)


                    self.state = 379
                    self.match(s_cypherParser.T__0)
                    self.state = 381
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 380
                        self.match(s_cypherParser.SP)


                    self.state = 383
                    self.oC_SetItem() 
                self.state = 388
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

            self.state = 393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 389
                    self.match(s_cypherParser.SP)


                self.state = 392
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def s_StaleItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StaleItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StaleItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Stale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Stale" ):
                listener.enterS_Stale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Stale" ):
                listener.exitS_Stale(self)




    def s_Stale(self):

        localctx = s_cypherParser.S_StaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_s_Stale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self.match(s_cypherParser.STALE)
            self.state = 397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 396
                self.match(s_cypherParser.SP)


            self.state = 399
            self.s_StaleItem()
            self.state = 410
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 401
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 400
                        self.match(s_cypherParser.SP)


                    self.state = 403
                    self.match(s_cypherParser.T__0)
                    self.state = 405
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 404
                        self.match(s_cypherParser.SP)


                    self.state = 407
                    self.s_StaleItem() 
                self.state = 412
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

            self.state = 417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 413
                    self.match(s_cypherParser.SP)


                self.state = 416
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_SetPropertyItemOne(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemOneContext,0)


        def s_SetPropertyItemTwo(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemTwoContext,0)


        def s_SetValueItem(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetValueItemContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = s_cypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 503
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 419
                self.oC_PropertyExpression()
                self.state = 424
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 421
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 420
                        self.match(s_cypherParser.SP)


                    self.state = 423
                    self.s_AtTElement()


                self.state = 427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 426
                    self.match(s_cypherParser.SP)


                self.state = 429
                self.match(s_cypherParser.T__1)
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 430
                    self.match(s_cypherParser.SP)


                self.state = 433
                self.oC_Expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 435
                self.oC_Variable()
                self.state = 437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 436
                    self.match(s_cypherParser.SP)


                self.state = 439
                self.match(s_cypherParser.T__1)
                self.state = 441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 440
                    self.match(s_cypherParser.SP)


                self.state = 443
                self.oC_Expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 445
                self.oC_Variable()
                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 446
                    self.match(s_cypherParser.SP)


                self.state = 449
                self.match(s_cypherParser.T__2)
                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 450
                    self.match(s_cypherParser.SP)


                self.state = 453
                self.oC_Expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 455
                self.oC_Variable()
                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 456
                    self.match(s_cypherParser.SP)


                self.state = 459
                self.oC_NodeLabels()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 461
                self.oC_Variable()
                self.state = 463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 462
                    self.match(s_cypherParser.SP)


                self.state = 465
                self.s_AtTElement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 467
                self.oC_Variable()
                self.state = 472
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 469
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 468
                        self.match(s_cypherParser.SP)


                    self.state = 471
                    self.s_AtTElement()


                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 474
                    self.match(s_cypherParser.SP)


                self.state = 477
                self.match(s_cypherParser.T__3)
                self.state = 479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 478
                    self.match(s_cypherParser.SP)


                self.state = 481
                self.s_SetPropertyItemOne()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 483
                self.oC_Variable()
                self.state = 488
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 485
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 484
                        self.match(s_cypherParser.SP)


                    self.state = 487
                    self.s_AtTElement()


                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 490
                    self.match(s_cypherParser.SP)


                self.state = 493
                self.match(s_cypherParser.T__3)
                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 494
                    self.match(s_cypherParser.SP)


                self.state = 497
                self.s_SetPropertyItemTwo()
                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 498
                    self.match(s_cypherParser.SP)


                self.state = 501
                self.s_SetValueItem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemOneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemOne

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemOne" ):
                listener.enterS_SetPropertyItemOne(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemOne" ):
                listener.exitS_SetPropertyItemOne(self)




    def s_SetPropertyItemOne(self):

        localctx = s_cypherParser.S_SetPropertyItemOneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_s_SetPropertyItemOne)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.oC_PropertyKeyName()
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 506
                self.match(s_cypherParser.SP)


            self.state = 509
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemTwoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemTwo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemTwo" ):
                listener.enterS_SetPropertyItemTwo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemTwo" ):
                listener.exitS_SetPropertyItemTwo(self)




    def s_SetPropertyItemTwo(self):

        localctx = s_cypherParser.S_SetPropertyItemTwoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_s_SetPropertyItemTwo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self.oC_PropertyKeyName()
            self.state = 516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 512
                    self.match(s_cypherParser.SP)


                self.state = 515
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetValueItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetValueItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetValueItem" ):
                listener.enterS_SetValueItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetValueItem" ):
                listener.exitS_SetValueItem(self)




    def s_SetValueItem(self):

        localctx = s_cypherParser.S_SetValueItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_s_SetValueItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self.match(s_cypherParser.PoundValue)
            self.state = 520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 519
                self.match(s_cypherParser.SP)


            self.state = 522
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def s_PropertyLookupName(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StaleItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StaleItem" ):
                listener.enterS_StaleItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StaleItem" ):
                listener.exitS_StaleItem(self)




    def s_StaleItem(self):

        localctx = s_cypherParser.S_StaleItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_s_StaleItem)
        self._la = 0 # Token type
        try:
            self.state = 536
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 524
                self.oC_Expression()
                self.state = 526
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
                if la_ == 1:
                    self.state = 525
                    self.match(s_cypherParser.SP)


                self.state = 528
                self.s_PropertyLookupName()
                self.state = 533
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 530
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 529
                        self.match(s_cypherParser.SP)


                    self.state = 532
                    self.match(s_cypherParser.PoundValue)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 535
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def s_DeleteItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DeleteItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DeleteItemContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Delete" ):
                listener.enterS_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Delete" ):
                listener.exitS_Delete(self)




    def s_Delete(self):

        localctx = s_cypherParser.S_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_s_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 538
                self.match(s_cypherParser.DETACH)
                self.state = 539
                self.match(s_cypherParser.SP)


            self.state = 542
            self.match(s_cypherParser.DELETE)
            self.state = 544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 543
                self.match(s_cypherParser.SP)


            self.state = 546
            self.s_DeleteItem()
            self.state = 557
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 548
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 547
                        self.match(s_cypherParser.SP)


                    self.state = 550
                    self.match(s_cypherParser.T__0)
                    self.state = 552
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 551
                        self.match(s_cypherParser.SP)


                    self.state = 554
                    self.s_DeleteItem() 
                self.state = 559
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

            self.state = 567
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 560
                    self.match(s_cypherParser.SP)


                self.state = 565
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [50]:
                    self.state = 563
                    self.s_AtTime()
                    pass
                elif token in [52]:
                    self.state = 564
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def s_PropertyLookupName(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DeleteItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DeleteItem" ):
                listener.enterS_DeleteItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DeleteItem" ):
                listener.exitS_DeleteItem(self)




    def s_DeleteItem(self):

        localctx = s_cypherParser.S_DeleteItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_s_DeleteItem)
        self._la = 0 # Token type
        try:
            self.state = 590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 569
                self.oC_Expression()
                self.state = 570
                self.s_PropertyLookupName()
                self.state = 578
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 572
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 571
                        self.match(s_cypherParser.SP)


                    self.state = 576
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [48]:
                        self.state = 574
                        self.match(s_cypherParser.PoundValue)
                        pass
                    elif token in [46]:
                        self.state = 575
                        self.s_AtTElement()
                        pass
                    else:
                        raise NoViableAltException(self)



                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 580
                self.oC_Expression()
                self.state = 588
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                if la_ == 1:
                    self.state = 582
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 581
                        self.match(s_cypherParser.SP)


                    self.state = 586
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [48]:
                        self.state = 584
                        self.match(s_cypherParser.PoundValue)
                        pass
                    elif token in [46]:
                        self.state = 585
                        self.s_AtTElement()
                        pass
                    else:
                        raise NoViableAltException(self)



                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = s_cypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_oC_RemoveItem)
        try:
            self.state = 596
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 592
                self.oC_Variable()
                self.state = 593
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 595
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTime" ):
                listener.enterS_AtTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTime" ):
                listener.exitS_AtTime(self)




    def s_AtTime(self):

        localctx = s_cypherParser.S_AtTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_s_AtTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.match(s_cypherParser.AT_TIME)
            self.state = 600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 599
                self.match(s_cypherParser.SP)


            self.state = 602
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_BetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Between

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Between" ):
                listener.enterS_Between(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Between" ):
                listener.exitS_Between(self)




    def s_Between(self):

        localctx = s_cypherParser.S_BetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_s_Between)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.match(s_cypherParser.BETWEEN)
            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 605
                self.match(s_cypherParser.SP)


            self.state = 608
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimeWindowLimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_Snapshot(self):
            return self.getTypedRuleContext(s_cypherParser.S_SnapshotContext,0)


        def s_Scope(self):
            return self.getTypedRuleContext(s_cypherParser.S_ScopeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimeWindowLimit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimeWindowLimit" ):
                listener.enterS_TimeWindowLimit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimeWindowLimit" ):
                listener.exitS_TimeWindowLimit(self)




    def s_TimeWindowLimit(self):

        localctx = s_cypherParser.S_TimeWindowLimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_s_TimeWindowLimit)
        try:
            self.state = 612
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51]:
                self.enterOuterAlt(localctx, 1)
                self.state = 610
                self.s_Snapshot()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 611
                self.s_Scope()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def s_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.S_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = s_cypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self.match(s_cypherParser.CALL)
            self.state = 615
            self.match(s_cypherParser.SP)
            self.state = 616
            self.oC_ExplicitProcedureInvocation()
            self.state = 623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 617
                    self.match(s_cypherParser.SP)


                self.state = 620
                self.match(s_cypherParser.YIELD)
                self.state = 621
                self.match(s_cypherParser.SP)
                self.state = 622
                self.s_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def s_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.S_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = s_cypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_oC_StandaloneCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.match(s_cypherParser.CALL)
            self.state = 626
            self.match(s_cypherParser.SP)
            self.state = 629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 627
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 628
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 640
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 631
                    self.match(s_cypherParser.SP)


                self.state = 634
                self.match(s_cypherParser.YIELD)
                self.state = 635
                self.match(s_cypherParser.SP)
                self.state = 638
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [5]:
                    self.state = 636
                    self.match(s_cypherParser.T__4)
                    pass
                elif token in [49, 52, 94, 98, 100, 101, 102, 103, 109, 130, 131, 132, 135]:
                    self.state = 637
                    self.s_YieldItems()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_ExplicitExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ExplicitExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ExplicitExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.oC_ProcedureName()
            self.state = 644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 643
                self.match(s_cypherParser.SP)


            self.state = 646
            self.match(s_cypherParser.T__5)
            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 647
                self.match(s_cypherParser.SP)


            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 293296925799811392) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 343051394345409) != 0):
                self.state = 650
                self.s_ExplicitExpression()
                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 651
                    self.match(s_cypherParser.T__0)
                    self.state = 653
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 652
                        self.match(s_cypherParser.SP)


                    self.state = 655
                    self.s_ExplicitExpression()
                    self.state = 660
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 663
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ExplicitExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ExplicitExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ExplicitExpression" ):
                listener.enterS_ExplicitExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ExplicitExpression" ):
                listener.exitS_ExplicitExpression(self)




    def s_ExplicitExpression(self):

        localctx = s_cypherParser.S_ExplicitExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_s_ExplicitExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.oC_Expression()
            self.state = 667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 666
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_YieldItems" ):
                listener.enterS_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_YieldItems" ):
                listener.exitS_YieldItems(self)




    def s_YieldItems(self):

        localctx = s_cypherParser.S_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_s_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.s_YieldItem()
            self.state = 680
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 671
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 670
                        self.match(s_cypherParser.SP)


                    self.state = 673
                    self.match(s_cypherParser.T__0)
                    self.state = 675
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 674
                        self.match(s_cypherParser.SP)


                    self.state = 677
                    self.s_YieldItem() 
                self.state = 682
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

            self.state = 687
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 683
                    self.match(s_cypherParser.SP)


                self.state = 686
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_YieldItem" ):
                listener.enterS_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_YieldItem" ):
                listener.exitS_YieldItem(self)




    def s_YieldItem(self):

        localctx = s_cypherParser.S_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_s_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.oC_ProcedureResultField()
            self.state = 694
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 690
                self.match(s_cypherParser.SP)
                self.state = 691
                self.match(s_cypherParser.AS)
                self.state = 692
                self.match(s_cypherParser.SP)
                self.state = 693
                self.oC_Variable()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_With(self):
            return self.getTypedRuleContext(s_cypherParser.S_WithContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_WithPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_WithPartQuery" ):
                listener.enterS_WithPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_WithPartQuery" ):
                listener.exitS_WithPartQuery(self)




    def s_WithPartQuery(self):

        localctx = s_cypherParser.S_WithPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_s_WithPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & 2055) != 0):
                self.state = 696
                self.oC_ReadingClause()
                self.state = 698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 697
                    self.match(s_cypherParser.SP)


                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & 64001) != 0):
                self.state = 705
                self.oC_UpdatingClause()
                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 706
                    self.match(s_cypherParser.SP)


                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 714
            self.s_With()
            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 715
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_With" ):
                listener.enterS_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_With" ):
                listener.exitS_With(self)




    def s_With(self):

        localctx = s_cypherParser.S_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_s_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self.match(s_cypherParser.WITH)
            self.state = 719
            self.oC_ProjectionBody()
            self.state = 724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 720
                    self.match(s_cypherParser.SP)


                self.state = 723
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExistentialSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExistentialSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExistentialSubquery" ):
                listener.enterOC_ExistentialSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExistentialSubquery" ):
                listener.exitOC_ExistentialSubquery(self)




    def oC_ExistentialSubquery(self):

        localctx = s_cypherParser.OC_ExistentialSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_oC_ExistentialSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.match(s_cypherParser.EXISTS)
            self.state = 728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 727
                self.match(s_cypherParser.SP)


            self.state = 730
            self.match(s_cypherParser.T__7)
            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 731
                self.match(s_cypherParser.SP)


            self.state = 742
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 72, 73]:
                self.state = 734
                self.oC_RegularQuery()
                pass
            elif token in [6, 49, 52, 94, 98, 100, 101, 102, 103, 109, 130, 131, 132, 135]:
                self.state = 735
                self.oC_Pattern()
                self.state = 740
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 737
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 736
                        self.match(s_cypherParser.SP)


                    self.state = 739
                    self.oC_Where()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 744
                self.match(s_cypherParser.SP)


            self.state = 747
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IdInCollContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = s_cypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.oC_IdInColl()
            self.state = 754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 750
                    self.match(s_cypherParser.SP)


                self.state = 753
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SnapshotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Snapshot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Snapshot" ):
                listener.enterS_Snapshot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Snapshot" ):
                listener.exitS_Snapshot(self)




    def s_Snapshot(self):

        localctx = s_cypherParser.S_SnapshotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_s_Snapshot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.match(s_cypherParser.SNAPSHOT)
            self.state = 758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 757
                self.match(s_cypherParser.SP)


            self.state = 760
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Scope" ):
                listener.enterS_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Scope" ):
                listener.exitS_Scope(self)




    def s_Scope(self):

        localctx = s_cypherParser.S_ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_s_Scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.match(s_cypherParser.SCOPE)
            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 763
                self.match(s_cypherParser.SP)


            self.state = 766
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_PathFunctionPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PathFunctionPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AnonymousPatternPartContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = s_cypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 789
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 768
                self.oC_Variable()
                self.state = 770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 769
                    self.match(s_cypherParser.SP)


                self.state = 772
                self.match(s_cypherParser.T__1)
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 773
                    self.match(s_cypherParser.SP)


                self.state = 776
                self.s_PathFunctionPattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 778
                self.oC_Variable()
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 779
                    self.match(s_cypherParser.SP)


                self.state = 782
                self.match(s_cypherParser.T__1)
                self.state = 784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 783
                    self.match(s_cypherParser.SP)


                self.state = 786
                self.oC_AnonymousPatternPart()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 788
                self.oC_AnonymousPatternPart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PathFunctionPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def s_SinglePathPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_SinglePathPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PathFunctionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PathFunctionPattern" ):
                listener.enterS_PathFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PathFunctionPattern" ):
                listener.exitS_PathFunctionPattern(self)




    def s_PathFunctionPattern(self):

        localctx = s_cypherParser.S_PathFunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_s_PathFunctionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self.oC_FunctionName()
            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 792
                self.match(s_cypherParser.SP)


            self.state = 795
            self.match(s_cypherParser.T__5)
            self.state = 797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 796
                self.match(s_cypherParser.SP)


            self.state = 799
            self.s_SinglePathPattern()
            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 800
                self.match(s_cypherParser.SP)


            self.state = 803
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SinglePathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodePatternContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,i)


        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SinglePathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SinglePathPattern" ):
                listener.enterS_SinglePathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SinglePathPattern" ):
                listener.exitS_SinglePathPattern(self)




    def s_SinglePathPattern(self):

        localctx = s_cypherParser.S_SinglePathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_s_SinglePathPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.oC_NodePattern()
            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 806
                self.match(s_cypherParser.SP)


            self.state = 809
            self.oC_RelationshipPattern()
            self.state = 811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 810
                self.match(s_cypherParser.SP)


            self.state = 813
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def s_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = s_cypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.match(s_cypherParser.T__5)
            self.state = 817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 816
                self.match(s_cypherParser.SP)


            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49 or _la==52 or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 2680059626449) != 0):
                self.state = 819
                self.oC_Variable()
                self.state = 821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 820
                    self.match(s_cypherParser.SP)




            self.state = 829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 825
                self.oC_NodeLabels()
                self.state = 827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 826
                    self.match(s_cypherParser.SP)




            self.state = 835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 831
                self.s_AtTElement()
                self.state = 833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 832
                    self.match(s_cypherParser.SP)




            self.state = 841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==26:
                self.state = 837
                self.s_Properties()
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 838
                    self.match(s_cypherParser.SP)




            self.state = 843
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertiesPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesPatternContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Properties" ):
                listener.enterS_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Properties" ):
                listener.exitS_Properties(self)




    def s_Properties(self):

        localctx = s_cypherParser.S_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_s_Properties)
        try:
            self.state = 847
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 845
                self.s_PropertiesPattern()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 846
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertyNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PropertyNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PropertyNodeContext,i)


        def s_ValueNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ValueNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ValueNodeContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertiesPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertiesPattern" ):
                listener.enterS_PropertiesPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertiesPattern" ):
                listener.exitS_PropertiesPattern(self)




    def s_PropertiesPattern(self):

        localctx = s_cypherParser.S_PropertiesPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_s_PropertiesPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self.match(s_cypherParser.T__7)
            self.state = 884
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 850
                    self.match(s_cypherParser.SP)


                self.state = 853
                self.s_PropertyNode()
                self.state = 855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 854
                    self.match(s_cypherParser.SP)


                self.state = 857
                self.match(s_cypherParser.T__9)
                self.state = 859
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 858
                    self.match(s_cypherParser.SP)


                self.state = 861
                self.s_ValueNode()
                self.state = 881
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,138,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 863
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 862
                            self.match(s_cypherParser.SP)


                        self.state = 865
                        self.match(s_cypherParser.T__0)
                        self.state = 867
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 866
                            self.match(s_cypherParser.SP)


                        self.state = 869
                        self.s_PropertyNode()
                        self.state = 871
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 870
                            self.match(s_cypherParser.SP)


                        self.state = 873
                        self.match(s_cypherParser.T__9)
                        self.state = 875
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 874
                            self.match(s_cypherParser.SP)


                        self.state = 877
                        self.s_ValueNode() 
                    self.state = 883
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,138,self._ctx)



            self.state = 887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 886
                self.match(s_cypherParser.SP)


            self.state = 889
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyNode" ):
                listener.enterS_PropertyNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyNode" ):
                listener.exitS_PropertyNode(self)




    def s_PropertyNode(self):

        localctx = s_cypherParser.S_PropertyNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_s_PropertyNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.oC_PropertyKeyName()
            self.state = 896
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 892
                    self.match(s_cypherParser.SP)


                self.state = 895
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ValueNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ValueNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ValueNode" ):
                listener.enterS_ValueNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ValueNode" ):
                listener.exitS_ValueNode(self)




    def s_ValueNode(self):

        localctx = s_cypherParser.S_ValueNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_s_ValueNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 898
            self.oC_Expression()
            self.state = 903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 899
                    self.match(s_cypherParser.SP)


                self.state = 902
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RangeLiteralContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = s_cypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.match(s_cypherParser.T__10)
            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 906
                self.match(s_cypherParser.SP)


            self.state = 913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49 or _la==52 or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 2680059626449) != 0):
                self.state = 909
                self.oC_Variable()
                self.state = 911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 910
                    self.match(s_cypherParser.SP)




            self.state = 919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 915
                self.oC_RelationshipTypes()
                self.state = 917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 916
                    self.match(s_cypherParser.SP)




            self.state = 922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 921
                self.oC_RangeLiteral()


            self.state = 928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 924
                self.s_AtTElement()
                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 925
                    self.match(s_cypherParser.SP)




            self.state = 934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==26:
                self.state = 930
                self.oC_Properties()
                self.state = 932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 931
                    self.match(s_cypherParser.SP)




            self.state = 936
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_StringListNullPredicateExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,i)


        def s_ComparisonOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ComparisonOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ComparisonOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = s_cypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.oC_StringListNullPredicateExpression()
            self.state = 950
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,157,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 940
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 939
                        self.match(s_cypherParser.SP)


                    self.state = 942
                    self.s_ComparisonOperator()
                    self.state = 944
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 943
                        self.match(s_cypherParser.SP)


                    self.state = 946
                    self.oC_StringListNullPredicateExpression() 
                self.state = 952
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,157,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def s_TimePredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateExpressionContext,0)


        def oC_StringPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringPredicateExpressionContext,0)


        def oC_ListPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListPredicateExpressionContext,0)


        def oC_NullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NullPredicateExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringListNullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullPredicateExpression" ):
                listener.enterOC_StringListNullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullPredicateExpression" ):
                listener.exitOC_StringListNullPredicateExpression(self)




    def oC_StringListNullPredicateExpression(self):

        localctx = s_cypherParser.OC_StringListNullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_oC_StringListNullPredicateExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.oC_AddOrSubtractExpression()
            self.state = 958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 954
                self.s_TimePredicateExpression()

            elif la_ == 2:
                self.state = 955
                self.oC_StringPredicateExpression()

            elif la_ == 3:
                self.state = 956
                self.oC_ListPredicateExpression()

            elif la_ == 4:
                self.state = 957
                self.oC_NullPredicateExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def s_AddOrSubtractOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AddOrSubtractOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.oC_MultiplyDivideModuloExpression()
            self.state = 972
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 962
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 961
                        self.match(s_cypherParser.SP)


                    self.state = 964
                    self.s_AddOrSubtractOperator()
                    self.state = 966
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 965
                        self.match(s_cypherParser.SP)


                    self.state = 968
                    self.oC_MultiplyDivideModuloExpression() 
                self.state = 974
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MultiplyDivideModuloOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MultiplyDivideModuloOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MultiplyDivideModuloOperator" ):
                listener.enterS_MultiplyDivideModuloOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MultiplyDivideModuloOperator" ):
                listener.exitS_MultiplyDivideModuloOperator(self)




    def s_MultiplyDivideModuloOperator(self):

        localctx = s_cypherParser.S_MultiplyDivideModuloOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_s_MultiplyDivideModuloOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 24608) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PowerOfOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PowerOfOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PowerOfOperator" ):
                listener.enterS_PowerOfOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PowerOfOperator" ):
                listener.exitS_PowerOfOperator(self)




    def s_PowerOfOperator(self):

        localctx = s_cypherParser.S_PowerOfOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_s_PowerOfOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.match(s_cypherParser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AddOrSubtractOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AddOrSubtractOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AddOrSubtractOperator" ):
                listener.enterS_AddOrSubtractOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AddOrSubtractOperator" ):
                listener.exitS_AddOrSubtractOperator(self)




    def s_AddOrSubtractOperator(self):

        localctx = s_cypherParser.S_AddOrSubtractOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_s_AddOrSubtractOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            _la = self._input.LA(1)
            if not(_la==16 or _la==17):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ComparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ComparisonOperator" ):
                listener.enterS_ComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ComparisonOperator" ):
                listener.exitS_ComparisonOperator(self)




    def s_ComparisonOperator(self):

        localctx = s_cypherParser.S_ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_s_ComparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8126468) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PowerOfExpressionContext,i)


        def s_MultiplyDivideModuloOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MultiplyDivideModuloOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MultiplyDivideModuloOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = s_cypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            self.oC_PowerOfExpression()
            self.state = 995
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,164,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 985
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 984
                        self.match(s_cypherParser.SP)


                    self.state = 987
                    self.s_MultiplyDivideModuloOperator()
                    self.state = 989
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 988
                        self.match(s_cypherParser.SP)


                    self.state = 991
                    self.oC_PowerOfExpression() 
                self.state = 997
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def s_PowerOfOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PowerOfOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PowerOfOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = s_cypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 998
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 1010
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,167,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1000
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 999
                        self.match(s_cypherParser.SP)


                    self.state = 1002
                    self.s_PowerOfOperator()
                    self.state = 1004
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1003
                        self.match(s_cypherParser.SP)


                    self.state = 1006
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 1012
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def s_PoundTExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_PoundTExpressionContext,0)


        def s_SingleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_SingleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_SingleIndexExpressionContext,i)


        def s_DoubleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DoubleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DoubleIndexExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = s_cypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_oC_ListOperatorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 1013
                self.oC_PropertyOrLabelsExpression()
                pass

            elif la_ == 2:
                self.state = 1014
                self.s_PoundTExpression()
                pass


            self.state = 1021
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1019
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                    if la_ == 1:
                        self.state = 1017
                        self.s_SingleIndexExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1018
                        self.s_DoubleIndexExpression()
                        pass

             
                self.state = 1023
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SingleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SingleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SingleIndexExpression" ):
                listener.enterS_SingleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SingleIndexExpression" ):
                listener.exitS_SingleIndexExpression(self)




    def s_SingleIndexExpression(self):

        localctx = s_cypherParser.S_SingleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_s_SingleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1024
                self.match(s_cypherParser.SP)


            self.state = 1027
            self.match(s_cypherParser.T__10)
            self.state = 1029
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1028
                self.match(s_cypherParser.SP)


            self.state = 1031
            self.s_LeftExpression()
            self.state = 1033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1032
                self.match(s_cypherParser.SP)


            self.state = 1035
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DoubleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def s_RightExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_RightExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DoubleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DoubleIndexExpression" ):
                listener.enterS_DoubleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DoubleIndexExpression" ):
                listener.exitS_DoubleIndexExpression(self)




    def s_DoubleIndexExpression(self):

        localctx = s_cypherParser.S_DoubleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_s_DoubleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1037
                self.match(s_cypherParser.SP)


            self.state = 1040
            self.match(s_cypherParser.T__10)
            self.state = 1042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.state = 1041
                self.match(s_cypherParser.SP)


            self.state = 1045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 293296925799811392) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 343051394345409) != 0):
                self.state = 1044
                self.s_LeftExpression()


            self.state = 1048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1047
                self.match(s_cypherParser.SP)


            self.state = 1050
            self.match(s_cypherParser.T__22)
            self.state = 1052
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 1051
                self.match(s_cypherParser.SP)


            self.state = 1055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 293296925799811392) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 343051394345409) != 0):
                self.state = 1054
                self.s_RightExpression()


            self.state = 1058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1057
                self.match(s_cypherParser.SP)


            self.state = 1060
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_LeftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_LeftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_LeftExpression" ):
                listener.enterS_LeftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_LeftExpression" ):
                listener.exitS_LeftExpression(self)




    def s_LeftExpression(self):

        localctx = s_cypherParser.S_LeftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_s_LeftExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_RightExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_RightExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_RightExpression" ):
                listener.enterS_RightExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_RightExpression" ):
                listener.exitS_RightExpression(self)




    def s_RightExpression(self):

        localctx = s_cypherParser.S_RightExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_s_RightExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyOrLabelsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_PoundTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_PoundTElementContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyOrLabelsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyOrLabelsExpression" ):
                listener.enterOC_PropertyOrLabelsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyOrLabelsExpression" ):
                listener.exitOC_PropertyOrLabelsExpression(self)




    def oC_PropertyOrLabelsExpression(self):

        localctx = s_cypherParser.OC_PropertyOrLabelsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_oC_PropertyOrLabelsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066
            self.oC_Atom()
            self.state = 1073
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,182,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1068
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1067
                        self.match(s_cypherParser.SP)


                    self.state = 1070
                    self.oC_PropertyLookup() 
                self.state = 1075
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

            self.state = 1083
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                self.state = 1077
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1076
                    self.match(s_cypherParser.SP)


                self.state = 1081
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10]:
                    self.state = 1079
                    self.oC_NodeLabels()
                    pass
                elif token in [47]:
                    self.state = 1080
                    self.s_PoundTElement()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PoundTExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def s_PropertyLookupTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupTimeContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def s_PropertyLookupName(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_PoundTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_PoundTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PoundTExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PoundTExpression" ):
                listener.enterS_PoundTExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PoundTExpression" ):
                listener.exitS_PoundTExpression(self)




    def s_PoundTExpression(self):

        localctx = s_cypherParser.S_PoundTExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_s_PoundTExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            self.oC_Atom()
            self.state = 1092
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1087
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1086
                        self.match(s_cypherParser.SP)


                    self.state = 1089
                    self.oC_PropertyLookup() 
                self.state = 1094
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

            self.state = 1105
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.state = 1095
                self.s_PropertyLookupName()
                self.state = 1103
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
                if la_ == 1:
                    self.state = 1097
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1096
                        self.match(s_cypherParser.SP)


                    self.state = 1101
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [48]:
                        self.state = 1099
                        self.match(s_cypherParser.PoundValue)
                        pass
                    elif token in [47]:
                        self.state = 1100
                        self.s_PoundTElement()
                        pass
                    else:
                        raise NoViableAltException(self)





            self.state = 1108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1107
                self.match(s_cypherParser.SP)


            self.state = 1110
            self.s_PropertyLookupTime()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyLookupNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyLookupName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyLookupName" ):
                listener.enterS_PropertyLookupName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyLookupName" ):
                listener.exitS_PropertyLookupName(self)




    def s_PropertyLookupName(self):

        localctx = s_cypherParser.S_PropertyLookupNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_s_PropertyLookupName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1112
                self.match(s_cypherParser.SP)


            self.state = 1115
            self.match(s_cypherParser.T__3)
            self.state = 1117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1116
                self.match(s_cypherParser.SP)


            self.state = 1119
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyLookupTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_TimePropertyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_TimePropertyItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_TimePropertyItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyLookupTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyLookupTime" ):
                listener.enterS_PropertyLookupTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyLookupTime" ):
                listener.exitS_PropertyLookupTime(self)




    def s_PropertyLookupTime(self):

        localctx = s_cypherParser.S_PropertyLookupTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_s_PropertyLookupTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self.match(s_cypherParser.AtT)
            self.state = 1128
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,196,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1123
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1122
                        self.match(s_cypherParser.SP)


                    self.state = 1125
                    self.s_TimePropertyItem() 
                self.state = 1130
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,196,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePropertyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePropertyItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePropertyItem" ):
                listener.enterS_TimePropertyItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePropertyItem" ):
                listener.exitS_TimePropertyItem(self)




    def s_TimePropertyItem(self):

        localctx = s_cypherParser.S_TimePropertyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_s_TimePropertyItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self.match(s_cypherParser.T__3)
            self.state = 1133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1132
                self.match(s_cypherParser.SP)


            self.state = 1135
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateExpression" ):
                listener.enterS_TimePredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateExpression" ):
                listener.exitS_TimePredicateExpression(self)




    def s_TimePredicateExpression(self):

        localctx = s_cypherParser.S_TimePredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_s_TimePredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.match(s_cypherParser.SP)
            self.state = 1138
            _la = self._input.LA(1)
            if not(_la==55 or _la==56):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1139
            self.match(s_cypherParser.SP)
            self.state = 1140
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_TElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_TElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTElement" ):
                listener.enterS_AtTElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTElement" ):
                listener.exitS_AtTElement(self)




    def s_AtTElement(self):

        localctx = s_cypherParser.S_AtTElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_s_AtTElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1142
            self.match(s_cypherParser.AtT)
            self.state = 1144
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1143
                self.match(s_cypherParser.SP)


            self.state = 1146
            self.s_TElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PoundTElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PoundT(self):
            return self.getToken(s_cypherParser.PoundT, 0)

        def s_TElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_TElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PoundTElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PoundTElement" ):
                listener.enterS_PoundTElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PoundTElement" ):
                listener.exitS_PoundTElement(self)




    def s_PoundTElement(self):

        localctx = s_cypherParser.S_PoundTElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_s_PoundTElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1148
            self.match(s_cypherParser.PoundT)
            self.state = 1150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1149
                self.match(s_cypherParser.SP)


            self.state = 1152
            self.s_TElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def s_TimePointLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_TimePointLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_TimePointLiteralContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TElement" ):
                listener.enterS_TElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TElement" ):
                listener.exitS_TElement(self)




    def s_TElement(self):

        localctx = s_cypherParser.S_TElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_s_TElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self.match(s_cypherParser.T__5)
            self.state = 1164
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.state = 1156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1155
                    self.match(s_cypherParser.SP)


                self.state = 1158
                self.s_TimePointLiteral()
                self.state = 1160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1159
                    self.match(s_cypherParser.SP)


                self.state = 1162
                self.match(s_cypherParser.T__0)


            self.state = 1167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1166
                self.match(s_cypherParser.SP)


            self.state = 1171
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49]:
                self.state = 1169
                self.match(s_cypherParser.NOW)
                pass
            elif token in [8, 118]:
                self.state = 1170
                self.s_TimePointLiteral()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1173
                self.match(s_cypherParser.SP)


            self.state = 1176
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePointLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePointLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePointLiteral" ):
                listener.enterS_TimePointLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePointLiteral" ):
                listener.exitS_TimePointLiteral(self)




    def s_TimePointLiteral(self):

        localctx = s_cypherParser.S_TimePointLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_s_TimePointLiteral)
        try:
            self.state = 1180
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [118]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1178
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1179
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def s_FunctionInvocationExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_FunctionInvocationExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_FunctionInvocationExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = s_cypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self.oC_FunctionName()
            self.state = 1184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1183
                self.match(s_cypherParser.SP)


            self.state = 1186
            self.match(s_cypherParser.T__5)
            self.state = 1188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1187
                self.match(s_cypherParser.SP)


            self.state = 1194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 1190
                self.match(s_cypherParser.DISTINCT)
                self.state = 1192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1191
                    self.match(s_cypherParser.SP)




            self.state = 1213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 293296925799811392) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 343051394345409) != 0):
                self.state = 1196
                self.s_FunctionInvocationExpression()
                self.state = 1198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1197
                    self.match(s_cypherParser.SP)


                self.state = 1210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 1200
                    self.match(s_cypherParser.T__0)
                    self.state = 1202
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1201
                        self.match(s_cypherParser.SP)


                    self.state = 1204
                    self.s_FunctionInvocationExpression()
                    self.state = 1206
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1205
                        self.match(s_cypherParser.SP)


                    self.state = 1212
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1215
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_FunctionInvocationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_FunctionInvocationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_FunctionInvocationExpression" ):
                listener.enterS_FunctionInvocationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_FunctionInvocationExpression" ):
                listener.exitS_FunctionInvocationExpression(self)




    def s_FunctionInvocationExpression(self):

        localctx = s_cypherParser.S_FunctionInvocationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_s_FunctionInvocationExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1217
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_ListLiteralExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ListLiteralExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ListLiteralExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = s_cypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            self.match(s_cypherParser.T__10)
            self.state = 1221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1220
                self.match(s_cypherParser.SP)


            self.state = 1240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 293296925799811392) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 343051394345409) != 0):
                self.state = 1223
                self.s_ListLiteralExpression()
                self.state = 1225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1224
                    self.match(s_cypherParser.SP)


                self.state = 1237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 1227
                    self.match(s_cypherParser.T__0)
                    self.state = 1229
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1228
                        self.match(s_cypherParser.SP)


                    self.state = 1231
                    self.s_ListLiteralExpression()
                    self.state = 1233
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1232
                        self.match(s_cypherParser.SP)


                    self.state = 1239
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1242
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ListLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ListLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ListLiteralExpression" ):
                listener.enterS_ListLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ListLiteralExpression" ):
                listener.exitS_ListLiteralExpression(self)




    def s_ListLiteralExpression(self):

        localctx = s_cypherParser.S_ListLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_s_ListLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1244
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_MapKeyValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MapKeyValueContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MapKeyValueContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = s_cypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1246
            self.match(s_cypherParser.T__7)
            self.state = 1248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1247
                self.match(s_cypherParser.SP)


            self.state = 1261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & 1297036692676411391) != 0) or ((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & 40959) != 0):
                self.state = 1250
                self.s_MapKeyValue()
                self.state = 1258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 1251
                    self.match(s_cypherParser.T__0)
                    self.state = 1253
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1252
                        self.match(s_cypherParser.SP)


                    self.state = 1255
                    self.s_MapKeyValue()
                    self.state = 1260
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1263
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MapKeyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MapKeyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MapKeyValue" ):
                listener.enterS_MapKeyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MapKeyValue" ):
                listener.exitS_MapKeyValue(self)




    def s_MapKeyValue(self):

        localctx = s_cypherParser.S_MapKeyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_s_MapKeyValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1265
            self.oC_PropertyKeyName()
            self.state = 1267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1266
                self.match(s_cypherParser.SP)


            self.state = 1269
            self.match(s_cypherParser.T__9)
            self.state = 1271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1270
                self.match(s_cypherParser.SP)


            self.state = 1273
            self.oC_Expression()
            self.state = 1275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1274
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(s_cypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(s_cypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(s_cypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(s_cypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(s_cypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = s_cypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1277
            _la = self._input.LA(1)
            if not(_la==49 or _la==52 or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 2680059626449) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(s_cypherParser.AND, 0)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def OR(self):
            return self.getToken(s_cypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(s_cypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(s_cypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(s_cypherParser.DO, 0)

        def FOR(self):
            return self.getToken(s_cypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(s_cypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(s_cypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(s_cypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(s_cypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(s_cypherParser.OF, 0)

        def ADD(self):
            return self.getToken(s_cypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(s_cypherParser.DROP, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = s_cypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1279
            _la = self._input.LA(1)
            if not(((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & 128317405001678847) != 0) or ((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(s_cypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = s_cypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1281
                self.match(s_cypherParser.SP)


            self.state = 1284
            self.oC_Statement()
            self.state = 1289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.state = 1286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1285
                    self.match(s_cypherParser.SP)


                self.state = 1288
                self.match(s_cypherParser.T__23)


            self.state = 1292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1291
                self.match(s_cypherParser.SP)


            self.state = 1294
            self.match(s_cypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = s_cypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1296
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = s_cypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self.oC_SingleQuery()
            self.state = 1305
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,234,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1300
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1299
                        self.match(s_cypherParser.SP)


                    self.state = 1302
                    self.oC_Union() 
                self.state = 1307
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,234,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = s_cypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 1320
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1308
                self.match(s_cypherParser.UNION)
                self.state = 1309
                self.match(s_cypherParser.SP)
                self.state = 1310
                self.match(s_cypherParser.ALL)
                self.state = 1312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1311
                    self.match(s_cypherParser.SP)


                self.state = 1314
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1315
                self.match(s_cypherParser.UNION)
                self.state = 1317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1316
                    self.match(s_cypherParser.SP)


                self.state = 1319
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = s_cypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_SingleQuery)
        try:
            self.state = 1324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1322
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1323
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = s_cypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 1361
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & 2055) != 0):
                    self.state = 1326
                    self.oC_ReadingClause()
                    self.state = 1328
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1327
                        self.match(s_cypherParser.SP)


                    self.state = 1334
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1335
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & 2055) != 0):
                    self.state = 1336
                    self.oC_ReadingClause()
                    self.state = 1338
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1337
                        self.match(s_cypherParser.SP)


                    self.state = 1344
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1345
                self.oC_UpdatingClause()
                self.state = 1352
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,244,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1347
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 1346
                            self.match(s_cypherParser.SP)


                        self.state = 1349
                        self.oC_UpdatingClause() 
                    self.state = 1354
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,244,self._ctx)

                self.state = 1359
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
                if la_ == 1:
                    self.state = 1356
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1355
                        self.match(s_cypherParser.SP)


                    self.state = 1358
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(s_cypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = s_cypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_ReadingClause)
        try:
            self.state = 1366
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [59, 60]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1363
                self.oC_Match()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1364
                self.oC_Unwind()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1365
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = s_cypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1368
            self.match(s_cypherParser.UNWIND)
            self.state = 1370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1369
                self.match(s_cypherParser.SP)


            self.state = 1372
            self.oC_Expression()
            self.state = 1373
            self.match(s_cypherParser.SP)
            self.state = 1374
            self.match(s_cypherParser.AS)
            self.state = 1375
            self.match(s_cypherParser.SP)
            self.state = 1376
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = s_cypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1378
            self.match(s_cypherParser.MERGE)
            self.state = 1380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1379
                self.match(s_cypherParser.SP)


            self.state = 1382
            self.oC_PatternPart()
            self.state = 1387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==136:
                self.state = 1383
                self.match(s_cypherParser.SP)
                self.state = 1384
                self.oC_MergeAction()
                self.state = 1389
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = s_cypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_MergeAction)
        try:
            self.state = 1400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1390
                self.match(s_cypherParser.ON)
                self.state = 1391
                self.match(s_cypherParser.SP)
                self.state = 1392
                self.match(s_cypherParser.MATCH)
                self.state = 1393
                self.match(s_cypherParser.SP)
                self.state = 1394
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1395
                self.match(s_cypherParser.ON)
                self.state = 1396
                self.match(s_cypherParser.SP)
                self.state = 1397
                self.match(s_cypherParser.CREATE)
                self.state = 1398
                self.match(s_cypherParser.SP)
                self.state = 1399
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = s_cypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1402
            self.match(s_cypherParser.CREATE)
            self.state = 1404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1403
                self.match(s_cypherParser.SP)


            self.state = 1406
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = s_cypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1408
            self.match(s_cypherParser.SET)
            self.state = 1410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1409
                self.match(s_cypherParser.SP)


            self.state = 1412
            self.oC_SetItem()
            self.state = 1423
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,257,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1414
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1413
                        self.match(s_cypherParser.SP)


                    self.state = 1416
                    self.match(s_cypherParser.T__0)
                    self.state = 1418
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1417
                        self.match(s_cypherParser.SP)


                    self.state = 1420
                    self.oC_SetItem() 
                self.state = 1425
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,257,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = s_cypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 1426
                self.match(s_cypherParser.DETACH)
                self.state = 1427
                self.match(s_cypherParser.SP)


            self.state = 1430
            self.match(s_cypherParser.DELETE)
            self.state = 1432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1431
                self.match(s_cypherParser.SP)


            self.state = 1434
            self.oC_Expression()
            self.state = 1445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1 or _la==136:
                self.state = 1436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1435
                    self.match(s_cypherParser.SP)


                self.state = 1438
                self.match(s_cypherParser.T__0)
                self.state = 1440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1439
                    self.match(s_cypherParser.SP)


                self.state = 1442
                self.oC_Expression()
                self.state = 1447
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = s_cypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1448
            self.match(s_cypherParser.REMOVE)
            self.state = 1449
            self.match(s_cypherParser.SP)
            self.state = 1450
            self.oC_RemoveItem()
            self.state = 1461
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,265,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1452
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1451
                        self.match(s_cypherParser.SP)


                    self.state = 1454
                    self.match(s_cypherParser.T__0)
                    self.state = 1456
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1455
                        self.match(s_cypherParser.SP)


                    self.state = 1458
                    self.oC_RemoveItem() 
                self.state = 1463
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,265,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = s_cypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1464
            self.oC_YieldItem()
            self.state = 1475
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,268,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1466
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1465
                        self.match(s_cypherParser.SP)


                    self.state = 1468
                    self.match(s_cypherParser.T__0)
                    self.state = 1470
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1469
                        self.match(s_cypherParser.SP)


                    self.state = 1472
                    self.oC_YieldItem() 
                self.state = 1477
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,268,self._ctx)

            self.state = 1482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83 or _la==136:
                self.state = 1479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1478
                    self.match(s_cypherParser.SP)


                self.state = 1481
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = s_cypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.state = 1484
                self.oC_ProcedureResultField()
                self.state = 1485
                self.match(s_cypherParser.SP)
                self.state = 1486
                self.match(s_cypherParser.AS)
                self.state = 1487
                self.match(s_cypherParser.SP)


            self.state = 1491
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = s_cypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1493
            self.match(s_cypherParser.WITH)
            self.state = 1494
            self.oC_ProjectionBody()
            self.state = 1499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83 or _la==136:
                self.state = 1496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1495
                    self.match(s_cypherParser.SP)


                self.state = 1498
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = s_cypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1501
            self.match(s_cypherParser.RETURN)
            self.state = 1502
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)




    def oC_ProjectionBody(self):

        localctx = s_cypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1508
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
            if la_ == 1:
                self.state = 1505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1504
                    self.match(s_cypherParser.SP)


                self.state = 1507
                self.match(s_cypherParser.DISTINCT)


            self.state = 1510
            self.match(s_cypherParser.SP)
            self.state = 1511
            self.oC_ProjectionItems()
            self.state = 1514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.state = 1512
                self.match(s_cypherParser.SP)
                self.state = 1513
                self.oC_Order()


            self.state = 1518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.state = 1516
                self.match(s_cypherParser.SP)
                self.state = 1517
                self.oC_Skip()


            self.state = 1522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.state = 1520
                self.match(s_cypherParser.SP)
                self.state = 1521
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)




    def oC_ProjectionItems(self):

        localctx = s_cypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 1552
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1524
                self.match(s_cypherParser.T__4)
                self.state = 1535
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,281,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1526
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 1525
                            self.match(s_cypherParser.SP)


                        self.state = 1528
                        self.match(s_cypherParser.T__0)
                        self.state = 1530
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 1529
                            self.match(s_cypherParser.SP)


                        self.state = 1532
                        self.oC_ProjectionItem() 
                    self.state = 1537
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,281,self._ctx)

                pass
            elif token in [6, 8, 11, 16, 17, 26, 49, 52, 58, 87, 93, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 116, 117, 118, 130, 131, 132, 135]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1538
                self.oC_ProjectionItem()
                self.state = 1549
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,284,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1540
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 1539
                            self.match(s_cypherParser.SP)


                        self.state = 1542
                        self.match(s_cypherParser.T__0)
                        self.state = 1544
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 1543
                            self.match(s_cypherParser.SP)


                        self.state = 1546
                        self.oC_ProjectionItem() 
                    self.state = 1551
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,284,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)




    def oC_ProjectionItem(self):

        localctx = s_cypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_ProjectionItem)
        try:
            self.state = 1561
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1554
                self.oC_Expression()
                self.state = 1555
                self.match(s_cypherParser.SP)
                self.state = 1556
                self.match(s_cypherParser.AS)
                self.state = 1557
                self.match(s_cypherParser.SP)
                self.state = 1558
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1560
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = s_cypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1563
            self.match(s_cypherParser.ORDER)
            self.state = 1564
            self.match(s_cypherParser.SP)
            self.state = 1565
            self.match(s_cypherParser.BY)
            self.state = 1566
            self.match(s_cypherParser.SP)
            self.state = 1567
            self.oC_SortItem()
            self.state = 1575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 1568
                self.match(s_cypherParser.T__0)
                self.state = 1570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1569
                    self.match(s_cypherParser.SP)


                self.state = 1572
                self.oC_SortItem()
                self.state = 1577
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = s_cypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1578
            self.match(s_cypherParser.L_SKIP)
            self.state = 1579
            self.match(s_cypherParser.SP)
            self.state = 1580
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = s_cypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1582
            self.match(s_cypherParser.LIMIT)
            self.state = 1583
            self.match(s_cypherParser.SP)
            self.state = 1584
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = s_cypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1586
            self.oC_Expression()
            self.state = 1591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
            if la_ == 1:
                self.state = 1588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1587
                    self.match(s_cypherParser.SP)


                self.state = 1590
                _la = self._input.LA(1)
                if not(((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = s_cypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1593
            self.match(s_cypherParser.WHERE)
            self.state = 1594
            self.match(s_cypherParser.SP)
            self.state = 1595
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = s_cypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1597
            self.oC_PatternPart()
            self.state = 1608
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,293,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1599
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1598
                        self.match(s_cypherParser.SP)


                    self.state = 1601
                    self.match(s_cypherParser.T__0)
                    self.state = 1603
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1602
                        self.match(s_cypherParser.SP)


                    self.state = 1605
                    self.oC_PatternPart() 
                self.state = 1610
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,293,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = s_cypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1611
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = s_cypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 1627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1613
                self.oC_NodePattern()
                self.state = 1620
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,295,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1615
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 1614
                            self.match(s_cypherParser.SP)


                        self.state = 1617
                        self.oC_PatternElementChain() 
                    self.state = 1622
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,295,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1623
                self.match(s_cypherParser.T__5)
                self.state = 1624
                self.oC_PatternElement()
                self.state = 1625
                self.match(s_cypherParser.T__6)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = s_cypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1629
            self.oC_NodePattern()
            self.state = 1634 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1631
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1630
                        self.match(s_cypherParser.SP)


                    self.state = 1633
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 1636 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,298,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = s_cypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1638
            self.oC_RelationshipPattern()
            self.state = 1640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1639
                self.match(s_cypherParser.SP)


            self.state = 1642
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = s_cypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 1708
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1644
                self.oC_LeftArrowHead()
                self.state = 1646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1645
                    self.match(s_cypherParser.SP)


                self.state = 1648
                self.oC_Dash()
                self.state = 1650
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
                if la_ == 1:
                    self.state = 1649
                    self.match(s_cypherParser.SP)


                self.state = 1653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1652
                    self.oC_RelationshipDetail()


                self.state = 1656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1655
                    self.match(s_cypherParser.SP)


                self.state = 1658
                self.oC_Dash()
                self.state = 1660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1659
                    self.match(s_cypherParser.SP)


                self.state = 1662
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1664
                self.oC_LeftArrowHead()
                self.state = 1666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1665
                    self.match(s_cypherParser.SP)


                self.state = 1668
                self.oC_Dash()
                self.state = 1670
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
                if la_ == 1:
                    self.state = 1669
                    self.match(s_cypherParser.SP)


                self.state = 1673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1672
                    self.oC_RelationshipDetail()


                self.state = 1676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1675
                    self.match(s_cypherParser.SP)


                self.state = 1678
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1680
                self.oC_Dash()
                self.state = 1682
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
                if la_ == 1:
                    self.state = 1681
                    self.match(s_cypherParser.SP)


                self.state = 1685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1684
                    self.oC_RelationshipDetail()


                self.state = 1688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1687
                    self.match(s_cypherParser.SP)


                self.state = 1690
                self.oC_Dash()
                self.state = 1692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1691
                    self.match(s_cypherParser.SP)


                self.state = 1694
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1696
                self.oC_Dash()
                self.state = 1698
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
                if la_ == 1:
                    self.state = 1697
                    self.match(s_cypherParser.SP)


                self.state = 1701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1700
                    self.oC_RelationshipDetail()


                self.state = 1704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1703
                    self.match(s_cypherParser.SP)


                self.state = 1706
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = s_cypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_oC_Properties)
        try:
            self.state = 1712
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1710
                self.oC_MapLiteral()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1711
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = s_cypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1714
            self.match(s_cypherParser.T__9)
            self.state = 1716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1715
                self.match(s_cypherParser.SP)


            self.state = 1718
            self.oC_RelTypeName()
            self.state = 1732
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,322,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1720
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1719
                        self.match(s_cypherParser.SP)


                    self.state = 1722
                    self.match(s_cypherParser.T__24)
                    self.state = 1724
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==10:
                        self.state = 1723
                        self.match(s_cypherParser.T__9)


                    self.state = 1727
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1726
                        self.match(s_cypherParser.SP)


                    self.state = 1729
                    self.oC_RelTypeName() 
                self.state = 1734
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,322,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = s_cypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1735
            self.oC_NodeLabel()
            self.state = 1742
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,324,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1737
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1736
                        self.match(s_cypherParser.SP)


                    self.state = 1739
                    self.oC_NodeLabel() 
                self.state = 1744
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,324,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = s_cypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1745
            self.match(s_cypherParser.T__9)
            self.state = 1747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1746
                self.match(s_cypherParser.SP)


            self.state = 1749
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = s_cypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1751
            self.match(s_cypherParser.T__4)
            self.state = 1753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1752
                self.match(s_cypherParser.SP)


            self.state = 1759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & 7) != 0):
                self.state = 1755
                self.oC_IntegerLiteral()
                self.state = 1757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1756
                    self.match(s_cypherParser.SP)




            self.state = 1771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 1761
                self.match(s_cypherParser.T__22)
                self.state = 1763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1762
                    self.match(s_cypherParser.SP)


                self.state = 1769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & 7) != 0):
                    self.state = 1765
                    self.oC_IntegerLiteral()
                    self.state = 1767
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1766
                        self.match(s_cypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = s_cypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1773
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = s_cypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1775
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = s_cypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1777
            self.oC_Atom()
            self.state = 1782 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1779
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==136:
                        self.state = 1778
                        self.match(s_cypherParser.SP)


                    self.state = 1781
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 1784 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,334,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = s_cypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1786
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = s_cypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1788
            self.oC_XorExpression()
            self.state = 1795
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,335,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1789
                    self.match(s_cypherParser.SP)
                    self.state = 1790
                    self.match(s_cypherParser.OR)
                    self.state = 1791
                    self.match(s_cypherParser.SP)
                    self.state = 1792
                    self.oC_XorExpression() 
                self.state = 1797
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,335,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = s_cypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1798
            self.oC_AndExpression()
            self.state = 1805
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,336,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1799
                    self.match(s_cypherParser.SP)
                    self.state = 1800
                    self.match(s_cypherParser.XOR)
                    self.state = 1801
                    self.match(s_cypherParser.SP)
                    self.state = 1802
                    self.oC_AndExpression() 
                self.state = 1807
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,336,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = s_cypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1808
            self.oC_NotExpression()
            self.state = 1815
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,337,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1809
                    self.match(s_cypherParser.SP)
                    self.state = 1810
                    self.match(s_cypherParser.AND)
                    self.state = 1811
                    self.match(s_cypherParser.SP)
                    self.state = 1812
                    self.oC_NotExpression() 
                self.state = 1817
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,337,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = s_cypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==87:
                self.state = 1818
                self.match(s_cypherParser.NOT)
                self.state = 1820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1819
                    self.match(s_cypherParser.SP)


                self.state = 1826
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1827
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PartialComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PartialComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PartialComparisonExpression" ):
                listener.enterOC_PartialComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PartialComparisonExpression" ):
                listener.exitOC_PartialComparisonExpression(self)




    def oC_PartialComparisonExpression(self):

        localctx = s_cypherParser.OC_PartialComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_oC_PartialComparisonExpression)
        self._la = 0 # Token type
        try:
            self.state = 1859
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1829
                self.match(s_cypherParser.T__1)
                self.state = 1831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1830
                    self.match(s_cypherParser.SP)


                self.state = 1833
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1834
                self.match(s_cypherParser.T__17)
                self.state = 1836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1835
                    self.match(s_cypherParser.SP)


                self.state = 1838
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1839
                self.match(s_cypherParser.T__18)
                self.state = 1841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1840
                    self.match(s_cypherParser.SP)


                self.state = 1843
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1844
                self.match(s_cypherParser.T__20)
                self.state = 1846
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1845
                    self.match(s_cypherParser.SP)


                self.state = 1848
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1849
                self.match(s_cypherParser.T__19)
                self.state = 1851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1850
                    self.match(s_cypherParser.SP)


                self.state = 1853
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1854
                self.match(s_cypherParser.T__21)
                self.state = 1856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1855
                    self.match(s_cypherParser.SP)


                self.state = 1858
                self.oC_StringListNullPredicateExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringPredicateExpression" ):
                listener.enterOC_StringPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringPredicateExpression" ):
                listener.exitOC_StringPredicateExpression(self)




    def oC_StringPredicateExpression(self):

        localctx = s_cypherParser.OC_StringPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_oC_StringPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1871
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,347,self._ctx)
            if la_ == 1:
                self.state = 1861
                self.match(s_cypherParser.SP)
                self.state = 1862
                self.match(s_cypherParser.STARTS)
                self.state = 1863
                self.match(s_cypherParser.SP)
                self.state = 1864
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1865
                self.match(s_cypherParser.SP)
                self.state = 1866
                self.match(s_cypherParser.ENDS)
                self.state = 1867
                self.match(s_cypherParser.SP)
                self.state = 1868
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1869
                self.match(s_cypherParser.SP)
                self.state = 1870
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 1874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1873
                self.match(s_cypherParser.SP)


            self.state = 1876
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListPredicateExpression" ):
                listener.enterOC_ListPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListPredicateExpression" ):
                listener.exitOC_ListPredicateExpression(self)




    def oC_ListPredicateExpression(self):

        localctx = s_cypherParser.OC_ListPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_oC_ListPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1878
            self.match(s_cypherParser.SP)
            self.state = 1879
            self.match(s_cypherParser.IN)
            self.state = 1881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1880
                self.match(s_cypherParser.SP)


            self.state = 1883
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullPredicateExpression" ):
                listener.enterOC_NullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullPredicateExpression" ):
                listener.exitOC_NullPredicateExpression(self)




    def oC_NullPredicateExpression(self):

        localctx = s_cypherParser.OC_NullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_oC_NullPredicateExpression)
        try:
            self.state = 1895
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1885
                self.match(s_cypherParser.SP)
                self.state = 1886
                self.match(s_cypherParser.IS)
                self.state = 1887
                self.match(s_cypherParser.SP)
                self.state = 1888
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1889
                self.match(s_cypherParser.SP)
                self.state = 1890
                self.match(s_cypherParser.IS)
                self.state = 1891
                self.match(s_cypherParser.SP)
                self.state = 1892
                self.match(s_cypherParser.NOT)
                self.state = 1893
                self.match(s_cypherParser.SP)
                self.state = 1894
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ListOperatorExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListOperatorExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.state = 1903
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 8, 11, 26, 49, 52, 58, 93, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 116, 117, 118, 130, 131, 132, 135]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1897
                self.oC_ListOperatorExpression()
                pass
            elif token in [16, 17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1898
                _la = self._input.LA(1)
                if not(_la==16 or _la==17):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1899
                    self.match(s_cypherParser.SP)


                self.state = 1902
                self.oC_ListOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = s_cypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1905
            self.match(s_cypherParser.T__3)
            self.state = 1907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1906
                self.match(s_cypherParser.SP)


            self.state = 1909
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternComprehensionContext,0)


        def oC_Quantifier(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QuantifierContext,0)


        def oC_PatternPredicate(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPredicateContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionInvocationContext,0)


        def oC_ExistentialSubquery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExistentialSubqueryContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = s_cypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 1935
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1911
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1912
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1913
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1914
                self.match(s_cypherParser.COUNT)
                self.state = 1916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1915
                    self.match(s_cypherParser.SP)


                self.state = 1918
                self.match(s_cypherParser.T__5)
                self.state = 1920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1919
                    self.match(s_cypherParser.SP)


                self.state = 1922
                self.match(s_cypherParser.T__4)
                self.state = 1924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1923
                    self.match(s_cypherParser.SP)


                self.state = 1926
                self.match(s_cypherParser.T__6)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1927
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1928
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1929
                self.oC_Quantifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1930
                self.oC_PatternPredicate()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1931
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1932
                self.oC_FunctionInvocation()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1933
                self.oC_ExistentialSubquery()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1934
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def oC_CaseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_CaseAlternativeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = s_cypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
            if la_ == 1:
                self.state = 1937
                self.match(s_cypherParser.CASE)
                self.state = 1942 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1939
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 1938
                            self.match(s_cypherParser.SP)


                        self.state = 1941
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1944 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,359,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1946
                self.match(s_cypherParser.CASE)
                self.state = 1948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1947
                    self.match(s_cypherParser.SP)


                self.state = 1950
                self.oC_Expression()
                self.state = 1955 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1952
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==136:
                            self.state = 1951
                            self.match(s_cypherParser.SP)


                        self.state = 1954
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1957 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,362,self._ctx)

                pass


            self.state = 1969
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
            if la_ == 1:
                self.state = 1962
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1961
                    self.match(s_cypherParser.SP)


                self.state = 1964
                self.match(s_cypherParser.ELSE)
                self.state = 1966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1965
                    self.match(s_cypherParser.SP)


                self.state = 1968
                self.oC_Expression()


            self.state = 1972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1971
                self.match(s_cypherParser.SP)


            self.state = 1974
            self.match(s_cypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternative" ):
                listener.enterOC_CaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternative" ):
                listener.exitOC_CaseAlternative(self)




    def oC_CaseAlternative(self):

        localctx = s_cypherParser.OC_CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_oC_CaseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1976
            self.match(s_cypherParser.WHEN)
            self.state = 1978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1977
                self.match(s_cypherParser.SP)


            self.state = 1980
            self.oC_Expression()
            self.state = 1982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1981
                self.match(s_cypherParser.SP)


            self.state = 1984
            self.match(s_cypherParser.THEN)
            self.state = 1986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1985
                self.match(s_cypherParser.SP)


            self.state = 1988
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = s_cypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1990
            self.match(s_cypherParser.T__10)
            self.state = 1992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1991
                self.match(s_cypherParser.SP)


            self.state = 1994
            self.oC_FilterExpression()
            self.state = 2003
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
            if la_ == 1:
                self.state = 1996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1995
                    self.match(s_cypherParser.SP)


                self.state = 1998
                self.match(s_cypherParser.T__24)
                self.state = 2000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 1999
                    self.match(s_cypherParser.SP)


                self.state = 2002
                self.oC_Expression()


            self.state = 2006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 2005
                self.match(s_cypherParser.SP)


            self.state = 2008
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = s_cypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2010
            self.match(s_cypherParser.T__10)
            self.state = 2012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 2011
                self.match(s_cypherParser.SP)


            self.state = 2022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49 or _la==52 or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 2680059626449) != 0):
                self.state = 2014
                self.oC_Variable()
                self.state = 2016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2015
                    self.match(s_cypherParser.SP)


                self.state = 2018
                self.match(s_cypherParser.T__1)
                self.state = 2020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2019
                    self.match(s_cypherParser.SP)




            self.state = 2024
            self.oC_RelationshipsPattern()
            self.state = 2026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 2025
                self.match(s_cypherParser.SP)


            self.state = 2032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 2028
                self.oC_Where()
                self.state = 2030
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2029
                    self.match(s_cypherParser.SP)




            self.state = 2034
            self.match(s_cypherParser.T__24)
            self.state = 2036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 2035
                self.match(s_cypherParser.SP)


            self.state = 2038
            self.oC_Expression()
            self.state = 2040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 2039
                self.match(s_cypherParser.SP)


            self.state = 2042
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Quantifier" ):
                listener.enterOC_Quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Quantifier" ):
                listener.exitOC_Quantifier(self)




    def oC_Quantifier(self):

        localctx = s_cypherParser.OC_QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_oC_Quantifier)
        self._la = 0 # Token type
        try:
            self.state = 2100
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2044
                self.match(s_cypherParser.ALL)
                self.state = 2046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2045
                    self.match(s_cypherParser.SP)


                self.state = 2048
                self.match(s_cypherParser.T__5)
                self.state = 2050
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2049
                    self.match(s_cypherParser.SP)


                self.state = 2052
                self.oC_FilterExpression()
                self.state = 2054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2053
                    self.match(s_cypherParser.SP)


                self.state = 2056
                self.match(s_cypherParser.T__6)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2058
                self.match(s_cypherParser.ANY)
                self.state = 2060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2059
                    self.match(s_cypherParser.SP)


                self.state = 2062
                self.match(s_cypherParser.T__5)
                self.state = 2064
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2063
                    self.match(s_cypherParser.SP)


                self.state = 2066
                self.oC_FilterExpression()
                self.state = 2068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2067
                    self.match(s_cypherParser.SP)


                self.state = 2070
                self.match(s_cypherParser.T__6)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2072
                self.match(s_cypherParser.NONE)
                self.state = 2074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2073
                    self.match(s_cypherParser.SP)


                self.state = 2076
                self.match(s_cypherParser.T__5)
                self.state = 2078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2077
                    self.match(s_cypherParser.SP)


                self.state = 2080
                self.oC_FilterExpression()
                self.state = 2082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2081
                    self.match(s_cypherParser.SP)


                self.state = 2084
                self.match(s_cypherParser.T__6)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2086
                self.match(s_cypherParser.SINGLE)
                self.state = 2088
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2087
                    self.match(s_cypherParser.SP)


                self.state = 2090
                self.match(s_cypherParser.T__5)
                self.state = 2092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2091
                    self.match(s_cypherParser.SP)


                self.state = 2094
                self.oC_FilterExpression()
                self.state = 2096
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 2095
                    self.match(s_cypherParser.SP)


                self.state = 2098
                self.match(s_cypherParser.T__6)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPredicate" ):
                listener.enterOC_PatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPredicate" ):
                listener.exitOC_PatternPredicate(self)




    def oC_PatternPredicate(self):

        localctx = s_cypherParser.OC_PatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_oC_PatternPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2102
            self.oC_RelationshipsPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = s_cypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2104
            self.match(s_cypherParser.T__5)
            self.state = 2106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 2105
                self.match(s_cypherParser.SP)


            self.state = 2108
            self.oC_Expression()
            self.state = 2110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 2109
                self.match(s_cypherParser.SP)


            self.state = 2112
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = s_cypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2114
            self.oC_Variable()
            self.state = 2115
            self.match(s_cypherParser.SP)
            self.state = 2116
            self.match(s_cypherParser.IN)
            self.state = 2117
            self.match(s_cypherParser.SP)
            self.state = 2118
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = s_cypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_oC_FunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2120
            self.oC_Namespace()
            self.state = 2121
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2123
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = s_cypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2125
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = s_cypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2127
            self.oC_Namespace()
            self.state = 2128
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = s_cypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2135
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,400,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2130
                    self.oC_SymbolicName()
                    self.state = 2131
                    self.match(s_cypherParser.T__3) 
                self.state = 2137
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,400,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = s_cypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2138
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_ListLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListLiteralContext,0)


        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = s_cypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_oC_Literal)
        try:
            self.state = 2146
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [104, 105]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2140
                self.oC_BooleanLiteral()
                pass
            elif token in [93]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2141
                self.match(s_cypherParser.NULL)
                pass
            elif token in [106, 107, 108, 116, 117]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2142
                self.oC_NumberLiteral()
                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2143
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2144
                self.oC_ListLiteral()
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2145
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = s_cypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2148
            _la = self._input.LA(1)
            if not(_la==104 or _la==105):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = s_cypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_oC_NumberLiteral)
        try:
            self.state = 2152
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [116, 117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2150
                self.oC_DoubleLiteral()
                pass
            elif token in [106, 107, 108]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2151
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(s_cypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(s_cypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = s_cypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2154
            _la = self._input.LA(1)
            if not(((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(s_cypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(s_cypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = s_cypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2156
            _la = self._input.LA(1)
            if not(_la==116 or _la==117):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = s_cypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2158
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = s_cypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2160
            self.match(s_cypherParser.T__25)
            self.state = 2163
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49, 52, 94, 98, 100, 101, 102, 103, 109, 130, 131, 132, 135]:
                self.state = 2161
                self.oC_SymbolicName()
                pass
            elif token in [107]:
                self.state = 2162
                self.match(s_cypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = s_cypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_oC_SchemaName)
        try:
            self.state = 2167
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,404,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2165
                self.oC_SymbolicName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2166
                self.oC_ReservedWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = s_cypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2169
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2013790208) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = s_cypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2171
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32214351872) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = s_cypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2173
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70334384570368) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





