# Generated from .\s_cypher.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,137,1931,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,1,0,1,0,1,0,3,0,
        242,8,0,1,1,1,1,3,1,246,8,1,1,1,1,1,3,1,250,8,1,1,1,1,1,3,1,254,
        8,1,1,1,1,1,3,1,258,8,1,3,1,260,8,1,1,1,3,1,263,8,1,1,1,3,1,266,
        8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,274,8,2,1,2,3,2,277,8,2,1,2,3,2,
        280,8,2,1,3,1,3,3,3,284,8,3,1,3,1,3,1,3,1,3,3,3,290,8,3,1,3,3,3,
        293,8,3,1,3,1,3,1,3,3,3,298,8,3,1,3,1,3,1,3,1,3,3,3,304,8,3,1,3,
        3,3,307,8,3,1,3,1,3,1,3,3,3,312,8,3,1,3,3,3,315,8,3,1,3,3,3,318,
        8,3,1,3,3,3,321,8,3,1,3,3,3,324,8,3,1,3,1,3,1,3,1,3,3,3,330,8,3,
        1,3,3,3,333,8,3,1,3,1,3,1,3,3,3,338,8,3,1,3,3,3,341,8,3,1,3,3,3,
        344,8,3,1,3,1,3,3,3,348,8,3,1,3,1,3,3,3,352,8,3,1,3,3,3,355,8,3,
        1,3,1,3,3,3,359,8,3,1,3,1,3,3,3,363,8,3,1,3,1,3,1,3,1,3,3,3,369,
        8,3,1,3,1,3,3,3,373,8,3,1,3,1,3,1,3,1,3,3,3,379,8,3,1,3,1,3,3,3,
        383,8,3,1,3,1,3,1,3,1,3,3,3,389,8,3,1,3,1,3,3,3,393,8,3,1,4,1,4,
        3,4,397,8,4,1,4,1,4,3,4,401,8,4,1,4,1,4,3,4,405,8,4,1,4,5,4,408,
        8,4,10,4,12,4,411,9,4,1,5,1,5,1,5,1,5,3,5,417,8,5,1,5,3,5,420,8,
        5,3,5,422,8,5,1,6,1,6,3,6,426,8,6,1,6,1,6,3,6,430,8,6,1,6,1,6,3,
        6,434,8,6,1,6,1,6,3,6,438,8,6,1,6,5,6,441,8,6,10,6,12,6,444,9,6,
        1,7,1,7,1,7,1,7,3,7,450,8,7,1,7,3,7,453,8,7,3,7,455,8,7,1,8,1,8,
        3,8,459,8,8,1,8,1,8,1,9,1,9,3,9,465,8,9,1,9,1,9,1,10,1,10,3,10,471,
        8,10,1,10,1,10,1,10,3,10,476,8,10,1,10,3,10,479,8,10,1,11,1,11,3,
        11,483,8,11,1,11,1,11,3,11,487,8,11,1,11,1,11,1,11,1,11,3,11,493,
        8,11,1,11,1,11,3,11,497,8,11,1,11,1,11,1,11,3,11,502,8,11,1,12,1,
        12,3,12,506,8,12,1,12,1,12,3,12,510,8,12,1,12,1,12,3,12,514,8,12,
        1,12,1,12,1,13,1,13,3,13,520,8,13,1,13,1,13,3,13,524,8,13,1,13,1,
        13,1,14,1,14,3,14,530,8,14,1,14,1,14,3,14,534,8,14,3,14,536,8,14,
        1,14,1,14,3,14,540,8,14,3,14,542,8,14,1,14,1,14,3,14,546,8,14,3,
        14,548,8,14,1,14,1,14,3,14,552,8,14,3,14,554,8,14,1,14,1,14,1,15,
        1,15,3,15,560,8,15,1,16,1,16,3,16,564,8,16,1,16,1,16,1,16,1,16,1,
        16,3,16,571,8,16,1,16,1,16,1,16,1,16,5,16,577,8,16,10,16,12,16,580,
        9,16,3,16,582,8,16,1,16,1,16,1,17,1,17,3,17,588,8,17,1,17,1,17,3,
        17,592,8,17,3,17,594,8,17,1,18,3,18,597,8,18,1,18,1,18,3,18,601,
        8,18,1,18,1,18,3,18,605,8,18,3,18,607,8,18,1,19,1,19,3,19,611,8,
        19,1,19,1,19,3,19,615,8,19,3,19,617,8,19,1,19,1,19,3,19,621,8,19,
        3,19,623,8,19,1,19,3,19,626,8,19,1,19,1,19,3,19,630,8,19,3,19,632,
        8,19,1,19,1,19,3,19,636,8,19,3,19,638,8,19,1,19,1,19,1,20,1,20,1,
        20,1,20,1,20,3,20,647,8,20,1,21,1,21,3,21,651,8,21,1,21,3,21,654,
        8,21,1,21,1,21,1,21,1,21,1,21,3,21,661,8,21,1,21,1,21,3,21,665,8,
        21,1,21,1,21,3,21,669,8,21,1,21,5,21,672,8,21,10,21,12,21,675,9,
        21,1,22,1,22,3,22,679,8,22,1,22,4,22,682,8,22,11,22,12,22,683,1,
        22,3,22,687,8,22,1,22,3,22,690,8,22,3,22,692,8,22,1,22,3,22,695,
        8,22,1,22,1,22,3,22,699,8,22,1,22,5,22,702,8,22,10,22,12,22,705,
        9,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,3,24,714,8,24,1,24,1,24,
        3,24,718,8,24,1,24,1,24,3,24,722,8,24,1,24,1,24,3,24,726,8,24,1,
        24,1,24,3,24,730,8,24,1,24,3,24,733,8,24,1,24,1,24,1,25,1,25,3,25,
        739,8,25,1,26,1,26,1,27,1,27,1,28,3,28,746,8,28,1,28,1,28,3,28,750,
        8,28,1,28,3,28,753,8,28,1,28,3,28,756,8,28,1,28,1,28,1,29,1,29,1,
        30,1,30,3,30,764,8,30,1,30,5,30,767,8,30,10,30,12,30,770,9,30,1,
        31,1,31,1,31,1,31,3,31,776,8,31,1,31,1,31,1,31,3,31,781,8,31,1,31,
        3,31,784,8,31,1,32,1,32,3,32,788,8,32,1,33,1,33,3,33,792,8,33,5,
        33,794,8,33,10,33,12,33,797,9,33,1,33,1,33,1,33,3,33,802,8,33,5,
        33,804,8,33,10,33,12,33,807,9,33,1,33,1,33,3,33,811,8,33,1,33,5,
        33,814,8,33,10,33,12,33,817,9,33,1,33,3,33,820,8,33,1,33,3,33,823,
        8,33,3,33,825,8,33,1,34,1,34,3,34,829,8,34,5,34,831,8,34,10,34,12,
        34,834,9,34,1,34,1,34,3,34,838,8,34,5,34,840,8,34,10,34,12,34,843,
        9,34,1,34,1,34,3,34,847,8,34,4,34,849,8,34,11,34,12,34,850,1,34,
        1,34,1,35,1,35,1,35,3,35,858,8,35,1,36,1,36,3,36,862,8,36,1,36,1,
        36,1,36,1,36,1,36,1,36,1,37,1,37,3,37,872,8,37,1,37,1,37,1,37,5,
        37,877,8,37,10,37,12,37,880,9,37,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,3,38,892,8,38,1,39,1,39,3,39,896,8,39,1,39,1,39,
        1,40,1,40,3,40,902,8,40,1,40,1,40,3,40,906,8,40,1,40,1,40,3,40,910,
        8,40,1,40,5,40,913,8,40,10,40,12,40,916,9,40,1,41,1,41,1,41,1,41,
        3,41,922,8,41,1,41,1,41,3,41,926,8,41,1,41,5,41,929,8,41,10,41,12,
        41,932,9,41,1,42,1,42,1,42,1,42,3,42,938,8,42,1,43,1,43,1,43,1,43,
        3,43,944,8,43,1,43,1,43,1,43,3,43,949,8,43,1,44,1,44,1,44,1,44,3,
        44,955,8,44,1,44,3,44,958,8,44,1,44,1,44,1,44,1,44,3,44,964,8,44,
        3,44,966,8,44,1,45,1,45,3,45,970,8,45,1,45,1,45,3,45,974,8,45,1,
        45,5,45,977,8,45,10,45,12,45,980,9,45,1,45,3,45,983,8,45,1,45,3,
        45,986,8,45,1,46,1,46,1,46,1,46,1,46,3,46,993,8,46,1,46,1,46,1,47,
        1,47,1,47,3,47,1000,8,47,1,47,3,47,1003,8,47,1,48,1,48,1,48,1,49,
        3,49,1009,8,49,1,49,3,49,1012,8,49,1,49,1,49,1,49,1,49,3,49,1018,
        8,49,1,49,1,49,3,49,1022,8,49,1,49,1,49,3,49,1026,8,49,1,50,1,50,
        3,50,1030,8,50,1,50,1,50,3,50,1034,8,50,1,50,5,50,1037,8,50,10,50,
        12,50,1040,9,50,1,50,1,50,3,50,1044,8,50,1,50,1,50,3,50,1048,8,50,
        1,50,5,50,1051,8,50,10,50,12,50,1054,9,50,3,50,1056,8,50,1,51,1,
        51,1,51,1,51,1,51,1,51,1,51,3,51,1065,8,51,1,52,1,52,1,52,1,52,1,
        52,1,52,1,52,3,52,1074,8,52,1,52,5,52,1077,8,52,10,52,12,52,1080,
        9,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,55,1,55,3,55,1092,
        8,55,1,55,3,55,1095,8,55,1,56,1,56,1,56,1,56,1,57,1,57,3,57,1103,
        8,57,1,57,1,57,3,57,1107,8,57,1,57,5,57,1110,8,57,10,57,12,57,1113,
        9,57,1,58,1,58,1,59,1,59,3,59,1119,8,59,1,59,5,59,1122,8,59,10,59,
        12,59,1125,9,59,1,59,1,59,1,59,1,59,3,59,1131,8,59,1,60,1,60,3,60,
        1135,8,60,1,60,4,60,1138,8,60,11,60,12,60,1139,1,61,1,61,3,61,1144,
        8,61,1,61,1,61,1,62,1,62,3,62,1150,8,62,1,62,1,62,3,62,1154,8,62,
        1,62,3,62,1157,8,62,1,62,3,62,1160,8,62,1,62,1,62,3,62,1164,8,62,
        1,62,1,62,1,62,1,62,3,62,1170,8,62,1,62,1,62,3,62,1174,8,62,1,62,
        3,62,1177,8,62,1,62,3,62,1180,8,62,1,62,1,62,1,62,1,62,3,62,1186,
        8,62,1,62,3,62,1189,8,62,1,62,3,62,1192,8,62,1,62,1,62,3,62,1196,
        8,62,1,62,1,62,1,62,1,62,3,62,1202,8,62,1,62,3,62,1205,8,62,1,62,
        3,62,1208,8,62,1,62,1,62,3,62,1212,8,62,1,63,1,63,3,63,1216,8,63,
        1,64,1,64,3,64,1220,8,64,1,64,1,64,3,64,1224,8,64,1,64,1,64,3,64,
        1228,8,64,1,64,3,64,1231,8,64,1,64,5,64,1234,8,64,10,64,12,64,1237,
        9,64,1,65,1,65,3,65,1241,8,65,1,65,5,65,1244,8,65,10,65,12,65,1247,
        9,65,1,66,1,66,3,66,1251,8,66,1,66,1,66,1,67,1,67,3,67,1257,8,67,
        1,67,1,67,3,67,1261,8,67,3,67,1263,8,67,1,67,1,67,3,67,1267,8,67,
        1,67,1,67,3,67,1271,8,67,3,67,1273,8,67,3,67,1275,8,67,1,68,1,68,
        1,69,1,69,1,70,1,70,3,70,1283,8,70,1,70,4,70,1286,8,70,11,70,12,
        70,1287,1,71,1,71,1,72,1,72,1,72,1,72,1,72,5,72,1297,8,72,10,72,
        12,72,1300,9,72,1,73,1,73,1,73,1,73,1,73,5,73,1307,8,73,10,73,12,
        73,1310,9,73,1,74,1,74,1,74,1,74,1,74,5,74,1317,8,74,10,74,12,74,
        1320,9,74,1,75,1,75,3,75,1324,8,75,5,75,1326,8,75,10,75,12,75,1329,
        9,75,1,75,1,75,1,76,1,76,3,76,1335,8,76,1,76,5,76,1338,8,76,10,76,
        12,76,1341,9,76,1,77,1,77,3,77,1345,8,77,1,77,1,77,1,77,3,77,1350,
        8,77,1,77,1,77,1,77,3,77,1355,8,77,1,77,1,77,1,77,3,77,1360,8,77,
        1,77,1,77,1,77,3,77,1365,8,77,1,77,1,77,1,77,3,77,1370,8,77,1,77,
        3,77,1373,8,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
        3,78,1385,8,78,1,78,3,78,1388,8,78,1,78,1,78,1,79,1,79,1,79,3,79,
        1395,8,79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,
        1,80,3,80,1409,8,80,1,81,1,81,3,81,1413,8,81,1,81,1,81,3,81,1417,
        8,81,1,81,1,81,3,81,1421,8,81,1,81,1,81,3,81,1425,8,81,1,81,5,81,
        1428,8,81,10,81,12,81,1431,9,81,1,82,1,82,3,82,1435,8,82,1,82,1,
        82,3,82,1439,8,82,1,82,1,82,3,82,1443,8,82,1,82,1,82,3,82,1447,8,
        82,1,82,1,82,3,82,1451,8,82,1,82,1,82,3,82,1455,8,82,1,82,5,82,1458,
        8,82,10,82,12,82,1461,9,82,1,83,1,83,3,83,1465,8,83,1,83,1,83,3,
        83,1469,8,83,1,83,5,83,1472,8,83,10,83,12,83,1475,9,83,1,84,1,84,
        1,84,3,84,1480,8,84,1,84,3,84,1483,8,84,1,85,1,85,3,85,1487,8,85,
        1,85,5,85,1490,8,85,10,85,12,85,1493,9,85,1,85,3,85,1496,8,85,1,
        85,3,85,1499,8,85,1,86,1,86,3,86,1503,8,86,1,86,1,86,1,87,1,87,1,
        87,1,87,1,87,3,87,1512,8,87,1,87,1,87,3,87,1516,8,87,1,87,1,87,3,
        87,1520,8,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1531,
        8,87,1,88,1,88,3,88,1535,8,88,1,88,4,88,1538,8,88,11,88,12,88,1539,
        1,88,1,88,3,88,1544,8,88,1,88,1,88,3,88,1548,8,88,1,88,4,88,1551,
        8,88,11,88,12,88,1552,3,88,1555,8,88,1,88,3,88,1558,8,88,1,88,1,
        88,3,88,1562,8,88,1,88,3,88,1565,8,88,1,88,3,88,1568,8,88,1,88,1,
        88,1,89,1,89,3,89,1574,8,89,1,89,1,89,3,89,1578,8,89,1,89,1,89,3,
        89,1582,8,89,1,89,1,89,1,90,1,90,3,90,1588,8,90,1,90,1,90,3,90,1592,
        8,90,1,90,1,90,3,90,1596,8,90,1,90,3,90,1599,8,90,1,90,3,90,1602,
        8,90,1,90,1,90,1,91,1,91,3,91,1608,8,91,1,91,1,91,3,91,1612,8,91,
        1,91,1,91,3,91,1616,8,91,3,91,1618,8,91,1,91,1,91,3,91,1622,8,91,
        1,91,1,91,3,91,1626,8,91,3,91,1628,8,91,1,91,1,91,3,91,1632,8,91,
        1,91,1,91,3,91,1636,8,91,1,91,1,91,1,92,1,92,3,92,1642,8,92,1,92,
        1,92,3,92,1646,8,92,1,92,1,92,3,92,1650,8,92,1,92,1,92,1,92,1,92,
        3,92,1656,8,92,1,92,1,92,3,92,1660,8,92,1,92,1,92,3,92,1664,8,92,
        1,92,1,92,1,92,1,92,3,92,1670,8,92,1,92,1,92,3,92,1674,8,92,1,92,
        1,92,3,92,1678,8,92,1,92,1,92,1,92,1,92,3,92,1684,8,92,1,92,1,92,
        3,92,1688,8,92,1,92,1,92,3,92,1692,8,92,1,92,1,92,3,92,1696,8,92,
        1,93,1,93,3,93,1700,8,93,1,93,3,93,1703,8,93,1,94,1,94,1,95,1,95,
        3,95,1709,8,95,1,95,1,95,3,95,1713,8,95,1,95,1,95,1,96,1,96,1,96,
        1,96,1,96,1,96,1,97,1,97,3,97,1725,8,97,1,97,1,97,3,97,1729,8,97,
        1,97,1,97,3,97,1733,8,97,3,97,1735,8,97,1,97,1,97,3,97,1739,8,97,
        1,97,1,97,3,97,1743,8,97,1,97,1,97,3,97,1747,8,97,5,97,1749,8,97,
        10,97,12,97,1752,9,97,3,97,1754,8,97,1,97,1,97,1,98,1,98,1,98,1,
        99,1,99,3,99,1763,8,99,1,99,1,99,3,99,1767,8,99,1,99,1,99,1,99,3,
        99,1772,8,99,1,99,3,99,1775,8,99,3,99,1777,8,99,1,99,3,99,1780,8,
        99,1,99,1,99,1,100,1,100,3,100,1786,8,100,1,100,1,100,3,100,1790,
        8,100,1,100,1,100,3,100,1794,8,100,1,100,1,100,3,100,1798,8,100,
        1,100,1,100,3,100,1802,8,100,5,100,1804,8,100,10,100,12,100,1807,
        9,100,3,100,1809,8,100,1,100,1,100,1,101,1,101,1,102,1,102,1,103,
        1,103,1,103,1,104,1,104,1,104,5,104,1823,8,104,10,104,12,104,1826,
        9,104,1,105,1,105,1,106,1,106,1,106,1,106,1,106,1,106,3,106,1836,
        8,106,1,107,1,107,1,108,1,108,3,108,1842,8,108,1,109,1,109,1,110,
        1,110,1,111,1,111,3,111,1850,8,111,1,111,1,111,3,111,1854,8,111,
        1,111,1,111,3,111,1858,8,111,1,111,1,111,3,111,1862,8,111,5,111,
        1864,8,111,10,111,12,111,1867,9,111,3,111,1869,8,111,1,111,1,111,
        1,112,1,112,3,112,1875,8,112,1,112,1,112,3,112,1879,8,112,1,112,
        1,112,3,112,1883,8,112,1,112,1,112,3,112,1887,8,112,1,112,1,112,
        3,112,1891,8,112,1,112,1,112,3,112,1895,8,112,1,112,1,112,3,112,
        1899,8,112,1,112,1,112,3,112,1903,8,112,5,112,1905,8,112,10,112,
        12,112,1908,9,112,3,112,1910,8,112,1,112,1,112,1,113,1,113,1,114,
        1,114,1,114,3,114,1919,8,114,1,115,1,115,3,115,1923,8,115,1,116,
        1,116,1,117,1,117,1,118,1,118,1,118,0,0,119,0,2,4,6,8,10,12,14,16,
        18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
        62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
        104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
        136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
        168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
        200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,
        232,234,236,0,11,1,0,54,55,6,0,48,48,93,93,99,101,108,108,129,131,
        134,134,5,0,48,68,71,92,94,98,102,104,119,128,1,0,78,81,1,0,21,22,
        1,0,103,104,1,0,105,107,1,0,115,116,2,0,17,17,27,30,2,0,18,18,31,
        34,2,0,22,22,35,45,2220,0,241,1,0,0,0,2,245,1,0,0,0,4,273,1,0,0,
        0,6,392,1,0,0,0,8,394,1,0,0,0,10,412,1,0,0,0,12,425,1,0,0,0,14,445,
        1,0,0,0,16,456,1,0,0,0,18,462,1,0,0,0,20,478,1,0,0,0,22,501,1,0,
        0,0,24,503,1,0,0,0,26,517,1,0,0,0,28,527,1,0,0,0,30,559,1,0,0,0,
        32,561,1,0,0,0,34,585,1,0,0,0,36,596,1,0,0,0,38,608,1,0,0,0,40,641,
        1,0,0,0,42,650,1,0,0,0,44,676,1,0,0,0,46,706,1,0,0,0,48,711,1,0,
        0,0,50,738,1,0,0,0,52,740,1,0,0,0,54,742,1,0,0,0,56,745,1,0,0,0,
        58,759,1,0,0,0,60,761,1,0,0,0,62,783,1,0,0,0,64,787,1,0,0,0,66,824,
        1,0,0,0,68,848,1,0,0,0,70,857,1,0,0,0,72,859,1,0,0,0,74,869,1,0,
        0,0,76,891,1,0,0,0,78,893,1,0,0,0,80,899,1,0,0,0,82,917,1,0,0,0,
        84,937,1,0,0,0,86,939,1,0,0,0,88,950,1,0,0,0,90,967,1,0,0,0,92,992,
        1,0,0,0,94,996,1,0,0,0,96,1004,1,0,0,0,98,1011,1,0,0,0,100,1055,
        1,0,0,0,102,1064,1,0,0,0,104,1066,1,0,0,0,106,1081,1,0,0,0,108,1085,
        1,0,0,0,110,1089,1,0,0,0,112,1096,1,0,0,0,114,1100,1,0,0,0,116,1114,
        1,0,0,0,118,1130,1,0,0,0,120,1132,1,0,0,0,122,1141,1,0,0,0,124,1211,
        1,0,0,0,126,1215,1,0,0,0,128,1217,1,0,0,0,130,1238,1,0,0,0,132,1248,
        1,0,0,0,134,1254,1,0,0,0,136,1276,1,0,0,0,138,1278,1,0,0,0,140,1280,
        1,0,0,0,142,1289,1,0,0,0,144,1291,1,0,0,0,146,1301,1,0,0,0,148,1311,
        1,0,0,0,150,1327,1,0,0,0,152,1332,1,0,0,0,154,1372,1,0,0,0,156,1384,
        1,0,0,0,158,1391,1,0,0,0,160,1408,1,0,0,0,162,1410,1,0,0,0,164,1432,
        1,0,0,0,166,1462,1,0,0,0,168,1482,1,0,0,0,170,1484,1,0,0,0,172,1500,
        1,0,0,0,174,1530,1,0,0,0,176,1554,1,0,0,0,178,1571,1,0,0,0,180,1585,
        1,0,0,0,182,1605,1,0,0,0,184,1695,1,0,0,0,186,1697,1,0,0,0,188,1704,
        1,0,0,0,190,1706,1,0,0,0,192,1716,1,0,0,0,194,1722,1,0,0,0,196,1757,
        1,0,0,0,198,1760,1,0,0,0,200,1783,1,0,0,0,202,1812,1,0,0,0,204,1814,
        1,0,0,0,206,1816,1,0,0,0,208,1824,1,0,0,0,210,1827,1,0,0,0,212,1835,
        1,0,0,0,214,1837,1,0,0,0,216,1841,1,0,0,0,218,1843,1,0,0,0,220,1845,
        1,0,0,0,222,1847,1,0,0,0,224,1872,1,0,0,0,226,1913,1,0,0,0,228,1915,
        1,0,0,0,230,1922,1,0,0,0,232,1924,1,0,0,0,234,1926,1,0,0,0,236,1928,
        1,0,0,0,238,242,3,60,30,0,239,242,3,88,44,0,240,242,3,20,10,0,241,
        238,1,0,0,0,241,239,1,0,0,0,241,240,1,0,0,0,242,1,1,0,0,0,243,244,
        5,58,0,0,244,246,5,135,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,247,
        1,0,0,0,247,249,5,59,0,0,248,250,5,135,0,0,249,248,1,0,0,0,249,250,
        1,0,0,0,250,251,1,0,0,0,251,259,3,114,57,0,252,254,5,135,0,0,253,
        252,1,0,0,0,253,254,1,0,0,0,254,257,1,0,0,0,255,258,3,16,8,0,256,
        258,3,18,9,0,257,255,1,0,0,0,257,256,1,0,0,0,258,260,1,0,0,0,259,
        253,1,0,0,0,259,260,1,0,0,0,260,265,1,0,0,0,261,263,5,135,0,0,262,
        261,1,0,0,0,262,263,1,0,0,0,263,264,1,0,0,0,264,266,3,112,56,0,265,
        262,1,0,0,0,265,266,1,0,0,0,266,3,1,0,0,0,267,274,3,78,39,0,268,
        274,3,74,37,0,269,274,3,12,6,0,270,274,3,80,40,0,271,274,3,82,41,
        0,272,274,3,8,4,0,273,267,1,0,0,0,273,268,1,0,0,0,273,269,1,0,0,
        0,273,270,1,0,0,0,273,271,1,0,0,0,273,272,1,0,0,0,274,279,1,0,0,
        0,275,277,5,135,0,0,276,275,1,0,0,0,276,277,1,0,0,0,277,278,1,0,
        0,0,278,280,3,16,8,0,279,276,1,0,0,0,279,280,1,0,0,0,280,5,1,0,0,
        0,281,283,3,210,105,0,282,284,5,135,0,0,283,282,1,0,0,0,283,284,
        1,0,0,0,284,285,1,0,0,0,285,286,3,48,24,0,286,393,1,0,0,0,287,292,
        3,210,105,0,288,290,5,135,0,0,289,288,1,0,0,0,289,290,1,0,0,0,290,
        291,1,0,0,0,291,293,3,48,24,0,292,289,1,0,0,0,292,293,1,0,0,0,293,
        294,1,0,0,0,294,295,5,1,0,0,295,297,3,210,105,0,296,298,5,135,0,
        0,297,296,1,0,0,0,297,298,1,0,0,0,298,299,1,0,0,0,299,300,3,48,24,
        0,300,393,1,0,0,0,301,306,3,210,105,0,302,304,5,135,0,0,303,302,
        1,0,0,0,303,304,1,0,0,0,304,305,1,0,0,0,305,307,3,48,24,0,306,303,
        1,0,0,0,306,307,1,0,0,0,307,308,1,0,0,0,308,309,5,1,0,0,309,314,
        3,210,105,0,310,312,5,135,0,0,311,310,1,0,0,0,311,312,1,0,0,0,312,
        313,1,0,0,0,313,315,3,48,24,0,314,311,1,0,0,0,314,315,1,0,0,0,315,
        320,1,0,0,0,316,318,5,135,0,0,317,316,1,0,0,0,317,318,1,0,0,0,318,
        319,1,0,0,0,319,321,5,47,0,0,320,317,1,0,0,0,320,321,1,0,0,0,321,
        323,1,0,0,0,322,324,5,135,0,0,323,322,1,0,0,0,323,324,1,0,0,0,324,
        325,1,0,0,0,325,326,3,48,24,0,326,393,1,0,0,0,327,332,3,210,105,
        0,328,330,5,135,0,0,329,328,1,0,0,0,329,330,1,0,0,0,330,331,1,0,
        0,0,331,333,3,48,24,0,332,329,1,0,0,0,332,333,1,0,0,0,333,334,1,
        0,0,0,334,335,5,1,0,0,335,340,3,210,105,0,336,338,5,135,0,0,337,
        336,1,0,0,0,337,338,1,0,0,0,338,339,1,0,0,0,339,341,3,48,24,0,340,
        337,1,0,0,0,340,341,1,0,0,0,341,343,1,0,0,0,342,344,5,135,0,0,343,
        342,1,0,0,0,343,344,1,0,0,0,344,345,1,0,0,0,345,347,5,2,0,0,346,
        348,5,135,0,0,347,346,1,0,0,0,347,348,1,0,0,0,348,349,1,0,0,0,349,
        354,3,142,71,0,350,352,5,135,0,0,351,350,1,0,0,0,351,352,1,0,0,0,
        352,353,1,0,0,0,353,355,3,48,24,0,354,351,1,0,0,0,354,355,1,0,0,
        0,355,393,1,0,0,0,356,358,3,140,70,0,357,359,5,135,0,0,358,357,1,
        0,0,0,358,359,1,0,0,0,359,360,1,0,0,0,360,362,5,2,0,0,361,363,5,
        135,0,0,362,361,1,0,0,0,362,363,1,0,0,0,363,364,1,0,0,0,364,365,
        3,142,71,0,365,393,1,0,0,0,366,368,3,210,105,0,367,369,5,135,0,0,
        368,367,1,0,0,0,368,369,1,0,0,0,369,370,1,0,0,0,370,372,5,2,0,0,
        371,373,5,135,0,0,372,371,1,0,0,0,372,373,1,0,0,0,373,374,1,0,0,
        0,374,375,3,142,71,0,375,393,1,0,0,0,376,378,3,210,105,0,377,379,
        5,135,0,0,378,377,1,0,0,0,378,379,1,0,0,0,379,380,1,0,0,0,380,382,
        5,3,0,0,381,383,5,135,0,0,382,381,1,0,0,0,382,383,1,0,0,0,383,384,
        1,0,0,0,384,385,3,142,71,0,385,393,1,0,0,0,386,388,3,210,105,0,387,
        389,5,135,0,0,388,387,1,0,0,0,388,389,1,0,0,0,389,390,1,0,0,0,390,
        391,3,130,65,0,391,393,1,0,0,0,392,281,1,0,0,0,392,287,1,0,0,0,392,
        301,1,0,0,0,392,327,1,0,0,0,392,356,1,0,0,0,392,366,1,0,0,0,392,
        376,1,0,0,0,392,386,1,0,0,0,393,7,1,0,0,0,394,396,5,53,0,0,395,397,
        5,135,0,0,396,395,1,0,0,0,396,397,1,0,0,0,397,398,1,0,0,0,398,409,
        3,10,5,0,399,401,5,135,0,0,400,399,1,0,0,0,400,401,1,0,0,0,401,402,
        1,0,0,0,402,404,5,4,0,0,403,405,5,135,0,0,404,403,1,0,0,0,404,405,
        1,0,0,0,405,406,1,0,0,0,406,408,3,10,5,0,407,400,1,0,0,0,408,411,
        1,0,0,0,409,407,1,0,0,0,409,410,1,0,0,0,410,9,1,0,0,0,411,409,1,
        0,0,0,412,421,3,210,105,0,413,414,5,1,0,0,414,419,3,210,105,0,415,
        417,5,135,0,0,416,415,1,0,0,0,416,417,1,0,0,0,417,418,1,0,0,0,418,
        420,5,47,0,0,419,416,1,0,0,0,419,420,1,0,0,0,420,422,1,0,0,0,421,
        413,1,0,0,0,421,422,1,0,0,0,422,11,1,0,0,0,423,424,5,66,0,0,424,
        426,5,135,0,0,425,423,1,0,0,0,425,426,1,0,0,0,426,427,1,0,0,0,427,
        429,5,67,0,0,428,430,5,135,0,0,429,428,1,0,0,0,429,430,1,0,0,0,430,
        431,1,0,0,0,431,442,3,14,7,0,432,434,5,135,0,0,433,432,1,0,0,0,433,
        434,1,0,0,0,434,435,1,0,0,0,435,437,5,4,0,0,436,438,5,135,0,0,437,
        436,1,0,0,0,437,438,1,0,0,0,438,439,1,0,0,0,439,441,3,14,7,0,440,
        433,1,0,0,0,441,444,1,0,0,0,442,440,1,0,0,0,442,443,1,0,0,0,443,
        13,1,0,0,0,444,442,1,0,0,0,445,454,3,210,105,0,446,447,5,1,0,0,447,
        452,3,210,105,0,448,450,5,135,0,0,449,448,1,0,0,0,449,450,1,0,0,
        0,450,451,1,0,0,0,451,453,5,47,0,0,452,449,1,0,0,0,452,453,1,0,0,
        0,453,455,1,0,0,0,454,446,1,0,0,0,454,455,1,0,0,0,455,15,1,0,0,0,
        456,458,5,49,0,0,457,459,5,135,0,0,458,457,1,0,0,0,458,459,1,0,0,
        0,459,460,1,0,0,0,460,461,3,142,71,0,461,17,1,0,0,0,462,464,5,51,
        0,0,463,465,5,135,0,0,464,463,1,0,0,0,464,465,1,0,0,0,465,466,1,
        0,0,0,466,467,3,142,71,0,467,19,1,0,0,0,468,470,5,50,0,0,469,471,
        5,135,0,0,470,469,1,0,0,0,470,471,1,0,0,0,471,472,1,0,0,0,472,479,
        3,142,71,0,473,475,5,52,0,0,474,476,5,135,0,0,475,474,1,0,0,0,475,
        476,1,0,0,0,476,477,1,0,0,0,477,479,3,142,71,0,478,468,1,0,0,0,478,
        473,1,0,0,0,479,21,1,0,0,0,480,482,3,210,105,0,481,483,5,135,0,0,
        482,481,1,0,0,0,482,483,1,0,0,0,483,484,1,0,0,0,484,486,5,2,0,0,
        485,487,5,135,0,0,486,485,1,0,0,0,486,487,1,0,0,0,487,488,1,0,0,
        0,488,489,3,24,12,0,489,502,1,0,0,0,490,492,3,210,105,0,491,493,
        5,135,0,0,492,491,1,0,0,0,492,493,1,0,0,0,493,494,1,0,0,0,494,496,
        5,2,0,0,495,497,5,135,0,0,496,495,1,0,0,0,496,497,1,0,0,0,497,498,
        1,0,0,0,498,499,3,116,58,0,499,502,1,0,0,0,500,502,3,116,58,0,501,
        480,1,0,0,0,501,490,1,0,0,0,501,500,1,0,0,0,502,23,1,0,0,0,503,505,
        3,196,98,0,504,506,5,135,0,0,505,504,1,0,0,0,505,506,1,0,0,0,506,
        507,1,0,0,0,507,509,5,5,0,0,508,510,5,135,0,0,509,508,1,0,0,0,509,
        510,1,0,0,0,510,511,1,0,0,0,511,513,3,26,13,0,512,514,5,135,0,0,
        513,512,1,0,0,0,513,514,1,0,0,0,514,515,1,0,0,0,515,516,5,6,0,0,
        516,25,1,0,0,0,517,519,3,28,14,0,518,520,5,135,0,0,519,518,1,0,0,
        0,519,520,1,0,0,0,520,521,1,0,0,0,521,523,3,124,62,0,522,524,5,135,
        0,0,523,522,1,0,0,0,523,524,1,0,0,0,524,525,1,0,0,0,525,526,3,28,
        14,0,526,27,1,0,0,0,527,529,5,5,0,0,528,530,5,135,0,0,529,528,1,
        0,0,0,529,530,1,0,0,0,530,535,1,0,0,0,531,533,3,210,105,0,532,534,
        5,135,0,0,533,532,1,0,0,0,533,534,1,0,0,0,534,536,1,0,0,0,535,531,
        1,0,0,0,535,536,1,0,0,0,536,541,1,0,0,0,537,539,3,130,65,0,538,540,
        5,135,0,0,539,538,1,0,0,0,539,540,1,0,0,0,540,542,1,0,0,0,541,537,
        1,0,0,0,541,542,1,0,0,0,542,547,1,0,0,0,543,545,3,48,24,0,544,546,
        5,135,0,0,545,544,1,0,0,0,545,546,1,0,0,0,546,548,1,0,0,0,547,543,
        1,0,0,0,547,548,1,0,0,0,548,553,1,0,0,0,549,551,3,30,15,0,550,552,
        5,135,0,0,551,550,1,0,0,0,551,552,1,0,0,0,552,554,1,0,0,0,553,549,
        1,0,0,0,553,554,1,0,0,0,554,555,1,0,0,0,555,556,5,6,0,0,556,29,1,
        0,0,0,557,560,3,32,16,0,558,560,3,228,114,0,559,557,1,0,0,0,559,
        558,1,0,0,0,560,31,1,0,0,0,561,563,5,7,0,0,562,564,5,135,0,0,563,
        562,1,0,0,0,563,564,1,0,0,0,564,581,1,0,0,0,565,566,3,34,17,0,566,
        567,5,8,0,0,567,578,3,36,18,0,568,570,5,4,0,0,569,571,5,135,0,0,
        570,569,1,0,0,0,570,571,1,0,0,0,571,572,1,0,0,0,572,573,3,34,17,
        0,573,574,5,8,0,0,574,575,3,36,18,0,575,577,1,0,0,0,576,568,1,0,
        0,0,577,580,1,0,0,0,578,576,1,0,0,0,578,579,1,0,0,0,579,582,1,0,
        0,0,580,578,1,0,0,0,581,565,1,0,0,0,581,582,1,0,0,0,582,583,1,0,
        0,0,583,584,5,9,0,0,584,33,1,0,0,0,585,587,3,226,113,0,586,588,5,
        135,0,0,587,586,1,0,0,0,587,588,1,0,0,0,588,593,1,0,0,0,589,591,
        3,48,24,0,590,592,5,135,0,0,591,590,1,0,0,0,591,592,1,0,0,0,592,
        594,1,0,0,0,593,589,1,0,0,0,593,594,1,0,0,0,594,35,1,0,0,0,595,597,
        5,135,0,0,596,595,1,0,0,0,596,597,1,0,0,0,597,598,1,0,0,0,598,600,
        3,142,71,0,599,601,5,135,0,0,600,599,1,0,0,0,600,601,1,0,0,0,601,
        606,1,0,0,0,602,604,3,48,24,0,603,605,5,135,0,0,604,603,1,0,0,0,
        604,605,1,0,0,0,605,607,1,0,0,0,606,602,1,0,0,0,606,607,1,0,0,0,
        607,37,1,0,0,0,608,610,5,10,0,0,609,611,5,135,0,0,610,609,1,0,0,
        0,610,611,1,0,0,0,611,616,1,0,0,0,612,614,3,210,105,0,613,615,5,
        135,0,0,614,613,1,0,0,0,614,615,1,0,0,0,615,617,1,0,0,0,616,612,
        1,0,0,0,616,617,1,0,0,0,617,622,1,0,0,0,618,620,3,128,64,0,619,621,
        5,135,0,0,620,619,1,0,0,0,620,621,1,0,0,0,621,623,1,0,0,0,622,618,
        1,0,0,0,622,623,1,0,0,0,623,625,1,0,0,0,624,626,3,134,67,0,625,624,
        1,0,0,0,625,626,1,0,0,0,626,631,1,0,0,0,627,629,3,48,24,0,628,630,
        5,135,0,0,629,628,1,0,0,0,629,630,1,0,0,0,630,632,1,0,0,0,631,627,
        1,0,0,0,631,632,1,0,0,0,632,637,1,0,0,0,633,635,3,126,63,0,634,636,
        5,135,0,0,635,634,1,0,0,0,635,636,1,0,0,0,636,638,1,0,0,0,637,633,
        1,0,0,0,637,638,1,0,0,0,638,639,1,0,0,0,639,640,5,11,0,0,640,39,
        1,0,0,0,641,646,3,162,81,0,642,647,3,46,23,0,643,647,3,156,78,0,
        644,647,3,158,79,0,645,647,3,160,80,0,646,642,1,0,0,0,646,643,1,
        0,0,0,646,644,1,0,0,0,646,645,1,0,0,0,646,647,1,0,0,0,647,41,1,0,
        0,0,648,651,3,170,85,0,649,651,3,44,22,0,650,648,1,0,0,0,650,649,
        1,0,0,0,651,673,1,0,0,0,652,654,5,135,0,0,653,652,1,0,0,0,653,654,
        1,0,0,0,654,655,1,0,0,0,655,656,5,10,0,0,656,657,3,142,71,0,657,
        658,5,11,0,0,658,672,1,0,0,0,659,661,5,135,0,0,660,659,1,0,0,0,660,
        661,1,0,0,0,661,662,1,0,0,0,662,664,5,10,0,0,663,665,3,142,71,0,
        664,663,1,0,0,0,664,665,1,0,0,0,665,666,1,0,0,0,666,668,5,12,0,0,
        667,669,3,142,71,0,668,667,1,0,0,0,668,669,1,0,0,0,669,670,1,0,0,
        0,670,672,5,11,0,0,671,653,1,0,0,0,671,660,1,0,0,0,672,675,1,0,0,
        0,673,671,1,0,0,0,673,674,1,0,0,0,674,43,1,0,0,0,675,673,1,0,0,0,
        676,691,3,174,87,0,677,679,5,135,0,0,678,677,1,0,0,0,678,679,1,0,
        0,0,679,680,1,0,0,0,680,682,3,172,86,0,681,678,1,0,0,0,682,683,1,
        0,0,0,683,681,1,0,0,0,683,684,1,0,0,0,684,689,1,0,0,0,685,687,5,
        135,0,0,686,685,1,0,0,0,686,687,1,0,0,0,687,688,1,0,0,0,688,690,
        5,47,0,0,689,686,1,0,0,0,689,690,1,0,0,0,690,692,1,0,0,0,691,681,
        1,0,0,0,691,692,1,0,0,0,692,694,1,0,0,0,693,695,5,135,0,0,694,693,
        1,0,0,0,694,695,1,0,0,0,695,696,1,0,0,0,696,703,5,46,0,0,697,699,
        5,135,0,0,698,697,1,0,0,0,698,699,1,0,0,0,699,700,1,0,0,0,700,702,
        3,172,86,0,701,698,1,0,0,0,702,705,1,0,0,0,703,701,1,0,0,0,703,704,
        1,0,0,0,704,45,1,0,0,0,705,703,1,0,0,0,706,707,5,135,0,0,707,708,
        7,0,0,0,708,709,5,135,0,0,709,710,3,162,81,0,710,47,1,0,0,0,711,
        713,5,46,0,0,712,714,5,135,0,0,713,712,1,0,0,0,713,714,1,0,0,0,714,
        715,1,0,0,0,715,717,5,5,0,0,716,718,5,135,0,0,717,716,1,0,0,0,717,
        718,1,0,0,0,718,719,1,0,0,0,719,721,3,50,25,0,720,722,5,135,0,0,
        721,720,1,0,0,0,721,722,1,0,0,0,722,723,1,0,0,0,723,725,5,4,0,0,
        724,726,5,135,0,0,725,724,1,0,0,0,725,726,1,0,0,0,726,729,1,0,0,
        0,727,730,3,50,25,0,728,730,5,48,0,0,729,727,1,0,0,0,729,728,1,0,
        0,0,730,732,1,0,0,0,731,733,5,135,0,0,732,731,1,0,0,0,732,733,1,
        0,0,0,733,734,1,0,0,0,734,735,5,6,0,0,735,49,1,0,0,0,736,739,5,117,
        0,0,737,739,3,224,112,0,738,736,1,0,0,0,738,737,1,0,0,0,739,51,1,
        0,0,0,740,741,7,1,0,0,741,53,1,0,0,0,742,743,7,2,0,0,743,55,1,0,
        0,0,744,746,5,135,0,0,745,744,1,0,0,0,745,746,1,0,0,0,746,747,1,
        0,0,0,747,752,3,58,29,0,748,750,5,135,0,0,749,748,1,0,0,0,749,750,
        1,0,0,0,750,751,1,0,0,0,751,753,5,13,0,0,752,749,1,0,0,0,752,753,
        1,0,0,0,753,755,1,0,0,0,754,756,5,135,0,0,755,754,1,0,0,0,755,756,
        1,0,0,0,756,757,1,0,0,0,757,758,5,0,0,1,758,57,1,0,0,0,759,760,3,
        0,0,0,760,59,1,0,0,0,761,768,3,64,32,0,762,764,5,135,0,0,763,762,
        1,0,0,0,763,764,1,0,0,0,764,765,1,0,0,0,765,767,3,62,31,0,766,763,
        1,0,0,0,767,770,1,0,0,0,768,766,1,0,0,0,768,769,1,0,0,0,769,61,1,
        0,0,0,770,768,1,0,0,0,771,772,5,56,0,0,772,773,5,135,0,0,773,775,
        5,57,0,0,774,776,5,135,0,0,775,774,1,0,0,0,775,776,1,0,0,0,776,777,
        1,0,0,0,777,784,3,64,32,0,778,780,5,56,0,0,779,781,5,135,0,0,780,
        779,1,0,0,0,780,781,1,0,0,0,781,782,1,0,0,0,782,784,3,64,32,0,783,
        771,1,0,0,0,783,778,1,0,0,0,784,63,1,0,0,0,785,788,3,66,33,0,786,
        788,3,68,34,0,787,785,1,0,0,0,787,786,1,0,0,0,788,65,1,0,0,0,789,
        791,3,70,35,0,790,792,5,135,0,0,791,790,1,0,0,0,791,792,1,0,0,0,
        792,794,1,0,0,0,793,789,1,0,0,0,794,797,1,0,0,0,795,793,1,0,0,0,
        795,796,1,0,0,0,796,798,1,0,0,0,797,795,1,0,0,0,798,825,3,96,48,
        0,799,801,3,70,35,0,800,802,5,135,0,0,801,800,1,0,0,0,801,802,1,
        0,0,0,802,804,1,0,0,0,803,799,1,0,0,0,804,807,1,0,0,0,805,803,1,
        0,0,0,805,806,1,0,0,0,806,808,1,0,0,0,807,805,1,0,0,0,808,815,3,
        4,2,0,809,811,5,135,0,0,810,809,1,0,0,0,810,811,1,0,0,0,811,812,
        1,0,0,0,812,814,3,4,2,0,813,810,1,0,0,0,814,817,1,0,0,0,815,813,
        1,0,0,0,815,816,1,0,0,0,816,822,1,0,0,0,817,815,1,0,0,0,818,820,
        5,135,0,0,819,818,1,0,0,0,819,820,1,0,0,0,820,821,1,0,0,0,821,823,
        3,96,48,0,822,819,1,0,0,0,822,823,1,0,0,0,823,825,1,0,0,0,824,795,
        1,0,0,0,824,805,1,0,0,0,825,67,1,0,0,0,826,828,3,70,35,0,827,829,
        5,135,0,0,828,827,1,0,0,0,828,829,1,0,0,0,829,831,1,0,0,0,830,826,
        1,0,0,0,831,834,1,0,0,0,832,830,1,0,0,0,832,833,1,0,0,0,833,841,
        1,0,0,0,834,832,1,0,0,0,835,837,3,4,2,0,836,838,5,135,0,0,837,836,
        1,0,0,0,837,838,1,0,0,0,838,840,1,0,0,0,839,835,1,0,0,0,840,843,
        1,0,0,0,841,839,1,0,0,0,841,842,1,0,0,0,842,844,1,0,0,0,843,841,
        1,0,0,0,844,846,3,94,47,0,845,847,5,135,0,0,846,845,1,0,0,0,846,
        847,1,0,0,0,847,849,1,0,0,0,848,832,1,0,0,0,849,850,1,0,0,0,850,
        848,1,0,0,0,850,851,1,0,0,0,851,852,1,0,0,0,852,853,3,66,33,0,853,
        69,1,0,0,0,854,858,3,2,1,0,855,858,3,72,36,0,856,858,3,86,43,0,857,
        854,1,0,0,0,857,855,1,0,0,0,857,856,1,0,0,0,858,71,1,0,0,0,859,861,
        5,60,0,0,860,862,5,135,0,0,861,860,1,0,0,0,861,862,1,0,0,0,862,863,
        1,0,0,0,863,864,3,142,71,0,864,865,5,135,0,0,865,866,5,61,0,0,866,
        867,5,135,0,0,867,868,3,210,105,0,868,73,1,0,0,0,869,871,5,62,0,
        0,870,872,5,135,0,0,871,870,1,0,0,0,871,872,1,0,0,0,872,873,1,0,
        0,0,873,878,3,22,11,0,874,875,5,135,0,0,875,877,3,76,38,0,876,874,
        1,0,0,0,877,880,1,0,0,0,878,876,1,0,0,0,878,879,1,0,0,0,879,75,1,
        0,0,0,880,878,1,0,0,0,881,882,5,63,0,0,882,883,5,135,0,0,883,884,
        5,59,0,0,884,885,5,135,0,0,885,892,3,80,40,0,886,887,5,63,0,0,887,
        888,5,135,0,0,888,889,5,64,0,0,889,890,5,135,0,0,890,892,3,80,40,
        0,891,881,1,0,0,0,891,886,1,0,0,0,892,77,1,0,0,0,893,895,5,64,0,
        0,894,896,5,135,0,0,895,894,1,0,0,0,895,896,1,0,0,0,896,897,1,0,
        0,0,897,898,3,114,57,0,898,79,1,0,0,0,899,901,5,65,0,0,900,902,5,
        135,0,0,901,900,1,0,0,0,901,902,1,0,0,0,902,903,1,0,0,0,903,914,
        3,6,3,0,904,906,5,135,0,0,905,904,1,0,0,0,905,906,1,0,0,0,906,907,
        1,0,0,0,907,909,5,4,0,0,908,910,5,135,0,0,909,908,1,0,0,0,909,910,
        1,0,0,0,910,911,1,0,0,0,911,913,3,6,3,0,912,905,1,0,0,0,913,916,
        1,0,0,0,914,912,1,0,0,0,914,915,1,0,0,0,915,81,1,0,0,0,916,914,1,
        0,0,0,917,918,5,68,0,0,918,919,5,135,0,0,919,930,3,84,42,0,920,922,
        5,135,0,0,921,920,1,0,0,0,921,922,1,0,0,0,922,923,1,0,0,0,923,925,
        5,4,0,0,924,926,5,135,0,0,925,924,1,0,0,0,925,926,1,0,0,0,926,927,
        1,0,0,0,927,929,3,84,42,0,928,921,1,0,0,0,929,932,1,0,0,0,930,928,
        1,0,0,0,930,931,1,0,0,0,931,83,1,0,0,0,932,930,1,0,0,0,933,934,3,
        210,105,0,934,935,3,130,65,0,935,938,1,0,0,0,936,938,3,140,70,0,
        937,933,1,0,0,0,937,936,1,0,0,0,938,85,1,0,0,0,939,940,5,69,0,0,
        940,941,5,135,0,0,941,948,3,200,100,0,942,944,5,135,0,0,943,942,
        1,0,0,0,943,944,1,0,0,0,944,945,1,0,0,0,945,946,5,70,0,0,946,947,
        5,135,0,0,947,949,3,90,45,0,948,943,1,0,0,0,948,949,1,0,0,0,949,
        87,1,0,0,0,950,951,5,69,0,0,951,954,5,135,0,0,952,955,3,200,100,
        0,953,955,3,202,101,0,954,952,1,0,0,0,954,953,1,0,0,0,955,965,1,
        0,0,0,956,958,5,135,0,0,957,956,1,0,0,0,957,958,1,0,0,0,958,959,
        1,0,0,0,959,960,5,70,0,0,960,963,5,135,0,0,961,964,5,14,0,0,962,
        964,3,90,45,0,963,961,1,0,0,0,963,962,1,0,0,0,964,966,1,0,0,0,965,
        957,1,0,0,0,965,966,1,0,0,0,966,89,1,0,0,0,967,978,3,92,46,0,968,
        970,5,135,0,0,969,968,1,0,0,0,969,970,1,0,0,0,970,971,1,0,0,0,971,
        973,5,4,0,0,972,974,5,135,0,0,973,972,1,0,0,0,973,974,1,0,0,0,974,
        975,1,0,0,0,975,977,3,92,46,0,976,969,1,0,0,0,977,980,1,0,0,0,978,
        976,1,0,0,0,978,979,1,0,0,0,979,985,1,0,0,0,980,978,1,0,0,0,981,
        983,5,135,0,0,982,981,1,0,0,0,982,983,1,0,0,0,983,984,1,0,0,0,984,
        986,3,112,56,0,985,982,1,0,0,0,985,986,1,0,0,0,986,91,1,0,0,0,987,
        988,3,204,102,0,988,989,5,135,0,0,989,990,5,61,0,0,990,991,5,135,
        0,0,991,993,1,0,0,0,992,987,1,0,0,0,992,993,1,0,0,0,993,994,1,0,
        0,0,994,995,3,210,105,0,995,93,1,0,0,0,996,997,5,71,0,0,997,1002,
        3,98,49,0,998,1000,5,135,0,0,999,998,1,0,0,0,999,1000,1,0,0,0,1000,
        1001,1,0,0,0,1001,1003,3,112,56,0,1002,999,1,0,0,0,1002,1003,1,0,
        0,0,1003,95,1,0,0,0,1004,1005,5,72,0,0,1005,1006,3,98,49,0,1006,
        97,1,0,0,0,1007,1009,5,135,0,0,1008,1007,1,0,0,0,1008,1009,1,0,0,
        0,1009,1010,1,0,0,0,1010,1012,5,73,0,0,1011,1008,1,0,0,0,1011,1012,
        1,0,0,0,1012,1013,1,0,0,0,1013,1014,5,135,0,0,1014,1017,3,100,50,
        0,1015,1016,5,135,0,0,1016,1018,3,104,52,0,1017,1015,1,0,0,0,1017,
        1018,1,0,0,0,1018,1021,1,0,0,0,1019,1020,5,135,0,0,1020,1022,3,106,
        53,0,1021,1019,1,0,0,0,1021,1022,1,0,0,0,1022,1025,1,0,0,0,1023,
        1024,5,135,0,0,1024,1026,3,108,54,0,1025,1023,1,0,0,0,1025,1026,
        1,0,0,0,1026,99,1,0,0,0,1027,1038,5,14,0,0,1028,1030,5,135,0,0,1029,
        1028,1,0,0,0,1029,1030,1,0,0,0,1030,1031,1,0,0,0,1031,1033,5,4,0,
        0,1032,1034,5,135,0,0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,1034,1035,
        1,0,0,0,1035,1037,3,102,51,0,1036,1029,1,0,0,0,1037,1040,1,0,0,0,
        1038,1036,1,0,0,0,1038,1039,1,0,0,0,1039,1056,1,0,0,0,1040,1038,
        1,0,0,0,1041,1052,3,102,51,0,1042,1044,5,135,0,0,1043,1042,1,0,0,
        0,1043,1044,1,0,0,0,1044,1045,1,0,0,0,1045,1047,5,4,0,0,1046,1048,
        5,135,0,0,1047,1046,1,0,0,0,1047,1048,1,0,0,0,1048,1049,1,0,0,0,
        1049,1051,3,102,51,0,1050,1043,1,0,0,0,1051,1054,1,0,0,0,1052,1050,
        1,0,0,0,1052,1053,1,0,0,0,1053,1056,1,0,0,0,1054,1052,1,0,0,0,1055,
        1027,1,0,0,0,1055,1041,1,0,0,0,1056,101,1,0,0,0,1057,1058,3,142,
        71,0,1058,1059,5,135,0,0,1059,1060,5,61,0,0,1060,1061,5,135,0,0,
        1061,1062,3,210,105,0,1062,1065,1,0,0,0,1063,1065,3,142,71,0,1064,
        1057,1,0,0,0,1064,1063,1,0,0,0,1065,103,1,0,0,0,1066,1067,5,74,0,
        0,1067,1068,5,135,0,0,1068,1069,5,75,0,0,1069,1070,5,135,0,0,1070,
        1078,3,110,55,0,1071,1073,5,4,0,0,1072,1074,5,135,0,0,1073,1072,
        1,0,0,0,1073,1074,1,0,0,0,1074,1075,1,0,0,0,1075,1077,3,110,55,0,
        1076,1071,1,0,0,0,1077,1080,1,0,0,0,1078,1076,1,0,0,0,1078,1079,
        1,0,0,0,1079,105,1,0,0,0,1080,1078,1,0,0,0,1081,1082,5,76,0,0,1082,
        1083,5,135,0,0,1083,1084,3,142,71,0,1084,107,1,0,0,0,1085,1086,5,
        77,0,0,1086,1087,5,135,0,0,1087,1088,3,142,71,0,1088,109,1,0,0,0,
        1089,1094,3,142,71,0,1090,1092,5,135,0,0,1091,1090,1,0,0,0,1091,
        1092,1,0,0,0,1092,1093,1,0,0,0,1093,1095,7,3,0,0,1094,1091,1,0,0,
        0,1094,1095,1,0,0,0,1095,111,1,0,0,0,1096,1097,5,82,0,0,1097,1098,
        5,135,0,0,1098,1099,3,142,71,0,1099,113,1,0,0,0,1100,1111,3,22,11,
        0,1101,1103,5,135,0,0,1102,1101,1,0,0,0,1102,1103,1,0,0,0,1103,1104,
        1,0,0,0,1104,1106,5,4,0,0,1105,1107,5,135,0,0,1106,1105,1,0,0,0,
        1106,1107,1,0,0,0,1107,1108,1,0,0,0,1108,1110,3,22,11,0,1109,1102,
        1,0,0,0,1110,1113,1,0,0,0,1111,1109,1,0,0,0,1111,1112,1,0,0,0,1112,
        115,1,0,0,0,1113,1111,1,0,0,0,1114,1115,3,118,59,0,1115,117,1,0,
        0,0,1116,1123,3,28,14,0,1117,1119,5,135,0,0,1118,1117,1,0,0,0,1118,
        1119,1,0,0,0,1119,1120,1,0,0,0,1120,1122,3,122,61,0,1121,1118,1,
        0,0,0,1122,1125,1,0,0,0,1123,1121,1,0,0,0,1123,1124,1,0,0,0,1124,
        1131,1,0,0,0,1125,1123,1,0,0,0,1126,1127,5,5,0,0,1127,1128,3,118,
        59,0,1128,1129,5,6,0,0,1129,1131,1,0,0,0,1130,1116,1,0,0,0,1130,
        1126,1,0,0,0,1131,119,1,0,0,0,1132,1137,3,28,14,0,1133,1135,5,135,
        0,0,1134,1133,1,0,0,0,1134,1135,1,0,0,0,1135,1136,1,0,0,0,1136,1138,
        3,122,61,0,1137,1134,1,0,0,0,1138,1139,1,0,0,0,1139,1137,1,0,0,0,
        1139,1140,1,0,0,0,1140,121,1,0,0,0,1141,1143,3,124,62,0,1142,1144,
        5,135,0,0,1143,1142,1,0,0,0,1143,1144,1,0,0,0,1144,1145,1,0,0,0,
        1145,1146,3,28,14,0,1146,123,1,0,0,0,1147,1149,3,232,116,0,1148,
        1150,5,135,0,0,1149,1148,1,0,0,0,1149,1150,1,0,0,0,1150,1151,1,0,
        0,0,1151,1153,3,236,118,0,1152,1154,5,135,0,0,1153,1152,1,0,0,0,
        1153,1154,1,0,0,0,1154,1156,1,0,0,0,1155,1157,3,38,19,0,1156,1155,
        1,0,0,0,1156,1157,1,0,0,0,1157,1159,1,0,0,0,1158,1160,5,135,0,0,
        1159,1158,1,0,0,0,1159,1160,1,0,0,0,1160,1161,1,0,0,0,1161,1163,
        3,236,118,0,1162,1164,5,135,0,0,1163,1162,1,0,0,0,1163,1164,1,0,
        0,0,1164,1165,1,0,0,0,1165,1166,3,234,117,0,1166,1212,1,0,0,0,1167,
        1169,3,232,116,0,1168,1170,5,135,0,0,1169,1168,1,0,0,0,1169,1170,
        1,0,0,0,1170,1171,1,0,0,0,1171,1173,3,236,118,0,1172,1174,5,135,
        0,0,1173,1172,1,0,0,0,1173,1174,1,0,0,0,1174,1176,1,0,0,0,1175,1177,
        3,38,19,0,1176,1175,1,0,0,0,1176,1177,1,0,0,0,1177,1179,1,0,0,0,
        1178,1180,5,135,0,0,1179,1178,1,0,0,0,1179,1180,1,0,0,0,1180,1181,
        1,0,0,0,1181,1182,3,236,118,0,1182,1212,1,0,0,0,1183,1185,3,236,
        118,0,1184,1186,5,135,0,0,1185,1184,1,0,0,0,1185,1186,1,0,0,0,1186,
        1188,1,0,0,0,1187,1189,3,38,19,0,1188,1187,1,0,0,0,1188,1189,1,0,
        0,0,1189,1191,1,0,0,0,1190,1192,5,135,0,0,1191,1190,1,0,0,0,1191,
        1192,1,0,0,0,1192,1193,1,0,0,0,1193,1195,3,236,118,0,1194,1196,5,
        135,0,0,1195,1194,1,0,0,0,1195,1196,1,0,0,0,1196,1197,1,0,0,0,1197,
        1198,3,234,117,0,1198,1212,1,0,0,0,1199,1201,3,236,118,0,1200,1202,
        5,135,0,0,1201,1200,1,0,0,0,1201,1202,1,0,0,0,1202,1204,1,0,0,0,
        1203,1205,3,38,19,0,1204,1203,1,0,0,0,1204,1205,1,0,0,0,1205,1207,
        1,0,0,0,1206,1208,5,135,0,0,1207,1206,1,0,0,0,1207,1208,1,0,0,0,
        1208,1209,1,0,0,0,1209,1210,3,236,118,0,1210,1212,1,0,0,0,1211,1147,
        1,0,0,0,1211,1167,1,0,0,0,1211,1183,1,0,0,0,1211,1199,1,0,0,0,1212,
        125,1,0,0,0,1213,1216,3,224,112,0,1214,1216,3,228,114,0,1215,1213,
        1,0,0,0,1215,1214,1,0,0,0,1216,127,1,0,0,0,1217,1219,5,8,0,0,1218,
        1220,5,135,0,0,1219,1218,1,0,0,0,1219,1220,1,0,0,0,1220,1221,1,0,
        0,0,1221,1235,3,138,69,0,1222,1224,5,135,0,0,1223,1222,1,0,0,0,1223,
        1224,1,0,0,0,1224,1225,1,0,0,0,1225,1227,5,15,0,0,1226,1228,5,8,
        0,0,1227,1226,1,0,0,0,1227,1228,1,0,0,0,1228,1230,1,0,0,0,1229,1231,
        5,135,0,0,1230,1229,1,0,0,0,1230,1231,1,0,0,0,1231,1232,1,0,0,0,
        1232,1234,3,138,69,0,1233,1223,1,0,0,0,1234,1237,1,0,0,0,1235,1233,
        1,0,0,0,1235,1236,1,0,0,0,1236,129,1,0,0,0,1237,1235,1,0,0,0,1238,
        1245,3,132,66,0,1239,1241,5,135,0,0,1240,1239,1,0,0,0,1240,1241,
        1,0,0,0,1241,1242,1,0,0,0,1242,1244,3,132,66,0,1243,1240,1,0,0,0,
        1244,1247,1,0,0,0,1245,1243,1,0,0,0,1245,1246,1,0,0,0,1246,131,1,
        0,0,0,1247,1245,1,0,0,0,1248,1250,5,8,0,0,1249,1251,5,135,0,0,1250,
        1249,1,0,0,0,1250,1251,1,0,0,0,1251,1252,1,0,0,0,1252,1253,3,136,
        68,0,1253,133,1,0,0,0,1254,1256,5,14,0,0,1255,1257,5,135,0,0,1256,
        1255,1,0,0,0,1256,1257,1,0,0,0,1257,1262,1,0,0,0,1258,1260,3,218,
        109,0,1259,1261,5,135,0,0,1260,1259,1,0,0,0,1260,1261,1,0,0,0,1261,
        1263,1,0,0,0,1262,1258,1,0,0,0,1262,1263,1,0,0,0,1263,1274,1,0,0,
        0,1264,1266,5,12,0,0,1265,1267,5,135,0,0,1266,1265,1,0,0,0,1266,
        1267,1,0,0,0,1267,1272,1,0,0,0,1268,1270,3,218,109,0,1269,1271,5,
        135,0,0,1270,1269,1,0,0,0,1270,1271,1,0,0,0,1271,1273,1,0,0,0,1272,
        1268,1,0,0,0,1272,1273,1,0,0,0,1273,1275,1,0,0,0,1274,1264,1,0,0,
        0,1274,1275,1,0,0,0,1275,135,1,0,0,0,1276,1277,3,230,115,0,1277,
        137,1,0,0,0,1278,1279,3,230,115,0,1279,139,1,0,0,0,1280,1285,3,174,
        87,0,1281,1283,5,135,0,0,1282,1281,1,0,0,0,1282,1283,1,0,0,0,1283,
        1284,1,0,0,0,1284,1286,3,172,86,0,1285,1282,1,0,0,0,1286,1287,1,
        0,0,0,1287,1285,1,0,0,0,1287,1288,1,0,0,0,1288,141,1,0,0,0,1289,
        1290,3,144,72,0,1290,143,1,0,0,0,1291,1298,3,146,73,0,1292,1293,
        5,135,0,0,1293,1294,5,83,0,0,1294,1295,5,135,0,0,1295,1297,3,146,
        73,0,1296,1292,1,0,0,0,1297,1300,1,0,0,0,1298,1296,1,0,0,0,1298,
        1299,1,0,0,0,1299,145,1,0,0,0,1300,1298,1,0,0,0,1301,1308,3,148,
        74,0,1302,1303,5,135,0,0,1303,1304,5,84,0,0,1304,1305,5,135,0,0,
        1305,1307,3,148,74,0,1306,1302,1,0,0,0,1307,1310,1,0,0,0,1308,1306,
        1,0,0,0,1308,1309,1,0,0,0,1309,147,1,0,0,0,1310,1308,1,0,0,0,1311,
        1318,3,150,75,0,1312,1313,5,135,0,0,1313,1314,5,85,0,0,1314,1315,
        5,135,0,0,1315,1317,3,150,75,0,1316,1312,1,0,0,0,1317,1320,1,0,0,
        0,1318,1316,1,0,0,0,1318,1319,1,0,0,0,1319,149,1,0,0,0,1320,1318,
        1,0,0,0,1321,1323,5,86,0,0,1322,1324,5,135,0,0,1323,1322,1,0,0,0,
        1323,1324,1,0,0,0,1324,1326,1,0,0,0,1325,1321,1,0,0,0,1326,1329,
        1,0,0,0,1327,1325,1,0,0,0,1327,1328,1,0,0,0,1328,1330,1,0,0,0,1329,
        1327,1,0,0,0,1330,1331,3,152,76,0,1331,151,1,0,0,0,1332,1339,3,40,
        20,0,1333,1335,5,135,0,0,1334,1333,1,0,0,0,1334,1335,1,0,0,0,1335,
        1336,1,0,0,0,1336,1338,3,154,77,0,1337,1334,1,0,0,0,1338,1341,1,
        0,0,0,1339,1337,1,0,0,0,1339,1340,1,0,0,0,1340,153,1,0,0,0,1341,
        1339,1,0,0,0,1342,1344,5,2,0,0,1343,1345,5,135,0,0,1344,1343,1,0,
        0,0,1344,1345,1,0,0,0,1345,1346,1,0,0,0,1346,1373,3,40,20,0,1347,
        1349,5,16,0,0,1348,1350,5,135,0,0,1349,1348,1,0,0,0,1349,1350,1,
        0,0,0,1350,1351,1,0,0,0,1351,1373,3,40,20,0,1352,1354,5,17,0,0,1353,
        1355,5,135,0,0,1354,1353,1,0,0,0,1354,1355,1,0,0,0,1355,1356,1,0,
        0,0,1356,1373,3,40,20,0,1357,1359,5,18,0,0,1358,1360,5,135,0,0,1359,
        1358,1,0,0,0,1359,1360,1,0,0,0,1360,1361,1,0,0,0,1361,1373,3,40,
        20,0,1362,1364,5,19,0,0,1363,1365,5,135,0,0,1364,1363,1,0,0,0,1364,
        1365,1,0,0,0,1365,1366,1,0,0,0,1366,1373,3,40,20,0,1367,1369,5,20,
        0,0,1368,1370,5,135,0,0,1369,1368,1,0,0,0,1369,1370,1,0,0,0,1370,
        1371,1,0,0,0,1371,1373,3,40,20,0,1372,1342,1,0,0,0,1372,1347,1,0,
        0,0,1372,1352,1,0,0,0,1372,1357,1,0,0,0,1372,1362,1,0,0,0,1372,1367,
        1,0,0,0,1373,155,1,0,0,0,1374,1375,5,135,0,0,1375,1376,5,87,0,0,
        1376,1377,5,135,0,0,1377,1385,5,71,0,0,1378,1379,5,135,0,0,1379,
        1380,5,88,0,0,1380,1381,5,135,0,0,1381,1385,5,71,0,0,1382,1383,5,
        135,0,0,1383,1385,5,89,0,0,1384,1374,1,0,0,0,1384,1378,1,0,0,0,1384,
        1382,1,0,0,0,1385,1387,1,0,0,0,1386,1388,5,135,0,0,1387,1386,1,0,
        0,0,1387,1388,1,0,0,0,1388,1389,1,0,0,0,1389,1390,3,162,81,0,1390,
        157,1,0,0,0,1391,1392,5,135,0,0,1392,1394,5,90,0,0,1393,1395,5,135,
        0,0,1394,1393,1,0,0,0,1394,1395,1,0,0,0,1395,1396,1,0,0,0,1396,1397,
        3,162,81,0,1397,159,1,0,0,0,1398,1399,5,135,0,0,1399,1400,5,91,0,
        0,1400,1401,5,135,0,0,1401,1409,5,92,0,0,1402,1403,5,135,0,0,1403,
        1404,5,91,0,0,1404,1405,5,135,0,0,1405,1406,5,86,0,0,1406,1407,5,
        135,0,0,1407,1409,5,92,0,0,1408,1398,1,0,0,0,1408,1402,1,0,0,0,1409,
        161,1,0,0,0,1410,1429,3,164,82,0,1411,1413,5,135,0,0,1412,1411,1,
        0,0,0,1412,1413,1,0,0,0,1413,1414,1,0,0,0,1414,1416,5,21,0,0,1415,
        1417,5,135,0,0,1416,1415,1,0,0,0,1416,1417,1,0,0,0,1417,1418,1,0,
        0,0,1418,1428,3,164,82,0,1419,1421,5,135,0,0,1420,1419,1,0,0,0,1420,
        1421,1,0,0,0,1421,1422,1,0,0,0,1422,1424,5,22,0,0,1423,1425,5,135,
        0,0,1424,1423,1,0,0,0,1424,1425,1,0,0,0,1425,1426,1,0,0,0,1426,1428,
        3,164,82,0,1427,1412,1,0,0,0,1427,1420,1,0,0,0,1428,1431,1,0,0,0,
        1429,1427,1,0,0,0,1429,1430,1,0,0,0,1430,163,1,0,0,0,1431,1429,1,
        0,0,0,1432,1459,3,166,83,0,1433,1435,5,135,0,0,1434,1433,1,0,0,0,
        1434,1435,1,0,0,0,1435,1436,1,0,0,0,1436,1438,5,14,0,0,1437,1439,
        5,135,0,0,1438,1437,1,0,0,0,1438,1439,1,0,0,0,1439,1440,1,0,0,0,
        1440,1458,3,166,83,0,1441,1443,5,135,0,0,1442,1441,1,0,0,0,1442,
        1443,1,0,0,0,1443,1444,1,0,0,0,1444,1446,5,23,0,0,1445,1447,5,135,
        0,0,1446,1445,1,0,0,0,1446,1447,1,0,0,0,1447,1448,1,0,0,0,1448,1458,
        3,166,83,0,1449,1451,5,135,0,0,1450,1449,1,0,0,0,1450,1451,1,0,0,
        0,1451,1452,1,0,0,0,1452,1454,5,24,0,0,1453,1455,5,135,0,0,1454,
        1453,1,0,0,0,1454,1455,1,0,0,0,1455,1456,1,0,0,0,1456,1458,3,166,
        83,0,1457,1434,1,0,0,0,1457,1442,1,0,0,0,1457,1450,1,0,0,0,1458,
        1461,1,0,0,0,1459,1457,1,0,0,0,1459,1460,1,0,0,0,1460,165,1,0,0,
        0,1461,1459,1,0,0,0,1462,1473,3,168,84,0,1463,1465,5,135,0,0,1464,
        1463,1,0,0,0,1464,1465,1,0,0,0,1465,1466,1,0,0,0,1466,1468,5,25,
        0,0,1467,1469,5,135,0,0,1468,1467,1,0,0,0,1468,1469,1,0,0,0,1469,
        1470,1,0,0,0,1470,1472,3,168,84,0,1471,1464,1,0,0,0,1472,1475,1,
        0,0,0,1473,1471,1,0,0,0,1473,1474,1,0,0,0,1474,167,1,0,0,0,1475,
        1473,1,0,0,0,1476,1483,3,42,21,0,1477,1479,7,4,0,0,1478,1480,5,135,
        0,0,1479,1478,1,0,0,0,1479,1480,1,0,0,0,1480,1481,1,0,0,0,1481,1483,
        3,42,21,0,1482,1476,1,0,0,0,1482,1477,1,0,0,0,1483,169,1,0,0,0,1484,
        1491,3,174,87,0,1485,1487,5,135,0,0,1486,1485,1,0,0,0,1486,1487,
        1,0,0,0,1487,1488,1,0,0,0,1488,1490,3,172,86,0,1489,1486,1,0,0,0,
        1490,1493,1,0,0,0,1491,1489,1,0,0,0,1491,1492,1,0,0,0,1492,1498,
        1,0,0,0,1493,1491,1,0,0,0,1494,1496,5,135,0,0,1495,1494,1,0,0,0,
        1495,1496,1,0,0,0,1496,1497,1,0,0,0,1497,1499,3,130,65,0,1498,1495,
        1,0,0,0,1498,1499,1,0,0,0,1499,171,1,0,0,0,1500,1502,5,1,0,0,1501,
        1503,5,135,0,0,1502,1501,1,0,0,0,1502,1503,1,0,0,0,1503,1504,1,0,
        0,0,1504,1505,3,226,113,0,1505,173,1,0,0,0,1506,1531,3,212,106,0,
        1507,1531,3,228,114,0,1508,1531,3,176,88,0,1509,1511,5,93,0,0,1510,
        1512,5,135,0,0,1511,1510,1,0,0,0,1511,1512,1,0,0,0,1512,1513,1,0,
        0,0,1513,1515,5,5,0,0,1514,1516,5,135,0,0,1515,1514,1,0,0,0,1515,
        1516,1,0,0,0,1516,1517,1,0,0,0,1517,1519,5,14,0,0,1518,1520,5,135,
        0,0,1519,1518,1,0,0,0,1519,1520,1,0,0,0,1520,1521,1,0,0,0,1521,1531,
        5,6,0,0,1522,1531,3,180,90,0,1523,1531,3,182,91,0,1524,1531,3,184,
        92,0,1525,1531,3,188,94,0,1526,1531,3,190,95,0,1527,1531,3,194,97,
        0,1528,1531,3,198,99,0,1529,1531,3,210,105,0,1530,1506,1,0,0,0,1530,
        1507,1,0,0,0,1530,1508,1,0,0,0,1530,1509,1,0,0,0,1530,1522,1,0,0,
        0,1530,1523,1,0,0,0,1530,1524,1,0,0,0,1530,1525,1,0,0,0,1530,1526,
        1,0,0,0,1530,1527,1,0,0,0,1530,1528,1,0,0,0,1530,1529,1,0,0,0,1531,
        175,1,0,0,0,1532,1537,5,94,0,0,1533,1535,5,135,0,0,1534,1533,1,0,
        0,0,1534,1535,1,0,0,0,1535,1536,1,0,0,0,1536,1538,3,178,89,0,1537,
        1534,1,0,0,0,1538,1539,1,0,0,0,1539,1537,1,0,0,0,1539,1540,1,0,0,
        0,1540,1555,1,0,0,0,1541,1543,5,94,0,0,1542,1544,5,135,0,0,1543,
        1542,1,0,0,0,1543,1544,1,0,0,0,1544,1545,1,0,0,0,1545,1550,3,142,
        71,0,1546,1548,5,135,0,0,1547,1546,1,0,0,0,1547,1548,1,0,0,0,1548,
        1549,1,0,0,0,1549,1551,3,178,89,0,1550,1547,1,0,0,0,1551,1552,1,
        0,0,0,1552,1550,1,0,0,0,1552,1553,1,0,0,0,1553,1555,1,0,0,0,1554,
        1532,1,0,0,0,1554,1541,1,0,0,0,1555,1564,1,0,0,0,1556,1558,5,135,
        0,0,1557,1556,1,0,0,0,1557,1558,1,0,0,0,1558,1559,1,0,0,0,1559,1561,
        5,95,0,0,1560,1562,5,135,0,0,1561,1560,1,0,0,0,1561,1562,1,0,0,0,
        1562,1563,1,0,0,0,1563,1565,3,142,71,0,1564,1557,1,0,0,0,1564,1565,
        1,0,0,0,1565,1567,1,0,0,0,1566,1568,5,135,0,0,1567,1566,1,0,0,0,
        1567,1568,1,0,0,0,1568,1569,1,0,0,0,1569,1570,5,96,0,0,1570,177,
        1,0,0,0,1571,1573,5,97,0,0,1572,1574,5,135,0,0,1573,1572,1,0,0,0,
        1573,1574,1,0,0,0,1574,1575,1,0,0,0,1575,1577,3,142,71,0,1576,1578,
        5,135,0,0,1577,1576,1,0,0,0,1577,1578,1,0,0,0,1578,1579,1,0,0,0,
        1579,1581,5,98,0,0,1580,1582,5,135,0,0,1581,1580,1,0,0,0,1581,1582,
        1,0,0,0,1582,1583,1,0,0,0,1583,1584,3,142,71,0,1584,179,1,0,0,0,
        1585,1587,5,10,0,0,1586,1588,5,135,0,0,1587,1586,1,0,0,0,1587,1588,
        1,0,0,0,1588,1589,1,0,0,0,1589,1598,3,186,93,0,1590,1592,5,135,0,
        0,1591,1590,1,0,0,0,1591,1592,1,0,0,0,1592,1593,1,0,0,0,1593,1595,
        5,15,0,0,1594,1596,5,135,0,0,1595,1594,1,0,0,0,1595,1596,1,0,0,0,
        1596,1597,1,0,0,0,1597,1599,3,142,71,0,1598,1591,1,0,0,0,1598,1599,
        1,0,0,0,1599,1601,1,0,0,0,1600,1602,5,135,0,0,1601,1600,1,0,0,0,
        1601,1602,1,0,0,0,1602,1603,1,0,0,0,1603,1604,5,11,0,0,1604,181,
        1,0,0,0,1605,1607,5,10,0,0,1606,1608,5,135,0,0,1607,1606,1,0,0,0,
        1607,1608,1,0,0,0,1608,1617,1,0,0,0,1609,1611,3,210,105,0,1610,1612,
        5,135,0,0,1611,1610,1,0,0,0,1611,1612,1,0,0,0,1612,1613,1,0,0,0,
        1613,1615,5,2,0,0,1614,1616,5,135,0,0,1615,1614,1,0,0,0,1615,1616,
        1,0,0,0,1616,1618,1,0,0,0,1617,1609,1,0,0,0,1617,1618,1,0,0,0,1618,
        1619,1,0,0,0,1619,1621,3,120,60,0,1620,1622,5,135,0,0,1621,1620,
        1,0,0,0,1621,1622,1,0,0,0,1622,1627,1,0,0,0,1623,1625,3,112,56,0,
        1624,1626,5,135,0,0,1625,1624,1,0,0,0,1625,1626,1,0,0,0,1626,1628,
        1,0,0,0,1627,1623,1,0,0,0,1627,1628,1,0,0,0,1628,1629,1,0,0,0,1629,
        1631,5,15,0,0,1630,1632,5,135,0,0,1631,1630,1,0,0,0,1631,1632,1,
        0,0,0,1632,1633,1,0,0,0,1633,1635,3,142,71,0,1634,1636,5,135,0,0,
        1635,1634,1,0,0,0,1635,1636,1,0,0,0,1636,1637,1,0,0,0,1637,1638,
        5,11,0,0,1638,183,1,0,0,0,1639,1641,5,57,0,0,1640,1642,5,135,0,0,
        1641,1640,1,0,0,0,1641,1642,1,0,0,0,1642,1643,1,0,0,0,1643,1645,
        5,5,0,0,1644,1646,5,135,0,0,1645,1644,1,0,0,0,1645,1646,1,0,0,0,
        1646,1647,1,0,0,0,1647,1649,3,186,93,0,1648,1650,5,135,0,0,1649,
        1648,1,0,0,0,1649,1650,1,0,0,0,1650,1651,1,0,0,0,1651,1652,5,6,0,
        0,1652,1696,1,0,0,0,1653,1655,5,99,0,0,1654,1656,5,135,0,0,1655,
        1654,1,0,0,0,1655,1656,1,0,0,0,1656,1657,1,0,0,0,1657,1659,5,5,0,
        0,1658,1660,5,135,0,0,1659,1658,1,0,0,0,1659,1660,1,0,0,0,1660,1661,
        1,0,0,0,1661,1663,3,186,93,0,1662,1664,5,135,0,0,1663,1662,1,0,0,
        0,1663,1664,1,0,0,0,1664,1665,1,0,0,0,1665,1666,5,6,0,0,1666,1696,
        1,0,0,0,1667,1669,5,100,0,0,1668,1670,5,135,0,0,1669,1668,1,0,0,
        0,1669,1670,1,0,0,0,1670,1671,1,0,0,0,1671,1673,5,5,0,0,1672,1674,
        5,135,0,0,1673,1672,1,0,0,0,1673,1674,1,0,0,0,1674,1675,1,0,0,0,
        1675,1677,3,186,93,0,1676,1678,5,135,0,0,1677,1676,1,0,0,0,1677,
        1678,1,0,0,0,1678,1679,1,0,0,0,1679,1680,5,6,0,0,1680,1696,1,0,0,
        0,1681,1683,5,101,0,0,1682,1684,5,135,0,0,1683,1682,1,0,0,0,1683,
        1684,1,0,0,0,1684,1685,1,0,0,0,1685,1687,5,5,0,0,1686,1688,5,135,
        0,0,1687,1686,1,0,0,0,1687,1688,1,0,0,0,1688,1689,1,0,0,0,1689,1691,
        3,186,93,0,1690,1692,5,135,0,0,1691,1690,1,0,0,0,1691,1692,1,0,0,
        0,1692,1693,1,0,0,0,1693,1694,5,6,0,0,1694,1696,1,0,0,0,1695,1639,
        1,0,0,0,1695,1653,1,0,0,0,1695,1667,1,0,0,0,1695,1681,1,0,0,0,1696,
        185,1,0,0,0,1697,1702,3,192,96,0,1698,1700,5,135,0,0,1699,1698,1,
        0,0,0,1699,1700,1,0,0,0,1700,1701,1,0,0,0,1701,1703,3,112,56,0,1702,
        1699,1,0,0,0,1702,1703,1,0,0,0,1703,187,1,0,0,0,1704,1705,3,120,
        60,0,1705,189,1,0,0,0,1706,1708,5,5,0,0,1707,1709,5,135,0,0,1708,
        1707,1,0,0,0,1708,1709,1,0,0,0,1709,1710,1,0,0,0,1710,1712,3,142,
        71,0,1711,1713,5,135,0,0,1712,1711,1,0,0,0,1712,1713,1,0,0,0,1713,
        1714,1,0,0,0,1714,1715,5,6,0,0,1715,191,1,0,0,0,1716,1717,3,210,
        105,0,1717,1718,5,135,0,0,1718,1719,5,90,0,0,1719,1720,5,135,0,0,
        1720,1721,3,142,71,0,1721,193,1,0,0,0,1722,1724,3,196,98,0,1723,
        1725,5,135,0,0,1724,1723,1,0,0,0,1724,1725,1,0,0,0,1725,1726,1,0,
        0,0,1726,1728,5,5,0,0,1727,1729,5,135,0,0,1728,1727,1,0,0,0,1728,
        1729,1,0,0,0,1729,1734,1,0,0,0,1730,1732,5,73,0,0,1731,1733,5,135,
        0,0,1732,1731,1,0,0,0,1732,1733,1,0,0,0,1733,1735,1,0,0,0,1734,1730,
        1,0,0,0,1734,1735,1,0,0,0,1735,1753,1,0,0,0,1736,1738,3,142,71,0,
        1737,1739,5,135,0,0,1738,1737,1,0,0,0,1738,1739,1,0,0,0,1739,1750,
        1,0,0,0,1740,1742,5,4,0,0,1741,1743,5,135,0,0,1742,1741,1,0,0,0,
        1742,1743,1,0,0,0,1743,1744,1,0,0,0,1744,1746,3,142,71,0,1745,1747,
        5,135,0,0,1746,1745,1,0,0,0,1746,1747,1,0,0,0,1747,1749,1,0,0,0,
        1748,1740,1,0,0,0,1749,1752,1,0,0,0,1750,1748,1,0,0,0,1750,1751,
        1,0,0,0,1751,1754,1,0,0,0,1752,1750,1,0,0,0,1753,1736,1,0,0,0,1753,
        1754,1,0,0,0,1754,1755,1,0,0,0,1755,1756,5,6,0,0,1756,195,1,0,0,
        0,1757,1758,3,208,104,0,1758,1759,3,52,26,0,1759,197,1,0,0,0,1760,
        1762,5,102,0,0,1761,1763,5,135,0,0,1762,1761,1,0,0,0,1762,1763,1,
        0,0,0,1763,1764,1,0,0,0,1764,1766,5,7,0,0,1765,1767,5,135,0,0,1766,
        1765,1,0,0,0,1766,1767,1,0,0,0,1767,1776,1,0,0,0,1768,1777,3,60,
        30,0,1769,1774,3,114,57,0,1770,1772,5,135,0,0,1771,1770,1,0,0,0,
        1771,1772,1,0,0,0,1772,1773,1,0,0,0,1773,1775,3,112,56,0,1774,1771,
        1,0,0,0,1774,1775,1,0,0,0,1775,1777,1,0,0,0,1776,1768,1,0,0,0,1776,
        1769,1,0,0,0,1777,1779,1,0,0,0,1778,1780,5,135,0,0,1779,1778,1,0,
        0,0,1779,1780,1,0,0,0,1780,1781,1,0,0,0,1781,1782,5,9,0,0,1782,199,
        1,0,0,0,1783,1785,3,206,103,0,1784,1786,5,135,0,0,1785,1784,1,0,
        0,0,1785,1786,1,0,0,0,1786,1787,1,0,0,0,1787,1789,5,5,0,0,1788,1790,
        5,135,0,0,1789,1788,1,0,0,0,1789,1790,1,0,0,0,1790,1808,1,0,0,0,
        1791,1793,3,142,71,0,1792,1794,5,135,0,0,1793,1792,1,0,0,0,1793,
        1794,1,0,0,0,1794,1805,1,0,0,0,1795,1797,5,4,0,0,1796,1798,5,135,
        0,0,1797,1796,1,0,0,0,1797,1798,1,0,0,0,1798,1799,1,0,0,0,1799,1801,
        3,142,71,0,1800,1802,5,135,0,0,1801,1800,1,0,0,0,1801,1802,1,0,0,
        0,1802,1804,1,0,0,0,1803,1795,1,0,0,0,1804,1807,1,0,0,0,1805,1803,
        1,0,0,0,1805,1806,1,0,0,0,1806,1809,1,0,0,0,1807,1805,1,0,0,0,1808,
        1791,1,0,0,0,1808,1809,1,0,0,0,1809,1810,1,0,0,0,1810,1811,5,6,0,
        0,1811,201,1,0,0,0,1812,1813,3,206,103,0,1813,203,1,0,0,0,1814,1815,
        3,52,26,0,1815,205,1,0,0,0,1816,1817,3,208,104,0,1817,1818,3,52,
        26,0,1818,207,1,0,0,0,1819,1820,3,52,26,0,1820,1821,5,1,0,0,1821,
        1823,1,0,0,0,1822,1819,1,0,0,0,1823,1826,1,0,0,0,1824,1822,1,0,0,
        0,1824,1825,1,0,0,0,1825,209,1,0,0,0,1826,1824,1,0,0,0,1827,1828,
        3,52,26,0,1828,211,1,0,0,0,1829,1836,3,214,107,0,1830,1836,5,92,
        0,0,1831,1836,3,216,108,0,1832,1836,5,117,0,0,1833,1836,3,222,111,
        0,1834,1836,3,224,112,0,1835,1829,1,0,0,0,1835,1830,1,0,0,0,1835,
        1831,1,0,0,0,1835,1832,1,0,0,0,1835,1833,1,0,0,0,1835,1834,1,0,0,
        0,1836,213,1,0,0,0,1837,1838,7,5,0,0,1838,215,1,0,0,0,1839,1842,
        3,220,110,0,1840,1842,3,218,109,0,1841,1839,1,0,0,0,1841,1840,1,
        0,0,0,1842,217,1,0,0,0,1843,1844,7,6,0,0,1844,219,1,0,0,0,1845,1846,
        7,7,0,0,1846,221,1,0,0,0,1847,1849,5,10,0,0,1848,1850,5,135,0,0,
        1849,1848,1,0,0,0,1849,1850,1,0,0,0,1850,1868,1,0,0,0,1851,1853,
        3,142,71,0,1852,1854,5,135,0,0,1853,1852,1,0,0,0,1853,1854,1,0,0,
        0,1854,1865,1,0,0,0,1855,1857,5,4,0,0,1856,1858,5,135,0,0,1857,1856,
        1,0,0,0,1857,1858,1,0,0,0,1858,1859,1,0,0,0,1859,1861,3,142,71,0,
        1860,1862,5,135,0,0,1861,1860,1,0,0,0,1861,1862,1,0,0,0,1862,1864,
        1,0,0,0,1863,1855,1,0,0,0,1864,1867,1,0,0,0,1865,1863,1,0,0,0,1865,
        1866,1,0,0,0,1866,1869,1,0,0,0,1867,1865,1,0,0,0,1868,1851,1,0,0,
        0,1868,1869,1,0,0,0,1869,1870,1,0,0,0,1870,1871,5,11,0,0,1871,223,
        1,0,0,0,1872,1874,5,7,0,0,1873,1875,5,135,0,0,1874,1873,1,0,0,0,
        1874,1875,1,0,0,0,1875,1909,1,0,0,0,1876,1878,3,226,113,0,1877,1879,
        5,135,0,0,1878,1877,1,0,0,0,1878,1879,1,0,0,0,1879,1880,1,0,0,0,
        1880,1882,5,8,0,0,1881,1883,5,135,0,0,1882,1881,1,0,0,0,1882,1883,
        1,0,0,0,1883,1884,1,0,0,0,1884,1886,3,142,71,0,1885,1887,5,135,0,
        0,1886,1885,1,0,0,0,1886,1887,1,0,0,0,1887,1906,1,0,0,0,1888,1890,
        5,4,0,0,1889,1891,5,135,0,0,1890,1889,1,0,0,0,1890,1891,1,0,0,0,
        1891,1892,1,0,0,0,1892,1894,3,226,113,0,1893,1895,5,135,0,0,1894,
        1893,1,0,0,0,1894,1895,1,0,0,0,1895,1896,1,0,0,0,1896,1898,5,8,0,
        0,1897,1899,5,135,0,0,1898,1897,1,0,0,0,1898,1899,1,0,0,0,1899,1900,
        1,0,0,0,1900,1902,3,142,71,0,1901,1903,5,135,0,0,1902,1901,1,0,0,
        0,1902,1903,1,0,0,0,1903,1905,1,0,0,0,1904,1888,1,0,0,0,1905,1908,
        1,0,0,0,1906,1904,1,0,0,0,1906,1907,1,0,0,0,1907,1910,1,0,0,0,1908,
        1906,1,0,0,0,1909,1876,1,0,0,0,1909,1910,1,0,0,0,1910,1911,1,0,0,
        0,1911,1912,5,9,0,0,1912,225,1,0,0,0,1913,1914,3,230,115,0,1914,
        227,1,0,0,0,1915,1918,5,26,0,0,1916,1919,3,52,26,0,1917,1919,5,106,
        0,0,1918,1916,1,0,0,0,1918,1917,1,0,0,0,1919,229,1,0,0,0,1920,1923,
        3,52,26,0,1921,1923,3,54,27,0,1922,1920,1,0,0,0,1922,1921,1,0,0,
        0,1923,231,1,0,0,0,1924,1925,7,8,0,0,1925,233,1,0,0,0,1926,1927,
        7,9,0,0,1927,235,1,0,0,0,1928,1929,7,10,0,0,1929,237,1,0,0,0,369,
        241,245,249,253,257,259,262,265,273,276,279,283,289,292,297,303,
        306,311,314,317,320,323,329,332,337,340,343,347,351,354,358,362,
        368,372,378,382,388,392,396,400,404,409,416,419,421,425,429,433,
        437,442,449,452,454,458,464,470,475,478,482,486,492,496,501,505,
        509,513,519,523,529,533,535,539,541,545,547,551,553,559,563,570,
        578,581,587,591,593,596,600,604,606,610,614,616,620,622,625,629,
        631,635,637,646,650,653,660,664,668,671,673,678,683,686,689,691,
        694,698,703,713,717,721,725,729,732,738,745,749,752,755,763,768,
        775,780,783,787,791,795,801,805,810,815,819,822,824,828,832,837,
        841,846,850,857,861,871,878,891,895,901,905,909,914,921,925,930,
        937,943,948,954,957,963,965,969,973,978,982,985,992,999,1002,1008,
        1011,1017,1021,1025,1029,1033,1038,1043,1047,1052,1055,1064,1073,
        1078,1091,1094,1102,1106,1111,1118,1123,1130,1134,1139,1143,1149,
        1153,1156,1159,1163,1169,1173,1176,1179,1185,1188,1191,1195,1201,
        1204,1207,1211,1215,1219,1223,1227,1230,1235,1240,1245,1250,1256,
        1260,1262,1266,1270,1272,1274,1282,1287,1298,1308,1318,1323,1327,
        1334,1339,1344,1349,1354,1359,1364,1369,1372,1384,1387,1394,1408,
        1412,1416,1420,1424,1427,1429,1434,1438,1442,1446,1450,1454,1457,
        1459,1464,1468,1473,1479,1482,1486,1491,1495,1498,1502,1511,1515,
        1519,1530,1534,1539,1543,1547,1552,1554,1557,1561,1564,1567,1573,
        1577,1581,1587,1591,1595,1598,1601,1607,1611,1615,1617,1621,1625,
        1627,1631,1635,1641,1645,1649,1655,1659,1663,1669,1673,1677,1683,
        1687,1691,1695,1699,1702,1708,1712,1724,1728,1732,1734,1738,1742,
        1746,1750,1753,1762,1766,1771,1774,1776,1779,1785,1789,1793,1797,
        1801,1805,1808,1824,1835,1841,1849,1853,1857,1861,1865,1868,1874,
        1878,1882,1886,1890,1894,1898,1902,1906,1909,1918,1922
    ]

class s_cypherParser ( Parser ):

    grammarFileName = "s_cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "'='", "'+='", "','", "'('", "')'", 
                     "'{'", "':'", "'}'", "'['", "']'", "'..'", "';'", "'*'", 
                     "'|'", "'<>'", "'<'", "'>'", "'<='", "'>='", "'+'", 
                     "'-'", "'/'", "'%'", "'^'", "'$'", "'\\u27E8'", "'\\u3008'", 
                     "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
                     "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", 
                     "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", 
                     "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
                     "'\\uFF0D'", "<INVALID>", "<INVALID>", "'NOW'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "AtT", "PoundValue", "NOW", 
                      "AT_TIME", "SNAPSHOT", "BETWEEN", "SCOPE", "STALE", 
                      "DURING", "OVERLAPS", "UNION", "ALL", "OPTIONAL", 
                      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", 
                      "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", 
                      "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", 
                      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
                      "WHERE", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", 
                      "CONTAINS", "IN", "IS", "NULL", "COUNT", "CASE", "ELSE", 
                      "END", "WHEN", "THEN", "ANY", "NONE", "SINGLE", "EXISTS", 
                      "TRUE", "FALSE", "HexInteger", "DecimalInteger", "OctalInteger", 
                      "HexLetter", "HexDigit", "Digit", "NonZeroDigit", 
                      "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", 
                      "RegularDecimalReal", "StringLiteral", "EscapedChar", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Query = 0
    RULE_oC_Match = 1
    RULE_oC_UpdatingClause = 2
    RULE_oC_SetItem = 3
    RULE_s_Stale = 4
    RULE_s_StaleItem = 5
    RULE_oC_Delete = 6
    RULE_s_DeleteItem = 7
    RULE_s_AtTime = 8
    RULE_s_Between = 9
    RULE_s_TimeWindowLimit = 10
    RULE_oC_PatternPart = 11
    RULE_s_PathFunctionPattern = 12
    RULE_s_SinglePathPattern = 13
    RULE_oC_NodePattern = 14
    RULE_s_Properties = 15
    RULE_s_PropertiesPattern = 16
    RULE_s_PropertyNode = 17
    RULE_s_ValueNode = 18
    RULE_oC_RelationshipDetail = 19
    RULE_oC_StringListNullPredicateExpression = 20
    RULE_oC_ListOperatorExpression = 21
    RULE_s_AtTExpression = 22
    RULE_s_TimePredicateExpression = 23
    RULE_s_AtTElement = 24
    RULE_s_TimePointLiteral = 25
    RULE_oC_SymbolicName = 26
    RULE_oC_ReservedWord = 27
    RULE_oC_Cypher = 28
    RULE_oC_Statement = 29
    RULE_oC_RegularQuery = 30
    RULE_oC_Union = 31
    RULE_oC_SingleQuery = 32
    RULE_oC_SinglePartQuery = 33
    RULE_oC_MultiPartQuery = 34
    RULE_oC_ReadingClause = 35
    RULE_oC_Unwind = 36
    RULE_oC_Merge = 37
    RULE_oC_MergeAction = 38
    RULE_oC_Create = 39
    RULE_oC_Set = 40
    RULE_oC_Remove = 41
    RULE_oC_RemoveItem = 42
    RULE_oC_InQueryCall = 43
    RULE_oC_StandaloneCall = 44
    RULE_oC_YieldItems = 45
    RULE_oC_YieldItem = 46
    RULE_oC_With = 47
    RULE_oC_Return = 48
    RULE_oC_ProjectionBody = 49
    RULE_oC_ProjectionItems = 50
    RULE_oC_ProjectionItem = 51
    RULE_oC_Order = 52
    RULE_oC_Skip = 53
    RULE_oC_Limit = 54
    RULE_oC_SortItem = 55
    RULE_oC_Where = 56
    RULE_oC_Pattern = 57
    RULE_oC_AnonymousPatternPart = 58
    RULE_oC_PatternElement = 59
    RULE_oC_RelationshipsPattern = 60
    RULE_oC_PatternElementChain = 61
    RULE_oC_RelationshipPattern = 62
    RULE_oC_Properties = 63
    RULE_oC_RelationshipTypes = 64
    RULE_oC_NodeLabels = 65
    RULE_oC_NodeLabel = 66
    RULE_oC_RangeLiteral = 67
    RULE_oC_LabelName = 68
    RULE_oC_RelTypeName = 69
    RULE_oC_PropertyExpression = 70
    RULE_oC_Expression = 71
    RULE_oC_OrExpression = 72
    RULE_oC_XorExpression = 73
    RULE_oC_AndExpression = 74
    RULE_oC_NotExpression = 75
    RULE_oC_ComparisonExpression = 76
    RULE_oC_PartialComparisonExpression = 77
    RULE_oC_StringPredicateExpression = 78
    RULE_oC_ListPredicateExpression = 79
    RULE_oC_NullPredicateExpression = 80
    RULE_oC_AddOrSubtractExpression = 81
    RULE_oC_MultiplyDivideModuloExpression = 82
    RULE_oC_PowerOfExpression = 83
    RULE_oC_UnaryAddOrSubtractExpression = 84
    RULE_oC_PropertyOrLabelsExpression = 85
    RULE_oC_PropertyLookup = 86
    RULE_oC_Atom = 87
    RULE_oC_CaseExpression = 88
    RULE_oC_CaseAlternative = 89
    RULE_oC_ListComprehension = 90
    RULE_oC_PatternComprehension = 91
    RULE_oC_Quantifier = 92
    RULE_oC_FilterExpression = 93
    RULE_oC_PatternPredicate = 94
    RULE_oC_ParenthesizedExpression = 95
    RULE_oC_IdInColl = 96
    RULE_oC_FunctionInvocation = 97
    RULE_oC_FunctionName = 98
    RULE_oC_ExistentialSubquery = 99
    RULE_oC_ExplicitProcedureInvocation = 100
    RULE_oC_ImplicitProcedureInvocation = 101
    RULE_oC_ProcedureResultField = 102
    RULE_oC_ProcedureName = 103
    RULE_oC_Namespace = 104
    RULE_oC_Variable = 105
    RULE_oC_Literal = 106
    RULE_oC_BooleanLiteral = 107
    RULE_oC_NumberLiteral = 108
    RULE_oC_IntegerLiteral = 109
    RULE_oC_DoubleLiteral = 110
    RULE_oC_ListLiteral = 111
    RULE_oC_MapLiteral = 112
    RULE_oC_PropertyKeyName = 113
    RULE_oC_Parameter = 114
    RULE_oC_SchemaName = 115
    RULE_oC_LeftArrowHead = 116
    RULE_oC_RightArrowHead = 117
    RULE_oC_Dash = 118

    ruleNames =  [ "oC_Query", "oC_Match", "oC_UpdatingClause", "oC_SetItem", 
                   "s_Stale", "s_StaleItem", "oC_Delete", "s_DeleteItem", 
                   "s_AtTime", "s_Between", "s_TimeWindowLimit", "oC_PatternPart", 
                   "s_PathFunctionPattern", "s_SinglePathPattern", "oC_NodePattern", 
                   "s_Properties", "s_PropertiesPattern", "s_PropertyNode", 
                   "s_ValueNode", "oC_RelationshipDetail", "oC_StringListNullPredicateExpression", 
                   "oC_ListOperatorExpression", "s_AtTExpression", "s_TimePredicateExpression", 
                   "s_AtTElement", "s_TimePointLiteral", "oC_SymbolicName", 
                   "oC_ReservedWord", "oC_Cypher", "oC_Statement", "oC_RegularQuery", 
                   "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", 
                   "oC_ReadingClause", "oC_Unwind", "oC_Merge", "oC_MergeAction", 
                   "oC_Create", "oC_Set", "oC_Remove", "oC_RemoveItem", 
                   "oC_InQueryCall", "oC_StandaloneCall", "oC_YieldItems", 
                   "oC_YieldItem", "oC_With", "oC_Return", "oC_ProjectionBody", 
                   "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", 
                   "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", 
                   "oC_AnonymousPatternPart", "oC_PatternElement", "oC_RelationshipsPattern", 
                   "oC_PatternElementChain", "oC_RelationshipPattern", "oC_Properties", 
                   "oC_RelationshipTypes", "oC_NodeLabels", "oC_NodeLabel", 
                   "oC_RangeLiteral", "oC_LabelName", "oC_RelTypeName", 
                   "oC_PropertyExpression", "oC_Expression", "oC_OrExpression", 
                   "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", 
                   "oC_ComparisonExpression", "oC_PartialComparisonExpression", 
                   "oC_StringPredicateExpression", "oC_ListPredicateExpression", 
                   "oC_NullPredicateExpression", "oC_AddOrSubtractExpression", 
                   "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", 
                   "oC_UnaryAddOrSubtractExpression", "oC_PropertyOrLabelsExpression", 
                   "oC_PropertyLookup", "oC_Atom", "oC_CaseExpression", 
                   "oC_CaseAlternative", "oC_ListComprehension", "oC_PatternComprehension", 
                   "oC_Quantifier", "oC_FilterExpression", "oC_PatternPredicate", 
                   "oC_ParenthesizedExpression", "oC_IdInColl", "oC_FunctionInvocation", 
                   "oC_FunctionName", "oC_ExistentialSubquery", "oC_ExplicitProcedureInvocation", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_Variable", "oC_Literal", 
                   "oC_BooleanLiteral", "oC_NumberLiteral", "oC_IntegerLiteral", 
                   "oC_DoubleLiteral", "oC_ListLiteral", "oC_MapLiteral", 
                   "oC_PropertyKeyName", "oC_Parameter", "oC_SchemaName", 
                   "oC_LeftArrowHead", "oC_RightArrowHead", "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    AtT=46
    PoundValue=47
    NOW=48
    AT_TIME=49
    SNAPSHOT=50
    BETWEEN=51
    SCOPE=52
    STALE=53
    DURING=54
    OVERLAPS=55
    UNION=56
    ALL=57
    OPTIONAL=58
    MATCH=59
    UNWIND=60
    AS=61
    MERGE=62
    ON=63
    CREATE=64
    SET=65
    DETACH=66
    DELETE=67
    REMOVE=68
    CALL=69
    YIELD=70
    WITH=71
    RETURN=72
    DISTINCT=73
    ORDER=74
    BY=75
    L_SKIP=76
    LIMIT=77
    ASCENDING=78
    ASC=79
    DESCENDING=80
    DESC=81
    WHERE=82
    OR=83
    XOR=84
    AND=85
    NOT=86
    STARTS=87
    ENDS=88
    CONTAINS=89
    IN=90
    IS=91
    NULL=92
    COUNT=93
    CASE=94
    ELSE=95
    END=96
    WHEN=97
    THEN=98
    ANY=99
    NONE=100
    SINGLE=101
    EXISTS=102
    TRUE=103
    FALSE=104
    HexInteger=105
    DecimalInteger=106
    OctalInteger=107
    HexLetter=108
    HexDigit=109
    Digit=110
    NonZeroDigit=111
    NonZeroOctDigit=112
    OctDigit=113
    ZeroDigit=114
    ExponentDecimalReal=115
    RegularDecimalReal=116
    StringLiteral=117
    EscapedChar=118
    CONSTRAINT=119
    DO=120
    FOR=121
    REQUIRE=122
    UNIQUE=123
    MANDATORY=124
    SCALAR=125
    OF=126
    ADD=127
    DROP=128
    FILTER=129
    EXTRACT=130
    UnescapedSymbolicName=131
    IdentifierStart=132
    IdentifierPart=133
    EscapedSymbolicName=134
    SP=135
    WHITESPACE=136
    Comment=137

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StandaloneCallContext,0)


        def s_TimeWindowLimit(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimeWindowLimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = s_cypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Query)
        try:
            self.state = 241
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 238
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 239
                self.oC_StandaloneCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 240
                self.s_TimeWindowLimit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = s_cypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 243
                self.match(s_cypherParser.OPTIONAL)
                self.state = 244
                self.match(s_cypherParser.SP)


            self.state = 247
            self.match(s_cypherParser.MATCH)
            self.state = 249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 248
                self.match(s_cypherParser.SP)


            self.state = 251
            self.oC_Pattern()
            self.state = 259
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 252
                    self.match(s_cypherParser.SP)


                self.state = 257
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 255
                    self.s_AtTime()
                    pass
                elif token in [51]:
                    self.state = 256
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 265
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 261
                    self.match(s_cypherParser.SP)


                self.state = 264
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Create(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CreateContext,0)


        def oC_Merge(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MergeContext,0)


        def oC_Delete(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DeleteContext,0)


        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RemoveContext,0)


        def s_Stale(self):
            return self.getTypedRuleContext(s_cypherParser.S_StaleContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = s_cypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_UpdatingClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.state = 267
                self.oC_Create()
                pass
            elif token in [62]:
                self.state = 268
                self.oC_Merge()
                pass
            elif token in [66, 67]:
                self.state = 269
                self.oC_Delete()
                pass
            elif token in [65]:
                self.state = 270
                self.oC_Set()
                pass
            elif token in [68]:
                self.state = 271
                self.oC_Remove()
                pass
            elif token in [53]:
                self.state = 272
                self.s_Stale()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 275
                    self.match(s_cypherParser.SP)


                self.state = 278
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_VariableContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,i)


        def s_AtTElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AtTElementContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = s_cypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 392
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 281
                self.oC_Variable()
                self.state = 283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 282
                    self.match(s_cypherParser.SP)


                self.state = 285
                self.s_AtTElement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 287
                self.oC_Variable()
                self.state = 292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 289
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 288
                        self.match(s_cypherParser.SP)


                    self.state = 291
                    self.s_AtTElement()


                self.state = 294
                self.match(s_cypherParser.T__0)
                self.state = 295
                self.oC_Variable()
                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 296
                    self.match(s_cypherParser.SP)


                self.state = 299
                self.s_AtTElement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 301
                self.oC_Variable()
                self.state = 306
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 303
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 302
                        self.match(s_cypherParser.SP)


                    self.state = 305
                    self.s_AtTElement()


                self.state = 308
                self.match(s_cypherParser.T__0)
                self.state = 309
                self.oC_Variable()
                self.state = 314
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 311
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 310
                        self.match(s_cypherParser.SP)


                    self.state = 313
                    self.s_AtTElement()


                self.state = 320
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
                if la_ == 1:
                    self.state = 317
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 316
                        self.match(s_cypherParser.SP)


                    self.state = 319
                    self.match(s_cypherParser.PoundValue)


                self.state = 323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 322
                    self.match(s_cypherParser.SP)


                self.state = 325
                self.s_AtTElement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 327
                self.oC_Variable()
                self.state = 332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 329
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 328
                        self.match(s_cypherParser.SP)


                    self.state = 331
                    self.s_AtTElement()


                self.state = 334
                self.match(s_cypherParser.T__0)
                self.state = 335
                self.oC_Variable()
                self.state = 340
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 337
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 336
                        self.match(s_cypherParser.SP)


                    self.state = 339
                    self.s_AtTElement()


                self.state = 343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 342
                    self.match(s_cypherParser.SP)


                self.state = 345
                self.match(s_cypherParser.T__1)
                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 346
                    self.match(s_cypherParser.SP)


                self.state = 349
                self.oC_Expression()
                self.state = 354
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 351
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 350
                        self.match(s_cypherParser.SP)


                    self.state = 353
                    self.s_AtTElement()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 356
                self.oC_PropertyExpression()
                self.state = 358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 357
                    self.match(s_cypherParser.SP)


                self.state = 360
                self.match(s_cypherParser.T__1)
                self.state = 362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 361
                    self.match(s_cypherParser.SP)


                self.state = 364
                self.oC_Expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 366
                self.oC_Variable()
                self.state = 368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 367
                    self.match(s_cypherParser.SP)


                self.state = 370
                self.match(s_cypherParser.T__1)
                self.state = 372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 371
                    self.match(s_cypherParser.SP)


                self.state = 374
                self.oC_Expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 376
                self.oC_Variable()
                self.state = 378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 377
                    self.match(s_cypherParser.SP)


                self.state = 380
                self.match(s_cypherParser.T__2)
                self.state = 382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 381
                    self.match(s_cypherParser.SP)


                self.state = 384
                self.oC_Expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 386
                self.oC_Variable()
                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 387
                    self.match(s_cypherParser.SP)


                self.state = 390
                self.oC_NodeLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def s_StaleItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StaleItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StaleItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Stale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Stale" ):
                listener.enterS_Stale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Stale" ):
                listener.exitS_Stale(self)




    def s_Stale(self):

        localctx = s_cypherParser.S_StaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_s_Stale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.match(s_cypherParser.STALE)
            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 395
                self.match(s_cypherParser.SP)


            self.state = 398
            self.s_StaleItem()
            self.state = 409
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 400
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 399
                        self.match(s_cypherParser.SP)


                    self.state = 402
                    self.match(s_cypherParser.T__3)
                    self.state = 404
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 403
                        self.match(s_cypherParser.SP)


                    self.state = 406
                    self.s_StaleItem() 
                self.state = 411
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_VariableContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StaleItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StaleItem" ):
                listener.enterS_StaleItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StaleItem" ):
                listener.exitS_StaleItem(self)




    def s_StaleItem(self):

        localctx = s_cypherParser.S_StaleItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_s_StaleItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.oC_Variable()
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 413
                self.match(s_cypherParser.T__0)
                self.state = 414
                self.oC_Variable()
                self.state = 419
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 416
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 415
                        self.match(s_cypherParser.SP)


                    self.state = 418
                    self.match(s_cypherParser.PoundValue)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def s_DeleteItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DeleteItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DeleteItemContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = s_cypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 423
                self.match(s_cypherParser.DETACH)
                self.state = 424
                self.match(s_cypherParser.SP)


            self.state = 427
            self.match(s_cypherParser.DELETE)
            self.state = 429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 428
                self.match(s_cypherParser.SP)


            self.state = 431
            self.s_DeleteItem()
            self.state = 442
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 433
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 432
                        self.match(s_cypherParser.SP)


                    self.state = 435
                    self.match(s_cypherParser.T__3)
                    self.state = 437
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 436
                        self.match(s_cypherParser.SP)


                    self.state = 439
                    self.s_DeleteItem() 
                self.state = 444
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_VariableContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DeleteItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DeleteItem" ):
                listener.enterS_DeleteItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DeleteItem" ):
                listener.exitS_DeleteItem(self)




    def s_DeleteItem(self):

        localctx = s_cypherParser.S_DeleteItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_s_DeleteItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self.oC_Variable()
            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 446
                self.match(s_cypherParser.T__0)
                self.state = 447
                self.oC_Variable()
                self.state = 452
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 449
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 448
                        self.match(s_cypherParser.SP)


                    self.state = 451
                    self.match(s_cypherParser.PoundValue)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTime" ):
                listener.enterS_AtTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTime" ):
                listener.exitS_AtTime(self)




    def s_AtTime(self):

        localctx = s_cypherParser.S_AtTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_s_AtTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.match(s_cypherParser.AT_TIME)
            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 457
                self.match(s_cypherParser.SP)


            self.state = 460
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_BetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Between

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Between" ):
                listener.enterS_Between(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Between" ):
                listener.exitS_Between(self)




    def s_Between(self):

        localctx = s_cypherParser.S_BetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_s_Between)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(s_cypherParser.BETWEEN)
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 463
                self.match(s_cypherParser.SP)


            self.state = 466
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimeWindowLimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimeWindowLimit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimeWindowLimit" ):
                listener.enterS_TimeWindowLimit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimeWindowLimit" ):
                listener.exitS_TimeWindowLimit(self)




    def s_TimeWindowLimit(self):

        localctx = s_cypherParser.S_TimeWindowLimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_s_TimeWindowLimit)
        self._la = 0 # Token type
        try:
            self.state = 478
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 468
                self.match(s_cypherParser.SNAPSHOT)
                self.state = 470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 469
                    self.match(s_cypherParser.SP)


                self.state = 472
                self.oC_Expression()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 473
                self.match(s_cypherParser.SCOPE)
                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 474
                    self.match(s_cypherParser.SP)


                self.state = 477
                self.oC_Expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_PathFunctionPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PathFunctionPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AnonymousPatternPartContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = s_cypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 480
                self.oC_Variable()
                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 481
                    self.match(s_cypherParser.SP)


                self.state = 484
                self.match(s_cypherParser.T__1)
                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 485
                    self.match(s_cypherParser.SP)


                self.state = 488
                self.s_PathFunctionPattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 490
                self.oC_Variable()
                self.state = 492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 491
                    self.match(s_cypherParser.SP)


                self.state = 494
                self.match(s_cypherParser.T__1)
                self.state = 496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 495
                    self.match(s_cypherParser.SP)


                self.state = 498
                self.oC_AnonymousPatternPart()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 500
                self.oC_AnonymousPatternPart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PathFunctionPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def s_SinglePathPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_SinglePathPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PathFunctionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PathFunctionPattern" ):
                listener.enterS_PathFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PathFunctionPattern" ):
                listener.exitS_PathFunctionPattern(self)




    def s_PathFunctionPattern(self):

        localctx = s_cypherParser.S_PathFunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_s_PathFunctionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.oC_FunctionName()
            self.state = 505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 504
                self.match(s_cypherParser.SP)


            self.state = 507
            self.match(s_cypherParser.T__4)
            self.state = 509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 508
                self.match(s_cypherParser.SP)


            self.state = 511
            self.s_SinglePathPattern()
            self.state = 513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 512
                self.match(s_cypherParser.SP)


            self.state = 515
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SinglePathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodePatternContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,i)


        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SinglePathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SinglePathPattern" ):
                listener.enterS_SinglePathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SinglePathPattern" ):
                listener.exitS_SinglePathPattern(self)




    def s_SinglePathPattern(self):

        localctx = s_cypherParser.S_SinglePathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_s_SinglePathPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.oC_NodePattern()
            self.state = 519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 518
                self.match(s_cypherParser.SP)


            self.state = 521
            self.oC_RelationshipPattern()
            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 522
                self.match(s_cypherParser.SP)


            self.state = 525
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def s_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = s_cypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.match(s_cypherParser.T__4)
            self.state = 529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 528
                self.match(s_cypherParser.SP)


            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 531
                self.oC_Variable()
                self.state = 533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 532
                    self.match(s_cypherParser.SP)




            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 537
                self.oC_NodeLabels()
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 538
                    self.match(s_cypherParser.SP)




            self.state = 547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 543
                self.s_AtTElement()
                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 544
                    self.match(s_cypherParser.SP)




            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==26:
                self.state = 549
                self.s_Properties()
                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 550
                    self.match(s_cypherParser.SP)




            self.state = 555
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertiesPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesPatternContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Properties" ):
                listener.enterS_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Properties" ):
                listener.exitS_Properties(self)




    def s_Properties(self):

        localctx = s_cypherParser.S_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_s_Properties)
        try:
            self.state = 559
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 557
                self.s_PropertiesPattern()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 558
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_PropertyNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PropertyNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PropertyNodeContext,i)


        def s_ValueNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ValueNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ValueNodeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertiesPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertiesPattern" ):
                listener.enterS_PropertiesPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertiesPattern" ):
                listener.exitS_PropertiesPattern(self)




    def s_PropertiesPattern(self):

        localctx = s_cypherParser.S_PropertiesPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_s_PropertiesPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.match(s_cypherParser.T__6)
            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 562
                self.match(s_cypherParser.SP)


            self.state = 581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 565
                self.s_PropertyNode()
                self.state = 566
                self.match(s_cypherParser.T__7)
                self.state = 567
                self.s_ValueNode()
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 568
                    self.match(s_cypherParser.T__3)
                    self.state = 570
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 569
                        self.match(s_cypherParser.SP)


                    self.state = 572
                    self.s_PropertyNode()
                    self.state = 573
                    self.match(s_cypherParser.T__7)
                    self.state = 574
                    self.s_ValueNode()
                    self.state = 580
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 583
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyNode" ):
                listener.enterS_PropertyNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyNode" ):
                listener.exitS_PropertyNode(self)




    def s_PropertyNode(self):

        localctx = s_cypherParser.S_PropertyNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_s_PropertyNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.oC_PropertyKeyName()
            self.state = 587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 586
                self.match(s_cypherParser.SP)


            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 589
                self.s_AtTElement()
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 590
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ValueNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ValueNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ValueNode" ):
                listener.enterS_ValueNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ValueNode" ):
                listener.exitS_ValueNode(self)




    def s_ValueNode(self):

        localctx = s_cypherParser.S_ValueNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_s_ValueNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 595
                self.match(s_cypherParser.SP)


            self.state = 598
            self.oC_Expression()
            self.state = 600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 599
                self.match(s_cypherParser.SP)


            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 602
                self.s_AtTElement()
                self.state = 604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 603
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RangeLiteralContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = s_cypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(s_cypherParser.T__9)
            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 609
                self.match(s_cypherParser.SP)


            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 612
                self.oC_Variable()
                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 613
                    self.match(s_cypherParser.SP)




            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 618
                self.oC_RelationshipTypes()
                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 619
                    self.match(s_cypherParser.SP)




            self.state = 625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 624
                self.oC_RangeLiteral()


            self.state = 631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 627
                self.s_AtTElement()
                self.state = 629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 628
                    self.match(s_cypherParser.SP)




            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==26:
                self.state = 633
                self.oC_Properties()
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 634
                    self.match(s_cypherParser.SP)




            self.state = 639
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def s_TimePredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateExpressionContext,0)


        def oC_StringPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringPredicateExpressionContext,0)


        def oC_ListPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListPredicateExpressionContext,0)


        def oC_NullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NullPredicateExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringListNullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullPredicateExpression" ):
                listener.enterOC_StringListNullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullPredicateExpression" ):
                listener.exitOC_StringListNullPredicateExpression(self)




    def oC_StringListNullPredicateExpression(self):

        localctx = s_cypherParser.OC_StringListNullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_oC_StringListNullPredicateExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.oC_AddOrSubtractExpression()
            self.state = 646
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 642
                self.s_TimePredicateExpression()

            elif la_ == 2:
                self.state = 643
                self.oC_StringPredicateExpression()

            elif la_ == 3:
                self.state = 644
                self.oC_ListPredicateExpression()

            elif la_ == 4:
                self.state = 645
                self.oC_NullPredicateExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def s_AtTExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTExpressionContext,0)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = s_cypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_oC_ListOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 648
                self.oC_PropertyOrLabelsExpression()
                pass

            elif la_ == 2:
                self.state = 649
                self.s_AtTExpression()
                pass


            self.state = 673
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 671
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                    if la_ == 1:
                        self.state = 653
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 652
                            self.match(s_cypherParser.SP)


                        self.state = 655
                        self.match(s_cypherParser.T__9)
                        self.state = 656
                        self.oC_Expression()
                        self.state = 657
                        self.match(s_cypherParser.T__10)
                        pass

                    elif la_ == 2:
                        self.state = 660
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 659
                            self.match(s_cypherParser.SP)


                        self.state = 662
                        self.match(s_cypherParser.T__9)
                        self.state = 664
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                            self.state = 663
                            self.oC_Expression()


                        self.state = 666
                        self.match(s_cypherParser.T__11)
                        self.state = 668
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                            self.state = 667
                            self.oC_Expression()


                        self.state = 670
                        self.match(s_cypherParser.T__10)
                        pass

             
                self.state = 675
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTExpression" ):
                listener.enterS_AtTExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTExpression" ):
                listener.exitS_AtTExpression(self)




    def s_AtTExpression(self):

        localctx = s_cypherParser.S_AtTExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_s_AtTExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.oC_Atom()
            self.state = 691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 681 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 678
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 677
                            self.match(s_cypherParser.SP)


                        self.state = 680
                        self.oC_PropertyLookup()

                    else:
                        raise NoViableAltException(self)
                    self.state = 683 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

                self.state = 689
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 686
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 685
                        self.match(s_cypherParser.SP)


                    self.state = 688
                    self.match(s_cypherParser.PoundValue)




            self.state = 694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 693
                self.match(s_cypherParser.SP)


            self.state = 696
            self.match(s_cypherParser.AtT)
            self.state = 703
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 698
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 697
                        self.match(s_cypherParser.SP)


                    self.state = 700
                    self.oC_PropertyLookup() 
                self.state = 705
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateExpression" ):
                listener.enterS_TimePredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateExpression" ):
                listener.exitS_TimePredicateExpression(self)




    def s_TimePredicateExpression(self):

        localctx = s_cypherParser.S_TimePredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_s_TimePredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.match(s_cypherParser.SP)
            self.state = 707
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 708
            self.match(s_cypherParser.SP)
            self.state = 709
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_TimePointLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_TimePointLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_TimePointLiteralContext,i)


        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTElement" ):
                listener.enterS_AtTElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTElement" ):
                listener.exitS_AtTElement(self)




    def s_AtTElement(self):

        localctx = s_cypherParser.S_AtTElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_s_AtTElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.match(s_cypherParser.AtT)
            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 712
                self.match(s_cypherParser.SP)


            self.state = 715
            self.match(s_cypherParser.T__4)
            self.state = 717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 716
                self.match(s_cypherParser.SP)


            self.state = 719
            self.s_TimePointLiteral()
            self.state = 721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 720
                self.match(s_cypherParser.SP)


            self.state = 723
            self.match(s_cypherParser.T__3)
            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 724
                self.match(s_cypherParser.SP)


            self.state = 729
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 117]:
                self.state = 727
                self.s_TimePointLiteral()
                pass
            elif token in [48]:
                self.state = 728
                self.match(s_cypherParser.NOW)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 731
                self.match(s_cypherParser.SP)


            self.state = 734
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePointLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePointLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePointLiteral" ):
                listener.enterS_TimePointLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePointLiteral" ):
                listener.exitS_TimePointLiteral(self)




    def s_TimePointLiteral(self):

        localctx = s_cypherParser.S_TimePointLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_s_TimePointLiteral)
        try:
            self.state = 738
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 736
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 737
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(s_cypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(s_cypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(s_cypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(s_cypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(s_cypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = s_cypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            _la = self._input.LA(1)
            if not(_la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(s_cypherParser.AND, 0)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def OR(self):
            return self.getToken(s_cypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(s_cypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(s_cypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(s_cypherParser.DO, 0)

        def FOR(self):
            return self.getToken(s_cypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(s_cypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(s_cypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(s_cypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(s_cypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(s_cypherParser.OF, 0)

        def ADD(self):
            return self.getToken(s_cypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(s_cypherParser.DROP, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = s_cypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            _la = self._input.LA(1)
            if not(((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 128317405001678847) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(s_cypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = s_cypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 744
                self.match(s_cypherParser.SP)


            self.state = 747
            self.oC_Statement()
            self.state = 752
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 748
                    self.match(s_cypherParser.SP)


                self.state = 751
                self.match(s_cypherParser.T__12)


            self.state = 755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 754
                self.match(s_cypherParser.SP)


            self.state = 757
            self.match(s_cypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = s_cypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = s_cypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.oC_SingleQuery()
            self.state = 768
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 763
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 762
                        self.match(s_cypherParser.SP)


                    self.state = 765
                    self.oC_Union() 
                self.state = 770
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = s_cypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 783
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 771
                self.match(s_cypherParser.UNION)
                self.state = 772
                self.match(s_cypherParser.SP)
                self.state = 773
                self.match(s_cypherParser.ALL)
                self.state = 775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 774
                    self.match(s_cypherParser.SP)


                self.state = 777
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 778
                self.match(s_cypherParser.UNION)
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 779
                    self.match(s_cypherParser.SP)


                self.state = 782
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = s_cypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_oC_SingleQuery)
        try:
            self.state = 787
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 785
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 786
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = s_cypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 789
                    self.oC_ReadingClause()
                    self.state = 791
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 790
                        self.match(s_cypherParser.SP)


                    self.state = 797
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 798
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 799
                    self.oC_ReadingClause()
                    self.state = 801
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 800
                        self.match(s_cypherParser.SP)


                    self.state = 807
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 808
                self.oC_UpdatingClause()
                self.state = 815
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 810
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 809
                            self.match(s_cypherParser.SP)


                        self.state = 812
                        self.oC_UpdatingClause() 
                    self.state = 817
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

                self.state = 822
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                if la_ == 1:
                    self.state = 819
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 818
                        self.match(s_cypherParser.SP)


                    self.state = 821
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def oC_With(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_WithContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_WithContext,i)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = s_cypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_oC_MultiPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 832
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                        self.state = 826
                        self.oC_ReadingClause()
                        self.state = 828
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 827
                            self.match(s_cypherParser.SP)


                        self.state = 834
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 841
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64001) != 0):
                        self.state = 835
                        self.oC_UpdatingClause()
                        self.state = 837
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 836
                            self.match(s_cypherParser.SP)


                        self.state = 843
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 844
                    self.oC_With()
                    self.state = 846
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 845
                        self.match(s_cypherParser.SP)



                else:
                    raise NoViableAltException(self)
                self.state = 850 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

            self.state = 852
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(s_cypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = s_cypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_oC_ReadingClause)
        try:
            self.state = 857
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 854
                self.oC_Match()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 855
                self.oC_Unwind()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 856
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = s_cypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self.match(s_cypherParser.UNWIND)
            self.state = 861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 860
                self.match(s_cypherParser.SP)


            self.state = 863
            self.oC_Expression()
            self.state = 864
            self.match(s_cypherParser.SP)
            self.state = 865
            self.match(s_cypherParser.AS)
            self.state = 866
            self.match(s_cypherParser.SP)
            self.state = 867
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = s_cypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self.match(s_cypherParser.MERGE)
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 870
                self.match(s_cypherParser.SP)


            self.state = 873
            self.oC_PatternPart()
            self.state = 878
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 874
                    self.match(s_cypherParser.SP)
                    self.state = 875
                    self.oC_MergeAction() 
                self.state = 880
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = s_cypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_oC_MergeAction)
        try:
            self.state = 891
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 881
                self.match(s_cypherParser.ON)
                self.state = 882
                self.match(s_cypherParser.SP)
                self.state = 883
                self.match(s_cypherParser.MATCH)
                self.state = 884
                self.match(s_cypherParser.SP)
                self.state = 885
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 886
                self.match(s_cypherParser.ON)
                self.state = 887
                self.match(s_cypherParser.SP)
                self.state = 888
                self.match(s_cypherParser.CREATE)
                self.state = 889
                self.match(s_cypherParser.SP)
                self.state = 890
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = s_cypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self.match(s_cypherParser.CREATE)
            self.state = 895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 894
                self.match(s_cypherParser.SP)


            self.state = 897
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = s_cypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self.match(s_cypherParser.SET)
            self.state = 901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 900
                self.match(s_cypherParser.SP)


            self.state = 903
            self.oC_SetItem()
            self.state = 914
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 905
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 904
                        self.match(s_cypherParser.SP)


                    self.state = 907
                    self.match(s_cypherParser.T__3)
                    self.state = 909
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 908
                        self.match(s_cypherParser.SP)


                    self.state = 911
                    self.oC_SetItem() 
                self.state = 916
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = s_cypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            self.match(s_cypherParser.REMOVE)
            self.state = 918
            self.match(s_cypherParser.SP)
            self.state = 919
            self.oC_RemoveItem()
            self.state = 930
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 921
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 920
                        self.match(s_cypherParser.SP)


                    self.state = 923
                    self.match(s_cypherParser.T__3)
                    self.state = 925
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 924
                        self.match(s_cypherParser.SP)


                    self.state = 927
                    self.oC_RemoveItem() 
                self.state = 932
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = s_cypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_oC_RemoveItem)
        try:
            self.state = 937
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 933
                self.oC_Variable()
                self.state = 934
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 936
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = s_cypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 939
            self.match(s_cypherParser.CALL)
            self.state = 940
            self.match(s_cypherParser.SP)
            self.state = 941
            self.oC_ExplicitProcedureInvocation()
            self.state = 948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 942
                    self.match(s_cypherParser.SP)


                self.state = 945
                self.match(s_cypherParser.YIELD)
                self.state = 946
                self.match(s_cypherParser.SP)
                self.state = 947
                self.oC_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = s_cypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_oC_StandaloneCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self.match(s_cypherParser.CALL)
            self.state = 951
            self.match(s_cypherParser.SP)
            self.state = 954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.state = 952
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 953
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 965
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 956
                    self.match(s_cypherParser.SP)


                self.state = 959
                self.match(s_cypherParser.YIELD)
                self.state = 960
                self.match(s_cypherParser.SP)
                self.state = 963
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14]:
                    self.state = 961
                    self.match(s_cypherParser.T__13)
                    pass
                elif token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                    self.state = 962
                    self.oC_YieldItems()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = s_cypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.oC_YieldItem()
            self.state = 978
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,169,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 969
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 968
                        self.match(s_cypherParser.SP)


                    self.state = 971
                    self.match(s_cypherParser.T__3)
                    self.state = 973
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 972
                        self.match(s_cypherParser.SP)


                    self.state = 975
                    self.oC_YieldItem() 
                self.state = 980
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

            self.state = 985
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 981
                    self.match(s_cypherParser.SP)


                self.state = 984
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = s_cypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 992
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.state = 987
                self.oC_ProcedureResultField()
                self.state = 988
                self.match(s_cypherParser.SP)
                self.state = 989
                self.match(s_cypherParser.AS)
                self.state = 990
                self.match(s_cypherParser.SP)


            self.state = 994
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = s_cypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 996
            self.match(s_cypherParser.WITH)
            self.state = 997
            self.oC_ProjectionBody()
            self.state = 1002
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 999
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 998
                    self.match(s_cypherParser.SP)


                self.state = 1001
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = s_cypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.match(s_cypherParser.RETURN)
            self.state = 1005
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)




    def oC_ProjectionBody(self):

        localctx = s_cypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.state = 1008
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1007
                    self.match(s_cypherParser.SP)


                self.state = 1010
                self.match(s_cypherParser.DISTINCT)


            self.state = 1013
            self.match(s_cypherParser.SP)
            self.state = 1014
            self.oC_ProjectionItems()
            self.state = 1017
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.state = 1015
                self.match(s_cypherParser.SP)
                self.state = 1016
                self.oC_Order()


            self.state = 1021
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 1019
                self.match(s_cypherParser.SP)
                self.state = 1020
                self.oC_Skip()


            self.state = 1025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1023
                self.match(s_cypherParser.SP)
                self.state = 1024
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)




    def oC_ProjectionItems(self):

        localctx = s_cypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 1055
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1027
                self.match(s_cypherParser.T__13)
                self.state = 1038
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,182,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1029
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1028
                            self.match(s_cypherParser.SP)


                        self.state = 1031
                        self.match(s_cypherParser.T__3)
                        self.state = 1033
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1032
                            self.match(s_cypherParser.SP)


                        self.state = 1035
                        self.oC_ProjectionItem() 
                    self.state = 1040
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

                pass
            elif token in [5, 7, 10, 21, 22, 26, 48, 57, 86, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1041
                self.oC_ProjectionItem()
                self.state = 1052
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,185,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1043
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1042
                            self.match(s_cypherParser.SP)


                        self.state = 1045
                        self.match(s_cypherParser.T__3)
                        self.state = 1047
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1046
                            self.match(s_cypherParser.SP)


                        self.state = 1049
                        self.oC_ProjectionItem() 
                    self.state = 1054
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,185,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)




    def oC_ProjectionItem(self):

        localctx = s_cypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_oC_ProjectionItem)
        try:
            self.state = 1064
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1057
                self.oC_Expression()
                self.state = 1058
                self.match(s_cypherParser.SP)
                self.state = 1059
                self.match(s_cypherParser.AS)
                self.state = 1060
                self.match(s_cypherParser.SP)
                self.state = 1061
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1063
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = s_cypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066
            self.match(s_cypherParser.ORDER)
            self.state = 1067
            self.match(s_cypherParser.SP)
            self.state = 1068
            self.match(s_cypherParser.BY)
            self.state = 1069
            self.match(s_cypherParser.SP)
            self.state = 1070
            self.oC_SortItem()
            self.state = 1078
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1071
                self.match(s_cypherParser.T__3)
                self.state = 1073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1072
                    self.match(s_cypherParser.SP)


                self.state = 1075
                self.oC_SortItem()
                self.state = 1080
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = s_cypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1081
            self.match(s_cypherParser.L_SKIP)
            self.state = 1082
            self.match(s_cypherParser.SP)
            self.state = 1083
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = s_cypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            self.match(s_cypherParser.LIMIT)
            self.state = 1086
            self.match(s_cypherParser.SP)
            self.state = 1087
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = s_cypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089
            self.oC_Expression()
            self.state = 1094
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1090
                    self.match(s_cypherParser.SP)


                self.state = 1093
                _la = self._input.LA(1)
                if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = s_cypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096
            self.match(s_cypherParser.WHERE)
            self.state = 1097
            self.match(s_cypherParser.SP)
            self.state = 1098
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = s_cypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self.oC_PatternPart()
            self.state = 1111
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,194,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1102
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1101
                        self.match(s_cypherParser.SP)


                    self.state = 1104
                    self.match(s_cypherParser.T__3)
                    self.state = 1106
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1105
                        self.match(s_cypherParser.SP)


                    self.state = 1108
                    self.oC_PatternPart() 
                self.state = 1113
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = s_cypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1114
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = s_cypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 1130
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1116
                self.oC_NodePattern()
                self.state = 1123
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,196,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1118
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1117
                            self.match(s_cypherParser.SP)


                        self.state = 1120
                        self.oC_PatternElementChain() 
                    self.state = 1125
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,196,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1126
                self.match(s_cypherParser.T__4)
                self.state = 1127
                self.oC_PatternElement()
                self.state = 1128
                self.match(s_cypherParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = s_cypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            self.oC_NodePattern()
            self.state = 1137 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1134
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1133
                        self.match(s_cypherParser.SP)


                    self.state = 1136
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 1139 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,199,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = s_cypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self.oC_RelationshipPattern()
            self.state = 1143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1142
                self.match(s_cypherParser.SP)


            self.state = 1145
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = s_cypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 1211
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1147
                self.oC_LeftArrowHead()
                self.state = 1149
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1148
                    self.match(s_cypherParser.SP)


                self.state = 1151
                self.oC_Dash()
                self.state = 1153
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                if la_ == 1:
                    self.state = 1152
                    self.match(s_cypherParser.SP)


                self.state = 1156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1155
                    self.oC_RelationshipDetail()


                self.state = 1159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1158
                    self.match(s_cypherParser.SP)


                self.state = 1161
                self.oC_Dash()
                self.state = 1163
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1162
                    self.match(s_cypherParser.SP)


                self.state = 1165
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1167
                self.oC_LeftArrowHead()
                self.state = 1169
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1168
                    self.match(s_cypherParser.SP)


                self.state = 1171
                self.oC_Dash()
                self.state = 1173
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
                if la_ == 1:
                    self.state = 1172
                    self.match(s_cypherParser.SP)


                self.state = 1176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1175
                    self.oC_RelationshipDetail()


                self.state = 1179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1178
                    self.match(s_cypherParser.SP)


                self.state = 1181
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1183
                self.oC_Dash()
                self.state = 1185
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                if la_ == 1:
                    self.state = 1184
                    self.match(s_cypherParser.SP)


                self.state = 1188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1187
                    self.oC_RelationshipDetail()


                self.state = 1191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1190
                    self.match(s_cypherParser.SP)


                self.state = 1193
                self.oC_Dash()
                self.state = 1195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1194
                    self.match(s_cypherParser.SP)


                self.state = 1197
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1199
                self.oC_Dash()
                self.state = 1201
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
                if la_ == 1:
                    self.state = 1200
                    self.match(s_cypherParser.SP)


                self.state = 1204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1203
                    self.oC_RelationshipDetail()


                self.state = 1207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1206
                    self.match(s_cypherParser.SP)


                self.state = 1209
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = s_cypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_oC_Properties)
        try:
            self.state = 1215
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1213
                self.oC_MapLiteral()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1214
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = s_cypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1217
            self.match(s_cypherParser.T__7)
            self.state = 1219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1218
                self.match(s_cypherParser.SP)


            self.state = 1221
            self.oC_RelTypeName()
            self.state = 1235
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,223,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1223
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1222
                        self.match(s_cypherParser.SP)


                    self.state = 1225
                    self.match(s_cypherParser.T__14)
                    self.state = 1227
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==8:
                        self.state = 1226
                        self.match(s_cypherParser.T__7)


                    self.state = 1230
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1229
                        self.match(s_cypherParser.SP)


                    self.state = 1232
                    self.oC_RelTypeName() 
                self.state = 1237
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,223,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = s_cypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1238
            self.oC_NodeLabel()
            self.state = 1245
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,225,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1240
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1239
                        self.match(s_cypherParser.SP)


                    self.state = 1242
                    self.oC_NodeLabel() 
                self.state = 1247
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,225,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = s_cypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1248
            self.match(s_cypherParser.T__7)
            self.state = 1250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1249
                self.match(s_cypherParser.SP)


            self.state = 1252
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = s_cypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1254
            self.match(s_cypherParser.T__13)
            self.state = 1256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1255
                self.match(s_cypherParser.SP)


            self.state = 1262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                self.state = 1258
                self.oC_IntegerLiteral()
                self.state = 1260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1259
                    self.match(s_cypherParser.SP)




            self.state = 1274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 1264
                self.match(s_cypherParser.T__11)
                self.state = 1266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1265
                    self.match(s_cypherParser.SP)


                self.state = 1272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                    self.state = 1268
                    self.oC_IntegerLiteral()
                    self.state = 1270
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1269
                        self.match(s_cypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = s_cypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1276
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = s_cypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = s_cypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1280
            self.oC_Atom()
            self.state = 1285 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1282
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1281
                        self.match(s_cypherParser.SP)


                    self.state = 1284
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 1287 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,235,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = s_cypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = s_cypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            self.oC_XorExpression()
            self.state = 1298
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,236,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1292
                    self.match(s_cypherParser.SP)
                    self.state = 1293
                    self.match(s_cypherParser.OR)
                    self.state = 1294
                    self.match(s_cypherParser.SP)
                    self.state = 1295
                    self.oC_XorExpression() 
                self.state = 1300
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,236,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = s_cypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1301
            self.oC_AndExpression()
            self.state = 1308
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,237,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1302
                    self.match(s_cypherParser.SP)
                    self.state = 1303
                    self.match(s_cypherParser.XOR)
                    self.state = 1304
                    self.match(s_cypherParser.SP)
                    self.state = 1305
                    self.oC_AndExpression() 
                self.state = 1310
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,237,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = s_cypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1311
            self.oC_NotExpression()
            self.state = 1318
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,238,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1312
                    self.match(s_cypherParser.SP)
                    self.state = 1313
                    self.match(s_cypherParser.AND)
                    self.state = 1314
                    self.match(s_cypherParser.SP)
                    self.state = 1315
                    self.oC_NotExpression() 
                self.state = 1320
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,238,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = s_cypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1321
                self.match(s_cypherParser.NOT)
                self.state = 1323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1322
                    self.match(s_cypherParser.SP)


                self.state = 1329
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1330
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def oC_PartialComparisonExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PartialComparisonExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PartialComparisonExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = s_cypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1332
            self.oC_StringListNullPredicateExpression()
            self.state = 1339
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,242,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1334
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1333
                        self.match(s_cypherParser.SP)


                    self.state = 1336
                    self.oC_PartialComparisonExpression() 
                self.state = 1341
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,242,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PartialComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PartialComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PartialComparisonExpression" ):
                listener.enterOC_PartialComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PartialComparisonExpression" ):
                listener.exitOC_PartialComparisonExpression(self)




    def oC_PartialComparisonExpression(self):

        localctx = s_cypherParser.OC_PartialComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_PartialComparisonExpression)
        self._la = 0 # Token type
        try:
            self.state = 1372
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1342
                self.match(s_cypherParser.T__1)
                self.state = 1344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1343
                    self.match(s_cypherParser.SP)


                self.state = 1346
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1347
                self.match(s_cypherParser.T__15)
                self.state = 1349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1348
                    self.match(s_cypherParser.SP)


                self.state = 1351
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1352
                self.match(s_cypherParser.T__16)
                self.state = 1354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1353
                    self.match(s_cypherParser.SP)


                self.state = 1356
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1357
                self.match(s_cypherParser.T__17)
                self.state = 1359
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1358
                    self.match(s_cypherParser.SP)


                self.state = 1361
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1362
                self.match(s_cypherParser.T__18)
                self.state = 1364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1363
                    self.match(s_cypherParser.SP)


                self.state = 1366
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1367
                self.match(s_cypherParser.T__19)
                self.state = 1369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1368
                    self.match(s_cypherParser.SP)


                self.state = 1371
                self.oC_StringListNullPredicateExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringPredicateExpression" ):
                listener.enterOC_StringPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringPredicateExpression" ):
                listener.exitOC_StringPredicateExpression(self)




    def oC_StringPredicateExpression(self):

        localctx = s_cypherParser.OC_StringPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_StringPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.state = 1374
                self.match(s_cypherParser.SP)
                self.state = 1375
                self.match(s_cypherParser.STARTS)
                self.state = 1376
                self.match(s_cypherParser.SP)
                self.state = 1377
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1378
                self.match(s_cypherParser.SP)
                self.state = 1379
                self.match(s_cypherParser.ENDS)
                self.state = 1380
                self.match(s_cypherParser.SP)
                self.state = 1381
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1382
                self.match(s_cypherParser.SP)
                self.state = 1383
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 1387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1386
                self.match(s_cypherParser.SP)


            self.state = 1389
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListPredicateExpression" ):
                listener.enterOC_ListPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListPredicateExpression" ):
                listener.exitOC_ListPredicateExpression(self)




    def oC_ListPredicateExpression(self):

        localctx = s_cypherParser.OC_ListPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_ListPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1391
            self.match(s_cypherParser.SP)
            self.state = 1392
            self.match(s_cypherParser.IN)
            self.state = 1394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1393
                self.match(s_cypherParser.SP)


            self.state = 1396
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullPredicateExpression" ):
                listener.enterOC_NullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullPredicateExpression" ):
                listener.exitOC_NullPredicateExpression(self)




    def oC_NullPredicateExpression(self):

        localctx = s_cypherParser.OC_NullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_NullPredicateExpression)
        try:
            self.state = 1408
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1398
                self.match(s_cypherParser.SP)
                self.state = 1399
                self.match(s_cypherParser.IS)
                self.state = 1400
                self.match(s_cypherParser.SP)
                self.state = 1401
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1402
                self.match(s_cypherParser.SP)
                self.state = 1403
                self.match(s_cypherParser.IS)
                self.state = 1404
                self.match(s_cypherParser.SP)
                self.state = 1405
                self.match(s_cypherParser.NOT)
                self.state = 1406
                self.match(s_cypherParser.SP)
                self.state = 1407
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self.oC_MultiplyDivideModuloExpression()
            self.state = 1429
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,259,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1427
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
                    if la_ == 1:
                        self.state = 1412
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1411
                            self.match(s_cypherParser.SP)


                        self.state = 1414
                        self.match(s_cypherParser.T__20)
                        self.state = 1416
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1415
                            self.match(s_cypherParser.SP)


                        self.state = 1418
                        self.oC_MultiplyDivideModuloExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1420
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1419
                            self.match(s_cypherParser.SP)


                        self.state = 1422
                        self.match(s_cypherParser.T__21)
                        self.state = 1424
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1423
                            self.match(s_cypherParser.SP)


                        self.state = 1426
                        self.oC_MultiplyDivideModuloExpression()
                        pass

             
                self.state = 1431
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,259,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PowerOfExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = s_cypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1432
            self.oC_PowerOfExpression()
            self.state = 1459
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,267,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1457
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
                    if la_ == 1:
                        self.state = 1434
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1433
                            self.match(s_cypherParser.SP)


                        self.state = 1436
                        self.match(s_cypherParser.T__13)
                        self.state = 1438
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1437
                            self.match(s_cypherParser.SP)


                        self.state = 1440
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1442
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1441
                            self.match(s_cypherParser.SP)


                        self.state = 1444
                        self.match(s_cypherParser.T__22)
                        self.state = 1446
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1445
                            self.match(s_cypherParser.SP)


                        self.state = 1448
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1450
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1449
                            self.match(s_cypherParser.SP)


                        self.state = 1452
                        self.match(s_cypherParser.T__23)
                        self.state = 1454
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1453
                            self.match(s_cypherParser.SP)


                        self.state = 1456
                        self.oC_PowerOfExpression()
                        pass

             
                self.state = 1461
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,267,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = s_cypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1462
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 1473
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,270,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1464
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1463
                        self.match(s_cypherParser.SP)


                    self.state = 1466
                    self.match(s_cypherParser.T__24)
                    self.state = 1468
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1467
                        self.match(s_cypherParser.SP)


                    self.state = 1470
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 1475
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,270,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ListOperatorExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListOperatorExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.state = 1482
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 7, 10, 26, 48, 57, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1476
                self.oC_ListOperatorExpression()
                pass
            elif token in [21, 22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1477
                _la = self._input.LA(1)
                if not(_la==21 or _la==22):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1478
                    self.match(s_cypherParser.SP)


                self.state = 1481
                self.oC_ListOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyOrLabelsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyOrLabelsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyOrLabelsExpression" ):
                listener.enterOC_PropertyOrLabelsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyOrLabelsExpression" ):
                listener.exitOC_PropertyOrLabelsExpression(self)




    def oC_PropertyOrLabelsExpression(self):

        localctx = s_cypherParser.OC_PropertyOrLabelsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_PropertyOrLabelsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1484
            self.oC_Atom()
            self.state = 1491
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,274,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1486
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1485
                        self.match(s_cypherParser.SP)


                    self.state = 1488
                    self.oC_PropertyLookup() 
                self.state = 1493
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,274,self._ctx)

            self.state = 1498
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.state = 1495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1494
                    self.match(s_cypherParser.SP)


                self.state = 1497
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = s_cypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1500
            self.match(s_cypherParser.T__0)
            self.state = 1502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1501
                self.match(s_cypherParser.SP)


            self.state = 1504
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternComprehensionContext,0)


        def oC_Quantifier(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QuantifierContext,0)


        def oC_PatternPredicate(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPredicateContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionInvocationContext,0)


        def oC_ExistentialSubquery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExistentialSubqueryContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = s_cypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 1530
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1506
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1507
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1508
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1509
                self.match(s_cypherParser.COUNT)
                self.state = 1511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1510
                    self.match(s_cypherParser.SP)


                self.state = 1513
                self.match(s_cypherParser.T__4)
                self.state = 1515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1514
                    self.match(s_cypherParser.SP)


                self.state = 1517
                self.match(s_cypherParser.T__13)
                self.state = 1519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1518
                    self.match(s_cypherParser.SP)


                self.state = 1521
                self.match(s_cypherParser.T__5)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1522
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1523
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1524
                self.oC_Quantifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1525
                self.oC_PatternPredicate()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1526
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1527
                self.oC_FunctionInvocation()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1528
                self.oC_ExistentialSubquery()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1529
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def oC_CaseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_CaseAlternativeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = s_cypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.state = 1532
                self.match(s_cypherParser.CASE)
                self.state = 1537 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1534
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1533
                            self.match(s_cypherParser.SP)


                        self.state = 1536
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1539 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,283,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1541
                self.match(s_cypherParser.CASE)
                self.state = 1543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1542
                    self.match(s_cypherParser.SP)


                self.state = 1545
                self.oC_Expression()
                self.state = 1550 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1547
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1546
                            self.match(s_cypherParser.SP)


                        self.state = 1549
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1552 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,286,self._ctx)

                pass


            self.state = 1564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
            if la_ == 1:
                self.state = 1557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1556
                    self.match(s_cypherParser.SP)


                self.state = 1559
                self.match(s_cypherParser.ELSE)
                self.state = 1561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1560
                    self.match(s_cypherParser.SP)


                self.state = 1563
                self.oC_Expression()


            self.state = 1567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1566
                self.match(s_cypherParser.SP)


            self.state = 1569
            self.match(s_cypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternative" ):
                listener.enterOC_CaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternative" ):
                listener.exitOC_CaseAlternative(self)




    def oC_CaseAlternative(self):

        localctx = s_cypherParser.OC_CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_CaseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1571
            self.match(s_cypherParser.WHEN)
            self.state = 1573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1572
                self.match(s_cypherParser.SP)


            self.state = 1575
            self.oC_Expression()
            self.state = 1577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1576
                self.match(s_cypherParser.SP)


            self.state = 1579
            self.match(s_cypherParser.THEN)
            self.state = 1581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1580
                self.match(s_cypherParser.SP)


            self.state = 1583
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = s_cypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1585
            self.match(s_cypherParser.T__9)
            self.state = 1587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1586
                self.match(s_cypherParser.SP)


            self.state = 1589
            self.oC_FilterExpression()
            self.state = 1598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
            if la_ == 1:
                self.state = 1591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1590
                    self.match(s_cypherParser.SP)


                self.state = 1593
                self.match(s_cypherParser.T__14)
                self.state = 1595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1594
                    self.match(s_cypherParser.SP)


                self.state = 1597
                self.oC_Expression()


            self.state = 1601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1600
                self.match(s_cypherParser.SP)


            self.state = 1603
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = s_cypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1605
            self.match(s_cypherParser.T__9)
            self.state = 1607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1606
                self.match(s_cypherParser.SP)


            self.state = 1617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 1609
                self.oC_Variable()
                self.state = 1611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1610
                    self.match(s_cypherParser.SP)


                self.state = 1613
                self.match(s_cypherParser.T__1)
                self.state = 1615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1614
                    self.match(s_cypherParser.SP)




            self.state = 1619
            self.oC_RelationshipsPattern()
            self.state = 1621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1620
                self.match(s_cypherParser.SP)


            self.state = 1627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 1623
                self.oC_Where()
                self.state = 1625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1624
                    self.match(s_cypherParser.SP)




            self.state = 1629
            self.match(s_cypherParser.T__14)
            self.state = 1631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1630
                self.match(s_cypherParser.SP)


            self.state = 1633
            self.oC_Expression()
            self.state = 1635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1634
                self.match(s_cypherParser.SP)


            self.state = 1637
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Quantifier" ):
                listener.enterOC_Quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Quantifier" ):
                listener.exitOC_Quantifier(self)




    def oC_Quantifier(self):

        localctx = s_cypherParser.OC_QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_Quantifier)
        self._la = 0 # Token type
        try:
            self.state = 1695
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1639
                self.match(s_cypherParser.ALL)
                self.state = 1641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1640
                    self.match(s_cypherParser.SP)


                self.state = 1643
                self.match(s_cypherParser.T__4)
                self.state = 1645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1644
                    self.match(s_cypherParser.SP)


                self.state = 1647
                self.oC_FilterExpression()
                self.state = 1649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1648
                    self.match(s_cypherParser.SP)


                self.state = 1651
                self.match(s_cypherParser.T__5)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1653
                self.match(s_cypherParser.ANY)
                self.state = 1655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1654
                    self.match(s_cypherParser.SP)


                self.state = 1657
                self.match(s_cypherParser.T__4)
                self.state = 1659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1658
                    self.match(s_cypherParser.SP)


                self.state = 1661
                self.oC_FilterExpression()
                self.state = 1663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1662
                    self.match(s_cypherParser.SP)


                self.state = 1665
                self.match(s_cypherParser.T__5)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1667
                self.match(s_cypherParser.NONE)
                self.state = 1669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1668
                    self.match(s_cypherParser.SP)


                self.state = 1671
                self.match(s_cypherParser.T__4)
                self.state = 1673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1672
                    self.match(s_cypherParser.SP)


                self.state = 1675
                self.oC_FilterExpression()
                self.state = 1677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1676
                    self.match(s_cypherParser.SP)


                self.state = 1679
                self.match(s_cypherParser.T__5)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1681
                self.match(s_cypherParser.SINGLE)
                self.state = 1683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1682
                    self.match(s_cypherParser.SP)


                self.state = 1685
                self.match(s_cypherParser.T__4)
                self.state = 1687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1686
                    self.match(s_cypherParser.SP)


                self.state = 1689
                self.oC_FilterExpression()
                self.state = 1691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1690
                    self.match(s_cypherParser.SP)


                self.state = 1693
                self.match(s_cypherParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IdInCollContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = s_cypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1697
            self.oC_IdInColl()
            self.state = 1702
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
            if la_ == 1:
                self.state = 1699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1698
                    self.match(s_cypherParser.SP)


                self.state = 1701
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPredicate" ):
                listener.enterOC_PatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPredicate" ):
                listener.exitOC_PatternPredicate(self)




    def oC_PatternPredicate(self):

        localctx = s_cypherParser.OC_PatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_PatternPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1704
            self.oC_RelationshipsPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = s_cypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1706
            self.match(s_cypherParser.T__4)
            self.state = 1708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1707
                self.match(s_cypherParser.SP)


            self.state = 1710
            self.oC_Expression()
            self.state = 1712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1711
                self.match(s_cypherParser.SP)


            self.state = 1714
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = s_cypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1716
            self.oC_Variable()
            self.state = 1717
            self.match(s_cypherParser.SP)
            self.state = 1718
            self.match(s_cypherParser.IN)
            self.state = 1719
            self.match(s_cypherParser.SP)
            self.state = 1720
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = s_cypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1722
            self.oC_FunctionName()
            self.state = 1724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1723
                self.match(s_cypherParser.SP)


            self.state = 1726
            self.match(s_cypherParser.T__4)
            self.state = 1728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1727
                self.match(s_cypherParser.SP)


            self.state = 1734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 1730
                self.match(s_cypherParser.DISTINCT)
                self.state = 1732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1731
                    self.match(s_cypherParser.SP)




            self.state = 1753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1736
                self.oC_Expression()
                self.state = 1738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1737
                    self.match(s_cypherParser.SP)


                self.state = 1750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1740
                    self.match(s_cypherParser.T__3)
                    self.state = 1742
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1741
                        self.match(s_cypherParser.SP)


                    self.state = 1744
                    self.oC_Expression()
                    self.state = 1746
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1745
                        self.match(s_cypherParser.SP)


                    self.state = 1752
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1755
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = s_cypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_FunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1757
            self.oC_Namespace()
            self.state = 1758
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExistentialSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExistentialSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExistentialSubquery" ):
                listener.enterOC_ExistentialSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExistentialSubquery" ):
                listener.exitOC_ExistentialSubquery(self)




    def oC_ExistentialSubquery(self):

        localctx = s_cypherParser.OC_ExistentialSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_ExistentialSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1760
            self.match(s_cypherParser.EXISTS)
            self.state = 1762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1761
                self.match(s_cypherParser.SP)


            self.state = 1764
            self.match(s_cypherParser.T__6)
            self.state = 1766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1765
                self.match(s_cypherParser.SP)


            self.state = 1776
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 71, 72]:
                self.state = 1768
                self.oC_RegularQuery()
                pass
            elif token in [5, 48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 1769
                self.oC_Pattern()
                self.state = 1774
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,338,self._ctx)
                if la_ == 1:
                    self.state = 1771
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1770
                        self.match(s_cypherParser.SP)


                    self.state = 1773
                    self.oC_Where()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1778
                self.match(s_cypherParser.SP)


            self.state = 1781
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1783
            self.oC_ProcedureName()
            self.state = 1785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1784
                self.match(s_cypherParser.SP)


            self.state = 1787
            self.match(s_cypherParser.T__4)
            self.state = 1789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1788
                self.match(s_cypherParser.SP)


            self.state = 1808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1791
                self.oC_Expression()
                self.state = 1793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1792
                    self.match(s_cypherParser.SP)


                self.state = 1805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1795
                    self.match(s_cypherParser.T__3)
                    self.state = 1797
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1796
                        self.match(s_cypherParser.SP)


                    self.state = 1799
                    self.oC_Expression()
                    self.state = 1801
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1800
                        self.match(s_cypherParser.SP)


                    self.state = 1807
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1810
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1812
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = s_cypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1814
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = s_cypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1816
            self.oC_Namespace()
            self.state = 1817
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = s_cypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1824
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,348,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1819
                    self.oC_SymbolicName()
                    self.state = 1820
                    self.match(s_cypherParser.T__0) 
                self.state = 1826
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,348,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = s_cypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1827
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_ListLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListLiteralContext,0)


        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = s_cypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_oC_Literal)
        try:
            self.state = 1835
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1829
                self.oC_BooleanLiteral()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1830
                self.match(s_cypherParser.NULL)
                pass
            elif token in [105, 106, 107, 115, 116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1831
                self.oC_NumberLiteral()
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1832
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1833
                self.oC_ListLiteral()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1834
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = s_cypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1837
            _la = self._input.LA(1)
            if not(_la==103 or _la==104):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = s_cypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_oC_NumberLiteral)
        try:
            self.state = 1841
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115, 116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1839
                self.oC_DoubleLiteral()
                pass
            elif token in [105, 106, 107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1840
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(s_cypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(s_cypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = s_cypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1843
            _la = self._input.LA(1)
            if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(s_cypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(s_cypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = s_cypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1845
            _la = self._input.LA(1)
            if not(_la==115 or _la==116):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = s_cypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1847
            self.match(s_cypherParser.T__9)
            self.state = 1849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1848
                self.match(s_cypherParser.SP)


            self.state = 1868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1851
                self.oC_Expression()
                self.state = 1853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1852
                    self.match(s_cypherParser.SP)


                self.state = 1865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1855
                    self.match(s_cypherParser.T__3)
                    self.state = 1857
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1856
                        self.match(s_cypherParser.SP)


                    self.state = 1859
                    self.oC_Expression()
                    self.state = 1861
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1860
                        self.match(s_cypherParser.SP)


                    self.state = 1867
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1870
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyKeyName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyKeyNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,i)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = s_cypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1872
            self.match(s_cypherParser.T__6)
            self.state = 1874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1873
                self.match(s_cypherParser.SP)


            self.state = 1909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 1876
                self.oC_PropertyKeyName()
                self.state = 1878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1877
                    self.match(s_cypherParser.SP)


                self.state = 1880
                self.match(s_cypherParser.T__7)
                self.state = 1882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1881
                    self.match(s_cypherParser.SP)


                self.state = 1884
                self.oC_Expression()
                self.state = 1886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1885
                    self.match(s_cypherParser.SP)


                self.state = 1906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1888
                    self.match(s_cypherParser.T__3)
                    self.state = 1890
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1889
                        self.match(s_cypherParser.SP)


                    self.state = 1892
                    self.oC_PropertyKeyName()
                    self.state = 1894
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1893
                        self.match(s_cypherParser.SP)


                    self.state = 1896
                    self.match(s_cypherParser.T__7)
                    self.state = 1898
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1897
                        self.match(s_cypherParser.SP)


                    self.state = 1900
                    self.oC_Expression()
                    self.state = 1902
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1901
                        self.match(s_cypherParser.SP)


                    self.state = 1908
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1911
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = s_cypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1913
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = s_cypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1915
            self.match(s_cypherParser.T__25)
            self.state = 1918
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 1916
                self.oC_SymbolicName()
                pass
            elif token in [106]:
                self.state = 1917
                self.match(s_cypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = s_cypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_oC_SchemaName)
        try:
            self.state = 1922
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1920
                self.oC_SymbolicName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1921
                self.oC_ReservedWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = s_cypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1924
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2013396992) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = s_cypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1926
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32212516864) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = s_cypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1928
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70334388633600) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





