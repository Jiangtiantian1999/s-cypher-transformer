# Generated from .\s_cypher.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,137,1988,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,1,0,1,0,1,0,3,0,270,8,0,1,1,1,1,3,1,274,8,1,1,
        1,1,1,3,1,278,8,1,1,1,1,1,3,1,282,8,1,1,1,1,1,3,1,286,8,1,3,1,288,
        8,1,1,1,3,1,291,8,1,1,1,3,1,294,8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,
        302,8,2,1,2,3,2,305,8,2,1,2,3,2,308,8,2,1,3,1,3,3,3,312,8,3,1,3,
        1,3,1,3,1,3,3,3,318,8,3,1,3,3,3,321,8,3,1,3,1,3,1,3,1,3,1,3,3,3,
        328,8,3,1,3,3,3,331,8,3,1,3,1,3,1,3,3,3,336,8,3,1,3,1,3,1,3,1,3,
        3,3,342,8,3,1,3,3,3,345,8,3,1,3,1,3,1,3,3,3,350,8,3,1,3,1,3,3,3,
        354,8,3,1,3,1,3,1,3,1,3,3,3,360,8,3,1,3,1,3,3,3,364,8,3,1,3,1,3,
        1,3,1,3,3,3,370,8,3,1,3,1,3,3,3,374,8,3,1,3,1,3,1,3,1,3,3,3,380,
        8,3,1,3,1,3,3,3,384,8,3,1,3,1,3,1,3,1,3,3,3,390,8,3,1,3,1,3,3,3,
        394,8,3,1,4,1,4,3,4,398,8,4,1,4,1,4,1,5,1,5,3,5,404,8,5,1,5,3,5,
        407,8,5,1,6,1,6,3,6,411,8,6,1,6,1,6,1,7,1,7,3,7,417,8,7,1,7,3,7,
        420,8,7,1,8,1,8,3,8,424,8,8,1,8,1,8,3,8,428,8,8,1,8,1,8,3,8,432,
        8,8,1,8,5,8,435,8,8,10,8,12,8,438,9,8,1,9,1,9,1,9,1,9,3,9,444,8,
        9,1,9,1,9,1,9,3,9,449,8,9,1,10,1,10,3,10,453,8,10,1,10,1,10,3,10,
        457,8,10,1,10,1,10,3,10,461,8,10,1,10,1,10,3,10,465,8,10,1,10,5,
        10,468,8,10,10,10,12,10,471,9,10,1,11,1,11,1,11,1,11,3,11,477,8,
        11,1,11,1,11,1,11,3,11,482,8,11,1,12,1,12,3,12,486,8,12,1,12,1,12,
        1,13,1,13,3,13,492,8,13,1,13,1,13,1,14,1,14,3,14,498,8,14,1,15,1,
        15,3,15,502,8,15,1,15,1,15,1,16,1,16,3,16,508,8,16,1,16,1,16,1,17,
        1,17,3,17,514,8,17,1,17,1,17,3,17,518,8,17,1,17,1,17,1,17,1,17,3,
        17,524,8,17,1,17,1,17,3,17,528,8,17,1,17,1,17,1,17,3,17,533,8,17,
        1,18,1,18,3,18,537,8,18,1,18,1,18,3,18,541,8,18,1,18,1,18,3,18,545,
        8,18,1,18,1,18,1,19,1,19,3,19,551,8,19,1,19,1,19,3,19,555,8,19,1,
        19,1,19,1,20,1,20,3,20,561,8,20,1,20,1,20,3,20,565,8,20,3,20,567,
        8,20,1,20,1,20,3,20,571,8,20,3,20,573,8,20,1,20,1,20,3,20,577,8,
        20,3,20,579,8,20,1,20,1,20,3,20,583,8,20,3,20,585,8,20,1,20,1,20,
        1,21,1,21,3,21,591,8,21,1,22,1,22,3,22,595,8,22,1,22,1,22,1,22,1,
        22,1,22,3,22,602,8,22,1,22,1,22,1,22,1,22,5,22,608,8,22,10,22,12,
        22,611,9,22,3,22,613,8,22,1,22,1,22,1,23,1,23,3,23,619,8,23,1,23,
        1,23,3,23,623,8,23,3,23,625,8,23,1,24,3,24,628,8,24,1,24,1,24,3,
        24,632,8,24,1,24,1,24,3,24,636,8,24,3,24,638,8,24,1,25,1,25,3,25,
        642,8,25,1,25,1,25,3,25,646,8,25,3,25,648,8,25,1,25,1,25,3,25,652,
        8,25,3,25,654,8,25,1,25,3,25,657,8,25,1,25,1,25,3,25,661,8,25,3,
        25,663,8,25,1,25,1,25,3,25,667,8,25,3,25,669,8,25,1,25,1,25,1,26,
        1,26,1,26,1,26,1,26,3,26,678,8,26,1,27,1,27,3,27,682,8,27,1,27,1,
        27,5,27,686,8,27,10,27,12,27,689,9,27,1,28,3,28,692,8,28,1,28,1,
        28,1,28,1,28,1,29,3,29,699,8,29,1,29,1,29,3,29,703,8,29,1,29,1,29,
        3,29,707,8,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,3,32,717,8,
        32,1,32,4,32,720,8,32,11,32,12,32,721,1,32,3,32,725,8,32,1,32,3,
        32,728,8,32,3,32,730,8,32,1,32,3,32,733,8,32,1,32,1,32,1,33,1,33,
        3,33,739,8,33,1,33,5,33,742,8,33,10,33,12,33,745,9,33,1,34,1,34,
        1,34,1,34,1,34,1,35,1,35,3,35,754,8,35,1,35,1,35,3,35,758,8,35,1,
        35,1,35,3,35,762,8,35,1,35,1,35,3,35,766,8,35,1,35,1,35,3,35,770,
        8,35,1,35,3,35,773,8,35,1,35,1,35,1,36,1,36,3,36,779,8,36,1,37,1,
        37,1,38,1,38,1,39,3,39,786,8,39,1,39,1,39,3,39,790,8,39,1,39,3,39,
        793,8,39,1,39,3,39,796,8,39,1,39,1,39,1,40,1,40,1,41,1,41,3,41,804,
        8,41,1,41,5,41,807,8,41,10,41,12,41,810,9,41,1,42,1,42,1,42,1,42,
        3,42,816,8,42,1,42,1,42,1,42,3,42,821,8,42,1,42,3,42,824,8,42,1,
        43,1,43,3,43,828,8,43,1,44,1,44,3,44,832,8,44,5,44,834,8,44,10,44,
        12,44,837,9,44,1,44,1,44,1,44,3,44,842,8,44,5,44,844,8,44,10,44,
        12,44,847,9,44,1,44,1,44,3,44,851,8,44,1,44,5,44,854,8,44,10,44,
        12,44,857,9,44,1,44,3,44,860,8,44,1,44,3,44,863,8,44,3,44,865,8,
        44,1,45,4,45,868,8,45,11,45,12,45,869,1,45,1,45,1,46,1,46,3,46,876,
        8,46,5,46,878,8,46,10,46,12,46,881,9,46,1,46,1,46,3,46,885,8,46,
        5,46,887,8,46,10,46,12,46,890,9,46,1,46,1,46,3,46,894,8,46,1,47,
        1,47,1,47,3,47,899,8,47,1,48,1,48,3,48,903,8,48,1,48,1,48,1,48,1,
        48,1,48,1,48,1,49,1,49,3,49,913,8,49,1,49,1,49,1,49,5,49,918,8,49,
        10,49,12,49,921,9,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,3,50,933,8,50,1,51,1,51,3,51,937,8,51,1,51,1,51,1,52,1,52,3,
        52,943,8,52,1,52,1,52,3,52,947,8,52,1,52,1,52,3,52,951,8,52,1,52,
        5,52,954,8,52,10,52,12,52,957,9,52,1,53,1,53,1,53,1,53,3,53,963,
        8,53,1,53,1,53,3,53,967,8,53,1,53,5,53,970,8,53,10,53,12,53,973,
        9,53,1,54,1,54,1,54,1,54,3,54,979,8,54,1,55,1,55,1,55,1,55,3,55,
        985,8,55,1,55,1,55,1,55,3,55,990,8,55,1,56,1,56,1,56,1,56,3,56,996,
        8,56,1,56,3,56,999,8,56,1,56,1,56,1,56,1,56,3,56,1005,8,56,3,56,
        1007,8,56,1,57,1,57,3,57,1011,8,57,1,57,1,57,3,57,1015,8,57,1,57,
        5,57,1018,8,57,10,57,12,57,1021,9,57,1,57,3,57,1024,8,57,1,57,3,
        57,1027,8,57,1,58,1,58,1,58,1,58,1,58,3,58,1034,8,58,1,58,1,58,1,
        59,1,59,1,59,3,59,1041,8,59,1,59,3,59,1044,8,59,1,60,1,60,1,60,1,
        61,3,61,1050,8,61,1,61,3,61,1053,8,61,1,61,1,61,1,61,1,61,3,61,1059,
        8,61,1,61,1,61,3,61,1063,8,61,1,61,1,61,3,61,1067,8,61,1,62,1,62,
        3,62,1071,8,62,1,62,1,62,3,62,1075,8,62,1,62,5,62,1078,8,62,10,62,
        12,62,1081,9,62,1,62,1,62,3,62,1085,8,62,1,62,1,62,3,62,1089,8,62,
        1,62,5,62,1092,8,62,10,62,12,62,1095,9,62,3,62,1097,8,62,1,63,1,
        63,1,63,1,63,1,63,1,63,1,63,3,63,1106,8,63,1,64,1,64,1,64,1,64,1,
        64,1,64,1,64,3,64,1115,8,64,1,64,5,64,1118,8,64,10,64,12,64,1121,
        9,64,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,67,1,67,3,67,1133,
        8,67,1,67,3,67,1136,8,67,1,68,1,68,1,68,1,68,1,69,1,69,1,70,1,70,
        3,70,1146,8,70,1,70,1,70,3,70,1150,8,70,1,70,5,70,1153,8,70,10,70,
        12,70,1156,9,70,1,71,1,71,1,72,1,72,3,72,1162,8,72,1,72,5,72,1165,
        8,72,10,72,12,72,1168,9,72,1,72,1,72,1,72,1,72,3,72,1174,8,72,1,
        73,1,73,3,73,1178,8,73,1,73,4,73,1181,8,73,11,73,12,73,1182,1,74,
        1,74,3,74,1187,8,74,1,74,1,74,1,75,1,75,3,75,1193,8,75,1,75,1,75,
        3,75,1197,8,75,1,75,3,75,1200,8,75,1,75,3,75,1203,8,75,1,75,1,75,
        3,75,1207,8,75,1,75,1,75,1,75,1,75,3,75,1213,8,75,1,75,1,75,3,75,
        1217,8,75,1,75,3,75,1220,8,75,1,75,3,75,1223,8,75,1,75,1,75,1,75,
        1,75,3,75,1229,8,75,1,75,3,75,1232,8,75,1,75,3,75,1235,8,75,1,75,
        1,75,3,75,1239,8,75,1,75,1,75,1,75,1,75,3,75,1245,8,75,1,75,3,75,
        1248,8,75,1,75,3,75,1251,8,75,1,75,1,75,3,75,1255,8,75,1,76,1,76,
        3,76,1259,8,76,1,77,1,77,3,77,1263,8,77,1,77,1,77,3,77,1267,8,77,
        1,77,1,77,3,77,1271,8,77,1,77,3,77,1274,8,77,1,77,5,77,1277,8,77,
        10,77,12,77,1280,9,77,1,78,1,78,3,78,1284,8,78,1,78,5,78,1287,8,
        78,10,78,12,78,1290,9,78,1,79,1,79,3,79,1294,8,79,1,79,1,79,1,80,
        1,80,3,80,1300,8,80,1,80,1,80,3,80,1304,8,80,3,80,1306,8,80,1,80,
        1,80,3,80,1310,8,80,1,80,1,80,3,80,1314,8,80,3,80,1316,8,80,3,80,
        1318,8,80,1,81,1,81,1,82,1,82,1,83,1,83,3,83,1326,8,83,1,83,4,83,
        1329,8,83,11,83,12,83,1330,1,84,1,84,1,85,1,85,1,85,1,85,1,85,5,
        85,1340,8,85,10,85,12,85,1343,9,85,1,86,1,86,1,86,1,86,1,86,5,86,
        1350,8,86,10,86,12,86,1353,9,86,1,87,1,87,1,87,1,87,1,87,5,87,1360,
        8,87,10,87,12,87,1363,9,87,1,88,1,88,3,88,1367,8,88,5,88,1369,8,
        88,10,88,12,88,1372,9,88,1,88,1,88,1,89,1,89,3,89,1378,8,89,1,89,
        5,89,1381,8,89,10,89,12,89,1384,9,89,1,90,1,90,3,90,1388,8,90,1,
        90,1,90,1,90,1,90,3,90,1394,8,90,1,90,1,90,1,90,1,90,3,90,1400,8,
        90,1,90,1,90,1,90,1,90,3,90,1406,8,90,1,90,1,90,1,90,1,90,3,90,1412,
        8,90,1,90,1,90,1,90,1,90,3,90,1418,8,90,1,90,1,90,3,90,1422,8,90,
        1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,1434,8,91,
        1,91,3,91,1437,8,91,1,91,1,91,1,92,1,92,1,92,3,92,1444,8,92,1,92,
        1,92,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,1458,
        8,93,1,94,1,94,3,94,1462,8,94,1,94,1,94,3,94,1466,8,94,1,94,1,94,
        1,94,3,94,1471,8,94,1,94,1,94,3,94,1475,8,94,1,94,1,94,5,94,1479,
        8,94,10,94,12,94,1482,9,94,1,95,1,95,1,96,1,96,3,96,1488,8,96,1,
        96,1,96,3,96,1492,8,96,1,96,1,96,1,96,3,96,1497,8,96,1,96,1,96,3,
        96,1501,8,96,1,96,1,96,1,96,3,96,1506,8,96,1,96,1,96,3,96,1510,8,
        96,1,96,1,96,5,96,1514,8,96,10,96,12,96,1517,9,96,1,97,1,97,3,97,
        1521,8,97,1,97,1,97,3,97,1525,8,97,1,97,1,97,5,97,1529,8,97,10,97,
        12,97,1532,9,97,1,98,1,98,1,98,3,98,1537,8,98,1,98,3,98,1540,8,98,
        1,99,1,99,3,99,1544,8,99,1,99,5,99,1547,8,99,10,99,12,99,1550,9,
        99,1,99,3,99,1553,8,99,1,99,3,99,1556,8,99,1,100,1,100,3,100,1560,
        8,100,1,100,1,100,1,101,1,101,1,101,1,101,1,101,3,101,1569,8,101,
        1,101,1,101,3,101,1573,8,101,1,101,1,101,3,101,1577,8,101,1,101,
        1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,3,101,1588,8,101,
        1,102,1,102,3,102,1592,8,102,1,102,4,102,1595,8,102,11,102,12,102,
        1596,1,102,1,102,3,102,1601,8,102,1,102,1,102,3,102,1605,8,102,1,
        102,4,102,1608,8,102,11,102,12,102,1609,3,102,1612,8,102,1,102,3,
        102,1615,8,102,1,102,1,102,3,102,1619,8,102,1,102,3,102,1622,8,102,
        1,102,3,102,1625,8,102,1,102,1,102,1,103,1,103,3,103,1631,8,103,
        1,103,1,103,3,103,1635,8,103,1,103,1,103,3,103,1639,8,103,1,103,
        1,103,1,104,1,104,3,104,1645,8,104,1,104,1,104,3,104,1649,8,104,
        1,104,1,104,3,104,1653,8,104,1,104,3,104,1656,8,104,1,104,3,104,
        1659,8,104,1,104,1,104,1,105,1,105,3,105,1665,8,105,1,105,1,105,
        3,105,1669,8,105,1,105,1,105,3,105,1673,8,105,3,105,1675,8,105,1,
        105,1,105,3,105,1679,8,105,1,105,1,105,3,105,1683,8,105,3,105,1685,
        8,105,1,105,1,105,3,105,1689,8,105,1,105,1,105,3,105,1693,8,105,
        1,105,1,105,1,106,1,106,3,106,1699,8,106,1,106,1,106,3,106,1703,
        8,106,1,106,1,106,3,106,1707,8,106,1,106,1,106,1,106,1,106,3,106,
        1713,8,106,1,106,1,106,3,106,1717,8,106,1,106,1,106,3,106,1721,8,
        106,1,106,1,106,1,106,1,106,3,106,1727,8,106,1,106,1,106,3,106,1731,
        8,106,1,106,1,106,3,106,1735,8,106,1,106,1,106,1,106,1,106,3,106,
        1741,8,106,1,106,1,106,3,106,1745,8,106,1,106,1,106,3,106,1749,8,
        106,1,106,1,106,3,106,1753,8,106,1,107,1,107,3,107,1757,8,107,1,
        107,3,107,1760,8,107,1,108,1,108,1,109,1,109,3,109,1766,8,109,1,
        109,1,109,3,109,1770,8,109,1,109,1,109,1,110,1,110,1,110,1,110,1,
        110,1,110,1,111,1,111,3,111,1782,8,111,1,111,1,111,3,111,1786,8,
        111,1,111,1,111,3,111,1790,8,111,3,111,1792,8,111,1,111,1,111,3,
        111,1796,8,111,1,111,1,111,3,111,1800,8,111,1,111,1,111,3,111,1804,
        8,111,5,111,1806,8,111,10,111,12,111,1809,9,111,3,111,1811,8,111,
        1,111,1,111,1,112,1,112,1,112,1,113,1,113,3,113,1820,8,113,1,113,
        1,113,3,113,1824,8,113,1,113,1,113,1,113,3,113,1829,8,113,1,113,
        3,113,1832,8,113,3,113,1834,8,113,1,113,3,113,1837,8,113,1,113,1,
        113,1,114,1,114,3,114,1843,8,114,1,114,1,114,3,114,1847,8,114,1,
        114,1,114,3,114,1851,8,114,1,114,1,114,3,114,1855,8,114,1,114,1,
        114,3,114,1859,8,114,5,114,1861,8,114,10,114,12,114,1864,9,114,3,
        114,1866,8,114,1,114,1,114,1,115,1,115,1,116,1,116,1,117,1,117,1,
        117,1,118,1,118,1,118,5,118,1880,8,118,10,118,12,118,1883,9,118,
        1,119,1,119,1,120,1,120,1,120,1,120,1,120,1,120,3,120,1893,8,120,
        1,121,1,121,1,122,1,122,3,122,1899,8,122,1,123,1,123,1,124,1,124,
        1,125,1,125,3,125,1907,8,125,1,125,1,125,3,125,1911,8,125,1,125,
        1,125,3,125,1915,8,125,1,125,1,125,3,125,1919,8,125,5,125,1921,8,
        125,10,125,12,125,1924,9,125,3,125,1926,8,125,1,125,1,125,1,126,
        1,126,3,126,1932,8,126,1,126,1,126,3,126,1936,8,126,1,126,1,126,
        3,126,1940,8,126,1,126,1,126,3,126,1944,8,126,1,126,1,126,3,126,
        1948,8,126,1,126,1,126,3,126,1952,8,126,1,126,1,126,3,126,1956,8,
        126,1,126,1,126,3,126,1960,8,126,5,126,1962,8,126,10,126,12,126,
        1965,9,126,3,126,1967,8,126,1,126,1,126,1,127,1,127,1,128,1,128,
        1,128,3,128,1976,8,128,1,129,1,129,3,129,1980,8,129,1,130,1,130,
        1,131,1,131,1,132,1,132,1,132,0,0,133,0,2,4,6,8,10,12,14,16,18,20,
        22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
        204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
        236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,0,12,
        1,0,54,55,6,0,48,48,93,93,99,101,108,108,129,131,134,134,5,0,48,
        68,71,92,94,98,102,104,119,128,1,0,78,81,3,0,2,2,14,14,16,25,1,0,
        16,17,1,0,103,104,1,0,105,107,1,0,115,116,2,0,22,22,27,30,2,0,24,
        24,31,34,2,0,17,17,35,45,2258,0,269,1,0,0,0,2,273,1,0,0,0,4,301,
        1,0,0,0,6,393,1,0,0,0,8,395,1,0,0,0,10,401,1,0,0,0,12,408,1,0,0,
        0,14,414,1,0,0,0,16,421,1,0,0,0,18,448,1,0,0,0,20,452,1,0,0,0,22,
        481,1,0,0,0,24,483,1,0,0,0,26,489,1,0,0,0,28,497,1,0,0,0,30,499,
        1,0,0,0,32,505,1,0,0,0,34,532,1,0,0,0,36,534,1,0,0,0,38,548,1,0,
        0,0,40,558,1,0,0,0,42,590,1,0,0,0,44,592,1,0,0,0,46,616,1,0,0,0,
        48,627,1,0,0,0,50,639,1,0,0,0,52,672,1,0,0,0,54,681,1,0,0,0,56,691,
        1,0,0,0,58,698,1,0,0,0,60,710,1,0,0,0,62,712,1,0,0,0,64,714,1,0,
        0,0,66,736,1,0,0,0,68,746,1,0,0,0,70,751,1,0,0,0,72,778,1,0,0,0,
        74,780,1,0,0,0,76,782,1,0,0,0,78,785,1,0,0,0,80,799,1,0,0,0,82,801,
        1,0,0,0,84,823,1,0,0,0,86,827,1,0,0,0,88,864,1,0,0,0,90,867,1,0,
        0,0,92,879,1,0,0,0,94,898,1,0,0,0,96,900,1,0,0,0,98,910,1,0,0,0,
        100,932,1,0,0,0,102,934,1,0,0,0,104,940,1,0,0,0,106,958,1,0,0,0,
        108,978,1,0,0,0,110,980,1,0,0,0,112,991,1,0,0,0,114,1008,1,0,0,0,
        116,1033,1,0,0,0,118,1037,1,0,0,0,120,1045,1,0,0,0,122,1052,1,0,
        0,0,124,1096,1,0,0,0,126,1105,1,0,0,0,128,1107,1,0,0,0,130,1122,
        1,0,0,0,132,1126,1,0,0,0,134,1130,1,0,0,0,136,1137,1,0,0,0,138,1141,
        1,0,0,0,140,1143,1,0,0,0,142,1157,1,0,0,0,144,1173,1,0,0,0,146,1175,
        1,0,0,0,148,1184,1,0,0,0,150,1254,1,0,0,0,152,1258,1,0,0,0,154,1260,
        1,0,0,0,156,1281,1,0,0,0,158,1291,1,0,0,0,160,1297,1,0,0,0,162,1319,
        1,0,0,0,164,1321,1,0,0,0,166,1323,1,0,0,0,168,1332,1,0,0,0,170,1334,
        1,0,0,0,172,1344,1,0,0,0,174,1354,1,0,0,0,176,1370,1,0,0,0,178,1375,
        1,0,0,0,180,1421,1,0,0,0,182,1433,1,0,0,0,184,1440,1,0,0,0,186,1457,
        1,0,0,0,188,1459,1,0,0,0,190,1483,1,0,0,0,192,1485,1,0,0,0,194,1518,
        1,0,0,0,196,1539,1,0,0,0,198,1541,1,0,0,0,200,1557,1,0,0,0,202,1587,
        1,0,0,0,204,1611,1,0,0,0,206,1628,1,0,0,0,208,1642,1,0,0,0,210,1662,
        1,0,0,0,212,1752,1,0,0,0,214,1754,1,0,0,0,216,1761,1,0,0,0,218,1763,
        1,0,0,0,220,1773,1,0,0,0,222,1779,1,0,0,0,224,1814,1,0,0,0,226,1817,
        1,0,0,0,228,1840,1,0,0,0,230,1869,1,0,0,0,232,1871,1,0,0,0,234,1873,
        1,0,0,0,236,1881,1,0,0,0,238,1884,1,0,0,0,240,1892,1,0,0,0,242,1894,
        1,0,0,0,244,1898,1,0,0,0,246,1900,1,0,0,0,248,1902,1,0,0,0,250,1904,
        1,0,0,0,252,1929,1,0,0,0,254,1970,1,0,0,0,256,1972,1,0,0,0,258,1979,
        1,0,0,0,260,1981,1,0,0,0,262,1983,1,0,0,0,264,1985,1,0,0,0,266,270,
        3,82,41,0,267,270,3,112,56,0,268,270,3,28,14,0,269,266,1,0,0,0,269,
        267,1,0,0,0,269,268,1,0,0,0,270,1,1,0,0,0,271,272,5,58,0,0,272,274,
        5,135,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,275,1,0,0,0,275,277,
        5,59,0,0,276,278,5,135,0,0,277,276,1,0,0,0,277,278,1,0,0,0,278,279,
        1,0,0,0,279,287,3,140,70,0,280,282,5,135,0,0,281,280,1,0,0,0,281,
        282,1,0,0,0,282,285,1,0,0,0,283,286,3,24,12,0,284,286,3,26,13,0,
        285,283,1,0,0,0,285,284,1,0,0,0,286,288,1,0,0,0,287,281,1,0,0,0,
        287,288,1,0,0,0,288,293,1,0,0,0,289,291,5,135,0,0,290,289,1,0,0,
        0,290,291,1,0,0,0,291,292,1,0,0,0,292,294,3,136,68,0,293,290,1,0,
        0,0,293,294,1,0,0,0,294,3,1,0,0,0,295,302,3,102,51,0,296,302,3,98,
        49,0,297,302,3,20,10,0,298,302,3,104,52,0,299,302,3,106,53,0,300,
        302,3,16,8,0,301,295,1,0,0,0,301,296,1,0,0,0,301,297,1,0,0,0,301,
        298,1,0,0,0,301,299,1,0,0,0,301,300,1,0,0,0,302,307,1,0,0,0,303,
        305,5,135,0,0,304,303,1,0,0,0,304,305,1,0,0,0,305,306,1,0,0,0,306,
        308,3,24,12,0,307,304,1,0,0,0,307,308,1,0,0,0,308,5,1,0,0,0,309,
        311,3,238,119,0,310,312,5,135,0,0,311,310,1,0,0,0,311,312,1,0,0,
        0,312,313,1,0,0,0,313,314,3,70,35,0,314,394,1,0,0,0,315,320,3,238,
        119,0,316,318,5,135,0,0,317,316,1,0,0,0,317,318,1,0,0,0,318,319,
        1,0,0,0,319,321,3,70,35,0,320,317,1,0,0,0,320,321,1,0,0,0,321,322,
        1,0,0,0,322,323,5,1,0,0,323,324,3,8,4,0,324,394,1,0,0,0,325,330,
        3,238,119,0,326,328,5,135,0,0,327,326,1,0,0,0,327,328,1,0,0,0,328,
        329,1,0,0,0,329,331,3,70,35,0,330,327,1,0,0,0,330,331,1,0,0,0,331,
        332,1,0,0,0,332,333,5,1,0,0,333,335,3,10,5,0,334,336,5,135,0,0,335,
        334,1,0,0,0,335,336,1,0,0,0,336,337,1,0,0,0,337,338,3,12,6,0,338,
        394,1,0,0,0,339,344,3,238,119,0,340,342,5,135,0,0,341,340,1,0,0,
        0,341,342,1,0,0,0,342,343,1,0,0,0,343,345,3,70,35,0,344,341,1,0,
        0,0,344,345,1,0,0,0,345,346,1,0,0,0,346,347,5,1,0,0,347,349,3,10,
        5,0,348,350,5,135,0,0,349,348,1,0,0,0,349,350,1,0,0,0,350,351,1,
        0,0,0,351,353,5,2,0,0,352,354,5,135,0,0,353,352,1,0,0,0,353,354,
        1,0,0,0,354,355,1,0,0,0,355,356,3,14,7,0,356,394,1,0,0,0,357,359,
        3,166,83,0,358,360,5,135,0,0,359,358,1,0,0,0,359,360,1,0,0,0,360,
        361,1,0,0,0,361,363,5,2,0,0,362,364,5,135,0,0,363,362,1,0,0,0,363,
        364,1,0,0,0,364,365,1,0,0,0,365,366,3,168,84,0,366,394,1,0,0,0,367,
        369,3,238,119,0,368,370,5,135,0,0,369,368,1,0,0,0,369,370,1,0,0,
        0,370,371,1,0,0,0,371,373,5,2,0,0,372,374,5,135,0,0,373,372,1,0,
        0,0,373,374,1,0,0,0,374,375,1,0,0,0,375,376,3,168,84,0,376,394,1,
        0,0,0,377,379,3,238,119,0,378,380,5,135,0,0,379,378,1,0,0,0,379,
        380,1,0,0,0,380,381,1,0,0,0,381,383,5,3,0,0,382,384,5,135,0,0,383,
        382,1,0,0,0,383,384,1,0,0,0,384,385,1,0,0,0,385,386,3,168,84,0,386,
        394,1,0,0,0,387,389,3,238,119,0,388,390,5,135,0,0,389,388,1,0,0,
        0,389,390,1,0,0,0,390,391,1,0,0,0,391,392,3,156,78,0,392,394,1,0,
        0,0,393,309,1,0,0,0,393,315,1,0,0,0,393,325,1,0,0,0,393,339,1,0,
        0,0,393,357,1,0,0,0,393,367,1,0,0,0,393,377,1,0,0,0,393,387,1,0,
        0,0,394,7,1,0,0,0,395,397,3,254,127,0,396,398,5,135,0,0,397,396,
        1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,400,3,70,35,0,400,9,
        1,0,0,0,401,406,3,254,127,0,402,404,5,135,0,0,403,402,1,0,0,0,403,
        404,1,0,0,0,404,405,1,0,0,0,405,407,3,70,35,0,406,403,1,0,0,0,406,
        407,1,0,0,0,407,11,1,0,0,0,408,410,5,47,0,0,409,411,5,135,0,0,410,
        409,1,0,0,0,410,411,1,0,0,0,411,412,1,0,0,0,412,413,3,70,35,0,413,
        13,1,0,0,0,414,419,3,168,84,0,415,417,5,135,0,0,416,415,1,0,0,0,
        416,417,1,0,0,0,417,418,1,0,0,0,418,420,3,70,35,0,419,416,1,0,0,
        0,419,420,1,0,0,0,420,15,1,0,0,0,421,423,5,53,0,0,422,424,5,135,
        0,0,423,422,1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,436,3,18,
        9,0,426,428,5,135,0,0,427,426,1,0,0,0,427,428,1,0,0,0,428,429,1,
        0,0,0,429,431,5,4,0,0,430,432,5,135,0,0,431,430,1,0,0,0,431,432,
        1,0,0,0,432,433,1,0,0,0,433,435,3,18,9,0,434,427,1,0,0,0,435,438,
        1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,437,17,1,0,0,0,438,436,1,
        0,0,0,439,440,3,168,84,0,440,441,5,1,0,0,441,443,3,254,127,0,442,
        444,5,135,0,0,443,442,1,0,0,0,443,444,1,0,0,0,444,445,1,0,0,0,445,
        446,5,47,0,0,446,449,1,0,0,0,447,449,3,168,84,0,448,439,1,0,0,0,
        448,447,1,0,0,0,449,19,1,0,0,0,450,451,5,66,0,0,451,453,5,135,0,
        0,452,450,1,0,0,0,452,453,1,0,0,0,453,454,1,0,0,0,454,456,5,67,0,
        0,455,457,5,135,0,0,456,455,1,0,0,0,456,457,1,0,0,0,457,458,1,0,
        0,0,458,469,3,22,11,0,459,461,5,135,0,0,460,459,1,0,0,0,460,461,
        1,0,0,0,461,462,1,0,0,0,462,464,5,4,0,0,463,465,5,135,0,0,464,463,
        1,0,0,0,464,465,1,0,0,0,465,466,1,0,0,0,466,468,3,22,11,0,467,460,
        1,0,0,0,468,471,1,0,0,0,469,467,1,0,0,0,469,470,1,0,0,0,470,21,1,
        0,0,0,471,469,1,0,0,0,472,473,3,168,84,0,473,474,5,1,0,0,474,476,
        3,254,127,0,475,477,5,135,0,0,476,475,1,0,0,0,476,477,1,0,0,0,477,
        478,1,0,0,0,478,479,5,47,0,0,479,482,1,0,0,0,480,482,3,168,84,0,
        481,472,1,0,0,0,481,480,1,0,0,0,482,23,1,0,0,0,483,485,5,49,0,0,
        484,486,5,135,0,0,485,484,1,0,0,0,485,486,1,0,0,0,486,487,1,0,0,
        0,487,488,3,168,84,0,488,25,1,0,0,0,489,491,5,51,0,0,490,492,5,135,
        0,0,491,490,1,0,0,0,491,492,1,0,0,0,492,493,1,0,0,0,493,494,3,168,
        84,0,494,27,1,0,0,0,495,498,3,30,15,0,496,498,3,32,16,0,497,495,
        1,0,0,0,497,496,1,0,0,0,498,29,1,0,0,0,499,501,5,50,0,0,500,502,
        5,135,0,0,501,500,1,0,0,0,501,502,1,0,0,0,502,503,1,0,0,0,503,504,
        3,168,84,0,504,31,1,0,0,0,505,507,5,52,0,0,506,508,5,135,0,0,507,
        506,1,0,0,0,507,508,1,0,0,0,508,509,1,0,0,0,509,510,3,168,84,0,510,
        33,1,0,0,0,511,513,3,238,119,0,512,514,5,135,0,0,513,512,1,0,0,0,
        513,514,1,0,0,0,514,515,1,0,0,0,515,517,5,2,0,0,516,518,5,135,0,
        0,517,516,1,0,0,0,517,518,1,0,0,0,518,519,1,0,0,0,519,520,3,36,18,
        0,520,533,1,0,0,0,521,523,3,238,119,0,522,524,5,135,0,0,523,522,
        1,0,0,0,523,524,1,0,0,0,524,525,1,0,0,0,525,527,5,2,0,0,526,528,
        5,135,0,0,527,526,1,0,0,0,527,528,1,0,0,0,528,529,1,0,0,0,529,530,
        3,142,71,0,530,533,1,0,0,0,531,533,3,142,71,0,532,511,1,0,0,0,532,
        521,1,0,0,0,532,531,1,0,0,0,533,35,1,0,0,0,534,536,3,224,112,0,535,
        537,5,135,0,0,536,535,1,0,0,0,536,537,1,0,0,0,537,538,1,0,0,0,538,
        540,5,5,0,0,539,541,5,135,0,0,540,539,1,0,0,0,540,541,1,0,0,0,541,
        542,1,0,0,0,542,544,3,38,19,0,543,545,5,135,0,0,544,543,1,0,0,0,
        544,545,1,0,0,0,545,546,1,0,0,0,546,547,5,6,0,0,547,37,1,0,0,0,548,
        550,3,40,20,0,549,551,5,135,0,0,550,549,1,0,0,0,550,551,1,0,0,0,
        551,552,1,0,0,0,552,554,3,150,75,0,553,555,5,135,0,0,554,553,1,0,
        0,0,554,555,1,0,0,0,555,556,1,0,0,0,556,557,3,40,20,0,557,39,1,0,
        0,0,558,560,5,5,0,0,559,561,5,135,0,0,560,559,1,0,0,0,560,561,1,
        0,0,0,561,566,1,0,0,0,562,564,3,238,119,0,563,565,5,135,0,0,564,
        563,1,0,0,0,564,565,1,0,0,0,565,567,1,0,0,0,566,562,1,0,0,0,566,
        567,1,0,0,0,567,572,1,0,0,0,568,570,3,156,78,0,569,571,5,135,0,0,
        570,569,1,0,0,0,570,571,1,0,0,0,571,573,1,0,0,0,572,568,1,0,0,0,
        572,573,1,0,0,0,573,578,1,0,0,0,574,576,3,70,35,0,575,577,5,135,
        0,0,576,575,1,0,0,0,576,577,1,0,0,0,577,579,1,0,0,0,578,574,1,0,
        0,0,578,579,1,0,0,0,579,584,1,0,0,0,580,582,3,42,21,0,581,583,5,
        135,0,0,582,581,1,0,0,0,582,583,1,0,0,0,583,585,1,0,0,0,584,580,
        1,0,0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,587,5,6,0,0,587,41,1,
        0,0,0,588,591,3,44,22,0,589,591,3,256,128,0,590,588,1,0,0,0,590,
        589,1,0,0,0,591,43,1,0,0,0,592,594,5,7,0,0,593,595,5,135,0,0,594,
        593,1,0,0,0,594,595,1,0,0,0,595,612,1,0,0,0,596,597,3,46,23,0,597,
        598,5,8,0,0,598,609,3,48,24,0,599,601,5,4,0,0,600,602,5,135,0,0,
        601,600,1,0,0,0,601,602,1,0,0,0,602,603,1,0,0,0,603,604,3,46,23,
        0,604,605,5,8,0,0,605,606,3,48,24,0,606,608,1,0,0,0,607,599,1,0,
        0,0,608,611,1,0,0,0,609,607,1,0,0,0,609,610,1,0,0,0,610,613,1,0,
        0,0,611,609,1,0,0,0,612,596,1,0,0,0,612,613,1,0,0,0,613,614,1,0,
        0,0,614,615,5,9,0,0,615,45,1,0,0,0,616,618,3,254,127,0,617,619,5,
        135,0,0,618,617,1,0,0,0,618,619,1,0,0,0,619,624,1,0,0,0,620,622,
        3,70,35,0,621,623,5,135,0,0,622,621,1,0,0,0,622,623,1,0,0,0,623,
        625,1,0,0,0,624,620,1,0,0,0,624,625,1,0,0,0,625,47,1,0,0,0,626,628,
        5,135,0,0,627,626,1,0,0,0,627,628,1,0,0,0,628,629,1,0,0,0,629,631,
        3,168,84,0,630,632,5,135,0,0,631,630,1,0,0,0,631,632,1,0,0,0,632,
        637,1,0,0,0,633,635,3,70,35,0,634,636,5,135,0,0,635,634,1,0,0,0,
        635,636,1,0,0,0,636,638,1,0,0,0,637,633,1,0,0,0,637,638,1,0,0,0,
        638,49,1,0,0,0,639,641,5,10,0,0,640,642,5,135,0,0,641,640,1,0,0,
        0,641,642,1,0,0,0,642,647,1,0,0,0,643,645,3,238,119,0,644,646,5,
        135,0,0,645,644,1,0,0,0,645,646,1,0,0,0,646,648,1,0,0,0,647,643,
        1,0,0,0,647,648,1,0,0,0,648,653,1,0,0,0,649,651,3,154,77,0,650,652,
        5,135,0,0,651,650,1,0,0,0,651,652,1,0,0,0,652,654,1,0,0,0,653,649,
        1,0,0,0,653,654,1,0,0,0,654,656,1,0,0,0,655,657,3,160,80,0,656,655,
        1,0,0,0,656,657,1,0,0,0,657,662,1,0,0,0,658,660,3,70,35,0,659,661,
        5,135,0,0,660,659,1,0,0,0,660,661,1,0,0,0,661,663,1,0,0,0,662,658,
        1,0,0,0,662,663,1,0,0,0,663,668,1,0,0,0,664,666,3,152,76,0,665,667,
        5,135,0,0,666,665,1,0,0,0,666,667,1,0,0,0,667,669,1,0,0,0,668,664,
        1,0,0,0,668,669,1,0,0,0,669,670,1,0,0,0,670,671,5,11,0,0,671,51,
        1,0,0,0,672,677,3,188,94,0,673,678,3,68,34,0,674,678,3,182,91,0,
        675,678,3,184,92,0,676,678,3,186,93,0,677,673,1,0,0,0,677,674,1,
        0,0,0,677,675,1,0,0,0,677,676,1,0,0,0,677,678,1,0,0,0,678,53,1,0,
        0,0,679,682,3,198,99,0,680,682,3,64,32,0,681,679,1,0,0,0,681,680,
        1,0,0,0,682,687,1,0,0,0,683,686,3,56,28,0,684,686,3,58,29,0,685,
        683,1,0,0,0,685,684,1,0,0,0,686,689,1,0,0,0,687,685,1,0,0,0,687,
        688,1,0,0,0,688,55,1,0,0,0,689,687,1,0,0,0,690,692,5,135,0,0,691,
        690,1,0,0,0,691,692,1,0,0,0,692,693,1,0,0,0,693,694,5,10,0,0,694,
        695,3,60,30,0,695,696,5,11,0,0,696,57,1,0,0,0,697,699,5,135,0,0,
        698,697,1,0,0,0,698,699,1,0,0,0,699,700,1,0,0,0,700,702,5,10,0,0,
        701,703,3,60,30,0,702,701,1,0,0,0,702,703,1,0,0,0,703,704,1,0,0,
        0,704,706,5,12,0,0,705,707,3,62,31,0,706,705,1,0,0,0,706,707,1,0,
        0,0,707,708,1,0,0,0,708,709,5,11,0,0,709,59,1,0,0,0,710,711,3,168,
        84,0,711,61,1,0,0,0,712,713,3,168,84,0,713,63,1,0,0,0,714,729,3,
        202,101,0,715,717,5,135,0,0,716,715,1,0,0,0,716,717,1,0,0,0,717,
        718,1,0,0,0,718,720,3,200,100,0,719,716,1,0,0,0,720,721,1,0,0,0,
        721,719,1,0,0,0,721,722,1,0,0,0,722,727,1,0,0,0,723,725,5,135,0,
        0,724,723,1,0,0,0,724,725,1,0,0,0,725,726,1,0,0,0,726,728,5,47,0,
        0,727,724,1,0,0,0,727,728,1,0,0,0,728,730,1,0,0,0,729,719,1,0,0,
        0,729,730,1,0,0,0,730,732,1,0,0,0,731,733,5,135,0,0,732,731,1,0,
        0,0,732,733,1,0,0,0,733,734,1,0,0,0,734,735,3,66,33,0,735,65,1,0,
        0,0,736,743,5,46,0,0,737,739,5,135,0,0,738,737,1,0,0,0,738,739,1,
        0,0,0,739,740,1,0,0,0,740,742,3,200,100,0,741,738,1,0,0,0,742,745,
        1,0,0,0,743,741,1,0,0,0,743,744,1,0,0,0,744,67,1,0,0,0,745,743,1,
        0,0,0,746,747,5,135,0,0,747,748,7,0,0,0,748,749,5,135,0,0,749,750,
        3,188,94,0,750,69,1,0,0,0,751,753,5,46,0,0,752,754,5,135,0,0,753,
        752,1,0,0,0,753,754,1,0,0,0,754,755,1,0,0,0,755,757,5,5,0,0,756,
        758,5,135,0,0,757,756,1,0,0,0,757,758,1,0,0,0,758,759,1,0,0,0,759,
        761,3,72,36,0,760,762,5,135,0,0,761,760,1,0,0,0,761,762,1,0,0,0,
        762,763,1,0,0,0,763,765,5,4,0,0,764,766,5,135,0,0,765,764,1,0,0,
        0,765,766,1,0,0,0,766,769,1,0,0,0,767,770,3,72,36,0,768,770,5,48,
        0,0,769,767,1,0,0,0,769,768,1,0,0,0,770,772,1,0,0,0,771,773,5,135,
        0,0,772,771,1,0,0,0,772,773,1,0,0,0,773,774,1,0,0,0,774,775,5,6,
        0,0,775,71,1,0,0,0,776,779,5,117,0,0,777,779,3,252,126,0,778,776,
        1,0,0,0,778,777,1,0,0,0,779,73,1,0,0,0,780,781,7,1,0,0,781,75,1,
        0,0,0,782,783,7,2,0,0,783,77,1,0,0,0,784,786,5,135,0,0,785,784,1,
        0,0,0,785,786,1,0,0,0,786,787,1,0,0,0,787,792,3,80,40,0,788,790,
        5,135,0,0,789,788,1,0,0,0,789,790,1,0,0,0,790,791,1,0,0,0,791,793,
        5,13,0,0,792,789,1,0,0,0,792,793,1,0,0,0,793,795,1,0,0,0,794,796,
        5,135,0,0,795,794,1,0,0,0,795,796,1,0,0,0,796,797,1,0,0,0,797,798,
        5,0,0,1,798,79,1,0,0,0,799,800,3,0,0,0,800,81,1,0,0,0,801,808,3,
        86,43,0,802,804,5,135,0,0,803,802,1,0,0,0,803,804,1,0,0,0,804,805,
        1,0,0,0,805,807,3,84,42,0,806,803,1,0,0,0,807,810,1,0,0,0,808,806,
        1,0,0,0,808,809,1,0,0,0,809,83,1,0,0,0,810,808,1,0,0,0,811,812,5,
        56,0,0,812,813,5,135,0,0,813,815,5,57,0,0,814,816,5,135,0,0,815,
        814,1,0,0,0,815,816,1,0,0,0,816,817,1,0,0,0,817,824,3,86,43,0,818,
        820,5,56,0,0,819,821,5,135,0,0,820,819,1,0,0,0,820,821,1,0,0,0,821,
        822,1,0,0,0,822,824,3,86,43,0,823,811,1,0,0,0,823,818,1,0,0,0,824,
        85,1,0,0,0,825,828,3,88,44,0,826,828,3,90,45,0,827,825,1,0,0,0,827,
        826,1,0,0,0,828,87,1,0,0,0,829,831,3,94,47,0,830,832,5,135,0,0,831,
        830,1,0,0,0,831,832,1,0,0,0,832,834,1,0,0,0,833,829,1,0,0,0,834,
        837,1,0,0,0,835,833,1,0,0,0,835,836,1,0,0,0,836,838,1,0,0,0,837,
        835,1,0,0,0,838,865,3,120,60,0,839,841,3,94,47,0,840,842,5,135,0,
        0,841,840,1,0,0,0,841,842,1,0,0,0,842,844,1,0,0,0,843,839,1,0,0,
        0,844,847,1,0,0,0,845,843,1,0,0,0,845,846,1,0,0,0,846,848,1,0,0,
        0,847,845,1,0,0,0,848,855,3,4,2,0,849,851,5,135,0,0,850,849,1,0,
        0,0,850,851,1,0,0,0,851,852,1,0,0,0,852,854,3,4,2,0,853,850,1,0,
        0,0,854,857,1,0,0,0,855,853,1,0,0,0,855,856,1,0,0,0,856,862,1,0,
        0,0,857,855,1,0,0,0,858,860,5,135,0,0,859,858,1,0,0,0,859,860,1,
        0,0,0,860,861,1,0,0,0,861,863,3,120,60,0,862,859,1,0,0,0,862,863,
        1,0,0,0,863,865,1,0,0,0,864,835,1,0,0,0,864,845,1,0,0,0,865,89,1,
        0,0,0,866,868,3,92,46,0,867,866,1,0,0,0,868,869,1,0,0,0,869,867,
        1,0,0,0,869,870,1,0,0,0,870,871,1,0,0,0,871,872,3,88,44,0,872,91,
        1,0,0,0,873,875,3,94,47,0,874,876,5,135,0,0,875,874,1,0,0,0,875,
        876,1,0,0,0,876,878,1,0,0,0,877,873,1,0,0,0,878,881,1,0,0,0,879,
        877,1,0,0,0,879,880,1,0,0,0,880,888,1,0,0,0,881,879,1,0,0,0,882,
        884,3,4,2,0,883,885,5,135,0,0,884,883,1,0,0,0,884,885,1,0,0,0,885,
        887,1,0,0,0,886,882,1,0,0,0,887,890,1,0,0,0,888,886,1,0,0,0,888,
        889,1,0,0,0,889,891,1,0,0,0,890,888,1,0,0,0,891,893,3,118,59,0,892,
        894,5,135,0,0,893,892,1,0,0,0,893,894,1,0,0,0,894,93,1,0,0,0,895,
        899,3,2,1,0,896,899,3,96,48,0,897,899,3,110,55,0,898,895,1,0,0,0,
        898,896,1,0,0,0,898,897,1,0,0,0,899,95,1,0,0,0,900,902,5,60,0,0,
        901,903,5,135,0,0,902,901,1,0,0,0,902,903,1,0,0,0,903,904,1,0,0,
        0,904,905,3,168,84,0,905,906,5,135,0,0,906,907,5,61,0,0,907,908,
        5,135,0,0,908,909,3,238,119,0,909,97,1,0,0,0,910,912,5,62,0,0,911,
        913,5,135,0,0,912,911,1,0,0,0,912,913,1,0,0,0,913,914,1,0,0,0,914,
        919,3,34,17,0,915,916,5,135,0,0,916,918,3,100,50,0,917,915,1,0,0,
        0,918,921,1,0,0,0,919,917,1,0,0,0,919,920,1,0,0,0,920,99,1,0,0,0,
        921,919,1,0,0,0,922,923,5,63,0,0,923,924,5,135,0,0,924,925,5,59,
        0,0,925,926,5,135,0,0,926,933,3,104,52,0,927,928,5,63,0,0,928,929,
        5,135,0,0,929,930,5,64,0,0,930,931,5,135,0,0,931,933,3,104,52,0,
        932,922,1,0,0,0,932,927,1,0,0,0,933,101,1,0,0,0,934,936,5,64,0,0,
        935,937,5,135,0,0,936,935,1,0,0,0,936,937,1,0,0,0,937,938,1,0,0,
        0,938,939,3,140,70,0,939,103,1,0,0,0,940,942,5,65,0,0,941,943,5,
        135,0,0,942,941,1,0,0,0,942,943,1,0,0,0,943,944,1,0,0,0,944,955,
        3,6,3,0,945,947,5,135,0,0,946,945,1,0,0,0,946,947,1,0,0,0,947,948,
        1,0,0,0,948,950,5,4,0,0,949,951,5,135,0,0,950,949,1,0,0,0,950,951,
        1,0,0,0,951,952,1,0,0,0,952,954,3,6,3,0,953,946,1,0,0,0,954,957,
        1,0,0,0,955,953,1,0,0,0,955,956,1,0,0,0,956,105,1,0,0,0,957,955,
        1,0,0,0,958,959,5,68,0,0,959,960,5,135,0,0,960,971,3,108,54,0,961,
        963,5,135,0,0,962,961,1,0,0,0,962,963,1,0,0,0,963,964,1,0,0,0,964,
        966,5,4,0,0,965,967,5,135,0,0,966,965,1,0,0,0,966,967,1,0,0,0,967,
        968,1,0,0,0,968,970,3,108,54,0,969,962,1,0,0,0,970,973,1,0,0,0,971,
        969,1,0,0,0,971,972,1,0,0,0,972,107,1,0,0,0,973,971,1,0,0,0,974,
        975,3,238,119,0,975,976,3,156,78,0,976,979,1,0,0,0,977,979,3,166,
        83,0,978,974,1,0,0,0,978,977,1,0,0,0,979,109,1,0,0,0,980,981,5,69,
        0,0,981,982,5,135,0,0,982,989,3,228,114,0,983,985,5,135,0,0,984,
        983,1,0,0,0,984,985,1,0,0,0,985,986,1,0,0,0,986,987,5,70,0,0,987,
        988,5,135,0,0,988,990,3,114,57,0,989,984,1,0,0,0,989,990,1,0,0,0,
        990,111,1,0,0,0,991,992,5,69,0,0,992,995,5,135,0,0,993,996,3,228,
        114,0,994,996,3,230,115,0,995,993,1,0,0,0,995,994,1,0,0,0,996,1006,
        1,0,0,0,997,999,5,135,0,0,998,997,1,0,0,0,998,999,1,0,0,0,999,1000,
        1,0,0,0,1000,1001,5,70,0,0,1001,1004,5,135,0,0,1002,1005,5,14,0,
        0,1003,1005,3,114,57,0,1004,1002,1,0,0,0,1004,1003,1,0,0,0,1005,
        1007,1,0,0,0,1006,998,1,0,0,0,1006,1007,1,0,0,0,1007,113,1,0,0,0,
        1008,1019,3,116,58,0,1009,1011,5,135,0,0,1010,1009,1,0,0,0,1010,
        1011,1,0,0,0,1011,1012,1,0,0,0,1012,1014,5,4,0,0,1013,1015,5,135,
        0,0,1014,1013,1,0,0,0,1014,1015,1,0,0,0,1015,1016,1,0,0,0,1016,1018,
        3,116,58,0,1017,1010,1,0,0,0,1018,1021,1,0,0,0,1019,1017,1,0,0,0,
        1019,1020,1,0,0,0,1020,1026,1,0,0,0,1021,1019,1,0,0,0,1022,1024,
        5,135,0,0,1023,1022,1,0,0,0,1023,1024,1,0,0,0,1024,1025,1,0,0,0,
        1025,1027,3,136,68,0,1026,1023,1,0,0,0,1026,1027,1,0,0,0,1027,115,
        1,0,0,0,1028,1029,3,232,116,0,1029,1030,5,135,0,0,1030,1031,5,61,
        0,0,1031,1032,5,135,0,0,1032,1034,1,0,0,0,1033,1028,1,0,0,0,1033,
        1034,1,0,0,0,1034,1035,1,0,0,0,1035,1036,3,238,119,0,1036,117,1,
        0,0,0,1037,1038,5,71,0,0,1038,1043,3,122,61,0,1039,1041,5,135,0,
        0,1040,1039,1,0,0,0,1040,1041,1,0,0,0,1041,1042,1,0,0,0,1042,1044,
        3,136,68,0,1043,1040,1,0,0,0,1043,1044,1,0,0,0,1044,119,1,0,0,0,
        1045,1046,5,72,0,0,1046,1047,3,122,61,0,1047,121,1,0,0,0,1048,1050,
        5,135,0,0,1049,1048,1,0,0,0,1049,1050,1,0,0,0,1050,1051,1,0,0,0,
        1051,1053,5,73,0,0,1052,1049,1,0,0,0,1052,1053,1,0,0,0,1053,1054,
        1,0,0,0,1054,1055,5,135,0,0,1055,1058,3,124,62,0,1056,1057,5,135,
        0,0,1057,1059,3,128,64,0,1058,1056,1,0,0,0,1058,1059,1,0,0,0,1059,
        1062,1,0,0,0,1060,1061,5,135,0,0,1061,1063,3,130,65,0,1062,1060,
        1,0,0,0,1062,1063,1,0,0,0,1063,1066,1,0,0,0,1064,1065,5,135,0,0,
        1065,1067,3,132,66,0,1066,1064,1,0,0,0,1066,1067,1,0,0,0,1067,123,
        1,0,0,0,1068,1079,5,14,0,0,1069,1071,5,135,0,0,1070,1069,1,0,0,0,
        1070,1071,1,0,0,0,1071,1072,1,0,0,0,1072,1074,5,4,0,0,1073,1075,
        5,135,0,0,1074,1073,1,0,0,0,1074,1075,1,0,0,0,1075,1076,1,0,0,0,
        1076,1078,3,126,63,0,1077,1070,1,0,0,0,1078,1081,1,0,0,0,1079,1077,
        1,0,0,0,1079,1080,1,0,0,0,1080,1097,1,0,0,0,1081,1079,1,0,0,0,1082,
        1093,3,126,63,0,1083,1085,5,135,0,0,1084,1083,1,0,0,0,1084,1085,
        1,0,0,0,1085,1086,1,0,0,0,1086,1088,5,4,0,0,1087,1089,5,135,0,0,
        1088,1087,1,0,0,0,1088,1089,1,0,0,0,1089,1090,1,0,0,0,1090,1092,
        3,126,63,0,1091,1084,1,0,0,0,1092,1095,1,0,0,0,1093,1091,1,0,0,0,
        1093,1094,1,0,0,0,1094,1097,1,0,0,0,1095,1093,1,0,0,0,1096,1068,
        1,0,0,0,1096,1082,1,0,0,0,1097,125,1,0,0,0,1098,1099,3,168,84,0,
        1099,1100,5,135,0,0,1100,1101,5,61,0,0,1101,1102,5,135,0,0,1102,
        1103,3,238,119,0,1103,1106,1,0,0,0,1104,1106,3,168,84,0,1105,1098,
        1,0,0,0,1105,1104,1,0,0,0,1106,127,1,0,0,0,1107,1108,5,74,0,0,1108,
        1109,5,135,0,0,1109,1110,5,75,0,0,1110,1111,5,135,0,0,1111,1119,
        3,134,67,0,1112,1114,5,4,0,0,1113,1115,5,135,0,0,1114,1113,1,0,0,
        0,1114,1115,1,0,0,0,1115,1116,1,0,0,0,1116,1118,3,134,67,0,1117,
        1112,1,0,0,0,1118,1121,1,0,0,0,1119,1117,1,0,0,0,1119,1120,1,0,0,
        0,1120,129,1,0,0,0,1121,1119,1,0,0,0,1122,1123,5,76,0,0,1123,1124,
        5,135,0,0,1124,1125,3,168,84,0,1125,131,1,0,0,0,1126,1127,5,77,0,
        0,1127,1128,5,135,0,0,1128,1129,3,168,84,0,1129,133,1,0,0,0,1130,
        1135,3,168,84,0,1131,1133,5,135,0,0,1132,1131,1,0,0,0,1132,1133,
        1,0,0,0,1133,1134,1,0,0,0,1134,1136,7,3,0,0,1135,1132,1,0,0,0,1135,
        1136,1,0,0,0,1136,135,1,0,0,0,1137,1138,5,82,0,0,1138,1139,5,135,
        0,0,1139,1140,3,138,69,0,1140,137,1,0,0,0,1141,1142,3,170,85,0,1142,
        139,1,0,0,0,1143,1154,3,34,17,0,1144,1146,5,135,0,0,1145,1144,1,
        0,0,0,1145,1146,1,0,0,0,1146,1147,1,0,0,0,1147,1149,5,4,0,0,1148,
        1150,5,135,0,0,1149,1148,1,0,0,0,1149,1150,1,0,0,0,1150,1151,1,0,
        0,0,1151,1153,3,34,17,0,1152,1145,1,0,0,0,1153,1156,1,0,0,0,1154,
        1152,1,0,0,0,1154,1155,1,0,0,0,1155,141,1,0,0,0,1156,1154,1,0,0,
        0,1157,1158,3,144,72,0,1158,143,1,0,0,0,1159,1166,3,40,20,0,1160,
        1162,5,135,0,0,1161,1160,1,0,0,0,1161,1162,1,0,0,0,1162,1163,1,0,
        0,0,1163,1165,3,148,74,0,1164,1161,1,0,0,0,1165,1168,1,0,0,0,1166,
        1164,1,0,0,0,1166,1167,1,0,0,0,1167,1174,1,0,0,0,1168,1166,1,0,0,
        0,1169,1170,5,5,0,0,1170,1171,3,144,72,0,1171,1172,5,6,0,0,1172,
        1174,1,0,0,0,1173,1159,1,0,0,0,1173,1169,1,0,0,0,1174,145,1,0,0,
        0,1175,1180,3,40,20,0,1176,1178,5,135,0,0,1177,1176,1,0,0,0,1177,
        1178,1,0,0,0,1178,1179,1,0,0,0,1179,1181,3,148,74,0,1180,1177,1,
        0,0,0,1181,1182,1,0,0,0,1182,1180,1,0,0,0,1182,1183,1,0,0,0,1183,
        147,1,0,0,0,1184,1186,3,150,75,0,1185,1187,5,135,0,0,1186,1185,1,
        0,0,0,1186,1187,1,0,0,0,1187,1188,1,0,0,0,1188,1189,3,40,20,0,1189,
        149,1,0,0,0,1190,1192,3,260,130,0,1191,1193,5,135,0,0,1192,1191,
        1,0,0,0,1192,1193,1,0,0,0,1193,1194,1,0,0,0,1194,1196,3,264,132,
        0,1195,1197,5,135,0,0,1196,1195,1,0,0,0,1196,1197,1,0,0,0,1197,1199,
        1,0,0,0,1198,1200,3,50,25,0,1199,1198,1,0,0,0,1199,1200,1,0,0,0,
        1200,1202,1,0,0,0,1201,1203,5,135,0,0,1202,1201,1,0,0,0,1202,1203,
        1,0,0,0,1203,1204,1,0,0,0,1204,1206,3,264,132,0,1205,1207,5,135,
        0,0,1206,1205,1,0,0,0,1206,1207,1,0,0,0,1207,1208,1,0,0,0,1208,1209,
        3,262,131,0,1209,1255,1,0,0,0,1210,1212,3,260,130,0,1211,1213,5,
        135,0,0,1212,1211,1,0,0,0,1212,1213,1,0,0,0,1213,1214,1,0,0,0,1214,
        1216,3,264,132,0,1215,1217,5,135,0,0,1216,1215,1,0,0,0,1216,1217,
        1,0,0,0,1217,1219,1,0,0,0,1218,1220,3,50,25,0,1219,1218,1,0,0,0,
        1219,1220,1,0,0,0,1220,1222,1,0,0,0,1221,1223,5,135,0,0,1222,1221,
        1,0,0,0,1222,1223,1,0,0,0,1223,1224,1,0,0,0,1224,1225,3,264,132,
        0,1225,1255,1,0,0,0,1226,1228,3,264,132,0,1227,1229,5,135,0,0,1228,
        1227,1,0,0,0,1228,1229,1,0,0,0,1229,1231,1,0,0,0,1230,1232,3,50,
        25,0,1231,1230,1,0,0,0,1231,1232,1,0,0,0,1232,1234,1,0,0,0,1233,
        1235,5,135,0,0,1234,1233,1,0,0,0,1234,1235,1,0,0,0,1235,1236,1,0,
        0,0,1236,1238,3,264,132,0,1237,1239,5,135,0,0,1238,1237,1,0,0,0,
        1238,1239,1,0,0,0,1239,1240,1,0,0,0,1240,1241,3,262,131,0,1241,1255,
        1,0,0,0,1242,1244,3,264,132,0,1243,1245,5,135,0,0,1244,1243,1,0,
        0,0,1244,1245,1,0,0,0,1245,1247,1,0,0,0,1246,1248,3,50,25,0,1247,
        1246,1,0,0,0,1247,1248,1,0,0,0,1248,1250,1,0,0,0,1249,1251,5,135,
        0,0,1250,1249,1,0,0,0,1250,1251,1,0,0,0,1251,1252,1,0,0,0,1252,1253,
        3,264,132,0,1253,1255,1,0,0,0,1254,1190,1,0,0,0,1254,1210,1,0,0,
        0,1254,1226,1,0,0,0,1254,1242,1,0,0,0,1255,151,1,0,0,0,1256,1259,
        3,252,126,0,1257,1259,3,256,128,0,1258,1256,1,0,0,0,1258,1257,1,
        0,0,0,1259,153,1,0,0,0,1260,1262,5,8,0,0,1261,1263,5,135,0,0,1262,
        1261,1,0,0,0,1262,1263,1,0,0,0,1263,1264,1,0,0,0,1264,1278,3,164,
        82,0,1265,1267,5,135,0,0,1266,1265,1,0,0,0,1266,1267,1,0,0,0,1267,
        1268,1,0,0,0,1268,1270,5,15,0,0,1269,1271,5,8,0,0,1270,1269,1,0,
        0,0,1270,1271,1,0,0,0,1271,1273,1,0,0,0,1272,1274,5,135,0,0,1273,
        1272,1,0,0,0,1273,1274,1,0,0,0,1274,1275,1,0,0,0,1275,1277,3,164,
        82,0,1276,1266,1,0,0,0,1277,1280,1,0,0,0,1278,1276,1,0,0,0,1278,
        1279,1,0,0,0,1279,155,1,0,0,0,1280,1278,1,0,0,0,1281,1288,3,158,
        79,0,1282,1284,5,135,0,0,1283,1282,1,0,0,0,1283,1284,1,0,0,0,1284,
        1285,1,0,0,0,1285,1287,3,158,79,0,1286,1283,1,0,0,0,1287,1290,1,
        0,0,0,1288,1286,1,0,0,0,1288,1289,1,0,0,0,1289,157,1,0,0,0,1290,
        1288,1,0,0,0,1291,1293,5,8,0,0,1292,1294,5,135,0,0,1293,1292,1,0,
        0,0,1293,1294,1,0,0,0,1294,1295,1,0,0,0,1295,1296,3,162,81,0,1296,
        159,1,0,0,0,1297,1299,5,14,0,0,1298,1300,5,135,0,0,1299,1298,1,0,
        0,0,1299,1300,1,0,0,0,1300,1305,1,0,0,0,1301,1303,3,246,123,0,1302,
        1304,5,135,0,0,1303,1302,1,0,0,0,1303,1304,1,0,0,0,1304,1306,1,0,
        0,0,1305,1301,1,0,0,0,1305,1306,1,0,0,0,1306,1317,1,0,0,0,1307,1309,
        5,12,0,0,1308,1310,5,135,0,0,1309,1308,1,0,0,0,1309,1310,1,0,0,0,
        1310,1315,1,0,0,0,1311,1313,3,246,123,0,1312,1314,5,135,0,0,1313,
        1312,1,0,0,0,1313,1314,1,0,0,0,1314,1316,1,0,0,0,1315,1311,1,0,0,
        0,1315,1316,1,0,0,0,1316,1318,1,0,0,0,1317,1307,1,0,0,0,1317,1318,
        1,0,0,0,1318,161,1,0,0,0,1319,1320,3,258,129,0,1320,163,1,0,0,0,
        1321,1322,3,258,129,0,1322,165,1,0,0,0,1323,1328,3,202,101,0,1324,
        1326,5,135,0,0,1325,1324,1,0,0,0,1325,1326,1,0,0,0,1326,1327,1,0,
        0,0,1327,1329,3,200,100,0,1328,1325,1,0,0,0,1329,1330,1,0,0,0,1330,
        1328,1,0,0,0,1330,1331,1,0,0,0,1331,167,1,0,0,0,1332,1333,3,170,
        85,0,1333,169,1,0,0,0,1334,1341,3,172,86,0,1335,1336,5,135,0,0,1336,
        1337,5,83,0,0,1337,1338,5,135,0,0,1338,1340,3,172,86,0,1339,1335,
        1,0,0,0,1340,1343,1,0,0,0,1341,1339,1,0,0,0,1341,1342,1,0,0,0,1342,
        171,1,0,0,0,1343,1341,1,0,0,0,1344,1351,3,174,87,0,1345,1346,5,135,
        0,0,1346,1347,5,84,0,0,1347,1348,5,135,0,0,1348,1350,3,174,87,0,
        1349,1345,1,0,0,0,1350,1353,1,0,0,0,1351,1349,1,0,0,0,1351,1352,
        1,0,0,0,1352,173,1,0,0,0,1353,1351,1,0,0,0,1354,1361,3,176,88,0,
        1355,1356,5,135,0,0,1356,1357,5,85,0,0,1357,1358,5,135,0,0,1358,
        1360,3,176,88,0,1359,1355,1,0,0,0,1360,1363,1,0,0,0,1361,1359,1,
        0,0,0,1361,1362,1,0,0,0,1362,175,1,0,0,0,1363,1361,1,0,0,0,1364,
        1366,5,86,0,0,1365,1367,5,135,0,0,1366,1365,1,0,0,0,1366,1367,1,
        0,0,0,1367,1369,1,0,0,0,1368,1364,1,0,0,0,1369,1372,1,0,0,0,1370,
        1368,1,0,0,0,1370,1371,1,0,0,0,1371,1373,1,0,0,0,1372,1370,1,0,0,
        0,1373,1374,3,178,89,0,1374,177,1,0,0,0,1375,1382,3,52,26,0,1376,
        1378,5,135,0,0,1377,1376,1,0,0,0,1377,1378,1,0,0,0,1378,1379,1,0,
        0,0,1379,1381,3,180,90,0,1380,1377,1,0,0,0,1381,1384,1,0,0,0,1382,
        1380,1,0,0,0,1382,1383,1,0,0,0,1383,179,1,0,0,0,1384,1382,1,0,0,
        0,1385,1387,3,190,95,0,1386,1388,5,135,0,0,1387,1386,1,0,0,0,1387,
        1388,1,0,0,0,1388,1389,1,0,0,0,1389,1390,3,52,26,0,1390,1422,1,0,
        0,0,1391,1393,3,190,95,0,1392,1394,5,135,0,0,1393,1392,1,0,0,0,1393,
        1394,1,0,0,0,1394,1395,1,0,0,0,1395,1396,3,52,26,0,1396,1422,1,0,
        0,0,1397,1399,3,190,95,0,1398,1400,5,135,0,0,1399,1398,1,0,0,0,1399,
        1400,1,0,0,0,1400,1401,1,0,0,0,1401,1402,3,52,26,0,1402,1422,1,0,
        0,0,1403,1405,3,190,95,0,1404,1406,5,135,0,0,1405,1404,1,0,0,0,1405,
        1406,1,0,0,0,1406,1407,1,0,0,0,1407,1408,3,52,26,0,1408,1422,1,0,
        0,0,1409,1411,3,190,95,0,1410,1412,5,135,0,0,1411,1410,1,0,0,0,1411,
        1412,1,0,0,0,1412,1413,1,0,0,0,1413,1414,3,52,26,0,1414,1422,1,0,
        0,0,1415,1417,3,190,95,0,1416,1418,5,135,0,0,1417,1416,1,0,0,0,1417,
        1418,1,0,0,0,1418,1419,1,0,0,0,1419,1420,3,52,26,0,1420,1422,1,0,
        0,0,1421,1385,1,0,0,0,1421,1391,1,0,0,0,1421,1397,1,0,0,0,1421,1403,
        1,0,0,0,1421,1409,1,0,0,0,1421,1415,1,0,0,0,1422,181,1,0,0,0,1423,
        1424,5,135,0,0,1424,1425,5,87,0,0,1425,1426,5,135,0,0,1426,1434,
        5,71,0,0,1427,1428,5,135,0,0,1428,1429,5,88,0,0,1429,1430,5,135,
        0,0,1430,1434,5,71,0,0,1431,1432,5,135,0,0,1432,1434,5,89,0,0,1433,
        1423,1,0,0,0,1433,1427,1,0,0,0,1433,1431,1,0,0,0,1434,1436,1,0,0,
        0,1435,1437,5,135,0,0,1436,1435,1,0,0,0,1436,1437,1,0,0,0,1437,1438,
        1,0,0,0,1438,1439,3,188,94,0,1439,183,1,0,0,0,1440,1441,5,135,0,
        0,1441,1443,5,90,0,0,1442,1444,5,135,0,0,1443,1442,1,0,0,0,1443,
        1444,1,0,0,0,1444,1445,1,0,0,0,1445,1446,3,188,94,0,1446,185,1,0,
        0,0,1447,1448,5,135,0,0,1448,1449,5,91,0,0,1449,1450,5,135,0,0,1450,
        1458,5,92,0,0,1451,1452,5,135,0,0,1452,1453,5,91,0,0,1453,1454,5,
        135,0,0,1454,1455,5,86,0,0,1455,1456,5,135,0,0,1456,1458,5,92,0,
        0,1457,1447,1,0,0,0,1457,1451,1,0,0,0,1458,187,1,0,0,0,1459,1480,
        3,192,96,0,1460,1462,5,135,0,0,1461,1460,1,0,0,0,1461,1462,1,0,0,
        0,1462,1463,1,0,0,0,1463,1465,3,190,95,0,1464,1466,5,135,0,0,1465,
        1464,1,0,0,0,1465,1466,1,0,0,0,1466,1467,1,0,0,0,1467,1468,3,192,
        96,0,1468,1479,1,0,0,0,1469,1471,5,135,0,0,1470,1469,1,0,0,0,1470,
        1471,1,0,0,0,1471,1472,1,0,0,0,1472,1474,3,190,95,0,1473,1475,5,
        135,0,0,1474,1473,1,0,0,0,1474,1475,1,0,0,0,1475,1476,1,0,0,0,1476,
        1477,3,192,96,0,1477,1479,1,0,0,0,1478,1461,1,0,0,0,1478,1470,1,
        0,0,0,1479,1482,1,0,0,0,1480,1478,1,0,0,0,1480,1481,1,0,0,0,1481,
        189,1,0,0,0,1482,1480,1,0,0,0,1483,1484,7,4,0,0,1484,191,1,0,0,0,
        1485,1515,3,194,97,0,1486,1488,5,135,0,0,1487,1486,1,0,0,0,1487,
        1488,1,0,0,0,1488,1489,1,0,0,0,1489,1491,3,190,95,0,1490,1492,5,
        135,0,0,1491,1490,1,0,0,0,1491,1492,1,0,0,0,1492,1493,1,0,0,0,1493,
        1494,3,194,97,0,1494,1514,1,0,0,0,1495,1497,5,135,0,0,1496,1495,
        1,0,0,0,1496,1497,1,0,0,0,1497,1498,1,0,0,0,1498,1500,3,190,95,0,
        1499,1501,5,135,0,0,1500,1499,1,0,0,0,1500,1501,1,0,0,0,1501,1502,
        1,0,0,0,1502,1503,3,194,97,0,1503,1514,1,0,0,0,1504,1506,5,135,0,
        0,1505,1504,1,0,0,0,1505,1506,1,0,0,0,1506,1507,1,0,0,0,1507,1509,
        3,190,95,0,1508,1510,5,135,0,0,1509,1508,1,0,0,0,1509,1510,1,0,0,
        0,1510,1511,1,0,0,0,1511,1512,3,194,97,0,1512,1514,1,0,0,0,1513,
        1487,1,0,0,0,1513,1496,1,0,0,0,1513,1505,1,0,0,0,1514,1517,1,0,0,
        0,1515,1513,1,0,0,0,1515,1516,1,0,0,0,1516,193,1,0,0,0,1517,1515,
        1,0,0,0,1518,1530,3,196,98,0,1519,1521,5,135,0,0,1520,1519,1,0,0,
        0,1520,1521,1,0,0,0,1521,1522,1,0,0,0,1522,1524,3,190,95,0,1523,
        1525,5,135,0,0,1524,1523,1,0,0,0,1524,1525,1,0,0,0,1525,1526,1,0,
        0,0,1526,1527,3,196,98,0,1527,1529,1,0,0,0,1528,1520,1,0,0,0,1529,
        1532,1,0,0,0,1530,1528,1,0,0,0,1530,1531,1,0,0,0,1531,195,1,0,0,
        0,1532,1530,1,0,0,0,1533,1540,3,54,27,0,1534,1536,7,5,0,0,1535,1537,
        5,135,0,0,1536,1535,1,0,0,0,1536,1537,1,0,0,0,1537,1538,1,0,0,0,
        1538,1540,3,54,27,0,1539,1533,1,0,0,0,1539,1534,1,0,0,0,1540,197,
        1,0,0,0,1541,1548,3,202,101,0,1542,1544,5,135,0,0,1543,1542,1,0,
        0,0,1543,1544,1,0,0,0,1544,1545,1,0,0,0,1545,1547,3,200,100,0,1546,
        1543,1,0,0,0,1547,1550,1,0,0,0,1548,1546,1,0,0,0,1548,1549,1,0,0,
        0,1549,1555,1,0,0,0,1550,1548,1,0,0,0,1551,1553,5,135,0,0,1552,1551,
        1,0,0,0,1552,1553,1,0,0,0,1553,1554,1,0,0,0,1554,1556,3,156,78,0,
        1555,1552,1,0,0,0,1555,1556,1,0,0,0,1556,199,1,0,0,0,1557,1559,5,
        1,0,0,1558,1560,5,135,0,0,1559,1558,1,0,0,0,1559,1560,1,0,0,0,1560,
        1561,1,0,0,0,1561,1562,3,254,127,0,1562,201,1,0,0,0,1563,1588,3,
        240,120,0,1564,1588,3,256,128,0,1565,1588,3,204,102,0,1566,1568,
        5,93,0,0,1567,1569,5,135,0,0,1568,1567,1,0,0,0,1568,1569,1,0,0,0,
        1569,1570,1,0,0,0,1570,1572,5,5,0,0,1571,1573,5,135,0,0,1572,1571,
        1,0,0,0,1572,1573,1,0,0,0,1573,1574,1,0,0,0,1574,1576,5,14,0,0,1575,
        1577,5,135,0,0,1576,1575,1,0,0,0,1576,1577,1,0,0,0,1577,1578,1,0,
        0,0,1578,1588,5,6,0,0,1579,1588,3,208,104,0,1580,1588,3,210,105,
        0,1581,1588,3,212,106,0,1582,1588,3,216,108,0,1583,1588,3,218,109,
        0,1584,1588,3,222,111,0,1585,1588,3,226,113,0,1586,1588,3,238,119,
        0,1587,1563,1,0,0,0,1587,1564,1,0,0,0,1587,1565,1,0,0,0,1587,1566,
        1,0,0,0,1587,1579,1,0,0,0,1587,1580,1,0,0,0,1587,1581,1,0,0,0,1587,
        1582,1,0,0,0,1587,1583,1,0,0,0,1587,1584,1,0,0,0,1587,1585,1,0,0,
        0,1587,1586,1,0,0,0,1588,203,1,0,0,0,1589,1594,5,94,0,0,1590,1592,
        5,135,0,0,1591,1590,1,0,0,0,1591,1592,1,0,0,0,1592,1593,1,0,0,0,
        1593,1595,3,206,103,0,1594,1591,1,0,0,0,1595,1596,1,0,0,0,1596,1594,
        1,0,0,0,1596,1597,1,0,0,0,1597,1612,1,0,0,0,1598,1600,5,94,0,0,1599,
        1601,5,135,0,0,1600,1599,1,0,0,0,1600,1601,1,0,0,0,1601,1602,1,0,
        0,0,1602,1607,3,168,84,0,1603,1605,5,135,0,0,1604,1603,1,0,0,0,1604,
        1605,1,0,0,0,1605,1606,1,0,0,0,1606,1608,3,206,103,0,1607,1604,1,
        0,0,0,1608,1609,1,0,0,0,1609,1607,1,0,0,0,1609,1610,1,0,0,0,1610,
        1612,1,0,0,0,1611,1589,1,0,0,0,1611,1598,1,0,0,0,1612,1621,1,0,0,
        0,1613,1615,5,135,0,0,1614,1613,1,0,0,0,1614,1615,1,0,0,0,1615,1616,
        1,0,0,0,1616,1618,5,95,0,0,1617,1619,5,135,0,0,1618,1617,1,0,0,0,
        1618,1619,1,0,0,0,1619,1620,1,0,0,0,1620,1622,3,168,84,0,1621,1614,
        1,0,0,0,1621,1622,1,0,0,0,1622,1624,1,0,0,0,1623,1625,5,135,0,0,
        1624,1623,1,0,0,0,1624,1625,1,0,0,0,1625,1626,1,0,0,0,1626,1627,
        5,96,0,0,1627,205,1,0,0,0,1628,1630,5,97,0,0,1629,1631,5,135,0,0,
        1630,1629,1,0,0,0,1630,1631,1,0,0,0,1631,1632,1,0,0,0,1632,1634,
        3,168,84,0,1633,1635,5,135,0,0,1634,1633,1,0,0,0,1634,1635,1,0,0,
        0,1635,1636,1,0,0,0,1636,1638,5,98,0,0,1637,1639,5,135,0,0,1638,
        1637,1,0,0,0,1638,1639,1,0,0,0,1639,1640,1,0,0,0,1640,1641,3,168,
        84,0,1641,207,1,0,0,0,1642,1644,5,10,0,0,1643,1645,5,135,0,0,1644,
        1643,1,0,0,0,1644,1645,1,0,0,0,1645,1646,1,0,0,0,1646,1655,3,214,
        107,0,1647,1649,5,135,0,0,1648,1647,1,0,0,0,1648,1649,1,0,0,0,1649,
        1650,1,0,0,0,1650,1652,5,15,0,0,1651,1653,5,135,0,0,1652,1651,1,
        0,0,0,1652,1653,1,0,0,0,1653,1654,1,0,0,0,1654,1656,3,168,84,0,1655,
        1648,1,0,0,0,1655,1656,1,0,0,0,1656,1658,1,0,0,0,1657,1659,5,135,
        0,0,1658,1657,1,0,0,0,1658,1659,1,0,0,0,1659,1660,1,0,0,0,1660,1661,
        5,11,0,0,1661,209,1,0,0,0,1662,1664,5,10,0,0,1663,1665,5,135,0,0,
        1664,1663,1,0,0,0,1664,1665,1,0,0,0,1665,1674,1,0,0,0,1666,1668,
        3,238,119,0,1667,1669,5,135,0,0,1668,1667,1,0,0,0,1668,1669,1,0,
        0,0,1669,1670,1,0,0,0,1670,1672,5,2,0,0,1671,1673,5,135,0,0,1672,
        1671,1,0,0,0,1672,1673,1,0,0,0,1673,1675,1,0,0,0,1674,1666,1,0,0,
        0,1674,1675,1,0,0,0,1675,1676,1,0,0,0,1676,1678,3,146,73,0,1677,
        1679,5,135,0,0,1678,1677,1,0,0,0,1678,1679,1,0,0,0,1679,1684,1,0,
        0,0,1680,1682,3,136,68,0,1681,1683,5,135,0,0,1682,1681,1,0,0,0,1682,
        1683,1,0,0,0,1683,1685,1,0,0,0,1684,1680,1,0,0,0,1684,1685,1,0,0,
        0,1685,1686,1,0,0,0,1686,1688,5,15,0,0,1687,1689,5,135,0,0,1688,
        1687,1,0,0,0,1688,1689,1,0,0,0,1689,1690,1,0,0,0,1690,1692,3,168,
        84,0,1691,1693,5,135,0,0,1692,1691,1,0,0,0,1692,1693,1,0,0,0,1693,
        1694,1,0,0,0,1694,1695,5,11,0,0,1695,211,1,0,0,0,1696,1698,5,57,
        0,0,1697,1699,5,135,0,0,1698,1697,1,0,0,0,1698,1699,1,0,0,0,1699,
        1700,1,0,0,0,1700,1702,5,5,0,0,1701,1703,5,135,0,0,1702,1701,1,0,
        0,0,1702,1703,1,0,0,0,1703,1704,1,0,0,0,1704,1706,3,214,107,0,1705,
        1707,5,135,0,0,1706,1705,1,0,0,0,1706,1707,1,0,0,0,1707,1708,1,0,
        0,0,1708,1709,5,6,0,0,1709,1753,1,0,0,0,1710,1712,5,99,0,0,1711,
        1713,5,135,0,0,1712,1711,1,0,0,0,1712,1713,1,0,0,0,1713,1714,1,0,
        0,0,1714,1716,5,5,0,0,1715,1717,5,135,0,0,1716,1715,1,0,0,0,1716,
        1717,1,0,0,0,1717,1718,1,0,0,0,1718,1720,3,214,107,0,1719,1721,5,
        135,0,0,1720,1719,1,0,0,0,1720,1721,1,0,0,0,1721,1722,1,0,0,0,1722,
        1723,5,6,0,0,1723,1753,1,0,0,0,1724,1726,5,100,0,0,1725,1727,5,135,
        0,0,1726,1725,1,0,0,0,1726,1727,1,0,0,0,1727,1728,1,0,0,0,1728,1730,
        5,5,0,0,1729,1731,5,135,0,0,1730,1729,1,0,0,0,1730,1731,1,0,0,0,
        1731,1732,1,0,0,0,1732,1734,3,214,107,0,1733,1735,5,135,0,0,1734,
        1733,1,0,0,0,1734,1735,1,0,0,0,1735,1736,1,0,0,0,1736,1737,5,6,0,
        0,1737,1753,1,0,0,0,1738,1740,5,101,0,0,1739,1741,5,135,0,0,1740,
        1739,1,0,0,0,1740,1741,1,0,0,0,1741,1742,1,0,0,0,1742,1744,5,5,0,
        0,1743,1745,5,135,0,0,1744,1743,1,0,0,0,1744,1745,1,0,0,0,1745,1746,
        1,0,0,0,1746,1748,3,214,107,0,1747,1749,5,135,0,0,1748,1747,1,0,
        0,0,1748,1749,1,0,0,0,1749,1750,1,0,0,0,1750,1751,5,6,0,0,1751,1753,
        1,0,0,0,1752,1696,1,0,0,0,1752,1710,1,0,0,0,1752,1724,1,0,0,0,1752,
        1738,1,0,0,0,1753,213,1,0,0,0,1754,1759,3,220,110,0,1755,1757,5,
        135,0,0,1756,1755,1,0,0,0,1756,1757,1,0,0,0,1757,1758,1,0,0,0,1758,
        1760,3,136,68,0,1759,1756,1,0,0,0,1759,1760,1,0,0,0,1760,215,1,0,
        0,0,1761,1762,3,146,73,0,1762,217,1,0,0,0,1763,1765,5,5,0,0,1764,
        1766,5,135,0,0,1765,1764,1,0,0,0,1765,1766,1,0,0,0,1766,1767,1,0,
        0,0,1767,1769,3,168,84,0,1768,1770,5,135,0,0,1769,1768,1,0,0,0,1769,
        1770,1,0,0,0,1770,1771,1,0,0,0,1771,1772,5,6,0,0,1772,219,1,0,0,
        0,1773,1774,3,238,119,0,1774,1775,5,135,0,0,1775,1776,5,90,0,0,1776,
        1777,5,135,0,0,1777,1778,3,168,84,0,1778,221,1,0,0,0,1779,1781,3,
        224,112,0,1780,1782,5,135,0,0,1781,1780,1,0,0,0,1781,1782,1,0,0,
        0,1782,1783,1,0,0,0,1783,1785,5,5,0,0,1784,1786,5,135,0,0,1785,1784,
        1,0,0,0,1785,1786,1,0,0,0,1786,1791,1,0,0,0,1787,1789,5,73,0,0,1788,
        1790,5,135,0,0,1789,1788,1,0,0,0,1789,1790,1,0,0,0,1790,1792,1,0,
        0,0,1791,1787,1,0,0,0,1791,1792,1,0,0,0,1792,1810,1,0,0,0,1793,1795,
        3,168,84,0,1794,1796,5,135,0,0,1795,1794,1,0,0,0,1795,1796,1,0,0,
        0,1796,1807,1,0,0,0,1797,1799,5,4,0,0,1798,1800,5,135,0,0,1799,1798,
        1,0,0,0,1799,1800,1,0,0,0,1800,1801,1,0,0,0,1801,1803,3,168,84,0,
        1802,1804,5,135,0,0,1803,1802,1,0,0,0,1803,1804,1,0,0,0,1804,1806,
        1,0,0,0,1805,1797,1,0,0,0,1806,1809,1,0,0,0,1807,1805,1,0,0,0,1807,
        1808,1,0,0,0,1808,1811,1,0,0,0,1809,1807,1,0,0,0,1810,1793,1,0,0,
        0,1810,1811,1,0,0,0,1811,1812,1,0,0,0,1812,1813,5,6,0,0,1813,223,
        1,0,0,0,1814,1815,3,236,118,0,1815,1816,3,74,37,0,1816,225,1,0,0,
        0,1817,1819,5,102,0,0,1818,1820,5,135,0,0,1819,1818,1,0,0,0,1819,
        1820,1,0,0,0,1820,1821,1,0,0,0,1821,1823,5,7,0,0,1822,1824,5,135,
        0,0,1823,1822,1,0,0,0,1823,1824,1,0,0,0,1824,1833,1,0,0,0,1825,1834,
        3,82,41,0,1826,1831,3,140,70,0,1827,1829,5,135,0,0,1828,1827,1,0,
        0,0,1828,1829,1,0,0,0,1829,1830,1,0,0,0,1830,1832,3,136,68,0,1831,
        1828,1,0,0,0,1831,1832,1,0,0,0,1832,1834,1,0,0,0,1833,1825,1,0,0,
        0,1833,1826,1,0,0,0,1834,1836,1,0,0,0,1835,1837,5,135,0,0,1836,1835,
        1,0,0,0,1836,1837,1,0,0,0,1837,1838,1,0,0,0,1838,1839,5,9,0,0,1839,
        227,1,0,0,0,1840,1842,3,234,117,0,1841,1843,5,135,0,0,1842,1841,
        1,0,0,0,1842,1843,1,0,0,0,1843,1844,1,0,0,0,1844,1846,5,5,0,0,1845,
        1847,5,135,0,0,1846,1845,1,0,0,0,1846,1847,1,0,0,0,1847,1865,1,0,
        0,0,1848,1850,3,168,84,0,1849,1851,5,135,0,0,1850,1849,1,0,0,0,1850,
        1851,1,0,0,0,1851,1862,1,0,0,0,1852,1854,5,4,0,0,1853,1855,5,135,
        0,0,1854,1853,1,0,0,0,1854,1855,1,0,0,0,1855,1856,1,0,0,0,1856,1858,
        3,168,84,0,1857,1859,5,135,0,0,1858,1857,1,0,0,0,1858,1859,1,0,0,
        0,1859,1861,1,0,0,0,1860,1852,1,0,0,0,1861,1864,1,0,0,0,1862,1860,
        1,0,0,0,1862,1863,1,0,0,0,1863,1866,1,0,0,0,1864,1862,1,0,0,0,1865,
        1848,1,0,0,0,1865,1866,1,0,0,0,1866,1867,1,0,0,0,1867,1868,5,6,0,
        0,1868,229,1,0,0,0,1869,1870,3,234,117,0,1870,231,1,0,0,0,1871,1872,
        3,74,37,0,1872,233,1,0,0,0,1873,1874,3,236,118,0,1874,1875,3,74,
        37,0,1875,235,1,0,0,0,1876,1877,3,74,37,0,1877,1878,5,1,0,0,1878,
        1880,1,0,0,0,1879,1876,1,0,0,0,1880,1883,1,0,0,0,1881,1879,1,0,0,
        0,1881,1882,1,0,0,0,1882,237,1,0,0,0,1883,1881,1,0,0,0,1884,1885,
        3,74,37,0,1885,239,1,0,0,0,1886,1893,3,242,121,0,1887,1893,5,92,
        0,0,1888,1893,3,244,122,0,1889,1893,5,117,0,0,1890,1893,3,250,125,
        0,1891,1893,3,252,126,0,1892,1886,1,0,0,0,1892,1887,1,0,0,0,1892,
        1888,1,0,0,0,1892,1889,1,0,0,0,1892,1890,1,0,0,0,1892,1891,1,0,0,
        0,1893,241,1,0,0,0,1894,1895,7,6,0,0,1895,243,1,0,0,0,1896,1899,
        3,248,124,0,1897,1899,3,246,123,0,1898,1896,1,0,0,0,1898,1897,1,
        0,0,0,1899,245,1,0,0,0,1900,1901,7,7,0,0,1901,247,1,0,0,0,1902,1903,
        7,8,0,0,1903,249,1,0,0,0,1904,1906,5,10,0,0,1905,1907,5,135,0,0,
        1906,1905,1,0,0,0,1906,1907,1,0,0,0,1907,1925,1,0,0,0,1908,1910,
        3,168,84,0,1909,1911,5,135,0,0,1910,1909,1,0,0,0,1910,1911,1,0,0,
        0,1911,1922,1,0,0,0,1912,1914,5,4,0,0,1913,1915,5,135,0,0,1914,1913,
        1,0,0,0,1914,1915,1,0,0,0,1915,1916,1,0,0,0,1916,1918,3,168,84,0,
        1917,1919,5,135,0,0,1918,1917,1,0,0,0,1918,1919,1,0,0,0,1919,1921,
        1,0,0,0,1920,1912,1,0,0,0,1921,1924,1,0,0,0,1922,1920,1,0,0,0,1922,
        1923,1,0,0,0,1923,1926,1,0,0,0,1924,1922,1,0,0,0,1925,1908,1,0,0,
        0,1925,1926,1,0,0,0,1926,1927,1,0,0,0,1927,1928,5,11,0,0,1928,251,
        1,0,0,0,1929,1931,5,7,0,0,1930,1932,5,135,0,0,1931,1930,1,0,0,0,
        1931,1932,1,0,0,0,1932,1966,1,0,0,0,1933,1935,3,254,127,0,1934,1936,
        5,135,0,0,1935,1934,1,0,0,0,1935,1936,1,0,0,0,1936,1937,1,0,0,0,
        1937,1939,5,8,0,0,1938,1940,5,135,0,0,1939,1938,1,0,0,0,1939,1940,
        1,0,0,0,1940,1941,1,0,0,0,1941,1943,3,168,84,0,1942,1944,5,135,0,
        0,1943,1942,1,0,0,0,1943,1944,1,0,0,0,1944,1963,1,0,0,0,1945,1947,
        5,4,0,0,1946,1948,5,135,0,0,1947,1946,1,0,0,0,1947,1948,1,0,0,0,
        1948,1949,1,0,0,0,1949,1951,3,254,127,0,1950,1952,5,135,0,0,1951,
        1950,1,0,0,0,1951,1952,1,0,0,0,1952,1953,1,0,0,0,1953,1955,5,8,0,
        0,1954,1956,5,135,0,0,1955,1954,1,0,0,0,1955,1956,1,0,0,0,1956,1957,
        1,0,0,0,1957,1959,3,168,84,0,1958,1960,5,135,0,0,1959,1958,1,0,0,
        0,1959,1960,1,0,0,0,1960,1962,1,0,0,0,1961,1945,1,0,0,0,1962,1965,
        1,0,0,0,1963,1961,1,0,0,0,1963,1964,1,0,0,0,1964,1967,1,0,0,0,1965,
        1963,1,0,0,0,1966,1933,1,0,0,0,1966,1967,1,0,0,0,1967,1968,1,0,0,
        0,1968,1969,5,9,0,0,1969,253,1,0,0,0,1970,1971,3,258,129,0,1971,
        255,1,0,0,0,1972,1975,5,26,0,0,1973,1976,3,74,37,0,1974,1976,5,106,
        0,0,1975,1973,1,0,0,0,1975,1974,1,0,0,0,1976,257,1,0,0,0,1977,1980,
        3,74,37,0,1978,1980,3,76,38,0,1979,1977,1,0,0,0,1979,1978,1,0,0,
        0,1980,259,1,0,0,0,1981,1982,7,9,0,0,1982,261,1,0,0,0,1983,1984,
        7,10,0,0,1984,263,1,0,0,0,1985,1986,7,11,0,0,1986,265,1,0,0,0,364,
        269,273,277,281,285,287,290,293,301,304,307,311,317,320,327,330,
        335,341,344,349,353,359,363,369,373,379,383,389,393,397,403,406,
        410,416,419,423,427,431,436,443,448,452,456,460,464,469,476,481,
        485,491,497,501,507,513,517,523,527,532,536,540,544,550,554,560,
        564,566,570,572,576,578,582,584,590,594,601,609,612,618,622,624,
        627,631,635,637,641,645,647,651,653,656,660,662,666,668,677,681,
        685,687,691,698,702,706,716,721,724,727,729,732,738,743,753,757,
        761,765,769,772,778,785,789,792,795,803,808,815,820,823,827,831,
        835,841,845,850,855,859,862,864,869,875,879,884,888,893,898,902,
        912,919,932,936,942,946,950,955,962,966,971,978,984,989,995,998,
        1004,1006,1010,1014,1019,1023,1026,1033,1040,1043,1049,1052,1058,
        1062,1066,1070,1074,1079,1084,1088,1093,1096,1105,1114,1119,1132,
        1135,1145,1149,1154,1161,1166,1173,1177,1182,1186,1192,1196,1199,
        1202,1206,1212,1216,1219,1222,1228,1231,1234,1238,1244,1247,1250,
        1254,1258,1262,1266,1270,1273,1278,1283,1288,1293,1299,1303,1305,
        1309,1313,1315,1317,1325,1330,1341,1351,1361,1366,1370,1377,1382,
        1387,1393,1399,1405,1411,1417,1421,1433,1436,1443,1457,1461,1465,
        1470,1474,1478,1480,1487,1491,1496,1500,1505,1509,1513,1515,1520,
        1524,1530,1536,1539,1543,1548,1552,1555,1559,1568,1572,1576,1587,
        1591,1596,1600,1604,1609,1611,1614,1618,1621,1624,1630,1634,1638,
        1644,1648,1652,1655,1658,1664,1668,1672,1674,1678,1682,1684,1688,
        1692,1698,1702,1706,1712,1716,1720,1726,1730,1734,1740,1744,1748,
        1752,1756,1759,1765,1769,1781,1785,1789,1791,1795,1799,1803,1807,
        1810,1819,1823,1828,1831,1833,1836,1842,1846,1850,1854,1858,1862,
        1865,1881,1892,1898,1906,1910,1914,1918,1922,1925,1931,1935,1939,
        1943,1947,1951,1955,1959,1963,1966,1975,1979
    ]

class s_cypherParser ( Parser ):

    grammarFileName = "s_cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "'='", "'+='", "','", "'('", "')'", 
                     "'{'", "':'", "'}'", "'['", "']'", "'..'", "';'", "'*'", 
                     "'|'", "'+'", "'-'", "'/'", "'%'", "'^'", "'<>'", "'<'", 
                     "'<='", "'>'", "'>='", "'$'", "'\\u27E8'", "'\\u3008'", 
                     "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
                     "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", 
                     "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", 
                     "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
                     "'\\uFF0D'", "<INVALID>", "<INVALID>", "'NOW'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "AtT", "PoundValue", "NOW", 
                      "AT_TIME", "SNAPSHOT", "BETWEEN", "SCOPE", "STALE", 
                      "DURING", "OVERLAPS", "UNION", "ALL", "OPTIONAL", 
                      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", 
                      "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", 
                      "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", 
                      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
                      "WHERE", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", 
                      "CONTAINS", "IN", "IS", "NULL", "COUNT", "CASE", "ELSE", 
                      "END", "WHEN", "THEN", "ANY", "NONE", "SINGLE", "EXISTS", 
                      "TRUE", "FALSE", "HexInteger", "DecimalInteger", "OctalInteger", 
                      "HexLetter", "HexDigit", "Digit", "NonZeroDigit", 
                      "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", 
                      "RegularDecimalReal", "StringLiteral", "EscapedChar", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Query = 0
    RULE_oC_Match = 1
    RULE_oC_UpdatingClause = 2
    RULE_oC_SetItem = 3
    RULE_s_SetPropertyItemOne = 4
    RULE_s_SetPropertyItemTwo = 5
    RULE_s_SetValueItem = 6
    RULE_s_SetValueItemExpression = 7
    RULE_s_Stale = 8
    RULE_s_StaleItem = 9
    RULE_oC_Delete = 10
    RULE_s_DeleteItem = 11
    RULE_s_AtTime = 12
    RULE_s_Between = 13
    RULE_s_TimeWindowLimit = 14
    RULE_s_Snapshot = 15
    RULE_s_Scope = 16
    RULE_oC_PatternPart = 17
    RULE_s_PathFunctionPattern = 18
    RULE_s_SinglePathPattern = 19
    RULE_oC_NodePattern = 20
    RULE_s_Properties = 21
    RULE_s_PropertiesPattern = 22
    RULE_s_PropertyNode = 23
    RULE_s_ValueNode = 24
    RULE_oC_RelationshipDetail = 25
    RULE_oC_StringListNullPredicateExpression = 26
    RULE_oC_ListOperatorExpression = 27
    RULE_s_SingleIndexExpression = 28
    RULE_s_DoubleIndexExpression = 29
    RULE_s_LeftExpression = 30
    RULE_s_RightExpression = 31
    RULE_s_AtTExpression = 32
    RULE_oC_PropertyLookupTime = 33
    RULE_s_TimePredicateExpression = 34
    RULE_s_AtTElement = 35
    RULE_s_TimePointLiteral = 36
    RULE_oC_SymbolicName = 37
    RULE_oC_ReservedWord = 38
    RULE_oC_Cypher = 39
    RULE_oC_Statement = 40
    RULE_oC_RegularQuery = 41
    RULE_oC_Union = 42
    RULE_oC_SingleQuery = 43
    RULE_oC_SinglePartQuery = 44
    RULE_oC_MultiPartQuery = 45
    RULE_s_WithPartQuery = 46
    RULE_oC_ReadingClause = 47
    RULE_oC_Unwind = 48
    RULE_oC_Merge = 49
    RULE_oC_MergeAction = 50
    RULE_oC_Create = 51
    RULE_oC_Set = 52
    RULE_oC_Remove = 53
    RULE_oC_RemoveItem = 54
    RULE_oC_InQueryCall = 55
    RULE_oC_StandaloneCall = 56
    RULE_oC_YieldItems = 57
    RULE_oC_YieldItem = 58
    RULE_oC_With = 59
    RULE_oC_Return = 60
    RULE_oC_ProjectionBody = 61
    RULE_oC_ProjectionItems = 62
    RULE_oC_ProjectionItem = 63
    RULE_oC_Order = 64
    RULE_oC_Skip = 65
    RULE_oC_Limit = 66
    RULE_oC_SortItem = 67
    RULE_oC_Where = 68
    RULE_s_WhereExpression = 69
    RULE_oC_Pattern = 70
    RULE_oC_AnonymousPatternPart = 71
    RULE_oC_PatternElement = 72
    RULE_oC_RelationshipsPattern = 73
    RULE_oC_PatternElementChain = 74
    RULE_oC_RelationshipPattern = 75
    RULE_oC_Properties = 76
    RULE_oC_RelationshipTypes = 77
    RULE_oC_NodeLabels = 78
    RULE_oC_NodeLabel = 79
    RULE_oC_RangeLiteral = 80
    RULE_oC_LabelName = 81
    RULE_oC_RelTypeName = 82
    RULE_oC_PropertyExpression = 83
    RULE_oC_Expression = 84
    RULE_oC_OrExpression = 85
    RULE_oC_XorExpression = 86
    RULE_oC_AndExpression = 87
    RULE_oC_NotExpression = 88
    RULE_oC_ComparisonExpression = 89
    RULE_oC_PartialComparisonExpression = 90
    RULE_oC_StringPredicateExpression = 91
    RULE_oC_ListPredicateExpression = 92
    RULE_oC_NullPredicateExpression = 93
    RULE_oC_AddOrSubtractExpression = 94
    RULE_s_operator = 95
    RULE_oC_MultiplyDivideModuloExpression = 96
    RULE_oC_PowerOfExpression = 97
    RULE_oC_UnaryAddOrSubtractExpression = 98
    RULE_oC_PropertyOrLabelsExpression = 99
    RULE_oC_PropertyLookup = 100
    RULE_oC_Atom = 101
    RULE_oC_CaseExpression = 102
    RULE_oC_CaseAlternative = 103
    RULE_oC_ListComprehension = 104
    RULE_oC_PatternComprehension = 105
    RULE_oC_Quantifier = 106
    RULE_oC_FilterExpression = 107
    RULE_oC_PatternPredicate = 108
    RULE_oC_ParenthesizedExpression = 109
    RULE_oC_IdInColl = 110
    RULE_oC_FunctionInvocation = 111
    RULE_oC_FunctionName = 112
    RULE_oC_ExistentialSubquery = 113
    RULE_oC_ExplicitProcedureInvocation = 114
    RULE_oC_ImplicitProcedureInvocation = 115
    RULE_oC_ProcedureResultField = 116
    RULE_oC_ProcedureName = 117
    RULE_oC_Namespace = 118
    RULE_oC_Variable = 119
    RULE_oC_Literal = 120
    RULE_oC_BooleanLiteral = 121
    RULE_oC_NumberLiteral = 122
    RULE_oC_IntegerLiteral = 123
    RULE_oC_DoubleLiteral = 124
    RULE_oC_ListLiteral = 125
    RULE_oC_MapLiteral = 126
    RULE_oC_PropertyKeyName = 127
    RULE_oC_Parameter = 128
    RULE_oC_SchemaName = 129
    RULE_oC_LeftArrowHead = 130
    RULE_oC_RightArrowHead = 131
    RULE_oC_Dash = 132

    ruleNames =  [ "oC_Query", "oC_Match", "oC_UpdatingClause", "oC_SetItem", 
                   "s_SetPropertyItemOne", "s_SetPropertyItemTwo", "s_SetValueItem", 
                   "s_SetValueItemExpression", "s_Stale", "s_StaleItem", 
                   "oC_Delete", "s_DeleteItem", "s_AtTime", "s_Between", 
                   "s_TimeWindowLimit", "s_Snapshot", "s_Scope", "oC_PatternPart", 
                   "s_PathFunctionPattern", "s_SinglePathPattern", "oC_NodePattern", 
                   "s_Properties", "s_PropertiesPattern", "s_PropertyNode", 
                   "s_ValueNode", "oC_RelationshipDetail", "oC_StringListNullPredicateExpression", 
                   "oC_ListOperatorExpression", "s_SingleIndexExpression", 
                   "s_DoubleIndexExpression", "s_LeftExpression", "s_RightExpression", 
                   "s_AtTExpression", "oC_PropertyLookupTime", "s_TimePredicateExpression", 
                   "s_AtTElement", "s_TimePointLiteral", "oC_SymbolicName", 
                   "oC_ReservedWord", "oC_Cypher", "oC_Statement", "oC_RegularQuery", 
                   "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", 
                   "s_WithPartQuery", "oC_ReadingClause", "oC_Unwind", "oC_Merge", 
                   "oC_MergeAction", "oC_Create", "oC_Set", "oC_Remove", 
                   "oC_RemoveItem", "oC_InQueryCall", "oC_StandaloneCall", 
                   "oC_YieldItems", "oC_YieldItem", "oC_With", "oC_Return", 
                   "oC_ProjectionBody", "oC_ProjectionItems", "oC_ProjectionItem", 
                   "oC_Order", "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Where", 
                   "s_WhereExpression", "oC_Pattern", "oC_AnonymousPatternPart", 
                   "oC_PatternElement", "oC_RelationshipsPattern", "oC_PatternElementChain", 
                   "oC_RelationshipPattern", "oC_Properties", "oC_RelationshipTypes", 
                   "oC_NodeLabels", "oC_NodeLabel", "oC_RangeLiteral", "oC_LabelName", 
                   "oC_RelTypeName", "oC_PropertyExpression", "oC_Expression", 
                   "oC_OrExpression", "oC_XorExpression", "oC_AndExpression", 
                   "oC_NotExpression", "oC_ComparisonExpression", "oC_PartialComparisonExpression", 
                   "oC_StringPredicateExpression", "oC_ListPredicateExpression", 
                   "oC_NullPredicateExpression", "oC_AddOrSubtractExpression", 
                   "s_operator", "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", 
                   "oC_UnaryAddOrSubtractExpression", "oC_PropertyOrLabelsExpression", 
                   "oC_PropertyLookup", "oC_Atom", "oC_CaseExpression", 
                   "oC_CaseAlternative", "oC_ListComprehension", "oC_PatternComprehension", 
                   "oC_Quantifier", "oC_FilterExpression", "oC_PatternPredicate", 
                   "oC_ParenthesizedExpression", "oC_IdInColl", "oC_FunctionInvocation", 
                   "oC_FunctionName", "oC_ExistentialSubquery", "oC_ExplicitProcedureInvocation", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_Variable", "oC_Literal", 
                   "oC_BooleanLiteral", "oC_NumberLiteral", "oC_IntegerLiteral", 
                   "oC_DoubleLiteral", "oC_ListLiteral", "oC_MapLiteral", 
                   "oC_PropertyKeyName", "oC_Parameter", "oC_SchemaName", 
                   "oC_LeftArrowHead", "oC_RightArrowHead", "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    AtT=46
    PoundValue=47
    NOW=48
    AT_TIME=49
    SNAPSHOT=50
    BETWEEN=51
    SCOPE=52
    STALE=53
    DURING=54
    OVERLAPS=55
    UNION=56
    ALL=57
    OPTIONAL=58
    MATCH=59
    UNWIND=60
    AS=61
    MERGE=62
    ON=63
    CREATE=64
    SET=65
    DETACH=66
    DELETE=67
    REMOVE=68
    CALL=69
    YIELD=70
    WITH=71
    RETURN=72
    DISTINCT=73
    ORDER=74
    BY=75
    L_SKIP=76
    LIMIT=77
    ASCENDING=78
    ASC=79
    DESCENDING=80
    DESC=81
    WHERE=82
    OR=83
    XOR=84
    AND=85
    NOT=86
    STARTS=87
    ENDS=88
    CONTAINS=89
    IN=90
    IS=91
    NULL=92
    COUNT=93
    CASE=94
    ELSE=95
    END=96
    WHEN=97
    THEN=98
    ANY=99
    NONE=100
    SINGLE=101
    EXISTS=102
    TRUE=103
    FALSE=104
    HexInteger=105
    DecimalInteger=106
    OctalInteger=107
    HexLetter=108
    HexDigit=109
    Digit=110
    NonZeroDigit=111
    NonZeroOctDigit=112
    OctDigit=113
    ZeroDigit=114
    ExponentDecimalReal=115
    RegularDecimalReal=116
    StringLiteral=117
    EscapedChar=118
    CONSTRAINT=119
    DO=120
    FOR=121
    REQUIRE=122
    UNIQUE=123
    MANDATORY=124
    SCALAR=125
    OF=126
    ADD=127
    DROP=128
    FILTER=129
    EXTRACT=130
    UnescapedSymbolicName=131
    IdentifierStart=132
    IdentifierPart=133
    EscapedSymbolicName=134
    SP=135
    WHITESPACE=136
    Comment=137

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StandaloneCallContext,0)


        def s_TimeWindowLimit(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimeWindowLimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = s_cypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Query)
        try:
            self.state = 269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 266
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 267
                self.oC_StandaloneCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 268
                self.s_TimeWindowLimit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = s_cypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 271
                self.match(s_cypherParser.OPTIONAL)
                self.state = 272
                self.match(s_cypherParser.SP)


            self.state = 275
            self.match(s_cypherParser.MATCH)
            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 276
                self.match(s_cypherParser.SP)


            self.state = 279
            self.oC_Pattern()
            self.state = 287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 280
                    self.match(s_cypherParser.SP)


                self.state = 285
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 283
                    self.s_AtTime()
                    pass
                elif token in [51]:
                    self.state = 284
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 289
                    self.match(s_cypherParser.SP)


                self.state = 292
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Create(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CreateContext,0)


        def oC_Merge(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MergeContext,0)


        def oC_Delete(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DeleteContext,0)


        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RemoveContext,0)


        def s_Stale(self):
            return self.getTypedRuleContext(s_cypherParser.S_StaleContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = s_cypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_UpdatingClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 301
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.state = 295
                self.oC_Create()
                pass
            elif token in [62]:
                self.state = 296
                self.oC_Merge()
                pass
            elif token in [66, 67]:
                self.state = 297
                self.oC_Delete()
                pass
            elif token in [65]:
                self.state = 298
                self.oC_Set()
                pass
            elif token in [68]:
                self.state = 299
                self.oC_Remove()
                pass
            elif token in [53]:
                self.state = 300
                self.s_Stale()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 303
                    self.match(s_cypherParser.SP)


                self.state = 306
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_SetPropertyItemOne(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemOneContext,0)


        def s_SetPropertyItemTwo(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemTwoContext,0)


        def s_SetValueItem(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetValueItemContext,0)


        def s_SetValueItemExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetValueItemExpressionContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = s_cypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 309
                self.oC_Variable()
                self.state = 311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 310
                    self.match(s_cypherParser.SP)


                self.state = 313
                self.s_AtTElement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 315
                self.oC_Variable()
                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 317
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 316
                        self.match(s_cypherParser.SP)


                    self.state = 319
                    self.s_AtTElement()


                self.state = 322
                self.match(s_cypherParser.T__0)
                self.state = 323
                self.s_SetPropertyItemOne()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 325
                self.oC_Variable()
                self.state = 330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 327
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 326
                        self.match(s_cypherParser.SP)


                    self.state = 329
                    self.s_AtTElement()


                self.state = 332
                self.match(s_cypherParser.T__0)
                self.state = 333
                self.s_SetPropertyItemTwo()
                self.state = 335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 334
                    self.match(s_cypherParser.SP)


                self.state = 337
                self.s_SetValueItem()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 339
                self.oC_Variable()
                self.state = 344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 341
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 340
                        self.match(s_cypherParser.SP)


                    self.state = 343
                    self.s_AtTElement()


                self.state = 346
                self.match(s_cypherParser.T__0)
                self.state = 347
                self.s_SetPropertyItemTwo()
                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 348
                    self.match(s_cypherParser.SP)


                self.state = 351
                self.match(s_cypherParser.T__1)
                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 352
                    self.match(s_cypherParser.SP)


                self.state = 355
                self.s_SetValueItemExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 357
                self.oC_PropertyExpression()
                self.state = 359
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 358
                    self.match(s_cypherParser.SP)


                self.state = 361
                self.match(s_cypherParser.T__1)
                self.state = 363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 362
                    self.match(s_cypherParser.SP)


                self.state = 365
                self.oC_Expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 367
                self.oC_Variable()
                self.state = 369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 368
                    self.match(s_cypherParser.SP)


                self.state = 371
                self.match(s_cypherParser.T__1)
                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 372
                    self.match(s_cypherParser.SP)


                self.state = 375
                self.oC_Expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 377
                self.oC_Variable()
                self.state = 379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 378
                    self.match(s_cypherParser.SP)


                self.state = 381
                self.match(s_cypherParser.T__2)
                self.state = 383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 382
                    self.match(s_cypherParser.SP)


                self.state = 385
                self.oC_Expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 387
                self.oC_Variable()
                self.state = 389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 388
                    self.match(s_cypherParser.SP)


                self.state = 391
                self.oC_NodeLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemOneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemOne

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemOne" ):
                listener.enterS_SetPropertyItemOne(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemOne" ):
                listener.exitS_SetPropertyItemOne(self)




    def s_SetPropertyItemOne(self):

        localctx = s_cypherParser.S_SetPropertyItemOneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_s_SetPropertyItemOne)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self.oC_PropertyKeyName()
            self.state = 397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 396
                self.match(s_cypherParser.SP)


            self.state = 399
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemTwoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemTwo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemTwo" ):
                listener.enterS_SetPropertyItemTwo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemTwo" ):
                listener.exitS_SetPropertyItemTwo(self)




    def s_SetPropertyItemTwo(self):

        localctx = s_cypherParser.S_SetPropertyItemTwoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_s_SetPropertyItemTwo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.oC_PropertyKeyName()
            self.state = 406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 402
                    self.match(s_cypherParser.SP)


                self.state = 405
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetValueItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetValueItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetValueItem" ):
                listener.enterS_SetValueItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetValueItem" ):
                listener.exitS_SetValueItem(self)




    def s_SetValueItem(self):

        localctx = s_cypherParser.S_SetValueItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_s_SetValueItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.match(s_cypherParser.PoundValue)
            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 409
                self.match(s_cypherParser.SP)


            self.state = 412
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetValueItemExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetValueItemExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetValueItemExpression" ):
                listener.enterS_SetValueItemExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetValueItemExpression" ):
                listener.exitS_SetValueItemExpression(self)




    def s_SetValueItemExpression(self):

        localctx = s_cypherParser.S_SetValueItemExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_s_SetValueItemExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.oC_Expression()
            self.state = 419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 415
                    self.match(s_cypherParser.SP)


                self.state = 418
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def s_StaleItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StaleItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StaleItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Stale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Stale" ):
                listener.enterS_Stale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Stale" ):
                listener.exitS_Stale(self)




    def s_Stale(self):

        localctx = s_cypherParser.S_StaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_s_Stale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.match(s_cypherParser.STALE)
            self.state = 423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 422
                self.match(s_cypherParser.SP)


            self.state = 425
            self.s_StaleItem()
            self.state = 436
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 427
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 426
                        self.match(s_cypherParser.SP)


                    self.state = 429
                    self.match(s_cypherParser.T__3)
                    self.state = 431
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 430
                        self.match(s_cypherParser.SP)


                    self.state = 433
                    self.s_StaleItem() 
                self.state = 438
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StaleItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StaleItem" ):
                listener.enterS_StaleItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StaleItem" ):
                listener.exitS_StaleItem(self)




    def s_StaleItem(self):

        localctx = s_cypherParser.S_StaleItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_s_StaleItem)
        self._la = 0 # Token type
        try:
            self.state = 448
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 439
                self.oC_Expression()
                self.state = 440
                self.match(s_cypherParser.T__0)
                self.state = 441
                self.oC_PropertyKeyName()
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 442
                    self.match(s_cypherParser.SP)


                self.state = 445
                self.match(s_cypherParser.PoundValue)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 447
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def s_DeleteItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DeleteItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DeleteItemContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = s_cypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 450
                self.match(s_cypherParser.DETACH)
                self.state = 451
                self.match(s_cypherParser.SP)


            self.state = 454
            self.match(s_cypherParser.DELETE)
            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 455
                self.match(s_cypherParser.SP)


            self.state = 458
            self.s_DeleteItem()
            self.state = 469
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 460
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 459
                        self.match(s_cypherParser.SP)


                    self.state = 462
                    self.match(s_cypherParser.T__3)
                    self.state = 464
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 463
                        self.match(s_cypherParser.SP)


                    self.state = 466
                    self.s_DeleteItem() 
                self.state = 471
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DeleteItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DeleteItem" ):
                listener.enterS_DeleteItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DeleteItem" ):
                listener.exitS_DeleteItem(self)




    def s_DeleteItem(self):

        localctx = s_cypherParser.S_DeleteItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_s_DeleteItem)
        self._la = 0 # Token type
        try:
            self.state = 481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 472
                self.oC_Expression()
                self.state = 473
                self.match(s_cypherParser.T__0)
                self.state = 474
                self.oC_PropertyKeyName()
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 475
                    self.match(s_cypherParser.SP)


                self.state = 478
                self.match(s_cypherParser.PoundValue)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 480
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTime" ):
                listener.enterS_AtTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTime" ):
                listener.exitS_AtTime(self)




    def s_AtTime(self):

        localctx = s_cypherParser.S_AtTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_s_AtTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.match(s_cypherParser.AT_TIME)
            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 484
                self.match(s_cypherParser.SP)


            self.state = 487
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_BetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Between

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Between" ):
                listener.enterS_Between(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Between" ):
                listener.exitS_Between(self)




    def s_Between(self):

        localctx = s_cypherParser.S_BetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_s_Between)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.match(s_cypherParser.BETWEEN)
            self.state = 491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 490
                self.match(s_cypherParser.SP)


            self.state = 493
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimeWindowLimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_Snapshot(self):
            return self.getTypedRuleContext(s_cypherParser.S_SnapshotContext,0)


        def s_Scope(self):
            return self.getTypedRuleContext(s_cypherParser.S_ScopeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimeWindowLimit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimeWindowLimit" ):
                listener.enterS_TimeWindowLimit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimeWindowLimit" ):
                listener.exitS_TimeWindowLimit(self)




    def s_TimeWindowLimit(self):

        localctx = s_cypherParser.S_TimeWindowLimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_s_TimeWindowLimit)
        try:
            self.state = 497
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 495
                self.s_Snapshot()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 496
                self.s_Scope()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SnapshotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Snapshot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Snapshot" ):
                listener.enterS_Snapshot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Snapshot" ):
                listener.exitS_Snapshot(self)




    def s_Snapshot(self):

        localctx = s_cypherParser.S_SnapshotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_s_Snapshot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self.match(s_cypherParser.SNAPSHOT)
            self.state = 501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 500
                self.match(s_cypherParser.SP)


            self.state = 503
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Scope" ):
                listener.enterS_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Scope" ):
                listener.exitS_Scope(self)




    def s_Scope(self):

        localctx = s_cypherParser.S_ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_s_Scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.match(s_cypherParser.SCOPE)
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 506
                self.match(s_cypherParser.SP)


            self.state = 509
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_PathFunctionPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PathFunctionPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AnonymousPatternPartContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = s_cypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 532
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 511
                self.oC_Variable()
                self.state = 513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 512
                    self.match(s_cypherParser.SP)


                self.state = 515
                self.match(s_cypherParser.T__1)
                self.state = 517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 516
                    self.match(s_cypherParser.SP)


                self.state = 519
                self.s_PathFunctionPattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 521
                self.oC_Variable()
                self.state = 523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 522
                    self.match(s_cypherParser.SP)


                self.state = 525
                self.match(s_cypherParser.T__1)
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 526
                    self.match(s_cypherParser.SP)


                self.state = 529
                self.oC_AnonymousPatternPart()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 531
                self.oC_AnonymousPatternPart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PathFunctionPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def s_SinglePathPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_SinglePathPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PathFunctionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PathFunctionPattern" ):
                listener.enterS_PathFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PathFunctionPattern" ):
                listener.exitS_PathFunctionPattern(self)




    def s_PathFunctionPattern(self):

        localctx = s_cypherParser.S_PathFunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_s_PathFunctionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.oC_FunctionName()
            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 535
                self.match(s_cypherParser.SP)


            self.state = 538
            self.match(s_cypherParser.T__4)
            self.state = 540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 539
                self.match(s_cypherParser.SP)


            self.state = 542
            self.s_SinglePathPattern()
            self.state = 544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 543
                self.match(s_cypherParser.SP)


            self.state = 546
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SinglePathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodePatternContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,i)


        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SinglePathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SinglePathPattern" ):
                listener.enterS_SinglePathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SinglePathPattern" ):
                listener.exitS_SinglePathPattern(self)




    def s_SinglePathPattern(self):

        localctx = s_cypherParser.S_SinglePathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_s_SinglePathPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self.oC_NodePattern()
            self.state = 550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 549
                self.match(s_cypherParser.SP)


            self.state = 552
            self.oC_RelationshipPattern()
            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 553
                self.match(s_cypherParser.SP)


            self.state = 556
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def s_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = s_cypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.match(s_cypherParser.T__4)
            self.state = 560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 559
                self.match(s_cypherParser.SP)


            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 562
                self.oC_Variable()
                self.state = 564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 563
                    self.match(s_cypherParser.SP)




            self.state = 572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 568
                self.oC_NodeLabels()
                self.state = 570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 569
                    self.match(s_cypherParser.SP)




            self.state = 578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 574
                self.s_AtTElement()
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 575
                    self.match(s_cypherParser.SP)




            self.state = 584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==26:
                self.state = 580
                self.s_Properties()
                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 581
                    self.match(s_cypherParser.SP)




            self.state = 586
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertiesPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesPatternContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Properties" ):
                listener.enterS_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Properties" ):
                listener.exitS_Properties(self)




    def s_Properties(self):

        localctx = s_cypherParser.S_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_s_Properties)
        try:
            self.state = 590
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 588
                self.s_PropertiesPattern()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 589
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_PropertyNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PropertyNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PropertyNodeContext,i)


        def s_ValueNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ValueNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ValueNodeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertiesPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertiesPattern" ):
                listener.enterS_PropertiesPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertiesPattern" ):
                listener.exitS_PropertiesPattern(self)




    def s_PropertiesPattern(self):

        localctx = s_cypherParser.S_PropertiesPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_s_PropertiesPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(s_cypherParser.T__6)
            self.state = 594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 593
                self.match(s_cypherParser.SP)


            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 596
                self.s_PropertyNode()
                self.state = 597
                self.match(s_cypherParser.T__7)
                self.state = 598
                self.s_ValueNode()
                self.state = 609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 599
                    self.match(s_cypherParser.T__3)
                    self.state = 601
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 600
                        self.match(s_cypherParser.SP)


                    self.state = 603
                    self.s_PropertyNode()
                    self.state = 604
                    self.match(s_cypherParser.T__7)
                    self.state = 605
                    self.s_ValueNode()
                    self.state = 611
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 614
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyNode" ):
                listener.enterS_PropertyNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyNode" ):
                listener.exitS_PropertyNode(self)




    def s_PropertyNode(self):

        localctx = s_cypherParser.S_PropertyNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_s_PropertyNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self.oC_PropertyKeyName()
            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 617
                self.match(s_cypherParser.SP)


            self.state = 624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 620
                self.s_AtTElement()
                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 621
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ValueNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ValueNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ValueNode" ):
                listener.enterS_ValueNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ValueNode" ):
                listener.exitS_ValueNode(self)




    def s_ValueNode(self):

        localctx = s_cypherParser.S_ValueNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_s_ValueNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 626
                self.match(s_cypherParser.SP)


            self.state = 629
            self.oC_Expression()
            self.state = 631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 630
                self.match(s_cypherParser.SP)


            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 633
                self.s_AtTElement()
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 634
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RangeLiteralContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = s_cypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.match(s_cypherParser.T__9)
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 640
                self.match(s_cypherParser.SP)


            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 643
                self.oC_Variable()
                self.state = 645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 644
                    self.match(s_cypherParser.SP)




            self.state = 653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 649
                self.oC_RelationshipTypes()
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 650
                    self.match(s_cypherParser.SP)




            self.state = 656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 655
                self.oC_RangeLiteral()


            self.state = 662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 658
                self.s_AtTElement()
                self.state = 660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 659
                    self.match(s_cypherParser.SP)




            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==26:
                self.state = 664
                self.oC_Properties()
                self.state = 666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 665
                    self.match(s_cypherParser.SP)




            self.state = 670
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def s_TimePredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateExpressionContext,0)


        def oC_StringPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringPredicateExpressionContext,0)


        def oC_ListPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListPredicateExpressionContext,0)


        def oC_NullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NullPredicateExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringListNullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullPredicateExpression" ):
                listener.enterOC_StringListNullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullPredicateExpression" ):
                listener.exitOC_StringListNullPredicateExpression(self)




    def oC_StringListNullPredicateExpression(self):

        localctx = s_cypherParser.OC_StringListNullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_oC_StringListNullPredicateExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.oC_AddOrSubtractExpression()
            self.state = 677
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 673
                self.s_TimePredicateExpression()

            elif la_ == 2:
                self.state = 674
                self.oC_StringPredicateExpression()

            elif la_ == 3:
                self.state = 675
                self.oC_ListPredicateExpression()

            elif la_ == 4:
                self.state = 676
                self.oC_NullPredicateExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def s_AtTExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTExpressionContext,0)


        def s_SingleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_SingleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_SingleIndexExpressionContext,i)


        def s_DoubleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DoubleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DoubleIndexExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = s_cypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_oC_ListOperatorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 679
                self.oC_PropertyOrLabelsExpression()
                pass

            elif la_ == 2:
                self.state = 680
                self.s_AtTExpression()
                pass


            self.state = 687
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 685
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                    if la_ == 1:
                        self.state = 683
                        self.s_SingleIndexExpression()
                        pass

                    elif la_ == 2:
                        self.state = 684
                        self.s_DoubleIndexExpression()
                        pass

             
                self.state = 689
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SingleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SingleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SingleIndexExpression" ):
                listener.enterS_SingleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SingleIndexExpression" ):
                listener.exitS_SingleIndexExpression(self)




    def s_SingleIndexExpression(self):

        localctx = s_cypherParser.S_SingleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_s_SingleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 690
                self.match(s_cypherParser.SP)


            self.state = 693
            self.match(s_cypherParser.T__9)
            self.state = 694
            self.s_LeftExpression()
            self.state = 695
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DoubleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def s_RightExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_RightExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DoubleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DoubleIndexExpression" ):
                listener.enterS_DoubleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DoubleIndexExpression" ):
                listener.exitS_DoubleIndexExpression(self)




    def s_DoubleIndexExpression(self):

        localctx = s_cypherParser.S_DoubleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_s_DoubleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 697
                self.match(s_cypherParser.SP)


            self.state = 700
            self.match(s_cypherParser.T__9)
            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119873184) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 701
                self.s_LeftExpression()


            self.state = 704
            self.match(s_cypherParser.T__11)
            self.state = 706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119873184) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 705
                self.s_RightExpression()


            self.state = 708
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_LeftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_LeftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_LeftExpression" ):
                listener.enterS_LeftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_LeftExpression" ):
                listener.exitS_LeftExpression(self)




    def s_LeftExpression(self):

        localctx = s_cypherParser.S_LeftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_s_LeftExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_RightExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_RightExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_RightExpression" ):
                listener.enterS_RightExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_RightExpression" ):
                listener.exitS_RightExpression(self)




    def s_RightExpression(self):

        localctx = s_cypherParser.S_RightExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_s_RightExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookupTime(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupTimeContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTExpression" ):
                listener.enterS_AtTExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTExpression" ):
                listener.exitS_AtTExpression(self)




    def s_AtTExpression(self):

        localctx = s_cypherParser.S_AtTExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_s_AtTExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.oC_Atom()
            self.state = 729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 719 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 716
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 715
                            self.match(s_cypherParser.SP)


                        self.state = 718
                        self.oC_PropertyLookup()

                    else:
                        raise NoViableAltException(self)
                    self.state = 721 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

                self.state = 727
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 724
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 723
                        self.match(s_cypherParser.SP)


                    self.state = 726
                    self.match(s_cypherParser.PoundValue)




            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 731
                self.match(s_cypherParser.SP)


            self.state = 734
            self.oC_PropertyLookupTime()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookupTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookupTime" ):
                listener.enterOC_PropertyLookupTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookupTime" ):
                listener.exitOC_PropertyLookupTime(self)




    def oC_PropertyLookupTime(self):

        localctx = s_cypherParser.OC_PropertyLookupTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_oC_PropertyLookupTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 736
            self.match(s_cypherParser.AtT)
            self.state = 743
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 738
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 737
                        self.match(s_cypherParser.SP)


                    self.state = 740
                    self.oC_PropertyLookup() 
                self.state = 745
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateExpression" ):
                listener.enterS_TimePredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateExpression" ):
                listener.exitS_TimePredicateExpression(self)




    def s_TimePredicateExpression(self):

        localctx = s_cypherParser.S_TimePredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_s_TimePredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(s_cypherParser.SP)
            self.state = 747
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 748
            self.match(s_cypherParser.SP)
            self.state = 749
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_TimePointLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_TimePointLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_TimePointLiteralContext,i)


        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTElement" ):
                listener.enterS_AtTElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTElement" ):
                listener.exitS_AtTElement(self)




    def s_AtTElement(self):

        localctx = s_cypherParser.S_AtTElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_s_AtTElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.match(s_cypherParser.AtT)
            self.state = 753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 752
                self.match(s_cypherParser.SP)


            self.state = 755
            self.match(s_cypherParser.T__4)
            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 756
                self.match(s_cypherParser.SP)


            self.state = 759
            self.s_TimePointLiteral()
            self.state = 761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 760
                self.match(s_cypherParser.SP)


            self.state = 763
            self.match(s_cypherParser.T__3)
            self.state = 765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 764
                self.match(s_cypherParser.SP)


            self.state = 769
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 117]:
                self.state = 767
                self.s_TimePointLiteral()
                pass
            elif token in [48]:
                self.state = 768
                self.match(s_cypherParser.NOW)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 771
                self.match(s_cypherParser.SP)


            self.state = 774
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePointLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePointLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePointLiteral" ):
                listener.enterS_TimePointLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePointLiteral" ):
                listener.exitS_TimePointLiteral(self)




    def s_TimePointLiteral(self):

        localctx = s_cypherParser.S_TimePointLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_s_TimePointLiteral)
        try:
            self.state = 778
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 776
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 777
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(s_cypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(s_cypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(s_cypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(s_cypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(s_cypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = s_cypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            _la = self._input.LA(1)
            if not(_la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(s_cypherParser.AND, 0)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def OR(self):
            return self.getToken(s_cypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(s_cypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(s_cypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(s_cypherParser.DO, 0)

        def FOR(self):
            return self.getToken(s_cypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(s_cypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(s_cypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(s_cypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(s_cypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(s_cypherParser.OF, 0)

        def ADD(self):
            return self.getToken(s_cypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(s_cypherParser.DROP, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = s_cypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            _la = self._input.LA(1)
            if not(((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 128317405001678847) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(s_cypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = s_cypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 784
                self.match(s_cypherParser.SP)


            self.state = 787
            self.oC_Statement()
            self.state = 792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 788
                    self.match(s_cypherParser.SP)


                self.state = 791
                self.match(s_cypherParser.T__12)


            self.state = 795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 794
                self.match(s_cypherParser.SP)


            self.state = 797
            self.match(s_cypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = s_cypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = s_cypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.oC_SingleQuery()
            self.state = 808
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 803
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 802
                        self.match(s_cypherParser.SP)


                    self.state = 805
                    self.oC_Union() 
                self.state = 810
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = s_cypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 823
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 811
                self.match(s_cypherParser.UNION)
                self.state = 812
                self.match(s_cypherParser.SP)
                self.state = 813
                self.match(s_cypherParser.ALL)
                self.state = 815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 814
                    self.match(s_cypherParser.SP)


                self.state = 817
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 818
                self.match(s_cypherParser.UNION)
                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 819
                    self.match(s_cypherParser.SP)


                self.state = 822
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = s_cypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_oC_SingleQuery)
        try:
            self.state = 827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 825
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 826
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = s_cypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 864
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 829
                    self.oC_ReadingClause()
                    self.state = 831
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 830
                        self.match(s_cypherParser.SP)


                    self.state = 837
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 838
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 839
                    self.oC_ReadingClause()
                    self.state = 841
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 840
                        self.match(s_cypherParser.SP)


                    self.state = 847
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 848
                self.oC_UpdatingClause()
                self.state = 855
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,132,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 850
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 849
                            self.match(s_cypherParser.SP)


                        self.state = 852
                        self.oC_UpdatingClause() 
                    self.state = 857
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,132,self._ctx)

                self.state = 862
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                if la_ == 1:
                    self.state = 859
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 858
                        self.match(s_cypherParser.SP)


                    self.state = 861
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def s_WithPartQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_WithPartQueryContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_WithPartQueryContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = s_cypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_oC_MultiPartQuery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 866
                    self.s_WithPartQuery()

                else:
                    raise NoViableAltException(self)
                self.state = 869 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

            self.state = 871
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_With(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WithContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_WithPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_WithPartQuery" ):
                listener.enterS_WithPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_WithPartQuery" ):
                listener.exitS_WithPartQuery(self)




    def s_WithPartQuery(self):

        localctx = s_cypherParser.S_WithPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_s_WithPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                self.state = 873
                self.oC_ReadingClause()
                self.state = 875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 874
                    self.match(s_cypherParser.SP)


                self.state = 881
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64001) != 0):
                self.state = 882
                self.oC_UpdatingClause()
                self.state = 884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 883
                    self.match(s_cypherParser.SP)


                self.state = 890
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 891
            self.oC_With()
            self.state = 893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 892
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(s_cypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = s_cypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_oC_ReadingClause)
        try:
            self.state = 898
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 895
                self.oC_Match()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 896
                self.oC_Unwind()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 897
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = s_cypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.match(s_cypherParser.UNWIND)
            self.state = 902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 901
                self.match(s_cypherParser.SP)


            self.state = 904
            self.oC_Expression()
            self.state = 905
            self.match(s_cypherParser.SP)
            self.state = 906
            self.match(s_cypherParser.AS)
            self.state = 907
            self.match(s_cypherParser.SP)
            self.state = 908
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = s_cypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.match(s_cypherParser.MERGE)
            self.state = 912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 911
                self.match(s_cypherParser.SP)


            self.state = 914
            self.oC_PatternPart()
            self.state = 919
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 915
                    self.match(s_cypherParser.SP)
                    self.state = 916
                    self.oC_MergeAction() 
                self.state = 921
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = s_cypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_oC_MergeAction)
        try:
            self.state = 932
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 922
                self.match(s_cypherParser.ON)
                self.state = 923
                self.match(s_cypherParser.SP)
                self.state = 924
                self.match(s_cypherParser.MATCH)
                self.state = 925
                self.match(s_cypherParser.SP)
                self.state = 926
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 927
                self.match(s_cypherParser.ON)
                self.state = 928
                self.match(s_cypherParser.SP)
                self.state = 929
                self.match(s_cypherParser.CREATE)
                self.state = 930
                self.match(s_cypherParser.SP)
                self.state = 931
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = s_cypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self.match(s_cypherParser.CREATE)
            self.state = 936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 935
                self.match(s_cypherParser.SP)


            self.state = 938
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = s_cypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.match(s_cypherParser.SET)
            self.state = 942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 941
                self.match(s_cypherParser.SP)


            self.state = 944
            self.oC_SetItem()
            self.state = 955
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 946
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 945
                        self.match(s_cypherParser.SP)


                    self.state = 948
                    self.match(s_cypherParser.T__3)
                    self.state = 950
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 949
                        self.match(s_cypherParser.SP)


                    self.state = 952
                    self.oC_SetItem() 
                self.state = 957
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = s_cypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self.match(s_cypherParser.REMOVE)
            self.state = 959
            self.match(s_cypherParser.SP)
            self.state = 960
            self.oC_RemoveItem()
            self.state = 971
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 962
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 961
                        self.match(s_cypherParser.SP)


                    self.state = 964
                    self.match(s_cypherParser.T__3)
                    self.state = 966
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 965
                        self.match(s_cypherParser.SP)


                    self.state = 968
                    self.oC_RemoveItem() 
                self.state = 973
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = s_cypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_oC_RemoveItem)
        try:
            self.state = 978
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 974
                self.oC_Variable()
                self.state = 975
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 977
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = s_cypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            self.match(s_cypherParser.CALL)
            self.state = 981
            self.match(s_cypherParser.SP)
            self.state = 982
            self.oC_ExplicitProcedureInvocation()
            self.state = 989
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.state = 984
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 983
                    self.match(s_cypherParser.SP)


                self.state = 986
                self.match(s_cypherParser.YIELD)
                self.state = 987
                self.match(s_cypherParser.SP)
                self.state = 988
                self.oC_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = s_cypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_oC_StandaloneCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.match(s_cypherParser.CALL)
            self.state = 992
            self.match(s_cypherParser.SP)
            self.state = 995
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 993
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 994
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 1006
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 998
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 997
                    self.match(s_cypherParser.SP)


                self.state = 1000
                self.match(s_cypherParser.YIELD)
                self.state = 1001
                self.match(s_cypherParser.SP)
                self.state = 1004
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14]:
                    self.state = 1002
                    self.match(s_cypherParser.T__13)
                    pass
                elif token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                    self.state = 1003
                    self.oC_YieldItems()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = s_cypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.oC_YieldItem()
            self.state = 1019
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,164,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1010
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1009
                        self.match(s_cypherParser.SP)


                    self.state = 1012
                    self.match(s_cypherParser.T__3)
                    self.state = 1014
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1013
                        self.match(s_cypherParser.SP)


                    self.state = 1016
                    self.oC_YieldItem() 
                self.state = 1021
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

            self.state = 1026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1022
                    self.match(s_cypherParser.SP)


                self.state = 1025
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = s_cypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.state = 1028
                self.oC_ProcedureResultField()
                self.state = 1029
                self.match(s_cypherParser.SP)
                self.state = 1030
                self.match(s_cypherParser.AS)
                self.state = 1031
                self.match(s_cypherParser.SP)


            self.state = 1035
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = s_cypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self.match(s_cypherParser.WITH)
            self.state = 1038
            self.oC_ProjectionBody()
            self.state = 1043
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1040
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1039
                    self.match(s_cypherParser.SP)


                self.state = 1042
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = s_cypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            self.match(s_cypherParser.RETURN)
            self.state = 1046
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)




    def oC_ProjectionBody(self):

        localctx = s_cypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 1049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1048
                    self.match(s_cypherParser.SP)


                self.state = 1051
                self.match(s_cypherParser.DISTINCT)


            self.state = 1054
            self.match(s_cypherParser.SP)
            self.state = 1055
            self.oC_ProjectionItems()
            self.state = 1058
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.state = 1056
                self.match(s_cypherParser.SP)
                self.state = 1057
                self.oC_Order()


            self.state = 1062
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1060
                self.match(s_cypherParser.SP)
                self.state = 1061
                self.oC_Skip()


            self.state = 1066
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1064
                self.match(s_cypherParser.SP)
                self.state = 1065
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)




    def oC_ProjectionItems(self):

        localctx = s_cypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 1096
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1068
                self.match(s_cypherParser.T__13)
                self.state = 1079
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,177,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1070
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1069
                            self.match(s_cypherParser.SP)


                        self.state = 1072
                        self.match(s_cypherParser.T__3)
                        self.state = 1074
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1073
                            self.match(s_cypherParser.SP)


                        self.state = 1076
                        self.oC_ProjectionItem() 
                    self.state = 1081
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,177,self._ctx)

                pass
            elif token in [5, 7, 10, 16, 17, 26, 48, 57, 86, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1082
                self.oC_ProjectionItem()
                self.state = 1093
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1084
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1083
                            self.match(s_cypherParser.SP)


                        self.state = 1086
                        self.match(s_cypherParser.T__3)
                        self.state = 1088
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1087
                            self.match(s_cypherParser.SP)


                        self.state = 1090
                        self.oC_ProjectionItem() 
                    self.state = 1095
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)




    def oC_ProjectionItem(self):

        localctx = s_cypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_oC_ProjectionItem)
        try:
            self.state = 1105
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1098
                self.oC_Expression()
                self.state = 1099
                self.match(s_cypherParser.SP)
                self.state = 1100
                self.match(s_cypherParser.AS)
                self.state = 1101
                self.match(s_cypherParser.SP)
                self.state = 1102
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1104
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = s_cypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1107
            self.match(s_cypherParser.ORDER)
            self.state = 1108
            self.match(s_cypherParser.SP)
            self.state = 1109
            self.match(s_cypherParser.BY)
            self.state = 1110
            self.match(s_cypherParser.SP)
            self.state = 1111
            self.oC_SortItem()
            self.state = 1119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1112
                self.match(s_cypherParser.T__3)
                self.state = 1114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1113
                    self.match(s_cypherParser.SP)


                self.state = 1116
                self.oC_SortItem()
                self.state = 1121
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = s_cypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            self.match(s_cypherParser.L_SKIP)
            self.state = 1123
            self.match(s_cypherParser.SP)
            self.state = 1124
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = s_cypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1126
            self.match(s_cypherParser.LIMIT)
            self.state = 1127
            self.match(s_cypherParser.SP)
            self.state = 1128
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = s_cypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self.oC_Expression()
            self.state = 1135
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 1132
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1131
                    self.match(s_cypherParser.SP)


                self.state = 1134
                _la = self._input.LA(1)
                if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def s_WhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = s_cypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.match(s_cypherParser.WHERE)
            self.state = 1138
            self.match(s_cypherParser.SP)
            self.state = 1139
            self.s_WhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_WhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_WhereExpression" ):
                listener.enterS_WhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_WhereExpression" ):
                listener.exitS_WhereExpression(self)




    def s_WhereExpression(self):

        localctx = s_cypherParser.S_WhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_s_WhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = s_cypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            self.oC_PatternPart()
            self.state = 1154
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,189,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1145
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1144
                        self.match(s_cypherParser.SP)


                    self.state = 1147
                    self.match(s_cypherParser.T__3)
                    self.state = 1149
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1148
                        self.match(s_cypherParser.SP)


                    self.state = 1151
                    self.oC_PatternPart() 
                self.state = 1156
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,189,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = s_cypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1157
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = s_cypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 1173
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1159
                self.oC_NodePattern()
                self.state = 1166
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,191,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1161
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1160
                            self.match(s_cypherParser.SP)


                        self.state = 1163
                        self.oC_PatternElementChain() 
                    self.state = 1168
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,191,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1169
                self.match(s_cypherParser.T__4)
                self.state = 1170
                self.oC_PatternElement()
                self.state = 1171
                self.match(s_cypherParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = s_cypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1175
            self.oC_NodePattern()
            self.state = 1180 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1177
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1176
                        self.match(s_cypherParser.SP)


                    self.state = 1179
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 1182 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = s_cypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self.oC_RelationshipPattern()
            self.state = 1186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1185
                self.match(s_cypherParser.SP)


            self.state = 1188
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = s_cypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 1254
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1190
                self.oC_LeftArrowHead()
                self.state = 1192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1191
                    self.match(s_cypherParser.SP)


                self.state = 1194
                self.oC_Dash()
                self.state = 1196
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
                if la_ == 1:
                    self.state = 1195
                    self.match(s_cypherParser.SP)


                self.state = 1199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1198
                    self.oC_RelationshipDetail()


                self.state = 1202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1201
                    self.match(s_cypherParser.SP)


                self.state = 1204
                self.oC_Dash()
                self.state = 1206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1205
                    self.match(s_cypherParser.SP)


                self.state = 1208
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1210
                self.oC_LeftArrowHead()
                self.state = 1212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1211
                    self.match(s_cypherParser.SP)


                self.state = 1214
                self.oC_Dash()
                self.state = 1216
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                if la_ == 1:
                    self.state = 1215
                    self.match(s_cypherParser.SP)


                self.state = 1219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1218
                    self.oC_RelationshipDetail()


                self.state = 1222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1221
                    self.match(s_cypherParser.SP)


                self.state = 1224
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1226
                self.oC_Dash()
                self.state = 1228
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                if la_ == 1:
                    self.state = 1227
                    self.match(s_cypherParser.SP)


                self.state = 1231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1230
                    self.oC_RelationshipDetail()


                self.state = 1234
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1233
                    self.match(s_cypherParser.SP)


                self.state = 1236
                self.oC_Dash()
                self.state = 1238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1237
                    self.match(s_cypherParser.SP)


                self.state = 1240
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1242
                self.oC_Dash()
                self.state = 1244
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
                if la_ == 1:
                    self.state = 1243
                    self.match(s_cypherParser.SP)


                self.state = 1247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1246
                    self.oC_RelationshipDetail()


                self.state = 1250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1249
                    self.match(s_cypherParser.SP)


                self.state = 1252
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = s_cypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_Properties)
        try:
            self.state = 1258
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1256
                self.oC_MapLiteral()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1257
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = s_cypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            self.match(s_cypherParser.T__7)
            self.state = 1262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1261
                self.match(s_cypherParser.SP)


            self.state = 1264
            self.oC_RelTypeName()
            self.state = 1278
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,218,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1266
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1265
                        self.match(s_cypherParser.SP)


                    self.state = 1268
                    self.match(s_cypherParser.T__14)
                    self.state = 1270
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==8:
                        self.state = 1269
                        self.match(s_cypherParser.T__7)


                    self.state = 1273
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1272
                        self.match(s_cypherParser.SP)


                    self.state = 1275
                    self.oC_RelTypeName() 
                self.state = 1280
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,218,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = s_cypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1281
            self.oC_NodeLabel()
            self.state = 1288
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,220,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1283
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1282
                        self.match(s_cypherParser.SP)


                    self.state = 1285
                    self.oC_NodeLabel() 
                self.state = 1290
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,220,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = s_cypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            self.match(s_cypherParser.T__7)
            self.state = 1293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1292
                self.match(s_cypherParser.SP)


            self.state = 1295
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = s_cypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1297
            self.match(s_cypherParser.T__13)
            self.state = 1299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1298
                self.match(s_cypherParser.SP)


            self.state = 1305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                self.state = 1301
                self.oC_IntegerLiteral()
                self.state = 1303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1302
                    self.match(s_cypherParser.SP)




            self.state = 1317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 1307
                self.match(s_cypherParser.T__11)
                self.state = 1309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1308
                    self.match(s_cypherParser.SP)


                self.state = 1315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                    self.state = 1311
                    self.oC_IntegerLiteral()
                    self.state = 1313
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1312
                        self.match(s_cypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = s_cypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1319
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = s_cypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = s_cypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1323
            self.oC_Atom()
            self.state = 1328 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1325
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1324
                        self.match(s_cypherParser.SP)


                    self.state = 1327
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 1330 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,230,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = s_cypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1332
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = s_cypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1334
            self.oC_XorExpression()
            self.state = 1341
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,231,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1335
                    self.match(s_cypherParser.SP)
                    self.state = 1336
                    self.match(s_cypherParser.OR)
                    self.state = 1337
                    self.match(s_cypherParser.SP)
                    self.state = 1338
                    self.oC_XorExpression() 
                self.state = 1343
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,231,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = s_cypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            self.oC_AndExpression()
            self.state = 1351
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,232,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1345
                    self.match(s_cypherParser.SP)
                    self.state = 1346
                    self.match(s_cypherParser.XOR)
                    self.state = 1347
                    self.match(s_cypherParser.SP)
                    self.state = 1348
                    self.oC_AndExpression() 
                self.state = 1353
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = s_cypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1354
            self.oC_NotExpression()
            self.state = 1361
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,233,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1355
                    self.match(s_cypherParser.SP)
                    self.state = 1356
                    self.match(s_cypherParser.AND)
                    self.state = 1357
                    self.match(s_cypherParser.SP)
                    self.state = 1358
                    self.oC_NotExpression() 
                self.state = 1363
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,233,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = s_cypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1364
                self.match(s_cypherParser.NOT)
                self.state = 1366
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1365
                    self.match(s_cypherParser.SP)


                self.state = 1372
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1373
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def oC_PartialComparisonExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PartialComparisonExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PartialComparisonExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = s_cypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1375
            self.oC_StringListNullPredicateExpression()
            self.state = 1382
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,237,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1377
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1376
                        self.match(s_cypherParser.SP)


                    self.state = 1379
                    self.oC_PartialComparisonExpression() 
                self.state = 1384
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,237,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PartialComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_operator(self):
            return self.getTypedRuleContext(s_cypherParser.S_operatorContext,0)


        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PartialComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PartialComparisonExpression" ):
                listener.enterOC_PartialComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PartialComparisonExpression" ):
                listener.exitOC_PartialComparisonExpression(self)




    def oC_PartialComparisonExpression(self):

        localctx = s_cypherParser.OC_PartialComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_PartialComparisonExpression)
        self._la = 0 # Token type
        try:
            self.state = 1421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1385
                self.s_operator()
                self.state = 1387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1386
                    self.match(s_cypherParser.SP)


                self.state = 1389
                self.oC_StringListNullPredicateExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1391
                self.s_operator()
                self.state = 1393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1392
                    self.match(s_cypherParser.SP)


                self.state = 1395
                self.oC_StringListNullPredicateExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1397
                self.s_operator()
                self.state = 1399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1398
                    self.match(s_cypherParser.SP)


                self.state = 1401
                self.oC_StringListNullPredicateExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1403
                self.s_operator()
                self.state = 1405
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1404
                    self.match(s_cypherParser.SP)


                self.state = 1407
                self.oC_StringListNullPredicateExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1409
                self.s_operator()
                self.state = 1411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1410
                    self.match(s_cypherParser.SP)


                self.state = 1413
                self.oC_StringListNullPredicateExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1415
                self.s_operator()
                self.state = 1417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1416
                    self.match(s_cypherParser.SP)


                self.state = 1419
                self.oC_StringListNullPredicateExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringPredicateExpression" ):
                listener.enterOC_StringPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringPredicateExpression" ):
                listener.exitOC_StringPredicateExpression(self)




    def oC_StringPredicateExpression(self):

        localctx = s_cypherParser.OC_StringPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_StringPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1433
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
            if la_ == 1:
                self.state = 1423
                self.match(s_cypherParser.SP)
                self.state = 1424
                self.match(s_cypherParser.STARTS)
                self.state = 1425
                self.match(s_cypherParser.SP)
                self.state = 1426
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1427
                self.match(s_cypherParser.SP)
                self.state = 1428
                self.match(s_cypherParser.ENDS)
                self.state = 1429
                self.match(s_cypherParser.SP)
                self.state = 1430
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1431
                self.match(s_cypherParser.SP)
                self.state = 1432
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 1436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1435
                self.match(s_cypherParser.SP)


            self.state = 1438
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListPredicateExpression" ):
                listener.enterOC_ListPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListPredicateExpression" ):
                listener.exitOC_ListPredicateExpression(self)




    def oC_ListPredicateExpression(self):

        localctx = s_cypherParser.OC_ListPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_ListPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1440
            self.match(s_cypherParser.SP)
            self.state = 1441
            self.match(s_cypherParser.IN)
            self.state = 1443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1442
                self.match(s_cypherParser.SP)


            self.state = 1445
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullPredicateExpression" ):
                listener.enterOC_NullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullPredicateExpression" ):
                listener.exitOC_NullPredicateExpression(self)




    def oC_NullPredicateExpression(self):

        localctx = s_cypherParser.OC_NullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_NullPredicateExpression)
        try:
            self.state = 1457
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1447
                self.match(s_cypherParser.SP)
                self.state = 1448
                self.match(s_cypherParser.IS)
                self.state = 1449
                self.match(s_cypherParser.SP)
                self.state = 1450
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1451
                self.match(s_cypherParser.SP)
                self.state = 1452
                self.match(s_cypherParser.IS)
                self.state = 1453
                self.match(s_cypherParser.SP)
                self.state = 1454
                self.match(s_cypherParser.NOT)
                self.state = 1455
                self.match(s_cypherParser.SP)
                self.state = 1456
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def s_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_operatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_operatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1459
            self.oC_MultiplyDivideModuloExpression()
            self.state = 1480
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,254,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1478
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
                    if la_ == 1:
                        self.state = 1461
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1460
                            self.match(s_cypherParser.SP)


                        self.state = 1463
                        self.s_operator()
                        self.state = 1465
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1464
                            self.match(s_cypherParser.SP)


                        self.state = 1467
                        self.oC_MultiplyDivideModuloExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1470
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1469
                            self.match(s_cypherParser.SP)


                        self.state = 1472
                        self.s_operator()
                        self.state = 1474
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1473
                            self.match(s_cypherParser.SP)


                        self.state = 1476
                        self.oC_MultiplyDivideModuloExpression()
                        pass

             
                self.state = 1482
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,254,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_operator" ):
                listener.enterS_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_operator" ):
                listener.exitS_operator(self)




    def s_operator(self):

        localctx = s_cypherParser.S_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_s_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1483
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 67059716) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PowerOfExpressionContext,i)


        def s_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_operatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_operatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = s_cypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1485
            self.oC_PowerOfExpression()
            self.state = 1515
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,262,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1513
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
                    if la_ == 1:
                        self.state = 1487
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1486
                            self.match(s_cypherParser.SP)


                        self.state = 1489
                        self.s_operator()
                        self.state = 1491
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1490
                            self.match(s_cypherParser.SP)


                        self.state = 1493
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1496
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1495
                            self.match(s_cypherParser.SP)


                        self.state = 1498
                        self.s_operator()
                        self.state = 1500
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1499
                            self.match(s_cypherParser.SP)


                        self.state = 1502
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1505
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1504
                            self.match(s_cypherParser.SP)


                        self.state = 1507
                        self.s_operator()
                        self.state = 1509
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1508
                            self.match(s_cypherParser.SP)


                        self.state = 1511
                        self.oC_PowerOfExpression()
                        pass

             
                self.state = 1517
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,262,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def s_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_operatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_operatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = s_cypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1518
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 1530
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,265,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1520
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1519
                        self.match(s_cypherParser.SP)


                    self.state = 1522
                    self.s_operator()
                    self.state = 1524
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1523
                        self.match(s_cypherParser.SP)


                    self.state = 1526
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 1532
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,265,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ListOperatorExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListOperatorExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.state = 1539
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 7, 10, 26, 48, 57, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1533
                self.oC_ListOperatorExpression()
                pass
            elif token in [16, 17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1534
                _la = self._input.LA(1)
                if not(_la==16 or _la==17):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1535
                    self.match(s_cypherParser.SP)


                self.state = 1538
                self.oC_ListOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyOrLabelsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyOrLabelsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyOrLabelsExpression" ):
                listener.enterOC_PropertyOrLabelsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyOrLabelsExpression" ):
                listener.exitOC_PropertyOrLabelsExpression(self)




    def oC_PropertyOrLabelsExpression(self):

        localctx = s_cypherParser.OC_PropertyOrLabelsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_PropertyOrLabelsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1541
            self.oC_Atom()
            self.state = 1548
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,269,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1543
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1542
                        self.match(s_cypherParser.SP)


                    self.state = 1545
                    self.oC_PropertyLookup() 
                self.state = 1550
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,269,self._ctx)

            self.state = 1555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.state = 1552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1551
                    self.match(s_cypherParser.SP)


                self.state = 1554
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = s_cypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1557
            self.match(s_cypherParser.T__0)
            self.state = 1559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1558
                self.match(s_cypherParser.SP)


            self.state = 1561
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternComprehensionContext,0)


        def oC_Quantifier(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QuantifierContext,0)


        def oC_PatternPredicate(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPredicateContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionInvocationContext,0)


        def oC_ExistentialSubquery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExistentialSubqueryContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = s_cypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 1587
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1563
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1564
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1565
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1566
                self.match(s_cypherParser.COUNT)
                self.state = 1568
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1567
                    self.match(s_cypherParser.SP)


                self.state = 1570
                self.match(s_cypherParser.T__4)
                self.state = 1572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1571
                    self.match(s_cypherParser.SP)


                self.state = 1574
                self.match(s_cypherParser.T__13)
                self.state = 1576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1575
                    self.match(s_cypherParser.SP)


                self.state = 1578
                self.match(s_cypherParser.T__5)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1579
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1580
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1581
                self.oC_Quantifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1582
                self.oC_PatternPredicate()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1583
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1584
                self.oC_FunctionInvocation()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1585
                self.oC_ExistentialSubquery()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1586
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def oC_CaseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_CaseAlternativeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = s_cypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                self.state = 1589
                self.match(s_cypherParser.CASE)
                self.state = 1594 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1591
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1590
                            self.match(s_cypherParser.SP)


                        self.state = 1593
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1596 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,278,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1598
                self.match(s_cypherParser.CASE)
                self.state = 1600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1599
                    self.match(s_cypherParser.SP)


                self.state = 1602
                self.oC_Expression()
                self.state = 1607 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1604
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1603
                            self.match(s_cypherParser.SP)


                        self.state = 1606
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1609 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,281,self._ctx)

                pass


            self.state = 1621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
            if la_ == 1:
                self.state = 1614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1613
                    self.match(s_cypherParser.SP)


                self.state = 1616
                self.match(s_cypherParser.ELSE)
                self.state = 1618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1617
                    self.match(s_cypherParser.SP)


                self.state = 1620
                self.oC_Expression()


            self.state = 1624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1623
                self.match(s_cypherParser.SP)


            self.state = 1626
            self.match(s_cypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternative" ):
                listener.enterOC_CaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternative" ):
                listener.exitOC_CaseAlternative(self)




    def oC_CaseAlternative(self):

        localctx = s_cypherParser.OC_CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_oC_CaseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1628
            self.match(s_cypherParser.WHEN)
            self.state = 1630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1629
                self.match(s_cypherParser.SP)


            self.state = 1632
            self.oC_Expression()
            self.state = 1634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1633
                self.match(s_cypherParser.SP)


            self.state = 1636
            self.match(s_cypherParser.THEN)
            self.state = 1638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1637
                self.match(s_cypherParser.SP)


            self.state = 1640
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = s_cypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1642
            self.match(s_cypherParser.T__9)
            self.state = 1644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1643
                self.match(s_cypherParser.SP)


            self.state = 1646
            self.oC_FilterExpression()
            self.state = 1655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.state = 1648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1647
                    self.match(s_cypherParser.SP)


                self.state = 1650
                self.match(s_cypherParser.T__14)
                self.state = 1652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1651
                    self.match(s_cypherParser.SP)


                self.state = 1654
                self.oC_Expression()


            self.state = 1658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1657
                self.match(s_cypherParser.SP)


            self.state = 1660
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = s_cypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1662
            self.match(s_cypherParser.T__9)
            self.state = 1664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1663
                self.match(s_cypherParser.SP)


            self.state = 1674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 1666
                self.oC_Variable()
                self.state = 1668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1667
                    self.match(s_cypherParser.SP)


                self.state = 1670
                self.match(s_cypherParser.T__1)
                self.state = 1672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1671
                    self.match(s_cypherParser.SP)




            self.state = 1676
            self.oC_RelationshipsPattern()
            self.state = 1678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1677
                self.match(s_cypherParser.SP)


            self.state = 1684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 1680
                self.oC_Where()
                self.state = 1682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1681
                    self.match(s_cypherParser.SP)




            self.state = 1686
            self.match(s_cypherParser.T__14)
            self.state = 1688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1687
                self.match(s_cypherParser.SP)


            self.state = 1690
            self.oC_Expression()
            self.state = 1692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1691
                self.match(s_cypherParser.SP)


            self.state = 1694
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Quantifier" ):
                listener.enterOC_Quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Quantifier" ):
                listener.exitOC_Quantifier(self)




    def oC_Quantifier(self):

        localctx = s_cypherParser.OC_QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_oC_Quantifier)
        self._la = 0 # Token type
        try:
            self.state = 1752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1696
                self.match(s_cypherParser.ALL)
                self.state = 1698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1697
                    self.match(s_cypherParser.SP)


                self.state = 1700
                self.match(s_cypherParser.T__4)
                self.state = 1702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1701
                    self.match(s_cypherParser.SP)


                self.state = 1704
                self.oC_FilterExpression()
                self.state = 1706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1705
                    self.match(s_cypherParser.SP)


                self.state = 1708
                self.match(s_cypherParser.T__5)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1710
                self.match(s_cypherParser.ANY)
                self.state = 1712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1711
                    self.match(s_cypherParser.SP)


                self.state = 1714
                self.match(s_cypherParser.T__4)
                self.state = 1716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1715
                    self.match(s_cypherParser.SP)


                self.state = 1718
                self.oC_FilterExpression()
                self.state = 1720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1719
                    self.match(s_cypherParser.SP)


                self.state = 1722
                self.match(s_cypherParser.T__5)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1724
                self.match(s_cypherParser.NONE)
                self.state = 1726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1725
                    self.match(s_cypherParser.SP)


                self.state = 1728
                self.match(s_cypherParser.T__4)
                self.state = 1730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1729
                    self.match(s_cypherParser.SP)


                self.state = 1732
                self.oC_FilterExpression()
                self.state = 1734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1733
                    self.match(s_cypherParser.SP)


                self.state = 1736
                self.match(s_cypherParser.T__5)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1738
                self.match(s_cypherParser.SINGLE)
                self.state = 1740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1739
                    self.match(s_cypherParser.SP)


                self.state = 1742
                self.match(s_cypherParser.T__4)
                self.state = 1744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1743
                    self.match(s_cypherParser.SP)


                self.state = 1746
                self.oC_FilterExpression()
                self.state = 1748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1747
                    self.match(s_cypherParser.SP)


                self.state = 1750
                self.match(s_cypherParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IdInCollContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = s_cypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1754
            self.oC_IdInColl()
            self.state = 1759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
            if la_ == 1:
                self.state = 1756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1755
                    self.match(s_cypherParser.SP)


                self.state = 1758
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPredicate" ):
                listener.enterOC_PatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPredicate" ):
                listener.exitOC_PatternPredicate(self)




    def oC_PatternPredicate(self):

        localctx = s_cypherParser.OC_PatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_oC_PatternPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1761
            self.oC_RelationshipsPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = s_cypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1763
            self.match(s_cypherParser.T__4)
            self.state = 1765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1764
                self.match(s_cypherParser.SP)


            self.state = 1767
            self.oC_Expression()
            self.state = 1769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1768
                self.match(s_cypherParser.SP)


            self.state = 1771
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = s_cypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1773
            self.oC_Variable()
            self.state = 1774
            self.match(s_cypherParser.SP)
            self.state = 1775
            self.match(s_cypherParser.IN)
            self.state = 1776
            self.match(s_cypherParser.SP)
            self.state = 1777
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = s_cypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1779
            self.oC_FunctionName()
            self.state = 1781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1780
                self.match(s_cypherParser.SP)


            self.state = 1783
            self.match(s_cypherParser.T__4)
            self.state = 1785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1784
                self.match(s_cypherParser.SP)


            self.state = 1791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 1787
                self.match(s_cypherParser.DISTINCT)
                self.state = 1789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1788
                    self.match(s_cypherParser.SP)




            self.state = 1810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119873184) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1793
                self.oC_Expression()
                self.state = 1795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1794
                    self.match(s_cypherParser.SP)


                self.state = 1807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1797
                    self.match(s_cypherParser.T__3)
                    self.state = 1799
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1798
                        self.match(s_cypherParser.SP)


                    self.state = 1801
                    self.oC_Expression()
                    self.state = 1803
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1802
                        self.match(s_cypherParser.SP)


                    self.state = 1809
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1812
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = s_cypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_oC_FunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1814
            self.oC_Namespace()
            self.state = 1815
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExistentialSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExistentialSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExistentialSubquery" ):
                listener.enterOC_ExistentialSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExistentialSubquery" ):
                listener.exitOC_ExistentialSubquery(self)




    def oC_ExistentialSubquery(self):

        localctx = s_cypherParser.OC_ExistentialSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_oC_ExistentialSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1817
            self.match(s_cypherParser.EXISTS)
            self.state = 1819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1818
                self.match(s_cypherParser.SP)


            self.state = 1821
            self.match(s_cypherParser.T__6)
            self.state = 1823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1822
                self.match(s_cypherParser.SP)


            self.state = 1833
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 71, 72]:
                self.state = 1825
                self.oC_RegularQuery()
                pass
            elif token in [5, 48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 1826
                self.oC_Pattern()
                self.state = 1831
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
                if la_ == 1:
                    self.state = 1828
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1827
                        self.match(s_cypherParser.SP)


                    self.state = 1830
                    self.oC_Where()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1835
                self.match(s_cypherParser.SP)


            self.state = 1838
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1840
            self.oC_ProcedureName()
            self.state = 1842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1841
                self.match(s_cypherParser.SP)


            self.state = 1844
            self.match(s_cypherParser.T__4)
            self.state = 1846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1845
                self.match(s_cypherParser.SP)


            self.state = 1865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119873184) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1848
                self.oC_Expression()
                self.state = 1850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1849
                    self.match(s_cypherParser.SP)


                self.state = 1862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1852
                    self.match(s_cypherParser.T__3)
                    self.state = 1854
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1853
                        self.match(s_cypherParser.SP)


                    self.state = 1856
                    self.oC_Expression()
                    self.state = 1858
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1857
                        self.match(s_cypherParser.SP)


                    self.state = 1864
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1867
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1869
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = s_cypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1871
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = s_cypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1873
            self.oC_Namespace()
            self.state = 1874
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = s_cypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1881
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,343,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1876
                    self.oC_SymbolicName()
                    self.state = 1877
                    self.match(s_cypherParser.T__0) 
                self.state = 1883
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,343,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = s_cypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1884
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_ListLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListLiteralContext,0)


        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = s_cypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_oC_Literal)
        try:
            self.state = 1892
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1886
                self.oC_BooleanLiteral()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1887
                self.match(s_cypherParser.NULL)
                pass
            elif token in [105, 106, 107, 115, 116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1888
                self.oC_NumberLiteral()
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1889
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1890
                self.oC_ListLiteral()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1891
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = s_cypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1894
            _la = self._input.LA(1)
            if not(_la==103 or _la==104):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = s_cypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_oC_NumberLiteral)
        try:
            self.state = 1898
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115, 116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1896
                self.oC_DoubleLiteral()
                pass
            elif token in [105, 106, 107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1897
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(s_cypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(s_cypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = s_cypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1900
            _la = self._input.LA(1)
            if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(s_cypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(s_cypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = s_cypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1902
            _la = self._input.LA(1)
            if not(_la==115 or _la==116):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = s_cypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1904
            self.match(s_cypherParser.T__9)
            self.state = 1906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1905
                self.match(s_cypherParser.SP)


            self.state = 1925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119873184) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1908
                self.oC_Expression()
                self.state = 1910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1909
                    self.match(s_cypherParser.SP)


                self.state = 1922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1912
                    self.match(s_cypherParser.T__3)
                    self.state = 1914
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1913
                        self.match(s_cypherParser.SP)


                    self.state = 1916
                    self.oC_Expression()
                    self.state = 1918
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1917
                        self.match(s_cypherParser.SP)


                    self.state = 1924
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1927
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyKeyName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyKeyNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,i)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = s_cypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1929
            self.match(s_cypherParser.T__6)
            self.state = 1931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1930
                self.match(s_cypherParser.SP)


            self.state = 1966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 1933
                self.oC_PropertyKeyName()
                self.state = 1935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1934
                    self.match(s_cypherParser.SP)


                self.state = 1937
                self.match(s_cypherParser.T__7)
                self.state = 1939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1938
                    self.match(s_cypherParser.SP)


                self.state = 1941
                self.oC_Expression()
                self.state = 1943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1942
                    self.match(s_cypherParser.SP)


                self.state = 1963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1945
                    self.match(s_cypherParser.T__3)
                    self.state = 1947
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1946
                        self.match(s_cypherParser.SP)


                    self.state = 1949
                    self.oC_PropertyKeyName()
                    self.state = 1951
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1950
                        self.match(s_cypherParser.SP)


                    self.state = 1953
                    self.match(s_cypherParser.T__7)
                    self.state = 1955
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1954
                        self.match(s_cypherParser.SP)


                    self.state = 1957
                    self.oC_Expression()
                    self.state = 1959
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1958
                        self.match(s_cypherParser.SP)


                    self.state = 1965
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1968
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = s_cypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1970
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = s_cypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1972
            self.match(s_cypherParser.T__25)
            self.state = 1975
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 1973
                self.oC_SymbolicName()
                pass
            elif token in [106]:
                self.state = 1974
                self.match(s_cypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = s_cypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_oC_SchemaName)
        try:
            self.state = 1979
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1977
                self.oC_SymbolicName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1978
                self.oC_ReservedWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = s_cypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1981
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2017460224) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = s_cypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1983
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32229031936) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = s_cypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1985
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70334384570368) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





