# Generated from .\transformer\grammar_parser\s_cypher.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,137,2146,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,1,0,1,0,1,0,3,0,294,8,0,1,1,4,1,297,
        8,1,11,1,12,1,298,1,1,1,1,1,2,1,2,3,2,305,8,2,1,2,1,2,3,2,309,8,
        2,1,2,1,2,3,2,313,8,2,1,2,1,2,3,2,317,8,2,3,2,319,8,2,1,2,3,2,322,
        8,2,1,2,3,2,325,8,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,333,8,3,1,4,1,4,
        3,4,337,8,4,1,4,1,4,3,4,341,8,4,1,4,3,4,344,8,4,1,5,1,5,3,5,348,
        8,5,1,5,1,5,1,5,5,5,353,8,5,10,5,12,5,356,9,5,1,5,3,5,359,8,5,1,
        5,3,5,362,8,5,1,6,1,6,3,6,366,8,6,1,6,1,6,3,6,370,8,6,1,6,1,6,3,
        6,374,8,6,1,6,5,6,377,8,6,10,6,12,6,380,9,6,1,6,3,6,383,8,6,1,6,
        3,6,386,8,6,1,7,1,7,3,7,390,8,7,1,7,1,7,3,7,394,8,7,1,7,1,7,3,7,
        398,8,7,1,7,5,7,401,8,7,10,7,12,7,404,9,7,1,7,3,7,407,8,7,1,7,3,
        7,410,8,7,1,8,1,8,3,8,414,8,8,1,8,3,8,417,8,8,1,8,3,8,420,8,8,1,
        8,1,8,3,8,424,8,8,1,8,1,8,1,8,1,8,3,8,430,8,8,1,8,1,8,3,8,434,8,
        8,1,8,1,8,1,8,1,8,3,8,440,8,8,1,8,1,8,3,8,444,8,8,1,8,1,8,1,8,1,
        8,3,8,450,8,8,1,8,1,8,1,8,1,8,3,8,456,8,8,1,8,1,8,1,8,1,8,3,8,462,
        8,8,1,8,3,8,465,8,8,1,8,3,8,468,8,8,1,8,1,8,3,8,472,8,8,1,8,1,8,
        1,8,1,8,3,8,478,8,8,1,8,3,8,481,8,8,1,8,3,8,484,8,8,1,8,1,8,3,8,
        488,8,8,1,8,1,8,3,8,492,8,8,1,8,1,8,3,8,496,8,8,1,9,1,9,3,9,500,
        8,9,1,9,1,9,1,10,1,10,3,10,506,8,10,1,10,3,10,509,8,10,1,11,1,11,
        3,11,513,8,11,1,11,1,11,1,12,1,12,1,12,3,12,520,8,12,1,12,1,12,3,
        12,524,8,12,1,13,1,13,3,13,528,8,13,1,13,1,13,3,13,532,8,13,1,13,
        1,13,3,13,536,8,13,1,13,1,13,3,13,540,8,13,1,13,5,13,543,8,13,10,
        13,12,13,546,9,13,1,13,3,13,549,8,13,1,13,1,13,3,13,553,8,13,3,13,
        555,8,13,1,14,1,14,1,14,3,14,560,8,14,1,14,1,14,3,14,564,8,14,3,
        14,566,8,14,3,14,568,8,14,1,15,1,15,1,15,1,15,3,15,574,8,15,1,16,
        1,16,3,16,578,8,16,1,16,1,16,1,17,1,17,3,17,584,8,17,1,17,1,17,1,
        18,1,18,3,18,590,8,18,1,19,1,19,1,19,1,19,3,19,596,8,19,1,19,1,19,
        1,19,3,19,601,8,19,1,20,1,20,1,20,1,20,3,20,607,8,20,1,20,3,20,610,
        8,20,1,20,1,20,1,20,1,20,3,20,616,8,20,3,20,618,8,20,1,21,1,21,3,
        21,622,8,21,1,21,1,21,3,21,626,8,21,1,21,5,21,629,8,21,10,21,12,
        21,632,9,21,1,21,3,21,635,8,21,1,21,3,21,638,8,21,1,22,1,22,1,22,
        1,22,1,22,3,22,645,8,22,1,23,1,23,3,23,649,8,23,5,23,651,8,23,10,
        23,12,23,654,9,23,1,23,1,23,3,23,658,8,23,5,23,660,8,23,10,23,12,
        23,663,9,23,1,23,1,23,3,23,667,8,23,1,24,1,24,1,24,3,24,672,8,24,
        1,24,3,24,675,8,24,1,25,1,25,3,25,679,8,25,1,25,1,25,3,25,683,8,
        25,1,25,1,25,1,25,3,25,688,8,25,1,25,3,25,691,8,25,3,25,693,8,25,
        1,25,3,25,696,8,25,1,25,1,25,1,26,1,26,3,26,702,8,26,1,26,3,26,705,
        8,26,1,27,1,27,3,27,709,8,27,1,27,1,27,1,28,1,28,3,28,715,8,28,1,
        28,1,28,1,29,1,29,3,29,721,8,29,1,29,1,29,3,29,725,8,29,1,29,1,29,
        1,29,1,29,3,29,731,8,29,1,29,1,29,3,29,735,8,29,1,29,1,29,1,29,3,
        29,740,8,29,1,30,1,30,3,30,744,8,30,1,30,1,30,3,30,748,8,30,1,30,
        1,30,3,30,752,8,30,1,30,1,30,1,31,1,31,3,31,758,8,31,1,31,1,31,3,
        31,762,8,31,1,31,1,31,1,32,1,32,3,32,768,8,32,1,32,1,32,3,32,772,
        8,32,3,32,774,8,32,1,32,1,32,3,32,778,8,32,3,32,780,8,32,1,32,1,
        32,3,32,784,8,32,3,32,786,8,32,1,32,1,32,3,32,790,8,32,3,32,792,
        8,32,1,32,1,32,1,33,1,33,3,33,798,8,33,1,34,1,34,3,34,802,8,34,1,
        34,1,34,3,34,806,8,34,1,34,1,34,3,34,810,8,34,1,34,1,34,3,34,814,
        8,34,1,34,1,34,3,34,818,8,34,1,34,1,34,3,34,822,8,34,1,34,1,34,3,
        34,826,8,34,1,34,1,34,5,34,830,8,34,10,34,12,34,833,9,34,3,34,835,
        8,34,1,34,3,34,838,8,34,1,34,1,34,1,35,1,35,3,35,844,8,35,1,35,3,
        35,847,8,35,1,36,1,36,3,36,851,8,36,1,36,1,36,3,36,855,8,36,1,36,
        1,36,3,36,859,8,36,1,36,1,36,3,36,863,8,36,1,37,1,37,3,37,867,8,
        37,1,37,1,37,3,37,871,8,37,3,37,873,8,37,1,37,1,37,3,37,877,8,37,
        3,37,879,8,37,1,37,3,37,882,8,37,1,37,1,37,3,37,886,8,37,3,37,888,
        8,37,1,37,1,37,3,37,892,8,37,3,37,894,8,37,1,37,1,37,1,38,1,38,3,
        38,900,8,38,1,38,1,38,3,38,904,8,38,1,38,1,38,5,38,908,8,38,10,38,
        12,38,911,9,38,1,39,1,39,1,39,1,39,1,39,3,39,918,8,39,1,40,1,40,
        3,40,922,8,40,1,40,1,40,3,40,926,8,40,1,40,1,40,5,40,930,8,40,10,
        40,12,40,933,9,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,
        45,3,45,945,8,45,1,45,1,45,3,45,949,8,45,1,45,1,45,5,45,953,8,45,
        10,45,12,45,956,9,45,1,46,1,46,3,46,960,8,46,1,46,1,46,3,46,964,
        8,46,1,46,1,46,5,46,968,8,46,10,46,12,46,971,9,46,1,47,1,47,3,47,
        975,8,47,1,47,1,47,5,47,979,8,47,10,47,12,47,982,9,47,1,48,3,48,
        985,8,48,1,48,1,48,3,48,989,8,48,1,48,1,48,3,48,993,8,48,1,48,1,
        48,1,49,3,49,998,8,49,1,49,1,49,3,49,1002,8,49,1,49,3,49,1005,8,
        49,1,49,3,49,1008,8,49,1,49,1,49,3,49,1012,8,49,1,49,3,49,1015,8,
        49,1,49,3,49,1018,8,49,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,3,
        52,1028,8,52,1,52,5,52,1031,8,52,10,52,12,52,1034,9,52,1,52,3,52,
        1037,8,52,1,52,1,52,3,52,1041,8,52,3,52,1043,8,52,1,53,1,53,3,53,
        1047,8,53,1,53,5,53,1050,8,53,10,53,12,53,1053,9,53,1,53,1,53,3,
        53,1057,8,53,1,53,1,53,3,53,1061,8,53,3,53,1063,8,53,3,53,1065,8,
        53,1,53,3,53,1068,8,53,1,53,1,53,1,54,3,54,1073,8,54,1,54,1,54,1,
        55,1,55,3,55,1079,8,55,1,55,5,55,1082,8,55,10,55,12,55,1085,9,55,
        1,56,1,56,1,56,1,56,1,56,1,57,1,57,3,57,1094,8,57,1,57,1,57,3,57,
        1098,8,57,1,57,1,57,3,57,1102,8,57,1,57,1,57,3,57,1106,8,57,1,57,
        3,57,1109,8,57,1,57,1,57,3,57,1113,8,57,1,57,3,57,1116,8,57,1,57,
        1,57,1,58,1,58,3,58,1122,8,58,1,59,1,59,3,59,1126,8,59,1,59,1,59,
        3,59,1130,8,59,1,59,1,59,3,59,1134,8,59,3,59,1136,8,59,1,59,1,59,
        3,59,1140,8,59,1,59,1,59,3,59,1144,8,59,1,59,1,59,3,59,1148,8,59,
        5,59,1150,8,59,10,59,12,59,1153,9,59,3,59,1155,8,59,1,59,1,59,1,
        60,1,60,1,61,1,61,3,61,1163,8,61,1,61,1,61,3,61,1167,8,61,1,61,1,
        61,3,61,1171,8,61,1,61,1,61,3,61,1175,8,61,5,61,1177,8,61,10,61,
        12,61,1180,9,61,3,61,1182,8,61,1,61,1,61,1,62,1,62,1,63,1,63,3,63,
        1190,8,63,1,63,1,63,1,63,3,63,1195,8,63,1,63,5,63,1198,8,63,10,63,
        12,63,1201,9,63,3,63,1203,8,63,1,63,1,63,1,64,1,64,3,64,1209,8,64,
        1,64,1,64,3,64,1213,8,64,1,64,1,64,3,64,1217,8,64,1,65,1,65,1,66,
        1,66,1,67,3,67,1224,8,67,1,67,1,67,3,67,1228,8,67,1,67,3,67,1231,
        8,67,1,67,3,67,1234,8,67,1,67,1,67,1,68,1,68,1,69,1,69,3,69,1242,
        8,69,1,69,5,69,1245,8,69,10,69,12,69,1248,9,69,1,70,1,70,1,70,1,
        70,3,70,1254,8,70,1,70,1,70,1,70,3,70,1259,8,70,1,70,3,70,1262,8,
        70,1,71,1,71,3,71,1266,8,71,1,72,1,72,3,72,1270,8,72,5,72,1272,8,
        72,10,72,12,72,1275,9,72,1,72,1,72,1,72,3,72,1280,8,72,5,72,1282,
        8,72,10,72,12,72,1285,9,72,1,72,1,72,3,72,1289,8,72,1,72,5,72,1292,
        8,72,10,72,12,72,1295,9,72,1,72,3,72,1298,8,72,1,72,3,72,1301,8,
        72,3,72,1303,8,72,1,73,1,73,1,73,3,73,1308,8,73,1,74,1,74,3,74,1312,
        8,74,1,74,1,74,1,74,1,74,1,74,1,74,1,75,1,75,3,75,1322,8,75,1,75,
        1,75,1,75,5,75,1327,8,75,10,75,12,75,1330,9,75,1,76,1,76,1,76,1,
        76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,1342,8,76,1,77,1,77,3,77,1346,
        8,77,1,77,1,77,1,78,1,78,3,78,1352,8,78,1,78,1,78,3,78,1356,8,78,
        1,78,1,78,3,78,1360,8,78,1,78,5,78,1363,8,78,10,78,12,78,1366,9,
        78,1,79,1,79,3,79,1370,8,79,1,79,1,79,3,79,1374,8,79,1,79,1,79,3,
        79,1378,8,79,1,79,1,79,3,79,1382,8,79,1,79,5,79,1385,8,79,10,79,
        12,79,1388,9,79,1,80,1,80,1,80,1,80,3,80,1394,8,80,1,80,1,80,3,80,
        1398,8,80,1,80,5,80,1401,8,80,10,80,12,80,1404,9,80,1,81,1,81,3,
        81,1408,8,81,1,81,1,81,3,81,1412,8,81,1,81,5,81,1415,8,81,10,81,
        12,81,1418,9,81,1,81,3,81,1421,8,81,1,81,3,81,1424,8,81,1,82,1,82,
        1,82,1,82,1,82,3,82,1431,8,82,1,82,1,82,1,83,1,83,1,83,3,83,1438,
        8,83,1,83,3,83,1441,8,83,1,84,1,84,1,84,1,85,3,85,1447,8,85,1,85,
        3,85,1450,8,85,1,85,1,85,1,85,1,85,3,85,1456,8,85,1,85,1,85,3,85,
        1460,8,85,1,85,1,85,3,85,1464,8,85,1,86,1,86,3,86,1468,8,86,1,86,
        1,86,3,86,1472,8,86,1,86,5,86,1475,8,86,10,86,12,86,1478,9,86,1,
        86,1,86,3,86,1482,8,86,1,86,1,86,3,86,1486,8,86,1,86,5,86,1489,8,
        86,10,86,12,86,1492,9,86,3,86,1494,8,86,1,87,1,87,1,87,1,87,1,87,
        1,87,1,87,3,87,1503,8,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,
        1512,8,88,1,88,5,88,1515,8,88,10,88,12,88,1518,9,88,1,89,1,89,1,
        89,1,89,1,90,1,90,1,90,1,90,1,91,1,91,3,91,1530,8,91,1,91,3,91,1533,
        8,91,1,92,1,92,1,92,1,92,1,93,1,93,3,93,1541,8,93,1,93,1,93,3,93,
        1545,8,93,1,93,5,93,1548,8,93,10,93,12,93,1551,9,93,1,94,1,94,1,
        95,1,95,3,95,1557,8,95,1,95,5,95,1560,8,95,10,95,12,95,1563,9,95,
        1,95,1,95,1,95,1,95,3,95,1569,8,95,1,96,1,96,3,96,1573,8,96,1,96,
        4,96,1576,8,96,11,96,12,96,1577,1,97,1,97,3,97,1582,8,97,1,97,1,
        97,1,98,1,98,3,98,1588,8,98,1,98,1,98,3,98,1592,8,98,1,98,3,98,1595,
        8,98,1,98,3,98,1598,8,98,1,98,1,98,3,98,1602,8,98,1,98,1,98,1,98,
        1,98,3,98,1608,8,98,1,98,1,98,3,98,1612,8,98,1,98,3,98,1615,8,98,
        1,98,3,98,1618,8,98,1,98,1,98,1,98,1,98,3,98,1624,8,98,1,98,3,98,
        1627,8,98,1,98,3,98,1630,8,98,1,98,1,98,3,98,1634,8,98,1,98,1,98,
        1,98,1,98,3,98,1640,8,98,1,98,3,98,1643,8,98,1,98,3,98,1646,8,98,
        1,98,1,98,3,98,1650,8,98,1,99,1,99,3,99,1654,8,99,1,100,1,100,3,
        100,1658,8,100,1,100,1,100,3,100,1662,8,100,1,100,1,100,3,100,1666,
        8,100,1,100,3,100,1669,8,100,1,100,5,100,1672,8,100,10,100,12,100,
        1675,9,100,1,101,1,101,3,101,1679,8,101,1,101,5,101,1682,8,101,10,
        101,12,101,1685,9,101,1,102,1,102,3,102,1689,8,102,1,102,1,102,1,
        103,1,103,3,103,1695,8,103,1,103,1,103,3,103,1699,8,103,3,103,1701,
        8,103,1,103,1,103,3,103,1705,8,103,1,103,1,103,3,103,1709,8,103,
        3,103,1711,8,103,3,103,1713,8,103,1,104,1,104,1,105,1,105,1,106,
        1,106,3,106,1721,8,106,1,106,4,106,1724,8,106,11,106,12,106,1725,
        1,107,1,107,1,108,1,108,1,108,1,108,1,108,5,108,1735,8,108,10,108,
        12,108,1738,9,108,1,109,1,109,1,109,1,109,1,109,5,109,1745,8,109,
        10,109,12,109,1748,9,109,1,110,1,110,1,110,1,110,1,110,5,110,1755,
        8,110,10,110,12,110,1758,9,110,1,111,1,111,3,111,1762,8,111,5,111,
        1764,8,111,10,111,12,111,1767,9,111,1,111,1,111,1,112,1,112,3,112,
        1773,8,112,1,112,1,112,1,112,3,112,1778,8,112,1,112,1,112,1,112,
        3,112,1783,8,112,1,112,1,112,1,112,3,112,1788,8,112,1,112,1,112,
        1,112,3,112,1793,8,112,1,112,1,112,1,112,3,112,1798,8,112,1,112,
        3,112,1801,8,112,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
        1,113,1,113,3,113,1813,8,113,1,113,3,113,1816,8,113,1,113,1,113,
        1,114,1,114,1,114,3,114,1823,8,114,1,114,1,114,1,115,1,115,1,115,
        1,115,1,115,1,115,1,115,1,115,1,115,1,115,3,115,1837,8,115,1,116,
        1,116,1,116,3,116,1842,8,116,1,116,3,116,1845,8,116,1,117,1,117,
        3,117,1849,8,117,1,117,1,117,1,118,1,118,1,118,1,118,1,118,3,118,
        1858,8,118,1,118,1,118,3,118,1862,8,118,1,118,1,118,3,118,1866,8,
        118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,3,118,
        1877,8,118,1,119,1,119,3,119,1881,8,119,1,119,4,119,1884,8,119,11,
        119,12,119,1885,1,119,1,119,3,119,1890,8,119,1,119,1,119,3,119,1894,
        8,119,1,119,4,119,1897,8,119,11,119,12,119,1898,3,119,1901,8,119,
        1,119,3,119,1904,8,119,1,119,1,119,3,119,1908,8,119,1,119,3,119,
        1911,8,119,1,119,3,119,1914,8,119,1,119,1,119,1,120,1,120,3,120,
        1920,8,120,1,120,1,120,3,120,1924,8,120,1,120,1,120,3,120,1928,8,
        120,1,120,1,120,1,121,1,121,3,121,1934,8,121,1,121,1,121,3,121,1938,
        8,121,1,121,1,121,3,121,1942,8,121,1,121,3,121,1945,8,121,1,121,
        3,121,1948,8,121,1,121,1,121,1,122,1,122,3,122,1954,8,122,1,122,
        1,122,3,122,1958,8,122,1,122,1,122,3,122,1962,8,122,3,122,1964,8,
        122,1,122,1,122,3,122,1968,8,122,1,122,1,122,3,122,1972,8,122,3,
        122,1974,8,122,1,122,1,122,3,122,1978,8,122,1,122,1,122,3,122,1982,
        8,122,1,122,1,122,1,123,1,123,3,123,1988,8,123,1,123,1,123,3,123,
        1992,8,123,1,123,1,123,3,123,1996,8,123,1,123,1,123,1,123,1,123,
        3,123,2002,8,123,1,123,1,123,3,123,2006,8,123,1,123,1,123,3,123,
        2010,8,123,1,123,1,123,1,123,1,123,3,123,2016,8,123,1,123,1,123,
        3,123,2020,8,123,1,123,1,123,3,123,2024,8,123,1,123,1,123,1,123,
        1,123,3,123,2030,8,123,1,123,1,123,3,123,2034,8,123,1,123,1,123,
        3,123,2038,8,123,1,123,1,123,3,123,2042,8,123,1,124,1,124,1,125,
        1,125,3,125,2048,8,125,1,125,1,125,3,125,2052,8,125,1,125,1,125,
        1,126,1,126,1,126,1,126,1,126,1,126,1,127,1,127,1,127,1,128,1,128,
        3,128,2067,8,128,1,128,1,128,3,128,2071,8,128,1,128,1,128,3,128,
        2075,8,128,1,128,1,128,3,128,2079,8,128,1,128,1,128,3,128,2083,8,
        128,5,128,2085,8,128,10,128,12,128,2088,9,128,3,128,2090,8,128,1,
        128,1,128,1,129,1,129,1,130,1,130,1,131,1,131,1,131,1,132,1,132,
        1,132,5,132,2104,8,132,10,132,12,132,2107,9,132,1,133,1,133,1,134,
        1,134,1,134,1,134,1,134,1,134,3,134,2117,8,134,1,135,1,135,1,136,
        1,136,3,136,2123,8,136,1,137,1,137,1,138,1,138,1,139,1,139,1,140,
        1,140,1,140,3,140,2134,8,140,1,141,1,141,3,141,2138,8,141,1,142,
        1,142,1,143,1,143,1,144,1,144,1,144,0,0,145,0,2,4,6,8,10,12,14,16,
        18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
        62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
        104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
        136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
        168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
        200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,
        232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,
        264,266,268,270,272,274,276,278,280,282,284,286,288,0,13,2,0,5,5,
        13,14,1,0,16,17,2,0,2,2,18,22,1,0,54,55,7,0,48,48,93,93,97,97,99,
        101,108,108,129,131,134,134,5,0,48,68,71,92,94,98,102,104,119,128,
        1,0,78,81,1,0,103,104,1,0,105,107,1,0,115,116,2,0,19,19,27,30,2,
        0,21,21,31,34,2,0,17,17,35,45,2438,0,293,1,0,0,0,2,296,1,0,0,0,4,
        304,1,0,0,0,6,332,1,0,0,0,8,334,1,0,0,0,10,345,1,0,0,0,12,363,1,
        0,0,0,14,387,1,0,0,0,16,495,1,0,0,0,18,497,1,0,0,0,20,503,1,0,0,
        0,22,510,1,0,0,0,24,516,1,0,0,0,26,527,1,0,0,0,28,556,1,0,0,0,30,
        573,1,0,0,0,32,575,1,0,0,0,34,581,1,0,0,0,36,589,1,0,0,0,38,591,
        1,0,0,0,40,602,1,0,0,0,42,619,1,0,0,0,44,639,1,0,0,0,46,652,1,0,
        0,0,48,668,1,0,0,0,50,676,1,0,0,0,52,699,1,0,0,0,54,706,1,0,0,0,
        56,712,1,0,0,0,58,739,1,0,0,0,60,741,1,0,0,0,62,755,1,0,0,0,64,765,
        1,0,0,0,66,797,1,0,0,0,68,799,1,0,0,0,70,841,1,0,0,0,72,848,1,0,
        0,0,74,864,1,0,0,0,76,897,1,0,0,0,78,912,1,0,0,0,80,919,1,0,0,0,
        82,934,1,0,0,0,84,936,1,0,0,0,86,938,1,0,0,0,88,940,1,0,0,0,90,942,
        1,0,0,0,92,957,1,0,0,0,94,974,1,0,0,0,96,984,1,0,0,0,98,997,1,0,
        0,0,100,1021,1,0,0,0,102,1023,1,0,0,0,104,1025,1,0,0,0,106,1044,
        1,0,0,0,108,1072,1,0,0,0,110,1076,1,0,0,0,112,1086,1,0,0,0,114,1091,
        1,0,0,0,116,1121,1,0,0,0,118,1123,1,0,0,0,120,1158,1,0,0,0,122,1160,
        1,0,0,0,124,1185,1,0,0,0,126,1187,1,0,0,0,128,1206,1,0,0,0,130,1218,
        1,0,0,0,132,1220,1,0,0,0,134,1223,1,0,0,0,136,1237,1,0,0,0,138,1239,
        1,0,0,0,140,1261,1,0,0,0,142,1265,1,0,0,0,144,1302,1,0,0,0,146,1307,
        1,0,0,0,148,1309,1,0,0,0,150,1319,1,0,0,0,152,1341,1,0,0,0,154,1343,
        1,0,0,0,156,1349,1,0,0,0,158,1369,1,0,0,0,160,1389,1,0,0,0,162,1405,
        1,0,0,0,164,1430,1,0,0,0,166,1434,1,0,0,0,168,1442,1,0,0,0,170,1449,
        1,0,0,0,172,1493,1,0,0,0,174,1502,1,0,0,0,176,1504,1,0,0,0,178,1519,
        1,0,0,0,180,1523,1,0,0,0,182,1527,1,0,0,0,184,1534,1,0,0,0,186,1538,
        1,0,0,0,188,1552,1,0,0,0,190,1568,1,0,0,0,192,1570,1,0,0,0,194,1579,
        1,0,0,0,196,1649,1,0,0,0,198,1653,1,0,0,0,200,1655,1,0,0,0,202,1676,
        1,0,0,0,204,1686,1,0,0,0,206,1692,1,0,0,0,208,1714,1,0,0,0,210,1716,
        1,0,0,0,212,1718,1,0,0,0,214,1727,1,0,0,0,216,1729,1,0,0,0,218,1739,
        1,0,0,0,220,1749,1,0,0,0,222,1765,1,0,0,0,224,1800,1,0,0,0,226,1812,
        1,0,0,0,228,1819,1,0,0,0,230,1836,1,0,0,0,232,1844,1,0,0,0,234,1846,
        1,0,0,0,236,1876,1,0,0,0,238,1900,1,0,0,0,240,1917,1,0,0,0,242,1931,
        1,0,0,0,244,1951,1,0,0,0,246,2041,1,0,0,0,248,2043,1,0,0,0,250,2045,
        1,0,0,0,252,2055,1,0,0,0,254,2061,1,0,0,0,256,2064,1,0,0,0,258,2093,
        1,0,0,0,260,2095,1,0,0,0,262,2097,1,0,0,0,264,2105,1,0,0,0,266,2108,
        1,0,0,0,268,2116,1,0,0,0,270,2118,1,0,0,0,272,2122,1,0,0,0,274,2124,
        1,0,0,0,276,2126,1,0,0,0,278,2128,1,0,0,0,280,2130,1,0,0,0,282,2137,
        1,0,0,0,284,2139,1,0,0,0,286,2141,1,0,0,0,288,2143,1,0,0,0,290,294,
        3,138,69,0,291,294,3,40,20,0,292,294,3,36,18,0,293,290,1,0,0,0,293,
        291,1,0,0,0,293,292,1,0,0,0,294,1,1,0,0,0,295,297,3,46,23,0,296,
        295,1,0,0,0,297,298,1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,
        300,1,0,0,0,300,301,3,144,72,0,301,3,1,0,0,0,302,303,5,58,0,0,303,
        305,5,135,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,306,1,0,0,0,306,
        308,5,59,0,0,307,309,5,135,0,0,308,307,1,0,0,0,308,309,1,0,0,0,309,
        310,1,0,0,0,310,318,3,186,93,0,311,313,5,135,0,0,312,311,1,0,0,0,
        312,313,1,0,0,0,313,316,1,0,0,0,314,317,3,32,16,0,315,317,3,34,17,
        0,316,314,1,0,0,0,316,315,1,0,0,0,317,319,1,0,0,0,318,312,1,0,0,
        0,318,319,1,0,0,0,319,324,1,0,0,0,320,322,5,135,0,0,321,320,1,0,
        0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,325,3,184,92,0,324,321,1,
        0,0,0,324,325,1,0,0,0,325,5,1,0,0,0,326,333,3,8,4,0,327,333,3,10,
        5,0,328,333,3,12,6,0,329,333,3,160,80,0,330,333,3,14,7,0,331,333,
        3,26,13,0,332,326,1,0,0,0,332,327,1,0,0,0,332,328,1,0,0,0,332,329,
        1,0,0,0,332,330,1,0,0,0,332,331,1,0,0,0,333,7,1,0,0,0,334,336,5,
        64,0,0,335,337,5,135,0,0,336,335,1,0,0,0,336,337,1,0,0,0,337,338,
        1,0,0,0,338,343,3,186,93,0,339,341,5,135,0,0,340,339,1,0,0,0,340,
        341,1,0,0,0,341,342,1,0,0,0,342,344,3,32,16,0,343,340,1,0,0,0,343,
        344,1,0,0,0,344,9,1,0,0,0,345,347,5,62,0,0,346,348,5,135,0,0,347,
        346,1,0,0,0,347,348,1,0,0,0,348,349,1,0,0,0,349,354,3,58,29,0,350,
        351,5,135,0,0,351,353,3,152,76,0,352,350,1,0,0,0,353,356,1,0,0,0,
        354,352,1,0,0,0,354,355,1,0,0,0,355,361,1,0,0,0,356,354,1,0,0,0,
        357,359,5,135,0,0,358,357,1,0,0,0,358,359,1,0,0,0,359,360,1,0,0,
        0,360,362,3,32,16,0,361,358,1,0,0,0,361,362,1,0,0,0,362,11,1,0,0,
        0,363,365,5,65,0,0,364,366,5,135,0,0,365,364,1,0,0,0,365,366,1,0,
        0,0,366,367,1,0,0,0,367,378,3,16,8,0,368,370,5,135,0,0,369,368,1,
        0,0,0,369,370,1,0,0,0,370,371,1,0,0,0,371,373,5,1,0,0,372,374,5,
        135,0,0,373,372,1,0,0,0,373,374,1,0,0,0,374,375,1,0,0,0,375,377,
        3,16,8,0,376,369,1,0,0,0,377,380,1,0,0,0,378,376,1,0,0,0,378,379,
        1,0,0,0,379,385,1,0,0,0,380,378,1,0,0,0,381,383,5,135,0,0,382,381,
        1,0,0,0,382,383,1,0,0,0,383,384,1,0,0,0,384,386,3,32,16,0,385,382,
        1,0,0,0,385,386,1,0,0,0,386,13,1,0,0,0,387,389,5,53,0,0,388,390,
        5,135,0,0,389,388,1,0,0,0,389,390,1,0,0,0,390,391,1,0,0,0,391,402,
        3,24,12,0,392,394,5,135,0,0,393,392,1,0,0,0,393,394,1,0,0,0,394,
        395,1,0,0,0,395,397,5,1,0,0,396,398,5,135,0,0,397,396,1,0,0,0,397,
        398,1,0,0,0,398,399,1,0,0,0,399,401,3,24,12,0,400,393,1,0,0,0,401,
        404,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,409,1,0,0,0,404,
        402,1,0,0,0,405,407,5,135,0,0,406,405,1,0,0,0,406,407,1,0,0,0,407,
        408,1,0,0,0,408,410,3,32,16,0,409,406,1,0,0,0,409,410,1,0,0,0,410,
        15,1,0,0,0,411,416,3,212,106,0,412,414,5,135,0,0,413,412,1,0,0,0,
        413,414,1,0,0,0,414,415,1,0,0,0,415,417,3,114,57,0,416,413,1,0,0,
        0,416,417,1,0,0,0,417,419,1,0,0,0,418,420,5,135,0,0,419,418,1,0,
        0,0,419,420,1,0,0,0,420,421,1,0,0,0,421,423,5,2,0,0,422,424,5,135,
        0,0,423,422,1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,426,3,214,
        107,0,426,496,1,0,0,0,427,429,3,266,133,0,428,430,5,135,0,0,429,
        428,1,0,0,0,429,430,1,0,0,0,430,431,1,0,0,0,431,433,5,2,0,0,432,
        434,5,135,0,0,433,432,1,0,0,0,433,434,1,0,0,0,434,435,1,0,0,0,435,
        436,3,214,107,0,436,496,1,0,0,0,437,439,3,266,133,0,438,440,5,135,
        0,0,439,438,1,0,0,0,439,440,1,0,0,0,440,441,1,0,0,0,441,443,5,3,
        0,0,442,444,5,135,0,0,443,442,1,0,0,0,443,444,1,0,0,0,444,445,1,
        0,0,0,445,446,3,214,107,0,446,496,1,0,0,0,447,449,3,266,133,0,448,
        450,5,135,0,0,449,448,1,0,0,0,449,450,1,0,0,0,450,451,1,0,0,0,451,
        452,3,202,101,0,452,496,1,0,0,0,453,455,3,266,133,0,454,456,5,135,
        0,0,455,454,1,0,0,0,455,456,1,0,0,0,456,457,1,0,0,0,457,458,3,114,
        57,0,458,496,1,0,0,0,459,464,3,266,133,0,460,462,5,135,0,0,461,460,
        1,0,0,0,461,462,1,0,0,0,462,463,1,0,0,0,463,465,3,114,57,0,464,461,
        1,0,0,0,464,465,1,0,0,0,465,467,1,0,0,0,466,468,5,135,0,0,467,466,
        1,0,0,0,467,468,1,0,0,0,468,469,1,0,0,0,469,471,5,4,0,0,470,472,
        5,135,0,0,471,470,1,0,0,0,471,472,1,0,0,0,472,473,1,0,0,0,473,474,
        3,18,9,0,474,496,1,0,0,0,475,480,3,266,133,0,476,478,5,135,0,0,477,
        476,1,0,0,0,477,478,1,0,0,0,478,479,1,0,0,0,479,481,3,114,57,0,480,
        477,1,0,0,0,480,481,1,0,0,0,481,483,1,0,0,0,482,484,5,135,0,0,483,
        482,1,0,0,0,483,484,1,0,0,0,484,485,1,0,0,0,485,487,5,4,0,0,486,
        488,5,135,0,0,487,486,1,0,0,0,487,488,1,0,0,0,488,489,1,0,0,0,489,
        491,3,20,10,0,490,492,5,135,0,0,491,490,1,0,0,0,491,492,1,0,0,0,
        492,493,1,0,0,0,493,494,3,22,11,0,494,496,1,0,0,0,495,411,1,0,0,
        0,495,427,1,0,0,0,495,437,1,0,0,0,495,447,1,0,0,0,495,453,1,0,0,
        0,495,459,1,0,0,0,495,475,1,0,0,0,496,17,1,0,0,0,497,499,3,278,139,
        0,498,500,5,135,0,0,499,498,1,0,0,0,499,500,1,0,0,0,500,501,1,0,
        0,0,501,502,3,114,57,0,502,19,1,0,0,0,503,508,3,278,139,0,504,506,
        5,135,0,0,505,504,1,0,0,0,505,506,1,0,0,0,506,507,1,0,0,0,507,509,
        3,114,57,0,508,505,1,0,0,0,508,509,1,0,0,0,509,21,1,0,0,0,510,512,
        5,47,0,0,511,513,5,135,0,0,512,511,1,0,0,0,512,513,1,0,0,0,513,514,
        1,0,0,0,514,515,3,114,57,0,515,23,1,0,0,0,516,523,3,214,107,0,517,
        519,3,108,54,0,518,520,5,135,0,0,519,518,1,0,0,0,519,520,1,0,0,0,
        520,521,1,0,0,0,521,522,5,47,0,0,522,524,1,0,0,0,523,517,1,0,0,0,
        523,524,1,0,0,0,524,25,1,0,0,0,525,526,5,66,0,0,526,528,5,135,0,
        0,527,525,1,0,0,0,527,528,1,0,0,0,528,529,1,0,0,0,529,531,5,67,0,
        0,530,532,5,135,0,0,531,530,1,0,0,0,531,532,1,0,0,0,532,533,1,0,
        0,0,533,544,3,28,14,0,534,536,5,135,0,0,535,534,1,0,0,0,535,536,
        1,0,0,0,536,537,1,0,0,0,537,539,5,1,0,0,538,540,5,135,0,0,539,538,
        1,0,0,0,539,540,1,0,0,0,540,541,1,0,0,0,541,543,3,28,14,0,542,535,
        1,0,0,0,543,546,1,0,0,0,544,542,1,0,0,0,544,545,1,0,0,0,545,554,
        1,0,0,0,546,544,1,0,0,0,547,549,5,135,0,0,548,547,1,0,0,0,548,549,
        1,0,0,0,549,552,1,0,0,0,550,553,3,32,16,0,551,553,3,34,17,0,552,
        550,1,0,0,0,552,551,1,0,0,0,553,555,1,0,0,0,554,548,1,0,0,0,554,
        555,1,0,0,0,555,27,1,0,0,0,556,567,3,214,107,0,557,565,3,108,54,
        0,558,560,5,135,0,0,559,558,1,0,0,0,559,560,1,0,0,0,560,563,1,0,
        0,0,561,564,5,47,0,0,562,564,3,114,57,0,563,561,1,0,0,0,563,562,
        1,0,0,0,564,566,1,0,0,0,565,559,1,0,0,0,565,566,1,0,0,0,566,568,
        1,0,0,0,567,557,1,0,0,0,567,568,1,0,0,0,568,29,1,0,0,0,569,570,3,
        266,133,0,570,571,3,202,101,0,571,574,1,0,0,0,572,574,3,212,106,
        0,573,569,1,0,0,0,573,572,1,0,0,0,574,31,1,0,0,0,575,577,5,49,0,
        0,576,578,5,135,0,0,577,576,1,0,0,0,577,578,1,0,0,0,578,579,1,0,
        0,0,579,580,3,214,107,0,580,33,1,0,0,0,581,583,5,51,0,0,582,584,
        5,135,0,0,583,582,1,0,0,0,583,584,1,0,0,0,584,585,1,0,0,0,585,586,
        3,214,107,0,586,35,1,0,0,0,587,590,3,54,27,0,588,590,3,56,28,0,589,
        587,1,0,0,0,589,588,1,0,0,0,590,37,1,0,0,0,591,592,5,69,0,0,592,
        593,5,135,0,0,593,600,3,256,128,0,594,596,5,135,0,0,595,594,1,0,
        0,0,595,596,1,0,0,0,596,597,1,0,0,0,597,598,5,70,0,0,598,599,5,135,
        0,0,599,601,3,42,21,0,600,595,1,0,0,0,600,601,1,0,0,0,601,39,1,0,
        0,0,602,603,5,69,0,0,603,606,5,135,0,0,604,607,3,256,128,0,605,607,
        3,258,129,0,606,604,1,0,0,0,606,605,1,0,0,0,607,617,1,0,0,0,608,
        610,5,135,0,0,609,608,1,0,0,0,609,610,1,0,0,0,610,611,1,0,0,0,611,
        612,5,70,0,0,612,615,5,135,0,0,613,616,5,5,0,0,614,616,3,42,21,0,
        615,613,1,0,0,0,615,614,1,0,0,0,616,618,1,0,0,0,617,609,1,0,0,0,
        617,618,1,0,0,0,618,41,1,0,0,0,619,630,3,44,22,0,620,622,5,135,0,
        0,621,620,1,0,0,0,621,622,1,0,0,0,622,623,1,0,0,0,623,625,5,1,0,
        0,624,626,5,135,0,0,625,624,1,0,0,0,625,626,1,0,0,0,626,627,1,0,
        0,0,627,629,3,44,22,0,628,621,1,0,0,0,629,632,1,0,0,0,630,628,1,
        0,0,0,630,631,1,0,0,0,631,637,1,0,0,0,632,630,1,0,0,0,633,635,5,
        135,0,0,634,633,1,0,0,0,634,635,1,0,0,0,635,636,1,0,0,0,636,638,
        3,184,92,0,637,634,1,0,0,0,637,638,1,0,0,0,638,43,1,0,0,0,639,644,
        3,260,130,0,640,641,5,135,0,0,641,642,5,61,0,0,642,643,5,135,0,0,
        643,645,3,266,133,0,644,640,1,0,0,0,644,645,1,0,0,0,645,45,1,0,0,
        0,646,648,3,146,73,0,647,649,5,135,0,0,648,647,1,0,0,0,648,649,1,
        0,0,0,649,651,1,0,0,0,650,646,1,0,0,0,651,654,1,0,0,0,652,650,1,
        0,0,0,652,653,1,0,0,0,653,661,1,0,0,0,654,652,1,0,0,0,655,657,3,
        6,3,0,656,658,5,135,0,0,657,656,1,0,0,0,657,658,1,0,0,0,658,660,
        1,0,0,0,659,655,1,0,0,0,660,663,1,0,0,0,661,659,1,0,0,0,661,662,
        1,0,0,0,662,664,1,0,0,0,663,661,1,0,0,0,664,666,3,48,24,0,665,667,
        5,135,0,0,666,665,1,0,0,0,666,667,1,0,0,0,667,47,1,0,0,0,668,669,
        5,71,0,0,669,674,3,170,85,0,670,672,5,135,0,0,671,670,1,0,0,0,671,
        672,1,0,0,0,672,673,1,0,0,0,673,675,3,184,92,0,674,671,1,0,0,0,674,
        675,1,0,0,0,675,49,1,0,0,0,676,678,5,102,0,0,677,679,5,135,0,0,678,
        677,1,0,0,0,678,679,1,0,0,0,679,680,1,0,0,0,680,682,5,6,0,0,681,
        683,5,135,0,0,682,681,1,0,0,0,682,683,1,0,0,0,683,692,1,0,0,0,684,
        693,3,138,69,0,685,690,3,186,93,0,686,688,5,135,0,0,687,686,1,0,
        0,0,687,688,1,0,0,0,688,689,1,0,0,0,689,691,3,184,92,0,690,687,1,
        0,0,0,690,691,1,0,0,0,691,693,1,0,0,0,692,684,1,0,0,0,692,685,1,
        0,0,0,693,695,1,0,0,0,694,696,5,135,0,0,695,694,1,0,0,0,695,696,
        1,0,0,0,696,697,1,0,0,0,697,698,5,7,0,0,698,51,1,0,0,0,699,704,3,
        252,126,0,700,702,5,135,0,0,701,700,1,0,0,0,701,702,1,0,0,0,702,
        703,1,0,0,0,703,705,3,184,92,0,704,701,1,0,0,0,704,705,1,0,0,0,705,
        53,1,0,0,0,706,708,5,50,0,0,707,709,5,135,0,0,708,707,1,0,0,0,708,
        709,1,0,0,0,709,710,1,0,0,0,710,711,3,214,107,0,711,55,1,0,0,0,712,
        714,5,52,0,0,713,715,5,135,0,0,714,713,1,0,0,0,714,715,1,0,0,0,715,
        716,1,0,0,0,716,717,3,214,107,0,717,57,1,0,0,0,718,720,3,266,133,
        0,719,721,5,135,0,0,720,719,1,0,0,0,720,721,1,0,0,0,721,722,1,0,
        0,0,722,724,5,2,0,0,723,725,5,135,0,0,724,723,1,0,0,0,724,725,1,
        0,0,0,725,726,1,0,0,0,726,727,3,60,30,0,727,740,1,0,0,0,728,730,
        3,266,133,0,729,731,5,135,0,0,730,729,1,0,0,0,730,731,1,0,0,0,731,
        732,1,0,0,0,732,734,5,2,0,0,733,735,5,135,0,0,734,733,1,0,0,0,734,
        735,1,0,0,0,735,736,1,0,0,0,736,737,3,188,94,0,737,740,1,0,0,0,738,
        740,3,188,94,0,739,718,1,0,0,0,739,728,1,0,0,0,739,738,1,0,0,0,740,
        59,1,0,0,0,741,743,3,254,127,0,742,744,5,135,0,0,743,742,1,0,0,0,
        743,744,1,0,0,0,744,745,1,0,0,0,745,747,5,8,0,0,746,748,5,135,0,
        0,747,746,1,0,0,0,747,748,1,0,0,0,748,749,1,0,0,0,749,751,3,62,31,
        0,750,752,5,135,0,0,751,750,1,0,0,0,751,752,1,0,0,0,752,753,1,0,
        0,0,753,754,5,9,0,0,754,61,1,0,0,0,755,757,3,64,32,0,756,758,5,135,
        0,0,757,756,1,0,0,0,757,758,1,0,0,0,758,759,1,0,0,0,759,761,3,196,
        98,0,760,762,5,135,0,0,761,760,1,0,0,0,761,762,1,0,0,0,762,763,1,
        0,0,0,763,764,3,64,32,0,764,63,1,0,0,0,765,767,5,8,0,0,766,768,5,
        135,0,0,767,766,1,0,0,0,767,768,1,0,0,0,768,773,1,0,0,0,769,771,
        3,266,133,0,770,772,5,135,0,0,771,770,1,0,0,0,771,772,1,0,0,0,772,
        774,1,0,0,0,773,769,1,0,0,0,773,774,1,0,0,0,774,779,1,0,0,0,775,
        777,3,202,101,0,776,778,5,135,0,0,777,776,1,0,0,0,777,778,1,0,0,
        0,778,780,1,0,0,0,779,775,1,0,0,0,779,780,1,0,0,0,780,785,1,0,0,
        0,781,783,3,114,57,0,782,784,5,135,0,0,783,782,1,0,0,0,783,784,1,
        0,0,0,784,786,1,0,0,0,785,781,1,0,0,0,785,786,1,0,0,0,786,791,1,
        0,0,0,787,789,3,66,33,0,788,790,5,135,0,0,789,788,1,0,0,0,789,790,
        1,0,0,0,790,792,1,0,0,0,791,787,1,0,0,0,791,792,1,0,0,0,792,793,
        1,0,0,0,793,794,5,9,0,0,794,65,1,0,0,0,795,798,3,68,34,0,796,798,
        3,280,140,0,797,795,1,0,0,0,797,796,1,0,0,0,798,67,1,0,0,0,799,834,
        5,6,0,0,800,802,5,135,0,0,801,800,1,0,0,0,801,802,1,0,0,0,802,803,
        1,0,0,0,803,805,3,70,35,0,804,806,5,135,0,0,805,804,1,0,0,0,805,
        806,1,0,0,0,806,807,1,0,0,0,807,809,5,10,0,0,808,810,5,135,0,0,809,
        808,1,0,0,0,809,810,1,0,0,0,810,811,1,0,0,0,811,831,3,72,36,0,812,
        814,5,135,0,0,813,812,1,0,0,0,813,814,1,0,0,0,814,815,1,0,0,0,815,
        817,5,1,0,0,816,818,5,135,0,0,817,816,1,0,0,0,817,818,1,0,0,0,818,
        819,1,0,0,0,819,821,3,70,35,0,820,822,5,135,0,0,821,820,1,0,0,0,
        821,822,1,0,0,0,822,823,1,0,0,0,823,825,5,10,0,0,824,826,5,135,0,
        0,825,824,1,0,0,0,825,826,1,0,0,0,826,827,1,0,0,0,827,828,3,72,36,
        0,828,830,1,0,0,0,829,813,1,0,0,0,830,833,1,0,0,0,831,829,1,0,0,
        0,831,832,1,0,0,0,832,835,1,0,0,0,833,831,1,0,0,0,834,801,1,0,0,
        0,834,835,1,0,0,0,835,837,1,0,0,0,836,838,5,135,0,0,837,836,1,0,
        0,0,837,838,1,0,0,0,838,839,1,0,0,0,839,840,5,7,0,0,840,69,1,0,0,
        0,841,846,3,278,139,0,842,844,5,135,0,0,843,842,1,0,0,0,843,844,
        1,0,0,0,844,845,1,0,0,0,845,847,3,114,57,0,846,843,1,0,0,0,846,847,
        1,0,0,0,847,71,1,0,0,0,848,850,3,214,107,0,849,851,5,135,0,0,850,
        849,1,0,0,0,850,851,1,0,0,0,851,862,1,0,0,0,852,854,5,8,0,0,853,
        855,5,135,0,0,854,853,1,0,0,0,854,855,1,0,0,0,855,856,1,0,0,0,856,
        858,3,114,57,0,857,859,5,135,0,0,858,857,1,0,0,0,858,859,1,0,0,0,
        859,860,1,0,0,0,860,861,5,9,0,0,861,863,1,0,0,0,862,852,1,0,0,0,
        862,863,1,0,0,0,863,73,1,0,0,0,864,866,5,11,0,0,865,867,5,135,0,
        0,866,865,1,0,0,0,866,867,1,0,0,0,867,872,1,0,0,0,868,870,3,266,
        133,0,869,871,5,135,0,0,870,869,1,0,0,0,870,871,1,0,0,0,871,873,
        1,0,0,0,872,868,1,0,0,0,872,873,1,0,0,0,873,878,1,0,0,0,874,876,
        3,200,100,0,875,877,5,135,0,0,876,875,1,0,0,0,876,877,1,0,0,0,877,
        879,1,0,0,0,878,874,1,0,0,0,878,879,1,0,0,0,879,881,1,0,0,0,880,
        882,3,206,103,0,881,880,1,0,0,0,881,882,1,0,0,0,882,887,1,0,0,0,
        883,885,3,114,57,0,884,886,5,135,0,0,885,884,1,0,0,0,885,886,1,0,
        0,0,886,888,1,0,0,0,887,883,1,0,0,0,887,888,1,0,0,0,888,893,1,0,
        0,0,889,891,3,198,99,0,890,892,5,135,0,0,891,890,1,0,0,0,891,892,
        1,0,0,0,892,894,1,0,0,0,893,889,1,0,0,0,893,894,1,0,0,0,894,895,
        1,0,0,0,895,896,5,12,0,0,896,75,1,0,0,0,897,909,3,78,39,0,898,900,
        5,135,0,0,899,898,1,0,0,0,899,900,1,0,0,0,900,901,1,0,0,0,901,903,
        3,88,44,0,902,904,5,135,0,0,903,902,1,0,0,0,903,904,1,0,0,0,904,
        905,1,0,0,0,905,906,3,78,39,0,906,908,1,0,0,0,907,899,1,0,0,0,908,
        911,1,0,0,0,909,907,1,0,0,0,909,910,1,0,0,0,910,77,1,0,0,0,911,909,
        1,0,0,0,912,917,3,80,40,0,913,918,3,112,56,0,914,918,3,226,113,0,
        915,918,3,228,114,0,916,918,3,230,115,0,917,913,1,0,0,0,917,914,
        1,0,0,0,917,915,1,0,0,0,917,916,1,0,0,0,917,918,1,0,0,0,918,79,1,
        0,0,0,919,931,3,90,45,0,920,922,5,135,0,0,921,920,1,0,0,0,921,922,
        1,0,0,0,922,923,1,0,0,0,923,925,3,86,43,0,924,926,5,135,0,0,925,
        924,1,0,0,0,925,926,1,0,0,0,926,927,1,0,0,0,927,928,3,90,45,0,928,
        930,1,0,0,0,929,921,1,0,0,0,930,933,1,0,0,0,931,929,1,0,0,0,931,
        932,1,0,0,0,932,81,1,0,0,0,933,931,1,0,0,0,934,935,7,0,0,0,935,83,
        1,0,0,0,936,937,5,15,0,0,937,85,1,0,0,0,938,939,7,1,0,0,939,87,1,
        0,0,0,940,941,7,2,0,0,941,89,1,0,0,0,942,954,3,92,46,0,943,945,5,
        135,0,0,944,943,1,0,0,0,944,945,1,0,0,0,945,946,1,0,0,0,946,948,
        3,82,41,0,947,949,5,135,0,0,948,947,1,0,0,0,948,949,1,0,0,0,949,
        950,1,0,0,0,950,951,3,92,46,0,951,953,1,0,0,0,952,944,1,0,0,0,953,
        956,1,0,0,0,954,952,1,0,0,0,954,955,1,0,0,0,955,91,1,0,0,0,956,954,
        1,0,0,0,957,969,3,232,116,0,958,960,5,135,0,0,959,958,1,0,0,0,959,
        960,1,0,0,0,960,961,1,0,0,0,961,963,3,84,42,0,962,964,5,135,0,0,
        963,962,1,0,0,0,963,964,1,0,0,0,964,965,1,0,0,0,965,966,3,232,116,
        0,966,968,1,0,0,0,967,959,1,0,0,0,968,971,1,0,0,0,969,967,1,0,0,
        0,969,970,1,0,0,0,970,93,1,0,0,0,971,969,1,0,0,0,972,975,3,104,52,
        0,973,975,3,106,53,0,974,972,1,0,0,0,974,973,1,0,0,0,975,980,1,0,
        0,0,976,979,3,96,48,0,977,979,3,98,49,0,978,976,1,0,0,0,978,977,
        1,0,0,0,979,982,1,0,0,0,980,978,1,0,0,0,980,981,1,0,0,0,981,95,1,
        0,0,0,982,980,1,0,0,0,983,985,5,135,0,0,984,983,1,0,0,0,984,985,
        1,0,0,0,985,986,1,0,0,0,986,988,5,11,0,0,987,989,5,135,0,0,988,987,
        1,0,0,0,988,989,1,0,0,0,989,990,1,0,0,0,990,992,3,100,50,0,991,993,
        5,135,0,0,992,991,1,0,0,0,992,993,1,0,0,0,993,994,1,0,0,0,994,995,
        5,12,0,0,995,97,1,0,0,0,996,998,5,135,0,0,997,996,1,0,0,0,997,998,
        1,0,0,0,998,999,1,0,0,0,999,1001,5,11,0,0,1000,1002,5,135,0,0,1001,
        1000,1,0,0,0,1001,1002,1,0,0,0,1002,1004,1,0,0,0,1003,1005,3,100,
        50,0,1004,1003,1,0,0,0,1004,1005,1,0,0,0,1005,1007,1,0,0,0,1006,
        1008,5,135,0,0,1007,1006,1,0,0,0,1007,1008,1,0,0,0,1008,1009,1,0,
        0,0,1009,1011,5,23,0,0,1010,1012,5,135,0,0,1011,1010,1,0,0,0,1011,
        1012,1,0,0,0,1012,1014,1,0,0,0,1013,1015,3,102,51,0,1014,1013,1,
        0,0,0,1014,1015,1,0,0,0,1015,1017,1,0,0,0,1016,1018,5,135,0,0,1017,
        1016,1,0,0,0,1017,1018,1,0,0,0,1018,1019,1,0,0,0,1019,1020,5,12,
        0,0,1020,99,1,0,0,0,1021,1022,3,214,107,0,1022,101,1,0,0,0,1023,
        1024,3,214,107,0,1024,103,1,0,0,0,1025,1032,3,236,118,0,1026,1028,
        5,135,0,0,1027,1026,1,0,0,0,1027,1028,1,0,0,0,1028,1029,1,0,0,0,
        1029,1031,3,234,117,0,1030,1027,1,0,0,0,1031,1034,1,0,0,0,1032,1030,
        1,0,0,0,1032,1033,1,0,0,0,1033,1042,1,0,0,0,1034,1032,1,0,0,0,1035,
        1037,5,135,0,0,1036,1035,1,0,0,0,1036,1037,1,0,0,0,1037,1040,1,0,
        0,0,1038,1041,3,202,101,0,1039,1041,3,114,57,0,1040,1038,1,0,0,0,
        1040,1039,1,0,0,0,1041,1043,1,0,0,0,1042,1036,1,0,0,0,1042,1043,
        1,0,0,0,1043,105,1,0,0,0,1044,1051,3,236,118,0,1045,1047,5,135,0,
        0,1046,1045,1,0,0,0,1046,1047,1,0,0,0,1047,1048,1,0,0,0,1048,1050,
        3,234,117,0,1049,1046,1,0,0,0,1050,1053,1,0,0,0,1051,1049,1,0,0,
        0,1051,1052,1,0,0,0,1052,1064,1,0,0,0,1053,1051,1,0,0,0,1054,1062,
        3,108,54,0,1055,1057,5,135,0,0,1056,1055,1,0,0,0,1056,1057,1,0,0,
        0,1057,1060,1,0,0,0,1058,1061,5,47,0,0,1059,1061,3,114,57,0,1060,
        1058,1,0,0,0,1060,1059,1,0,0,0,1061,1063,1,0,0,0,1062,1056,1,0,0,
        0,1062,1063,1,0,0,0,1063,1065,1,0,0,0,1064,1054,1,0,0,0,1064,1065,
        1,0,0,0,1065,1067,1,0,0,0,1066,1068,5,135,0,0,1067,1066,1,0,0,0,
        1067,1068,1,0,0,0,1068,1069,1,0,0,0,1069,1070,3,110,55,0,1070,107,
        1,0,0,0,1071,1073,5,135,0,0,1072,1071,1,0,0,0,1072,1073,1,0,0,0,
        1073,1074,1,0,0,0,1074,1075,3,234,117,0,1075,109,1,0,0,0,1076,1083,
        5,46,0,0,1077,1079,5,135,0,0,1078,1077,1,0,0,0,1078,1079,1,0,0,0,
        1079,1080,1,0,0,0,1080,1082,3,234,117,0,1081,1078,1,0,0,0,1082,1085,
        1,0,0,0,1083,1081,1,0,0,0,1083,1084,1,0,0,0,1084,111,1,0,0,0,1085,
        1083,1,0,0,0,1086,1087,5,135,0,0,1087,1088,7,3,0,0,1088,1089,5,135,
        0,0,1089,1090,3,80,40,0,1090,113,1,0,0,0,1091,1093,5,46,0,0,1092,
        1094,5,135,0,0,1093,1092,1,0,0,0,1093,1094,1,0,0,0,1094,1095,1,0,
        0,0,1095,1105,5,8,0,0,1096,1098,5,135,0,0,1097,1096,1,0,0,0,1097,
        1098,1,0,0,0,1098,1099,1,0,0,0,1099,1101,3,116,58,0,1100,1102,5,
        135,0,0,1101,1100,1,0,0,0,1101,1102,1,0,0,0,1102,1103,1,0,0,0,1103,
        1104,5,1,0,0,1104,1106,1,0,0,0,1105,1097,1,0,0,0,1105,1106,1,0,0,
        0,1106,1108,1,0,0,0,1107,1109,5,135,0,0,1108,1107,1,0,0,0,1108,1109,
        1,0,0,0,1109,1112,1,0,0,0,1110,1113,3,116,58,0,1111,1113,5,48,0,
        0,1112,1110,1,0,0,0,1112,1111,1,0,0,0,1113,1115,1,0,0,0,1114,1116,
        5,135,0,0,1115,1114,1,0,0,0,1115,1116,1,0,0,0,1116,1117,1,0,0,0,
        1117,1118,5,9,0,0,1118,115,1,0,0,0,1119,1122,5,117,0,0,1120,1122,
        3,126,63,0,1121,1119,1,0,0,0,1121,1120,1,0,0,0,1122,117,1,0,0,0,
        1123,1125,3,254,127,0,1124,1126,5,135,0,0,1125,1124,1,0,0,0,1125,
        1126,1,0,0,0,1126,1127,1,0,0,0,1127,1129,5,8,0,0,1128,1130,5,135,
        0,0,1129,1128,1,0,0,0,1129,1130,1,0,0,0,1130,1135,1,0,0,0,1131,1133,
        5,73,0,0,1132,1134,5,135,0,0,1133,1132,1,0,0,0,1133,1134,1,0,0,0,
        1134,1136,1,0,0,0,1135,1131,1,0,0,0,1135,1136,1,0,0,0,1136,1154,
        1,0,0,0,1137,1139,3,120,60,0,1138,1140,5,135,0,0,1139,1138,1,0,0,
        0,1139,1140,1,0,0,0,1140,1151,1,0,0,0,1141,1143,5,1,0,0,1142,1144,
        5,135,0,0,1143,1142,1,0,0,0,1143,1144,1,0,0,0,1144,1145,1,0,0,0,
        1145,1147,3,120,60,0,1146,1148,5,135,0,0,1147,1146,1,0,0,0,1147,
        1148,1,0,0,0,1148,1150,1,0,0,0,1149,1141,1,0,0,0,1150,1153,1,0,0,
        0,1151,1149,1,0,0,0,1151,1152,1,0,0,0,1152,1155,1,0,0,0,1153,1151,
        1,0,0,0,1154,1137,1,0,0,0,1154,1155,1,0,0,0,1155,1156,1,0,0,0,1156,
        1157,5,9,0,0,1157,119,1,0,0,0,1158,1159,3,214,107,0,1159,121,1,0,
        0,0,1160,1162,5,11,0,0,1161,1163,5,135,0,0,1162,1161,1,0,0,0,1162,
        1163,1,0,0,0,1163,1181,1,0,0,0,1164,1166,3,124,62,0,1165,1167,5,
        135,0,0,1166,1165,1,0,0,0,1166,1167,1,0,0,0,1167,1178,1,0,0,0,1168,
        1170,5,1,0,0,1169,1171,5,135,0,0,1170,1169,1,0,0,0,1170,1171,1,0,
        0,0,1171,1172,1,0,0,0,1172,1174,3,124,62,0,1173,1175,5,135,0,0,1174,
        1173,1,0,0,0,1174,1175,1,0,0,0,1175,1177,1,0,0,0,1176,1168,1,0,0,
        0,1177,1180,1,0,0,0,1178,1176,1,0,0,0,1178,1179,1,0,0,0,1179,1182,
        1,0,0,0,1180,1178,1,0,0,0,1181,1164,1,0,0,0,1181,1182,1,0,0,0,1182,
        1183,1,0,0,0,1183,1184,5,12,0,0,1184,123,1,0,0,0,1185,1186,3,214,
        107,0,1186,125,1,0,0,0,1187,1189,5,6,0,0,1188,1190,5,135,0,0,1189,
        1188,1,0,0,0,1189,1190,1,0,0,0,1190,1202,1,0,0,0,1191,1199,3,128,
        64,0,1192,1194,5,1,0,0,1193,1195,5,135,0,0,1194,1193,1,0,0,0,1194,
        1195,1,0,0,0,1195,1196,1,0,0,0,1196,1198,3,128,64,0,1197,1192,1,
        0,0,0,1198,1201,1,0,0,0,1199,1197,1,0,0,0,1199,1200,1,0,0,0,1200,
        1203,1,0,0,0,1201,1199,1,0,0,0,1202,1191,1,0,0,0,1202,1203,1,0,0,
        0,1203,1204,1,0,0,0,1204,1205,5,7,0,0,1205,127,1,0,0,0,1206,1208,
        3,278,139,0,1207,1209,5,135,0,0,1208,1207,1,0,0,0,1208,1209,1,0,
        0,0,1209,1210,1,0,0,0,1210,1212,5,10,0,0,1211,1213,5,135,0,0,1212,
        1211,1,0,0,0,1212,1213,1,0,0,0,1213,1214,1,0,0,0,1214,1216,3,214,
        107,0,1215,1217,5,135,0,0,1216,1215,1,0,0,0,1216,1217,1,0,0,0,1217,
        129,1,0,0,0,1218,1219,7,4,0,0,1219,131,1,0,0,0,1220,1221,7,5,0,0,
        1221,133,1,0,0,0,1222,1224,5,135,0,0,1223,1222,1,0,0,0,1223,1224,
        1,0,0,0,1224,1225,1,0,0,0,1225,1230,3,136,68,0,1226,1228,5,135,0,
        0,1227,1226,1,0,0,0,1227,1228,1,0,0,0,1228,1229,1,0,0,0,1229,1231,
        5,24,0,0,1230,1227,1,0,0,0,1230,1231,1,0,0,0,1231,1233,1,0,0,0,1232,
        1234,5,135,0,0,1233,1232,1,0,0,0,1233,1234,1,0,0,0,1234,1235,1,0,
        0,0,1235,1236,5,0,0,1,1236,135,1,0,0,0,1237,1238,3,0,0,0,1238,137,
        1,0,0,0,1239,1246,3,142,71,0,1240,1242,5,135,0,0,1241,1240,1,0,0,
        0,1241,1242,1,0,0,0,1242,1243,1,0,0,0,1243,1245,3,140,70,0,1244,
        1241,1,0,0,0,1245,1248,1,0,0,0,1246,1244,1,0,0,0,1246,1247,1,0,0,
        0,1247,139,1,0,0,0,1248,1246,1,0,0,0,1249,1250,5,56,0,0,1250,1251,
        5,135,0,0,1251,1253,5,57,0,0,1252,1254,5,135,0,0,1253,1252,1,0,0,
        0,1253,1254,1,0,0,0,1254,1255,1,0,0,0,1255,1262,3,142,71,0,1256,
        1258,5,56,0,0,1257,1259,5,135,0,0,1258,1257,1,0,0,0,1258,1259,1,
        0,0,0,1259,1260,1,0,0,0,1260,1262,3,142,71,0,1261,1249,1,0,0,0,1261,
        1256,1,0,0,0,1262,141,1,0,0,0,1263,1266,3,144,72,0,1264,1266,3,2,
        1,0,1265,1263,1,0,0,0,1265,1264,1,0,0,0,1266,143,1,0,0,0,1267,1269,
        3,146,73,0,1268,1270,5,135,0,0,1269,1268,1,0,0,0,1269,1270,1,0,0,
        0,1270,1272,1,0,0,0,1271,1267,1,0,0,0,1272,1275,1,0,0,0,1273,1271,
        1,0,0,0,1273,1274,1,0,0,0,1274,1276,1,0,0,0,1275,1273,1,0,0,0,1276,
        1303,3,168,84,0,1277,1279,3,146,73,0,1278,1280,5,135,0,0,1279,1278,
        1,0,0,0,1279,1280,1,0,0,0,1280,1282,1,0,0,0,1281,1277,1,0,0,0,1282,
        1285,1,0,0,0,1283,1281,1,0,0,0,1283,1284,1,0,0,0,1284,1286,1,0,0,
        0,1285,1283,1,0,0,0,1286,1293,3,6,3,0,1287,1289,5,135,0,0,1288,1287,
        1,0,0,0,1288,1289,1,0,0,0,1289,1290,1,0,0,0,1290,1292,3,6,3,0,1291,
        1288,1,0,0,0,1292,1295,1,0,0,0,1293,1291,1,0,0,0,1293,1294,1,0,0,
        0,1294,1300,1,0,0,0,1295,1293,1,0,0,0,1296,1298,5,135,0,0,1297,1296,
        1,0,0,0,1297,1298,1,0,0,0,1298,1299,1,0,0,0,1299,1301,3,168,84,0,
        1300,1297,1,0,0,0,1300,1301,1,0,0,0,1301,1303,1,0,0,0,1302,1273,
        1,0,0,0,1302,1283,1,0,0,0,1303,145,1,0,0,0,1304,1308,3,4,2,0,1305,
        1308,3,148,74,0,1306,1308,3,38,19,0,1307,1304,1,0,0,0,1307,1305,
        1,0,0,0,1307,1306,1,0,0,0,1308,147,1,0,0,0,1309,1311,5,60,0,0,1310,
        1312,5,135,0,0,1311,1310,1,0,0,0,1311,1312,1,0,0,0,1312,1313,1,0,
        0,0,1313,1314,3,214,107,0,1314,1315,5,135,0,0,1315,1316,5,61,0,0,
        1316,1317,5,135,0,0,1317,1318,3,266,133,0,1318,149,1,0,0,0,1319,
        1321,5,62,0,0,1320,1322,5,135,0,0,1321,1320,1,0,0,0,1321,1322,1,
        0,0,0,1322,1323,1,0,0,0,1323,1328,3,58,29,0,1324,1325,5,135,0,0,
        1325,1327,3,152,76,0,1326,1324,1,0,0,0,1327,1330,1,0,0,0,1328,1326,
        1,0,0,0,1328,1329,1,0,0,0,1329,151,1,0,0,0,1330,1328,1,0,0,0,1331,
        1332,5,63,0,0,1332,1333,5,135,0,0,1333,1334,5,59,0,0,1334,1335,5,
        135,0,0,1335,1342,3,156,78,0,1336,1337,5,63,0,0,1337,1338,5,135,
        0,0,1338,1339,5,64,0,0,1339,1340,5,135,0,0,1340,1342,3,156,78,0,
        1341,1331,1,0,0,0,1341,1336,1,0,0,0,1342,153,1,0,0,0,1343,1345,5,
        64,0,0,1344,1346,5,135,0,0,1345,1344,1,0,0,0,1345,1346,1,0,0,0,1346,
        1347,1,0,0,0,1347,1348,3,186,93,0,1348,155,1,0,0,0,1349,1351,5,65,
        0,0,1350,1352,5,135,0,0,1351,1350,1,0,0,0,1351,1352,1,0,0,0,1352,
        1353,1,0,0,0,1353,1364,3,16,8,0,1354,1356,5,135,0,0,1355,1354,1,
        0,0,0,1355,1356,1,0,0,0,1356,1357,1,0,0,0,1357,1359,5,1,0,0,1358,
        1360,5,135,0,0,1359,1358,1,0,0,0,1359,1360,1,0,0,0,1360,1361,1,0,
        0,0,1361,1363,3,16,8,0,1362,1355,1,0,0,0,1363,1366,1,0,0,0,1364,
        1362,1,0,0,0,1364,1365,1,0,0,0,1365,157,1,0,0,0,1366,1364,1,0,0,
        0,1367,1368,5,66,0,0,1368,1370,5,135,0,0,1369,1367,1,0,0,0,1369,
        1370,1,0,0,0,1370,1371,1,0,0,0,1371,1373,5,67,0,0,1372,1374,5,135,
        0,0,1373,1372,1,0,0,0,1373,1374,1,0,0,0,1374,1375,1,0,0,0,1375,1386,
        3,214,107,0,1376,1378,5,135,0,0,1377,1376,1,0,0,0,1377,1378,1,0,
        0,0,1378,1379,1,0,0,0,1379,1381,5,1,0,0,1380,1382,5,135,0,0,1381,
        1380,1,0,0,0,1381,1382,1,0,0,0,1382,1383,1,0,0,0,1383,1385,3,214,
        107,0,1384,1377,1,0,0,0,1385,1388,1,0,0,0,1386,1384,1,0,0,0,1386,
        1387,1,0,0,0,1387,159,1,0,0,0,1388,1386,1,0,0,0,1389,1390,5,68,0,
        0,1390,1391,5,135,0,0,1391,1402,3,30,15,0,1392,1394,5,135,0,0,1393,
        1392,1,0,0,0,1393,1394,1,0,0,0,1394,1395,1,0,0,0,1395,1397,5,1,0,
        0,1396,1398,5,135,0,0,1397,1396,1,0,0,0,1397,1398,1,0,0,0,1398,1399,
        1,0,0,0,1399,1401,3,30,15,0,1400,1393,1,0,0,0,1401,1404,1,0,0,0,
        1402,1400,1,0,0,0,1402,1403,1,0,0,0,1403,161,1,0,0,0,1404,1402,1,
        0,0,0,1405,1416,3,164,82,0,1406,1408,5,135,0,0,1407,1406,1,0,0,0,
        1407,1408,1,0,0,0,1408,1409,1,0,0,0,1409,1411,5,1,0,0,1410,1412,
        5,135,0,0,1411,1410,1,0,0,0,1411,1412,1,0,0,0,1412,1413,1,0,0,0,
        1413,1415,3,164,82,0,1414,1407,1,0,0,0,1415,1418,1,0,0,0,1416,1414,
        1,0,0,0,1416,1417,1,0,0,0,1417,1423,1,0,0,0,1418,1416,1,0,0,0,1419,
        1421,5,135,0,0,1420,1419,1,0,0,0,1420,1421,1,0,0,0,1421,1422,1,0,
        0,0,1422,1424,3,184,92,0,1423,1420,1,0,0,0,1423,1424,1,0,0,0,1424,
        163,1,0,0,0,1425,1426,3,260,130,0,1426,1427,5,135,0,0,1427,1428,
        5,61,0,0,1428,1429,5,135,0,0,1429,1431,1,0,0,0,1430,1425,1,0,0,0,
        1430,1431,1,0,0,0,1431,1432,1,0,0,0,1432,1433,3,266,133,0,1433,165,
        1,0,0,0,1434,1435,5,71,0,0,1435,1440,3,170,85,0,1436,1438,5,135,
        0,0,1437,1436,1,0,0,0,1437,1438,1,0,0,0,1438,1439,1,0,0,0,1439,1441,
        3,184,92,0,1440,1437,1,0,0,0,1440,1441,1,0,0,0,1441,167,1,0,0,0,
        1442,1443,5,72,0,0,1443,1444,3,170,85,0,1444,169,1,0,0,0,1445,1447,
        5,135,0,0,1446,1445,1,0,0,0,1446,1447,1,0,0,0,1447,1448,1,0,0,0,
        1448,1450,5,73,0,0,1449,1446,1,0,0,0,1449,1450,1,0,0,0,1450,1451,
        1,0,0,0,1451,1452,5,135,0,0,1452,1455,3,172,86,0,1453,1454,5,135,
        0,0,1454,1456,3,176,88,0,1455,1453,1,0,0,0,1455,1456,1,0,0,0,1456,
        1459,1,0,0,0,1457,1458,5,135,0,0,1458,1460,3,178,89,0,1459,1457,
        1,0,0,0,1459,1460,1,0,0,0,1460,1463,1,0,0,0,1461,1462,5,135,0,0,
        1462,1464,3,180,90,0,1463,1461,1,0,0,0,1463,1464,1,0,0,0,1464,171,
        1,0,0,0,1465,1476,5,5,0,0,1466,1468,5,135,0,0,1467,1466,1,0,0,0,
        1467,1468,1,0,0,0,1468,1469,1,0,0,0,1469,1471,5,1,0,0,1470,1472,
        5,135,0,0,1471,1470,1,0,0,0,1471,1472,1,0,0,0,1472,1473,1,0,0,0,
        1473,1475,3,174,87,0,1474,1467,1,0,0,0,1475,1478,1,0,0,0,1476,1474,
        1,0,0,0,1476,1477,1,0,0,0,1477,1494,1,0,0,0,1478,1476,1,0,0,0,1479,
        1490,3,174,87,0,1480,1482,5,135,0,0,1481,1480,1,0,0,0,1481,1482,
        1,0,0,0,1482,1483,1,0,0,0,1483,1485,5,1,0,0,1484,1486,5,135,0,0,
        1485,1484,1,0,0,0,1485,1486,1,0,0,0,1486,1487,1,0,0,0,1487,1489,
        3,174,87,0,1488,1481,1,0,0,0,1489,1492,1,0,0,0,1490,1488,1,0,0,0,
        1490,1491,1,0,0,0,1491,1494,1,0,0,0,1492,1490,1,0,0,0,1493,1465,
        1,0,0,0,1493,1479,1,0,0,0,1494,173,1,0,0,0,1495,1496,3,214,107,0,
        1496,1497,5,135,0,0,1497,1498,5,61,0,0,1498,1499,5,135,0,0,1499,
        1500,3,266,133,0,1500,1503,1,0,0,0,1501,1503,3,214,107,0,1502,1495,
        1,0,0,0,1502,1501,1,0,0,0,1503,175,1,0,0,0,1504,1505,5,74,0,0,1505,
        1506,5,135,0,0,1506,1507,5,75,0,0,1507,1508,5,135,0,0,1508,1516,
        3,182,91,0,1509,1511,5,1,0,0,1510,1512,5,135,0,0,1511,1510,1,0,0,
        0,1511,1512,1,0,0,0,1512,1513,1,0,0,0,1513,1515,3,182,91,0,1514,
        1509,1,0,0,0,1515,1518,1,0,0,0,1516,1514,1,0,0,0,1516,1517,1,0,0,
        0,1517,177,1,0,0,0,1518,1516,1,0,0,0,1519,1520,5,76,0,0,1520,1521,
        5,135,0,0,1521,1522,3,214,107,0,1522,179,1,0,0,0,1523,1524,5,77,
        0,0,1524,1525,5,135,0,0,1525,1526,3,214,107,0,1526,181,1,0,0,0,1527,
        1532,3,214,107,0,1528,1530,5,135,0,0,1529,1528,1,0,0,0,1529,1530,
        1,0,0,0,1530,1531,1,0,0,0,1531,1533,7,6,0,0,1532,1529,1,0,0,0,1532,
        1533,1,0,0,0,1533,183,1,0,0,0,1534,1535,5,82,0,0,1535,1536,5,135,
        0,0,1536,1537,3,214,107,0,1537,185,1,0,0,0,1538,1549,3,58,29,0,1539,
        1541,5,135,0,0,1540,1539,1,0,0,0,1540,1541,1,0,0,0,1541,1542,1,0,
        0,0,1542,1544,5,1,0,0,1543,1545,5,135,0,0,1544,1543,1,0,0,0,1544,
        1545,1,0,0,0,1545,1546,1,0,0,0,1546,1548,3,58,29,0,1547,1540,1,0,
        0,0,1548,1551,1,0,0,0,1549,1547,1,0,0,0,1549,1550,1,0,0,0,1550,187,
        1,0,0,0,1551,1549,1,0,0,0,1552,1553,3,190,95,0,1553,189,1,0,0,0,
        1554,1561,3,64,32,0,1555,1557,5,135,0,0,1556,1555,1,0,0,0,1556,1557,
        1,0,0,0,1557,1558,1,0,0,0,1558,1560,3,194,97,0,1559,1556,1,0,0,0,
        1560,1563,1,0,0,0,1561,1559,1,0,0,0,1561,1562,1,0,0,0,1562,1569,
        1,0,0,0,1563,1561,1,0,0,0,1564,1565,5,8,0,0,1565,1566,3,190,95,0,
        1566,1567,5,9,0,0,1567,1569,1,0,0,0,1568,1554,1,0,0,0,1568,1564,
        1,0,0,0,1569,191,1,0,0,0,1570,1575,3,64,32,0,1571,1573,5,135,0,0,
        1572,1571,1,0,0,0,1572,1573,1,0,0,0,1573,1574,1,0,0,0,1574,1576,
        3,194,97,0,1575,1572,1,0,0,0,1576,1577,1,0,0,0,1577,1575,1,0,0,0,
        1577,1578,1,0,0,0,1578,193,1,0,0,0,1579,1581,3,196,98,0,1580,1582,
        5,135,0,0,1581,1580,1,0,0,0,1581,1582,1,0,0,0,1582,1583,1,0,0,0,
        1583,1584,3,64,32,0,1584,195,1,0,0,0,1585,1587,3,284,142,0,1586,
        1588,5,135,0,0,1587,1586,1,0,0,0,1587,1588,1,0,0,0,1588,1589,1,0,
        0,0,1589,1591,3,288,144,0,1590,1592,5,135,0,0,1591,1590,1,0,0,0,
        1591,1592,1,0,0,0,1592,1594,1,0,0,0,1593,1595,3,74,37,0,1594,1593,
        1,0,0,0,1594,1595,1,0,0,0,1595,1597,1,0,0,0,1596,1598,5,135,0,0,
        1597,1596,1,0,0,0,1597,1598,1,0,0,0,1598,1599,1,0,0,0,1599,1601,
        3,288,144,0,1600,1602,5,135,0,0,1601,1600,1,0,0,0,1601,1602,1,0,
        0,0,1602,1603,1,0,0,0,1603,1604,3,286,143,0,1604,1650,1,0,0,0,1605,
        1607,3,284,142,0,1606,1608,5,135,0,0,1607,1606,1,0,0,0,1607,1608,
        1,0,0,0,1608,1609,1,0,0,0,1609,1611,3,288,144,0,1610,1612,5,135,
        0,0,1611,1610,1,0,0,0,1611,1612,1,0,0,0,1612,1614,1,0,0,0,1613,1615,
        3,74,37,0,1614,1613,1,0,0,0,1614,1615,1,0,0,0,1615,1617,1,0,0,0,
        1616,1618,5,135,0,0,1617,1616,1,0,0,0,1617,1618,1,0,0,0,1618,1619,
        1,0,0,0,1619,1620,3,288,144,0,1620,1650,1,0,0,0,1621,1623,3,288,
        144,0,1622,1624,5,135,0,0,1623,1622,1,0,0,0,1623,1624,1,0,0,0,1624,
        1626,1,0,0,0,1625,1627,3,74,37,0,1626,1625,1,0,0,0,1626,1627,1,0,
        0,0,1627,1629,1,0,0,0,1628,1630,5,135,0,0,1629,1628,1,0,0,0,1629,
        1630,1,0,0,0,1630,1631,1,0,0,0,1631,1633,3,288,144,0,1632,1634,5,
        135,0,0,1633,1632,1,0,0,0,1633,1634,1,0,0,0,1634,1635,1,0,0,0,1635,
        1636,3,286,143,0,1636,1650,1,0,0,0,1637,1639,3,288,144,0,1638,1640,
        5,135,0,0,1639,1638,1,0,0,0,1639,1640,1,0,0,0,1640,1642,1,0,0,0,
        1641,1643,3,74,37,0,1642,1641,1,0,0,0,1642,1643,1,0,0,0,1643,1645,
        1,0,0,0,1644,1646,5,135,0,0,1645,1644,1,0,0,0,1645,1646,1,0,0,0,
        1646,1647,1,0,0,0,1647,1648,3,288,144,0,1648,1650,1,0,0,0,1649,1585,
        1,0,0,0,1649,1605,1,0,0,0,1649,1621,1,0,0,0,1649,1637,1,0,0,0,1650,
        197,1,0,0,0,1651,1654,3,126,63,0,1652,1654,3,280,140,0,1653,1651,
        1,0,0,0,1653,1652,1,0,0,0,1654,199,1,0,0,0,1655,1657,5,10,0,0,1656,
        1658,5,135,0,0,1657,1656,1,0,0,0,1657,1658,1,0,0,0,1658,1659,1,0,
        0,0,1659,1673,3,210,105,0,1660,1662,5,135,0,0,1661,1660,1,0,0,0,
        1661,1662,1,0,0,0,1662,1663,1,0,0,0,1663,1665,5,25,0,0,1664,1666,
        5,10,0,0,1665,1664,1,0,0,0,1665,1666,1,0,0,0,1666,1668,1,0,0,0,1667,
        1669,5,135,0,0,1668,1667,1,0,0,0,1668,1669,1,0,0,0,1669,1670,1,0,
        0,0,1670,1672,3,210,105,0,1671,1661,1,0,0,0,1672,1675,1,0,0,0,1673,
        1671,1,0,0,0,1673,1674,1,0,0,0,1674,201,1,0,0,0,1675,1673,1,0,0,
        0,1676,1683,3,204,102,0,1677,1679,5,135,0,0,1678,1677,1,0,0,0,1678,
        1679,1,0,0,0,1679,1680,1,0,0,0,1680,1682,3,204,102,0,1681,1678,1,
        0,0,0,1682,1685,1,0,0,0,1683,1681,1,0,0,0,1683,1684,1,0,0,0,1684,
        203,1,0,0,0,1685,1683,1,0,0,0,1686,1688,5,10,0,0,1687,1689,5,135,
        0,0,1688,1687,1,0,0,0,1688,1689,1,0,0,0,1689,1690,1,0,0,0,1690,1691,
        3,208,104,0,1691,205,1,0,0,0,1692,1694,5,5,0,0,1693,1695,5,135,0,
        0,1694,1693,1,0,0,0,1694,1695,1,0,0,0,1695,1700,1,0,0,0,1696,1698,
        3,274,137,0,1697,1699,5,135,0,0,1698,1697,1,0,0,0,1698,1699,1,0,
        0,0,1699,1701,1,0,0,0,1700,1696,1,0,0,0,1700,1701,1,0,0,0,1701,1712,
        1,0,0,0,1702,1704,5,23,0,0,1703,1705,5,135,0,0,1704,1703,1,0,0,0,
        1704,1705,1,0,0,0,1705,1710,1,0,0,0,1706,1708,3,274,137,0,1707,1709,
        5,135,0,0,1708,1707,1,0,0,0,1708,1709,1,0,0,0,1709,1711,1,0,0,0,
        1710,1706,1,0,0,0,1710,1711,1,0,0,0,1711,1713,1,0,0,0,1712,1702,
        1,0,0,0,1712,1713,1,0,0,0,1713,207,1,0,0,0,1714,1715,3,282,141,0,
        1715,209,1,0,0,0,1716,1717,3,282,141,0,1717,211,1,0,0,0,1718,1723,
        3,236,118,0,1719,1721,5,135,0,0,1720,1719,1,0,0,0,1720,1721,1,0,
        0,0,1721,1722,1,0,0,0,1722,1724,3,234,117,0,1723,1720,1,0,0,0,1724,
        1725,1,0,0,0,1725,1723,1,0,0,0,1725,1726,1,0,0,0,1726,213,1,0,0,
        0,1727,1728,3,216,108,0,1728,215,1,0,0,0,1729,1736,3,218,109,0,1730,
        1731,5,135,0,0,1731,1732,5,83,0,0,1732,1733,5,135,0,0,1733,1735,
        3,218,109,0,1734,1730,1,0,0,0,1735,1738,1,0,0,0,1736,1734,1,0,0,
        0,1736,1737,1,0,0,0,1737,217,1,0,0,0,1738,1736,1,0,0,0,1739,1746,
        3,220,110,0,1740,1741,5,135,0,0,1741,1742,5,84,0,0,1742,1743,5,135,
        0,0,1743,1745,3,220,110,0,1744,1740,1,0,0,0,1745,1748,1,0,0,0,1746,
        1744,1,0,0,0,1746,1747,1,0,0,0,1747,219,1,0,0,0,1748,1746,1,0,0,
        0,1749,1756,3,222,111,0,1750,1751,5,135,0,0,1751,1752,5,85,0,0,1752,
        1753,5,135,0,0,1753,1755,3,222,111,0,1754,1750,1,0,0,0,1755,1758,
        1,0,0,0,1756,1754,1,0,0,0,1756,1757,1,0,0,0,1757,221,1,0,0,0,1758,
        1756,1,0,0,0,1759,1761,5,86,0,0,1760,1762,5,135,0,0,1761,1760,1,
        0,0,0,1761,1762,1,0,0,0,1762,1764,1,0,0,0,1763,1759,1,0,0,0,1764,
        1767,1,0,0,0,1765,1763,1,0,0,0,1765,1766,1,0,0,0,1766,1768,1,0,0,
        0,1767,1765,1,0,0,0,1768,1769,3,76,38,0,1769,223,1,0,0,0,1770,1772,
        5,2,0,0,1771,1773,5,135,0,0,1772,1771,1,0,0,0,1772,1773,1,0,0,0,
        1773,1774,1,0,0,0,1774,1801,3,78,39,0,1775,1777,5,18,0,0,1776,1778,
        5,135,0,0,1777,1776,1,0,0,0,1777,1778,1,0,0,0,1778,1779,1,0,0,0,
        1779,1801,3,78,39,0,1780,1782,5,19,0,0,1781,1783,5,135,0,0,1782,
        1781,1,0,0,0,1782,1783,1,0,0,0,1783,1784,1,0,0,0,1784,1801,3,78,
        39,0,1785,1787,5,21,0,0,1786,1788,5,135,0,0,1787,1786,1,0,0,0,1787,
        1788,1,0,0,0,1788,1789,1,0,0,0,1789,1801,3,78,39,0,1790,1792,5,20,
        0,0,1791,1793,5,135,0,0,1792,1791,1,0,0,0,1792,1793,1,0,0,0,1793,
        1794,1,0,0,0,1794,1801,3,78,39,0,1795,1797,5,22,0,0,1796,1798,5,
        135,0,0,1797,1796,1,0,0,0,1797,1798,1,0,0,0,1798,1799,1,0,0,0,1799,
        1801,3,78,39,0,1800,1770,1,0,0,0,1800,1775,1,0,0,0,1800,1780,1,0,
        0,0,1800,1785,1,0,0,0,1800,1790,1,0,0,0,1800,1795,1,0,0,0,1801,225,
        1,0,0,0,1802,1803,5,135,0,0,1803,1804,5,87,0,0,1804,1805,5,135,0,
        0,1805,1813,5,71,0,0,1806,1807,5,135,0,0,1807,1808,5,88,0,0,1808,
        1809,5,135,0,0,1809,1813,5,71,0,0,1810,1811,5,135,0,0,1811,1813,
        5,89,0,0,1812,1802,1,0,0,0,1812,1806,1,0,0,0,1812,1810,1,0,0,0,1813,
        1815,1,0,0,0,1814,1816,5,135,0,0,1815,1814,1,0,0,0,1815,1816,1,0,
        0,0,1816,1817,1,0,0,0,1817,1818,3,80,40,0,1818,227,1,0,0,0,1819,
        1820,5,135,0,0,1820,1822,5,90,0,0,1821,1823,5,135,0,0,1822,1821,
        1,0,0,0,1822,1823,1,0,0,0,1823,1824,1,0,0,0,1824,1825,3,80,40,0,
        1825,229,1,0,0,0,1826,1827,5,135,0,0,1827,1828,5,91,0,0,1828,1829,
        5,135,0,0,1829,1837,5,92,0,0,1830,1831,5,135,0,0,1831,1832,5,91,
        0,0,1832,1833,5,135,0,0,1833,1834,5,86,0,0,1834,1835,5,135,0,0,1835,
        1837,5,92,0,0,1836,1826,1,0,0,0,1836,1830,1,0,0,0,1837,231,1,0,0,
        0,1838,1845,3,94,47,0,1839,1841,7,1,0,0,1840,1842,5,135,0,0,1841,
        1840,1,0,0,0,1841,1842,1,0,0,0,1842,1843,1,0,0,0,1843,1845,3,94,
        47,0,1844,1838,1,0,0,0,1844,1839,1,0,0,0,1845,233,1,0,0,0,1846,1848,
        5,4,0,0,1847,1849,5,135,0,0,1848,1847,1,0,0,0,1848,1849,1,0,0,0,
        1849,1850,1,0,0,0,1850,1851,3,278,139,0,1851,235,1,0,0,0,1852,1877,
        3,268,134,0,1853,1877,3,280,140,0,1854,1877,3,238,119,0,1855,1857,
        5,93,0,0,1856,1858,5,135,0,0,1857,1856,1,0,0,0,1857,1858,1,0,0,0,
        1858,1859,1,0,0,0,1859,1861,5,8,0,0,1860,1862,5,135,0,0,1861,1860,
        1,0,0,0,1861,1862,1,0,0,0,1862,1863,1,0,0,0,1863,1865,5,5,0,0,1864,
        1866,5,135,0,0,1865,1864,1,0,0,0,1865,1866,1,0,0,0,1866,1867,1,0,
        0,0,1867,1877,5,9,0,0,1868,1877,3,242,121,0,1869,1877,3,244,122,
        0,1870,1877,3,246,123,0,1871,1877,3,248,124,0,1872,1877,3,250,125,
        0,1873,1877,3,118,59,0,1874,1877,3,50,25,0,1875,1877,3,266,133,0,
        1876,1852,1,0,0,0,1876,1853,1,0,0,0,1876,1854,1,0,0,0,1876,1855,
        1,0,0,0,1876,1868,1,0,0,0,1876,1869,1,0,0,0,1876,1870,1,0,0,0,1876,
        1871,1,0,0,0,1876,1872,1,0,0,0,1876,1873,1,0,0,0,1876,1874,1,0,0,
        0,1876,1875,1,0,0,0,1877,237,1,0,0,0,1878,1883,5,94,0,0,1879,1881,
        5,135,0,0,1880,1879,1,0,0,0,1880,1881,1,0,0,0,1881,1882,1,0,0,0,
        1882,1884,3,240,120,0,1883,1880,1,0,0,0,1884,1885,1,0,0,0,1885,1883,
        1,0,0,0,1885,1886,1,0,0,0,1886,1901,1,0,0,0,1887,1889,5,94,0,0,1888,
        1890,5,135,0,0,1889,1888,1,0,0,0,1889,1890,1,0,0,0,1890,1891,1,0,
        0,0,1891,1896,3,214,107,0,1892,1894,5,135,0,0,1893,1892,1,0,0,0,
        1893,1894,1,0,0,0,1894,1895,1,0,0,0,1895,1897,3,240,120,0,1896,1893,
        1,0,0,0,1897,1898,1,0,0,0,1898,1896,1,0,0,0,1898,1899,1,0,0,0,1899,
        1901,1,0,0,0,1900,1878,1,0,0,0,1900,1887,1,0,0,0,1901,1910,1,0,0,
        0,1902,1904,5,135,0,0,1903,1902,1,0,0,0,1903,1904,1,0,0,0,1904,1905,
        1,0,0,0,1905,1907,5,95,0,0,1906,1908,5,135,0,0,1907,1906,1,0,0,0,
        1907,1908,1,0,0,0,1908,1909,1,0,0,0,1909,1911,3,214,107,0,1910,1903,
        1,0,0,0,1910,1911,1,0,0,0,1911,1913,1,0,0,0,1912,1914,5,135,0,0,
        1913,1912,1,0,0,0,1913,1914,1,0,0,0,1914,1915,1,0,0,0,1915,1916,
        5,96,0,0,1916,239,1,0,0,0,1917,1919,5,97,0,0,1918,1920,5,135,0,0,
        1919,1918,1,0,0,0,1919,1920,1,0,0,0,1920,1921,1,0,0,0,1921,1923,
        3,214,107,0,1922,1924,5,135,0,0,1923,1922,1,0,0,0,1923,1924,1,0,
        0,0,1924,1925,1,0,0,0,1925,1927,5,98,0,0,1926,1928,5,135,0,0,1927,
        1926,1,0,0,0,1927,1928,1,0,0,0,1928,1929,1,0,0,0,1929,1930,3,214,
        107,0,1930,241,1,0,0,0,1931,1933,5,11,0,0,1932,1934,5,135,0,0,1933,
        1932,1,0,0,0,1933,1934,1,0,0,0,1934,1935,1,0,0,0,1935,1944,3,52,
        26,0,1936,1938,5,135,0,0,1937,1936,1,0,0,0,1937,1938,1,0,0,0,1938,
        1939,1,0,0,0,1939,1941,5,25,0,0,1940,1942,5,135,0,0,1941,1940,1,
        0,0,0,1941,1942,1,0,0,0,1942,1943,1,0,0,0,1943,1945,3,214,107,0,
        1944,1937,1,0,0,0,1944,1945,1,0,0,0,1945,1947,1,0,0,0,1946,1948,
        5,135,0,0,1947,1946,1,0,0,0,1947,1948,1,0,0,0,1948,1949,1,0,0,0,
        1949,1950,5,12,0,0,1950,243,1,0,0,0,1951,1953,5,11,0,0,1952,1954,
        5,135,0,0,1953,1952,1,0,0,0,1953,1954,1,0,0,0,1954,1963,1,0,0,0,
        1955,1957,3,266,133,0,1956,1958,5,135,0,0,1957,1956,1,0,0,0,1957,
        1958,1,0,0,0,1958,1959,1,0,0,0,1959,1961,5,2,0,0,1960,1962,5,135,
        0,0,1961,1960,1,0,0,0,1961,1962,1,0,0,0,1962,1964,1,0,0,0,1963,1955,
        1,0,0,0,1963,1964,1,0,0,0,1964,1965,1,0,0,0,1965,1967,3,192,96,0,
        1966,1968,5,135,0,0,1967,1966,1,0,0,0,1967,1968,1,0,0,0,1968,1973,
        1,0,0,0,1969,1971,3,184,92,0,1970,1972,5,135,0,0,1971,1970,1,0,0,
        0,1971,1972,1,0,0,0,1972,1974,1,0,0,0,1973,1969,1,0,0,0,1973,1974,
        1,0,0,0,1974,1975,1,0,0,0,1975,1977,5,25,0,0,1976,1978,5,135,0,0,
        1977,1976,1,0,0,0,1977,1978,1,0,0,0,1978,1979,1,0,0,0,1979,1981,
        3,214,107,0,1980,1982,5,135,0,0,1981,1980,1,0,0,0,1981,1982,1,0,
        0,0,1982,1983,1,0,0,0,1983,1984,5,12,0,0,1984,245,1,0,0,0,1985,1987,
        5,57,0,0,1986,1988,5,135,0,0,1987,1986,1,0,0,0,1987,1988,1,0,0,0,
        1988,1989,1,0,0,0,1989,1991,5,8,0,0,1990,1992,5,135,0,0,1991,1990,
        1,0,0,0,1991,1992,1,0,0,0,1992,1993,1,0,0,0,1993,1995,3,52,26,0,
        1994,1996,5,135,0,0,1995,1994,1,0,0,0,1995,1996,1,0,0,0,1996,1997,
        1,0,0,0,1997,1998,5,9,0,0,1998,2042,1,0,0,0,1999,2001,5,99,0,0,2000,
        2002,5,135,0,0,2001,2000,1,0,0,0,2001,2002,1,0,0,0,2002,2003,1,0,
        0,0,2003,2005,5,8,0,0,2004,2006,5,135,0,0,2005,2004,1,0,0,0,2005,
        2006,1,0,0,0,2006,2007,1,0,0,0,2007,2009,3,52,26,0,2008,2010,5,135,
        0,0,2009,2008,1,0,0,0,2009,2010,1,0,0,0,2010,2011,1,0,0,0,2011,2012,
        5,9,0,0,2012,2042,1,0,0,0,2013,2015,5,100,0,0,2014,2016,5,135,0,
        0,2015,2014,1,0,0,0,2015,2016,1,0,0,0,2016,2017,1,0,0,0,2017,2019,
        5,8,0,0,2018,2020,5,135,0,0,2019,2018,1,0,0,0,2019,2020,1,0,0,0,
        2020,2021,1,0,0,0,2021,2023,3,52,26,0,2022,2024,5,135,0,0,2023,2022,
        1,0,0,0,2023,2024,1,0,0,0,2024,2025,1,0,0,0,2025,2026,5,9,0,0,2026,
        2042,1,0,0,0,2027,2029,5,101,0,0,2028,2030,5,135,0,0,2029,2028,1,
        0,0,0,2029,2030,1,0,0,0,2030,2031,1,0,0,0,2031,2033,5,8,0,0,2032,
        2034,5,135,0,0,2033,2032,1,0,0,0,2033,2034,1,0,0,0,2034,2035,1,0,
        0,0,2035,2037,3,52,26,0,2036,2038,5,135,0,0,2037,2036,1,0,0,0,2037,
        2038,1,0,0,0,2038,2039,1,0,0,0,2039,2040,5,9,0,0,2040,2042,1,0,0,
        0,2041,1985,1,0,0,0,2041,1999,1,0,0,0,2041,2013,1,0,0,0,2041,2027,
        1,0,0,0,2042,247,1,0,0,0,2043,2044,3,192,96,0,2044,249,1,0,0,0,2045,
        2047,5,8,0,0,2046,2048,5,135,0,0,2047,2046,1,0,0,0,2047,2048,1,0,
        0,0,2048,2049,1,0,0,0,2049,2051,3,214,107,0,2050,2052,5,135,0,0,
        2051,2050,1,0,0,0,2051,2052,1,0,0,0,2052,2053,1,0,0,0,2053,2054,
        5,9,0,0,2054,251,1,0,0,0,2055,2056,3,266,133,0,2056,2057,5,135,0,
        0,2057,2058,5,90,0,0,2058,2059,5,135,0,0,2059,2060,3,214,107,0,2060,
        253,1,0,0,0,2061,2062,3,264,132,0,2062,2063,3,130,65,0,2063,255,
        1,0,0,0,2064,2066,3,262,131,0,2065,2067,5,135,0,0,2066,2065,1,0,
        0,0,2066,2067,1,0,0,0,2067,2068,1,0,0,0,2068,2070,5,8,0,0,2069,2071,
        5,135,0,0,2070,2069,1,0,0,0,2070,2071,1,0,0,0,2071,2089,1,0,0,0,
        2072,2074,3,214,107,0,2073,2075,5,135,0,0,2074,2073,1,0,0,0,2074,
        2075,1,0,0,0,2075,2086,1,0,0,0,2076,2078,5,1,0,0,2077,2079,5,135,
        0,0,2078,2077,1,0,0,0,2078,2079,1,0,0,0,2079,2080,1,0,0,0,2080,2082,
        3,214,107,0,2081,2083,5,135,0,0,2082,2081,1,0,0,0,2082,2083,1,0,
        0,0,2083,2085,1,0,0,0,2084,2076,1,0,0,0,2085,2088,1,0,0,0,2086,2084,
        1,0,0,0,2086,2087,1,0,0,0,2087,2090,1,0,0,0,2088,2086,1,0,0,0,2089,
        2072,1,0,0,0,2089,2090,1,0,0,0,2090,2091,1,0,0,0,2091,2092,5,9,0,
        0,2092,257,1,0,0,0,2093,2094,3,262,131,0,2094,259,1,0,0,0,2095,2096,
        3,130,65,0,2096,261,1,0,0,0,2097,2098,3,264,132,0,2098,2099,3,130,
        65,0,2099,263,1,0,0,0,2100,2101,3,130,65,0,2101,2102,5,4,0,0,2102,
        2104,1,0,0,0,2103,2100,1,0,0,0,2104,2107,1,0,0,0,2105,2103,1,0,0,
        0,2105,2106,1,0,0,0,2106,265,1,0,0,0,2107,2105,1,0,0,0,2108,2109,
        3,130,65,0,2109,267,1,0,0,0,2110,2117,3,270,135,0,2111,2117,5,92,
        0,0,2112,2117,3,272,136,0,2113,2117,5,117,0,0,2114,2117,3,122,61,
        0,2115,2117,3,126,63,0,2116,2110,1,0,0,0,2116,2111,1,0,0,0,2116,
        2112,1,0,0,0,2116,2113,1,0,0,0,2116,2114,1,0,0,0,2116,2115,1,0,0,
        0,2117,269,1,0,0,0,2118,2119,7,7,0,0,2119,271,1,0,0,0,2120,2123,
        3,276,138,0,2121,2123,3,274,137,0,2122,2120,1,0,0,0,2122,2121,1,
        0,0,0,2123,273,1,0,0,0,2124,2125,7,8,0,0,2125,275,1,0,0,0,2126,2127,
        7,9,0,0,2127,277,1,0,0,0,2128,2129,3,282,141,0,2129,279,1,0,0,0,
        2130,2133,5,26,0,0,2131,2134,3,130,65,0,2132,2134,5,106,0,0,2133,
        2131,1,0,0,0,2133,2132,1,0,0,0,2134,281,1,0,0,0,2135,2138,3,130,
        65,0,2136,2138,3,132,66,0,2137,2135,1,0,0,0,2137,2136,1,0,0,0,2138,
        283,1,0,0,0,2139,2140,7,10,0,0,2140,285,1,0,0,0,2141,2142,7,11,0,
        0,2142,287,1,0,0,0,2143,2144,7,12,0,0,2144,289,1,0,0,0,400,293,298,
        304,308,312,316,318,321,324,332,336,340,343,347,354,358,361,365,
        369,373,378,382,385,389,393,397,402,406,409,413,416,419,423,429,
        433,439,443,449,455,461,464,467,471,477,480,483,487,491,495,499,
        505,508,512,519,523,527,531,535,539,544,548,552,554,559,563,565,
        567,573,577,583,589,595,600,606,609,615,617,621,625,630,634,637,
        644,648,652,657,661,666,671,674,678,682,687,690,692,695,701,704,
        708,714,720,724,730,734,739,743,747,751,757,761,767,771,773,777,
        779,783,785,789,791,797,801,805,809,813,817,821,825,831,834,837,
        843,846,850,854,858,862,866,870,872,876,878,881,885,887,891,893,
        899,903,909,917,921,925,931,944,948,954,959,963,969,974,978,980,
        984,988,992,997,1001,1004,1007,1011,1014,1017,1027,1032,1036,1040,
        1042,1046,1051,1056,1060,1062,1064,1067,1072,1078,1083,1093,1097,
        1101,1105,1108,1112,1115,1121,1125,1129,1133,1135,1139,1143,1147,
        1151,1154,1162,1166,1170,1174,1178,1181,1189,1194,1199,1202,1208,
        1212,1216,1223,1227,1230,1233,1241,1246,1253,1258,1261,1265,1269,
        1273,1279,1283,1288,1293,1297,1300,1302,1307,1311,1321,1328,1341,
        1345,1351,1355,1359,1364,1369,1373,1377,1381,1386,1393,1397,1402,
        1407,1411,1416,1420,1423,1430,1437,1440,1446,1449,1455,1459,1463,
        1467,1471,1476,1481,1485,1490,1493,1502,1511,1516,1529,1532,1540,
        1544,1549,1556,1561,1568,1572,1577,1581,1587,1591,1594,1597,1601,
        1607,1611,1614,1617,1623,1626,1629,1633,1639,1642,1645,1649,1653,
        1657,1661,1665,1668,1673,1678,1683,1688,1694,1698,1700,1704,1708,
        1710,1712,1720,1725,1736,1746,1756,1761,1765,1772,1777,1782,1787,
        1792,1797,1800,1812,1815,1822,1836,1841,1844,1848,1857,1861,1865,
        1876,1880,1885,1889,1893,1898,1900,1903,1907,1910,1913,1919,1923,
        1927,1933,1937,1941,1944,1947,1953,1957,1961,1963,1967,1971,1973,
        1977,1981,1987,1991,1995,2001,2005,2009,2015,2019,2023,2029,2033,
        2037,2041,2047,2051,2066,2070,2074,2078,2082,2086,2089,2105,2116,
        2122,2133,2137
    ]

class s_cypherParser ( Parser ):

    grammarFileName = "s_cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "','", "'='", "'+='", "'.'", "'*'", "'{'", 
                     "'}'", "'('", "')'", "':'", "'['", "']'", "'/'", "'%'", 
                     "'^'", "'+'", "'-'", "'<>'", "'<'", "'<='", "'>'", 
                     "'>='", "'..'", "';'", "'|'", "'$'", "'\\u27E8'", "'\\u3008'", 
                     "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
                     "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", 
                     "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", 
                     "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
                     "'\\uFF0D'", "<INVALID>", "<INVALID>", "'NOW'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "AtT", "PoundValue", "NOW", 
                      "AT_TIME", "SNAPSHOT", "BETWEEN", "SCOPE", "STALE", 
                      "DURING", "OVERLAPS", "UNION", "ALL", "OPTIONAL", 
                      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", 
                      "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", 
                      "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", 
                      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
                      "WHERE", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", 
                      "CONTAINS", "IN", "IS", "NULL", "COUNT", "CASE", "ELSE", 
                      "END", "WHEN", "THEN", "ANY", "NONE", "SINGLE", "EXISTS", 
                      "TRUE", "FALSE", "HexInteger", "DecimalInteger", "OctalInteger", 
                      "HexLetter", "HexDigit", "Digit", "NonZeroDigit", 
                      "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", 
                      "RegularDecimalReal", "StringLiteral", "EscapedChar", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Query = 0
    RULE_oC_MultiPartQuery = 1
    RULE_oC_Match = 2
    RULE_oC_UpdatingClause = 3
    RULE_s_Create = 4
    RULE_s_Merge = 5
    RULE_s_Set = 6
    RULE_s_Stale = 7
    RULE_oC_SetItem = 8
    RULE_s_SetPropertyItemOne = 9
    RULE_s_SetPropertyItemTwo = 10
    RULE_s_SetValueItem = 11
    RULE_s_StaleItem = 12
    RULE_s_Delete = 13
    RULE_s_DeleteItem = 14
    RULE_oC_RemoveItem = 15
    RULE_s_AtTime = 16
    RULE_s_Between = 17
    RULE_s_TimeWindowLimit = 18
    RULE_oC_InQueryCall = 19
    RULE_oC_StandaloneCall = 20
    RULE_s_YieldItems = 21
    RULE_s_YieldItem = 22
    RULE_s_WithPartQuery = 23
    RULE_s_With = 24
    RULE_oC_ExistentialSubquery = 25
    RULE_oC_FilterExpression = 26
    RULE_s_Snapshot = 27
    RULE_s_Scope = 28
    RULE_oC_PatternPart = 29
    RULE_s_PathFunctionPattern = 30
    RULE_s_SinglePathPattern = 31
    RULE_oC_NodePattern = 32
    RULE_s_Properties = 33
    RULE_s_PropertiesPattern = 34
    RULE_s_PropertyNode = 35
    RULE_s_ValueNode = 36
    RULE_oC_RelationshipDetail = 37
    RULE_oC_ComparisonExpression = 38
    RULE_oC_StringListNullPredicateExpression = 39
    RULE_oC_AddOrSubtractExpression = 40
    RULE_s_MultiplyDivideModuloOperator = 41
    RULE_s_PowerOfOperator = 42
    RULE_s_AddOrSubtractOperator = 43
    RULE_s_ComparisonOperator = 44
    RULE_oC_MultiplyDivideModuloExpression = 45
    RULE_oC_PowerOfExpression = 46
    RULE_oC_ListOperatorExpression = 47
    RULE_s_SingleIndexExpression = 48
    RULE_s_DoubleIndexExpression = 49
    RULE_s_LeftExpression = 50
    RULE_s_RightExpression = 51
    RULE_oC_PropertyOrLabelsExpression = 52
    RULE_s_AtTExpression = 53
    RULE_s_PropertyLookupName = 54
    RULE_s_PropertyLookupTime = 55
    RULE_s_TimePredicateExpression = 56
    RULE_s_AtTElement = 57
    RULE_s_TimePointLiteral = 58
    RULE_oC_FunctionInvocation = 59
    RULE_s_FunctionInvocationExpression = 60
    RULE_oC_ListLiteral = 61
    RULE_s_ListLiteralExpression = 62
    RULE_oC_MapLiteral = 63
    RULE_s_MapKeyValue = 64
    RULE_oC_SymbolicName = 65
    RULE_oC_ReservedWord = 66
    RULE_oC_Cypher = 67
    RULE_oC_Statement = 68
    RULE_oC_RegularQuery = 69
    RULE_oC_Union = 70
    RULE_oC_SingleQuery = 71
    RULE_oC_SinglePartQuery = 72
    RULE_oC_ReadingClause = 73
    RULE_oC_Unwind = 74
    RULE_oC_Merge = 75
    RULE_oC_MergeAction = 76
    RULE_oC_Create = 77
    RULE_oC_Set = 78
    RULE_oC_Delete = 79
    RULE_oC_Remove = 80
    RULE_oC_YieldItems = 81
    RULE_oC_YieldItem = 82
    RULE_oC_With = 83
    RULE_oC_Return = 84
    RULE_oC_ProjectionBody = 85
    RULE_oC_ProjectionItems = 86
    RULE_oC_ProjectionItem = 87
    RULE_oC_Order = 88
    RULE_oC_Skip = 89
    RULE_oC_Limit = 90
    RULE_oC_SortItem = 91
    RULE_oC_Where = 92
    RULE_oC_Pattern = 93
    RULE_oC_AnonymousPatternPart = 94
    RULE_oC_PatternElement = 95
    RULE_oC_RelationshipsPattern = 96
    RULE_oC_PatternElementChain = 97
    RULE_oC_RelationshipPattern = 98
    RULE_oC_Properties = 99
    RULE_oC_RelationshipTypes = 100
    RULE_oC_NodeLabels = 101
    RULE_oC_NodeLabel = 102
    RULE_oC_RangeLiteral = 103
    RULE_oC_LabelName = 104
    RULE_oC_RelTypeName = 105
    RULE_oC_PropertyExpression = 106
    RULE_oC_Expression = 107
    RULE_oC_OrExpression = 108
    RULE_oC_XorExpression = 109
    RULE_oC_AndExpression = 110
    RULE_oC_NotExpression = 111
    RULE_oC_PartialComparisonExpression = 112
    RULE_oC_StringPredicateExpression = 113
    RULE_oC_ListPredicateExpression = 114
    RULE_oC_NullPredicateExpression = 115
    RULE_oC_UnaryAddOrSubtractExpression = 116
    RULE_oC_PropertyLookup = 117
    RULE_oC_Atom = 118
    RULE_oC_CaseExpression = 119
    RULE_oC_CaseAlternative = 120
    RULE_oC_ListComprehension = 121
    RULE_oC_PatternComprehension = 122
    RULE_oC_Quantifier = 123
    RULE_oC_PatternPredicate = 124
    RULE_oC_ParenthesizedExpression = 125
    RULE_oC_IdInColl = 126
    RULE_oC_FunctionName = 127
    RULE_oC_ExplicitProcedureInvocation = 128
    RULE_oC_ImplicitProcedureInvocation = 129
    RULE_oC_ProcedureResultField = 130
    RULE_oC_ProcedureName = 131
    RULE_oC_Namespace = 132
    RULE_oC_Variable = 133
    RULE_oC_Literal = 134
    RULE_oC_BooleanLiteral = 135
    RULE_oC_NumberLiteral = 136
    RULE_oC_IntegerLiteral = 137
    RULE_oC_DoubleLiteral = 138
    RULE_oC_PropertyKeyName = 139
    RULE_oC_Parameter = 140
    RULE_oC_SchemaName = 141
    RULE_oC_LeftArrowHead = 142
    RULE_oC_RightArrowHead = 143
    RULE_oC_Dash = 144

    ruleNames =  [ "oC_Query", "oC_MultiPartQuery", "oC_Match", "oC_UpdatingClause", 
                   "s_Create", "s_Merge", "s_Set", "s_Stale", "oC_SetItem", 
                   "s_SetPropertyItemOne", "s_SetPropertyItemTwo", "s_SetValueItem", 
                   "s_StaleItem", "s_Delete", "s_DeleteItem", "oC_RemoveItem", 
                   "s_AtTime", "s_Between", "s_TimeWindowLimit", "oC_InQueryCall", 
                   "oC_StandaloneCall", "s_YieldItems", "s_YieldItem", "s_WithPartQuery", 
                   "s_With", "oC_ExistentialSubquery", "oC_FilterExpression", 
                   "s_Snapshot", "s_Scope", "oC_PatternPart", "s_PathFunctionPattern", 
                   "s_SinglePathPattern", "oC_NodePattern", "s_Properties", 
                   "s_PropertiesPattern", "s_PropertyNode", "s_ValueNode", 
                   "oC_RelationshipDetail", "oC_ComparisonExpression", "oC_StringListNullPredicateExpression", 
                   "oC_AddOrSubtractExpression", "s_MultiplyDivideModuloOperator", 
                   "s_PowerOfOperator", "s_AddOrSubtractOperator", "s_ComparisonOperator", 
                   "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", 
                   "oC_ListOperatorExpression", "s_SingleIndexExpression", 
                   "s_DoubleIndexExpression", "s_LeftExpression", "s_RightExpression", 
                   "oC_PropertyOrLabelsExpression", "s_AtTExpression", "s_PropertyLookupName", 
                   "s_PropertyLookupTime", "s_TimePredicateExpression", 
                   "s_AtTElement", "s_TimePointLiteral", "oC_FunctionInvocation", 
                   "s_FunctionInvocationExpression", "oC_ListLiteral", "s_ListLiteralExpression", 
                   "oC_MapLiteral", "s_MapKeyValue", "oC_SymbolicName", 
                   "oC_ReservedWord", "oC_Cypher", "oC_Statement", "oC_RegularQuery", 
                   "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", "oC_ReadingClause", 
                   "oC_Unwind", "oC_Merge", "oC_MergeAction", "oC_Create", 
                   "oC_Set", "oC_Delete", "oC_Remove", "oC_YieldItems", 
                   "oC_YieldItem", "oC_With", "oC_Return", "oC_ProjectionBody", 
                   "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", 
                   "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", 
                   "oC_AnonymousPatternPart", "oC_PatternElement", "oC_RelationshipsPattern", 
                   "oC_PatternElementChain", "oC_RelationshipPattern", "oC_Properties", 
                   "oC_RelationshipTypes", "oC_NodeLabels", "oC_NodeLabel", 
                   "oC_RangeLiteral", "oC_LabelName", "oC_RelTypeName", 
                   "oC_PropertyExpression", "oC_Expression", "oC_OrExpression", 
                   "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", 
                   "oC_PartialComparisonExpression", "oC_StringPredicateExpression", 
                   "oC_ListPredicateExpression", "oC_NullPredicateExpression", 
                   "oC_UnaryAddOrSubtractExpression", "oC_PropertyLookup", 
                   "oC_Atom", "oC_CaseExpression", "oC_CaseAlternative", 
                   "oC_ListComprehension", "oC_PatternComprehension", "oC_Quantifier", 
                   "oC_PatternPredicate", "oC_ParenthesizedExpression", 
                   "oC_IdInColl", "oC_FunctionName", "oC_ExplicitProcedureInvocation", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_Variable", "oC_Literal", 
                   "oC_BooleanLiteral", "oC_NumberLiteral", "oC_IntegerLiteral", 
                   "oC_DoubleLiteral", "oC_PropertyKeyName", "oC_Parameter", 
                   "oC_SchemaName", "oC_LeftArrowHead", "oC_RightArrowHead", 
                   "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    AtT=46
    PoundValue=47
    NOW=48
    AT_TIME=49
    SNAPSHOT=50
    BETWEEN=51
    SCOPE=52
    STALE=53
    DURING=54
    OVERLAPS=55
    UNION=56
    ALL=57
    OPTIONAL=58
    MATCH=59
    UNWIND=60
    AS=61
    MERGE=62
    ON=63
    CREATE=64
    SET=65
    DETACH=66
    DELETE=67
    REMOVE=68
    CALL=69
    YIELD=70
    WITH=71
    RETURN=72
    DISTINCT=73
    ORDER=74
    BY=75
    L_SKIP=76
    LIMIT=77
    ASCENDING=78
    ASC=79
    DESCENDING=80
    DESC=81
    WHERE=82
    OR=83
    XOR=84
    AND=85
    NOT=86
    STARTS=87
    ENDS=88
    CONTAINS=89
    IN=90
    IS=91
    NULL=92
    COUNT=93
    CASE=94
    ELSE=95
    END=96
    WHEN=97
    THEN=98
    ANY=99
    NONE=100
    SINGLE=101
    EXISTS=102
    TRUE=103
    FALSE=104
    HexInteger=105
    DecimalInteger=106
    OctalInteger=107
    HexLetter=108
    HexDigit=109
    Digit=110
    NonZeroDigit=111
    NonZeroOctDigit=112
    OctDigit=113
    ZeroDigit=114
    ExponentDecimalReal=115
    RegularDecimalReal=116
    StringLiteral=117
    EscapedChar=118
    CONSTRAINT=119
    DO=120
    FOR=121
    REQUIRE=122
    UNIQUE=123
    MANDATORY=124
    SCALAR=125
    OF=126
    ADD=127
    DROP=128
    FILTER=129
    EXTRACT=130
    UnescapedSymbolicName=131
    IdentifierStart=132
    IdentifierPart=133
    EscapedSymbolicName=134
    SP=135
    WHITESPACE=136
    Comment=137

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StandaloneCallContext,0)


        def s_TimeWindowLimit(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimeWindowLimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = s_cypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Query)
        try:
            self.state = 293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 290
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 291
                self.oC_StandaloneCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 292
                self.s_TimeWindowLimit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def s_WithPartQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_WithPartQueryContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_WithPartQueryContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = s_cypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_MultiPartQuery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 295
                    self.s_WithPartQuery()

                else:
                    raise NoViableAltException(self)
                self.state = 298 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

            self.state = 300
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = s_cypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 302
                self.match(s_cypherParser.OPTIONAL)
                self.state = 303
                self.match(s_cypherParser.SP)


            self.state = 306
            self.match(s_cypherParser.MATCH)
            self.state = 308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 307
                self.match(s_cypherParser.SP)


            self.state = 310
            self.oC_Pattern()
            self.state = 318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 311
                    self.match(s_cypherParser.SP)


                self.state = 316
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 314
                    self.s_AtTime()
                    pass
                elif token in [51]:
                    self.state = 315
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 320
                    self.match(s_cypherParser.SP)


                self.state = 323
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_Create(self):
            return self.getTypedRuleContext(s_cypherParser.S_CreateContext,0)


        def s_Merge(self):
            return self.getTypedRuleContext(s_cypherParser.S_MergeContext,0)


        def s_Set(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RemoveContext,0)


        def s_Stale(self):
            return self.getTypedRuleContext(s_cypherParser.S_StaleContext,0)


        def s_Delete(self):
            return self.getTypedRuleContext(s_cypherParser.S_DeleteContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = s_cypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_oC_UpdatingClause)
        try:
            self.state = 332
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.enterOuterAlt(localctx, 1)
                self.state = 326
                self.s_Create()
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 327
                self.s_Merge()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 3)
                self.state = 328
                self.s_Set()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 4)
                self.state = 329
                self.oC_Remove()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 5)
                self.state = 330
                self.s_Stale()
                pass
            elif token in [66, 67]:
                self.enterOuterAlt(localctx, 6)
                self.state = 331
                self.s_Delete()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Create" ):
                listener.enterS_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Create" ):
                listener.exitS_Create(self)




    def s_Create(self):

        localctx = s_cypherParser.S_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_s_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self.match(s_cypherParser.CREATE)
            self.state = 336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 335
                self.match(s_cypherParser.SP)


            self.state = 338
            self.oC_Pattern()
            self.state = 343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 339
                    self.match(s_cypherParser.SP)


                self.state = 342
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Merge" ):
                listener.enterS_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Merge" ):
                listener.exitS_Merge(self)




    def s_Merge(self):

        localctx = s_cypherParser.S_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_s_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.match(s_cypherParser.MERGE)
            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 346
                self.match(s_cypherParser.SP)


            self.state = 349
            self.oC_PatternPart()
            self.state = 354
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 350
                    self.match(s_cypherParser.SP)
                    self.state = 351
                    self.oC_MergeAction() 
                self.state = 356
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

            self.state = 361
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 357
                    self.match(s_cypherParser.SP)


                self.state = 360
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Set" ):
                listener.enterS_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Set" ):
                listener.exitS_Set(self)




    def s_Set(self):

        localctx = s_cypherParser.S_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_s_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.match(s_cypherParser.SET)
            self.state = 365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 364
                self.match(s_cypherParser.SP)


            self.state = 367
            self.oC_SetItem()
            self.state = 378
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 369
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 368
                        self.match(s_cypherParser.SP)


                    self.state = 371
                    self.match(s_cypherParser.T__0)
                    self.state = 373
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 372
                        self.match(s_cypherParser.SP)


                    self.state = 375
                    self.oC_SetItem() 
                self.state = 380
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

            self.state = 385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 381
                    self.match(s_cypherParser.SP)


                self.state = 384
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def s_StaleItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StaleItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StaleItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Stale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Stale" ):
                listener.enterS_Stale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Stale" ):
                listener.exitS_Stale(self)




    def s_Stale(self):

        localctx = s_cypherParser.S_StaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_s_Stale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.match(s_cypherParser.STALE)
            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 388
                self.match(s_cypherParser.SP)


            self.state = 391
            self.s_StaleItem()
            self.state = 402
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 393
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 392
                        self.match(s_cypherParser.SP)


                    self.state = 395
                    self.match(s_cypherParser.T__0)
                    self.state = 397
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 396
                        self.match(s_cypherParser.SP)


                    self.state = 399
                    self.s_StaleItem() 
                self.state = 404
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

            self.state = 409
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 405
                    self.match(s_cypherParser.SP)


                self.state = 408
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_SetPropertyItemOne(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemOneContext,0)


        def s_SetPropertyItemTwo(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemTwoContext,0)


        def s_SetValueItem(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetValueItemContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = s_cypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 411
                self.oC_PropertyExpression()
                self.state = 416
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 413
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 412
                        self.match(s_cypherParser.SP)


                    self.state = 415
                    self.s_AtTElement()


                self.state = 419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 418
                    self.match(s_cypherParser.SP)


                self.state = 421
                self.match(s_cypherParser.T__1)
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 422
                    self.match(s_cypherParser.SP)


                self.state = 425
                self.oC_Expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 427
                self.oC_Variable()
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 428
                    self.match(s_cypherParser.SP)


                self.state = 431
                self.match(s_cypherParser.T__1)
                self.state = 433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 432
                    self.match(s_cypherParser.SP)


                self.state = 435
                self.oC_Expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 437
                self.oC_Variable()
                self.state = 439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 438
                    self.match(s_cypherParser.SP)


                self.state = 441
                self.match(s_cypherParser.T__2)
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 442
                    self.match(s_cypherParser.SP)


                self.state = 445
                self.oC_Expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 447
                self.oC_Variable()
                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 448
                    self.match(s_cypherParser.SP)


                self.state = 451
                self.oC_NodeLabels()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 453
                self.oC_Variable()
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 454
                    self.match(s_cypherParser.SP)


                self.state = 457
                self.s_AtTElement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 459
                self.oC_Variable()
                self.state = 464
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 461
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 460
                        self.match(s_cypherParser.SP)


                    self.state = 463
                    self.s_AtTElement()


                self.state = 467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 466
                    self.match(s_cypherParser.SP)


                self.state = 469
                self.match(s_cypherParser.T__3)
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 470
                    self.match(s_cypherParser.SP)


                self.state = 473
                self.s_SetPropertyItemOne()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 475
                self.oC_Variable()
                self.state = 480
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 477
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 476
                        self.match(s_cypherParser.SP)


                    self.state = 479
                    self.s_AtTElement()


                self.state = 483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 482
                    self.match(s_cypherParser.SP)


                self.state = 485
                self.match(s_cypherParser.T__3)
                self.state = 487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 486
                    self.match(s_cypherParser.SP)


                self.state = 489
                self.s_SetPropertyItemTwo()
                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 490
                    self.match(s_cypherParser.SP)


                self.state = 493
                self.s_SetValueItem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemOneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemOne

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemOne" ):
                listener.enterS_SetPropertyItemOne(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemOne" ):
                listener.exitS_SetPropertyItemOne(self)




    def s_SetPropertyItemOne(self):

        localctx = s_cypherParser.S_SetPropertyItemOneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_s_SetPropertyItemOne)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.oC_PropertyKeyName()
            self.state = 499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 498
                self.match(s_cypherParser.SP)


            self.state = 501
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemTwoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemTwo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemTwo" ):
                listener.enterS_SetPropertyItemTwo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemTwo" ):
                listener.exitS_SetPropertyItemTwo(self)




    def s_SetPropertyItemTwo(self):

        localctx = s_cypherParser.S_SetPropertyItemTwoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_s_SetPropertyItemTwo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.oC_PropertyKeyName()
            self.state = 508
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 504
                    self.match(s_cypherParser.SP)


                self.state = 507
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetValueItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetValueItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetValueItem" ):
                listener.enterS_SetValueItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetValueItem" ):
                listener.exitS_SetValueItem(self)




    def s_SetValueItem(self):

        localctx = s_cypherParser.S_SetValueItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_s_SetValueItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self.match(s_cypherParser.PoundValue)
            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 511
                self.match(s_cypherParser.SP)


            self.state = 514
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def s_PropertyLookupName(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StaleItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StaleItem" ):
                listener.enterS_StaleItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StaleItem" ):
                listener.exitS_StaleItem(self)




    def s_StaleItem(self):

        localctx = s_cypherParser.S_StaleItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_s_StaleItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.oC_Expression()
            self.state = 523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 517
                self.s_PropertyLookupName()
                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 518
                    self.match(s_cypherParser.SP)


                self.state = 521
                self.match(s_cypherParser.PoundValue)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def s_DeleteItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DeleteItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DeleteItemContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Delete" ):
                listener.enterS_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Delete" ):
                listener.exitS_Delete(self)




    def s_Delete(self):

        localctx = s_cypherParser.S_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_s_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 525
                self.match(s_cypherParser.DETACH)
                self.state = 526
                self.match(s_cypherParser.SP)


            self.state = 529
            self.match(s_cypherParser.DELETE)
            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 530
                self.match(s_cypherParser.SP)


            self.state = 533
            self.s_DeleteItem()
            self.state = 544
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 535
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 534
                        self.match(s_cypherParser.SP)


                    self.state = 537
                    self.match(s_cypherParser.T__0)
                    self.state = 539
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 538
                        self.match(s_cypherParser.SP)


                    self.state = 541
                    self.s_DeleteItem() 
                self.state = 546
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

            self.state = 554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 547
                    self.match(s_cypherParser.SP)


                self.state = 552
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 550
                    self.s_AtTime()
                    pass
                elif token in [51]:
                    self.state = 551
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def s_PropertyLookupName(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DeleteItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DeleteItem" ):
                listener.enterS_DeleteItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DeleteItem" ):
                listener.exitS_DeleteItem(self)




    def s_DeleteItem(self):

        localctx = s_cypherParser.S_DeleteItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_s_DeleteItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.oC_Expression()
            self.state = 567
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 557
                self.s_PropertyLookupName()
                self.state = 565
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 559
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 558
                        self.match(s_cypherParser.SP)


                    self.state = 563
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [47]:
                        self.state = 561
                        self.match(s_cypherParser.PoundValue)
                        pass
                    elif token in [46]:
                        self.state = 562
                        self.s_AtTElement()
                        pass
                    else:
                        raise NoViableAltException(self)





        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = s_cypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_oC_RemoveItem)
        try:
            self.state = 573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 569
                self.oC_Variable()
                self.state = 570
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 572
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTime" ):
                listener.enterS_AtTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTime" ):
                listener.exitS_AtTime(self)




    def s_AtTime(self):

        localctx = s_cypherParser.S_AtTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_s_AtTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.match(s_cypherParser.AT_TIME)
            self.state = 577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 576
                self.match(s_cypherParser.SP)


            self.state = 579
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_BetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Between

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Between" ):
                listener.enterS_Between(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Between" ):
                listener.exitS_Between(self)




    def s_Between(self):

        localctx = s_cypherParser.S_BetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_s_Between)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self.match(s_cypherParser.BETWEEN)
            self.state = 583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 582
                self.match(s_cypherParser.SP)


            self.state = 585
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimeWindowLimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_Snapshot(self):
            return self.getTypedRuleContext(s_cypherParser.S_SnapshotContext,0)


        def s_Scope(self):
            return self.getTypedRuleContext(s_cypherParser.S_ScopeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimeWindowLimit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimeWindowLimit" ):
                listener.enterS_TimeWindowLimit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimeWindowLimit" ):
                listener.exitS_TimeWindowLimit(self)




    def s_TimeWindowLimit(self):

        localctx = s_cypherParser.S_TimeWindowLimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_s_TimeWindowLimit)
        try:
            self.state = 589
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 587
                self.s_Snapshot()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 588
                self.s_Scope()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def s_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.S_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = s_cypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self.match(s_cypherParser.CALL)
            self.state = 592
            self.match(s_cypherParser.SP)
            self.state = 593
            self.oC_ExplicitProcedureInvocation()
            self.state = 600
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 594
                    self.match(s_cypherParser.SP)


                self.state = 597
                self.match(s_cypherParser.YIELD)
                self.state = 598
                self.match(s_cypherParser.SP)
                self.state = 599
                self.s_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def s_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.S_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = s_cypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_oC_StandaloneCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.match(s_cypherParser.CALL)
            self.state = 603
            self.match(s_cypherParser.SP)
            self.state = 606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 604
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 605
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 608
                    self.match(s_cypherParser.SP)


                self.state = 611
                self.match(s_cypherParser.YIELD)
                self.state = 612
                self.match(s_cypherParser.SP)
                self.state = 615
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [5]:
                    self.state = 613
                    self.match(s_cypherParser.T__4)
                    pass
                elif token in [48, 93, 97, 99, 100, 101, 108, 129, 130, 131, 134]:
                    self.state = 614
                    self.s_YieldItems()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_YieldItems" ):
                listener.enterS_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_YieldItems" ):
                listener.exitS_YieldItems(self)




    def s_YieldItems(self):

        localctx = s_cypherParser.S_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_s_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.s_YieldItem()
            self.state = 630
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 621
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 620
                        self.match(s_cypherParser.SP)


                    self.state = 623
                    self.match(s_cypherParser.T__0)
                    self.state = 625
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 624
                        self.match(s_cypherParser.SP)


                    self.state = 627
                    self.s_YieldItem() 
                self.state = 632
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

            self.state = 637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 633
                    self.match(s_cypherParser.SP)


                self.state = 636
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_YieldItem" ):
                listener.enterS_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_YieldItem" ):
                listener.exitS_YieldItem(self)




    def s_YieldItem(self):

        localctx = s_cypherParser.S_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_s_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.oC_ProcedureResultField()
            self.state = 644
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 640
                self.match(s_cypherParser.SP)
                self.state = 641
                self.match(s_cypherParser.AS)
                self.state = 642
                self.match(s_cypherParser.SP)
                self.state = 643
                self.oC_Variable()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_With(self):
            return self.getTypedRuleContext(s_cypherParser.S_WithContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_WithPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_WithPartQuery" ):
                listener.enterS_WithPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_WithPartQuery" ):
                listener.exitS_WithPartQuery(self)




    def s_WithPartQuery(self):

        localctx = s_cypherParser.S_WithPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_s_WithPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                self.state = 646
                self.oC_ReadingClause()
                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 647
                    self.match(s_cypherParser.SP)


                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64001) != 0):
                self.state = 655
                self.oC_UpdatingClause()
                self.state = 657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 656
                    self.match(s_cypherParser.SP)


                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 664
            self.s_With()
            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 665
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_With" ):
                listener.enterS_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_With" ):
                listener.exitS_With(self)




    def s_With(self):

        localctx = s_cypherParser.S_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_s_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 668
            self.match(s_cypherParser.WITH)
            self.state = 669
            self.oC_ProjectionBody()
            self.state = 674
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 670
                    self.match(s_cypherParser.SP)


                self.state = 673
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExistentialSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExistentialSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExistentialSubquery" ):
                listener.enterOC_ExistentialSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExistentialSubquery" ):
                listener.exitOC_ExistentialSubquery(self)




    def oC_ExistentialSubquery(self):

        localctx = s_cypherParser.OC_ExistentialSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_oC_ExistentialSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.match(s_cypherParser.EXISTS)
            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 677
                self.match(s_cypherParser.SP)


            self.state = 680
            self.match(s_cypherParser.T__5)
            self.state = 682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 681
                self.match(s_cypherParser.SP)


            self.state = 692
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 71, 72]:
                self.state = 684
                self.oC_RegularQuery()
                pass
            elif token in [8, 48, 93, 97, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 685
                self.oC_Pattern()
                self.state = 690
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                if la_ == 1:
                    self.state = 687
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 686
                        self.match(s_cypherParser.SP)


                    self.state = 689
                    self.oC_Where()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 694
                self.match(s_cypherParser.SP)


            self.state = 697
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IdInCollContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = s_cypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.oC_IdInColl()
            self.state = 704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 700
                    self.match(s_cypherParser.SP)


                self.state = 703
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SnapshotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Snapshot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Snapshot" ):
                listener.enterS_Snapshot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Snapshot" ):
                listener.exitS_Snapshot(self)




    def s_Snapshot(self):

        localctx = s_cypherParser.S_SnapshotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_s_Snapshot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.match(s_cypherParser.SNAPSHOT)
            self.state = 708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 707
                self.match(s_cypherParser.SP)


            self.state = 710
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Scope" ):
                listener.enterS_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Scope" ):
                listener.exitS_Scope(self)




    def s_Scope(self):

        localctx = s_cypherParser.S_ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_s_Scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.match(s_cypherParser.SCOPE)
            self.state = 714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 713
                self.match(s_cypherParser.SP)


            self.state = 716
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_PathFunctionPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PathFunctionPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AnonymousPatternPartContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = s_cypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 718
                self.oC_Variable()
                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 719
                    self.match(s_cypherParser.SP)


                self.state = 722
                self.match(s_cypherParser.T__1)
                self.state = 724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 723
                    self.match(s_cypherParser.SP)


                self.state = 726
                self.s_PathFunctionPattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 728
                self.oC_Variable()
                self.state = 730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 729
                    self.match(s_cypherParser.SP)


                self.state = 732
                self.match(s_cypherParser.T__1)
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 733
                    self.match(s_cypherParser.SP)


                self.state = 736
                self.oC_AnonymousPatternPart()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 738
                self.oC_AnonymousPatternPart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PathFunctionPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def s_SinglePathPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_SinglePathPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PathFunctionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PathFunctionPattern" ):
                listener.enterS_PathFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PathFunctionPattern" ):
                listener.exitS_PathFunctionPattern(self)




    def s_PathFunctionPattern(self):

        localctx = s_cypherParser.S_PathFunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_s_PathFunctionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.oC_FunctionName()
            self.state = 743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 742
                self.match(s_cypherParser.SP)


            self.state = 745
            self.match(s_cypherParser.T__7)
            self.state = 747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 746
                self.match(s_cypherParser.SP)


            self.state = 749
            self.s_SinglePathPattern()
            self.state = 751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 750
                self.match(s_cypherParser.SP)


            self.state = 753
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SinglePathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodePatternContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,i)


        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SinglePathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SinglePathPattern" ):
                listener.enterS_SinglePathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SinglePathPattern" ):
                listener.exitS_SinglePathPattern(self)




    def s_SinglePathPattern(self):

        localctx = s_cypherParser.S_SinglePathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_s_SinglePathPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.oC_NodePattern()
            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 756
                self.match(s_cypherParser.SP)


            self.state = 759
            self.oC_RelationshipPattern()
            self.state = 761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 760
                self.match(s_cypherParser.SP)


            self.state = 763
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def s_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = s_cypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.match(s_cypherParser.T__7)
            self.state = 767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 766
                self.match(s_cypherParser.SP)


            self.state = 773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625937) != 0):
                self.state = 769
                self.oC_Variable()
                self.state = 771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 770
                    self.match(s_cypherParser.SP)




            self.state = 779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 775
                self.oC_NodeLabels()
                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 776
                    self.match(s_cypherParser.SP)




            self.state = 785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 781
                self.s_AtTElement()
                self.state = 783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 782
                    self.match(s_cypherParser.SP)




            self.state = 791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6 or _la==26:
                self.state = 787
                self.s_Properties()
                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 788
                    self.match(s_cypherParser.SP)




            self.state = 793
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertiesPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesPatternContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Properties" ):
                listener.enterS_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Properties" ):
                listener.exitS_Properties(self)




    def s_Properties(self):

        localctx = s_cypherParser.S_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_s_Properties)
        try:
            self.state = 797
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 795
                self.s_PropertiesPattern()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 796
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertyNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PropertyNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PropertyNodeContext,i)


        def s_ValueNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ValueNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ValueNodeContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertiesPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertiesPattern" ):
                listener.enterS_PropertiesPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertiesPattern" ):
                listener.exitS_PropertiesPattern(self)




    def s_PropertiesPattern(self):

        localctx = s_cypherParser.S_PropertiesPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_s_PropertiesPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.match(s_cypherParser.T__5)
            self.state = 834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 800
                    self.match(s_cypherParser.SP)


                self.state = 803
                self.s_PropertyNode()
                self.state = 805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 804
                    self.match(s_cypherParser.SP)


                self.state = 807
                self.match(s_cypherParser.T__9)
                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 808
                    self.match(s_cypherParser.SP)


                self.state = 811
                self.s_ValueNode()
                self.state = 831
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 813
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 812
                            self.match(s_cypherParser.SP)


                        self.state = 815
                        self.match(s_cypherParser.T__0)
                        self.state = 817
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 816
                            self.match(s_cypherParser.SP)


                        self.state = 819
                        self.s_PropertyNode()
                        self.state = 821
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 820
                            self.match(s_cypherParser.SP)


                        self.state = 823
                        self.match(s_cypherParser.T__9)
                        self.state = 825
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 824
                            self.match(s_cypherParser.SP)


                        self.state = 827
                        self.s_ValueNode() 
                    self.state = 833
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,127,self._ctx)



            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 836
                self.match(s_cypherParser.SP)


            self.state = 839
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyNode" ):
                listener.enterS_PropertyNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyNode" ):
                listener.exitS_PropertyNode(self)




    def s_PropertyNode(self):

        localctx = s_cypherParser.S_PropertyNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_s_PropertyNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self.oC_PropertyKeyName()
            self.state = 846
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 842
                    self.match(s_cypherParser.SP)


                self.state = 845
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ValueNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ValueNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ValueNode" ):
                listener.enterS_ValueNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ValueNode" ):
                listener.exitS_ValueNode(self)




    def s_ValueNode(self):

        localctx = s_cypherParser.S_ValueNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_s_ValueNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.oC_Expression()
            self.state = 850
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.state = 849
                self.match(s_cypherParser.SP)


            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 852
                self.match(s_cypherParser.T__7)
                self.state = 854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 853
                    self.match(s_cypherParser.SP)


                self.state = 856
                self.s_AtTElement()
                self.state = 858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 857
                    self.match(s_cypherParser.SP)


                self.state = 860
                self.match(s_cypherParser.T__8)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RangeLiteralContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = s_cypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.match(s_cypherParser.T__10)
            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 865
                self.match(s_cypherParser.SP)


            self.state = 872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625937) != 0):
                self.state = 868
                self.oC_Variable()
                self.state = 870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 869
                    self.match(s_cypherParser.SP)




            self.state = 878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 874
                self.oC_RelationshipTypes()
                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 875
                    self.match(s_cypherParser.SP)




            self.state = 881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 880
                self.oC_RangeLiteral()


            self.state = 887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 883
                self.s_AtTElement()
                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 884
                    self.match(s_cypherParser.SP)




            self.state = 893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6 or _la==26:
                self.state = 889
                self.oC_Properties()
                self.state = 891
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 890
                    self.match(s_cypherParser.SP)




            self.state = 895
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_StringListNullPredicateExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,i)


        def s_ComparisonOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ComparisonOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ComparisonOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = s_cypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.oC_StringListNullPredicateExpression()
            self.state = 909
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,148,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 899
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 898
                        self.match(s_cypherParser.SP)


                    self.state = 901
                    self.s_ComparisonOperator()
                    self.state = 903
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 902
                        self.match(s_cypherParser.SP)


                    self.state = 905
                    self.oC_StringListNullPredicateExpression() 
                self.state = 911
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def s_TimePredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateExpressionContext,0)


        def oC_StringPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringPredicateExpressionContext,0)


        def oC_ListPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListPredicateExpressionContext,0)


        def oC_NullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NullPredicateExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringListNullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullPredicateExpression" ):
                listener.enterOC_StringListNullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullPredicateExpression" ):
                listener.exitOC_StringListNullPredicateExpression(self)




    def oC_StringListNullPredicateExpression(self):

        localctx = s_cypherParser.OC_StringListNullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_oC_StringListNullPredicateExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.oC_AddOrSubtractExpression()
            self.state = 917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.state = 913
                self.s_TimePredicateExpression()

            elif la_ == 2:
                self.state = 914
                self.oC_StringPredicateExpression()

            elif la_ == 3:
                self.state = 915
                self.oC_ListPredicateExpression()

            elif la_ == 4:
                self.state = 916
                self.oC_NullPredicateExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def s_AddOrSubtractOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AddOrSubtractOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self.oC_MultiplyDivideModuloExpression()
            self.state = 931
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 921
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 920
                        self.match(s_cypherParser.SP)


                    self.state = 923
                    self.s_AddOrSubtractOperator()
                    self.state = 925
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 924
                        self.match(s_cypherParser.SP)


                    self.state = 927
                    self.oC_MultiplyDivideModuloExpression() 
                self.state = 933
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MultiplyDivideModuloOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MultiplyDivideModuloOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MultiplyDivideModuloOperator" ):
                listener.enterS_MultiplyDivideModuloOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MultiplyDivideModuloOperator" ):
                listener.exitS_MultiplyDivideModuloOperator(self)




    def s_MultiplyDivideModuloOperator(self):

        localctx = s_cypherParser.S_MultiplyDivideModuloOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_s_MultiplyDivideModuloOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 24608) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PowerOfOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PowerOfOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PowerOfOperator" ):
                listener.enterS_PowerOfOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PowerOfOperator" ):
                listener.exitS_PowerOfOperator(self)




    def s_PowerOfOperator(self):

        localctx = s_cypherParser.S_PowerOfOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_s_PowerOfOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.match(s_cypherParser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AddOrSubtractOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AddOrSubtractOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AddOrSubtractOperator" ):
                listener.enterS_AddOrSubtractOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AddOrSubtractOperator" ):
                listener.exitS_AddOrSubtractOperator(self)




    def s_AddOrSubtractOperator(self):

        localctx = s_cypherParser.S_AddOrSubtractOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_s_AddOrSubtractOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            _la = self._input.LA(1)
            if not(_la==16 or _la==17):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ComparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ComparisonOperator" ):
                listener.enterS_ComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ComparisonOperator" ):
                listener.exitS_ComparisonOperator(self)




    def s_ComparisonOperator(self):

        localctx = s_cypherParser.S_ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_s_ComparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8126468) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PowerOfExpressionContext,i)


        def s_MultiplyDivideModuloOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MultiplyDivideModuloOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MultiplyDivideModuloOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = s_cypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.oC_PowerOfExpression()
            self.state = 954
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 944
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 943
                        self.match(s_cypherParser.SP)


                    self.state = 946
                    self.s_MultiplyDivideModuloOperator()
                    self.state = 948
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 947
                        self.match(s_cypherParser.SP)


                    self.state = 950
                    self.oC_PowerOfExpression() 
                self.state = 956
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def s_PowerOfOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PowerOfOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PowerOfOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = s_cypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 969
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,158,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 959
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 958
                        self.match(s_cypherParser.SP)


                    self.state = 961
                    self.s_PowerOfOperator()
                    self.state = 963
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 962
                        self.match(s_cypherParser.SP)


                    self.state = 965
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 971
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,158,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def s_AtTExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTExpressionContext,0)


        def s_SingleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_SingleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_SingleIndexExpressionContext,i)


        def s_DoubleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DoubleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DoubleIndexExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = s_cypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_oC_ListOperatorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 972
                self.oC_PropertyOrLabelsExpression()
                pass

            elif la_ == 2:
                self.state = 973
                self.s_AtTExpression()
                pass


            self.state = 980
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 978
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                    if la_ == 1:
                        self.state = 976
                        self.s_SingleIndexExpression()
                        pass

                    elif la_ == 2:
                        self.state = 977
                        self.s_DoubleIndexExpression()
                        pass

             
                self.state = 982
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SingleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SingleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SingleIndexExpression" ):
                listener.enterS_SingleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SingleIndexExpression" ):
                listener.exitS_SingleIndexExpression(self)




    def s_SingleIndexExpression(self):

        localctx = s_cypherParser.S_SingleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_s_SingleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 983
                self.match(s_cypherParser.SP)


            self.state = 986
            self.match(s_cypherParser.T__10)
            self.state = 988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 987
                self.match(s_cypherParser.SP)


            self.state = 990
            self.s_LeftExpression()
            self.state = 992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 991
                self.match(s_cypherParser.SP)


            self.state = 994
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DoubleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def s_RightExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_RightExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DoubleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DoubleIndexExpression" ):
                listener.enterS_DoubleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DoubleIndexExpression" ):
                listener.exitS_DoubleIndexExpression(self)




    def s_DoubleIndexExpression(self):

        localctx = s_cypherParser.S_DoubleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_s_DoubleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 996
                self.match(s_cypherParser.SP)


            self.state = 999
            self.match(s_cypherParser.T__10)
            self.state = 1001
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.state = 1000
                self.match(s_cypherParser.SP)


            self.state = 1004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119874368) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394345409) != 0):
                self.state = 1003
                self.s_LeftExpression()


            self.state = 1007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1006
                self.match(s_cypherParser.SP)


            self.state = 1009
            self.match(s_cypherParser.T__22)
            self.state = 1011
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1010
                self.match(s_cypherParser.SP)


            self.state = 1014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119874368) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394345409) != 0):
                self.state = 1013
                self.s_RightExpression()


            self.state = 1017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1016
                self.match(s_cypherParser.SP)


            self.state = 1019
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_LeftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_LeftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_LeftExpression" ):
                listener.enterS_LeftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_LeftExpression" ):
                listener.exitS_LeftExpression(self)




    def s_LeftExpression(self):

        localctx = s_cypherParser.S_LeftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_s_LeftExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_RightExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_RightExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_RightExpression" ):
                listener.enterS_RightExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_RightExpression" ):
                listener.exitS_RightExpression(self)




    def s_RightExpression(self):

        localctx = s_cypherParser.S_RightExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_s_RightExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyOrLabelsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyOrLabelsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyOrLabelsExpression" ):
                listener.enterOC_PropertyOrLabelsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyOrLabelsExpression" ):
                listener.exitOC_PropertyOrLabelsExpression(self)




    def oC_PropertyOrLabelsExpression(self):

        localctx = s_cypherParser.OC_PropertyOrLabelsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_oC_PropertyOrLabelsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.oC_Atom()
            self.state = 1032
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,173,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1027
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1026
                        self.match(s_cypherParser.SP)


                    self.state = 1029
                    self.oC_PropertyLookup() 
                self.state = 1034
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,173,self._ctx)

            self.state = 1042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.state = 1036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1035
                    self.match(s_cypherParser.SP)


                self.state = 1040
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10]:
                    self.state = 1038
                    self.oC_NodeLabels()
                    pass
                elif token in [46]:
                    self.state = 1039
                    self.s_AtTElement()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def s_PropertyLookupTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupTimeContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def s_PropertyLookupName(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTExpression" ):
                listener.enterS_AtTExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTExpression" ):
                listener.exitS_AtTExpression(self)




    def s_AtTExpression(self):

        localctx = s_cypherParser.S_AtTExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_s_AtTExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.oC_Atom()
            self.state = 1051
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,178,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1046
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1045
                        self.match(s_cypherParser.SP)


                    self.state = 1048
                    self.oC_PropertyLookup() 
                self.state = 1053
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

            self.state = 1064
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.state = 1054
                self.s_PropertyLookupName()
                self.state = 1062
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                if la_ == 1:
                    self.state = 1056
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1055
                        self.match(s_cypherParser.SP)


                    self.state = 1060
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [47]:
                        self.state = 1058
                        self.match(s_cypherParser.PoundValue)
                        pass
                    elif token in [46]:
                        self.state = 1059
                        self.s_AtTElement()
                        pass
                    else:
                        raise NoViableAltException(self)





            self.state = 1067
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1066
                self.match(s_cypherParser.SP)


            self.state = 1069
            self.s_PropertyLookupTime()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyLookupNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyLookup(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyLookupName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyLookupName" ):
                listener.enterS_PropertyLookupName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyLookupName" ):
                listener.exitS_PropertyLookupName(self)




    def s_PropertyLookupName(self):

        localctx = s_cypherParser.S_PropertyLookupNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_s_PropertyLookupName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1071
                self.match(s_cypherParser.SP)


            self.state = 1074
            self.oC_PropertyLookup()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyLookupTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyLookupTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyLookupTime" ):
                listener.enterS_PropertyLookupTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyLookupTime" ):
                listener.exitS_PropertyLookupTime(self)




    def s_PropertyLookupTime(self):

        localctx = s_cypherParser.S_PropertyLookupTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_s_PropertyLookupTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1076
            self.match(s_cypherParser.AtT)
            self.state = 1083
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,186,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1078
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1077
                        self.match(s_cypherParser.SP)


                    self.state = 1080
                    self.oC_PropertyLookup() 
                self.state = 1085
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,186,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateExpression" ):
                listener.enterS_TimePredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateExpression" ):
                listener.exitS_TimePredicateExpression(self)




    def s_TimePredicateExpression(self):

        localctx = s_cypherParser.S_TimePredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_s_TimePredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            self.match(s_cypherParser.SP)
            self.state = 1087
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1088
            self.match(s_cypherParser.SP)
            self.state = 1089
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_TimePointLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_TimePointLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_TimePointLiteralContext,i)


        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTElement" ):
                listener.enterS_AtTElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTElement" ):
                listener.exitS_AtTElement(self)




    def s_AtTElement(self):

        localctx = s_cypherParser.S_AtTElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_s_AtTElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            self.match(s_cypherParser.AtT)
            self.state = 1093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1092
                self.match(s_cypherParser.SP)


            self.state = 1095
            self.match(s_cypherParser.T__7)
            self.state = 1105
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.state = 1097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1096
                    self.match(s_cypherParser.SP)


                self.state = 1099
                self.s_TimePointLiteral()
                self.state = 1101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1100
                    self.match(s_cypherParser.SP)


                self.state = 1103
                self.match(s_cypherParser.T__0)


            self.state = 1108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1107
                self.match(s_cypherParser.SP)


            self.state = 1112
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 117]:
                self.state = 1110
                self.s_TimePointLiteral()
                pass
            elif token in [48]:
                self.state = 1111
                self.match(s_cypherParser.NOW)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1114
                self.match(s_cypherParser.SP)


            self.state = 1117
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePointLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePointLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePointLiteral" ):
                listener.enterS_TimePointLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePointLiteral" ):
                listener.exitS_TimePointLiteral(self)




    def s_TimePointLiteral(self):

        localctx = s_cypherParser.S_TimePointLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_s_TimePointLiteral)
        try:
            self.state = 1121
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1119
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1120
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def s_FunctionInvocationExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_FunctionInvocationExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_FunctionInvocationExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = s_cypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1123
            self.oC_FunctionName()
            self.state = 1125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1124
                self.match(s_cypherParser.SP)


            self.state = 1127
            self.match(s_cypherParser.T__7)
            self.state = 1129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1128
                self.match(s_cypherParser.SP)


            self.state = 1135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 1131
                self.match(s_cypherParser.DISTINCT)
                self.state = 1133
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1132
                    self.match(s_cypherParser.SP)




            self.state = 1154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119874368) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394345409) != 0):
                self.state = 1137
                self.s_FunctionInvocationExpression()
                self.state = 1139
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1138
                    self.match(s_cypherParser.SP)


                self.state = 1151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 1141
                    self.match(s_cypherParser.T__0)
                    self.state = 1143
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1142
                        self.match(s_cypherParser.SP)


                    self.state = 1145
                    self.s_FunctionInvocationExpression()
                    self.state = 1147
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1146
                        self.match(s_cypherParser.SP)


                    self.state = 1153
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1156
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_FunctionInvocationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_FunctionInvocationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_FunctionInvocationExpression" ):
                listener.enterS_FunctionInvocationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_FunctionInvocationExpression" ):
                listener.exitS_FunctionInvocationExpression(self)




    def s_FunctionInvocationExpression(self):

        localctx = s_cypherParser.S_FunctionInvocationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_s_FunctionInvocationExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1158
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_ListLiteralExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ListLiteralExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ListLiteralExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = s_cypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            self.match(s_cypherParser.T__10)
            self.state = 1162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1161
                self.match(s_cypherParser.SP)


            self.state = 1181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119874368) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394345409) != 0):
                self.state = 1164
                self.s_ListLiteralExpression()
                self.state = 1166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1165
                    self.match(s_cypherParser.SP)


                self.state = 1178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 1168
                    self.match(s_cypherParser.T__0)
                    self.state = 1170
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1169
                        self.match(s_cypherParser.SP)


                    self.state = 1172
                    self.s_ListLiteralExpression()
                    self.state = 1174
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1173
                        self.match(s_cypherParser.SP)


                    self.state = 1180
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1183
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ListLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ListLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ListLiteralExpression" ):
                listener.enterS_ListLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ListLiteralExpression" ):
                listener.exitS_ListLiteralExpression(self)




    def s_ListLiteralExpression(self):

        localctx = s_cypherParser.S_ListLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_s_ListLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_MapKeyValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MapKeyValueContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MapKeyValueContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = s_cypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1187
            self.match(s_cypherParser.T__5)
            self.state = 1189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1188
                self.match(s_cypherParser.SP)


            self.state = 1202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 1191
                self.s_MapKeyValue()
                self.state = 1199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 1192
                    self.match(s_cypherParser.T__0)
                    self.state = 1194
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1193
                        self.match(s_cypherParser.SP)


                    self.state = 1196
                    self.s_MapKeyValue()
                    self.state = 1201
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1204
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MapKeyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MapKeyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MapKeyValue" ):
                listener.enterS_MapKeyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MapKeyValue" ):
                listener.exitS_MapKeyValue(self)




    def s_MapKeyValue(self):

        localctx = s_cypherParser.S_MapKeyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_s_MapKeyValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1206
            self.oC_PropertyKeyName()
            self.state = 1208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1207
                self.match(s_cypherParser.SP)


            self.state = 1210
            self.match(s_cypherParser.T__9)
            self.state = 1212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1211
                self.match(s_cypherParser.SP)


            self.state = 1214
            self.oC_Expression()
            self.state = 1216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1215
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(s_cypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(s_cypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(s_cypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(s_cypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(s_cypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = s_cypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1218
            _la = self._input.LA(1)
            if not(_la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625937) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(s_cypherParser.AND, 0)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def OR(self):
            return self.getToken(s_cypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(s_cypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(s_cypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(s_cypherParser.DO, 0)

        def FOR(self):
            return self.getToken(s_cypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(s_cypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(s_cypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(s_cypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(s_cypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(s_cypherParser.OF, 0)

        def ADD(self):
            return self.getToken(s_cypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(s_cypherParser.DROP, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = s_cypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            _la = self._input.LA(1)
            if not(((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 128317405001678847) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(s_cypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = s_cypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1222
                self.match(s_cypherParser.SP)


            self.state = 1225
            self.oC_Statement()
            self.state = 1230
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.state = 1227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1226
                    self.match(s_cypherParser.SP)


                self.state = 1229
                self.match(s_cypherParser.T__23)


            self.state = 1233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1232
                self.match(s_cypherParser.SP)


            self.state = 1235
            self.match(s_cypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = s_cypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1237
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = s_cypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1239
            self.oC_SingleQuery()
            self.state = 1246
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,222,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1241
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1240
                        self.match(s_cypherParser.SP)


                    self.state = 1243
                    self.oC_Union() 
                self.state = 1248
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,222,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = s_cypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 1261
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1249
                self.match(s_cypherParser.UNION)
                self.state = 1250
                self.match(s_cypherParser.SP)
                self.state = 1251
                self.match(s_cypherParser.ALL)
                self.state = 1253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1252
                    self.match(s_cypherParser.SP)


                self.state = 1255
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1256
                self.match(s_cypherParser.UNION)
                self.state = 1258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1257
                    self.match(s_cypherParser.SP)


                self.state = 1260
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = s_cypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_oC_SingleQuery)
        try:
            self.state = 1265
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1263
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1264
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = s_cypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 1302
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 1267
                    self.oC_ReadingClause()
                    self.state = 1269
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1268
                        self.match(s_cypherParser.SP)


                    self.state = 1275
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1276
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 1277
                    self.oC_ReadingClause()
                    self.state = 1279
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1278
                        self.match(s_cypherParser.SP)


                    self.state = 1285
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1286
                self.oC_UpdatingClause()
                self.state = 1293
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,232,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1288
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1287
                            self.match(s_cypherParser.SP)


                        self.state = 1290
                        self.oC_UpdatingClause() 
                    self.state = 1295
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

                self.state = 1300
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
                if la_ == 1:
                    self.state = 1297
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1296
                        self.match(s_cypherParser.SP)


                    self.state = 1299
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(s_cypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = s_cypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_oC_ReadingClause)
        try:
            self.state = 1307
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1304
                self.oC_Match()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1305
                self.oC_Unwind()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1306
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = s_cypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1309
            self.match(s_cypherParser.UNWIND)
            self.state = 1311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1310
                self.match(s_cypherParser.SP)


            self.state = 1313
            self.oC_Expression()
            self.state = 1314
            self.match(s_cypherParser.SP)
            self.state = 1315
            self.match(s_cypherParser.AS)
            self.state = 1316
            self.match(s_cypherParser.SP)
            self.state = 1317
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = s_cypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1319
            self.match(s_cypherParser.MERGE)
            self.state = 1321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1320
                self.match(s_cypherParser.SP)


            self.state = 1323
            self.oC_PatternPart()
            self.state = 1328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==135:
                self.state = 1324
                self.match(s_cypherParser.SP)
                self.state = 1325
                self.oC_MergeAction()
                self.state = 1330
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = s_cypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_MergeAction)
        try:
            self.state = 1341
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1331
                self.match(s_cypherParser.ON)
                self.state = 1332
                self.match(s_cypherParser.SP)
                self.state = 1333
                self.match(s_cypherParser.MATCH)
                self.state = 1334
                self.match(s_cypherParser.SP)
                self.state = 1335
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1336
                self.match(s_cypherParser.ON)
                self.state = 1337
                self.match(s_cypherParser.SP)
                self.state = 1338
                self.match(s_cypherParser.CREATE)
                self.state = 1339
                self.match(s_cypherParser.SP)
                self.state = 1340
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = s_cypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1343
            self.match(s_cypherParser.CREATE)
            self.state = 1345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1344
                self.match(s_cypherParser.SP)


            self.state = 1347
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = s_cypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1349
            self.match(s_cypherParser.SET)
            self.state = 1351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1350
                self.match(s_cypherParser.SP)


            self.state = 1353
            self.oC_SetItem()
            self.state = 1364
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,245,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1355
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1354
                        self.match(s_cypherParser.SP)


                    self.state = 1357
                    self.match(s_cypherParser.T__0)
                    self.state = 1359
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1358
                        self.match(s_cypherParser.SP)


                    self.state = 1361
                    self.oC_SetItem() 
                self.state = 1366
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,245,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = s_cypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 1367
                self.match(s_cypherParser.DETACH)
                self.state = 1368
                self.match(s_cypherParser.SP)


            self.state = 1371
            self.match(s_cypherParser.DELETE)
            self.state = 1373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1372
                self.match(s_cypherParser.SP)


            self.state = 1375
            self.oC_Expression()
            self.state = 1386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1 or _la==135:
                self.state = 1377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1376
                    self.match(s_cypherParser.SP)


                self.state = 1379
                self.match(s_cypherParser.T__0)
                self.state = 1381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1380
                    self.match(s_cypherParser.SP)


                self.state = 1383
                self.oC_Expression()
                self.state = 1388
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = s_cypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1389
            self.match(s_cypherParser.REMOVE)
            self.state = 1390
            self.match(s_cypherParser.SP)
            self.state = 1391
            self.oC_RemoveItem()
            self.state = 1402
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,253,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1393
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1392
                        self.match(s_cypherParser.SP)


                    self.state = 1395
                    self.match(s_cypherParser.T__0)
                    self.state = 1397
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1396
                        self.match(s_cypherParser.SP)


                    self.state = 1399
                    self.oC_RemoveItem() 
                self.state = 1404
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,253,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = s_cypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1405
            self.oC_YieldItem()
            self.state = 1416
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,256,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1407
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1406
                        self.match(s_cypherParser.SP)


                    self.state = 1409
                    self.match(s_cypherParser.T__0)
                    self.state = 1411
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1410
                        self.match(s_cypherParser.SP)


                    self.state = 1413
                    self.oC_YieldItem() 
                self.state = 1418
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,256,self._ctx)

            self.state = 1423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82 or _la==135:
                self.state = 1420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1419
                    self.match(s_cypherParser.SP)


                self.state = 1422
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = s_cypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1430
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.state = 1425
                self.oC_ProcedureResultField()
                self.state = 1426
                self.match(s_cypherParser.SP)
                self.state = 1427
                self.match(s_cypherParser.AS)
                self.state = 1428
                self.match(s_cypherParser.SP)


            self.state = 1432
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = s_cypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1434
            self.match(s_cypherParser.WITH)
            self.state = 1435
            self.oC_ProjectionBody()
            self.state = 1440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82 or _la==135:
                self.state = 1437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1436
                    self.match(s_cypherParser.SP)


                self.state = 1439
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = s_cypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1442
            self.match(s_cypherParser.RETURN)
            self.state = 1443
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)




    def oC_ProjectionBody(self):

        localctx = s_cypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1449
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
            if la_ == 1:
                self.state = 1446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1445
                    self.match(s_cypherParser.SP)


                self.state = 1448
                self.match(s_cypherParser.DISTINCT)


            self.state = 1451
            self.match(s_cypherParser.SP)
            self.state = 1452
            self.oC_ProjectionItems()
            self.state = 1455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
            if la_ == 1:
                self.state = 1453
                self.match(s_cypherParser.SP)
                self.state = 1454
                self.oC_Order()


            self.state = 1459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                self.state = 1457
                self.match(s_cypherParser.SP)
                self.state = 1458
                self.oC_Skip()


            self.state = 1463
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.state = 1461
                self.match(s_cypherParser.SP)
                self.state = 1462
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)




    def oC_ProjectionItems(self):

        localctx = s_cypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 1493
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1465
                self.match(s_cypherParser.T__4)
                self.state = 1476
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,269,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1467
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1466
                            self.match(s_cypherParser.SP)


                        self.state = 1469
                        self.match(s_cypherParser.T__0)
                        self.state = 1471
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1470
                            self.match(s_cypherParser.SP)


                        self.state = 1473
                        self.oC_ProjectionItem() 
                    self.state = 1478
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,269,self._ctx)

                pass
            elif token in [6, 8, 11, 16, 17, 26, 48, 57, 86, 92, 93, 94, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1479
                self.oC_ProjectionItem()
                self.state = 1490
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,272,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1481
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1480
                            self.match(s_cypherParser.SP)


                        self.state = 1483
                        self.match(s_cypherParser.T__0)
                        self.state = 1485
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1484
                            self.match(s_cypherParser.SP)


                        self.state = 1487
                        self.oC_ProjectionItem() 
                    self.state = 1492
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,272,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)




    def oC_ProjectionItem(self):

        localctx = s_cypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_ProjectionItem)
        try:
            self.state = 1502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1495
                self.oC_Expression()
                self.state = 1496
                self.match(s_cypherParser.SP)
                self.state = 1497
                self.match(s_cypherParser.AS)
                self.state = 1498
                self.match(s_cypherParser.SP)
                self.state = 1499
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1501
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = s_cypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1504
            self.match(s_cypherParser.ORDER)
            self.state = 1505
            self.match(s_cypherParser.SP)
            self.state = 1506
            self.match(s_cypherParser.BY)
            self.state = 1507
            self.match(s_cypherParser.SP)
            self.state = 1508
            self.oC_SortItem()
            self.state = 1516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 1509
                self.match(s_cypherParser.T__0)
                self.state = 1511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1510
                    self.match(s_cypherParser.SP)


                self.state = 1513
                self.oC_SortItem()
                self.state = 1518
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = s_cypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1519
            self.match(s_cypherParser.L_SKIP)
            self.state = 1520
            self.match(s_cypherParser.SP)
            self.state = 1521
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = s_cypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1523
            self.match(s_cypherParser.LIMIT)
            self.state = 1524
            self.match(s_cypherParser.SP)
            self.state = 1525
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = s_cypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1527
            self.oC_Expression()
            self.state = 1532
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.state = 1529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1528
                    self.match(s_cypherParser.SP)


                self.state = 1531
                _la = self._input.LA(1)
                if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = s_cypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1534
            self.match(s_cypherParser.WHERE)
            self.state = 1535
            self.match(s_cypherParser.SP)
            self.state = 1536
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = s_cypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1538
            self.oC_PatternPart()
            self.state = 1549
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,281,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1540
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1539
                        self.match(s_cypherParser.SP)


                    self.state = 1542
                    self.match(s_cypherParser.T__0)
                    self.state = 1544
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1543
                        self.match(s_cypherParser.SP)


                    self.state = 1546
                    self.oC_PatternPart() 
                self.state = 1551
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,281,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = s_cypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1552
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = s_cypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 1568
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1554
                self.oC_NodePattern()
                self.state = 1561
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,283,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1556
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1555
                            self.match(s_cypherParser.SP)


                        self.state = 1558
                        self.oC_PatternElementChain() 
                    self.state = 1563
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,283,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1564
                self.match(s_cypherParser.T__7)
                self.state = 1565
                self.oC_PatternElement()
                self.state = 1566
                self.match(s_cypherParser.T__8)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = s_cypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1570
            self.oC_NodePattern()
            self.state = 1575 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1572
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1571
                        self.match(s_cypherParser.SP)


                    self.state = 1574
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 1577 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,286,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = s_cypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1579
            self.oC_RelationshipPattern()
            self.state = 1581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1580
                self.match(s_cypherParser.SP)


            self.state = 1583
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = s_cypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 1649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1585
                self.oC_LeftArrowHead()
                self.state = 1587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1586
                    self.match(s_cypherParser.SP)


                self.state = 1589
                self.oC_Dash()
                self.state = 1591
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
                if la_ == 1:
                    self.state = 1590
                    self.match(s_cypherParser.SP)


                self.state = 1594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1593
                    self.oC_RelationshipDetail()


                self.state = 1597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1596
                    self.match(s_cypherParser.SP)


                self.state = 1599
                self.oC_Dash()
                self.state = 1601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1600
                    self.match(s_cypherParser.SP)


                self.state = 1603
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1605
                self.oC_LeftArrowHead()
                self.state = 1607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1606
                    self.match(s_cypherParser.SP)


                self.state = 1609
                self.oC_Dash()
                self.state = 1611
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
                if la_ == 1:
                    self.state = 1610
                    self.match(s_cypherParser.SP)


                self.state = 1614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1613
                    self.oC_RelationshipDetail()


                self.state = 1617
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1616
                    self.match(s_cypherParser.SP)


                self.state = 1619
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1621
                self.oC_Dash()
                self.state = 1623
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
                if la_ == 1:
                    self.state = 1622
                    self.match(s_cypherParser.SP)


                self.state = 1626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1625
                    self.oC_RelationshipDetail()


                self.state = 1629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1628
                    self.match(s_cypherParser.SP)


                self.state = 1631
                self.oC_Dash()
                self.state = 1633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1632
                    self.match(s_cypherParser.SP)


                self.state = 1635
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1637
                self.oC_Dash()
                self.state = 1639
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
                if la_ == 1:
                    self.state = 1638
                    self.match(s_cypherParser.SP)


                self.state = 1642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1641
                    self.oC_RelationshipDetail()


                self.state = 1645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1644
                    self.match(s_cypherParser.SP)


                self.state = 1647
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = s_cypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_Properties)
        try:
            self.state = 1653
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1651
                self.oC_MapLiteral()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1652
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = s_cypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1655
            self.match(s_cypherParser.T__9)
            self.state = 1657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1656
                self.match(s_cypherParser.SP)


            self.state = 1659
            self.oC_RelTypeName()
            self.state = 1673
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,310,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1661
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1660
                        self.match(s_cypherParser.SP)


                    self.state = 1663
                    self.match(s_cypherParser.T__24)
                    self.state = 1665
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==10:
                        self.state = 1664
                        self.match(s_cypherParser.T__9)


                    self.state = 1668
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1667
                        self.match(s_cypherParser.SP)


                    self.state = 1670
                    self.oC_RelTypeName() 
                self.state = 1675
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,310,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = s_cypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1676
            self.oC_NodeLabel()
            self.state = 1683
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,312,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1678
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1677
                        self.match(s_cypherParser.SP)


                    self.state = 1680
                    self.oC_NodeLabel() 
                self.state = 1685
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,312,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = s_cypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1686
            self.match(s_cypherParser.T__9)
            self.state = 1688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1687
                self.match(s_cypherParser.SP)


            self.state = 1690
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = s_cypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1692
            self.match(s_cypherParser.T__4)
            self.state = 1694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1693
                self.match(s_cypherParser.SP)


            self.state = 1700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                self.state = 1696
                self.oC_IntegerLiteral()
                self.state = 1698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1697
                    self.match(s_cypherParser.SP)




            self.state = 1712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 1702
                self.match(s_cypherParser.T__22)
                self.state = 1704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1703
                    self.match(s_cypherParser.SP)


                self.state = 1710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                    self.state = 1706
                    self.oC_IntegerLiteral()
                    self.state = 1708
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1707
                        self.match(s_cypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = s_cypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1714
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = s_cypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1716
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = s_cypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1718
            self.oC_Atom()
            self.state = 1723 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1720
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1719
                        self.match(s_cypherParser.SP)


                    self.state = 1722
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 1725 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,322,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = s_cypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1727
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = s_cypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1729
            self.oC_XorExpression()
            self.state = 1736
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,323,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1730
                    self.match(s_cypherParser.SP)
                    self.state = 1731
                    self.match(s_cypherParser.OR)
                    self.state = 1732
                    self.match(s_cypherParser.SP)
                    self.state = 1733
                    self.oC_XorExpression() 
                self.state = 1738
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,323,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = s_cypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1739
            self.oC_AndExpression()
            self.state = 1746
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,324,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1740
                    self.match(s_cypherParser.SP)
                    self.state = 1741
                    self.match(s_cypherParser.XOR)
                    self.state = 1742
                    self.match(s_cypherParser.SP)
                    self.state = 1743
                    self.oC_AndExpression() 
                self.state = 1748
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,324,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = s_cypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1749
            self.oC_NotExpression()
            self.state = 1756
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,325,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1750
                    self.match(s_cypherParser.SP)
                    self.state = 1751
                    self.match(s_cypherParser.AND)
                    self.state = 1752
                    self.match(s_cypherParser.SP)
                    self.state = 1753
                    self.oC_NotExpression() 
                self.state = 1758
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,325,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = s_cypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1759
                self.match(s_cypherParser.NOT)
                self.state = 1761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1760
                    self.match(s_cypherParser.SP)


                self.state = 1767
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1768
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PartialComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PartialComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PartialComparisonExpression" ):
                listener.enterOC_PartialComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PartialComparisonExpression" ):
                listener.exitOC_PartialComparisonExpression(self)




    def oC_PartialComparisonExpression(self):

        localctx = s_cypherParser.OC_PartialComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_oC_PartialComparisonExpression)
        self._la = 0 # Token type
        try:
            self.state = 1800
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1770
                self.match(s_cypherParser.T__1)
                self.state = 1772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1771
                    self.match(s_cypherParser.SP)


                self.state = 1774
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1775
                self.match(s_cypherParser.T__17)
                self.state = 1777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1776
                    self.match(s_cypherParser.SP)


                self.state = 1779
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1780
                self.match(s_cypherParser.T__18)
                self.state = 1782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1781
                    self.match(s_cypherParser.SP)


                self.state = 1784
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1785
                self.match(s_cypherParser.T__20)
                self.state = 1787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1786
                    self.match(s_cypherParser.SP)


                self.state = 1789
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1790
                self.match(s_cypherParser.T__19)
                self.state = 1792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1791
                    self.match(s_cypherParser.SP)


                self.state = 1794
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1795
                self.match(s_cypherParser.T__21)
                self.state = 1797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1796
                    self.match(s_cypherParser.SP)


                self.state = 1799
                self.oC_StringListNullPredicateExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringPredicateExpression" ):
                listener.enterOC_StringPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringPredicateExpression" ):
                listener.exitOC_StringPredicateExpression(self)




    def oC_StringPredicateExpression(self):

        localctx = s_cypherParser.OC_StringPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_oC_StringPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1812
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
            if la_ == 1:
                self.state = 1802
                self.match(s_cypherParser.SP)
                self.state = 1803
                self.match(s_cypherParser.STARTS)
                self.state = 1804
                self.match(s_cypherParser.SP)
                self.state = 1805
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1806
                self.match(s_cypherParser.SP)
                self.state = 1807
                self.match(s_cypherParser.ENDS)
                self.state = 1808
                self.match(s_cypherParser.SP)
                self.state = 1809
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1810
                self.match(s_cypherParser.SP)
                self.state = 1811
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 1815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1814
                self.match(s_cypherParser.SP)


            self.state = 1817
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListPredicateExpression" ):
                listener.enterOC_ListPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListPredicateExpression" ):
                listener.exitOC_ListPredicateExpression(self)




    def oC_ListPredicateExpression(self):

        localctx = s_cypherParser.OC_ListPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_oC_ListPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1819
            self.match(s_cypherParser.SP)
            self.state = 1820
            self.match(s_cypherParser.IN)
            self.state = 1822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1821
                self.match(s_cypherParser.SP)


            self.state = 1824
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullPredicateExpression" ):
                listener.enterOC_NullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullPredicateExpression" ):
                listener.exitOC_NullPredicateExpression(self)




    def oC_NullPredicateExpression(self):

        localctx = s_cypherParser.OC_NullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_oC_NullPredicateExpression)
        try:
            self.state = 1836
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,338,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1826
                self.match(s_cypherParser.SP)
                self.state = 1827
                self.match(s_cypherParser.IS)
                self.state = 1828
                self.match(s_cypherParser.SP)
                self.state = 1829
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1830
                self.match(s_cypherParser.SP)
                self.state = 1831
                self.match(s_cypherParser.IS)
                self.state = 1832
                self.match(s_cypherParser.SP)
                self.state = 1833
                self.match(s_cypherParser.NOT)
                self.state = 1834
                self.match(s_cypherParser.SP)
                self.state = 1835
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ListOperatorExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListOperatorExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.state = 1844
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 8, 11, 26, 48, 57, 92, 93, 94, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1838
                self.oC_ListOperatorExpression()
                pass
            elif token in [16, 17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1839
                _la = self._input.LA(1)
                if not(_la==16 or _la==17):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1840
                    self.match(s_cypherParser.SP)


                self.state = 1843
                self.oC_ListOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = s_cypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1846
            self.match(s_cypherParser.T__3)
            self.state = 1848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1847
                self.match(s_cypherParser.SP)


            self.state = 1850
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternComprehensionContext,0)


        def oC_Quantifier(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QuantifierContext,0)


        def oC_PatternPredicate(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPredicateContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionInvocationContext,0)


        def oC_ExistentialSubquery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExistentialSubqueryContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = s_cypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 1876
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1852
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1853
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1854
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1855
                self.match(s_cypherParser.COUNT)
                self.state = 1857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1856
                    self.match(s_cypherParser.SP)


                self.state = 1859
                self.match(s_cypherParser.T__7)
                self.state = 1861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1860
                    self.match(s_cypherParser.SP)


                self.state = 1863
                self.match(s_cypherParser.T__4)
                self.state = 1865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1864
                    self.match(s_cypherParser.SP)


                self.state = 1867
                self.match(s_cypherParser.T__8)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1868
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1869
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1870
                self.oC_Quantifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1871
                self.oC_PatternPredicate()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1872
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1873
                self.oC_FunctionInvocation()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1874
                self.oC_ExistentialSubquery()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1875
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def oC_CaseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_CaseAlternativeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = s_cypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1900
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,351,self._ctx)
            if la_ == 1:
                self.state = 1878
                self.match(s_cypherParser.CASE)
                self.state = 1883 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1880
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1879
                            self.match(s_cypherParser.SP)


                        self.state = 1882
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1885 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,347,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1887
                self.match(s_cypherParser.CASE)
                self.state = 1889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1888
                    self.match(s_cypherParser.SP)


                self.state = 1891
                self.oC_Expression()
                self.state = 1896 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1893
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1892
                            self.match(s_cypherParser.SP)


                        self.state = 1895
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1898 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,350,self._ctx)

                pass


            self.state = 1910
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,354,self._ctx)
            if la_ == 1:
                self.state = 1903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1902
                    self.match(s_cypherParser.SP)


                self.state = 1905
                self.match(s_cypherParser.ELSE)
                self.state = 1907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1906
                    self.match(s_cypherParser.SP)


                self.state = 1909
                self.oC_Expression()


            self.state = 1913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1912
                self.match(s_cypherParser.SP)


            self.state = 1915
            self.match(s_cypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternative" ):
                listener.enterOC_CaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternative" ):
                listener.exitOC_CaseAlternative(self)




    def oC_CaseAlternative(self):

        localctx = s_cypherParser.OC_CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_oC_CaseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1917
            self.match(s_cypherParser.WHEN)
            self.state = 1919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1918
                self.match(s_cypherParser.SP)


            self.state = 1921
            self.oC_Expression()
            self.state = 1923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1922
                self.match(s_cypherParser.SP)


            self.state = 1925
            self.match(s_cypherParser.THEN)
            self.state = 1927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1926
                self.match(s_cypherParser.SP)


            self.state = 1929
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = s_cypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1931
            self.match(s_cypherParser.T__10)
            self.state = 1933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1932
                self.match(s_cypherParser.SP)


            self.state = 1935
            self.oC_FilterExpression()
            self.state = 1944
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,362,self._ctx)
            if la_ == 1:
                self.state = 1937
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1936
                    self.match(s_cypherParser.SP)


                self.state = 1939
                self.match(s_cypherParser.T__24)
                self.state = 1941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1940
                    self.match(s_cypherParser.SP)


                self.state = 1943
                self.oC_Expression()


            self.state = 1947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1946
                self.match(s_cypherParser.SP)


            self.state = 1949
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = s_cypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1951
            self.match(s_cypherParser.T__10)
            self.state = 1953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1952
                self.match(s_cypherParser.SP)


            self.state = 1963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625937) != 0):
                self.state = 1955
                self.oC_Variable()
                self.state = 1957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1956
                    self.match(s_cypherParser.SP)


                self.state = 1959
                self.match(s_cypherParser.T__1)
                self.state = 1961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1960
                    self.match(s_cypherParser.SP)




            self.state = 1965
            self.oC_RelationshipsPattern()
            self.state = 1967
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1966
                self.match(s_cypherParser.SP)


            self.state = 1973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 1969
                self.oC_Where()
                self.state = 1971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1970
                    self.match(s_cypherParser.SP)




            self.state = 1975
            self.match(s_cypherParser.T__24)
            self.state = 1977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1976
                self.match(s_cypherParser.SP)


            self.state = 1979
            self.oC_Expression()
            self.state = 1981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1980
                self.match(s_cypherParser.SP)


            self.state = 1983
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Quantifier" ):
                listener.enterOC_Quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Quantifier" ):
                listener.exitOC_Quantifier(self)




    def oC_Quantifier(self):

        localctx = s_cypherParser.OC_QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_oC_Quantifier)
        self._la = 0 # Token type
        try:
            self.state = 2041
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1985
                self.match(s_cypherParser.ALL)
                self.state = 1987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1986
                    self.match(s_cypherParser.SP)


                self.state = 1989
                self.match(s_cypherParser.T__7)
                self.state = 1991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1990
                    self.match(s_cypherParser.SP)


                self.state = 1993
                self.oC_FilterExpression()
                self.state = 1995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1994
                    self.match(s_cypherParser.SP)


                self.state = 1997
                self.match(s_cypherParser.T__8)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1999
                self.match(s_cypherParser.ANY)
                self.state = 2001
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2000
                    self.match(s_cypherParser.SP)


                self.state = 2003
                self.match(s_cypherParser.T__7)
                self.state = 2005
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2004
                    self.match(s_cypherParser.SP)


                self.state = 2007
                self.oC_FilterExpression()
                self.state = 2009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2008
                    self.match(s_cypherParser.SP)


                self.state = 2011
                self.match(s_cypherParser.T__8)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2013
                self.match(s_cypherParser.NONE)
                self.state = 2015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2014
                    self.match(s_cypherParser.SP)


                self.state = 2017
                self.match(s_cypherParser.T__7)
                self.state = 2019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2018
                    self.match(s_cypherParser.SP)


                self.state = 2021
                self.oC_FilterExpression()
                self.state = 2023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2022
                    self.match(s_cypherParser.SP)


                self.state = 2025
                self.match(s_cypherParser.T__8)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2027
                self.match(s_cypherParser.SINGLE)
                self.state = 2029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2028
                    self.match(s_cypherParser.SP)


                self.state = 2031
                self.match(s_cypherParser.T__7)
                self.state = 2033
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2032
                    self.match(s_cypherParser.SP)


                self.state = 2035
                self.oC_FilterExpression()
                self.state = 2037
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2036
                    self.match(s_cypherParser.SP)


                self.state = 2039
                self.match(s_cypherParser.T__8)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPredicate" ):
                listener.enterOC_PatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPredicate" ):
                listener.exitOC_PatternPredicate(self)




    def oC_PatternPredicate(self):

        localctx = s_cypherParser.OC_PatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_oC_PatternPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2043
            self.oC_RelationshipsPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = s_cypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2045
            self.match(s_cypherParser.T__7)
            self.state = 2047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2046
                self.match(s_cypherParser.SP)


            self.state = 2049
            self.oC_Expression()
            self.state = 2051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2050
                self.match(s_cypherParser.SP)


            self.state = 2053
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = s_cypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2055
            self.oC_Variable()
            self.state = 2056
            self.match(s_cypherParser.SP)
            self.state = 2057
            self.match(s_cypherParser.IN)
            self.state = 2058
            self.match(s_cypherParser.SP)
            self.state = 2059
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = s_cypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_oC_FunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2061
            self.oC_Namespace()
            self.state = 2062
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2064
            self.oC_ProcedureName()
            self.state = 2066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2065
                self.match(s_cypherParser.SP)


            self.state = 2068
            self.match(s_cypherParser.T__7)
            self.state = 2070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2069
                self.match(s_cypherParser.SP)


            self.state = 2089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119874368) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394345409) != 0):
                self.state = 2072
                self.oC_Expression()
                self.state = 2074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2073
                    self.match(s_cypherParser.SP)


                self.state = 2086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 2076
                    self.match(s_cypherParser.T__0)
                    self.state = 2078
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2077
                        self.match(s_cypherParser.SP)


                    self.state = 2080
                    self.oC_Expression()
                    self.state = 2082
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2081
                        self.match(s_cypherParser.SP)


                    self.state = 2088
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2091
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2093
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = s_cypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2095
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = s_cypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2097
            self.oC_Namespace()
            self.state = 2098
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = s_cypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2105
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,395,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2100
                    self.oC_SymbolicName()
                    self.state = 2101
                    self.match(s_cypherParser.T__3) 
                self.state = 2107
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,395,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = s_cypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2108
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_ListLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListLiteralContext,0)


        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = s_cypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_oC_Literal)
        try:
            self.state = 2116
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2110
                self.oC_BooleanLiteral()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2111
                self.match(s_cypherParser.NULL)
                pass
            elif token in [105, 106, 107, 115, 116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2112
                self.oC_NumberLiteral()
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2113
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2114
                self.oC_ListLiteral()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2115
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = s_cypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2118
            _la = self._input.LA(1)
            if not(_la==103 or _la==104):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = s_cypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_oC_NumberLiteral)
        try:
            self.state = 2122
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115, 116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2120
                self.oC_DoubleLiteral()
                pass
            elif token in [105, 106, 107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2121
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(s_cypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(s_cypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = s_cypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2124
            _la = self._input.LA(1)
            if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(s_cypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(s_cypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = s_cypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2126
            _la = self._input.LA(1)
            if not(_la==115 or _la==116):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = s_cypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2128
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = s_cypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2130
            self.match(s_cypherParser.T__25)
            self.state = 2133
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 93, 97, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 2131
                self.oC_SymbolicName()
                pass
            elif token in [106]:
                self.state = 2132
                self.match(s_cypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = s_cypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_oC_SchemaName)
        try:
            self.state = 2137
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,399,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2135
                self.oC_SymbolicName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2136
                self.oC_ReservedWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = s_cypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2139
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2013790208) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = s_cypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2141
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32214351872) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = s_cypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2143
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70334384570368) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





