# Generated from .\s_cypher.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,137,2318,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,1,0,1,0,1,0,3,0,318,8,
        0,1,1,1,1,3,1,322,8,1,1,1,1,1,3,1,326,8,1,1,1,1,1,3,1,330,8,1,1,
        1,1,1,3,1,334,8,1,3,1,336,8,1,1,1,3,1,339,8,1,1,1,3,1,342,8,1,1,
        2,1,2,1,2,1,2,1,2,1,2,3,2,350,8,2,1,2,3,2,353,8,2,1,2,3,2,356,8,
        2,1,3,1,3,3,3,360,8,3,1,3,1,3,1,3,1,3,3,3,366,8,3,1,3,3,3,369,8,
        3,1,3,1,3,1,3,1,3,1,3,3,3,376,8,3,1,3,3,3,379,8,3,1,3,1,3,1,3,3,
        3,384,8,3,1,3,1,3,1,3,1,3,3,3,390,8,3,1,3,3,3,393,8,3,1,3,1,3,1,
        3,3,3,398,8,3,1,3,1,3,3,3,402,8,3,1,3,1,3,1,3,1,3,3,3,408,8,3,1,
        3,1,3,3,3,412,8,3,1,3,1,3,1,3,1,3,3,3,418,8,3,1,3,1,3,3,3,422,8,
        3,1,3,1,3,1,3,1,3,3,3,428,8,3,1,3,1,3,3,3,432,8,3,1,3,1,3,1,3,1,
        3,3,3,438,8,3,1,3,1,3,3,3,442,8,3,1,4,1,4,3,4,446,8,4,1,4,1,4,1,
        5,1,5,3,5,452,8,5,1,5,3,5,455,8,5,1,6,1,6,3,6,459,8,6,1,6,1,6,1,
        7,1,7,3,7,465,8,7,1,7,3,7,468,8,7,1,8,1,8,3,8,472,8,8,1,8,1,8,3,
        8,476,8,8,1,8,1,8,3,8,480,8,8,1,8,5,8,483,8,8,10,8,12,8,486,9,8,
        1,9,1,9,1,9,1,9,3,9,492,8,9,1,9,1,9,1,9,3,9,497,8,9,1,10,1,10,3,
        10,501,8,10,1,10,1,10,3,10,505,8,10,1,10,1,10,3,10,509,8,10,1,10,
        1,10,3,10,513,8,10,1,10,5,10,516,8,10,10,10,12,10,519,9,10,1,11,
        1,11,1,11,1,11,3,11,525,8,11,1,11,1,11,1,11,3,11,530,8,11,1,12,1,
        12,3,12,534,8,12,1,12,1,12,1,13,1,13,3,13,540,8,13,1,13,1,13,1,14,
        1,14,3,14,546,8,14,1,15,1,15,3,15,550,8,15,1,15,1,15,1,16,1,16,3,
        16,556,8,16,1,16,1,16,1,17,1,17,3,17,562,8,17,1,17,1,17,3,17,566,
        8,17,1,17,1,17,1,17,1,17,3,17,572,8,17,1,17,1,17,3,17,576,8,17,1,
        17,1,17,1,17,3,17,581,8,17,1,18,1,18,3,18,585,8,18,1,18,1,18,3,18,
        589,8,18,1,18,1,18,3,18,593,8,18,1,18,1,18,1,19,1,19,3,19,599,8,
        19,1,19,1,19,3,19,603,8,19,1,19,1,19,1,20,1,20,3,20,609,8,20,1,20,
        1,20,3,20,613,8,20,3,20,615,8,20,1,20,1,20,3,20,619,8,20,3,20,621,
        8,20,1,20,1,20,3,20,625,8,20,3,20,627,8,20,1,20,1,20,3,20,631,8,
        20,3,20,633,8,20,1,20,1,20,1,21,1,21,3,21,639,8,21,1,22,1,22,3,22,
        643,8,22,1,22,1,22,1,22,1,22,1,22,3,22,650,8,22,1,22,1,22,1,22,1,
        22,5,22,656,8,22,10,22,12,22,659,9,22,3,22,661,8,22,1,22,1,22,1,
        23,1,23,3,23,667,8,23,1,23,1,23,3,23,671,8,23,3,23,673,8,23,1,24,
        3,24,676,8,24,1,24,1,24,3,24,680,8,24,1,24,1,24,3,24,684,8,24,3,
        24,686,8,24,1,25,1,25,3,25,690,8,25,1,25,1,25,3,25,694,8,25,3,25,
        696,8,25,1,25,1,25,3,25,700,8,25,3,25,702,8,25,1,25,3,25,705,8,25,
        1,25,1,25,3,25,709,8,25,3,25,711,8,25,1,25,1,25,3,25,715,8,25,3,
        25,717,8,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,3,26,726,8,26,1,27,
        1,27,3,27,730,8,27,1,27,1,27,5,27,734,8,27,10,27,12,27,737,9,27,
        1,28,3,28,740,8,28,1,28,1,28,1,28,1,28,1,29,3,29,747,8,29,1,29,1,
        29,3,29,751,8,29,1,29,1,29,3,29,755,8,29,1,29,1,29,1,30,1,30,1,31,
        1,31,1,32,1,32,3,32,765,8,32,1,32,4,32,768,8,32,11,32,12,32,769,
        1,32,3,32,773,8,32,1,32,3,32,776,8,32,3,32,778,8,32,1,32,3,32,781,
        8,32,1,32,1,32,1,33,1,33,3,33,787,8,33,1,33,5,33,790,8,33,10,33,
        12,33,793,9,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,3,35,802,8,35,
        1,35,1,35,3,35,806,8,35,1,35,1,35,3,35,810,8,35,1,35,1,35,3,35,814,
        8,35,1,35,1,35,3,35,818,8,35,1,35,3,35,821,8,35,1,35,1,35,1,36,1,
        36,1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,38,1,38,5,38,836,8,38,10,
        38,12,38,839,9,38,1,39,1,39,1,39,1,39,1,39,5,39,846,8,39,10,39,12,
        39,849,9,39,1,40,1,40,1,40,1,40,1,40,5,40,856,8,40,10,40,12,40,859,
        9,40,1,41,1,41,3,41,863,8,41,5,41,865,8,41,10,41,12,41,868,9,41,
        1,41,1,41,1,42,1,42,3,42,874,8,42,1,42,5,42,877,8,42,10,42,12,42,
        880,9,42,1,43,1,43,3,43,884,8,43,1,43,1,43,1,43,1,43,3,43,890,8,
        43,1,43,1,43,1,43,1,43,3,43,896,8,43,1,43,1,43,1,43,1,43,3,43,902,
        8,43,1,43,1,43,1,43,1,43,3,43,908,8,43,1,43,1,43,1,43,1,43,3,43,
        914,8,43,1,43,1,43,3,43,918,8,43,1,44,1,44,1,44,1,44,1,44,3,44,925,
        8,44,1,45,1,45,3,45,929,8,45,1,45,1,45,3,45,933,8,45,1,45,1,45,1,
        45,3,45,938,8,45,1,45,1,45,3,45,942,8,45,1,45,1,45,5,45,946,8,45,
        10,45,12,45,949,9,45,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,
        1,47,1,47,1,47,1,47,1,47,1,47,3,47,966,8,47,1,47,3,47,969,8,47,1,
        47,1,47,1,48,1,48,1,48,3,48,976,8,48,1,48,1,48,1,49,1,49,1,49,1,
        49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,990,8,49,1,50,1,50,3,50,994,
        8,50,1,50,1,50,3,50,998,8,50,1,50,1,50,1,50,3,50,1003,8,50,1,50,
        1,50,3,50,1007,8,50,1,50,1,50,1,50,3,50,1012,8,50,1,50,1,50,3,50,
        1016,8,50,1,50,1,50,5,50,1020,8,50,10,50,12,50,1023,9,50,1,51,1,
        51,3,51,1027,8,51,1,51,1,51,3,51,1031,8,51,1,51,1,51,5,51,1035,8,
        51,10,51,12,51,1038,9,51,1,52,1,52,1,52,3,52,1043,8,52,1,52,3,52,
        1046,8,52,1,53,1,53,3,53,1050,8,53,1,53,1,53,5,53,1054,8,53,10,53,
        12,53,1057,9,53,1,54,1,54,3,54,1061,8,54,1,54,5,54,1064,8,54,10,
        54,12,54,1067,9,54,1,54,3,54,1070,8,54,1,54,3,54,1073,8,54,1,55,
        1,55,3,55,1077,8,55,1,55,4,55,1080,8,55,11,55,12,55,1081,1,55,3,
        55,1085,8,55,1,55,3,55,1088,8,55,3,55,1090,8,55,1,55,3,55,1093,8,
        55,1,55,1,55,1,56,3,56,1098,8,56,1,56,1,56,1,56,1,56,1,57,3,57,1105,
        8,57,1,57,1,57,3,57,1109,8,57,1,57,1,57,3,57,1113,8,57,1,57,1,57,
        1,58,1,58,1,59,1,59,1,60,1,60,3,60,1123,8,60,1,61,1,61,1,62,1,62,
        1,63,3,63,1130,8,63,1,63,1,63,3,63,1134,8,63,1,63,3,63,1137,8,63,
        1,63,3,63,1140,8,63,1,63,1,63,1,64,1,64,1,65,1,65,3,65,1148,8,65,
        1,65,5,65,1151,8,65,10,65,12,65,1154,9,65,1,66,1,66,1,66,1,66,3,
        66,1160,8,66,1,66,1,66,1,66,3,66,1165,8,66,1,66,3,66,1168,8,66,1,
        67,1,67,3,67,1172,8,67,1,68,1,68,3,68,1176,8,68,5,68,1178,8,68,10,
        68,12,68,1181,9,68,1,68,1,68,1,68,3,68,1186,8,68,5,68,1188,8,68,
        10,68,12,68,1191,9,68,1,68,1,68,3,68,1195,8,68,1,68,5,68,1198,8,
        68,10,68,12,68,1201,9,68,1,68,3,68,1204,8,68,1,68,3,68,1207,8,68,
        3,68,1209,8,68,1,69,4,69,1212,8,69,11,69,12,69,1213,1,69,1,69,1,
        70,1,70,3,70,1220,8,70,5,70,1222,8,70,10,70,12,70,1225,9,70,1,70,
        1,70,3,70,1229,8,70,5,70,1231,8,70,10,70,12,70,1234,9,70,1,70,1,
        70,3,70,1238,8,70,1,71,1,71,1,71,3,71,1243,8,71,1,72,1,72,3,72,1247,
        8,72,1,72,1,72,1,72,1,72,1,72,1,72,1,73,1,73,3,73,1257,8,73,1,73,
        1,73,1,73,5,73,1262,8,73,10,73,12,73,1265,9,73,1,74,1,74,1,74,1,
        74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,1277,8,74,1,75,1,75,3,75,1281,
        8,75,1,75,1,75,1,76,1,76,3,76,1287,8,76,1,76,1,76,3,76,1291,8,76,
        1,76,1,76,3,76,1295,8,76,1,76,5,76,1298,8,76,10,76,12,76,1301,9,
        76,1,77,1,77,1,77,1,77,3,77,1307,8,77,1,77,1,77,3,77,1311,8,77,1,
        77,5,77,1314,8,77,10,77,12,77,1317,9,77,1,78,1,78,1,78,1,78,3,78,
        1323,8,78,1,79,1,79,1,79,1,79,3,79,1329,8,79,1,79,1,79,1,79,3,79,
        1334,8,79,1,80,1,80,1,80,1,80,3,80,1340,8,80,1,80,3,80,1343,8,80,
        1,80,1,80,1,80,1,80,3,80,1349,8,80,3,80,1351,8,80,1,81,1,81,3,81,
        1355,8,81,1,81,1,81,3,81,1359,8,81,1,81,5,81,1362,8,81,10,81,12,
        81,1365,9,81,1,81,3,81,1368,8,81,1,81,3,81,1371,8,81,1,82,1,82,1,
        82,1,82,1,82,3,82,1378,8,82,1,83,1,83,1,83,3,83,1383,8,83,1,83,3,
        83,1386,8,83,1,84,1,84,1,84,1,85,3,85,1392,8,85,1,85,3,85,1395,8,
        85,1,85,1,85,1,85,1,85,3,85,1401,8,85,1,85,1,85,3,85,1405,8,85,1,
        85,1,85,3,85,1409,8,85,1,86,1,86,3,86,1413,8,86,1,86,1,86,3,86,1417,
        8,86,1,86,5,86,1420,8,86,10,86,12,86,1423,9,86,1,86,1,86,3,86,1427,
        8,86,1,86,1,86,3,86,1431,8,86,1,86,5,86,1434,8,86,10,86,12,86,1437,
        9,86,3,86,1439,8,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1448,
        8,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,1457,8,88,1,88,5,88,
        1460,8,88,10,88,12,88,1463,9,88,1,89,1,89,1,89,1,89,1,90,1,90,1,
        90,1,90,1,91,1,91,3,91,1475,8,91,1,91,3,91,1478,8,91,1,92,1,92,1,
        92,1,92,1,93,1,93,3,93,1486,8,93,1,93,1,93,3,93,1490,8,93,1,93,5,
        93,1493,8,93,10,93,12,93,1496,9,93,1,94,1,94,1,95,1,95,3,95,1502,
        8,95,1,95,5,95,1505,8,95,10,95,12,95,1508,9,95,1,95,1,95,1,95,1,
        95,3,95,1514,8,95,1,96,1,96,3,96,1518,8,96,1,96,4,96,1521,8,96,11,
        96,12,96,1522,1,97,1,97,3,97,1527,8,97,1,97,1,97,1,98,1,98,3,98,
        1533,8,98,1,98,1,98,3,98,1537,8,98,1,98,3,98,1540,8,98,1,98,3,98,
        1543,8,98,1,98,1,98,3,98,1547,8,98,1,98,1,98,1,98,1,98,3,98,1553,
        8,98,1,98,1,98,3,98,1557,8,98,1,98,3,98,1560,8,98,1,98,3,98,1563,
        8,98,1,98,1,98,1,98,1,98,3,98,1569,8,98,1,98,3,98,1572,8,98,1,98,
        3,98,1575,8,98,1,98,1,98,3,98,1579,8,98,1,98,1,98,1,98,1,98,3,98,
        1585,8,98,1,98,3,98,1588,8,98,1,98,3,98,1591,8,98,1,98,1,98,3,98,
        1595,8,98,1,99,1,99,3,99,1599,8,99,1,100,1,100,3,100,1603,8,100,
        1,100,1,100,3,100,1607,8,100,1,100,1,100,3,100,1611,8,100,1,100,
        3,100,1614,8,100,1,100,5,100,1617,8,100,10,100,12,100,1620,9,100,
        1,101,1,101,3,101,1624,8,101,1,101,5,101,1627,8,101,10,101,12,101,
        1630,9,101,1,102,1,102,3,102,1634,8,102,1,102,1,102,1,103,1,103,
        3,103,1640,8,103,1,103,1,103,3,103,1644,8,103,3,103,1646,8,103,1,
        103,1,103,3,103,1650,8,103,1,103,1,103,3,103,1654,8,103,3,103,1656,
        8,103,3,103,1658,8,103,1,104,1,104,1,105,1,105,1,106,1,106,3,106,
        1666,8,106,1,106,4,106,1669,8,106,11,106,12,106,1670,1,107,1,107,
        1,108,1,108,1,108,1,108,1,108,5,108,1680,8,108,10,108,12,108,1683,
        9,108,1,109,1,109,1,109,1,109,1,109,5,109,1690,8,109,10,109,12,109,
        1693,9,109,1,110,1,110,1,110,1,110,1,110,5,110,1700,8,110,10,110,
        12,110,1703,9,110,1,111,1,111,3,111,1707,8,111,5,111,1709,8,111,
        10,111,12,111,1712,9,111,1,111,1,111,1,112,1,112,3,112,1718,8,112,
        1,112,5,112,1721,8,112,10,112,12,112,1724,9,112,1,113,1,113,3,113,
        1728,8,113,1,113,1,113,1,113,1,113,3,113,1734,8,113,1,113,1,113,
        1,113,1,113,3,113,1740,8,113,1,113,1,113,1,113,1,113,3,113,1746,
        8,113,1,113,1,113,1,113,1,113,3,113,1752,8,113,1,113,1,113,1,113,
        1,113,3,113,1758,8,113,1,113,1,113,3,113,1762,8,113,1,114,1,114,
        1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,3,114,1774,8,114,
        1,114,3,114,1777,8,114,1,114,1,114,1,115,1,115,1,115,3,115,1784,
        8,115,1,115,1,115,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,
        1,116,1,116,3,116,1798,8,116,1,117,1,117,3,117,1802,8,117,1,117,
        1,117,3,117,1806,8,117,1,117,1,117,1,117,3,117,1811,8,117,1,117,
        1,117,3,117,1815,8,117,1,117,1,117,5,117,1819,8,117,10,117,12,117,
        1822,9,117,1,118,1,118,1,119,1,119,3,119,1828,8,119,1,119,1,119,
        3,119,1832,8,119,1,119,1,119,1,119,3,119,1837,8,119,1,119,1,119,
        3,119,1841,8,119,1,119,1,119,1,119,3,119,1846,8,119,1,119,1,119,
        3,119,1850,8,119,1,119,1,119,5,119,1854,8,119,10,119,12,119,1857,
        9,119,1,120,1,120,3,120,1861,8,120,1,120,1,120,3,120,1865,8,120,
        1,120,1,120,5,120,1869,8,120,10,120,12,120,1872,9,120,1,121,1,121,
        1,121,3,121,1877,8,121,1,121,3,121,1880,8,121,1,122,1,122,3,122,
        1884,8,122,1,122,5,122,1887,8,122,10,122,12,122,1890,9,122,1,122,
        3,122,1893,8,122,1,122,3,122,1896,8,122,1,123,1,123,3,123,1900,8,
        123,1,123,1,123,1,124,1,124,1,124,1,124,1,124,3,124,1909,8,124,1,
        124,1,124,3,124,1913,8,124,1,124,1,124,3,124,1917,8,124,1,124,1,
        124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,3,124,1928,8,124,1,
        125,1,125,3,125,1932,8,125,1,125,4,125,1935,8,125,11,125,12,125,
        1936,1,125,1,125,3,125,1941,8,125,1,125,1,125,3,125,1945,8,125,1,
        125,4,125,1948,8,125,11,125,12,125,1949,3,125,1952,8,125,1,125,3,
        125,1955,8,125,1,125,1,125,3,125,1959,8,125,1,125,3,125,1962,8,125,
        1,125,3,125,1965,8,125,1,125,1,125,1,126,1,126,3,126,1971,8,126,
        1,126,1,126,3,126,1975,8,126,1,126,1,126,3,126,1979,8,126,1,126,
        1,126,1,127,1,127,3,127,1985,8,127,1,127,1,127,3,127,1989,8,127,
        1,127,1,127,3,127,1993,8,127,1,127,3,127,1996,8,127,1,127,3,127,
        1999,8,127,1,127,1,127,1,128,1,128,3,128,2005,8,128,1,128,1,128,
        3,128,2009,8,128,1,128,1,128,3,128,2013,8,128,3,128,2015,8,128,1,
        128,1,128,3,128,2019,8,128,1,128,1,128,3,128,2023,8,128,3,128,2025,
        8,128,1,128,1,128,3,128,2029,8,128,1,128,1,128,3,128,2033,8,128,
        1,128,1,128,1,129,1,129,3,129,2039,8,129,1,129,1,129,3,129,2043,
        8,129,1,129,1,129,3,129,2047,8,129,1,129,1,129,1,129,1,129,3,129,
        2053,8,129,1,129,1,129,3,129,2057,8,129,1,129,1,129,3,129,2061,8,
        129,1,129,1,129,1,129,1,129,3,129,2067,8,129,1,129,1,129,3,129,2071,
        8,129,1,129,1,129,3,129,2075,8,129,1,129,1,129,1,129,1,129,3,129,
        2081,8,129,1,129,1,129,3,129,2085,8,129,1,129,1,129,3,129,2089,8,
        129,1,129,1,129,3,129,2093,8,129,1,130,1,130,3,130,2097,8,130,1,
        130,3,130,2100,8,130,1,131,1,131,1,132,1,132,3,132,2106,8,132,1,
        132,1,132,3,132,2110,8,132,1,132,1,132,1,133,1,133,1,133,1,133,1,
        133,1,133,1,134,1,134,3,134,2122,8,134,1,134,1,134,3,134,2126,8,
        134,1,134,1,134,3,134,2130,8,134,3,134,2132,8,134,1,134,1,134,3,
        134,2136,8,134,1,134,1,134,3,134,2140,8,134,1,134,1,134,3,134,2144,
        8,134,5,134,2146,8,134,10,134,12,134,2149,9,134,3,134,2151,8,134,
        1,134,1,134,1,135,1,135,1,135,1,136,1,136,3,136,2160,8,136,1,136,
        1,136,3,136,2164,8,136,1,136,1,136,1,136,3,136,2169,8,136,1,136,
        3,136,2172,8,136,3,136,2174,8,136,1,136,3,136,2177,8,136,1,136,1,
        136,1,137,1,137,3,137,2183,8,137,1,137,1,137,3,137,2187,8,137,1,
        137,1,137,3,137,2191,8,137,1,137,1,137,3,137,2195,8,137,1,137,1,
        137,3,137,2199,8,137,5,137,2201,8,137,10,137,12,137,2204,9,137,3,
        137,2206,8,137,1,137,1,137,1,138,1,138,1,139,1,139,1,140,1,140,1,
        140,1,141,1,141,1,141,5,141,2220,8,141,10,141,12,141,2223,9,141,
        1,142,1,142,1,143,1,143,1,143,1,143,1,143,1,143,3,143,2233,8,143,
        1,144,1,144,1,145,1,145,3,145,2239,8,145,1,146,1,146,1,147,1,147,
        1,148,1,148,3,148,2247,8,148,1,148,1,148,3,148,2251,8,148,1,148,
        1,148,3,148,2255,8,148,1,148,1,148,3,148,2259,8,148,5,148,2261,8,
        148,10,148,12,148,2264,9,148,3,148,2266,8,148,1,148,1,148,1,149,
        1,149,3,149,2272,8,149,1,149,1,149,1,149,3,149,2277,8,149,1,149,
        5,149,2280,8,149,10,149,12,149,2283,9,149,3,149,2285,8,149,1,149,
        1,149,1,150,1,150,3,150,2291,8,150,1,150,1,150,3,150,2295,8,150,
        1,150,1,150,3,150,2299,8,150,1,151,1,151,1,152,1,152,1,152,3,152,
        2306,8,152,1,153,1,153,3,153,2310,8,153,1,154,1,154,1,155,1,155,
        1,156,1,156,1,156,0,0,157,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
        30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
        74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
        114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
        146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
        178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
        210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,
        242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,
        274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,
        306,308,310,312,0,12,1,0,54,55,1,0,13,14,6,0,48,48,93,93,99,101,
        108,108,129,131,134,134,5,0,48,68,71,92,94,98,102,104,119,128,1,
        0,78,81,4,0,2,2,13,14,16,16,18,25,1,0,103,104,1,0,105,107,1,0,115,
        116,2,0,22,22,27,30,2,0,24,24,31,34,2,0,14,14,35,45,2625,0,317,1,
        0,0,0,2,321,1,0,0,0,4,349,1,0,0,0,6,441,1,0,0,0,8,443,1,0,0,0,10,
        449,1,0,0,0,12,456,1,0,0,0,14,462,1,0,0,0,16,469,1,0,0,0,18,496,
        1,0,0,0,20,500,1,0,0,0,22,529,1,0,0,0,24,531,1,0,0,0,26,537,1,0,
        0,0,28,545,1,0,0,0,30,547,1,0,0,0,32,553,1,0,0,0,34,580,1,0,0,0,
        36,582,1,0,0,0,38,596,1,0,0,0,40,606,1,0,0,0,42,638,1,0,0,0,44,640,
        1,0,0,0,46,664,1,0,0,0,48,675,1,0,0,0,50,687,1,0,0,0,52,720,1,0,
        0,0,54,729,1,0,0,0,56,739,1,0,0,0,58,746,1,0,0,0,60,758,1,0,0,0,
        62,760,1,0,0,0,64,762,1,0,0,0,66,784,1,0,0,0,68,794,1,0,0,0,70,799,
        1,0,0,0,72,824,1,0,0,0,74,828,1,0,0,0,76,830,1,0,0,0,78,840,1,0,
        0,0,80,850,1,0,0,0,82,866,1,0,0,0,84,871,1,0,0,0,86,917,1,0,0,0,
        88,919,1,0,0,0,90,926,1,0,0,0,92,950,1,0,0,0,94,965,1,0,0,0,96,972,
        1,0,0,0,98,989,1,0,0,0,100,991,1,0,0,0,102,1024,1,0,0,0,104,1045,
        1,0,0,0,106,1049,1,0,0,0,108,1058,1,0,0,0,110,1074,1,0,0,0,112,1097,
        1,0,0,0,114,1104,1,0,0,0,116,1116,1,0,0,0,118,1118,1,0,0,0,120,1122,
        1,0,0,0,122,1124,1,0,0,0,124,1126,1,0,0,0,126,1129,1,0,0,0,128,1143,
        1,0,0,0,130,1145,1,0,0,0,132,1167,1,0,0,0,134,1171,1,0,0,0,136,1208,
        1,0,0,0,138,1211,1,0,0,0,140,1223,1,0,0,0,142,1242,1,0,0,0,144,1244,
        1,0,0,0,146,1254,1,0,0,0,148,1276,1,0,0,0,150,1278,1,0,0,0,152,1284,
        1,0,0,0,154,1302,1,0,0,0,156,1322,1,0,0,0,158,1324,1,0,0,0,160,1335,
        1,0,0,0,162,1352,1,0,0,0,164,1372,1,0,0,0,166,1379,1,0,0,0,168,1387,
        1,0,0,0,170,1394,1,0,0,0,172,1438,1,0,0,0,174,1447,1,0,0,0,176,1449,
        1,0,0,0,178,1464,1,0,0,0,180,1468,1,0,0,0,182,1472,1,0,0,0,184,1479,
        1,0,0,0,186,1483,1,0,0,0,188,1497,1,0,0,0,190,1513,1,0,0,0,192,1515,
        1,0,0,0,194,1524,1,0,0,0,196,1594,1,0,0,0,198,1598,1,0,0,0,200,1600,
        1,0,0,0,202,1621,1,0,0,0,204,1631,1,0,0,0,206,1637,1,0,0,0,208,1659,
        1,0,0,0,210,1661,1,0,0,0,212,1663,1,0,0,0,214,1672,1,0,0,0,216,1674,
        1,0,0,0,218,1684,1,0,0,0,220,1694,1,0,0,0,222,1710,1,0,0,0,224,1715,
        1,0,0,0,226,1761,1,0,0,0,228,1773,1,0,0,0,230,1780,1,0,0,0,232,1797,
        1,0,0,0,234,1799,1,0,0,0,236,1823,1,0,0,0,238,1825,1,0,0,0,240,1858,
        1,0,0,0,242,1879,1,0,0,0,244,1881,1,0,0,0,246,1897,1,0,0,0,248,1927,
        1,0,0,0,250,1951,1,0,0,0,252,1968,1,0,0,0,254,1982,1,0,0,0,256,2002,
        1,0,0,0,258,2092,1,0,0,0,260,2094,1,0,0,0,262,2101,1,0,0,0,264,2103,
        1,0,0,0,266,2113,1,0,0,0,268,2119,1,0,0,0,270,2154,1,0,0,0,272,2157,
        1,0,0,0,274,2180,1,0,0,0,276,2209,1,0,0,0,278,2211,1,0,0,0,280,2213,
        1,0,0,0,282,2221,1,0,0,0,284,2224,1,0,0,0,286,2232,1,0,0,0,288,2234,
        1,0,0,0,290,2238,1,0,0,0,292,2240,1,0,0,0,294,2242,1,0,0,0,296,2244,
        1,0,0,0,298,2269,1,0,0,0,300,2288,1,0,0,0,302,2300,1,0,0,0,304,2302,
        1,0,0,0,306,2309,1,0,0,0,308,2311,1,0,0,0,310,2313,1,0,0,0,312,2315,
        1,0,0,0,314,318,3,130,65,0,315,318,3,160,80,0,316,318,3,28,14,0,
        317,314,1,0,0,0,317,315,1,0,0,0,317,316,1,0,0,0,318,1,1,0,0,0,319,
        320,5,58,0,0,320,322,5,135,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,
        323,1,0,0,0,323,325,5,59,0,0,324,326,5,135,0,0,325,324,1,0,0,0,325,
        326,1,0,0,0,326,327,1,0,0,0,327,335,3,186,93,0,328,330,5,135,0,0,
        329,328,1,0,0,0,329,330,1,0,0,0,330,333,1,0,0,0,331,334,3,24,12,
        0,332,334,3,26,13,0,333,331,1,0,0,0,333,332,1,0,0,0,334,336,1,0,
        0,0,335,329,1,0,0,0,335,336,1,0,0,0,336,341,1,0,0,0,337,339,5,135,
        0,0,338,337,1,0,0,0,338,339,1,0,0,0,339,340,1,0,0,0,340,342,3,72,
        36,0,341,338,1,0,0,0,341,342,1,0,0,0,342,3,1,0,0,0,343,350,3,150,
        75,0,344,350,3,146,73,0,345,350,3,20,10,0,346,350,3,152,76,0,347,
        350,3,154,77,0,348,350,3,16,8,0,349,343,1,0,0,0,349,344,1,0,0,0,
        349,345,1,0,0,0,349,346,1,0,0,0,349,347,1,0,0,0,349,348,1,0,0,0,
        350,355,1,0,0,0,351,353,5,135,0,0,352,351,1,0,0,0,352,353,1,0,0,
        0,353,354,1,0,0,0,354,356,3,24,12,0,355,352,1,0,0,0,355,356,1,0,
        0,0,356,5,1,0,0,0,357,359,3,284,142,0,358,360,5,135,0,0,359,358,
        1,0,0,0,359,360,1,0,0,0,360,361,1,0,0,0,361,362,3,70,35,0,362,442,
        1,0,0,0,363,368,3,284,142,0,364,366,5,135,0,0,365,364,1,0,0,0,365,
        366,1,0,0,0,366,367,1,0,0,0,367,369,3,70,35,0,368,365,1,0,0,0,368,
        369,1,0,0,0,369,370,1,0,0,0,370,371,5,1,0,0,371,372,3,8,4,0,372,
        442,1,0,0,0,373,378,3,284,142,0,374,376,5,135,0,0,375,374,1,0,0,
        0,375,376,1,0,0,0,376,377,1,0,0,0,377,379,3,70,35,0,378,375,1,0,
        0,0,378,379,1,0,0,0,379,380,1,0,0,0,380,381,5,1,0,0,381,383,3,10,
        5,0,382,384,5,135,0,0,383,382,1,0,0,0,383,384,1,0,0,0,384,385,1,
        0,0,0,385,386,3,12,6,0,386,442,1,0,0,0,387,392,3,284,142,0,388,390,
        5,135,0,0,389,388,1,0,0,0,389,390,1,0,0,0,390,391,1,0,0,0,391,393,
        3,70,35,0,392,389,1,0,0,0,392,393,1,0,0,0,393,394,1,0,0,0,394,395,
        5,1,0,0,395,397,3,10,5,0,396,398,5,135,0,0,397,396,1,0,0,0,397,398,
        1,0,0,0,398,399,1,0,0,0,399,401,5,2,0,0,400,402,5,135,0,0,401,400,
        1,0,0,0,401,402,1,0,0,0,402,403,1,0,0,0,403,404,3,14,7,0,404,442,
        1,0,0,0,405,407,3,212,106,0,406,408,5,135,0,0,407,406,1,0,0,0,407,
        408,1,0,0,0,408,409,1,0,0,0,409,411,5,2,0,0,410,412,5,135,0,0,411,
        410,1,0,0,0,411,412,1,0,0,0,412,413,1,0,0,0,413,414,3,214,107,0,
        414,442,1,0,0,0,415,417,3,284,142,0,416,418,5,135,0,0,417,416,1,
        0,0,0,417,418,1,0,0,0,418,419,1,0,0,0,419,421,5,2,0,0,420,422,5,
        135,0,0,421,420,1,0,0,0,421,422,1,0,0,0,422,423,1,0,0,0,423,424,
        3,214,107,0,424,442,1,0,0,0,425,427,3,284,142,0,426,428,5,135,0,
        0,427,426,1,0,0,0,427,428,1,0,0,0,428,429,1,0,0,0,429,431,5,3,0,
        0,430,432,5,135,0,0,431,430,1,0,0,0,431,432,1,0,0,0,432,433,1,0,
        0,0,433,434,3,214,107,0,434,442,1,0,0,0,435,437,3,284,142,0,436,
        438,5,135,0,0,437,436,1,0,0,0,437,438,1,0,0,0,438,439,1,0,0,0,439,
        440,3,202,101,0,440,442,1,0,0,0,441,357,1,0,0,0,441,363,1,0,0,0,
        441,373,1,0,0,0,441,387,1,0,0,0,441,405,1,0,0,0,441,415,1,0,0,0,
        441,425,1,0,0,0,441,435,1,0,0,0,442,7,1,0,0,0,443,445,3,302,151,
        0,444,446,5,135,0,0,445,444,1,0,0,0,445,446,1,0,0,0,446,447,1,0,
        0,0,447,448,3,70,35,0,448,9,1,0,0,0,449,454,3,302,151,0,450,452,
        5,135,0,0,451,450,1,0,0,0,451,452,1,0,0,0,452,453,1,0,0,0,453,455,
        3,70,35,0,454,451,1,0,0,0,454,455,1,0,0,0,455,11,1,0,0,0,456,458,
        5,47,0,0,457,459,5,135,0,0,458,457,1,0,0,0,458,459,1,0,0,0,459,460,
        1,0,0,0,460,461,3,70,35,0,461,13,1,0,0,0,462,467,3,214,107,0,463,
        465,5,135,0,0,464,463,1,0,0,0,464,465,1,0,0,0,465,466,1,0,0,0,466,
        468,3,70,35,0,467,464,1,0,0,0,467,468,1,0,0,0,468,15,1,0,0,0,469,
        471,5,53,0,0,470,472,5,135,0,0,471,470,1,0,0,0,471,472,1,0,0,0,472,
        473,1,0,0,0,473,484,3,18,9,0,474,476,5,135,0,0,475,474,1,0,0,0,475,
        476,1,0,0,0,476,477,1,0,0,0,477,479,5,4,0,0,478,480,5,135,0,0,479,
        478,1,0,0,0,479,480,1,0,0,0,480,481,1,0,0,0,481,483,3,18,9,0,482,
        475,1,0,0,0,483,486,1,0,0,0,484,482,1,0,0,0,484,485,1,0,0,0,485,
        17,1,0,0,0,486,484,1,0,0,0,487,488,3,214,107,0,488,489,5,1,0,0,489,
        491,3,302,151,0,490,492,5,135,0,0,491,490,1,0,0,0,491,492,1,0,0,
        0,492,493,1,0,0,0,493,494,5,47,0,0,494,497,1,0,0,0,495,497,3,214,
        107,0,496,487,1,0,0,0,496,495,1,0,0,0,497,19,1,0,0,0,498,499,5,66,
        0,0,499,501,5,135,0,0,500,498,1,0,0,0,500,501,1,0,0,0,501,502,1,
        0,0,0,502,504,5,67,0,0,503,505,5,135,0,0,504,503,1,0,0,0,504,505,
        1,0,0,0,505,506,1,0,0,0,506,517,3,22,11,0,507,509,5,135,0,0,508,
        507,1,0,0,0,508,509,1,0,0,0,509,510,1,0,0,0,510,512,5,4,0,0,511,
        513,5,135,0,0,512,511,1,0,0,0,512,513,1,0,0,0,513,514,1,0,0,0,514,
        516,3,22,11,0,515,508,1,0,0,0,516,519,1,0,0,0,517,515,1,0,0,0,517,
        518,1,0,0,0,518,21,1,0,0,0,519,517,1,0,0,0,520,521,3,214,107,0,521,
        522,5,1,0,0,522,524,3,302,151,0,523,525,5,135,0,0,524,523,1,0,0,
        0,524,525,1,0,0,0,525,526,1,0,0,0,526,527,5,47,0,0,527,530,1,0,0,
        0,528,530,3,214,107,0,529,520,1,0,0,0,529,528,1,0,0,0,530,23,1,0,
        0,0,531,533,5,49,0,0,532,534,5,135,0,0,533,532,1,0,0,0,533,534,1,
        0,0,0,534,535,1,0,0,0,535,536,3,214,107,0,536,25,1,0,0,0,537,539,
        5,51,0,0,538,540,5,135,0,0,539,538,1,0,0,0,539,540,1,0,0,0,540,541,
        1,0,0,0,541,542,3,214,107,0,542,27,1,0,0,0,543,546,3,30,15,0,544,
        546,3,32,16,0,545,543,1,0,0,0,545,544,1,0,0,0,546,29,1,0,0,0,547,
        549,5,50,0,0,548,550,5,135,0,0,549,548,1,0,0,0,549,550,1,0,0,0,550,
        551,1,0,0,0,551,552,3,214,107,0,552,31,1,0,0,0,553,555,5,52,0,0,
        554,556,5,135,0,0,555,554,1,0,0,0,555,556,1,0,0,0,556,557,1,0,0,
        0,557,558,3,214,107,0,558,33,1,0,0,0,559,561,3,284,142,0,560,562,
        5,135,0,0,561,560,1,0,0,0,561,562,1,0,0,0,562,563,1,0,0,0,563,565,
        5,2,0,0,564,566,5,135,0,0,565,564,1,0,0,0,565,566,1,0,0,0,566,567,
        1,0,0,0,567,568,3,36,18,0,568,581,1,0,0,0,569,571,3,284,142,0,570,
        572,5,135,0,0,571,570,1,0,0,0,571,572,1,0,0,0,572,573,1,0,0,0,573,
        575,5,2,0,0,574,576,5,135,0,0,575,574,1,0,0,0,575,576,1,0,0,0,576,
        577,1,0,0,0,577,578,3,188,94,0,578,581,1,0,0,0,579,581,3,188,94,
        0,580,559,1,0,0,0,580,569,1,0,0,0,580,579,1,0,0,0,581,35,1,0,0,0,
        582,584,3,270,135,0,583,585,5,135,0,0,584,583,1,0,0,0,584,585,1,
        0,0,0,585,586,1,0,0,0,586,588,5,5,0,0,587,589,5,135,0,0,588,587,
        1,0,0,0,588,589,1,0,0,0,589,590,1,0,0,0,590,592,3,38,19,0,591,593,
        5,135,0,0,592,591,1,0,0,0,592,593,1,0,0,0,593,594,1,0,0,0,594,595,
        5,6,0,0,595,37,1,0,0,0,596,598,3,40,20,0,597,599,5,135,0,0,598,597,
        1,0,0,0,598,599,1,0,0,0,599,600,1,0,0,0,600,602,3,196,98,0,601,603,
        5,135,0,0,602,601,1,0,0,0,602,603,1,0,0,0,603,604,1,0,0,0,604,605,
        3,40,20,0,605,39,1,0,0,0,606,608,5,5,0,0,607,609,5,135,0,0,608,607,
        1,0,0,0,608,609,1,0,0,0,609,614,1,0,0,0,610,612,3,284,142,0,611,
        613,5,135,0,0,612,611,1,0,0,0,612,613,1,0,0,0,613,615,1,0,0,0,614,
        610,1,0,0,0,614,615,1,0,0,0,615,620,1,0,0,0,616,618,3,202,101,0,
        617,619,5,135,0,0,618,617,1,0,0,0,618,619,1,0,0,0,619,621,1,0,0,
        0,620,616,1,0,0,0,620,621,1,0,0,0,621,626,1,0,0,0,622,624,3,70,35,
        0,623,625,5,135,0,0,624,623,1,0,0,0,624,625,1,0,0,0,625,627,1,0,
        0,0,626,622,1,0,0,0,626,627,1,0,0,0,627,632,1,0,0,0,628,630,3,42,
        21,0,629,631,5,135,0,0,630,629,1,0,0,0,630,631,1,0,0,0,631,633,1,
        0,0,0,632,628,1,0,0,0,632,633,1,0,0,0,633,634,1,0,0,0,634,635,5,
        6,0,0,635,41,1,0,0,0,636,639,3,44,22,0,637,639,3,304,152,0,638,636,
        1,0,0,0,638,637,1,0,0,0,639,43,1,0,0,0,640,642,5,7,0,0,641,643,5,
        135,0,0,642,641,1,0,0,0,642,643,1,0,0,0,643,660,1,0,0,0,644,645,
        3,46,23,0,645,646,5,8,0,0,646,657,3,48,24,0,647,649,5,4,0,0,648,
        650,5,135,0,0,649,648,1,0,0,0,649,650,1,0,0,0,650,651,1,0,0,0,651,
        652,3,46,23,0,652,653,5,8,0,0,653,654,3,48,24,0,654,656,1,0,0,0,
        655,647,1,0,0,0,656,659,1,0,0,0,657,655,1,0,0,0,657,658,1,0,0,0,
        658,661,1,0,0,0,659,657,1,0,0,0,660,644,1,0,0,0,660,661,1,0,0,0,
        661,662,1,0,0,0,662,663,5,9,0,0,663,45,1,0,0,0,664,666,3,302,151,
        0,665,667,5,135,0,0,666,665,1,0,0,0,666,667,1,0,0,0,667,672,1,0,
        0,0,668,670,3,70,35,0,669,671,5,135,0,0,670,669,1,0,0,0,670,671,
        1,0,0,0,671,673,1,0,0,0,672,668,1,0,0,0,672,673,1,0,0,0,673,47,1,
        0,0,0,674,676,5,135,0,0,675,674,1,0,0,0,675,676,1,0,0,0,676,677,
        1,0,0,0,677,679,3,214,107,0,678,680,5,135,0,0,679,678,1,0,0,0,679,
        680,1,0,0,0,680,685,1,0,0,0,681,683,3,70,35,0,682,684,5,135,0,0,
        683,682,1,0,0,0,683,684,1,0,0,0,684,686,1,0,0,0,685,681,1,0,0,0,
        685,686,1,0,0,0,686,49,1,0,0,0,687,689,5,10,0,0,688,690,5,135,0,
        0,689,688,1,0,0,0,689,690,1,0,0,0,690,695,1,0,0,0,691,693,3,284,
        142,0,692,694,5,135,0,0,693,692,1,0,0,0,693,694,1,0,0,0,694,696,
        1,0,0,0,695,691,1,0,0,0,695,696,1,0,0,0,696,701,1,0,0,0,697,699,
        3,200,100,0,698,700,5,135,0,0,699,698,1,0,0,0,699,700,1,0,0,0,700,
        702,1,0,0,0,701,697,1,0,0,0,701,702,1,0,0,0,702,704,1,0,0,0,703,
        705,3,206,103,0,704,703,1,0,0,0,704,705,1,0,0,0,705,710,1,0,0,0,
        706,708,3,70,35,0,707,709,5,135,0,0,708,707,1,0,0,0,708,709,1,0,
        0,0,709,711,1,0,0,0,710,706,1,0,0,0,710,711,1,0,0,0,711,716,1,0,
        0,0,712,714,3,198,99,0,713,715,5,135,0,0,714,713,1,0,0,0,714,715,
        1,0,0,0,715,717,1,0,0,0,716,712,1,0,0,0,716,717,1,0,0,0,717,718,
        1,0,0,0,718,719,5,11,0,0,719,51,1,0,0,0,720,725,3,234,117,0,721,
        726,3,68,34,0,722,726,3,228,114,0,723,726,3,230,115,0,724,726,3,
        232,116,0,725,721,1,0,0,0,725,722,1,0,0,0,725,723,1,0,0,0,725,724,
        1,0,0,0,725,726,1,0,0,0,726,53,1,0,0,0,727,730,3,244,122,0,728,730,
        3,64,32,0,729,727,1,0,0,0,729,728,1,0,0,0,730,735,1,0,0,0,731,734,
        3,56,28,0,732,734,3,58,29,0,733,731,1,0,0,0,733,732,1,0,0,0,734,
        737,1,0,0,0,735,733,1,0,0,0,735,736,1,0,0,0,736,55,1,0,0,0,737,735,
        1,0,0,0,738,740,5,135,0,0,739,738,1,0,0,0,739,740,1,0,0,0,740,741,
        1,0,0,0,741,742,5,10,0,0,742,743,3,60,30,0,743,744,5,11,0,0,744,
        57,1,0,0,0,745,747,5,135,0,0,746,745,1,0,0,0,746,747,1,0,0,0,747,
        748,1,0,0,0,748,750,5,10,0,0,749,751,3,60,30,0,750,749,1,0,0,0,750,
        751,1,0,0,0,751,752,1,0,0,0,752,754,5,12,0,0,753,755,3,62,31,0,754,
        753,1,0,0,0,754,755,1,0,0,0,755,756,1,0,0,0,756,757,5,11,0,0,757,
        59,1,0,0,0,758,759,3,214,107,0,759,61,1,0,0,0,760,761,3,214,107,
        0,761,63,1,0,0,0,762,777,3,248,124,0,763,765,5,135,0,0,764,763,1,
        0,0,0,764,765,1,0,0,0,765,766,1,0,0,0,766,768,3,246,123,0,767,764,
        1,0,0,0,768,769,1,0,0,0,769,767,1,0,0,0,769,770,1,0,0,0,770,775,
        1,0,0,0,771,773,5,135,0,0,772,771,1,0,0,0,772,773,1,0,0,0,773,774,
        1,0,0,0,774,776,5,47,0,0,775,772,1,0,0,0,775,776,1,0,0,0,776,778,
        1,0,0,0,777,767,1,0,0,0,777,778,1,0,0,0,778,780,1,0,0,0,779,781,
        5,135,0,0,780,779,1,0,0,0,780,781,1,0,0,0,781,782,1,0,0,0,782,783,
        3,66,33,0,783,65,1,0,0,0,784,791,5,46,0,0,785,787,5,135,0,0,786,
        785,1,0,0,0,786,787,1,0,0,0,787,788,1,0,0,0,788,790,3,246,123,0,
        789,786,1,0,0,0,790,793,1,0,0,0,791,789,1,0,0,0,791,792,1,0,0,0,
        792,67,1,0,0,0,793,791,1,0,0,0,794,795,5,135,0,0,795,796,7,0,0,0,
        796,797,5,135,0,0,797,798,3,234,117,0,798,69,1,0,0,0,799,801,5,46,
        0,0,800,802,5,135,0,0,801,800,1,0,0,0,801,802,1,0,0,0,802,803,1,
        0,0,0,803,805,5,5,0,0,804,806,5,135,0,0,805,804,1,0,0,0,805,806,
        1,0,0,0,806,807,1,0,0,0,807,809,3,120,60,0,808,810,5,135,0,0,809,
        808,1,0,0,0,809,810,1,0,0,0,810,811,1,0,0,0,811,813,5,4,0,0,812,
        814,5,135,0,0,813,812,1,0,0,0,813,814,1,0,0,0,814,817,1,0,0,0,815,
        818,3,120,60,0,816,818,5,48,0,0,817,815,1,0,0,0,817,816,1,0,0,0,
        818,820,1,0,0,0,819,821,5,135,0,0,820,819,1,0,0,0,820,821,1,0,0,
        0,821,822,1,0,0,0,822,823,5,6,0,0,823,71,1,0,0,0,824,825,5,82,0,
        0,825,826,5,135,0,0,826,827,3,74,37,0,827,73,1,0,0,0,828,829,3,76,
        38,0,829,75,1,0,0,0,830,837,3,78,39,0,831,832,5,135,0,0,832,833,
        5,83,0,0,833,834,5,135,0,0,834,836,3,78,39,0,835,831,1,0,0,0,836,
        839,1,0,0,0,837,835,1,0,0,0,837,838,1,0,0,0,838,77,1,0,0,0,839,837,
        1,0,0,0,840,847,3,80,40,0,841,842,5,135,0,0,842,843,5,84,0,0,843,
        844,5,135,0,0,844,846,3,80,40,0,845,841,1,0,0,0,846,849,1,0,0,0,
        847,845,1,0,0,0,847,848,1,0,0,0,848,79,1,0,0,0,849,847,1,0,0,0,850,
        857,3,82,41,0,851,852,5,135,0,0,852,853,5,85,0,0,853,854,5,135,0,
        0,854,856,3,82,41,0,855,851,1,0,0,0,856,859,1,0,0,0,857,855,1,0,
        0,0,857,858,1,0,0,0,858,81,1,0,0,0,859,857,1,0,0,0,860,862,5,86,
        0,0,861,863,5,135,0,0,862,861,1,0,0,0,862,863,1,0,0,0,863,865,1,
        0,0,0,864,860,1,0,0,0,865,868,1,0,0,0,866,864,1,0,0,0,866,867,1,
        0,0,0,867,869,1,0,0,0,868,866,1,0,0,0,869,870,3,84,42,0,870,83,1,
        0,0,0,871,878,3,88,44,0,872,874,5,135,0,0,873,872,1,0,0,0,873,874,
        1,0,0,0,874,875,1,0,0,0,875,877,3,86,43,0,876,873,1,0,0,0,877,880,
        1,0,0,0,878,876,1,0,0,0,878,879,1,0,0,0,879,85,1,0,0,0,880,878,1,
        0,0,0,881,883,3,236,118,0,882,884,5,135,0,0,883,882,1,0,0,0,883,
        884,1,0,0,0,884,885,1,0,0,0,885,886,3,88,44,0,886,918,1,0,0,0,887,
        889,3,236,118,0,888,890,5,135,0,0,889,888,1,0,0,0,889,890,1,0,0,
        0,890,891,1,0,0,0,891,892,3,88,44,0,892,918,1,0,0,0,893,895,3,236,
        118,0,894,896,5,135,0,0,895,894,1,0,0,0,895,896,1,0,0,0,896,897,
        1,0,0,0,897,898,3,88,44,0,898,918,1,0,0,0,899,901,3,236,118,0,900,
        902,5,135,0,0,901,900,1,0,0,0,901,902,1,0,0,0,902,903,1,0,0,0,903,
        904,3,88,44,0,904,918,1,0,0,0,905,907,3,236,118,0,906,908,5,135,
        0,0,907,906,1,0,0,0,907,908,1,0,0,0,908,909,1,0,0,0,909,910,3,88,
        44,0,910,918,1,0,0,0,911,913,3,236,118,0,912,914,5,135,0,0,913,912,
        1,0,0,0,913,914,1,0,0,0,914,915,1,0,0,0,915,916,3,88,44,0,916,918,
        1,0,0,0,917,881,1,0,0,0,917,887,1,0,0,0,917,893,1,0,0,0,917,899,
        1,0,0,0,917,905,1,0,0,0,917,911,1,0,0,0,918,87,1,0,0,0,919,924,3,
        90,45,0,920,925,3,92,46,0,921,925,3,94,47,0,922,925,3,96,48,0,923,
        925,3,98,49,0,924,920,1,0,0,0,924,921,1,0,0,0,924,922,1,0,0,0,924,
        923,1,0,0,0,924,925,1,0,0,0,925,89,1,0,0,0,926,947,3,100,50,0,927,
        929,5,135,0,0,928,927,1,0,0,0,928,929,1,0,0,0,929,930,1,0,0,0,930,
        932,3,236,118,0,931,933,5,135,0,0,932,931,1,0,0,0,932,933,1,0,0,
        0,933,934,1,0,0,0,934,935,3,100,50,0,935,946,1,0,0,0,936,938,5,135,
        0,0,937,936,1,0,0,0,937,938,1,0,0,0,938,939,1,0,0,0,939,941,3,236,
        118,0,940,942,5,135,0,0,941,940,1,0,0,0,941,942,1,0,0,0,942,943,
        1,0,0,0,943,944,3,100,50,0,944,946,1,0,0,0,945,928,1,0,0,0,945,937,
        1,0,0,0,946,949,1,0,0,0,947,945,1,0,0,0,947,948,1,0,0,0,948,91,1,
        0,0,0,949,947,1,0,0,0,950,951,5,135,0,0,951,952,7,0,0,0,952,953,
        5,135,0,0,953,954,3,90,45,0,954,93,1,0,0,0,955,956,5,135,0,0,956,
        957,5,87,0,0,957,958,5,135,0,0,958,966,5,71,0,0,959,960,5,135,0,
        0,960,961,5,88,0,0,961,962,5,135,0,0,962,966,5,71,0,0,963,964,5,
        135,0,0,964,966,5,89,0,0,965,955,1,0,0,0,965,959,1,0,0,0,965,963,
        1,0,0,0,966,968,1,0,0,0,967,969,5,135,0,0,968,967,1,0,0,0,968,969,
        1,0,0,0,969,970,1,0,0,0,970,971,3,90,45,0,971,95,1,0,0,0,972,973,
        5,135,0,0,973,975,5,90,0,0,974,976,5,135,0,0,975,974,1,0,0,0,975,
        976,1,0,0,0,976,977,1,0,0,0,977,978,3,90,45,0,978,97,1,0,0,0,979,
        980,5,135,0,0,980,981,5,91,0,0,981,982,5,135,0,0,982,990,5,92,0,
        0,983,984,5,135,0,0,984,985,5,91,0,0,985,986,5,135,0,0,986,987,5,
        86,0,0,987,988,5,135,0,0,988,990,5,92,0,0,989,979,1,0,0,0,989,983,
        1,0,0,0,990,99,1,0,0,0,991,1021,3,102,51,0,992,994,5,135,0,0,993,
        992,1,0,0,0,993,994,1,0,0,0,994,995,1,0,0,0,995,997,3,236,118,0,
        996,998,5,135,0,0,997,996,1,0,0,0,997,998,1,0,0,0,998,999,1,0,0,
        0,999,1000,3,102,51,0,1000,1020,1,0,0,0,1001,1003,5,135,0,0,1002,
        1001,1,0,0,0,1002,1003,1,0,0,0,1003,1004,1,0,0,0,1004,1006,3,236,
        118,0,1005,1007,5,135,0,0,1006,1005,1,0,0,0,1006,1007,1,0,0,0,1007,
        1008,1,0,0,0,1008,1009,3,102,51,0,1009,1020,1,0,0,0,1010,1012,5,
        135,0,0,1011,1010,1,0,0,0,1011,1012,1,0,0,0,1012,1013,1,0,0,0,1013,
        1015,3,236,118,0,1014,1016,5,135,0,0,1015,1014,1,0,0,0,1015,1016,
        1,0,0,0,1016,1017,1,0,0,0,1017,1018,3,102,51,0,1018,1020,1,0,0,0,
        1019,993,1,0,0,0,1019,1002,1,0,0,0,1019,1011,1,0,0,0,1020,1023,1,
        0,0,0,1021,1019,1,0,0,0,1021,1022,1,0,0,0,1022,101,1,0,0,0,1023,
        1021,1,0,0,0,1024,1036,3,104,52,0,1025,1027,5,135,0,0,1026,1025,
        1,0,0,0,1026,1027,1,0,0,0,1027,1028,1,0,0,0,1028,1030,3,236,118,
        0,1029,1031,5,135,0,0,1030,1029,1,0,0,0,1030,1031,1,0,0,0,1031,1032,
        1,0,0,0,1032,1033,3,104,52,0,1033,1035,1,0,0,0,1034,1026,1,0,0,0,
        1035,1038,1,0,0,0,1036,1034,1,0,0,0,1036,1037,1,0,0,0,1037,103,1,
        0,0,0,1038,1036,1,0,0,0,1039,1046,3,106,53,0,1040,1042,7,1,0,0,1041,
        1043,5,135,0,0,1042,1041,1,0,0,0,1042,1043,1,0,0,0,1043,1044,1,0,
        0,0,1044,1046,3,106,53,0,1045,1039,1,0,0,0,1045,1040,1,0,0,0,1046,
        105,1,0,0,0,1047,1050,3,108,54,0,1048,1050,3,110,55,0,1049,1047,
        1,0,0,0,1049,1048,1,0,0,0,1050,1055,1,0,0,0,1051,1054,3,112,56,0,
        1052,1054,3,114,57,0,1053,1051,1,0,0,0,1053,1052,1,0,0,0,1054,1057,
        1,0,0,0,1055,1053,1,0,0,0,1055,1056,1,0,0,0,1056,107,1,0,0,0,1057,
        1055,1,0,0,0,1058,1065,3,248,124,0,1059,1061,5,135,0,0,1060,1059,
        1,0,0,0,1060,1061,1,0,0,0,1061,1062,1,0,0,0,1062,1064,3,246,123,
        0,1063,1060,1,0,0,0,1064,1067,1,0,0,0,1065,1063,1,0,0,0,1065,1066,
        1,0,0,0,1066,1072,1,0,0,0,1067,1065,1,0,0,0,1068,1070,5,135,0,0,
        1069,1068,1,0,0,0,1069,1070,1,0,0,0,1070,1071,1,0,0,0,1071,1073,
        3,202,101,0,1072,1069,1,0,0,0,1072,1073,1,0,0,0,1073,109,1,0,0,0,
        1074,1089,3,248,124,0,1075,1077,5,135,0,0,1076,1075,1,0,0,0,1076,
        1077,1,0,0,0,1077,1078,1,0,0,0,1078,1080,3,246,123,0,1079,1076,1,
        0,0,0,1080,1081,1,0,0,0,1081,1079,1,0,0,0,1081,1082,1,0,0,0,1082,
        1087,1,0,0,0,1083,1085,5,135,0,0,1084,1083,1,0,0,0,1084,1085,1,0,
        0,0,1085,1086,1,0,0,0,1086,1088,5,47,0,0,1087,1084,1,0,0,0,1087,
        1088,1,0,0,0,1088,1090,1,0,0,0,1089,1079,1,0,0,0,1089,1090,1,0,0,
        0,1090,1092,1,0,0,0,1091,1093,5,135,0,0,1092,1091,1,0,0,0,1092,1093,
        1,0,0,0,1093,1094,1,0,0,0,1094,1095,3,66,33,0,1095,111,1,0,0,0,1096,
        1098,5,135,0,0,1097,1096,1,0,0,0,1097,1098,1,0,0,0,1098,1099,1,0,
        0,0,1099,1100,5,10,0,0,1100,1101,3,116,58,0,1101,1102,5,11,0,0,1102,
        113,1,0,0,0,1103,1105,5,135,0,0,1104,1103,1,0,0,0,1104,1105,1,0,
        0,0,1105,1106,1,0,0,0,1106,1108,5,10,0,0,1107,1109,3,116,58,0,1108,
        1107,1,0,0,0,1108,1109,1,0,0,0,1109,1110,1,0,0,0,1110,1112,5,12,
        0,0,1111,1113,3,118,59,0,1112,1111,1,0,0,0,1112,1113,1,0,0,0,1113,
        1114,1,0,0,0,1114,1115,5,11,0,0,1115,115,1,0,0,0,1116,1117,3,214,
        107,0,1117,117,1,0,0,0,1118,1119,3,214,107,0,1119,119,1,0,0,0,1120,
        1123,5,117,0,0,1121,1123,3,298,149,0,1122,1120,1,0,0,0,1122,1121,
        1,0,0,0,1123,121,1,0,0,0,1124,1125,7,2,0,0,1125,123,1,0,0,0,1126,
        1127,7,3,0,0,1127,125,1,0,0,0,1128,1130,5,135,0,0,1129,1128,1,0,
        0,0,1129,1130,1,0,0,0,1130,1131,1,0,0,0,1131,1136,3,128,64,0,1132,
        1134,5,135,0,0,1133,1132,1,0,0,0,1133,1134,1,0,0,0,1134,1135,1,0,
        0,0,1135,1137,5,15,0,0,1136,1133,1,0,0,0,1136,1137,1,0,0,0,1137,
        1139,1,0,0,0,1138,1140,5,135,0,0,1139,1138,1,0,0,0,1139,1140,1,0,
        0,0,1140,1141,1,0,0,0,1141,1142,5,0,0,1,1142,127,1,0,0,0,1143,1144,
        3,0,0,0,1144,129,1,0,0,0,1145,1152,3,134,67,0,1146,1148,5,135,0,
        0,1147,1146,1,0,0,0,1147,1148,1,0,0,0,1148,1149,1,0,0,0,1149,1151,
        3,132,66,0,1150,1147,1,0,0,0,1151,1154,1,0,0,0,1152,1150,1,0,0,0,
        1152,1153,1,0,0,0,1153,131,1,0,0,0,1154,1152,1,0,0,0,1155,1156,5,
        56,0,0,1156,1157,5,135,0,0,1157,1159,5,57,0,0,1158,1160,5,135,0,
        0,1159,1158,1,0,0,0,1159,1160,1,0,0,0,1160,1161,1,0,0,0,1161,1168,
        3,134,67,0,1162,1164,5,56,0,0,1163,1165,5,135,0,0,1164,1163,1,0,
        0,0,1164,1165,1,0,0,0,1165,1166,1,0,0,0,1166,1168,3,134,67,0,1167,
        1155,1,0,0,0,1167,1162,1,0,0,0,1168,133,1,0,0,0,1169,1172,3,136,
        68,0,1170,1172,3,138,69,0,1171,1169,1,0,0,0,1171,1170,1,0,0,0,1172,
        135,1,0,0,0,1173,1175,3,142,71,0,1174,1176,5,135,0,0,1175,1174,1,
        0,0,0,1175,1176,1,0,0,0,1176,1178,1,0,0,0,1177,1173,1,0,0,0,1178,
        1181,1,0,0,0,1179,1177,1,0,0,0,1179,1180,1,0,0,0,1180,1182,1,0,0,
        0,1181,1179,1,0,0,0,1182,1209,3,168,84,0,1183,1185,3,142,71,0,1184,
        1186,5,135,0,0,1185,1184,1,0,0,0,1185,1186,1,0,0,0,1186,1188,1,0,
        0,0,1187,1183,1,0,0,0,1188,1191,1,0,0,0,1189,1187,1,0,0,0,1189,1190,
        1,0,0,0,1190,1192,1,0,0,0,1191,1189,1,0,0,0,1192,1199,3,4,2,0,1193,
        1195,5,135,0,0,1194,1193,1,0,0,0,1194,1195,1,0,0,0,1195,1196,1,0,
        0,0,1196,1198,3,4,2,0,1197,1194,1,0,0,0,1198,1201,1,0,0,0,1199,1197,
        1,0,0,0,1199,1200,1,0,0,0,1200,1206,1,0,0,0,1201,1199,1,0,0,0,1202,
        1204,5,135,0,0,1203,1202,1,0,0,0,1203,1204,1,0,0,0,1204,1205,1,0,
        0,0,1205,1207,3,168,84,0,1206,1203,1,0,0,0,1206,1207,1,0,0,0,1207,
        1209,1,0,0,0,1208,1179,1,0,0,0,1208,1189,1,0,0,0,1209,137,1,0,0,
        0,1210,1212,3,140,70,0,1211,1210,1,0,0,0,1212,1213,1,0,0,0,1213,
        1211,1,0,0,0,1213,1214,1,0,0,0,1214,1215,1,0,0,0,1215,1216,3,136,
        68,0,1216,139,1,0,0,0,1217,1219,3,142,71,0,1218,1220,5,135,0,0,1219,
        1218,1,0,0,0,1219,1220,1,0,0,0,1220,1222,1,0,0,0,1221,1217,1,0,0,
        0,1222,1225,1,0,0,0,1223,1221,1,0,0,0,1223,1224,1,0,0,0,1224,1232,
        1,0,0,0,1225,1223,1,0,0,0,1226,1228,3,4,2,0,1227,1229,5,135,0,0,
        1228,1227,1,0,0,0,1228,1229,1,0,0,0,1229,1231,1,0,0,0,1230,1226,
        1,0,0,0,1231,1234,1,0,0,0,1232,1230,1,0,0,0,1232,1233,1,0,0,0,1233,
        1235,1,0,0,0,1234,1232,1,0,0,0,1235,1237,3,166,83,0,1236,1238,5,
        135,0,0,1237,1236,1,0,0,0,1237,1238,1,0,0,0,1238,141,1,0,0,0,1239,
        1243,3,2,1,0,1240,1243,3,144,72,0,1241,1243,3,158,79,0,1242,1239,
        1,0,0,0,1242,1240,1,0,0,0,1242,1241,1,0,0,0,1243,143,1,0,0,0,1244,
        1246,5,60,0,0,1245,1247,5,135,0,0,1246,1245,1,0,0,0,1246,1247,1,
        0,0,0,1247,1248,1,0,0,0,1248,1249,3,214,107,0,1249,1250,5,135,0,
        0,1250,1251,5,61,0,0,1251,1252,5,135,0,0,1252,1253,3,284,142,0,1253,
        145,1,0,0,0,1254,1256,5,62,0,0,1255,1257,5,135,0,0,1256,1255,1,0,
        0,0,1256,1257,1,0,0,0,1257,1258,1,0,0,0,1258,1263,3,34,17,0,1259,
        1260,5,135,0,0,1260,1262,3,148,74,0,1261,1259,1,0,0,0,1262,1265,
        1,0,0,0,1263,1261,1,0,0,0,1263,1264,1,0,0,0,1264,147,1,0,0,0,1265,
        1263,1,0,0,0,1266,1267,5,63,0,0,1267,1268,5,135,0,0,1268,1269,5,
        59,0,0,1269,1270,5,135,0,0,1270,1277,3,152,76,0,1271,1272,5,63,0,
        0,1272,1273,5,135,0,0,1273,1274,5,64,0,0,1274,1275,5,135,0,0,1275,
        1277,3,152,76,0,1276,1266,1,0,0,0,1276,1271,1,0,0,0,1277,149,1,0,
        0,0,1278,1280,5,64,0,0,1279,1281,5,135,0,0,1280,1279,1,0,0,0,1280,
        1281,1,0,0,0,1281,1282,1,0,0,0,1282,1283,3,186,93,0,1283,151,1,0,
        0,0,1284,1286,5,65,0,0,1285,1287,5,135,0,0,1286,1285,1,0,0,0,1286,
        1287,1,0,0,0,1287,1288,1,0,0,0,1288,1299,3,6,3,0,1289,1291,5,135,
        0,0,1290,1289,1,0,0,0,1290,1291,1,0,0,0,1291,1292,1,0,0,0,1292,1294,
        5,4,0,0,1293,1295,5,135,0,0,1294,1293,1,0,0,0,1294,1295,1,0,0,0,
        1295,1296,1,0,0,0,1296,1298,3,6,3,0,1297,1290,1,0,0,0,1298,1301,
        1,0,0,0,1299,1297,1,0,0,0,1299,1300,1,0,0,0,1300,153,1,0,0,0,1301,
        1299,1,0,0,0,1302,1303,5,68,0,0,1303,1304,5,135,0,0,1304,1315,3,
        156,78,0,1305,1307,5,135,0,0,1306,1305,1,0,0,0,1306,1307,1,0,0,0,
        1307,1308,1,0,0,0,1308,1310,5,4,0,0,1309,1311,5,135,0,0,1310,1309,
        1,0,0,0,1310,1311,1,0,0,0,1311,1312,1,0,0,0,1312,1314,3,156,78,0,
        1313,1306,1,0,0,0,1314,1317,1,0,0,0,1315,1313,1,0,0,0,1315,1316,
        1,0,0,0,1316,155,1,0,0,0,1317,1315,1,0,0,0,1318,1319,3,284,142,0,
        1319,1320,3,202,101,0,1320,1323,1,0,0,0,1321,1323,3,212,106,0,1322,
        1318,1,0,0,0,1322,1321,1,0,0,0,1323,157,1,0,0,0,1324,1325,5,69,0,
        0,1325,1326,5,135,0,0,1326,1333,3,274,137,0,1327,1329,5,135,0,0,
        1328,1327,1,0,0,0,1328,1329,1,0,0,0,1329,1330,1,0,0,0,1330,1331,
        5,70,0,0,1331,1332,5,135,0,0,1332,1334,3,162,81,0,1333,1328,1,0,
        0,0,1333,1334,1,0,0,0,1334,159,1,0,0,0,1335,1336,5,69,0,0,1336,1339,
        5,135,0,0,1337,1340,3,274,137,0,1338,1340,3,276,138,0,1339,1337,
        1,0,0,0,1339,1338,1,0,0,0,1340,1350,1,0,0,0,1341,1343,5,135,0,0,
        1342,1341,1,0,0,0,1342,1343,1,0,0,0,1343,1344,1,0,0,0,1344,1345,
        5,70,0,0,1345,1348,5,135,0,0,1346,1349,5,16,0,0,1347,1349,3,162,
        81,0,1348,1346,1,0,0,0,1348,1347,1,0,0,0,1349,1351,1,0,0,0,1350,
        1342,1,0,0,0,1350,1351,1,0,0,0,1351,161,1,0,0,0,1352,1363,3,164,
        82,0,1353,1355,5,135,0,0,1354,1353,1,0,0,0,1354,1355,1,0,0,0,1355,
        1356,1,0,0,0,1356,1358,5,4,0,0,1357,1359,5,135,0,0,1358,1357,1,0,
        0,0,1358,1359,1,0,0,0,1359,1360,1,0,0,0,1360,1362,3,164,82,0,1361,
        1354,1,0,0,0,1362,1365,1,0,0,0,1363,1361,1,0,0,0,1363,1364,1,0,0,
        0,1364,1370,1,0,0,0,1365,1363,1,0,0,0,1366,1368,5,135,0,0,1367,1366,
        1,0,0,0,1367,1368,1,0,0,0,1368,1369,1,0,0,0,1369,1371,3,184,92,0,
        1370,1367,1,0,0,0,1370,1371,1,0,0,0,1371,163,1,0,0,0,1372,1377,3,
        278,139,0,1373,1374,5,135,0,0,1374,1375,5,61,0,0,1375,1376,5,135,
        0,0,1376,1378,3,284,142,0,1377,1373,1,0,0,0,1377,1378,1,0,0,0,1378,
        165,1,0,0,0,1379,1380,5,71,0,0,1380,1385,3,170,85,0,1381,1383,5,
        135,0,0,1382,1381,1,0,0,0,1382,1383,1,0,0,0,1383,1384,1,0,0,0,1384,
        1386,3,184,92,0,1385,1382,1,0,0,0,1385,1386,1,0,0,0,1386,167,1,0,
        0,0,1387,1388,5,72,0,0,1388,1389,3,170,85,0,1389,169,1,0,0,0,1390,
        1392,5,135,0,0,1391,1390,1,0,0,0,1391,1392,1,0,0,0,1392,1393,1,0,
        0,0,1393,1395,5,73,0,0,1394,1391,1,0,0,0,1394,1395,1,0,0,0,1395,
        1396,1,0,0,0,1396,1397,5,135,0,0,1397,1400,3,172,86,0,1398,1399,
        5,135,0,0,1399,1401,3,176,88,0,1400,1398,1,0,0,0,1400,1401,1,0,0,
        0,1401,1404,1,0,0,0,1402,1403,5,135,0,0,1403,1405,3,178,89,0,1404,
        1402,1,0,0,0,1404,1405,1,0,0,0,1405,1408,1,0,0,0,1406,1407,5,135,
        0,0,1407,1409,3,180,90,0,1408,1406,1,0,0,0,1408,1409,1,0,0,0,1409,
        171,1,0,0,0,1410,1421,5,16,0,0,1411,1413,5,135,0,0,1412,1411,1,0,
        0,0,1412,1413,1,0,0,0,1413,1414,1,0,0,0,1414,1416,5,4,0,0,1415,1417,
        5,135,0,0,1416,1415,1,0,0,0,1416,1417,1,0,0,0,1417,1418,1,0,0,0,
        1418,1420,3,174,87,0,1419,1412,1,0,0,0,1420,1423,1,0,0,0,1421,1419,
        1,0,0,0,1421,1422,1,0,0,0,1422,1439,1,0,0,0,1423,1421,1,0,0,0,1424,
        1435,3,174,87,0,1425,1427,5,135,0,0,1426,1425,1,0,0,0,1426,1427,
        1,0,0,0,1427,1428,1,0,0,0,1428,1430,5,4,0,0,1429,1431,5,135,0,0,
        1430,1429,1,0,0,0,1430,1431,1,0,0,0,1431,1432,1,0,0,0,1432,1434,
        3,174,87,0,1433,1426,1,0,0,0,1434,1437,1,0,0,0,1435,1433,1,0,0,0,
        1435,1436,1,0,0,0,1436,1439,1,0,0,0,1437,1435,1,0,0,0,1438,1410,
        1,0,0,0,1438,1424,1,0,0,0,1439,173,1,0,0,0,1440,1441,3,214,107,0,
        1441,1442,5,135,0,0,1442,1443,5,61,0,0,1443,1444,5,135,0,0,1444,
        1445,3,284,142,0,1445,1448,1,0,0,0,1446,1448,3,214,107,0,1447,1440,
        1,0,0,0,1447,1446,1,0,0,0,1448,175,1,0,0,0,1449,1450,5,74,0,0,1450,
        1451,5,135,0,0,1451,1452,5,75,0,0,1452,1453,5,135,0,0,1453,1461,
        3,182,91,0,1454,1456,5,4,0,0,1455,1457,5,135,0,0,1456,1455,1,0,0,
        0,1456,1457,1,0,0,0,1457,1458,1,0,0,0,1458,1460,3,182,91,0,1459,
        1454,1,0,0,0,1460,1463,1,0,0,0,1461,1459,1,0,0,0,1461,1462,1,0,0,
        0,1462,177,1,0,0,0,1463,1461,1,0,0,0,1464,1465,5,76,0,0,1465,1466,
        5,135,0,0,1466,1467,3,214,107,0,1467,179,1,0,0,0,1468,1469,5,77,
        0,0,1469,1470,5,135,0,0,1470,1471,3,214,107,0,1471,181,1,0,0,0,1472,
        1477,3,214,107,0,1473,1475,5,135,0,0,1474,1473,1,0,0,0,1474,1475,
        1,0,0,0,1475,1476,1,0,0,0,1476,1478,7,4,0,0,1477,1474,1,0,0,0,1477,
        1478,1,0,0,0,1478,183,1,0,0,0,1479,1480,5,82,0,0,1480,1481,5,135,
        0,0,1481,1482,3,214,107,0,1482,185,1,0,0,0,1483,1494,3,34,17,0,1484,
        1486,5,135,0,0,1485,1484,1,0,0,0,1485,1486,1,0,0,0,1486,1487,1,0,
        0,0,1487,1489,5,4,0,0,1488,1490,5,135,0,0,1489,1488,1,0,0,0,1489,
        1490,1,0,0,0,1490,1491,1,0,0,0,1491,1493,3,34,17,0,1492,1485,1,0,
        0,0,1493,1496,1,0,0,0,1494,1492,1,0,0,0,1494,1495,1,0,0,0,1495,187,
        1,0,0,0,1496,1494,1,0,0,0,1497,1498,3,190,95,0,1498,189,1,0,0,0,
        1499,1506,3,40,20,0,1500,1502,5,135,0,0,1501,1500,1,0,0,0,1501,1502,
        1,0,0,0,1502,1503,1,0,0,0,1503,1505,3,194,97,0,1504,1501,1,0,0,0,
        1505,1508,1,0,0,0,1506,1504,1,0,0,0,1506,1507,1,0,0,0,1507,1514,
        1,0,0,0,1508,1506,1,0,0,0,1509,1510,5,5,0,0,1510,1511,3,190,95,0,
        1511,1512,5,6,0,0,1512,1514,1,0,0,0,1513,1499,1,0,0,0,1513,1509,
        1,0,0,0,1514,191,1,0,0,0,1515,1520,3,40,20,0,1516,1518,5,135,0,0,
        1517,1516,1,0,0,0,1517,1518,1,0,0,0,1518,1519,1,0,0,0,1519,1521,
        3,194,97,0,1520,1517,1,0,0,0,1521,1522,1,0,0,0,1522,1520,1,0,0,0,
        1522,1523,1,0,0,0,1523,193,1,0,0,0,1524,1526,3,196,98,0,1525,1527,
        5,135,0,0,1526,1525,1,0,0,0,1526,1527,1,0,0,0,1527,1528,1,0,0,0,
        1528,1529,3,40,20,0,1529,195,1,0,0,0,1530,1532,3,308,154,0,1531,
        1533,5,135,0,0,1532,1531,1,0,0,0,1532,1533,1,0,0,0,1533,1534,1,0,
        0,0,1534,1536,3,312,156,0,1535,1537,5,135,0,0,1536,1535,1,0,0,0,
        1536,1537,1,0,0,0,1537,1539,1,0,0,0,1538,1540,3,50,25,0,1539,1538,
        1,0,0,0,1539,1540,1,0,0,0,1540,1542,1,0,0,0,1541,1543,5,135,0,0,
        1542,1541,1,0,0,0,1542,1543,1,0,0,0,1543,1544,1,0,0,0,1544,1546,
        3,312,156,0,1545,1547,5,135,0,0,1546,1545,1,0,0,0,1546,1547,1,0,
        0,0,1547,1548,1,0,0,0,1548,1549,3,310,155,0,1549,1595,1,0,0,0,1550,
        1552,3,308,154,0,1551,1553,5,135,0,0,1552,1551,1,0,0,0,1552,1553,
        1,0,0,0,1553,1554,1,0,0,0,1554,1556,3,312,156,0,1555,1557,5,135,
        0,0,1556,1555,1,0,0,0,1556,1557,1,0,0,0,1557,1559,1,0,0,0,1558,1560,
        3,50,25,0,1559,1558,1,0,0,0,1559,1560,1,0,0,0,1560,1562,1,0,0,0,
        1561,1563,5,135,0,0,1562,1561,1,0,0,0,1562,1563,1,0,0,0,1563,1564,
        1,0,0,0,1564,1565,3,312,156,0,1565,1595,1,0,0,0,1566,1568,3,312,
        156,0,1567,1569,5,135,0,0,1568,1567,1,0,0,0,1568,1569,1,0,0,0,1569,
        1571,1,0,0,0,1570,1572,3,50,25,0,1571,1570,1,0,0,0,1571,1572,1,0,
        0,0,1572,1574,1,0,0,0,1573,1575,5,135,0,0,1574,1573,1,0,0,0,1574,
        1575,1,0,0,0,1575,1576,1,0,0,0,1576,1578,3,312,156,0,1577,1579,5,
        135,0,0,1578,1577,1,0,0,0,1578,1579,1,0,0,0,1579,1580,1,0,0,0,1580,
        1581,3,310,155,0,1581,1595,1,0,0,0,1582,1584,3,312,156,0,1583,1585,
        5,135,0,0,1584,1583,1,0,0,0,1584,1585,1,0,0,0,1585,1587,1,0,0,0,
        1586,1588,3,50,25,0,1587,1586,1,0,0,0,1587,1588,1,0,0,0,1588,1590,
        1,0,0,0,1589,1591,5,135,0,0,1590,1589,1,0,0,0,1590,1591,1,0,0,0,
        1591,1592,1,0,0,0,1592,1593,3,312,156,0,1593,1595,1,0,0,0,1594,1530,
        1,0,0,0,1594,1550,1,0,0,0,1594,1566,1,0,0,0,1594,1582,1,0,0,0,1595,
        197,1,0,0,0,1596,1599,3,298,149,0,1597,1599,3,304,152,0,1598,1596,
        1,0,0,0,1598,1597,1,0,0,0,1599,199,1,0,0,0,1600,1602,5,8,0,0,1601,
        1603,5,135,0,0,1602,1601,1,0,0,0,1602,1603,1,0,0,0,1603,1604,1,0,
        0,0,1604,1618,3,210,105,0,1605,1607,5,135,0,0,1606,1605,1,0,0,0,
        1606,1607,1,0,0,0,1607,1608,1,0,0,0,1608,1610,5,17,0,0,1609,1611,
        5,8,0,0,1610,1609,1,0,0,0,1610,1611,1,0,0,0,1611,1613,1,0,0,0,1612,
        1614,5,135,0,0,1613,1612,1,0,0,0,1613,1614,1,0,0,0,1614,1615,1,0,
        0,0,1615,1617,3,210,105,0,1616,1606,1,0,0,0,1617,1620,1,0,0,0,1618,
        1616,1,0,0,0,1618,1619,1,0,0,0,1619,201,1,0,0,0,1620,1618,1,0,0,
        0,1621,1628,3,204,102,0,1622,1624,5,135,0,0,1623,1622,1,0,0,0,1623,
        1624,1,0,0,0,1624,1625,1,0,0,0,1625,1627,3,204,102,0,1626,1623,1,
        0,0,0,1627,1630,1,0,0,0,1628,1626,1,0,0,0,1628,1629,1,0,0,0,1629,
        203,1,0,0,0,1630,1628,1,0,0,0,1631,1633,5,8,0,0,1632,1634,5,135,
        0,0,1633,1632,1,0,0,0,1633,1634,1,0,0,0,1634,1635,1,0,0,0,1635,1636,
        3,208,104,0,1636,205,1,0,0,0,1637,1639,5,16,0,0,1638,1640,5,135,
        0,0,1639,1638,1,0,0,0,1639,1640,1,0,0,0,1640,1645,1,0,0,0,1641,1643,
        3,292,146,0,1642,1644,5,135,0,0,1643,1642,1,0,0,0,1643,1644,1,0,
        0,0,1644,1646,1,0,0,0,1645,1641,1,0,0,0,1645,1646,1,0,0,0,1646,1657,
        1,0,0,0,1647,1649,5,12,0,0,1648,1650,5,135,0,0,1649,1648,1,0,0,0,
        1649,1650,1,0,0,0,1650,1655,1,0,0,0,1651,1653,3,292,146,0,1652,1654,
        5,135,0,0,1653,1652,1,0,0,0,1653,1654,1,0,0,0,1654,1656,1,0,0,0,
        1655,1651,1,0,0,0,1655,1656,1,0,0,0,1656,1658,1,0,0,0,1657,1647,
        1,0,0,0,1657,1658,1,0,0,0,1658,207,1,0,0,0,1659,1660,3,306,153,0,
        1660,209,1,0,0,0,1661,1662,3,306,153,0,1662,211,1,0,0,0,1663,1668,
        3,248,124,0,1664,1666,5,135,0,0,1665,1664,1,0,0,0,1665,1666,1,0,
        0,0,1666,1667,1,0,0,0,1667,1669,3,246,123,0,1668,1665,1,0,0,0,1669,
        1670,1,0,0,0,1670,1668,1,0,0,0,1670,1671,1,0,0,0,1671,213,1,0,0,
        0,1672,1673,3,216,108,0,1673,215,1,0,0,0,1674,1681,3,218,109,0,1675,
        1676,5,135,0,0,1676,1677,5,83,0,0,1677,1678,5,135,0,0,1678,1680,
        3,218,109,0,1679,1675,1,0,0,0,1680,1683,1,0,0,0,1681,1679,1,0,0,
        0,1681,1682,1,0,0,0,1682,217,1,0,0,0,1683,1681,1,0,0,0,1684,1691,
        3,220,110,0,1685,1686,5,135,0,0,1686,1687,5,84,0,0,1687,1688,5,135,
        0,0,1688,1690,3,220,110,0,1689,1685,1,0,0,0,1690,1693,1,0,0,0,1691,
        1689,1,0,0,0,1691,1692,1,0,0,0,1692,219,1,0,0,0,1693,1691,1,0,0,
        0,1694,1701,3,222,111,0,1695,1696,5,135,0,0,1696,1697,5,85,0,0,1697,
        1698,5,135,0,0,1698,1700,3,222,111,0,1699,1695,1,0,0,0,1700,1703,
        1,0,0,0,1701,1699,1,0,0,0,1701,1702,1,0,0,0,1702,221,1,0,0,0,1703,
        1701,1,0,0,0,1704,1706,5,86,0,0,1705,1707,5,135,0,0,1706,1705,1,
        0,0,0,1706,1707,1,0,0,0,1707,1709,1,0,0,0,1708,1704,1,0,0,0,1709,
        1712,1,0,0,0,1710,1708,1,0,0,0,1710,1711,1,0,0,0,1711,1713,1,0,0,
        0,1712,1710,1,0,0,0,1713,1714,3,224,112,0,1714,223,1,0,0,0,1715,
        1722,3,52,26,0,1716,1718,5,135,0,0,1717,1716,1,0,0,0,1717,1718,1,
        0,0,0,1718,1719,1,0,0,0,1719,1721,3,226,113,0,1720,1717,1,0,0,0,
        1721,1724,1,0,0,0,1722,1720,1,0,0,0,1722,1723,1,0,0,0,1723,225,1,
        0,0,0,1724,1722,1,0,0,0,1725,1727,3,236,118,0,1726,1728,5,135,0,
        0,1727,1726,1,0,0,0,1727,1728,1,0,0,0,1728,1729,1,0,0,0,1729,1730,
        3,52,26,0,1730,1762,1,0,0,0,1731,1733,3,236,118,0,1732,1734,5,135,
        0,0,1733,1732,1,0,0,0,1733,1734,1,0,0,0,1734,1735,1,0,0,0,1735,1736,
        3,52,26,0,1736,1762,1,0,0,0,1737,1739,3,236,118,0,1738,1740,5,135,
        0,0,1739,1738,1,0,0,0,1739,1740,1,0,0,0,1740,1741,1,0,0,0,1741,1742,
        3,52,26,0,1742,1762,1,0,0,0,1743,1745,3,236,118,0,1744,1746,5,135,
        0,0,1745,1744,1,0,0,0,1745,1746,1,0,0,0,1746,1747,1,0,0,0,1747,1748,
        3,52,26,0,1748,1762,1,0,0,0,1749,1751,3,236,118,0,1750,1752,5,135,
        0,0,1751,1750,1,0,0,0,1751,1752,1,0,0,0,1752,1753,1,0,0,0,1753,1754,
        3,52,26,0,1754,1762,1,0,0,0,1755,1757,3,236,118,0,1756,1758,5,135,
        0,0,1757,1756,1,0,0,0,1757,1758,1,0,0,0,1758,1759,1,0,0,0,1759,1760,
        3,52,26,0,1760,1762,1,0,0,0,1761,1725,1,0,0,0,1761,1731,1,0,0,0,
        1761,1737,1,0,0,0,1761,1743,1,0,0,0,1761,1749,1,0,0,0,1761,1755,
        1,0,0,0,1762,227,1,0,0,0,1763,1764,5,135,0,0,1764,1765,5,87,0,0,
        1765,1766,5,135,0,0,1766,1774,5,71,0,0,1767,1768,5,135,0,0,1768,
        1769,5,88,0,0,1769,1770,5,135,0,0,1770,1774,5,71,0,0,1771,1772,5,
        135,0,0,1772,1774,5,89,0,0,1773,1763,1,0,0,0,1773,1767,1,0,0,0,1773,
        1771,1,0,0,0,1774,1776,1,0,0,0,1775,1777,5,135,0,0,1776,1775,1,0,
        0,0,1776,1777,1,0,0,0,1777,1778,1,0,0,0,1778,1779,3,234,117,0,1779,
        229,1,0,0,0,1780,1781,5,135,0,0,1781,1783,5,90,0,0,1782,1784,5,135,
        0,0,1783,1782,1,0,0,0,1783,1784,1,0,0,0,1784,1785,1,0,0,0,1785,1786,
        3,234,117,0,1786,231,1,0,0,0,1787,1788,5,135,0,0,1788,1789,5,91,
        0,0,1789,1790,5,135,0,0,1790,1798,5,92,0,0,1791,1792,5,135,0,0,1792,
        1793,5,91,0,0,1793,1794,5,135,0,0,1794,1795,5,86,0,0,1795,1796,5,
        135,0,0,1796,1798,5,92,0,0,1797,1787,1,0,0,0,1797,1791,1,0,0,0,1798,
        233,1,0,0,0,1799,1820,3,238,119,0,1800,1802,5,135,0,0,1801,1800,
        1,0,0,0,1801,1802,1,0,0,0,1802,1803,1,0,0,0,1803,1805,3,236,118,
        0,1804,1806,5,135,0,0,1805,1804,1,0,0,0,1805,1806,1,0,0,0,1806,1807,
        1,0,0,0,1807,1808,3,238,119,0,1808,1819,1,0,0,0,1809,1811,5,135,
        0,0,1810,1809,1,0,0,0,1810,1811,1,0,0,0,1811,1812,1,0,0,0,1812,1814,
        3,236,118,0,1813,1815,5,135,0,0,1814,1813,1,0,0,0,1814,1815,1,0,
        0,0,1815,1816,1,0,0,0,1816,1817,3,238,119,0,1817,1819,1,0,0,0,1818,
        1801,1,0,0,0,1818,1810,1,0,0,0,1819,1822,1,0,0,0,1820,1818,1,0,0,
        0,1820,1821,1,0,0,0,1821,235,1,0,0,0,1822,1820,1,0,0,0,1823,1824,
        7,5,0,0,1824,237,1,0,0,0,1825,1855,3,240,120,0,1826,1828,5,135,0,
        0,1827,1826,1,0,0,0,1827,1828,1,0,0,0,1828,1829,1,0,0,0,1829,1831,
        3,236,118,0,1830,1832,5,135,0,0,1831,1830,1,0,0,0,1831,1832,1,0,
        0,0,1832,1833,1,0,0,0,1833,1834,3,240,120,0,1834,1854,1,0,0,0,1835,
        1837,5,135,0,0,1836,1835,1,0,0,0,1836,1837,1,0,0,0,1837,1838,1,0,
        0,0,1838,1840,3,236,118,0,1839,1841,5,135,0,0,1840,1839,1,0,0,0,
        1840,1841,1,0,0,0,1841,1842,1,0,0,0,1842,1843,3,240,120,0,1843,1854,
        1,0,0,0,1844,1846,5,135,0,0,1845,1844,1,0,0,0,1845,1846,1,0,0,0,
        1846,1847,1,0,0,0,1847,1849,3,236,118,0,1848,1850,5,135,0,0,1849,
        1848,1,0,0,0,1849,1850,1,0,0,0,1850,1851,1,0,0,0,1851,1852,3,240,
        120,0,1852,1854,1,0,0,0,1853,1827,1,0,0,0,1853,1836,1,0,0,0,1853,
        1845,1,0,0,0,1854,1857,1,0,0,0,1855,1853,1,0,0,0,1855,1856,1,0,0,
        0,1856,239,1,0,0,0,1857,1855,1,0,0,0,1858,1870,3,242,121,0,1859,
        1861,5,135,0,0,1860,1859,1,0,0,0,1860,1861,1,0,0,0,1861,1862,1,0,
        0,0,1862,1864,3,236,118,0,1863,1865,5,135,0,0,1864,1863,1,0,0,0,
        1864,1865,1,0,0,0,1865,1866,1,0,0,0,1866,1867,3,242,121,0,1867,1869,
        1,0,0,0,1868,1860,1,0,0,0,1869,1872,1,0,0,0,1870,1868,1,0,0,0,1870,
        1871,1,0,0,0,1871,241,1,0,0,0,1872,1870,1,0,0,0,1873,1880,3,54,27,
        0,1874,1876,7,1,0,0,1875,1877,5,135,0,0,1876,1875,1,0,0,0,1876,1877,
        1,0,0,0,1877,1878,1,0,0,0,1878,1880,3,54,27,0,1879,1873,1,0,0,0,
        1879,1874,1,0,0,0,1880,243,1,0,0,0,1881,1888,3,248,124,0,1882,1884,
        5,135,0,0,1883,1882,1,0,0,0,1883,1884,1,0,0,0,1884,1885,1,0,0,0,
        1885,1887,3,246,123,0,1886,1883,1,0,0,0,1887,1890,1,0,0,0,1888,1886,
        1,0,0,0,1888,1889,1,0,0,0,1889,1895,1,0,0,0,1890,1888,1,0,0,0,1891,
        1893,5,135,0,0,1892,1891,1,0,0,0,1892,1893,1,0,0,0,1893,1894,1,0,
        0,0,1894,1896,3,202,101,0,1895,1892,1,0,0,0,1895,1896,1,0,0,0,1896,
        245,1,0,0,0,1897,1899,5,1,0,0,1898,1900,5,135,0,0,1899,1898,1,0,
        0,0,1899,1900,1,0,0,0,1900,1901,1,0,0,0,1901,1902,3,302,151,0,1902,
        247,1,0,0,0,1903,1928,3,286,143,0,1904,1928,3,304,152,0,1905,1928,
        3,250,125,0,1906,1908,5,93,0,0,1907,1909,5,135,0,0,1908,1907,1,0,
        0,0,1908,1909,1,0,0,0,1909,1910,1,0,0,0,1910,1912,5,5,0,0,1911,1913,
        5,135,0,0,1912,1911,1,0,0,0,1912,1913,1,0,0,0,1913,1914,1,0,0,0,
        1914,1916,5,16,0,0,1915,1917,5,135,0,0,1916,1915,1,0,0,0,1916,1917,
        1,0,0,0,1917,1918,1,0,0,0,1918,1928,5,6,0,0,1919,1928,3,254,127,
        0,1920,1928,3,256,128,0,1921,1928,3,258,129,0,1922,1928,3,262,131,
        0,1923,1928,3,264,132,0,1924,1928,3,268,134,0,1925,1928,3,272,136,
        0,1926,1928,3,284,142,0,1927,1903,1,0,0,0,1927,1904,1,0,0,0,1927,
        1905,1,0,0,0,1927,1906,1,0,0,0,1927,1919,1,0,0,0,1927,1920,1,0,0,
        0,1927,1921,1,0,0,0,1927,1922,1,0,0,0,1927,1923,1,0,0,0,1927,1924,
        1,0,0,0,1927,1925,1,0,0,0,1927,1926,1,0,0,0,1928,249,1,0,0,0,1929,
        1934,5,94,0,0,1930,1932,5,135,0,0,1931,1930,1,0,0,0,1931,1932,1,
        0,0,0,1932,1933,1,0,0,0,1933,1935,3,252,126,0,1934,1931,1,0,0,0,
        1935,1936,1,0,0,0,1936,1934,1,0,0,0,1936,1937,1,0,0,0,1937,1952,
        1,0,0,0,1938,1940,5,94,0,0,1939,1941,5,135,0,0,1940,1939,1,0,0,0,
        1940,1941,1,0,0,0,1941,1942,1,0,0,0,1942,1947,3,214,107,0,1943,1945,
        5,135,0,0,1944,1943,1,0,0,0,1944,1945,1,0,0,0,1945,1946,1,0,0,0,
        1946,1948,3,252,126,0,1947,1944,1,0,0,0,1948,1949,1,0,0,0,1949,1947,
        1,0,0,0,1949,1950,1,0,0,0,1950,1952,1,0,0,0,1951,1929,1,0,0,0,1951,
        1938,1,0,0,0,1952,1961,1,0,0,0,1953,1955,5,135,0,0,1954,1953,1,0,
        0,0,1954,1955,1,0,0,0,1955,1956,1,0,0,0,1956,1958,5,95,0,0,1957,
        1959,5,135,0,0,1958,1957,1,0,0,0,1958,1959,1,0,0,0,1959,1960,1,0,
        0,0,1960,1962,3,214,107,0,1961,1954,1,0,0,0,1961,1962,1,0,0,0,1962,
        1964,1,0,0,0,1963,1965,5,135,0,0,1964,1963,1,0,0,0,1964,1965,1,0,
        0,0,1965,1966,1,0,0,0,1966,1967,5,96,0,0,1967,251,1,0,0,0,1968,1970,
        5,97,0,0,1969,1971,5,135,0,0,1970,1969,1,0,0,0,1970,1971,1,0,0,0,
        1971,1972,1,0,0,0,1972,1974,3,214,107,0,1973,1975,5,135,0,0,1974,
        1973,1,0,0,0,1974,1975,1,0,0,0,1975,1976,1,0,0,0,1976,1978,5,98,
        0,0,1977,1979,5,135,0,0,1978,1977,1,0,0,0,1978,1979,1,0,0,0,1979,
        1980,1,0,0,0,1980,1981,3,214,107,0,1981,253,1,0,0,0,1982,1984,5,
        10,0,0,1983,1985,5,135,0,0,1984,1983,1,0,0,0,1984,1985,1,0,0,0,1985,
        1986,1,0,0,0,1986,1995,3,260,130,0,1987,1989,5,135,0,0,1988,1987,
        1,0,0,0,1988,1989,1,0,0,0,1989,1990,1,0,0,0,1990,1992,5,17,0,0,1991,
        1993,5,135,0,0,1992,1991,1,0,0,0,1992,1993,1,0,0,0,1993,1994,1,0,
        0,0,1994,1996,3,214,107,0,1995,1988,1,0,0,0,1995,1996,1,0,0,0,1996,
        1998,1,0,0,0,1997,1999,5,135,0,0,1998,1997,1,0,0,0,1998,1999,1,0,
        0,0,1999,2000,1,0,0,0,2000,2001,5,11,0,0,2001,255,1,0,0,0,2002,2004,
        5,10,0,0,2003,2005,5,135,0,0,2004,2003,1,0,0,0,2004,2005,1,0,0,0,
        2005,2014,1,0,0,0,2006,2008,3,284,142,0,2007,2009,5,135,0,0,2008,
        2007,1,0,0,0,2008,2009,1,0,0,0,2009,2010,1,0,0,0,2010,2012,5,2,0,
        0,2011,2013,5,135,0,0,2012,2011,1,0,0,0,2012,2013,1,0,0,0,2013,2015,
        1,0,0,0,2014,2006,1,0,0,0,2014,2015,1,0,0,0,2015,2016,1,0,0,0,2016,
        2018,3,192,96,0,2017,2019,5,135,0,0,2018,2017,1,0,0,0,2018,2019,
        1,0,0,0,2019,2024,1,0,0,0,2020,2022,3,184,92,0,2021,2023,5,135,0,
        0,2022,2021,1,0,0,0,2022,2023,1,0,0,0,2023,2025,1,0,0,0,2024,2020,
        1,0,0,0,2024,2025,1,0,0,0,2025,2026,1,0,0,0,2026,2028,5,17,0,0,2027,
        2029,5,135,0,0,2028,2027,1,0,0,0,2028,2029,1,0,0,0,2029,2030,1,0,
        0,0,2030,2032,3,214,107,0,2031,2033,5,135,0,0,2032,2031,1,0,0,0,
        2032,2033,1,0,0,0,2033,2034,1,0,0,0,2034,2035,5,11,0,0,2035,257,
        1,0,0,0,2036,2038,5,57,0,0,2037,2039,5,135,0,0,2038,2037,1,0,0,0,
        2038,2039,1,0,0,0,2039,2040,1,0,0,0,2040,2042,5,5,0,0,2041,2043,
        5,135,0,0,2042,2041,1,0,0,0,2042,2043,1,0,0,0,2043,2044,1,0,0,0,
        2044,2046,3,260,130,0,2045,2047,5,135,0,0,2046,2045,1,0,0,0,2046,
        2047,1,0,0,0,2047,2048,1,0,0,0,2048,2049,5,6,0,0,2049,2093,1,0,0,
        0,2050,2052,5,99,0,0,2051,2053,5,135,0,0,2052,2051,1,0,0,0,2052,
        2053,1,0,0,0,2053,2054,1,0,0,0,2054,2056,5,5,0,0,2055,2057,5,135,
        0,0,2056,2055,1,0,0,0,2056,2057,1,0,0,0,2057,2058,1,0,0,0,2058,2060,
        3,260,130,0,2059,2061,5,135,0,0,2060,2059,1,0,0,0,2060,2061,1,0,
        0,0,2061,2062,1,0,0,0,2062,2063,5,6,0,0,2063,2093,1,0,0,0,2064,2066,
        5,100,0,0,2065,2067,5,135,0,0,2066,2065,1,0,0,0,2066,2067,1,0,0,
        0,2067,2068,1,0,0,0,2068,2070,5,5,0,0,2069,2071,5,135,0,0,2070,2069,
        1,0,0,0,2070,2071,1,0,0,0,2071,2072,1,0,0,0,2072,2074,3,260,130,
        0,2073,2075,5,135,0,0,2074,2073,1,0,0,0,2074,2075,1,0,0,0,2075,2076,
        1,0,0,0,2076,2077,5,6,0,0,2077,2093,1,0,0,0,2078,2080,5,101,0,0,
        2079,2081,5,135,0,0,2080,2079,1,0,0,0,2080,2081,1,0,0,0,2081,2082,
        1,0,0,0,2082,2084,5,5,0,0,2083,2085,5,135,0,0,2084,2083,1,0,0,0,
        2084,2085,1,0,0,0,2085,2086,1,0,0,0,2086,2088,3,260,130,0,2087,2089,
        5,135,0,0,2088,2087,1,0,0,0,2088,2089,1,0,0,0,2089,2090,1,0,0,0,
        2090,2091,5,6,0,0,2091,2093,1,0,0,0,2092,2036,1,0,0,0,2092,2050,
        1,0,0,0,2092,2064,1,0,0,0,2092,2078,1,0,0,0,2093,259,1,0,0,0,2094,
        2099,3,266,133,0,2095,2097,5,135,0,0,2096,2095,1,0,0,0,2096,2097,
        1,0,0,0,2097,2098,1,0,0,0,2098,2100,3,184,92,0,2099,2096,1,0,0,0,
        2099,2100,1,0,0,0,2100,261,1,0,0,0,2101,2102,3,192,96,0,2102,263,
        1,0,0,0,2103,2105,5,5,0,0,2104,2106,5,135,0,0,2105,2104,1,0,0,0,
        2105,2106,1,0,0,0,2106,2107,1,0,0,0,2107,2109,3,214,107,0,2108,2110,
        5,135,0,0,2109,2108,1,0,0,0,2109,2110,1,0,0,0,2110,2111,1,0,0,0,
        2111,2112,5,6,0,0,2112,265,1,0,0,0,2113,2114,3,284,142,0,2114,2115,
        5,135,0,0,2115,2116,5,90,0,0,2116,2117,5,135,0,0,2117,2118,3,214,
        107,0,2118,267,1,0,0,0,2119,2121,3,270,135,0,2120,2122,5,135,0,0,
        2121,2120,1,0,0,0,2121,2122,1,0,0,0,2122,2123,1,0,0,0,2123,2125,
        5,5,0,0,2124,2126,5,135,0,0,2125,2124,1,0,0,0,2125,2126,1,0,0,0,
        2126,2131,1,0,0,0,2127,2129,5,73,0,0,2128,2130,5,135,0,0,2129,2128,
        1,0,0,0,2129,2130,1,0,0,0,2130,2132,1,0,0,0,2131,2127,1,0,0,0,2131,
        2132,1,0,0,0,2132,2150,1,0,0,0,2133,2135,3,214,107,0,2134,2136,5,
        135,0,0,2135,2134,1,0,0,0,2135,2136,1,0,0,0,2136,2147,1,0,0,0,2137,
        2139,5,4,0,0,2138,2140,5,135,0,0,2139,2138,1,0,0,0,2139,2140,1,0,
        0,0,2140,2141,1,0,0,0,2141,2143,3,214,107,0,2142,2144,5,135,0,0,
        2143,2142,1,0,0,0,2143,2144,1,0,0,0,2144,2146,1,0,0,0,2145,2137,
        1,0,0,0,2146,2149,1,0,0,0,2147,2145,1,0,0,0,2147,2148,1,0,0,0,2148,
        2151,1,0,0,0,2149,2147,1,0,0,0,2150,2133,1,0,0,0,2150,2151,1,0,0,
        0,2151,2152,1,0,0,0,2152,2153,5,6,0,0,2153,269,1,0,0,0,2154,2155,
        3,282,141,0,2155,2156,3,122,61,0,2156,271,1,0,0,0,2157,2159,5,102,
        0,0,2158,2160,5,135,0,0,2159,2158,1,0,0,0,2159,2160,1,0,0,0,2160,
        2161,1,0,0,0,2161,2163,5,7,0,0,2162,2164,5,135,0,0,2163,2162,1,0,
        0,0,2163,2164,1,0,0,0,2164,2173,1,0,0,0,2165,2174,3,130,65,0,2166,
        2171,3,186,93,0,2167,2169,5,135,0,0,2168,2167,1,0,0,0,2168,2169,
        1,0,0,0,2169,2170,1,0,0,0,2170,2172,3,184,92,0,2171,2168,1,0,0,0,
        2171,2172,1,0,0,0,2172,2174,1,0,0,0,2173,2165,1,0,0,0,2173,2166,
        1,0,0,0,2174,2176,1,0,0,0,2175,2177,5,135,0,0,2176,2175,1,0,0,0,
        2176,2177,1,0,0,0,2177,2178,1,0,0,0,2178,2179,5,9,0,0,2179,273,1,
        0,0,0,2180,2182,3,280,140,0,2181,2183,5,135,0,0,2182,2181,1,0,0,
        0,2182,2183,1,0,0,0,2183,2184,1,0,0,0,2184,2186,5,5,0,0,2185,2187,
        5,135,0,0,2186,2185,1,0,0,0,2186,2187,1,0,0,0,2187,2205,1,0,0,0,
        2188,2190,3,214,107,0,2189,2191,5,135,0,0,2190,2189,1,0,0,0,2190,
        2191,1,0,0,0,2191,2202,1,0,0,0,2192,2194,5,4,0,0,2193,2195,5,135,
        0,0,2194,2193,1,0,0,0,2194,2195,1,0,0,0,2195,2196,1,0,0,0,2196,2198,
        3,214,107,0,2197,2199,5,135,0,0,2198,2197,1,0,0,0,2198,2199,1,0,
        0,0,2199,2201,1,0,0,0,2200,2192,1,0,0,0,2201,2204,1,0,0,0,2202,2200,
        1,0,0,0,2202,2203,1,0,0,0,2203,2206,1,0,0,0,2204,2202,1,0,0,0,2205,
        2188,1,0,0,0,2205,2206,1,0,0,0,2206,2207,1,0,0,0,2207,2208,5,6,0,
        0,2208,275,1,0,0,0,2209,2210,3,280,140,0,2210,277,1,0,0,0,2211,2212,
        3,122,61,0,2212,279,1,0,0,0,2213,2214,3,282,141,0,2214,2215,3,122,
        61,0,2215,281,1,0,0,0,2216,2217,3,122,61,0,2217,2218,5,1,0,0,2218,
        2220,1,0,0,0,2219,2216,1,0,0,0,2220,2223,1,0,0,0,2221,2219,1,0,0,
        0,2221,2222,1,0,0,0,2222,283,1,0,0,0,2223,2221,1,0,0,0,2224,2225,
        3,122,61,0,2225,285,1,0,0,0,2226,2233,3,288,144,0,2227,2233,5,92,
        0,0,2228,2233,3,290,145,0,2229,2233,5,117,0,0,2230,2233,3,296,148,
        0,2231,2233,3,298,149,0,2232,2226,1,0,0,0,2232,2227,1,0,0,0,2232,
        2228,1,0,0,0,2232,2229,1,0,0,0,2232,2230,1,0,0,0,2232,2231,1,0,0,
        0,2233,287,1,0,0,0,2234,2235,7,6,0,0,2235,289,1,0,0,0,2236,2239,
        3,294,147,0,2237,2239,3,292,146,0,2238,2236,1,0,0,0,2238,2237,1,
        0,0,0,2239,291,1,0,0,0,2240,2241,7,7,0,0,2241,293,1,0,0,0,2242,2243,
        7,8,0,0,2243,295,1,0,0,0,2244,2246,5,10,0,0,2245,2247,5,135,0,0,
        2246,2245,1,0,0,0,2246,2247,1,0,0,0,2247,2265,1,0,0,0,2248,2250,
        3,214,107,0,2249,2251,5,135,0,0,2250,2249,1,0,0,0,2250,2251,1,0,
        0,0,2251,2262,1,0,0,0,2252,2254,5,4,0,0,2253,2255,5,135,0,0,2254,
        2253,1,0,0,0,2254,2255,1,0,0,0,2255,2256,1,0,0,0,2256,2258,3,214,
        107,0,2257,2259,5,135,0,0,2258,2257,1,0,0,0,2258,2259,1,0,0,0,2259,
        2261,1,0,0,0,2260,2252,1,0,0,0,2261,2264,1,0,0,0,2262,2260,1,0,0,
        0,2262,2263,1,0,0,0,2263,2266,1,0,0,0,2264,2262,1,0,0,0,2265,2248,
        1,0,0,0,2265,2266,1,0,0,0,2266,2267,1,0,0,0,2267,2268,5,11,0,0,2268,
        297,1,0,0,0,2269,2271,5,7,0,0,2270,2272,5,135,0,0,2271,2270,1,0,
        0,0,2271,2272,1,0,0,0,2272,2284,1,0,0,0,2273,2281,3,300,150,0,2274,
        2276,5,4,0,0,2275,2277,5,135,0,0,2276,2275,1,0,0,0,2276,2277,1,0,
        0,0,2277,2278,1,0,0,0,2278,2280,3,300,150,0,2279,2274,1,0,0,0,2280,
        2283,1,0,0,0,2281,2279,1,0,0,0,2281,2282,1,0,0,0,2282,2285,1,0,0,
        0,2283,2281,1,0,0,0,2284,2273,1,0,0,0,2284,2285,1,0,0,0,2285,2286,
        1,0,0,0,2286,2287,5,9,0,0,2287,299,1,0,0,0,2288,2290,3,302,151,0,
        2289,2291,5,135,0,0,2290,2289,1,0,0,0,2290,2291,1,0,0,0,2291,2292,
        1,0,0,0,2292,2294,5,8,0,0,2293,2295,5,135,0,0,2294,2293,1,0,0,0,
        2294,2295,1,0,0,0,2295,2296,1,0,0,0,2296,2298,3,214,107,0,2297,2299,
        5,135,0,0,2298,2297,1,0,0,0,2298,2299,1,0,0,0,2299,301,1,0,0,0,2300,
        2301,3,306,153,0,2301,303,1,0,0,0,2302,2305,5,26,0,0,2303,2306,3,
        122,61,0,2304,2306,5,106,0,0,2305,2303,1,0,0,0,2305,2304,1,0,0,0,
        2306,305,1,0,0,0,2307,2310,3,122,61,0,2308,2310,3,124,62,0,2309,
        2307,1,0,0,0,2309,2308,1,0,0,0,2310,307,1,0,0,0,2311,2312,7,9,0,
        0,2312,309,1,0,0,0,2313,2314,7,10,0,0,2314,311,1,0,0,0,2315,2316,
        7,11,0,0,2316,313,1,0,0,0,416,317,321,325,329,333,335,338,341,349,
        352,355,359,365,368,375,378,383,389,392,397,401,407,411,417,421,
        427,431,437,441,445,451,454,458,464,467,471,475,479,484,491,496,
        500,504,508,512,517,524,529,533,539,545,549,555,561,565,571,575,
        580,584,588,592,598,602,608,612,614,618,620,624,626,630,632,638,
        642,649,657,660,666,670,672,675,679,683,685,689,693,695,699,701,
        704,708,710,714,716,725,729,733,735,739,746,750,754,764,769,772,
        775,777,780,786,791,801,805,809,813,817,820,837,847,857,862,866,
        873,878,883,889,895,901,907,913,917,924,928,932,937,941,945,947,
        965,968,975,989,993,997,1002,1006,1011,1015,1019,1021,1026,1030,
        1036,1042,1045,1049,1053,1055,1060,1065,1069,1072,1076,1081,1084,
        1087,1089,1092,1097,1104,1108,1112,1122,1129,1133,1136,1139,1147,
        1152,1159,1164,1167,1171,1175,1179,1185,1189,1194,1199,1203,1206,
        1208,1213,1219,1223,1228,1232,1237,1242,1246,1256,1263,1276,1280,
        1286,1290,1294,1299,1306,1310,1315,1322,1328,1333,1339,1342,1348,
        1350,1354,1358,1363,1367,1370,1377,1382,1385,1391,1394,1400,1404,
        1408,1412,1416,1421,1426,1430,1435,1438,1447,1456,1461,1474,1477,
        1485,1489,1494,1501,1506,1513,1517,1522,1526,1532,1536,1539,1542,
        1546,1552,1556,1559,1562,1568,1571,1574,1578,1584,1587,1590,1594,
        1598,1602,1606,1610,1613,1618,1623,1628,1633,1639,1643,1645,1649,
        1653,1655,1657,1665,1670,1681,1691,1701,1706,1710,1717,1722,1727,
        1733,1739,1745,1751,1757,1761,1773,1776,1783,1797,1801,1805,1810,
        1814,1818,1820,1827,1831,1836,1840,1845,1849,1853,1855,1860,1864,
        1870,1876,1879,1883,1888,1892,1895,1899,1908,1912,1916,1927,1931,
        1936,1940,1944,1949,1951,1954,1958,1961,1964,1970,1974,1978,1984,
        1988,1992,1995,1998,2004,2008,2012,2014,2018,2022,2024,2028,2032,
        2038,2042,2046,2052,2056,2060,2066,2070,2074,2080,2084,2088,2092,
        2096,2099,2105,2109,2121,2125,2129,2131,2135,2139,2143,2147,2150,
        2159,2163,2168,2171,2173,2176,2182,2186,2190,2194,2198,2202,2205,
        2221,2232,2238,2246,2250,2254,2258,2262,2265,2271,2276,2281,2284,
        2290,2294,2298,2305,2309
    ]

class s_cypherParser ( Parser ):

    grammarFileName = "s_cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "'='", "'+='", "','", "'('", "')'", 
                     "'{'", "':'", "'}'", "'['", "']'", "'..'", "'+'", "'-'", 
                     "';'", "'*'", "'|'", "'/'", "'%'", "'^'", "'<>'", "'<'", 
                     "'<='", "'>'", "'>='", "'$'", "'\\u27E8'", "'\\u3008'", 
                     "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
                     "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", 
                     "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", 
                     "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
                     "'\\uFF0D'", "<INVALID>", "<INVALID>", "'NOW'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "AtT", "PoundValue", "NOW", 
                      "AT_TIME", "SNAPSHOT", "BETWEEN", "SCOPE", "STALE", 
                      "DURING", "OVERLAPS", "UNION", "ALL", "OPTIONAL", 
                      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", 
                      "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", 
                      "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", 
                      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
                      "WHERE", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", 
                      "CONTAINS", "IN", "IS", "NULL", "COUNT", "CASE", "ELSE", 
                      "END", "WHEN", "THEN", "ANY", "NONE", "SINGLE", "EXISTS", 
                      "TRUE", "FALSE", "HexInteger", "DecimalInteger", "OctalInteger", 
                      "HexLetter", "HexDigit", "Digit", "NonZeroDigit", 
                      "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", 
                      "RegularDecimalReal", "StringLiteral", "EscapedChar", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Query = 0
    RULE_oC_Match = 1
    RULE_oC_UpdatingClause = 2
    RULE_oC_SetItem = 3
    RULE_s_SetPropertyItemOne = 4
    RULE_s_SetPropertyItemTwo = 5
    RULE_s_SetValueItem = 6
    RULE_s_SetValueItemExpression = 7
    RULE_s_Stale = 8
    RULE_s_StaleItem = 9
    RULE_oC_Delete = 10
    RULE_s_DeleteItem = 11
    RULE_s_AtTime = 12
    RULE_s_Between = 13
    RULE_s_TimeWindowLimit = 14
    RULE_s_Snapshot = 15
    RULE_s_Scope = 16
    RULE_oC_PatternPart = 17
    RULE_s_PathFunctionPattern = 18
    RULE_s_SinglePathPattern = 19
    RULE_oC_NodePattern = 20
    RULE_s_Properties = 21
    RULE_s_PropertiesPattern = 22
    RULE_s_PropertyNode = 23
    RULE_s_ValueNode = 24
    RULE_oC_RelationshipDetail = 25
    RULE_oC_StringListNullPredicateExpression = 26
    RULE_oC_ListOperatorExpression = 27
    RULE_s_SingleIndexExpression = 28
    RULE_s_DoubleIndexExpression = 29
    RULE_s_LeftExpression = 30
    RULE_s_RightExpression = 31
    RULE_s_AtTExpression = 32
    RULE_s_PropertyLookupTime = 33
    RULE_s_TimePredicateExpression = 34
    RULE_s_AtTElement = 35
    RULE_s_Where = 36
    RULE_s_WhereExpression = 37
    RULE_s_OrWhereExpression = 38
    RULE_s_XorWhereExpression = 39
    RULE_s_AndWhereExpression = 40
    RULE_s_NotWhereExpression = 41
    RULE_s_ComparisonWhereExpression = 42
    RULE_s_PartialComparisonWhereExpression = 43
    RULE_s_StringListNullPredicateWhereExpression = 44
    RULE_s_AddOrSubtractWhereExpression = 45
    RULE_s_TimePredicateWhereExpression = 46
    RULE_s_StringPredicateWhereExpression = 47
    RULE_s_ListPredicateWhereExpression = 48
    RULE_s_NullPredicateWhereExpression = 49
    RULE_s_MultiplyDivideModuloWhereExpression = 50
    RULE_s_PowerOfWhereExpression = 51
    RULE_s_UnaryAddOrSubtractWhereExpression = 52
    RULE_s_ListOperatorWhereExpression = 53
    RULE_s_PropertyOrLabelsWhereExpression = 54
    RULE_s_AtTWhereExpression = 55
    RULE_s_SingleIndexWhereExpression = 56
    RULE_s_DoubleIndexWhereExpression = 57
    RULE_s_LeftWhereExpression = 58
    RULE_s_RightWhereExpression = 59
    RULE_s_TimePointLiteral = 60
    RULE_oC_SymbolicName = 61
    RULE_oC_ReservedWord = 62
    RULE_oC_Cypher = 63
    RULE_oC_Statement = 64
    RULE_oC_RegularQuery = 65
    RULE_oC_Union = 66
    RULE_oC_SingleQuery = 67
    RULE_oC_SinglePartQuery = 68
    RULE_oC_MultiPartQuery = 69
    RULE_s_WithPartQuery = 70
    RULE_oC_ReadingClause = 71
    RULE_oC_Unwind = 72
    RULE_oC_Merge = 73
    RULE_oC_MergeAction = 74
    RULE_oC_Create = 75
    RULE_oC_Set = 76
    RULE_oC_Remove = 77
    RULE_oC_RemoveItem = 78
    RULE_oC_InQueryCall = 79
    RULE_oC_StandaloneCall = 80
    RULE_oC_YieldItems = 81
    RULE_oC_YieldItem = 82
    RULE_oC_With = 83
    RULE_oC_Return = 84
    RULE_oC_ProjectionBody = 85
    RULE_oC_ProjectionItems = 86
    RULE_oC_ProjectionItem = 87
    RULE_oC_Order = 88
    RULE_oC_Skip = 89
    RULE_oC_Limit = 90
    RULE_oC_SortItem = 91
    RULE_oC_Where = 92
    RULE_oC_Pattern = 93
    RULE_oC_AnonymousPatternPart = 94
    RULE_oC_PatternElement = 95
    RULE_oC_RelationshipsPattern = 96
    RULE_oC_PatternElementChain = 97
    RULE_oC_RelationshipPattern = 98
    RULE_oC_Properties = 99
    RULE_oC_RelationshipTypes = 100
    RULE_oC_NodeLabels = 101
    RULE_oC_NodeLabel = 102
    RULE_oC_RangeLiteral = 103
    RULE_oC_LabelName = 104
    RULE_oC_RelTypeName = 105
    RULE_oC_PropertyExpression = 106
    RULE_oC_Expression = 107
    RULE_oC_OrExpression = 108
    RULE_oC_XorExpression = 109
    RULE_oC_AndExpression = 110
    RULE_oC_NotExpression = 111
    RULE_oC_ComparisonExpression = 112
    RULE_oC_PartialComparisonExpression = 113
    RULE_oC_StringPredicateExpression = 114
    RULE_oC_ListPredicateExpression = 115
    RULE_oC_NullPredicateExpression = 116
    RULE_oC_AddOrSubtractExpression = 117
    RULE_s_operator = 118
    RULE_oC_MultiplyDivideModuloExpression = 119
    RULE_oC_PowerOfExpression = 120
    RULE_oC_UnaryAddOrSubtractExpression = 121
    RULE_oC_PropertyOrLabelsExpression = 122
    RULE_oC_PropertyLookup = 123
    RULE_oC_Atom = 124
    RULE_oC_CaseExpression = 125
    RULE_oC_CaseAlternative = 126
    RULE_oC_ListComprehension = 127
    RULE_oC_PatternComprehension = 128
    RULE_oC_Quantifier = 129
    RULE_oC_FilterExpression = 130
    RULE_oC_PatternPredicate = 131
    RULE_oC_ParenthesizedExpression = 132
    RULE_oC_IdInColl = 133
    RULE_oC_FunctionInvocation = 134
    RULE_oC_FunctionName = 135
    RULE_oC_ExistentialSubquery = 136
    RULE_oC_ExplicitProcedureInvocation = 137
    RULE_oC_ImplicitProcedureInvocation = 138
    RULE_oC_ProcedureResultField = 139
    RULE_oC_ProcedureName = 140
    RULE_oC_Namespace = 141
    RULE_oC_Variable = 142
    RULE_oC_Literal = 143
    RULE_oC_BooleanLiteral = 144
    RULE_oC_NumberLiteral = 145
    RULE_oC_IntegerLiteral = 146
    RULE_oC_DoubleLiteral = 147
    RULE_oC_ListLiteral = 148
    RULE_oC_MapLiteral = 149
    RULE_s_MapKeyValue = 150
    RULE_oC_PropertyKeyName = 151
    RULE_oC_Parameter = 152
    RULE_oC_SchemaName = 153
    RULE_oC_LeftArrowHead = 154
    RULE_oC_RightArrowHead = 155
    RULE_oC_Dash = 156

    ruleNames =  [ "oC_Query", "oC_Match", "oC_UpdatingClause", "oC_SetItem", 
                   "s_SetPropertyItemOne", "s_SetPropertyItemTwo", "s_SetValueItem", 
                   "s_SetValueItemExpression", "s_Stale", "s_StaleItem", 
                   "oC_Delete", "s_DeleteItem", "s_AtTime", "s_Between", 
                   "s_TimeWindowLimit", "s_Snapshot", "s_Scope", "oC_PatternPart", 
                   "s_PathFunctionPattern", "s_SinglePathPattern", "oC_NodePattern", 
                   "s_Properties", "s_PropertiesPattern", "s_PropertyNode", 
                   "s_ValueNode", "oC_RelationshipDetail", "oC_StringListNullPredicateExpression", 
                   "oC_ListOperatorExpression", "s_SingleIndexExpression", 
                   "s_DoubleIndexExpression", "s_LeftExpression", "s_RightExpression", 
                   "s_AtTExpression", "s_PropertyLookupTime", "s_TimePredicateExpression", 
                   "s_AtTElement", "s_Where", "s_WhereExpression", "s_OrWhereExpression", 
                   "s_XorWhereExpression", "s_AndWhereExpression", "s_NotWhereExpression", 
                   "s_ComparisonWhereExpression", "s_PartialComparisonWhereExpression", 
                   "s_StringListNullPredicateWhereExpression", "s_AddOrSubtractWhereExpression", 
                   "s_TimePredicateWhereExpression", "s_StringPredicateWhereExpression", 
                   "s_ListPredicateWhereExpression", "s_NullPredicateWhereExpression", 
                   "s_MultiplyDivideModuloWhereExpression", "s_PowerOfWhereExpression", 
                   "s_UnaryAddOrSubtractWhereExpression", "s_ListOperatorWhereExpression", 
                   "s_PropertyOrLabelsWhereExpression", "s_AtTWhereExpression", 
                   "s_SingleIndexWhereExpression", "s_DoubleIndexWhereExpression", 
                   "s_LeftWhereExpression", "s_RightWhereExpression", "s_TimePointLiteral", 
                   "oC_SymbolicName", "oC_ReservedWord", "oC_Cypher", "oC_Statement", 
                   "oC_RegularQuery", "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", 
                   "oC_MultiPartQuery", "s_WithPartQuery", "oC_ReadingClause", 
                   "oC_Unwind", "oC_Merge", "oC_MergeAction", "oC_Create", 
                   "oC_Set", "oC_Remove", "oC_RemoveItem", "oC_InQueryCall", 
                   "oC_StandaloneCall", "oC_YieldItems", "oC_YieldItem", 
                   "oC_With", "oC_Return", "oC_ProjectionBody", "oC_ProjectionItems", 
                   "oC_ProjectionItem", "oC_Order", "oC_Skip", "oC_Limit", 
                   "oC_SortItem", "oC_Where", "oC_Pattern", "oC_AnonymousPatternPart", 
                   "oC_PatternElement", "oC_RelationshipsPattern", "oC_PatternElementChain", 
                   "oC_RelationshipPattern", "oC_Properties", "oC_RelationshipTypes", 
                   "oC_NodeLabels", "oC_NodeLabel", "oC_RangeLiteral", "oC_LabelName", 
                   "oC_RelTypeName", "oC_PropertyExpression", "oC_Expression", 
                   "oC_OrExpression", "oC_XorExpression", "oC_AndExpression", 
                   "oC_NotExpression", "oC_ComparisonExpression", "oC_PartialComparisonExpression", 
                   "oC_StringPredicateExpression", "oC_ListPredicateExpression", 
                   "oC_NullPredicateExpression", "oC_AddOrSubtractExpression", 
                   "s_operator", "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", 
                   "oC_UnaryAddOrSubtractExpression", "oC_PropertyOrLabelsExpression", 
                   "oC_PropertyLookup", "oC_Atom", "oC_CaseExpression", 
                   "oC_CaseAlternative", "oC_ListComprehension", "oC_PatternComprehension", 
                   "oC_Quantifier", "oC_FilterExpression", "oC_PatternPredicate", 
                   "oC_ParenthesizedExpression", "oC_IdInColl", "oC_FunctionInvocation", 
                   "oC_FunctionName", "oC_ExistentialSubquery", "oC_ExplicitProcedureInvocation", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_Variable", "oC_Literal", 
                   "oC_BooleanLiteral", "oC_NumberLiteral", "oC_IntegerLiteral", 
                   "oC_DoubleLiteral", "oC_ListLiteral", "oC_MapLiteral", 
                   "s_MapKeyValue", "oC_PropertyKeyName", "oC_Parameter", 
                   "oC_SchemaName", "oC_LeftArrowHead", "oC_RightArrowHead", 
                   "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    AtT=46
    PoundValue=47
    NOW=48
    AT_TIME=49
    SNAPSHOT=50
    BETWEEN=51
    SCOPE=52
    STALE=53
    DURING=54
    OVERLAPS=55
    UNION=56
    ALL=57
    OPTIONAL=58
    MATCH=59
    UNWIND=60
    AS=61
    MERGE=62
    ON=63
    CREATE=64
    SET=65
    DETACH=66
    DELETE=67
    REMOVE=68
    CALL=69
    YIELD=70
    WITH=71
    RETURN=72
    DISTINCT=73
    ORDER=74
    BY=75
    L_SKIP=76
    LIMIT=77
    ASCENDING=78
    ASC=79
    DESCENDING=80
    DESC=81
    WHERE=82
    OR=83
    XOR=84
    AND=85
    NOT=86
    STARTS=87
    ENDS=88
    CONTAINS=89
    IN=90
    IS=91
    NULL=92
    COUNT=93
    CASE=94
    ELSE=95
    END=96
    WHEN=97
    THEN=98
    ANY=99
    NONE=100
    SINGLE=101
    EXISTS=102
    TRUE=103
    FALSE=104
    HexInteger=105
    DecimalInteger=106
    OctalInteger=107
    HexLetter=108
    HexDigit=109
    Digit=110
    NonZeroDigit=111
    NonZeroOctDigit=112
    OctDigit=113
    ZeroDigit=114
    ExponentDecimalReal=115
    RegularDecimalReal=116
    StringLiteral=117
    EscapedChar=118
    CONSTRAINT=119
    DO=120
    FOR=121
    REQUIRE=122
    UNIQUE=123
    MANDATORY=124
    SCALAR=125
    OF=126
    ADD=127
    DROP=128
    FILTER=129
    EXTRACT=130
    UnescapedSymbolicName=131
    IdentifierStart=132
    IdentifierPart=133
    EscapedSymbolicName=134
    SP=135
    WHITESPACE=136
    Comment=137

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StandaloneCallContext,0)


        def s_TimeWindowLimit(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimeWindowLimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = s_cypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Query)
        try:
            self.state = 317
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 314
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 315
                self.oC_StandaloneCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 316
                self.s_TimeWindowLimit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_Where(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = s_cypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 319
                self.match(s_cypherParser.OPTIONAL)
                self.state = 320
                self.match(s_cypherParser.SP)


            self.state = 323
            self.match(s_cypherParser.MATCH)
            self.state = 325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 324
                self.match(s_cypherParser.SP)


            self.state = 327
            self.oC_Pattern()
            self.state = 335
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 328
                    self.match(s_cypherParser.SP)


                self.state = 333
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 331
                    self.s_AtTime()
                    pass
                elif token in [51]:
                    self.state = 332
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 341
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 338
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 337
                    self.match(s_cypherParser.SP)


                self.state = 340
                self.s_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Create(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CreateContext,0)


        def oC_Merge(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MergeContext,0)


        def oC_Delete(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DeleteContext,0)


        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RemoveContext,0)


        def s_Stale(self):
            return self.getTypedRuleContext(s_cypherParser.S_StaleContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = s_cypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_UpdatingClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.state = 343
                self.oC_Create()
                pass
            elif token in [62]:
                self.state = 344
                self.oC_Merge()
                pass
            elif token in [66, 67]:
                self.state = 345
                self.oC_Delete()
                pass
            elif token in [65]:
                self.state = 346
                self.oC_Set()
                pass
            elif token in [68]:
                self.state = 347
                self.oC_Remove()
                pass
            elif token in [53]:
                self.state = 348
                self.s_Stale()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 355
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 351
                    self.match(s_cypherParser.SP)


                self.state = 354
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_SetPropertyItemOne(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemOneContext,0)


        def s_SetPropertyItemTwo(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemTwoContext,0)


        def s_SetValueItem(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetValueItemContext,0)


        def s_SetValueItemExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetValueItemExpressionContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = s_cypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 357
                self.oC_Variable()
                self.state = 359
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 358
                    self.match(s_cypherParser.SP)


                self.state = 361
                self.s_AtTElement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 363
                self.oC_Variable()
                self.state = 368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 365
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 364
                        self.match(s_cypherParser.SP)


                    self.state = 367
                    self.s_AtTElement()


                self.state = 370
                self.match(s_cypherParser.T__0)
                self.state = 371
                self.s_SetPropertyItemOne()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 373
                self.oC_Variable()
                self.state = 378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 375
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 374
                        self.match(s_cypherParser.SP)


                    self.state = 377
                    self.s_AtTElement()


                self.state = 380
                self.match(s_cypherParser.T__0)
                self.state = 381
                self.s_SetPropertyItemTwo()
                self.state = 383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 382
                    self.match(s_cypherParser.SP)


                self.state = 385
                self.s_SetValueItem()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 387
                self.oC_Variable()
                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 389
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 388
                        self.match(s_cypherParser.SP)


                    self.state = 391
                    self.s_AtTElement()


                self.state = 394
                self.match(s_cypherParser.T__0)
                self.state = 395
                self.s_SetPropertyItemTwo()
                self.state = 397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 396
                    self.match(s_cypherParser.SP)


                self.state = 399
                self.match(s_cypherParser.T__1)
                self.state = 401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 400
                    self.match(s_cypherParser.SP)


                self.state = 403
                self.s_SetValueItemExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 405
                self.oC_PropertyExpression()
                self.state = 407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 406
                    self.match(s_cypherParser.SP)


                self.state = 409
                self.match(s_cypherParser.T__1)
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 410
                    self.match(s_cypherParser.SP)


                self.state = 413
                self.oC_Expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 415
                self.oC_Variable()
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 416
                    self.match(s_cypherParser.SP)


                self.state = 419
                self.match(s_cypherParser.T__1)
                self.state = 421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 420
                    self.match(s_cypherParser.SP)


                self.state = 423
                self.oC_Expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 425
                self.oC_Variable()
                self.state = 427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 426
                    self.match(s_cypherParser.SP)


                self.state = 429
                self.match(s_cypherParser.T__2)
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 430
                    self.match(s_cypherParser.SP)


                self.state = 433
                self.oC_Expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 435
                self.oC_Variable()
                self.state = 437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 436
                    self.match(s_cypherParser.SP)


                self.state = 439
                self.oC_NodeLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemOneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemOne

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemOne" ):
                listener.enterS_SetPropertyItemOne(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemOne" ):
                listener.exitS_SetPropertyItemOne(self)




    def s_SetPropertyItemOne(self):

        localctx = s_cypherParser.S_SetPropertyItemOneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_s_SetPropertyItemOne)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.oC_PropertyKeyName()
            self.state = 445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 444
                self.match(s_cypherParser.SP)


            self.state = 447
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemTwoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemTwo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemTwo" ):
                listener.enterS_SetPropertyItemTwo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemTwo" ):
                listener.exitS_SetPropertyItemTwo(self)




    def s_SetPropertyItemTwo(self):

        localctx = s_cypherParser.S_SetPropertyItemTwoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_s_SetPropertyItemTwo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.oC_PropertyKeyName()
            self.state = 454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 450
                    self.match(s_cypherParser.SP)


                self.state = 453
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetValueItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetValueItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetValueItem" ):
                listener.enterS_SetValueItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetValueItem" ):
                listener.exitS_SetValueItem(self)




    def s_SetValueItem(self):

        localctx = s_cypherParser.S_SetValueItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_s_SetValueItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.match(s_cypherParser.PoundValue)
            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 457
                self.match(s_cypherParser.SP)


            self.state = 460
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetValueItemExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetValueItemExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetValueItemExpression" ):
                listener.enterS_SetValueItemExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetValueItemExpression" ):
                listener.exitS_SetValueItemExpression(self)




    def s_SetValueItemExpression(self):

        localctx = s_cypherParser.S_SetValueItemExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_s_SetValueItemExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.oC_Expression()
            self.state = 467
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 463
                    self.match(s_cypherParser.SP)


                self.state = 466
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def s_StaleItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StaleItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StaleItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Stale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Stale" ):
                listener.enterS_Stale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Stale" ):
                listener.exitS_Stale(self)




    def s_Stale(self):

        localctx = s_cypherParser.S_StaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_s_Stale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.match(s_cypherParser.STALE)
            self.state = 471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 470
                self.match(s_cypherParser.SP)


            self.state = 473
            self.s_StaleItem()
            self.state = 484
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 475
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 474
                        self.match(s_cypherParser.SP)


                    self.state = 477
                    self.match(s_cypherParser.T__3)
                    self.state = 479
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 478
                        self.match(s_cypherParser.SP)


                    self.state = 481
                    self.s_StaleItem() 
                self.state = 486
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StaleItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StaleItem" ):
                listener.enterS_StaleItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StaleItem" ):
                listener.exitS_StaleItem(self)




    def s_StaleItem(self):

        localctx = s_cypherParser.S_StaleItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_s_StaleItem)
        self._la = 0 # Token type
        try:
            self.state = 496
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 487
                self.oC_Expression()
                self.state = 488
                self.match(s_cypherParser.T__0)
                self.state = 489
                self.oC_PropertyKeyName()
                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 490
                    self.match(s_cypherParser.SP)


                self.state = 493
                self.match(s_cypherParser.PoundValue)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 495
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def s_DeleteItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DeleteItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DeleteItemContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = s_cypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 498
                self.match(s_cypherParser.DETACH)
                self.state = 499
                self.match(s_cypherParser.SP)


            self.state = 502
            self.match(s_cypherParser.DELETE)
            self.state = 504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 503
                self.match(s_cypherParser.SP)


            self.state = 506
            self.s_DeleteItem()
            self.state = 517
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 508
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 507
                        self.match(s_cypherParser.SP)


                    self.state = 510
                    self.match(s_cypherParser.T__3)
                    self.state = 512
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 511
                        self.match(s_cypherParser.SP)


                    self.state = 514
                    self.s_DeleteItem() 
                self.state = 519
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DeleteItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DeleteItem" ):
                listener.enterS_DeleteItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DeleteItem" ):
                listener.exitS_DeleteItem(self)




    def s_DeleteItem(self):

        localctx = s_cypherParser.S_DeleteItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_s_DeleteItem)
        self._la = 0 # Token type
        try:
            self.state = 529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 520
                self.oC_Expression()
                self.state = 521
                self.match(s_cypherParser.T__0)
                self.state = 522
                self.oC_PropertyKeyName()
                self.state = 524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 523
                    self.match(s_cypherParser.SP)


                self.state = 526
                self.match(s_cypherParser.PoundValue)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 528
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTime" ):
                listener.enterS_AtTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTime" ):
                listener.exitS_AtTime(self)




    def s_AtTime(self):

        localctx = s_cypherParser.S_AtTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_s_AtTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.match(s_cypherParser.AT_TIME)
            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 532
                self.match(s_cypherParser.SP)


            self.state = 535
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_BetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Between

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Between" ):
                listener.enterS_Between(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Between" ):
                listener.exitS_Between(self)




    def s_Between(self):

        localctx = s_cypherParser.S_BetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_s_Between)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.match(s_cypherParser.BETWEEN)
            self.state = 539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 538
                self.match(s_cypherParser.SP)


            self.state = 541
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimeWindowLimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_Snapshot(self):
            return self.getTypedRuleContext(s_cypherParser.S_SnapshotContext,0)


        def s_Scope(self):
            return self.getTypedRuleContext(s_cypherParser.S_ScopeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimeWindowLimit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimeWindowLimit" ):
                listener.enterS_TimeWindowLimit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimeWindowLimit" ):
                listener.exitS_TimeWindowLimit(self)




    def s_TimeWindowLimit(self):

        localctx = s_cypherParser.S_TimeWindowLimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_s_TimeWindowLimit)
        try:
            self.state = 545
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 543
                self.s_Snapshot()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 544
                self.s_Scope()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SnapshotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Snapshot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Snapshot" ):
                listener.enterS_Snapshot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Snapshot" ):
                listener.exitS_Snapshot(self)




    def s_Snapshot(self):

        localctx = s_cypherParser.S_SnapshotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_s_Snapshot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            self.match(s_cypherParser.SNAPSHOT)
            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 548
                self.match(s_cypherParser.SP)


            self.state = 551
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Scope" ):
                listener.enterS_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Scope" ):
                listener.exitS_Scope(self)




    def s_Scope(self):

        localctx = s_cypherParser.S_ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_s_Scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            self.match(s_cypherParser.SCOPE)
            self.state = 555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 554
                self.match(s_cypherParser.SP)


            self.state = 557
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_PathFunctionPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PathFunctionPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AnonymousPatternPartContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = s_cypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 580
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 559
                self.oC_Variable()
                self.state = 561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 560
                    self.match(s_cypherParser.SP)


                self.state = 563
                self.match(s_cypherParser.T__1)
                self.state = 565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 564
                    self.match(s_cypherParser.SP)


                self.state = 567
                self.s_PathFunctionPattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 569
                self.oC_Variable()
                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 570
                    self.match(s_cypherParser.SP)


                self.state = 573
                self.match(s_cypherParser.T__1)
                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 574
                    self.match(s_cypherParser.SP)


                self.state = 577
                self.oC_AnonymousPatternPart()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 579
                self.oC_AnonymousPatternPart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PathFunctionPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def s_SinglePathPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_SinglePathPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PathFunctionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PathFunctionPattern" ):
                listener.enterS_PathFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PathFunctionPattern" ):
                listener.exitS_PathFunctionPattern(self)




    def s_PathFunctionPattern(self):

        localctx = s_cypherParser.S_PathFunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_s_PathFunctionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self.oC_FunctionName()
            self.state = 584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 583
                self.match(s_cypherParser.SP)


            self.state = 586
            self.match(s_cypherParser.T__4)
            self.state = 588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 587
                self.match(s_cypherParser.SP)


            self.state = 590
            self.s_SinglePathPattern()
            self.state = 592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 591
                self.match(s_cypherParser.SP)


            self.state = 594
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SinglePathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodePatternContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,i)


        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SinglePathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SinglePathPattern" ):
                listener.enterS_SinglePathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SinglePathPattern" ):
                listener.exitS_SinglePathPattern(self)




    def s_SinglePathPattern(self):

        localctx = s_cypherParser.S_SinglePathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_s_SinglePathPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.oC_NodePattern()
            self.state = 598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 597
                self.match(s_cypherParser.SP)


            self.state = 600
            self.oC_RelationshipPattern()
            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 601
                self.match(s_cypherParser.SP)


            self.state = 604
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def s_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = s_cypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self.match(s_cypherParser.T__4)
            self.state = 608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 607
                self.match(s_cypherParser.SP)


            self.state = 614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 610
                self.oC_Variable()
                self.state = 612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 611
                    self.match(s_cypherParser.SP)




            self.state = 620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 616
                self.oC_NodeLabels()
                self.state = 618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 617
                    self.match(s_cypherParser.SP)




            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 622
                self.s_AtTElement()
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 623
                    self.match(s_cypherParser.SP)




            self.state = 632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==26:
                self.state = 628
                self.s_Properties()
                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 629
                    self.match(s_cypherParser.SP)




            self.state = 634
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertiesPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesPatternContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Properties" ):
                listener.enterS_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Properties" ):
                listener.exitS_Properties(self)




    def s_Properties(self):

        localctx = s_cypherParser.S_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_s_Properties)
        try:
            self.state = 638
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 636
                self.s_PropertiesPattern()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 637
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_PropertyNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PropertyNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PropertyNodeContext,i)


        def s_ValueNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ValueNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ValueNodeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertiesPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertiesPattern" ):
                listener.enterS_PropertiesPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertiesPattern" ):
                listener.exitS_PropertiesPattern(self)




    def s_PropertiesPattern(self):

        localctx = s_cypherParser.S_PropertiesPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_s_PropertiesPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 640
            self.match(s_cypherParser.T__6)
            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 641
                self.match(s_cypherParser.SP)


            self.state = 660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 644
                self.s_PropertyNode()
                self.state = 645
                self.match(s_cypherParser.T__7)
                self.state = 646
                self.s_ValueNode()
                self.state = 657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 647
                    self.match(s_cypherParser.T__3)
                    self.state = 649
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 648
                        self.match(s_cypherParser.SP)


                    self.state = 651
                    self.s_PropertyNode()
                    self.state = 652
                    self.match(s_cypherParser.T__7)
                    self.state = 653
                    self.s_ValueNode()
                    self.state = 659
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 662
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyNode" ):
                listener.enterS_PropertyNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyNode" ):
                listener.exitS_PropertyNode(self)




    def s_PropertyNode(self):

        localctx = s_cypherParser.S_PropertyNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_s_PropertyNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664
            self.oC_PropertyKeyName()
            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 665
                self.match(s_cypherParser.SP)


            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 668
                self.s_AtTElement()
                self.state = 670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 669
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ValueNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ValueNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ValueNode" ):
                listener.enterS_ValueNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ValueNode" ):
                listener.exitS_ValueNode(self)




    def s_ValueNode(self):

        localctx = s_cypherParser.S_ValueNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_s_ValueNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 674
                self.match(s_cypherParser.SP)


            self.state = 677
            self.oC_Expression()
            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 678
                self.match(s_cypherParser.SP)


            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 681
                self.s_AtTElement()
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 682
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RangeLiteralContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = s_cypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.match(s_cypherParser.T__9)
            self.state = 689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 688
                self.match(s_cypherParser.SP)


            self.state = 695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 691
                self.oC_Variable()
                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 692
                    self.match(s_cypherParser.SP)




            self.state = 701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 697
                self.oC_RelationshipTypes()
                self.state = 699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 698
                    self.match(s_cypherParser.SP)




            self.state = 704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 703
                self.oC_RangeLiteral()


            self.state = 710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 706
                self.s_AtTElement()
                self.state = 708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 707
                    self.match(s_cypherParser.SP)




            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==26:
                self.state = 712
                self.oC_Properties()
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 713
                    self.match(s_cypherParser.SP)




            self.state = 718
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def s_TimePredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateExpressionContext,0)


        def oC_StringPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringPredicateExpressionContext,0)


        def oC_ListPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListPredicateExpressionContext,0)


        def oC_NullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NullPredicateExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringListNullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullPredicateExpression" ):
                listener.enterOC_StringListNullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullPredicateExpression" ):
                listener.exitOC_StringListNullPredicateExpression(self)




    def oC_StringListNullPredicateExpression(self):

        localctx = s_cypherParser.OC_StringListNullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_oC_StringListNullPredicateExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.oC_AddOrSubtractExpression()
            self.state = 725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 721
                self.s_TimePredicateExpression()

            elif la_ == 2:
                self.state = 722
                self.oC_StringPredicateExpression()

            elif la_ == 3:
                self.state = 723
                self.oC_ListPredicateExpression()

            elif la_ == 4:
                self.state = 724
                self.oC_NullPredicateExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def s_AtTExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTExpressionContext,0)


        def s_SingleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_SingleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_SingleIndexExpressionContext,i)


        def s_DoubleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DoubleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DoubleIndexExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = s_cypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_oC_ListOperatorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 727
                self.oC_PropertyOrLabelsExpression()
                pass

            elif la_ == 2:
                self.state = 728
                self.s_AtTExpression()
                pass


            self.state = 735
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 733
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                    if la_ == 1:
                        self.state = 731
                        self.s_SingleIndexExpression()
                        pass

                    elif la_ == 2:
                        self.state = 732
                        self.s_DoubleIndexExpression()
                        pass

             
                self.state = 737
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SingleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SingleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SingleIndexExpression" ):
                listener.enterS_SingleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SingleIndexExpression" ):
                listener.exitS_SingleIndexExpression(self)




    def s_SingleIndexExpression(self):

        localctx = s_cypherParser.S_SingleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_s_SingleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 738
                self.match(s_cypherParser.SP)


            self.state = 741
            self.match(s_cypherParser.T__9)
            self.state = 742
            self.s_LeftExpression()
            self.state = 743
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DoubleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def s_RightExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_RightExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DoubleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DoubleIndexExpression" ):
                listener.enterS_DoubleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DoubleIndexExpression" ):
                listener.exitS_DoubleIndexExpression(self)




    def s_DoubleIndexExpression(self):

        localctx = s_cypherParser.S_DoubleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_s_DoubleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 745
                self.match(s_cypherParser.SP)


            self.state = 748
            self.match(s_cypherParser.T__9)
            self.state = 750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119701152) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 749
                self.s_LeftExpression()


            self.state = 752
            self.match(s_cypherParser.T__11)
            self.state = 754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119701152) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 753
                self.s_RightExpression()


            self.state = 756
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_LeftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_LeftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_LeftExpression" ):
                listener.enterS_LeftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_LeftExpression" ):
                listener.exitS_LeftExpression(self)




    def s_LeftExpression(self):

        localctx = s_cypherParser.S_LeftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_s_LeftExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_RightExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_RightExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_RightExpression" ):
                listener.enterS_RightExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_RightExpression" ):
                listener.exitS_RightExpression(self)




    def s_RightExpression(self):

        localctx = s_cypherParser.S_RightExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_s_RightExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def s_PropertyLookupTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupTimeContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTExpression" ):
                listener.enterS_AtTExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTExpression" ):
                listener.exitS_AtTExpression(self)




    def s_AtTExpression(self):

        localctx = s_cypherParser.S_AtTExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_s_AtTExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.oC_Atom()
            self.state = 777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 767 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 764
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 763
                            self.match(s_cypherParser.SP)


                        self.state = 766
                        self.oC_PropertyLookup()

                    else:
                        raise NoViableAltException(self)
                    self.state = 769 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

                self.state = 775
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 772
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 771
                        self.match(s_cypherParser.SP)


                    self.state = 774
                    self.match(s_cypherParser.PoundValue)




            self.state = 780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 779
                self.match(s_cypherParser.SP)


            self.state = 782
            self.s_PropertyLookupTime()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyLookupTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyLookupTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyLookupTime" ):
                listener.enterS_PropertyLookupTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyLookupTime" ):
                listener.exitS_PropertyLookupTime(self)




    def s_PropertyLookupTime(self):

        localctx = s_cypherParser.S_PropertyLookupTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_s_PropertyLookupTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.match(s_cypherParser.AtT)
            self.state = 791
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 786
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 785
                        self.match(s_cypherParser.SP)


                    self.state = 788
                    self.oC_PropertyLookup() 
                self.state = 793
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateExpression" ):
                listener.enterS_TimePredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateExpression" ):
                listener.exitS_TimePredicateExpression(self)




    def s_TimePredicateExpression(self):

        localctx = s_cypherParser.S_TimePredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_s_TimePredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.match(s_cypherParser.SP)
            self.state = 795
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 796
            self.match(s_cypherParser.SP)
            self.state = 797
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_TimePointLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_TimePointLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_TimePointLiteralContext,i)


        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTElement" ):
                listener.enterS_AtTElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTElement" ):
                listener.exitS_AtTElement(self)




    def s_AtTElement(self):

        localctx = s_cypherParser.S_AtTElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_s_AtTElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.match(s_cypherParser.AtT)
            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 800
                self.match(s_cypherParser.SP)


            self.state = 803
            self.match(s_cypherParser.T__4)
            self.state = 805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 804
                self.match(s_cypherParser.SP)


            self.state = 807
            self.s_TimePointLiteral()
            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 808
                self.match(s_cypherParser.SP)


            self.state = 811
            self.match(s_cypherParser.T__3)
            self.state = 813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 812
                self.match(s_cypherParser.SP)


            self.state = 817
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 117]:
                self.state = 815
                self.s_TimePointLiteral()
                pass
            elif token in [48]:
                self.state = 816
                self.match(s_cypherParser.NOW)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 819
                self.match(s_cypherParser.SP)


            self.state = 822
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def s_WhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Where" ):
                listener.enterS_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Where" ):
                listener.exitS_Where(self)




    def s_Where(self):

        localctx = s_cypherParser.S_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_s_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.match(s_cypherParser.WHERE)
            self.state = 825
            self.match(s_cypherParser.SP)
            self.state = 826
            self.s_WhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_OrWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_OrWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_WhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_WhereExpression" ):
                listener.enterS_WhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_WhereExpression" ):
                listener.exitS_WhereExpression(self)




    def s_WhereExpression(self):

        localctx = s_cypherParser.S_WhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_s_WhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.s_OrWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_OrWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_XorWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_XorWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_XorWhereExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_OrWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_OrWhereExpression" ):
                listener.enterS_OrWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_OrWhereExpression" ):
                listener.exitS_OrWhereExpression(self)




    def s_OrWhereExpression(self):

        localctx = s_cypherParser.S_OrWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_s_OrWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self.s_XorWhereExpression()
            self.state = 837
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 831
                    self.match(s_cypherParser.SP)
                    self.state = 832
                    self.match(s_cypherParser.OR)
                    self.state = 833
                    self.match(s_cypherParser.SP)
                    self.state = 834
                    self.s_XorWhereExpression() 
                self.state = 839
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_XorWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_AndWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AndWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AndWhereExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_XorWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_XorWhereExpression" ):
                listener.enterS_XorWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_XorWhereExpression" ):
                listener.exitS_XorWhereExpression(self)




    def s_XorWhereExpression(self):

        localctx = s_cypherParser.S_XorWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_s_XorWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self.s_AndWhereExpression()
            self.state = 847
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 841
                    self.match(s_cypherParser.SP)
                    self.state = 842
                    self.match(s_cypherParser.XOR)
                    self.state = 843
                    self.match(s_cypherParser.SP)
                    self.state = 844
                    self.s_AndWhereExpression() 
                self.state = 849
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AndWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_NotWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_NotWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_NotWhereExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AndWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AndWhereExpression" ):
                listener.enterS_AndWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AndWhereExpression" ):
                listener.exitS_AndWhereExpression(self)




    def s_AndWhereExpression(self):

        localctx = s_cypherParser.S_AndWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_s_AndWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.s_NotWhereExpression()
            self.state = 857
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 851
                    self.match(s_cypherParser.SP)
                    self.state = 852
                    self.match(s_cypherParser.AND)
                    self.state = 853
                    self.match(s_cypherParser.SP)
                    self.state = 854
                    self.s_NotWhereExpression() 
                self.state = 859
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_NotWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_ComparisonWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_ComparisonWhereExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_NotWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_NotWhereExpression" ):
                listener.enterS_NotWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_NotWhereExpression" ):
                listener.exitS_NotWhereExpression(self)




    def s_NotWhereExpression(self):

        localctx = s_cypherParser.S_NotWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_s_NotWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 860
                self.match(s_cypherParser.NOT)
                self.state = 862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 861
                    self.match(s_cypherParser.SP)


                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 869
            self.s_ComparisonWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ComparisonWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_StringListNullPredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_StringListNullPredicateWhereExpressionContext,0)


        def s_PartialComparisonWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PartialComparisonWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PartialComparisonWhereExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ComparisonWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ComparisonWhereExpression" ):
                listener.enterS_ComparisonWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ComparisonWhereExpression" ):
                listener.exitS_ComparisonWhereExpression(self)




    def s_ComparisonWhereExpression(self):

        localctx = s_cypherParser.S_ComparisonWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_s_ComparisonWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.s_StringListNullPredicateWhereExpression()
            self.state = 878
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 873
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 872
                        self.match(s_cypherParser.SP)


                    self.state = 875
                    self.s_PartialComparisonWhereExpression() 
                self.state = 880
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PartialComparisonWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_operator(self):
            return self.getTypedRuleContext(s_cypherParser.S_operatorContext,0)


        def s_StringListNullPredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_StringListNullPredicateWhereExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PartialComparisonWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PartialComparisonWhereExpression" ):
                listener.enterS_PartialComparisonWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PartialComparisonWhereExpression" ):
                listener.exitS_PartialComparisonWhereExpression(self)




    def s_PartialComparisonWhereExpression(self):

        localctx = s_cypherParser.S_PartialComparisonWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_s_PartialComparisonWhereExpression)
        self._la = 0 # Token type
        try:
            self.state = 917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 881
                self.s_operator()
                self.state = 883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 882
                    self.match(s_cypherParser.SP)


                self.state = 885
                self.s_StringListNullPredicateWhereExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 887
                self.s_operator()
                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 888
                    self.match(s_cypherParser.SP)


                self.state = 891
                self.s_StringListNullPredicateWhereExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 893
                self.s_operator()
                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 894
                    self.match(s_cypherParser.SP)


                self.state = 897
                self.s_StringListNullPredicateWhereExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 899
                self.s_operator()
                self.state = 901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 900
                    self.match(s_cypherParser.SP)


                self.state = 903
                self.s_StringListNullPredicateWhereExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 905
                self.s_operator()
                self.state = 907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 906
                    self.match(s_cypherParser.SP)


                self.state = 909
                self.s_StringListNullPredicateWhereExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 911
                self.s_operator()
                self.state = 913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 912
                    self.match(s_cypherParser.SP)


                self.state = 915
                self.s_StringListNullPredicateWhereExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StringListNullPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def s_TimePredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateWhereExpressionContext,0)


        def s_StringPredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_StringPredicateWhereExpressionContext,0)


        def s_ListPredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_ListPredicateWhereExpressionContext,0)


        def s_NullPredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_NullPredicateWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StringListNullPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StringListNullPredicateWhereExpression" ):
                listener.enterS_StringListNullPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StringListNullPredicateWhereExpression" ):
                listener.exitS_StringListNullPredicateWhereExpression(self)




    def s_StringListNullPredicateWhereExpression(self):

        localctx = s_cypherParser.S_StringListNullPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_s_StringListNullPredicateWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self.s_AddOrSubtractWhereExpression()
            self.state = 924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 920
                self.s_TimePredicateWhereExpression()

            elif la_ == 2:
                self.state = 921
                self.s_StringPredicateWhereExpression()

            elif la_ == 3:
                self.state = 922
                self.s_ListPredicateWhereExpression()

            elif la_ == 4:
                self.state = 923
                self.s_NullPredicateWhereExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AddOrSubtractWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_MultiplyDivideModuloWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MultiplyDivideModuloWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MultiplyDivideModuloWhereExpressionContext,i)


        def s_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_operatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_operatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AddOrSubtractWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AddOrSubtractWhereExpression" ):
                listener.enterS_AddOrSubtractWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AddOrSubtractWhereExpression" ):
                listener.exitS_AddOrSubtractWhereExpression(self)




    def s_AddOrSubtractWhereExpression(self):

        localctx = s_cypherParser.S_AddOrSubtractWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_s_AddOrSubtractWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 926
            self.s_MultiplyDivideModuloWhereExpression()
            self.state = 947
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,136,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 945
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                    if la_ == 1:
                        self.state = 928
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 927
                            self.match(s_cypherParser.SP)


                        self.state = 930
                        self.s_operator()
                        self.state = 932
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 931
                            self.match(s_cypherParser.SP)


                        self.state = 934
                        self.s_MultiplyDivideModuloWhereExpression()
                        pass

                    elif la_ == 2:
                        self.state = 937
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 936
                            self.match(s_cypherParser.SP)


                        self.state = 939
                        self.s_operator()
                        self.state = 941
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 940
                            self.match(s_cypherParser.SP)


                        self.state = 943
                        self.s_MultiplyDivideModuloWhereExpression()
                        pass

             
                self.state = 949
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateWhereExpression" ):
                listener.enterS_TimePredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateWhereExpression" ):
                listener.exitS_TimePredicateWhereExpression(self)




    def s_TimePredicateWhereExpression(self):

        localctx = s_cypherParser.S_TimePredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_s_TimePredicateWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self.match(s_cypherParser.SP)
            self.state = 951
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 952
            self.match(s_cypherParser.SP)
            self.state = 953
            self.s_AddOrSubtractWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StringPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StringPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StringPredicateWhereExpression" ):
                listener.enterS_StringPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StringPredicateWhereExpression" ):
                listener.exitS_StringPredicateWhereExpression(self)




    def s_StringPredicateWhereExpression(self):

        localctx = s_cypherParser.S_StringPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_s_StringPredicateWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 955
                self.match(s_cypherParser.SP)
                self.state = 956
                self.match(s_cypherParser.STARTS)
                self.state = 957
                self.match(s_cypherParser.SP)
                self.state = 958
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 959
                self.match(s_cypherParser.SP)
                self.state = 960
                self.match(s_cypherParser.ENDS)
                self.state = 961
                self.match(s_cypherParser.SP)
                self.state = 962
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 963
                self.match(s_cypherParser.SP)
                self.state = 964
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 967
                self.match(s_cypherParser.SP)


            self.state = 970
            self.s_AddOrSubtractWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ListPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ListPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ListPredicateWhereExpression" ):
                listener.enterS_ListPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ListPredicateWhereExpression" ):
                listener.exitS_ListPredicateWhereExpression(self)




    def s_ListPredicateWhereExpression(self):

        localctx = s_cypherParser.S_ListPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_s_ListPredicateWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self.match(s_cypherParser.SP)
            self.state = 973
            self.match(s_cypherParser.IN)
            self.state = 975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 974
                self.match(s_cypherParser.SP)


            self.state = 977
            self.s_AddOrSubtractWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_NullPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_NullPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_NullPredicateWhereExpression" ):
                listener.enterS_NullPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_NullPredicateWhereExpression" ):
                listener.exitS_NullPredicateWhereExpression(self)




    def s_NullPredicateWhereExpression(self):

        localctx = s_cypherParser.S_NullPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_s_NullPredicateWhereExpression)
        try:
            self.state = 989
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 979
                self.match(s_cypherParser.SP)
                self.state = 980
                self.match(s_cypherParser.IS)
                self.state = 981
                self.match(s_cypherParser.SP)
                self.state = 982
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 983
                self.match(s_cypherParser.SP)
                self.state = 984
                self.match(s_cypherParser.IS)
                self.state = 985
                self.match(s_cypherParser.SP)
                self.state = 986
                self.match(s_cypherParser.NOT)
                self.state = 987
                self.match(s_cypherParser.SP)
                self.state = 988
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MultiplyDivideModuloWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PowerOfWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PowerOfWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PowerOfWhereExpressionContext,i)


        def s_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_operatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_operatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MultiplyDivideModuloWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MultiplyDivideModuloWhereExpression" ):
                listener.enterS_MultiplyDivideModuloWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MultiplyDivideModuloWhereExpression" ):
                listener.exitS_MultiplyDivideModuloWhereExpression(self)




    def s_MultiplyDivideModuloWhereExpression(self):

        localctx = s_cypherParser.S_MultiplyDivideModuloWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_s_MultiplyDivideModuloWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.s_PowerOfWhereExpression()
            self.state = 1021
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,148,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1019
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
                    if la_ == 1:
                        self.state = 993
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 992
                            self.match(s_cypherParser.SP)


                        self.state = 995
                        self.s_operator()
                        self.state = 997
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 996
                            self.match(s_cypherParser.SP)


                        self.state = 999
                        self.s_PowerOfWhereExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1002
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1001
                            self.match(s_cypherParser.SP)


                        self.state = 1004
                        self.s_operator()
                        self.state = 1006
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1005
                            self.match(s_cypherParser.SP)


                        self.state = 1008
                        self.s_PowerOfWhereExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1011
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1010
                            self.match(s_cypherParser.SP)


                        self.state = 1013
                        self.s_operator()
                        self.state = 1015
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1014
                            self.match(s_cypherParser.SP)


                        self.state = 1017
                        self.s_PowerOfWhereExpression()
                        pass

             
                self.state = 1023
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PowerOfWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_UnaryAddOrSubtractWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_UnaryAddOrSubtractWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_UnaryAddOrSubtractWhereExpressionContext,i)


        def s_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_operatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_operatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PowerOfWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PowerOfWhereExpression" ):
                listener.enterS_PowerOfWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PowerOfWhereExpression" ):
                listener.exitS_PowerOfWhereExpression(self)




    def s_PowerOfWhereExpression(self):

        localctx = s_cypherParser.S_PowerOfWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_s_PowerOfWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1024
            self.s_UnaryAddOrSubtractWhereExpression()
            self.state = 1036
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1026
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1025
                        self.match(s_cypherParser.SP)


                    self.state = 1028
                    self.s_operator()
                    self.state = 1030
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1029
                        self.match(s_cypherParser.SP)


                    self.state = 1032
                    self.s_UnaryAddOrSubtractWhereExpression() 
                self.state = 1038
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_UnaryAddOrSubtractWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_ListOperatorWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_ListOperatorWhereExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_UnaryAddOrSubtractWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_UnaryAddOrSubtractWhereExpression" ):
                listener.enterS_UnaryAddOrSubtractWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_UnaryAddOrSubtractWhereExpression" ):
                listener.exitS_UnaryAddOrSubtractWhereExpression(self)




    def s_UnaryAddOrSubtractWhereExpression(self):

        localctx = s_cypherParser.S_UnaryAddOrSubtractWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_s_UnaryAddOrSubtractWhereExpression)
        self._la = 0 # Token type
        try:
            self.state = 1045
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 7, 10, 26, 48, 57, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1039
                self.s_ListOperatorWhereExpression()
                pass
            elif token in [13, 14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1040
                _la = self._input.LA(1)
                if not(_la==13 or _la==14):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1041
                    self.match(s_cypherParser.SP)


                self.state = 1044
                self.s_ListOperatorWhereExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ListOperatorWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertyOrLabelsWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyOrLabelsWhereExpressionContext,0)


        def s_AtTWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTWhereExpressionContext,0)


        def s_SingleIndexWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_SingleIndexWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_SingleIndexWhereExpressionContext,i)


        def s_DoubleIndexWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DoubleIndexWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DoubleIndexWhereExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ListOperatorWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ListOperatorWhereExpression" ):
                listener.enterS_ListOperatorWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ListOperatorWhereExpression" ):
                listener.exitS_ListOperatorWhereExpression(self)




    def s_ListOperatorWhereExpression(self):

        localctx = s_cypherParser.S_ListOperatorWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_s_ListOperatorWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 1047
                self.s_PropertyOrLabelsWhereExpression()
                pass

            elif la_ == 2:
                self.state = 1048
                self.s_AtTWhereExpression()
                pass


            self.state = 1055
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1053
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                    if la_ == 1:
                        self.state = 1051
                        self.s_SingleIndexWhereExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1052
                        self.s_DoubleIndexWhereExpression()
                        pass

             
                self.state = 1057
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyOrLabelsWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyOrLabelsWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyOrLabelsWhereExpression" ):
                listener.enterS_PropertyOrLabelsWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyOrLabelsWhereExpression" ):
                listener.exitS_PropertyOrLabelsWhereExpression(self)




    def s_PropertyOrLabelsWhereExpression(self):

        localctx = s_cypherParser.S_PropertyOrLabelsWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_s_PropertyOrLabelsWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            self.oC_Atom()
            self.state = 1065
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,158,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1060
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1059
                        self.match(s_cypherParser.SP)


                    self.state = 1062
                    self.oC_PropertyLookup() 
                self.state = 1067
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,158,self._ctx)

            self.state = 1072
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 1069
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1068
                    self.match(s_cypherParser.SP)


                self.state = 1071
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def s_PropertyLookupTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupTimeContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTWhereExpression" ):
                listener.enterS_AtTWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTWhereExpression" ):
                listener.exitS_AtTWhereExpression(self)




    def s_AtTWhereExpression(self):

        localctx = s_cypherParser.S_AtTWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_s_AtTWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            self.oC_Atom()
            self.state = 1089
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.state = 1079 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1076
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1075
                            self.match(s_cypherParser.SP)


                        self.state = 1078
                        self.oC_PropertyLookup()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1081 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

                self.state = 1087
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                if la_ == 1:
                    self.state = 1084
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1083
                        self.match(s_cypherParser.SP)


                    self.state = 1086
                    self.match(s_cypherParser.PoundValue)




            self.state = 1092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1091
                self.match(s_cypherParser.SP)


            self.state = 1094
            self.s_PropertyLookupTime()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SingleIndexWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_LeftWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftWhereExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SingleIndexWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SingleIndexWhereExpression" ):
                listener.enterS_SingleIndexWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SingleIndexWhereExpression" ):
                listener.exitS_SingleIndexWhereExpression(self)




    def s_SingleIndexWhereExpression(self):

        localctx = s_cypherParser.S_SingleIndexWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_s_SingleIndexWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1096
                self.match(s_cypherParser.SP)


            self.state = 1099
            self.match(s_cypherParser.T__9)
            self.state = 1100
            self.s_LeftWhereExpression()
            self.state = 1101
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DoubleIndexWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def s_LeftWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftWhereExpressionContext,0)


        def s_RightWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_RightWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DoubleIndexWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DoubleIndexWhereExpression" ):
                listener.enterS_DoubleIndexWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DoubleIndexWhereExpression" ):
                listener.exitS_DoubleIndexWhereExpression(self)




    def s_DoubleIndexWhereExpression(self):

        localctx = s_cypherParser.S_DoubleIndexWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_s_DoubleIndexWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1103
                self.match(s_cypherParser.SP)


            self.state = 1106
            self.match(s_cypherParser.T__9)
            self.state = 1108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119701152) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1107
                self.s_LeftWhereExpression()


            self.state = 1110
            self.match(s_cypherParser.T__11)
            self.state = 1112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119701152) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1111
                self.s_RightWhereExpression()


            self.state = 1114
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_LeftWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_LeftWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_LeftWhereExpression" ):
                listener.enterS_LeftWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_LeftWhereExpression" ):
                listener.exitS_LeftWhereExpression(self)




    def s_LeftWhereExpression(self):

        localctx = s_cypherParser.S_LeftWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_s_LeftWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_RightWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_RightWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_RightWhereExpression" ):
                listener.enterS_RightWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_RightWhereExpression" ):
                listener.exitS_RightWhereExpression(self)




    def s_RightWhereExpression(self):

        localctx = s_cypherParser.S_RightWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_s_RightWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1118
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePointLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePointLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePointLiteral" ):
                listener.enterS_TimePointLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePointLiteral" ):
                listener.exitS_TimePointLiteral(self)




    def s_TimePointLiteral(self):

        localctx = s_cypherParser.S_TimePointLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_s_TimePointLiteral)
        try:
            self.state = 1122
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1120
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1121
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(s_cypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(s_cypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(s_cypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(s_cypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(s_cypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = s_cypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1124
            _la = self._input.LA(1)
            if not(_la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(s_cypherParser.AND, 0)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def OR(self):
            return self.getToken(s_cypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(s_cypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(s_cypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(s_cypherParser.DO, 0)

        def FOR(self):
            return self.getToken(s_cypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(s_cypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(s_cypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(s_cypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(s_cypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(s_cypherParser.OF, 0)

        def ADD(self):
            return self.getToken(s_cypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(s_cypherParser.DROP, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = s_cypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1126
            _la = self._input.LA(1)
            if not(((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 128317405001678847) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(s_cypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = s_cypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1128
                self.match(s_cypherParser.SP)


            self.state = 1131
            self.oC_Statement()
            self.state = 1136
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1133
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1132
                    self.match(s_cypherParser.SP)


                self.state = 1135
                self.match(s_cypherParser.T__14)


            self.state = 1139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1138
                self.match(s_cypherParser.SP)


            self.state = 1141
            self.match(s_cypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = s_cypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = s_cypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1145
            self.oC_SingleQuery()
            self.state = 1152
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,177,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1147
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1146
                        self.match(s_cypherParser.SP)


                    self.state = 1149
                    self.oC_Union() 
                self.state = 1154
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,177,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = s_cypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 1167
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1155
                self.match(s_cypherParser.UNION)
                self.state = 1156
                self.match(s_cypherParser.SP)
                self.state = 1157
                self.match(s_cypherParser.ALL)
                self.state = 1159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1158
                    self.match(s_cypherParser.SP)


                self.state = 1161
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1162
                self.match(s_cypherParser.UNION)
                self.state = 1164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1163
                    self.match(s_cypherParser.SP)


                self.state = 1166
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = s_cypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_oC_SingleQuery)
        try:
            self.state = 1171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1169
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1170
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = s_cypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 1208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 1173
                    self.oC_ReadingClause()
                    self.state = 1175
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1174
                        self.match(s_cypherParser.SP)


                    self.state = 1181
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1182
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1189
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 1183
                    self.oC_ReadingClause()
                    self.state = 1185
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1184
                        self.match(s_cypherParser.SP)


                    self.state = 1191
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1192
                self.oC_UpdatingClause()
                self.state = 1199
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1194
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1193
                            self.match(s_cypherParser.SP)


                        self.state = 1196
                        self.oC_UpdatingClause() 
                    self.state = 1201
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

                self.state = 1206
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
                if la_ == 1:
                    self.state = 1203
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1202
                        self.match(s_cypherParser.SP)


                    self.state = 1205
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def s_WithPartQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_WithPartQueryContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_WithPartQueryContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = s_cypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_oC_MultiPartQuery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1210
                    self.s_WithPartQuery()

                else:
                    raise NoViableAltException(self)
                self.state = 1213 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,191,self._ctx)

            self.state = 1215
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_With(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WithContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_WithPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_WithPartQuery" ):
                listener.enterS_WithPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_WithPartQuery" ):
                listener.exitS_WithPartQuery(self)




    def s_WithPartQuery(self):

        localctx = s_cypherParser.S_WithPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_s_WithPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                self.state = 1217
                self.oC_ReadingClause()
                self.state = 1219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1218
                    self.match(s_cypherParser.SP)


                self.state = 1225
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64001) != 0):
                self.state = 1226
                self.oC_UpdatingClause()
                self.state = 1228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1227
                    self.match(s_cypherParser.SP)


                self.state = 1234
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1235
            self.oC_With()
            self.state = 1237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1236
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(s_cypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = s_cypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_oC_ReadingClause)
        try:
            self.state = 1242
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1239
                self.oC_Match()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1240
                self.oC_Unwind()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1241
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = s_cypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1244
            self.match(s_cypherParser.UNWIND)
            self.state = 1246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1245
                self.match(s_cypherParser.SP)


            self.state = 1248
            self.oC_Expression()
            self.state = 1249
            self.match(s_cypherParser.SP)
            self.state = 1250
            self.match(s_cypherParser.AS)
            self.state = 1251
            self.match(s_cypherParser.SP)
            self.state = 1252
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = s_cypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1254
            self.match(s_cypherParser.MERGE)
            self.state = 1256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1255
                self.match(s_cypherParser.SP)


            self.state = 1258
            self.oC_PatternPart()
            self.state = 1263
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,200,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1259
                    self.match(s_cypherParser.SP)
                    self.state = 1260
                    self.oC_MergeAction() 
                self.state = 1265
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,200,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = s_cypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_MergeAction)
        try:
            self.state = 1276
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1266
                self.match(s_cypherParser.ON)
                self.state = 1267
                self.match(s_cypherParser.SP)
                self.state = 1268
                self.match(s_cypherParser.MATCH)
                self.state = 1269
                self.match(s_cypherParser.SP)
                self.state = 1270
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1271
                self.match(s_cypherParser.ON)
                self.state = 1272
                self.match(s_cypherParser.SP)
                self.state = 1273
                self.match(s_cypherParser.CREATE)
                self.state = 1274
                self.match(s_cypherParser.SP)
                self.state = 1275
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = s_cypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self.match(s_cypherParser.CREATE)
            self.state = 1280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1279
                self.match(s_cypherParser.SP)


            self.state = 1282
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = s_cypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1284
            self.match(s_cypherParser.SET)
            self.state = 1286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1285
                self.match(s_cypherParser.SP)


            self.state = 1288
            self.oC_SetItem()
            self.state = 1299
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,206,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1290
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1289
                        self.match(s_cypherParser.SP)


                    self.state = 1292
                    self.match(s_cypherParser.T__3)
                    self.state = 1294
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1293
                        self.match(s_cypherParser.SP)


                    self.state = 1296
                    self.oC_SetItem() 
                self.state = 1301
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = s_cypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1302
            self.match(s_cypherParser.REMOVE)
            self.state = 1303
            self.match(s_cypherParser.SP)
            self.state = 1304
            self.oC_RemoveItem()
            self.state = 1315
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,209,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1306
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1305
                        self.match(s_cypherParser.SP)


                    self.state = 1308
                    self.match(s_cypherParser.T__3)
                    self.state = 1310
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1309
                        self.match(s_cypherParser.SP)


                    self.state = 1312
                    self.oC_RemoveItem() 
                self.state = 1317
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,209,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = s_cypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_RemoveItem)
        try:
            self.state = 1322
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1318
                self.oC_Variable()
                self.state = 1319
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1321
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = s_cypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1324
            self.match(s_cypherParser.CALL)
            self.state = 1325
            self.match(s_cypherParser.SP)
            self.state = 1326
            self.oC_ExplicitProcedureInvocation()
            self.state = 1333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.state = 1328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1327
                    self.match(s_cypherParser.SP)


                self.state = 1330
                self.match(s_cypherParser.YIELD)
                self.state = 1331
                self.match(s_cypherParser.SP)
                self.state = 1332
                self.oC_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = s_cypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_StandaloneCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1335
            self.match(s_cypherParser.CALL)
            self.state = 1336
            self.match(s_cypherParser.SP)
            self.state = 1339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.state = 1337
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 1338
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 1350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.state = 1342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1341
                    self.match(s_cypherParser.SP)


                self.state = 1344
                self.match(s_cypherParser.YIELD)
                self.state = 1345
                self.match(s_cypherParser.SP)
                self.state = 1348
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [16]:
                    self.state = 1346
                    self.match(s_cypherParser.T__15)
                    pass
                elif token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                    self.state = 1347
                    self.oC_YieldItems()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = s_cypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1352
            self.oC_YieldItem()
            self.state = 1363
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,219,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1354
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1353
                        self.match(s_cypherParser.SP)


                    self.state = 1356
                    self.match(s_cypherParser.T__3)
                    self.state = 1358
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1357
                        self.match(s_cypherParser.SP)


                    self.state = 1360
                    self.oC_YieldItem() 
                self.state = 1365
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,219,self._ctx)

            self.state = 1370
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.state = 1367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1366
                    self.match(s_cypherParser.SP)


                self.state = 1369
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = s_cypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1372
            self.oC_ProcedureResultField()
            self.state = 1377
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.state = 1373
                self.match(s_cypherParser.SP)
                self.state = 1374
                self.match(s_cypherParser.AS)
                self.state = 1375
                self.match(s_cypherParser.SP)
                self.state = 1376
                self.oC_Variable()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = s_cypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1379
            self.match(s_cypherParser.WITH)
            self.state = 1380
            self.oC_ProjectionBody()
            self.state = 1385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.state = 1382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1381
                    self.match(s_cypherParser.SP)


                self.state = 1384
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = s_cypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1387
            self.match(s_cypherParser.RETURN)
            self.state = 1388
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)




    def oC_ProjectionBody(self):

        localctx = s_cypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1394
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.state = 1391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1390
                    self.match(s_cypherParser.SP)


                self.state = 1393
                self.match(s_cypherParser.DISTINCT)


            self.state = 1396
            self.match(s_cypherParser.SP)
            self.state = 1397
            self.oC_ProjectionItems()
            self.state = 1400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
            if la_ == 1:
                self.state = 1398
                self.match(s_cypherParser.SP)
                self.state = 1399
                self.oC_Order()


            self.state = 1404
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.state = 1402
                self.match(s_cypherParser.SP)
                self.state = 1403
                self.oC_Skip()


            self.state = 1408
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.state = 1406
                self.match(s_cypherParser.SP)
                self.state = 1407
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)




    def oC_ProjectionItems(self):

        localctx = s_cypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 1438
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1410
                self.match(s_cypherParser.T__15)
                self.state = 1421
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,232,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1412
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1411
                            self.match(s_cypherParser.SP)


                        self.state = 1414
                        self.match(s_cypherParser.T__3)
                        self.state = 1416
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1415
                            self.match(s_cypherParser.SP)


                        self.state = 1418
                        self.oC_ProjectionItem() 
                    self.state = 1423
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

                pass
            elif token in [5, 7, 10, 13, 14, 26, 48, 57, 86, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1424
                self.oC_ProjectionItem()
                self.state = 1435
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,235,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1426
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1425
                            self.match(s_cypherParser.SP)


                        self.state = 1428
                        self.match(s_cypherParser.T__3)
                        self.state = 1430
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1429
                            self.match(s_cypherParser.SP)


                        self.state = 1432
                        self.oC_ProjectionItem() 
                    self.state = 1437
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,235,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)




    def oC_ProjectionItem(self):

        localctx = s_cypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_ProjectionItem)
        try:
            self.state = 1447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1440
                self.oC_Expression()
                self.state = 1441
                self.match(s_cypherParser.SP)
                self.state = 1442
                self.match(s_cypherParser.AS)
                self.state = 1443
                self.match(s_cypherParser.SP)
                self.state = 1444
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1446
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = s_cypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1449
            self.match(s_cypherParser.ORDER)
            self.state = 1450
            self.match(s_cypherParser.SP)
            self.state = 1451
            self.match(s_cypherParser.BY)
            self.state = 1452
            self.match(s_cypherParser.SP)
            self.state = 1453
            self.oC_SortItem()
            self.state = 1461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1454
                self.match(s_cypherParser.T__3)
                self.state = 1456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1455
                    self.match(s_cypherParser.SP)


                self.state = 1458
                self.oC_SortItem()
                self.state = 1463
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = s_cypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1464
            self.match(s_cypherParser.L_SKIP)
            self.state = 1465
            self.match(s_cypherParser.SP)
            self.state = 1466
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = s_cypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1468
            self.match(s_cypherParser.LIMIT)
            self.state = 1469
            self.match(s_cypherParser.SP)
            self.state = 1470
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = s_cypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1472
            self.oC_Expression()
            self.state = 1477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.state = 1474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1473
                    self.match(s_cypherParser.SP)


                self.state = 1476
                _la = self._input.LA(1)
                if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = s_cypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1479
            self.match(s_cypherParser.WHERE)
            self.state = 1480
            self.match(s_cypherParser.SP)
            self.state = 1481
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = s_cypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1483
            self.oC_PatternPart()
            self.state = 1494
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,244,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1485
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1484
                        self.match(s_cypherParser.SP)


                    self.state = 1487
                    self.match(s_cypherParser.T__3)
                    self.state = 1489
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1488
                        self.match(s_cypherParser.SP)


                    self.state = 1491
                    self.oC_PatternPart() 
                self.state = 1496
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,244,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = s_cypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1497
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = s_cypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 1513
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1499
                self.oC_NodePattern()
                self.state = 1506
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,246,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1501
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1500
                            self.match(s_cypherParser.SP)


                        self.state = 1503
                        self.oC_PatternElementChain() 
                    self.state = 1508
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,246,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1509
                self.match(s_cypherParser.T__4)
                self.state = 1510
                self.oC_PatternElement()
                self.state = 1511
                self.match(s_cypherParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = s_cypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1515
            self.oC_NodePattern()
            self.state = 1520 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1517
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1516
                        self.match(s_cypherParser.SP)


                    self.state = 1519
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 1522 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,249,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = s_cypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1524
            self.oC_RelationshipPattern()
            self.state = 1526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1525
                self.match(s_cypherParser.SP)


            self.state = 1528
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = s_cypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 1594
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1530
                self.oC_LeftArrowHead()
                self.state = 1532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1531
                    self.match(s_cypherParser.SP)


                self.state = 1534
                self.oC_Dash()
                self.state = 1536
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
                if la_ == 1:
                    self.state = 1535
                    self.match(s_cypherParser.SP)


                self.state = 1539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1538
                    self.oC_RelationshipDetail()


                self.state = 1542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1541
                    self.match(s_cypherParser.SP)


                self.state = 1544
                self.oC_Dash()
                self.state = 1546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1545
                    self.match(s_cypherParser.SP)


                self.state = 1548
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1550
                self.oC_LeftArrowHead()
                self.state = 1552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1551
                    self.match(s_cypherParser.SP)


                self.state = 1554
                self.oC_Dash()
                self.state = 1556
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
                if la_ == 1:
                    self.state = 1555
                    self.match(s_cypherParser.SP)


                self.state = 1559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1558
                    self.oC_RelationshipDetail()


                self.state = 1562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1561
                    self.match(s_cypherParser.SP)


                self.state = 1564
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1566
                self.oC_Dash()
                self.state = 1568
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
                if la_ == 1:
                    self.state = 1567
                    self.match(s_cypherParser.SP)


                self.state = 1571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1570
                    self.oC_RelationshipDetail()


                self.state = 1574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1573
                    self.match(s_cypherParser.SP)


                self.state = 1576
                self.oC_Dash()
                self.state = 1578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1577
                    self.match(s_cypherParser.SP)


                self.state = 1580
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1582
                self.oC_Dash()
                self.state = 1584
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                if la_ == 1:
                    self.state = 1583
                    self.match(s_cypherParser.SP)


                self.state = 1587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1586
                    self.oC_RelationshipDetail()


                self.state = 1590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1589
                    self.match(s_cypherParser.SP)


                self.state = 1592
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = s_cypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_Properties)
        try:
            self.state = 1598
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1596
                self.oC_MapLiteral()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1597
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = s_cypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1600
            self.match(s_cypherParser.T__7)
            self.state = 1602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1601
                self.match(s_cypherParser.SP)


            self.state = 1604
            self.oC_RelTypeName()
            self.state = 1618
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,273,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1606
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1605
                        self.match(s_cypherParser.SP)


                    self.state = 1608
                    self.match(s_cypherParser.T__16)
                    self.state = 1610
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==8:
                        self.state = 1609
                        self.match(s_cypherParser.T__7)


                    self.state = 1613
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1612
                        self.match(s_cypherParser.SP)


                    self.state = 1615
                    self.oC_RelTypeName() 
                self.state = 1620
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,273,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = s_cypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1621
            self.oC_NodeLabel()
            self.state = 1628
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,275,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1623
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1622
                        self.match(s_cypherParser.SP)


                    self.state = 1625
                    self.oC_NodeLabel() 
                self.state = 1630
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,275,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = s_cypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1631
            self.match(s_cypherParser.T__7)
            self.state = 1633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1632
                self.match(s_cypherParser.SP)


            self.state = 1635
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = s_cypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1637
            self.match(s_cypherParser.T__15)
            self.state = 1639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1638
                self.match(s_cypherParser.SP)


            self.state = 1645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                self.state = 1641
                self.oC_IntegerLiteral()
                self.state = 1643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1642
                    self.match(s_cypherParser.SP)




            self.state = 1657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 1647
                self.match(s_cypherParser.T__11)
                self.state = 1649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1648
                    self.match(s_cypherParser.SP)


                self.state = 1655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                    self.state = 1651
                    self.oC_IntegerLiteral()
                    self.state = 1653
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1652
                        self.match(s_cypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = s_cypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1659
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = s_cypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1661
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = s_cypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1663
            self.oC_Atom()
            self.state = 1668 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1665
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1664
                        self.match(s_cypherParser.SP)


                    self.state = 1667
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 1670 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,285,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = s_cypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1672
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = s_cypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1674
            self.oC_XorExpression()
            self.state = 1681
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,286,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1675
                    self.match(s_cypherParser.SP)
                    self.state = 1676
                    self.match(s_cypherParser.OR)
                    self.state = 1677
                    self.match(s_cypherParser.SP)
                    self.state = 1678
                    self.oC_XorExpression() 
                self.state = 1683
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,286,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = s_cypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1684
            self.oC_AndExpression()
            self.state = 1691
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,287,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1685
                    self.match(s_cypherParser.SP)
                    self.state = 1686
                    self.match(s_cypherParser.XOR)
                    self.state = 1687
                    self.match(s_cypherParser.SP)
                    self.state = 1688
                    self.oC_AndExpression() 
                self.state = 1693
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,287,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = s_cypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1694
            self.oC_NotExpression()
            self.state = 1701
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,288,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1695
                    self.match(s_cypherParser.SP)
                    self.state = 1696
                    self.match(s_cypherParser.AND)
                    self.state = 1697
                    self.match(s_cypherParser.SP)
                    self.state = 1698
                    self.oC_NotExpression() 
                self.state = 1703
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,288,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = s_cypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1704
                self.match(s_cypherParser.NOT)
                self.state = 1706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1705
                    self.match(s_cypherParser.SP)


                self.state = 1712
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1713
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def oC_PartialComparisonExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PartialComparisonExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PartialComparisonExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = s_cypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1715
            self.oC_StringListNullPredicateExpression()
            self.state = 1722
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,292,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1717
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1716
                        self.match(s_cypherParser.SP)


                    self.state = 1719
                    self.oC_PartialComparisonExpression() 
                self.state = 1724
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,292,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PartialComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_operator(self):
            return self.getTypedRuleContext(s_cypherParser.S_operatorContext,0)


        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PartialComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PartialComparisonExpression" ):
                listener.enterOC_PartialComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PartialComparisonExpression" ):
                listener.exitOC_PartialComparisonExpression(self)




    def oC_PartialComparisonExpression(self):

        localctx = s_cypherParser.OC_PartialComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_oC_PartialComparisonExpression)
        self._la = 0 # Token type
        try:
            self.state = 1761
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1725
                self.s_operator()
                self.state = 1727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1726
                    self.match(s_cypherParser.SP)


                self.state = 1729
                self.oC_StringListNullPredicateExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1731
                self.s_operator()
                self.state = 1733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1732
                    self.match(s_cypherParser.SP)


                self.state = 1735
                self.oC_StringListNullPredicateExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1737
                self.s_operator()
                self.state = 1739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1738
                    self.match(s_cypherParser.SP)


                self.state = 1741
                self.oC_StringListNullPredicateExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1743
                self.s_operator()
                self.state = 1745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1744
                    self.match(s_cypherParser.SP)


                self.state = 1747
                self.oC_StringListNullPredicateExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1749
                self.s_operator()
                self.state = 1751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1750
                    self.match(s_cypherParser.SP)


                self.state = 1753
                self.oC_StringListNullPredicateExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1755
                self.s_operator()
                self.state = 1757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1756
                    self.match(s_cypherParser.SP)


                self.state = 1759
                self.oC_StringListNullPredicateExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringPredicateExpression" ):
                listener.enterOC_StringPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringPredicateExpression" ):
                listener.exitOC_StringPredicateExpression(self)




    def oC_StringPredicateExpression(self):

        localctx = s_cypherParser.OC_StringPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_oC_StringPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
            if la_ == 1:
                self.state = 1763
                self.match(s_cypherParser.SP)
                self.state = 1764
                self.match(s_cypherParser.STARTS)
                self.state = 1765
                self.match(s_cypherParser.SP)
                self.state = 1766
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1767
                self.match(s_cypherParser.SP)
                self.state = 1768
                self.match(s_cypherParser.ENDS)
                self.state = 1769
                self.match(s_cypherParser.SP)
                self.state = 1770
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1771
                self.match(s_cypherParser.SP)
                self.state = 1772
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 1776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1775
                self.match(s_cypherParser.SP)


            self.state = 1778
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListPredicateExpression" ):
                listener.enterOC_ListPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListPredicateExpression" ):
                listener.exitOC_ListPredicateExpression(self)




    def oC_ListPredicateExpression(self):

        localctx = s_cypherParser.OC_ListPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_oC_ListPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1780
            self.match(s_cypherParser.SP)
            self.state = 1781
            self.match(s_cypherParser.IN)
            self.state = 1783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1782
                self.match(s_cypherParser.SP)


            self.state = 1785
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullPredicateExpression" ):
                listener.enterOC_NullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullPredicateExpression" ):
                listener.exitOC_NullPredicateExpression(self)




    def oC_NullPredicateExpression(self):

        localctx = s_cypherParser.OC_NullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_oC_NullPredicateExpression)
        try:
            self.state = 1797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1787
                self.match(s_cypherParser.SP)
                self.state = 1788
                self.match(s_cypherParser.IS)
                self.state = 1789
                self.match(s_cypherParser.SP)
                self.state = 1790
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1791
                self.match(s_cypherParser.SP)
                self.state = 1792
                self.match(s_cypherParser.IS)
                self.state = 1793
                self.match(s_cypherParser.SP)
                self.state = 1794
                self.match(s_cypherParser.NOT)
                self.state = 1795
                self.match(s_cypherParser.SP)
                self.state = 1796
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def s_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_operatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_operatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1799
            self.oC_MultiplyDivideModuloExpression()
            self.state = 1820
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,309,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1818
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
                    if la_ == 1:
                        self.state = 1801
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1800
                            self.match(s_cypherParser.SP)


                        self.state = 1803
                        self.s_operator()
                        self.state = 1805
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1804
                            self.match(s_cypherParser.SP)


                        self.state = 1807
                        self.oC_MultiplyDivideModuloExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1810
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1809
                            self.match(s_cypherParser.SP)


                        self.state = 1812
                        self.s_operator()
                        self.state = 1814
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1813
                            self.match(s_cypherParser.SP)


                        self.state = 1816
                        self.oC_MultiplyDivideModuloExpression()
                        pass

             
                self.state = 1822
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,309,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_operator" ):
                listener.enterS_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_operator" ):
                listener.exitS_operator(self)




    def s_operator(self):

        localctx = s_cypherParser.S_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_s_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1823
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 66936836) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PowerOfExpressionContext,i)


        def s_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_operatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_operatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = s_cypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1825
            self.oC_PowerOfExpression()
            self.state = 1855
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,317,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1853
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
                    if la_ == 1:
                        self.state = 1827
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1826
                            self.match(s_cypherParser.SP)


                        self.state = 1829
                        self.s_operator()
                        self.state = 1831
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1830
                            self.match(s_cypherParser.SP)


                        self.state = 1833
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1836
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1835
                            self.match(s_cypherParser.SP)


                        self.state = 1838
                        self.s_operator()
                        self.state = 1840
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1839
                            self.match(s_cypherParser.SP)


                        self.state = 1842
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1845
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1844
                            self.match(s_cypherParser.SP)


                        self.state = 1847
                        self.s_operator()
                        self.state = 1849
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1848
                            self.match(s_cypherParser.SP)


                        self.state = 1851
                        self.oC_PowerOfExpression()
                        pass

             
                self.state = 1857
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,317,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def s_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_operatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_operatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = s_cypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1858
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 1870
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,320,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1860
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1859
                        self.match(s_cypherParser.SP)


                    self.state = 1862
                    self.s_operator()
                    self.state = 1864
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1863
                        self.match(s_cypherParser.SP)


                    self.state = 1866
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 1872
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,320,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ListOperatorExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListOperatorExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.state = 1879
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 7, 10, 26, 48, 57, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1873
                self.oC_ListOperatorExpression()
                pass
            elif token in [13, 14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1874
                _la = self._input.LA(1)
                if not(_la==13 or _la==14):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1875
                    self.match(s_cypherParser.SP)


                self.state = 1878
                self.oC_ListOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyOrLabelsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyOrLabelsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyOrLabelsExpression" ):
                listener.enterOC_PropertyOrLabelsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyOrLabelsExpression" ):
                listener.exitOC_PropertyOrLabelsExpression(self)




    def oC_PropertyOrLabelsExpression(self):

        localctx = s_cypherParser.OC_PropertyOrLabelsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_oC_PropertyOrLabelsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1881
            self.oC_Atom()
            self.state = 1888
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,324,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1883
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1882
                        self.match(s_cypherParser.SP)


                    self.state = 1885
                    self.oC_PropertyLookup() 
                self.state = 1890
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,324,self._ctx)

            self.state = 1895
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
            if la_ == 1:
                self.state = 1892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1891
                    self.match(s_cypherParser.SP)


                self.state = 1894
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = s_cypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1897
            self.match(s_cypherParser.T__0)
            self.state = 1899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1898
                self.match(s_cypherParser.SP)


            self.state = 1901
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternComprehensionContext,0)


        def oC_Quantifier(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QuantifierContext,0)


        def oC_PatternPredicate(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPredicateContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionInvocationContext,0)


        def oC_ExistentialSubquery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExistentialSubqueryContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = s_cypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 1927
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1903
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1904
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1905
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1906
                self.match(s_cypherParser.COUNT)
                self.state = 1908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1907
                    self.match(s_cypherParser.SP)


                self.state = 1910
                self.match(s_cypherParser.T__4)
                self.state = 1912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1911
                    self.match(s_cypherParser.SP)


                self.state = 1914
                self.match(s_cypherParser.T__15)
                self.state = 1916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1915
                    self.match(s_cypherParser.SP)


                self.state = 1918
                self.match(s_cypherParser.T__5)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1919
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1920
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1921
                self.oC_Quantifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1922
                self.oC_PatternPredicate()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1923
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1924
                self.oC_FunctionInvocation()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1925
                self.oC_ExistentialSubquery()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1926
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def oC_CaseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_CaseAlternativeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = s_cypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1951
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
            if la_ == 1:
                self.state = 1929
                self.match(s_cypherParser.CASE)
                self.state = 1934 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1931
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1930
                            self.match(s_cypherParser.SP)


                        self.state = 1933
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1936 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,333,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1938
                self.match(s_cypherParser.CASE)
                self.state = 1940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1939
                    self.match(s_cypherParser.SP)


                self.state = 1942
                self.oC_Expression()
                self.state = 1947 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1944
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1943
                            self.match(s_cypherParser.SP)


                        self.state = 1946
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1949 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,336,self._ctx)

                pass


            self.state = 1961
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                self.state = 1954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1953
                    self.match(s_cypherParser.SP)


                self.state = 1956
                self.match(s_cypherParser.ELSE)
                self.state = 1958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1957
                    self.match(s_cypherParser.SP)


                self.state = 1960
                self.oC_Expression()


            self.state = 1964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1963
                self.match(s_cypherParser.SP)


            self.state = 1966
            self.match(s_cypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternative" ):
                listener.enterOC_CaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternative" ):
                listener.exitOC_CaseAlternative(self)




    def oC_CaseAlternative(self):

        localctx = s_cypherParser.OC_CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_oC_CaseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1968
            self.match(s_cypherParser.WHEN)
            self.state = 1970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1969
                self.match(s_cypherParser.SP)


            self.state = 1972
            self.oC_Expression()
            self.state = 1974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1973
                self.match(s_cypherParser.SP)


            self.state = 1976
            self.match(s_cypherParser.THEN)
            self.state = 1978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1977
                self.match(s_cypherParser.SP)


            self.state = 1980
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = s_cypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1982
            self.match(s_cypherParser.T__9)
            self.state = 1984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1983
                self.match(s_cypherParser.SP)


            self.state = 1986
            self.oC_FilterExpression()
            self.state = 1995
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
            if la_ == 1:
                self.state = 1988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1987
                    self.match(s_cypherParser.SP)


                self.state = 1990
                self.match(s_cypherParser.T__16)
                self.state = 1992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1991
                    self.match(s_cypherParser.SP)


                self.state = 1994
                self.oC_Expression()


            self.state = 1998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1997
                self.match(s_cypherParser.SP)


            self.state = 2000
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = s_cypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2002
            self.match(s_cypherParser.T__9)
            self.state = 2004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2003
                self.match(s_cypherParser.SP)


            self.state = 2014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 2006
                self.oC_Variable()
                self.state = 2008
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2007
                    self.match(s_cypherParser.SP)


                self.state = 2010
                self.match(s_cypherParser.T__1)
                self.state = 2012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2011
                    self.match(s_cypherParser.SP)




            self.state = 2016
            self.oC_RelationshipsPattern()
            self.state = 2018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2017
                self.match(s_cypherParser.SP)


            self.state = 2024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 2020
                self.oC_Where()
                self.state = 2022
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2021
                    self.match(s_cypherParser.SP)




            self.state = 2026
            self.match(s_cypherParser.T__16)
            self.state = 2028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2027
                self.match(s_cypherParser.SP)


            self.state = 2030
            self.oC_Expression()
            self.state = 2032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2031
                self.match(s_cypherParser.SP)


            self.state = 2034
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Quantifier" ):
                listener.enterOC_Quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Quantifier" ):
                listener.exitOC_Quantifier(self)




    def oC_Quantifier(self):

        localctx = s_cypherParser.OC_QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_oC_Quantifier)
        self._la = 0 # Token type
        try:
            self.state = 2092
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2036
                self.match(s_cypherParser.ALL)
                self.state = 2038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2037
                    self.match(s_cypherParser.SP)


                self.state = 2040
                self.match(s_cypherParser.T__4)
                self.state = 2042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2041
                    self.match(s_cypherParser.SP)


                self.state = 2044
                self.oC_FilterExpression()
                self.state = 2046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2045
                    self.match(s_cypherParser.SP)


                self.state = 2048
                self.match(s_cypherParser.T__5)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2050
                self.match(s_cypherParser.ANY)
                self.state = 2052
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2051
                    self.match(s_cypherParser.SP)


                self.state = 2054
                self.match(s_cypherParser.T__4)
                self.state = 2056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2055
                    self.match(s_cypherParser.SP)


                self.state = 2058
                self.oC_FilterExpression()
                self.state = 2060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2059
                    self.match(s_cypherParser.SP)


                self.state = 2062
                self.match(s_cypherParser.T__5)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2064
                self.match(s_cypherParser.NONE)
                self.state = 2066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2065
                    self.match(s_cypherParser.SP)


                self.state = 2068
                self.match(s_cypherParser.T__4)
                self.state = 2070
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2069
                    self.match(s_cypherParser.SP)


                self.state = 2072
                self.oC_FilterExpression()
                self.state = 2074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2073
                    self.match(s_cypherParser.SP)


                self.state = 2076
                self.match(s_cypherParser.T__5)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2078
                self.match(s_cypherParser.SINGLE)
                self.state = 2080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2079
                    self.match(s_cypherParser.SP)


                self.state = 2082
                self.match(s_cypherParser.T__4)
                self.state = 2084
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2083
                    self.match(s_cypherParser.SP)


                self.state = 2086
                self.oC_FilterExpression()
                self.state = 2088
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2087
                    self.match(s_cypherParser.SP)


                self.state = 2090
                self.match(s_cypherParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IdInCollContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = s_cypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2094
            self.oC_IdInColl()
            self.state = 2099
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
            if la_ == 1:
                self.state = 2096
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2095
                    self.match(s_cypherParser.SP)


                self.state = 2098
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPredicate" ):
                listener.enterOC_PatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPredicate" ):
                listener.exitOC_PatternPredicate(self)




    def oC_PatternPredicate(self):

        localctx = s_cypherParser.OC_PatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_oC_PatternPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2101
            self.oC_RelationshipsPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = s_cypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2103
            self.match(s_cypherParser.T__4)
            self.state = 2105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2104
                self.match(s_cypherParser.SP)


            self.state = 2107
            self.oC_Expression()
            self.state = 2109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2108
                self.match(s_cypherParser.SP)


            self.state = 2111
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = s_cypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2113
            self.oC_Variable()
            self.state = 2114
            self.match(s_cypherParser.SP)
            self.state = 2115
            self.match(s_cypherParser.IN)
            self.state = 2116
            self.match(s_cypherParser.SP)
            self.state = 2117
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = s_cypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2119
            self.oC_FunctionName()
            self.state = 2121
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2120
                self.match(s_cypherParser.SP)


            self.state = 2123
            self.match(s_cypherParser.T__4)
            self.state = 2125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2124
                self.match(s_cypherParser.SP)


            self.state = 2131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 2127
                self.match(s_cypherParser.DISTINCT)
                self.state = 2129
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2128
                    self.match(s_cypherParser.SP)




            self.state = 2150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119701152) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 2133
                self.oC_Expression()
                self.state = 2135
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2134
                    self.match(s_cypherParser.SP)


                self.state = 2147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2137
                    self.match(s_cypherParser.T__3)
                    self.state = 2139
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2138
                        self.match(s_cypherParser.SP)


                    self.state = 2141
                    self.oC_Expression()
                    self.state = 2143
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2142
                        self.match(s_cypherParser.SP)


                    self.state = 2149
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2152
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = s_cypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_oC_FunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2154
            self.oC_Namespace()
            self.state = 2155
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExistentialSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExistentialSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExistentialSubquery" ):
                listener.enterOC_ExistentialSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExistentialSubquery" ):
                listener.exitOC_ExistentialSubquery(self)




    def oC_ExistentialSubquery(self):

        localctx = s_cypherParser.OC_ExistentialSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_oC_ExistentialSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2157
            self.match(s_cypherParser.EXISTS)
            self.state = 2159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2158
                self.match(s_cypherParser.SP)


            self.state = 2161
            self.match(s_cypherParser.T__6)
            self.state = 2163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2162
                self.match(s_cypherParser.SP)


            self.state = 2173
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 71, 72]:
                self.state = 2165
                self.oC_RegularQuery()
                pass
            elif token in [5, 48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 2166
                self.oC_Pattern()
                self.state = 2171
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,388,self._ctx)
                if la_ == 1:
                    self.state = 2168
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2167
                        self.match(s_cypherParser.SP)


                    self.state = 2170
                    self.oC_Where()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 2176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2175
                self.match(s_cypherParser.SP)


            self.state = 2178
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2180
            self.oC_ProcedureName()
            self.state = 2182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2181
                self.match(s_cypherParser.SP)


            self.state = 2184
            self.match(s_cypherParser.T__4)
            self.state = 2186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2185
                self.match(s_cypherParser.SP)


            self.state = 2205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119701152) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 2188
                self.oC_Expression()
                self.state = 2190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2189
                    self.match(s_cypherParser.SP)


                self.state = 2202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2192
                    self.match(s_cypherParser.T__3)
                    self.state = 2194
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2193
                        self.match(s_cypherParser.SP)


                    self.state = 2196
                    self.oC_Expression()
                    self.state = 2198
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2197
                        self.match(s_cypherParser.SP)


                    self.state = 2204
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2207
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2209
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = s_cypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2211
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = s_cypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2213
            self.oC_Namespace()
            self.state = 2214
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = s_cypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2221
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,398,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2216
                    self.oC_SymbolicName()
                    self.state = 2217
                    self.match(s_cypherParser.T__0) 
                self.state = 2223
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,398,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = s_cypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2224
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_ListLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListLiteralContext,0)


        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = s_cypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_oC_Literal)
        try:
            self.state = 2232
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2226
                self.oC_BooleanLiteral()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2227
                self.match(s_cypherParser.NULL)
                pass
            elif token in [105, 106, 107, 115, 116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2228
                self.oC_NumberLiteral()
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2229
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2230
                self.oC_ListLiteral()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2231
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = s_cypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2234
            _la = self._input.LA(1)
            if not(_la==103 or _la==104):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = s_cypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_oC_NumberLiteral)
        try:
            self.state = 2238
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115, 116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2236
                self.oC_DoubleLiteral()
                pass
            elif token in [105, 106, 107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2237
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(s_cypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(s_cypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = s_cypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2240
            _la = self._input.LA(1)
            if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(s_cypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(s_cypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = s_cypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2242
            _la = self._input.LA(1)
            if not(_la==115 or _la==116):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = s_cypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2244
            self.match(s_cypherParser.T__9)
            self.state = 2246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2245
                self.match(s_cypherParser.SP)


            self.state = 2265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119701152) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 2248
                self.oC_Expression()
                self.state = 2250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2249
                    self.match(s_cypherParser.SP)


                self.state = 2262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2252
                    self.match(s_cypherParser.T__3)
                    self.state = 2254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2253
                        self.match(s_cypherParser.SP)


                    self.state = 2256
                    self.oC_Expression()
                    self.state = 2258
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2257
                        self.match(s_cypherParser.SP)


                    self.state = 2264
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2267
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_MapKeyValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MapKeyValueContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MapKeyValueContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = s_cypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2269
            self.match(s_cypherParser.T__6)
            self.state = 2271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2270
                self.match(s_cypherParser.SP)


            self.state = 2284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 2273
                self.s_MapKeyValue()
                self.state = 2281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2274
                    self.match(s_cypherParser.T__3)
                    self.state = 2276
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2275
                        self.match(s_cypherParser.SP)


                    self.state = 2278
                    self.s_MapKeyValue()
                    self.state = 2283
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2286
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MapKeyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MapKeyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MapKeyValue" ):
                listener.enterS_MapKeyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MapKeyValue" ):
                listener.exitS_MapKeyValue(self)




    def s_MapKeyValue(self):

        localctx = s_cypherParser.S_MapKeyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_s_MapKeyValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2288
            self.oC_PropertyKeyName()
            self.state = 2290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2289
                self.match(s_cypherParser.SP)


            self.state = 2292
            self.match(s_cypherParser.T__7)
            self.state = 2294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2293
                self.match(s_cypherParser.SP)


            self.state = 2296
            self.oC_Expression()
            self.state = 2298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2297
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = s_cypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2300
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = s_cypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2302
            self.match(s_cypherParser.T__25)
            self.state = 2305
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 2303
                self.oC_SymbolicName()
                pass
            elif token in [106]:
                self.state = 2304
                self.match(s_cypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = s_cypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_oC_SchemaName)
        try:
            self.state = 2309
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2307
                self.oC_SymbolicName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2308
                self.oC_ReservedWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = s_cypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2311
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2017460224) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = s_cypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2313
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32229031936) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = s_cypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2315
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70334384455680) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





