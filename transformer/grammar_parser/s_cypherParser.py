# Generated from .\s_cypher.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,137,2325,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,1,0,1,0,1,0,3,0,338,8,0,1,1,1,1,3,
        1,342,8,1,1,1,1,1,3,1,346,8,1,1,1,1,1,3,1,350,8,1,1,1,1,1,3,1,354,
        8,1,3,1,356,8,1,1,1,3,1,359,8,1,1,1,3,1,362,8,1,1,2,1,2,1,2,1,2,
        1,2,1,2,3,2,370,8,2,1,2,3,2,373,8,2,1,2,3,2,376,8,2,1,3,1,3,3,3,
        380,8,3,1,3,1,3,1,3,1,3,3,3,386,8,3,1,3,3,3,389,8,3,1,3,1,3,1,3,
        1,3,1,3,3,3,396,8,3,1,3,3,3,399,8,3,1,3,1,3,1,3,3,3,404,8,3,1,3,
        1,3,1,3,1,3,3,3,410,8,3,1,3,3,3,413,8,3,1,3,1,3,1,3,3,3,418,8,3,
        1,3,1,3,3,3,422,8,3,1,3,1,3,1,3,1,3,3,3,428,8,3,1,3,1,3,3,3,432,
        8,3,1,3,1,3,1,3,1,3,3,3,438,8,3,1,3,1,3,3,3,442,8,3,1,3,1,3,1,3,
        1,3,3,3,448,8,3,1,3,1,3,3,3,452,8,3,1,3,1,3,1,3,1,3,3,3,458,8,3,
        1,3,1,3,3,3,462,8,3,1,4,1,4,3,4,466,8,4,1,4,1,4,1,5,1,5,3,5,472,
        8,5,1,5,3,5,475,8,5,1,6,1,6,3,6,479,8,6,1,6,1,6,1,7,1,7,3,7,485,
        8,7,1,7,3,7,488,8,7,1,8,1,8,3,8,492,8,8,1,8,1,8,3,8,496,8,8,1,8,
        1,8,3,8,500,8,8,1,8,5,8,503,8,8,10,8,12,8,506,9,8,1,9,1,9,1,9,1,
        9,3,9,512,8,9,1,9,1,9,1,9,3,9,517,8,9,1,10,1,10,3,10,521,8,10,1,
        10,1,10,3,10,525,8,10,1,10,1,10,3,10,529,8,10,1,10,1,10,3,10,533,
        8,10,1,10,5,10,536,8,10,10,10,12,10,539,9,10,1,11,1,11,1,11,1,11,
        3,11,545,8,11,1,11,1,11,1,11,3,11,550,8,11,1,12,1,12,3,12,554,8,
        12,1,12,1,12,1,13,1,13,3,13,560,8,13,1,13,1,13,1,14,1,14,3,14,566,
        8,14,1,15,1,15,1,15,1,15,3,15,572,8,15,1,15,1,15,1,15,3,15,577,8,
        15,1,16,1,16,1,16,1,16,3,16,583,8,16,1,16,3,16,586,8,16,1,16,1,16,
        1,16,1,16,3,16,592,8,16,3,16,594,8,16,1,17,1,17,3,17,598,8,17,1,
        17,1,17,3,17,602,8,17,1,17,5,17,605,8,17,10,17,12,17,608,9,17,1,
        17,3,17,611,8,17,1,17,3,17,614,8,17,1,18,1,18,1,18,1,18,1,18,3,18,
        621,8,18,1,19,1,19,3,19,625,8,19,5,19,627,8,19,10,19,12,19,630,9,
        19,1,19,1,19,3,19,634,8,19,5,19,636,8,19,10,19,12,19,639,9,19,1,
        19,1,19,3,19,643,8,19,1,20,1,20,1,20,3,20,648,8,20,1,20,3,20,651,
        8,20,1,21,1,21,3,21,655,8,21,1,21,1,21,3,21,659,8,21,1,21,1,21,1,
        21,3,21,664,8,21,1,21,3,21,667,8,21,3,21,669,8,21,1,21,3,21,672,
        8,21,1,21,1,21,1,22,1,22,3,22,678,8,22,1,22,3,22,681,8,22,1,23,1,
        23,3,23,685,8,23,1,23,1,23,1,24,1,24,3,24,691,8,24,1,24,1,24,1,25,
        1,25,3,25,697,8,25,1,25,1,25,3,25,701,8,25,1,25,1,25,1,25,1,25,3,
        25,707,8,25,1,25,1,25,3,25,711,8,25,1,25,1,25,1,25,3,25,716,8,25,
        1,26,1,26,3,26,720,8,26,1,26,1,26,3,26,724,8,26,1,26,1,26,3,26,728,
        8,26,1,26,1,26,1,27,1,27,3,27,734,8,27,1,27,1,27,3,27,738,8,27,1,
        27,1,27,1,28,1,28,3,28,744,8,28,1,28,1,28,3,28,748,8,28,3,28,750,
        8,28,1,28,1,28,3,28,754,8,28,3,28,756,8,28,1,28,1,28,3,28,760,8,
        28,3,28,762,8,28,1,28,1,28,3,28,766,8,28,3,28,768,8,28,1,28,1,28,
        1,29,1,29,3,29,774,8,29,1,30,1,30,3,30,778,8,30,1,30,1,30,1,30,1,
        30,1,30,3,30,785,8,30,1,30,1,30,1,30,1,30,5,30,791,8,30,10,30,12,
        30,794,9,30,3,30,796,8,30,1,30,1,30,1,31,1,31,3,31,802,8,31,1,31,
        1,31,3,31,806,8,31,3,31,808,8,31,1,32,3,32,811,8,32,1,32,1,32,3,
        32,815,8,32,1,32,1,32,3,32,819,8,32,3,32,821,8,32,1,33,1,33,3,33,
        825,8,33,1,33,1,33,3,33,829,8,33,3,33,831,8,33,1,33,1,33,3,33,835,
        8,33,3,33,837,8,33,1,33,3,33,840,8,33,1,33,1,33,3,33,844,8,33,3,
        33,846,8,33,1,33,1,33,3,33,850,8,33,3,33,852,8,33,1,33,1,33,1,34,
        1,34,1,34,1,34,1,34,3,34,861,8,34,1,35,1,35,3,35,865,8,35,1,35,1,
        35,5,35,869,8,35,10,35,12,35,872,9,35,1,36,3,36,875,8,36,1,36,1,
        36,1,36,1,36,1,37,3,37,882,8,37,1,37,1,37,3,37,886,8,37,1,37,1,37,
        3,37,890,8,37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,3,40,900,8,
        40,1,40,4,40,903,8,40,11,40,12,40,904,1,40,3,40,908,8,40,1,40,3,
        40,911,8,40,3,40,913,8,40,1,40,3,40,916,8,40,1,40,1,40,1,41,1,41,
        3,41,922,8,41,1,41,5,41,925,8,41,10,41,12,41,928,9,41,1,42,1,42,
        1,42,1,42,1,42,1,43,1,43,3,43,937,8,43,1,43,1,43,3,43,941,8,43,1,
        43,1,43,3,43,945,8,43,1,43,1,43,3,43,949,8,43,1,43,1,43,3,43,953,
        8,43,1,43,3,43,956,8,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,
        1,46,1,46,1,46,1,46,1,46,5,46,971,8,46,10,46,12,46,974,9,46,1,47,
        1,47,1,47,1,47,1,47,5,47,981,8,47,10,47,12,47,984,9,47,1,48,1,48,
        1,48,1,48,1,48,5,48,991,8,48,10,48,12,48,994,9,48,1,49,1,49,3,49,
        998,8,49,5,49,1000,8,49,10,49,12,49,1003,9,49,1,49,1,49,1,50,1,50,
        3,50,1009,8,50,1,50,1,50,3,50,1013,8,50,1,50,1,50,5,50,1017,8,50,
        10,50,12,50,1020,9,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,
        55,1,55,1,55,1,55,1,55,3,55,1035,8,55,1,56,1,56,3,56,1039,8,56,1,
        56,1,56,3,56,1043,8,56,1,56,1,56,1,56,3,56,1048,8,56,1,56,1,56,3,
        56,1052,8,56,1,56,1,56,5,56,1056,8,56,10,56,12,56,1059,9,56,1,57,
        1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
        1,58,3,58,1076,8,58,1,58,3,58,1079,8,58,1,58,1,58,1,59,1,59,1,59,
        3,59,1086,8,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
        1,60,1,60,3,60,1100,8,60,1,61,1,61,3,61,1104,8,61,1,61,1,61,3,61,
        1108,8,61,1,61,1,61,1,61,3,61,1113,8,61,1,61,1,61,3,61,1117,8,61,
        1,61,1,61,1,61,3,61,1122,8,61,1,61,1,61,3,61,1126,8,61,1,61,1,61,
        5,61,1130,8,61,10,61,12,61,1133,9,61,1,62,1,62,3,62,1137,8,62,1,
        62,1,62,3,62,1141,8,62,1,62,1,62,5,62,1145,8,62,10,62,12,62,1148,
        9,62,1,63,1,63,1,63,3,63,1153,8,63,1,63,3,63,1156,8,63,1,64,1,64,
        3,64,1160,8,64,1,64,1,64,5,64,1164,8,64,10,64,12,64,1167,9,64,1,
        65,1,65,3,65,1171,8,65,1,65,5,65,1174,8,65,10,65,12,65,1177,9,65,
        1,65,3,65,1180,8,65,1,65,3,65,1183,8,65,1,66,1,66,3,66,1187,8,66,
        1,66,4,66,1190,8,66,11,66,12,66,1191,1,66,3,66,1195,8,66,1,66,3,
        66,1198,8,66,3,66,1200,8,66,1,66,3,66,1203,8,66,1,66,1,66,1,67,3,
        67,1208,8,67,1,67,1,67,1,67,1,67,1,68,3,68,1215,8,68,1,68,1,68,3,
        68,1219,8,68,1,68,1,68,3,68,1223,8,68,1,68,1,68,1,69,1,69,1,70,1,
        70,1,71,1,71,3,71,1233,8,71,1,72,1,72,1,73,1,73,1,74,3,74,1240,8,
        74,1,74,1,74,3,74,1244,8,74,1,74,3,74,1247,8,74,1,74,3,74,1250,8,
        74,1,74,1,74,1,75,1,75,1,76,1,76,3,76,1258,8,76,1,76,5,76,1261,8,
        76,10,76,12,76,1264,9,76,1,77,1,77,1,77,1,77,3,77,1270,8,77,1,77,
        1,77,1,77,3,77,1275,8,77,1,77,3,77,1278,8,77,1,78,1,78,3,78,1282,
        8,78,1,79,1,79,3,79,1286,8,79,5,79,1288,8,79,10,79,12,79,1291,9,
        79,1,79,1,79,1,79,3,79,1296,8,79,5,79,1298,8,79,10,79,12,79,1301,
        9,79,1,79,1,79,3,79,1305,8,79,1,79,5,79,1308,8,79,10,79,12,79,1311,
        9,79,1,79,3,79,1314,8,79,1,79,3,79,1317,8,79,3,79,1319,8,79,1,80,
        4,80,1322,8,80,11,80,12,80,1323,1,80,1,80,1,81,1,81,1,81,3,81,1331,
        8,81,1,82,1,82,3,82,1335,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,83,
        1,83,3,83,1345,8,83,1,83,1,83,1,83,5,83,1350,8,83,10,83,12,83,1353,
        9,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1365,
        8,84,1,85,1,85,3,85,1369,8,85,1,85,1,85,1,86,1,86,3,86,1375,8,86,
        1,86,1,86,3,86,1379,8,86,1,86,1,86,3,86,1383,8,86,1,86,5,86,1386,
        8,86,10,86,12,86,1389,9,86,1,87,1,87,1,87,1,87,3,87,1395,8,87,1,
        87,1,87,3,87,1399,8,87,1,87,5,87,1402,8,87,10,87,12,87,1405,9,87,
        1,88,1,88,1,88,1,88,3,88,1411,8,88,1,89,1,89,3,89,1415,8,89,1,89,
        1,89,3,89,1419,8,89,1,89,5,89,1422,8,89,10,89,12,89,1425,9,89,1,
        89,3,89,1428,8,89,1,89,3,89,1431,8,89,1,90,1,90,1,90,1,90,1,90,3,
        90,1438,8,90,1,91,1,91,1,91,3,91,1443,8,91,1,91,3,91,1446,8,91,1,
        92,1,92,1,92,1,93,3,93,1452,8,93,1,93,3,93,1455,8,93,1,93,1,93,1,
        93,1,93,3,93,1461,8,93,1,93,1,93,3,93,1465,8,93,1,93,1,93,3,93,1469,
        8,93,1,94,1,94,3,94,1473,8,94,1,94,1,94,3,94,1477,8,94,1,94,5,94,
        1480,8,94,10,94,12,94,1483,9,94,1,94,1,94,3,94,1487,8,94,1,94,1,
        94,3,94,1491,8,94,1,94,5,94,1494,8,94,10,94,12,94,1497,9,94,3,94,
        1499,8,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,1508,8,95,1,96,
        1,96,1,96,1,96,1,96,1,96,1,96,3,96,1517,8,96,1,96,5,96,1520,8,96,
        10,96,12,96,1523,9,96,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,
        99,1,99,3,99,1535,8,99,1,99,3,99,1538,8,99,1,100,1,100,1,100,1,100,
        1,101,1,101,3,101,1546,8,101,1,101,1,101,3,101,1550,8,101,1,101,
        5,101,1553,8,101,10,101,12,101,1556,9,101,1,102,1,102,1,103,1,103,
        3,103,1562,8,103,1,103,5,103,1565,8,103,10,103,12,103,1568,9,103,
        1,103,1,103,1,103,1,103,3,103,1574,8,103,1,104,1,104,3,104,1578,
        8,104,1,104,4,104,1581,8,104,11,104,12,104,1582,1,105,1,105,3,105,
        1587,8,105,1,105,1,105,1,106,1,106,3,106,1593,8,106,1,106,1,106,
        3,106,1597,8,106,1,106,3,106,1600,8,106,1,106,3,106,1603,8,106,1,
        106,1,106,3,106,1607,8,106,1,106,1,106,1,106,1,106,3,106,1613,8,
        106,1,106,1,106,3,106,1617,8,106,1,106,3,106,1620,8,106,1,106,3,
        106,1623,8,106,1,106,1,106,1,106,1,106,3,106,1629,8,106,1,106,3,
        106,1632,8,106,1,106,3,106,1635,8,106,1,106,1,106,3,106,1639,8,106,
        1,106,1,106,1,106,1,106,3,106,1645,8,106,1,106,3,106,1648,8,106,
        1,106,3,106,1651,8,106,1,106,1,106,3,106,1655,8,106,1,107,1,107,
        3,107,1659,8,107,1,108,1,108,3,108,1663,8,108,1,108,1,108,3,108,
        1667,8,108,1,108,1,108,3,108,1671,8,108,1,108,3,108,1674,8,108,1,
        108,5,108,1677,8,108,10,108,12,108,1680,9,108,1,109,1,109,3,109,
        1684,8,109,1,109,5,109,1687,8,109,10,109,12,109,1690,9,109,1,110,
        1,110,3,110,1694,8,110,1,110,1,110,1,111,1,111,3,111,1700,8,111,
        1,111,1,111,3,111,1704,8,111,3,111,1706,8,111,1,111,1,111,3,111,
        1710,8,111,1,111,1,111,3,111,1714,8,111,3,111,1716,8,111,3,111,1718,
        8,111,1,112,1,112,1,113,1,113,1,114,1,114,3,114,1726,8,114,1,114,
        4,114,1729,8,114,11,114,12,114,1730,1,115,1,115,1,116,1,116,1,116,
        1,116,1,116,5,116,1740,8,116,10,116,12,116,1743,9,116,1,117,1,117,
        1,117,1,117,1,117,5,117,1750,8,117,10,117,12,117,1753,9,117,1,118,
        1,118,1,118,1,118,1,118,5,118,1760,8,118,10,118,12,118,1763,9,118,
        1,119,1,119,3,119,1767,8,119,5,119,1769,8,119,10,119,12,119,1772,
        9,119,1,119,1,119,1,120,1,120,3,120,1778,8,120,1,120,1,120,3,120,
        1782,8,120,1,120,1,120,5,120,1786,8,120,10,120,12,120,1789,9,120,
        1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,3,121,
        1801,8,121,1,121,3,121,1804,8,121,1,121,1,121,1,122,1,122,1,122,
        3,122,1811,8,122,1,122,1,122,1,123,1,123,1,123,1,123,1,123,1,123,
        1,123,1,123,1,123,1,123,3,123,1825,8,123,1,124,1,124,3,124,1829,
        8,124,1,124,1,124,3,124,1833,8,124,1,124,1,124,1,124,3,124,1838,
        8,124,1,124,1,124,3,124,1842,8,124,1,124,1,124,5,124,1846,8,124,
        10,124,12,124,1849,9,124,1,125,1,125,1,126,1,126,1,127,1,127,1,128,
        1,128,1,129,1,129,3,129,1861,8,129,1,129,1,129,3,129,1865,8,129,
        1,129,1,129,1,129,3,129,1870,8,129,1,129,1,129,3,129,1874,8,129,
        1,129,1,129,1,129,3,129,1879,8,129,1,129,1,129,3,129,1883,8,129,
        1,129,1,129,5,129,1887,8,129,10,129,12,129,1890,9,129,1,130,1,130,
        3,130,1894,8,130,1,130,1,130,3,130,1898,8,130,1,130,1,130,5,130,
        1902,8,130,10,130,12,130,1905,9,130,1,131,1,131,1,131,3,131,1910,
        8,131,1,131,3,131,1913,8,131,1,132,1,132,3,132,1917,8,132,1,132,
        5,132,1920,8,132,10,132,12,132,1923,9,132,1,132,3,132,1926,8,132,
        1,132,3,132,1929,8,132,1,133,1,133,3,133,1933,8,133,1,133,1,133,
        1,134,1,134,1,134,1,134,1,134,3,134,1942,8,134,1,134,1,134,3,134,
        1946,8,134,1,134,1,134,3,134,1950,8,134,1,134,1,134,1,134,1,134,
        1,134,1,134,1,134,1,134,1,134,3,134,1961,8,134,1,135,1,135,3,135,
        1965,8,135,1,135,4,135,1968,8,135,11,135,12,135,1969,1,135,1,135,
        3,135,1974,8,135,1,135,1,135,3,135,1978,8,135,1,135,4,135,1981,8,
        135,11,135,12,135,1982,3,135,1985,8,135,1,135,3,135,1988,8,135,1,
        135,1,135,3,135,1992,8,135,1,135,3,135,1995,8,135,1,135,3,135,1998,
        8,135,1,135,1,135,1,136,1,136,3,136,2004,8,136,1,136,1,136,3,136,
        2008,8,136,1,136,1,136,3,136,2012,8,136,1,136,1,136,1,137,1,137,
        3,137,2018,8,137,1,137,1,137,3,137,2022,8,137,1,137,1,137,3,137,
        2026,8,137,1,137,3,137,2029,8,137,1,137,3,137,2032,8,137,1,137,1,
        137,1,138,1,138,3,138,2038,8,138,1,138,1,138,3,138,2042,8,138,1,
        138,1,138,3,138,2046,8,138,3,138,2048,8,138,1,138,1,138,3,138,2052,
        8,138,1,138,1,138,3,138,2056,8,138,3,138,2058,8,138,1,138,1,138,
        3,138,2062,8,138,1,138,1,138,3,138,2066,8,138,1,138,1,138,1,139,
        1,139,3,139,2072,8,139,1,139,1,139,3,139,2076,8,139,1,139,1,139,
        3,139,2080,8,139,1,139,1,139,1,139,1,139,3,139,2086,8,139,1,139,
        1,139,3,139,2090,8,139,1,139,1,139,3,139,2094,8,139,1,139,1,139,
        1,139,1,139,3,139,2100,8,139,1,139,1,139,3,139,2104,8,139,1,139,
        1,139,3,139,2108,8,139,1,139,1,139,1,139,1,139,3,139,2114,8,139,
        1,139,1,139,3,139,2118,8,139,1,139,1,139,3,139,2122,8,139,1,139,
        1,139,3,139,2126,8,139,1,140,1,140,1,141,1,141,3,141,2132,8,141,
        1,141,1,141,3,141,2136,8,141,1,141,1,141,1,142,1,142,1,142,1,142,
        1,142,1,142,1,143,1,143,3,143,2148,8,143,1,143,1,143,3,143,2152,
        8,143,1,143,1,143,3,143,2156,8,143,3,143,2158,8,143,1,143,1,143,
        3,143,2162,8,143,1,143,1,143,3,143,2166,8,143,1,143,1,143,3,143,
        2170,8,143,5,143,2172,8,143,10,143,12,143,2175,9,143,3,143,2177,
        8,143,1,143,1,143,1,144,1,144,1,145,1,145,1,145,1,146,1,146,3,146,
        2188,8,146,1,146,1,146,3,146,2192,8,146,1,146,1,146,3,146,2196,8,
        146,1,146,1,146,3,146,2200,8,146,1,146,1,146,3,146,2204,8,146,5,
        146,2206,8,146,10,146,12,146,2209,9,146,3,146,2211,8,146,1,146,1,
        146,1,147,1,147,1,148,1,148,1,149,1,149,1,149,1,150,1,150,1,150,
        5,150,2225,8,150,10,150,12,150,2228,9,150,1,151,1,151,1,152,1,152,
        1,152,1,152,1,152,1,152,3,152,2238,8,152,1,153,1,153,1,154,1,154,
        3,154,2244,8,154,1,155,1,155,1,156,1,156,1,157,1,157,3,157,2252,
        8,157,1,157,1,157,3,157,2256,8,157,1,157,1,157,3,157,2260,8,157,
        1,157,1,157,3,157,2264,8,157,5,157,2266,8,157,10,157,12,157,2269,
        9,157,3,157,2271,8,157,1,157,1,157,1,158,1,158,1,159,1,159,3,159,
        2279,8,159,1,159,1,159,1,159,3,159,2284,8,159,1,159,5,159,2287,8,
        159,10,159,12,159,2290,9,159,3,159,2292,8,159,1,159,1,159,1,160,
        1,160,3,160,2298,8,160,1,160,1,160,3,160,2302,8,160,1,160,1,160,
        3,160,2306,8,160,1,161,1,161,1,162,1,162,1,162,3,162,2313,8,162,
        1,163,1,163,3,163,2317,8,163,1,164,1,164,1,165,1,165,1,166,1,166,
        1,166,0,0,167,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
        152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
        184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
        216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
        248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,
        280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,
        312,314,316,318,320,322,324,326,328,330,332,0,13,1,0,54,55,2,0,5,
        5,14,15,1,0,17,18,2,0,2,2,19,23,6,0,48,48,93,93,99,101,108,108,129,
        131,134,134,5,0,48,68,71,92,94,98,102,104,119,128,1,0,78,81,1,0,
        103,104,1,0,105,107,1,0,115,116,2,0,20,20,27,30,2,0,22,22,31,34,
        2,0,18,18,35,45,2610,0,337,1,0,0,0,2,341,1,0,0,0,4,369,1,0,0,0,6,
        461,1,0,0,0,8,463,1,0,0,0,10,469,1,0,0,0,12,476,1,0,0,0,14,482,1,
        0,0,0,16,489,1,0,0,0,18,516,1,0,0,0,20,520,1,0,0,0,22,549,1,0,0,
        0,24,551,1,0,0,0,26,557,1,0,0,0,28,565,1,0,0,0,30,567,1,0,0,0,32,
        578,1,0,0,0,34,595,1,0,0,0,36,615,1,0,0,0,38,628,1,0,0,0,40,644,
        1,0,0,0,42,652,1,0,0,0,44,675,1,0,0,0,46,682,1,0,0,0,48,688,1,0,
        0,0,50,715,1,0,0,0,52,717,1,0,0,0,54,731,1,0,0,0,56,741,1,0,0,0,
        58,773,1,0,0,0,60,775,1,0,0,0,62,799,1,0,0,0,64,810,1,0,0,0,66,822,
        1,0,0,0,68,855,1,0,0,0,70,864,1,0,0,0,72,874,1,0,0,0,74,881,1,0,
        0,0,76,893,1,0,0,0,78,895,1,0,0,0,80,897,1,0,0,0,82,919,1,0,0,0,
        84,929,1,0,0,0,86,934,1,0,0,0,88,959,1,0,0,0,90,963,1,0,0,0,92,965,
        1,0,0,0,94,975,1,0,0,0,96,985,1,0,0,0,98,1001,1,0,0,0,100,1006,1,
        0,0,0,102,1021,1,0,0,0,104,1023,1,0,0,0,106,1025,1,0,0,0,108,1027,
        1,0,0,0,110,1029,1,0,0,0,112,1036,1,0,0,0,114,1060,1,0,0,0,116,1075,
        1,0,0,0,118,1082,1,0,0,0,120,1099,1,0,0,0,122,1101,1,0,0,0,124,1134,
        1,0,0,0,126,1155,1,0,0,0,128,1159,1,0,0,0,130,1168,1,0,0,0,132,1184,
        1,0,0,0,134,1207,1,0,0,0,136,1214,1,0,0,0,138,1226,1,0,0,0,140,1228,
        1,0,0,0,142,1232,1,0,0,0,144,1234,1,0,0,0,146,1236,1,0,0,0,148,1239,
        1,0,0,0,150,1253,1,0,0,0,152,1255,1,0,0,0,154,1277,1,0,0,0,156,1281,
        1,0,0,0,158,1318,1,0,0,0,160,1321,1,0,0,0,162,1330,1,0,0,0,164,1332,
        1,0,0,0,166,1342,1,0,0,0,168,1364,1,0,0,0,170,1366,1,0,0,0,172,1372,
        1,0,0,0,174,1390,1,0,0,0,176,1410,1,0,0,0,178,1412,1,0,0,0,180,1432,
        1,0,0,0,182,1439,1,0,0,0,184,1447,1,0,0,0,186,1454,1,0,0,0,188,1498,
        1,0,0,0,190,1507,1,0,0,0,192,1509,1,0,0,0,194,1524,1,0,0,0,196,1528,
        1,0,0,0,198,1532,1,0,0,0,200,1539,1,0,0,0,202,1543,1,0,0,0,204,1557,
        1,0,0,0,206,1573,1,0,0,0,208,1575,1,0,0,0,210,1584,1,0,0,0,212,1654,
        1,0,0,0,214,1658,1,0,0,0,216,1660,1,0,0,0,218,1681,1,0,0,0,220,1691,
        1,0,0,0,222,1697,1,0,0,0,224,1719,1,0,0,0,226,1721,1,0,0,0,228,1723,
        1,0,0,0,230,1732,1,0,0,0,232,1734,1,0,0,0,234,1744,1,0,0,0,236,1754,
        1,0,0,0,238,1770,1,0,0,0,240,1775,1,0,0,0,242,1800,1,0,0,0,244,1807,
        1,0,0,0,246,1824,1,0,0,0,248,1826,1,0,0,0,250,1850,1,0,0,0,252,1852,
        1,0,0,0,254,1854,1,0,0,0,256,1856,1,0,0,0,258,1858,1,0,0,0,260,1891,
        1,0,0,0,262,1912,1,0,0,0,264,1914,1,0,0,0,266,1930,1,0,0,0,268,1960,
        1,0,0,0,270,1984,1,0,0,0,272,2001,1,0,0,0,274,2015,1,0,0,0,276,2035,
        1,0,0,0,278,2125,1,0,0,0,280,2127,1,0,0,0,282,2129,1,0,0,0,284,2139,
        1,0,0,0,286,2145,1,0,0,0,288,2180,1,0,0,0,290,2182,1,0,0,0,292,2185,
        1,0,0,0,294,2214,1,0,0,0,296,2216,1,0,0,0,298,2218,1,0,0,0,300,2226,
        1,0,0,0,302,2229,1,0,0,0,304,2237,1,0,0,0,306,2239,1,0,0,0,308,2243,
        1,0,0,0,310,2245,1,0,0,0,312,2247,1,0,0,0,314,2249,1,0,0,0,316,2274,
        1,0,0,0,318,2276,1,0,0,0,320,2295,1,0,0,0,322,2307,1,0,0,0,324,2309,
        1,0,0,0,326,2316,1,0,0,0,328,2318,1,0,0,0,330,2320,1,0,0,0,332,2322,
        1,0,0,0,334,338,3,152,76,0,335,338,3,32,16,0,336,338,3,28,14,0,337,
        334,1,0,0,0,337,335,1,0,0,0,337,336,1,0,0,0,338,1,1,0,0,0,339,340,
        5,58,0,0,340,342,5,135,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,343,
        1,0,0,0,343,345,5,59,0,0,344,346,5,135,0,0,345,344,1,0,0,0,345,346,
        1,0,0,0,346,347,1,0,0,0,347,355,3,202,101,0,348,350,5,135,0,0,349,
        348,1,0,0,0,349,350,1,0,0,0,350,353,1,0,0,0,351,354,3,24,12,0,352,
        354,3,26,13,0,353,351,1,0,0,0,353,352,1,0,0,0,354,356,1,0,0,0,355,
        349,1,0,0,0,355,356,1,0,0,0,356,361,1,0,0,0,357,359,5,135,0,0,358,
        357,1,0,0,0,358,359,1,0,0,0,359,360,1,0,0,0,360,362,3,88,44,0,361,
        358,1,0,0,0,361,362,1,0,0,0,362,3,1,0,0,0,363,370,3,170,85,0,364,
        370,3,166,83,0,365,370,3,20,10,0,366,370,3,172,86,0,367,370,3,174,
        87,0,368,370,3,16,8,0,369,363,1,0,0,0,369,364,1,0,0,0,369,365,1,
        0,0,0,369,366,1,0,0,0,369,367,1,0,0,0,369,368,1,0,0,0,370,375,1,
        0,0,0,371,373,5,135,0,0,372,371,1,0,0,0,372,373,1,0,0,0,373,374,
        1,0,0,0,374,376,3,24,12,0,375,372,1,0,0,0,375,376,1,0,0,0,376,5,
        1,0,0,0,377,379,3,302,151,0,378,380,5,135,0,0,379,378,1,0,0,0,379,
        380,1,0,0,0,380,381,1,0,0,0,381,382,3,86,43,0,382,462,1,0,0,0,383,
        388,3,302,151,0,384,386,5,135,0,0,385,384,1,0,0,0,385,386,1,0,0,
        0,386,387,1,0,0,0,387,389,3,86,43,0,388,385,1,0,0,0,388,389,1,0,
        0,0,389,390,1,0,0,0,390,391,5,1,0,0,391,392,3,8,4,0,392,462,1,0,
        0,0,393,398,3,302,151,0,394,396,5,135,0,0,395,394,1,0,0,0,395,396,
        1,0,0,0,396,397,1,0,0,0,397,399,3,86,43,0,398,395,1,0,0,0,398,399,
        1,0,0,0,399,400,1,0,0,0,400,401,5,1,0,0,401,403,3,10,5,0,402,404,
        5,135,0,0,403,402,1,0,0,0,403,404,1,0,0,0,404,405,1,0,0,0,405,406,
        3,12,6,0,406,462,1,0,0,0,407,412,3,302,151,0,408,410,5,135,0,0,409,
        408,1,0,0,0,409,410,1,0,0,0,410,411,1,0,0,0,411,413,3,86,43,0,412,
        409,1,0,0,0,412,413,1,0,0,0,413,414,1,0,0,0,414,415,5,1,0,0,415,
        417,3,10,5,0,416,418,5,135,0,0,417,416,1,0,0,0,417,418,1,0,0,0,418,
        419,1,0,0,0,419,421,5,2,0,0,420,422,5,135,0,0,421,420,1,0,0,0,421,
        422,1,0,0,0,422,423,1,0,0,0,423,424,3,14,7,0,424,462,1,0,0,0,425,
        427,3,228,114,0,426,428,5,135,0,0,427,426,1,0,0,0,427,428,1,0,0,
        0,428,429,1,0,0,0,429,431,5,2,0,0,430,432,5,135,0,0,431,430,1,0,
        0,0,431,432,1,0,0,0,432,433,1,0,0,0,433,434,3,230,115,0,434,462,
        1,0,0,0,435,437,3,302,151,0,436,438,5,135,0,0,437,436,1,0,0,0,437,
        438,1,0,0,0,438,439,1,0,0,0,439,441,5,2,0,0,440,442,5,135,0,0,441,
        440,1,0,0,0,441,442,1,0,0,0,442,443,1,0,0,0,443,444,3,230,115,0,
        444,462,1,0,0,0,445,447,3,302,151,0,446,448,5,135,0,0,447,446,1,
        0,0,0,447,448,1,0,0,0,448,449,1,0,0,0,449,451,5,3,0,0,450,452,5,
        135,0,0,451,450,1,0,0,0,451,452,1,0,0,0,452,453,1,0,0,0,453,454,
        3,230,115,0,454,462,1,0,0,0,455,457,3,302,151,0,456,458,5,135,0,
        0,457,456,1,0,0,0,457,458,1,0,0,0,458,459,1,0,0,0,459,460,3,218,
        109,0,460,462,1,0,0,0,461,377,1,0,0,0,461,383,1,0,0,0,461,393,1,
        0,0,0,461,407,1,0,0,0,461,425,1,0,0,0,461,435,1,0,0,0,461,445,1,
        0,0,0,461,455,1,0,0,0,462,7,1,0,0,0,463,465,3,322,161,0,464,466,
        5,135,0,0,465,464,1,0,0,0,465,466,1,0,0,0,466,467,1,0,0,0,467,468,
        3,86,43,0,468,9,1,0,0,0,469,474,3,322,161,0,470,472,5,135,0,0,471,
        470,1,0,0,0,471,472,1,0,0,0,472,473,1,0,0,0,473,475,3,86,43,0,474,
        471,1,0,0,0,474,475,1,0,0,0,475,11,1,0,0,0,476,478,5,47,0,0,477,
        479,5,135,0,0,478,477,1,0,0,0,478,479,1,0,0,0,479,480,1,0,0,0,480,
        481,3,86,43,0,481,13,1,0,0,0,482,487,3,230,115,0,483,485,5,135,0,
        0,484,483,1,0,0,0,484,485,1,0,0,0,485,486,1,0,0,0,486,488,3,86,43,
        0,487,484,1,0,0,0,487,488,1,0,0,0,488,15,1,0,0,0,489,491,5,53,0,
        0,490,492,5,135,0,0,491,490,1,0,0,0,491,492,1,0,0,0,492,493,1,0,
        0,0,493,504,3,18,9,0,494,496,5,135,0,0,495,494,1,0,0,0,495,496,1,
        0,0,0,496,497,1,0,0,0,497,499,5,4,0,0,498,500,5,135,0,0,499,498,
        1,0,0,0,499,500,1,0,0,0,500,501,1,0,0,0,501,503,3,18,9,0,502,495,
        1,0,0,0,503,506,1,0,0,0,504,502,1,0,0,0,504,505,1,0,0,0,505,17,1,
        0,0,0,506,504,1,0,0,0,507,508,3,230,115,0,508,509,5,1,0,0,509,511,
        3,322,161,0,510,512,5,135,0,0,511,510,1,0,0,0,511,512,1,0,0,0,512,
        513,1,0,0,0,513,514,5,47,0,0,514,517,1,0,0,0,515,517,3,230,115,0,
        516,507,1,0,0,0,516,515,1,0,0,0,517,19,1,0,0,0,518,519,5,66,0,0,
        519,521,5,135,0,0,520,518,1,0,0,0,520,521,1,0,0,0,521,522,1,0,0,
        0,522,524,5,67,0,0,523,525,5,135,0,0,524,523,1,0,0,0,524,525,1,0,
        0,0,525,526,1,0,0,0,526,537,3,22,11,0,527,529,5,135,0,0,528,527,
        1,0,0,0,528,529,1,0,0,0,529,530,1,0,0,0,530,532,5,4,0,0,531,533,
        5,135,0,0,532,531,1,0,0,0,532,533,1,0,0,0,533,534,1,0,0,0,534,536,
        3,22,11,0,535,528,1,0,0,0,536,539,1,0,0,0,537,535,1,0,0,0,537,538,
        1,0,0,0,538,21,1,0,0,0,539,537,1,0,0,0,540,541,3,230,115,0,541,542,
        5,1,0,0,542,544,3,322,161,0,543,545,5,135,0,0,544,543,1,0,0,0,544,
        545,1,0,0,0,545,546,1,0,0,0,546,547,5,47,0,0,547,550,1,0,0,0,548,
        550,3,230,115,0,549,540,1,0,0,0,549,548,1,0,0,0,550,23,1,0,0,0,551,
        553,5,49,0,0,552,554,5,135,0,0,553,552,1,0,0,0,553,554,1,0,0,0,554,
        555,1,0,0,0,555,556,3,230,115,0,556,25,1,0,0,0,557,559,5,51,0,0,
        558,560,5,135,0,0,559,558,1,0,0,0,559,560,1,0,0,0,560,561,1,0,0,
        0,561,562,3,230,115,0,562,27,1,0,0,0,563,566,3,46,23,0,564,566,3,
        48,24,0,565,563,1,0,0,0,565,564,1,0,0,0,566,29,1,0,0,0,567,568,5,
        69,0,0,568,569,5,135,0,0,569,576,3,292,146,0,570,572,5,135,0,0,571,
        570,1,0,0,0,571,572,1,0,0,0,572,573,1,0,0,0,573,574,5,70,0,0,574,
        575,5,135,0,0,575,577,3,34,17,0,576,571,1,0,0,0,576,577,1,0,0,0,
        577,31,1,0,0,0,578,579,5,69,0,0,579,582,5,135,0,0,580,583,3,292,
        146,0,581,583,3,294,147,0,582,580,1,0,0,0,582,581,1,0,0,0,583,593,
        1,0,0,0,584,586,5,135,0,0,585,584,1,0,0,0,585,586,1,0,0,0,586,587,
        1,0,0,0,587,588,5,70,0,0,588,591,5,135,0,0,589,592,5,5,0,0,590,592,
        3,34,17,0,591,589,1,0,0,0,591,590,1,0,0,0,592,594,1,0,0,0,593,585,
        1,0,0,0,593,594,1,0,0,0,594,33,1,0,0,0,595,606,3,36,18,0,596,598,
        5,135,0,0,597,596,1,0,0,0,597,598,1,0,0,0,598,599,1,0,0,0,599,601,
        5,4,0,0,600,602,5,135,0,0,601,600,1,0,0,0,601,602,1,0,0,0,602,603,
        1,0,0,0,603,605,3,36,18,0,604,597,1,0,0,0,605,608,1,0,0,0,606,604,
        1,0,0,0,606,607,1,0,0,0,607,613,1,0,0,0,608,606,1,0,0,0,609,611,
        5,135,0,0,610,609,1,0,0,0,610,611,1,0,0,0,611,612,1,0,0,0,612,614,
        3,88,44,0,613,610,1,0,0,0,613,614,1,0,0,0,614,35,1,0,0,0,615,620,
        3,296,148,0,616,617,5,135,0,0,617,618,5,61,0,0,618,619,5,135,0,0,
        619,621,3,302,151,0,620,616,1,0,0,0,620,621,1,0,0,0,621,37,1,0,0,
        0,622,624,3,162,81,0,623,625,5,135,0,0,624,623,1,0,0,0,624,625,1,
        0,0,0,625,627,1,0,0,0,626,622,1,0,0,0,627,630,1,0,0,0,628,626,1,
        0,0,0,628,629,1,0,0,0,629,637,1,0,0,0,630,628,1,0,0,0,631,633,3,
        4,2,0,632,634,5,135,0,0,633,632,1,0,0,0,633,634,1,0,0,0,634,636,
        1,0,0,0,635,631,1,0,0,0,636,639,1,0,0,0,637,635,1,0,0,0,637,638,
        1,0,0,0,638,640,1,0,0,0,639,637,1,0,0,0,640,642,3,40,20,0,641,643,
        5,135,0,0,642,641,1,0,0,0,642,643,1,0,0,0,643,39,1,0,0,0,644,645,
        5,71,0,0,645,650,3,186,93,0,646,648,5,135,0,0,647,646,1,0,0,0,647,
        648,1,0,0,0,648,649,1,0,0,0,649,651,3,88,44,0,650,647,1,0,0,0,650,
        651,1,0,0,0,651,41,1,0,0,0,652,654,5,102,0,0,653,655,5,135,0,0,654,
        653,1,0,0,0,654,655,1,0,0,0,655,656,1,0,0,0,656,658,5,6,0,0,657,
        659,5,135,0,0,658,657,1,0,0,0,658,659,1,0,0,0,659,668,1,0,0,0,660,
        669,3,152,76,0,661,666,3,202,101,0,662,664,5,135,0,0,663,662,1,0,
        0,0,663,664,1,0,0,0,664,665,1,0,0,0,665,667,3,88,44,0,666,663,1,
        0,0,0,666,667,1,0,0,0,667,669,1,0,0,0,668,660,1,0,0,0,668,661,1,
        0,0,0,669,671,1,0,0,0,670,672,5,135,0,0,671,670,1,0,0,0,671,672,
        1,0,0,0,672,673,1,0,0,0,673,674,5,7,0,0,674,43,1,0,0,0,675,680,3,
        284,142,0,676,678,5,135,0,0,677,676,1,0,0,0,677,678,1,0,0,0,678,
        679,1,0,0,0,679,681,3,88,44,0,680,677,1,0,0,0,680,681,1,0,0,0,681,
        45,1,0,0,0,682,684,5,50,0,0,683,685,5,135,0,0,684,683,1,0,0,0,684,
        685,1,0,0,0,685,686,1,0,0,0,686,687,3,230,115,0,687,47,1,0,0,0,688,
        690,5,52,0,0,689,691,5,135,0,0,690,689,1,0,0,0,690,691,1,0,0,0,691,
        692,1,0,0,0,692,693,3,230,115,0,693,49,1,0,0,0,694,696,3,302,151,
        0,695,697,5,135,0,0,696,695,1,0,0,0,696,697,1,0,0,0,697,698,1,0,
        0,0,698,700,5,2,0,0,699,701,5,135,0,0,700,699,1,0,0,0,700,701,1,
        0,0,0,701,702,1,0,0,0,702,703,3,52,26,0,703,716,1,0,0,0,704,706,
        3,302,151,0,705,707,5,135,0,0,706,705,1,0,0,0,706,707,1,0,0,0,707,
        708,1,0,0,0,708,710,5,2,0,0,709,711,5,135,0,0,710,709,1,0,0,0,710,
        711,1,0,0,0,711,712,1,0,0,0,712,713,3,204,102,0,713,716,1,0,0,0,
        714,716,3,204,102,0,715,694,1,0,0,0,715,704,1,0,0,0,715,714,1,0,
        0,0,716,51,1,0,0,0,717,719,3,290,145,0,718,720,5,135,0,0,719,718,
        1,0,0,0,719,720,1,0,0,0,720,721,1,0,0,0,721,723,5,8,0,0,722,724,
        5,135,0,0,723,722,1,0,0,0,723,724,1,0,0,0,724,725,1,0,0,0,725,727,
        3,54,27,0,726,728,5,135,0,0,727,726,1,0,0,0,727,728,1,0,0,0,728,
        729,1,0,0,0,729,730,5,9,0,0,730,53,1,0,0,0,731,733,3,56,28,0,732,
        734,5,135,0,0,733,732,1,0,0,0,733,734,1,0,0,0,734,735,1,0,0,0,735,
        737,3,212,106,0,736,738,5,135,0,0,737,736,1,0,0,0,737,738,1,0,0,
        0,738,739,1,0,0,0,739,740,3,56,28,0,740,55,1,0,0,0,741,743,5,8,0,
        0,742,744,5,135,0,0,743,742,1,0,0,0,743,744,1,0,0,0,744,749,1,0,
        0,0,745,747,3,302,151,0,746,748,5,135,0,0,747,746,1,0,0,0,747,748,
        1,0,0,0,748,750,1,0,0,0,749,745,1,0,0,0,749,750,1,0,0,0,750,755,
        1,0,0,0,751,753,3,218,109,0,752,754,5,135,0,0,753,752,1,0,0,0,753,
        754,1,0,0,0,754,756,1,0,0,0,755,751,1,0,0,0,755,756,1,0,0,0,756,
        761,1,0,0,0,757,759,3,86,43,0,758,760,5,135,0,0,759,758,1,0,0,0,
        759,760,1,0,0,0,760,762,1,0,0,0,761,757,1,0,0,0,761,762,1,0,0,0,
        762,767,1,0,0,0,763,765,3,58,29,0,764,766,5,135,0,0,765,764,1,0,
        0,0,765,766,1,0,0,0,766,768,1,0,0,0,767,763,1,0,0,0,767,768,1,0,
        0,0,768,769,1,0,0,0,769,770,5,9,0,0,770,57,1,0,0,0,771,774,3,60,
        30,0,772,774,3,324,162,0,773,771,1,0,0,0,773,772,1,0,0,0,774,59,
        1,0,0,0,775,777,5,6,0,0,776,778,5,135,0,0,777,776,1,0,0,0,777,778,
        1,0,0,0,778,795,1,0,0,0,779,780,3,62,31,0,780,781,5,10,0,0,781,792,
        3,64,32,0,782,784,5,4,0,0,783,785,5,135,0,0,784,783,1,0,0,0,784,
        785,1,0,0,0,785,786,1,0,0,0,786,787,3,62,31,0,787,788,5,10,0,0,788,
        789,3,64,32,0,789,791,1,0,0,0,790,782,1,0,0,0,791,794,1,0,0,0,792,
        790,1,0,0,0,792,793,1,0,0,0,793,796,1,0,0,0,794,792,1,0,0,0,795,
        779,1,0,0,0,795,796,1,0,0,0,796,797,1,0,0,0,797,798,5,7,0,0,798,
        61,1,0,0,0,799,801,3,322,161,0,800,802,5,135,0,0,801,800,1,0,0,0,
        801,802,1,0,0,0,802,807,1,0,0,0,803,805,3,86,43,0,804,806,5,135,
        0,0,805,804,1,0,0,0,805,806,1,0,0,0,806,808,1,0,0,0,807,803,1,0,
        0,0,807,808,1,0,0,0,808,63,1,0,0,0,809,811,5,135,0,0,810,809,1,0,
        0,0,810,811,1,0,0,0,811,812,1,0,0,0,812,814,3,230,115,0,813,815,
        5,135,0,0,814,813,1,0,0,0,814,815,1,0,0,0,815,820,1,0,0,0,816,818,
        3,86,43,0,817,819,5,135,0,0,818,817,1,0,0,0,818,819,1,0,0,0,819,
        821,1,0,0,0,820,816,1,0,0,0,820,821,1,0,0,0,821,65,1,0,0,0,822,824,
        5,11,0,0,823,825,5,135,0,0,824,823,1,0,0,0,824,825,1,0,0,0,825,830,
        1,0,0,0,826,828,3,302,151,0,827,829,5,135,0,0,828,827,1,0,0,0,828,
        829,1,0,0,0,829,831,1,0,0,0,830,826,1,0,0,0,830,831,1,0,0,0,831,
        836,1,0,0,0,832,834,3,216,108,0,833,835,5,135,0,0,834,833,1,0,0,
        0,834,835,1,0,0,0,835,837,1,0,0,0,836,832,1,0,0,0,836,837,1,0,0,
        0,837,839,1,0,0,0,838,840,3,222,111,0,839,838,1,0,0,0,839,840,1,
        0,0,0,840,845,1,0,0,0,841,843,3,86,43,0,842,844,5,135,0,0,843,842,
        1,0,0,0,843,844,1,0,0,0,844,846,1,0,0,0,845,841,1,0,0,0,845,846,
        1,0,0,0,846,851,1,0,0,0,847,849,3,214,107,0,848,850,5,135,0,0,849,
        848,1,0,0,0,849,850,1,0,0,0,850,852,1,0,0,0,851,847,1,0,0,0,851,
        852,1,0,0,0,852,853,1,0,0,0,853,854,5,12,0,0,854,67,1,0,0,0,855,
        860,3,248,124,0,856,861,3,84,42,0,857,861,3,242,121,0,858,861,3,
        244,122,0,859,861,3,246,123,0,860,856,1,0,0,0,860,857,1,0,0,0,860,
        858,1,0,0,0,860,859,1,0,0,0,860,861,1,0,0,0,861,69,1,0,0,0,862,865,
        3,264,132,0,863,865,3,80,40,0,864,862,1,0,0,0,864,863,1,0,0,0,865,
        870,1,0,0,0,866,869,3,72,36,0,867,869,3,74,37,0,868,866,1,0,0,0,
        868,867,1,0,0,0,869,872,1,0,0,0,870,868,1,0,0,0,870,871,1,0,0,0,
        871,71,1,0,0,0,872,870,1,0,0,0,873,875,5,135,0,0,874,873,1,0,0,0,
        874,875,1,0,0,0,875,876,1,0,0,0,876,877,5,11,0,0,877,878,3,76,38,
        0,878,879,5,12,0,0,879,73,1,0,0,0,880,882,5,135,0,0,881,880,1,0,
        0,0,881,882,1,0,0,0,882,883,1,0,0,0,883,885,5,11,0,0,884,886,3,76,
        38,0,885,884,1,0,0,0,885,886,1,0,0,0,886,887,1,0,0,0,887,889,5,13,
        0,0,888,890,3,78,39,0,889,888,1,0,0,0,889,890,1,0,0,0,890,891,1,
        0,0,0,891,892,5,12,0,0,892,75,1,0,0,0,893,894,3,230,115,0,894,77,
        1,0,0,0,895,896,3,230,115,0,896,79,1,0,0,0,897,912,3,268,134,0,898,
        900,5,135,0,0,899,898,1,0,0,0,899,900,1,0,0,0,900,901,1,0,0,0,901,
        903,3,266,133,0,902,899,1,0,0,0,903,904,1,0,0,0,904,902,1,0,0,0,
        904,905,1,0,0,0,905,910,1,0,0,0,906,908,5,135,0,0,907,906,1,0,0,
        0,907,908,1,0,0,0,908,909,1,0,0,0,909,911,5,47,0,0,910,907,1,0,0,
        0,910,911,1,0,0,0,911,913,1,0,0,0,912,902,1,0,0,0,912,913,1,0,0,
        0,913,915,1,0,0,0,914,916,5,135,0,0,915,914,1,0,0,0,915,916,1,0,
        0,0,916,917,1,0,0,0,917,918,3,82,41,0,918,81,1,0,0,0,919,926,5,46,
        0,0,920,922,5,135,0,0,921,920,1,0,0,0,921,922,1,0,0,0,922,923,1,
        0,0,0,923,925,3,266,133,0,924,921,1,0,0,0,925,928,1,0,0,0,926,924,
        1,0,0,0,926,927,1,0,0,0,927,83,1,0,0,0,928,926,1,0,0,0,929,930,5,
        135,0,0,930,931,7,0,0,0,931,932,5,135,0,0,932,933,3,248,124,0,933,
        85,1,0,0,0,934,936,5,46,0,0,935,937,5,135,0,0,936,935,1,0,0,0,936,
        937,1,0,0,0,937,938,1,0,0,0,938,940,5,8,0,0,939,941,5,135,0,0,940,
        939,1,0,0,0,940,941,1,0,0,0,941,942,1,0,0,0,942,944,3,142,71,0,943,
        945,5,135,0,0,944,943,1,0,0,0,944,945,1,0,0,0,945,946,1,0,0,0,946,
        948,5,4,0,0,947,949,5,135,0,0,948,947,1,0,0,0,948,949,1,0,0,0,949,
        952,1,0,0,0,950,953,3,142,71,0,951,953,5,48,0,0,952,950,1,0,0,0,
        952,951,1,0,0,0,953,955,1,0,0,0,954,956,5,135,0,0,955,954,1,0,0,
        0,955,956,1,0,0,0,956,957,1,0,0,0,957,958,5,9,0,0,958,87,1,0,0,0,
        959,960,5,82,0,0,960,961,5,135,0,0,961,962,3,90,45,0,962,89,1,0,
        0,0,963,964,3,92,46,0,964,91,1,0,0,0,965,972,3,94,47,0,966,967,5,
        135,0,0,967,968,5,83,0,0,968,969,5,135,0,0,969,971,3,94,47,0,970,
        966,1,0,0,0,971,974,1,0,0,0,972,970,1,0,0,0,972,973,1,0,0,0,973,
        93,1,0,0,0,974,972,1,0,0,0,975,982,3,96,48,0,976,977,5,135,0,0,977,
        978,5,84,0,0,978,979,5,135,0,0,979,981,3,96,48,0,980,976,1,0,0,0,
        981,984,1,0,0,0,982,980,1,0,0,0,982,983,1,0,0,0,983,95,1,0,0,0,984,
        982,1,0,0,0,985,992,3,98,49,0,986,987,5,135,0,0,987,988,5,85,0,0,
        988,989,5,135,0,0,989,991,3,98,49,0,990,986,1,0,0,0,991,994,1,0,
        0,0,992,990,1,0,0,0,992,993,1,0,0,0,993,97,1,0,0,0,994,992,1,0,0,
        0,995,997,5,86,0,0,996,998,5,135,0,0,997,996,1,0,0,0,997,998,1,0,
        0,0,998,1000,1,0,0,0,999,995,1,0,0,0,1000,1003,1,0,0,0,1001,999,
        1,0,0,0,1001,1002,1,0,0,0,1002,1004,1,0,0,0,1003,1001,1,0,0,0,1004,
        1005,3,100,50,0,1005,99,1,0,0,0,1006,1018,3,110,55,0,1007,1009,5,
        135,0,0,1008,1007,1,0,0,0,1008,1009,1,0,0,0,1009,1010,1,0,0,0,1010,
        1012,3,108,54,0,1011,1013,5,135,0,0,1012,1011,1,0,0,0,1012,1013,
        1,0,0,0,1013,1014,1,0,0,0,1014,1015,3,110,55,0,1015,1017,1,0,0,0,
        1016,1008,1,0,0,0,1017,1020,1,0,0,0,1018,1016,1,0,0,0,1018,1019,
        1,0,0,0,1019,101,1,0,0,0,1020,1018,1,0,0,0,1021,1022,7,1,0,0,1022,
        103,1,0,0,0,1023,1024,5,16,0,0,1024,105,1,0,0,0,1025,1026,7,2,0,
        0,1026,107,1,0,0,0,1027,1028,7,3,0,0,1028,109,1,0,0,0,1029,1034,
        3,112,56,0,1030,1035,3,114,57,0,1031,1035,3,116,58,0,1032,1035,3,
        118,59,0,1033,1035,3,120,60,0,1034,1030,1,0,0,0,1034,1031,1,0,0,
        0,1034,1032,1,0,0,0,1034,1033,1,0,0,0,1034,1035,1,0,0,0,1035,111,
        1,0,0,0,1036,1057,3,122,61,0,1037,1039,5,135,0,0,1038,1037,1,0,0,
        0,1038,1039,1,0,0,0,1039,1040,1,0,0,0,1040,1042,3,106,53,0,1041,
        1043,5,135,0,0,1042,1041,1,0,0,0,1042,1043,1,0,0,0,1043,1044,1,0,
        0,0,1044,1045,3,122,61,0,1045,1056,1,0,0,0,1046,1048,5,135,0,0,1047,
        1046,1,0,0,0,1047,1048,1,0,0,0,1048,1049,1,0,0,0,1049,1051,3,106,
        53,0,1050,1052,5,135,0,0,1051,1050,1,0,0,0,1051,1052,1,0,0,0,1052,
        1053,1,0,0,0,1053,1054,3,122,61,0,1054,1056,1,0,0,0,1055,1038,1,
        0,0,0,1055,1047,1,0,0,0,1056,1059,1,0,0,0,1057,1055,1,0,0,0,1057,
        1058,1,0,0,0,1058,113,1,0,0,0,1059,1057,1,0,0,0,1060,1061,5,135,
        0,0,1061,1062,7,0,0,0,1062,1063,5,135,0,0,1063,1064,3,112,56,0,1064,
        115,1,0,0,0,1065,1066,5,135,0,0,1066,1067,5,87,0,0,1067,1068,5,135,
        0,0,1068,1076,5,71,0,0,1069,1070,5,135,0,0,1070,1071,5,88,0,0,1071,
        1072,5,135,0,0,1072,1076,5,71,0,0,1073,1074,5,135,0,0,1074,1076,
        5,89,0,0,1075,1065,1,0,0,0,1075,1069,1,0,0,0,1075,1073,1,0,0,0,1076,
        1078,1,0,0,0,1077,1079,5,135,0,0,1078,1077,1,0,0,0,1078,1079,1,0,
        0,0,1079,1080,1,0,0,0,1080,1081,3,112,56,0,1081,117,1,0,0,0,1082,
        1083,5,135,0,0,1083,1085,5,90,0,0,1084,1086,5,135,0,0,1085,1084,
        1,0,0,0,1085,1086,1,0,0,0,1086,1087,1,0,0,0,1087,1088,3,112,56,0,
        1088,119,1,0,0,0,1089,1090,5,135,0,0,1090,1091,5,91,0,0,1091,1092,
        5,135,0,0,1092,1100,5,92,0,0,1093,1094,5,135,0,0,1094,1095,5,91,
        0,0,1095,1096,5,135,0,0,1096,1097,5,86,0,0,1097,1098,5,135,0,0,1098,
        1100,5,92,0,0,1099,1089,1,0,0,0,1099,1093,1,0,0,0,1100,121,1,0,0,
        0,1101,1131,3,124,62,0,1102,1104,5,135,0,0,1103,1102,1,0,0,0,1103,
        1104,1,0,0,0,1104,1105,1,0,0,0,1105,1107,3,102,51,0,1106,1108,5,
        135,0,0,1107,1106,1,0,0,0,1107,1108,1,0,0,0,1108,1109,1,0,0,0,1109,
        1110,3,124,62,0,1110,1130,1,0,0,0,1111,1113,5,135,0,0,1112,1111,
        1,0,0,0,1112,1113,1,0,0,0,1113,1114,1,0,0,0,1114,1116,3,102,51,0,
        1115,1117,5,135,0,0,1116,1115,1,0,0,0,1116,1117,1,0,0,0,1117,1118,
        1,0,0,0,1118,1119,3,124,62,0,1119,1130,1,0,0,0,1120,1122,5,135,0,
        0,1121,1120,1,0,0,0,1121,1122,1,0,0,0,1122,1123,1,0,0,0,1123,1125,
        3,102,51,0,1124,1126,5,135,0,0,1125,1124,1,0,0,0,1125,1126,1,0,0,
        0,1126,1127,1,0,0,0,1127,1128,3,124,62,0,1128,1130,1,0,0,0,1129,
        1103,1,0,0,0,1129,1112,1,0,0,0,1129,1121,1,0,0,0,1130,1133,1,0,0,
        0,1131,1129,1,0,0,0,1131,1132,1,0,0,0,1132,123,1,0,0,0,1133,1131,
        1,0,0,0,1134,1146,3,126,63,0,1135,1137,5,135,0,0,1136,1135,1,0,0,
        0,1136,1137,1,0,0,0,1137,1138,1,0,0,0,1138,1140,3,104,52,0,1139,
        1141,5,135,0,0,1140,1139,1,0,0,0,1140,1141,1,0,0,0,1141,1142,1,0,
        0,0,1142,1143,3,126,63,0,1143,1145,1,0,0,0,1144,1136,1,0,0,0,1145,
        1148,1,0,0,0,1146,1144,1,0,0,0,1146,1147,1,0,0,0,1147,125,1,0,0,
        0,1148,1146,1,0,0,0,1149,1156,3,128,64,0,1150,1152,7,2,0,0,1151,
        1153,5,135,0,0,1152,1151,1,0,0,0,1152,1153,1,0,0,0,1153,1154,1,0,
        0,0,1154,1156,3,128,64,0,1155,1149,1,0,0,0,1155,1150,1,0,0,0,1156,
        127,1,0,0,0,1157,1160,3,130,65,0,1158,1160,3,132,66,0,1159,1157,
        1,0,0,0,1159,1158,1,0,0,0,1160,1165,1,0,0,0,1161,1164,3,134,67,0,
        1162,1164,3,136,68,0,1163,1161,1,0,0,0,1163,1162,1,0,0,0,1164,1167,
        1,0,0,0,1165,1163,1,0,0,0,1165,1166,1,0,0,0,1166,129,1,0,0,0,1167,
        1165,1,0,0,0,1168,1175,3,268,134,0,1169,1171,5,135,0,0,1170,1169,
        1,0,0,0,1170,1171,1,0,0,0,1171,1172,1,0,0,0,1172,1174,3,266,133,
        0,1173,1170,1,0,0,0,1174,1177,1,0,0,0,1175,1173,1,0,0,0,1175,1176,
        1,0,0,0,1176,1182,1,0,0,0,1177,1175,1,0,0,0,1178,1180,5,135,0,0,
        1179,1178,1,0,0,0,1179,1180,1,0,0,0,1180,1181,1,0,0,0,1181,1183,
        3,218,109,0,1182,1179,1,0,0,0,1182,1183,1,0,0,0,1183,131,1,0,0,0,
        1184,1199,3,268,134,0,1185,1187,5,135,0,0,1186,1185,1,0,0,0,1186,
        1187,1,0,0,0,1187,1188,1,0,0,0,1188,1190,3,266,133,0,1189,1186,1,
        0,0,0,1190,1191,1,0,0,0,1191,1189,1,0,0,0,1191,1192,1,0,0,0,1192,
        1197,1,0,0,0,1193,1195,5,135,0,0,1194,1193,1,0,0,0,1194,1195,1,0,
        0,0,1195,1196,1,0,0,0,1196,1198,5,47,0,0,1197,1194,1,0,0,0,1197,
        1198,1,0,0,0,1198,1200,1,0,0,0,1199,1189,1,0,0,0,1199,1200,1,0,0,
        0,1200,1202,1,0,0,0,1201,1203,5,135,0,0,1202,1201,1,0,0,0,1202,1203,
        1,0,0,0,1203,1204,1,0,0,0,1204,1205,3,82,41,0,1205,133,1,0,0,0,1206,
        1208,5,135,0,0,1207,1206,1,0,0,0,1207,1208,1,0,0,0,1208,1209,1,0,
        0,0,1209,1210,5,11,0,0,1210,1211,3,138,69,0,1211,1212,5,12,0,0,1212,
        135,1,0,0,0,1213,1215,5,135,0,0,1214,1213,1,0,0,0,1214,1215,1,0,
        0,0,1215,1216,1,0,0,0,1216,1218,5,11,0,0,1217,1219,3,138,69,0,1218,
        1217,1,0,0,0,1218,1219,1,0,0,0,1219,1220,1,0,0,0,1220,1222,5,13,
        0,0,1221,1223,3,140,70,0,1222,1221,1,0,0,0,1222,1223,1,0,0,0,1223,
        1224,1,0,0,0,1224,1225,5,12,0,0,1225,137,1,0,0,0,1226,1227,3,230,
        115,0,1227,139,1,0,0,0,1228,1229,3,230,115,0,1229,141,1,0,0,0,1230,
        1233,5,117,0,0,1231,1233,3,318,159,0,1232,1230,1,0,0,0,1232,1231,
        1,0,0,0,1233,143,1,0,0,0,1234,1235,7,4,0,0,1235,145,1,0,0,0,1236,
        1237,7,5,0,0,1237,147,1,0,0,0,1238,1240,5,135,0,0,1239,1238,1,0,
        0,0,1239,1240,1,0,0,0,1240,1241,1,0,0,0,1241,1246,3,150,75,0,1242,
        1244,5,135,0,0,1243,1242,1,0,0,0,1243,1244,1,0,0,0,1244,1245,1,0,
        0,0,1245,1247,5,24,0,0,1246,1243,1,0,0,0,1246,1247,1,0,0,0,1247,
        1249,1,0,0,0,1248,1250,5,135,0,0,1249,1248,1,0,0,0,1249,1250,1,0,
        0,0,1250,1251,1,0,0,0,1251,1252,5,0,0,1,1252,149,1,0,0,0,1253,1254,
        3,0,0,0,1254,151,1,0,0,0,1255,1262,3,156,78,0,1256,1258,5,135,0,
        0,1257,1256,1,0,0,0,1257,1258,1,0,0,0,1258,1259,1,0,0,0,1259,1261,
        3,154,77,0,1260,1257,1,0,0,0,1261,1264,1,0,0,0,1262,1260,1,0,0,0,
        1262,1263,1,0,0,0,1263,153,1,0,0,0,1264,1262,1,0,0,0,1265,1266,5,
        56,0,0,1266,1267,5,135,0,0,1267,1269,5,57,0,0,1268,1270,5,135,0,
        0,1269,1268,1,0,0,0,1269,1270,1,0,0,0,1270,1271,1,0,0,0,1271,1278,
        3,156,78,0,1272,1274,5,56,0,0,1273,1275,5,135,0,0,1274,1273,1,0,
        0,0,1274,1275,1,0,0,0,1275,1276,1,0,0,0,1276,1278,3,156,78,0,1277,
        1265,1,0,0,0,1277,1272,1,0,0,0,1278,155,1,0,0,0,1279,1282,3,158,
        79,0,1280,1282,3,160,80,0,1281,1279,1,0,0,0,1281,1280,1,0,0,0,1282,
        157,1,0,0,0,1283,1285,3,162,81,0,1284,1286,5,135,0,0,1285,1284,1,
        0,0,0,1285,1286,1,0,0,0,1286,1288,1,0,0,0,1287,1283,1,0,0,0,1288,
        1291,1,0,0,0,1289,1287,1,0,0,0,1289,1290,1,0,0,0,1290,1292,1,0,0,
        0,1291,1289,1,0,0,0,1292,1319,3,184,92,0,1293,1295,3,162,81,0,1294,
        1296,5,135,0,0,1295,1294,1,0,0,0,1295,1296,1,0,0,0,1296,1298,1,0,
        0,0,1297,1293,1,0,0,0,1298,1301,1,0,0,0,1299,1297,1,0,0,0,1299,1300,
        1,0,0,0,1300,1302,1,0,0,0,1301,1299,1,0,0,0,1302,1309,3,4,2,0,1303,
        1305,5,135,0,0,1304,1303,1,0,0,0,1304,1305,1,0,0,0,1305,1306,1,0,
        0,0,1306,1308,3,4,2,0,1307,1304,1,0,0,0,1308,1311,1,0,0,0,1309,1307,
        1,0,0,0,1309,1310,1,0,0,0,1310,1316,1,0,0,0,1311,1309,1,0,0,0,1312,
        1314,5,135,0,0,1313,1312,1,0,0,0,1313,1314,1,0,0,0,1314,1315,1,0,
        0,0,1315,1317,3,184,92,0,1316,1313,1,0,0,0,1316,1317,1,0,0,0,1317,
        1319,1,0,0,0,1318,1289,1,0,0,0,1318,1299,1,0,0,0,1319,159,1,0,0,
        0,1320,1322,3,38,19,0,1321,1320,1,0,0,0,1322,1323,1,0,0,0,1323,1321,
        1,0,0,0,1323,1324,1,0,0,0,1324,1325,1,0,0,0,1325,1326,3,158,79,0,
        1326,161,1,0,0,0,1327,1331,3,2,1,0,1328,1331,3,164,82,0,1329,1331,
        3,30,15,0,1330,1327,1,0,0,0,1330,1328,1,0,0,0,1330,1329,1,0,0,0,
        1331,163,1,0,0,0,1332,1334,5,60,0,0,1333,1335,5,135,0,0,1334,1333,
        1,0,0,0,1334,1335,1,0,0,0,1335,1336,1,0,0,0,1336,1337,3,230,115,
        0,1337,1338,5,135,0,0,1338,1339,5,61,0,0,1339,1340,5,135,0,0,1340,
        1341,3,302,151,0,1341,165,1,0,0,0,1342,1344,5,62,0,0,1343,1345,5,
        135,0,0,1344,1343,1,0,0,0,1344,1345,1,0,0,0,1345,1346,1,0,0,0,1346,
        1351,3,50,25,0,1347,1348,5,135,0,0,1348,1350,3,168,84,0,1349,1347,
        1,0,0,0,1350,1353,1,0,0,0,1351,1349,1,0,0,0,1351,1352,1,0,0,0,1352,
        167,1,0,0,0,1353,1351,1,0,0,0,1354,1355,5,63,0,0,1355,1356,5,135,
        0,0,1356,1357,5,59,0,0,1357,1358,5,135,0,0,1358,1365,3,172,86,0,
        1359,1360,5,63,0,0,1360,1361,5,135,0,0,1361,1362,5,64,0,0,1362,1363,
        5,135,0,0,1363,1365,3,172,86,0,1364,1354,1,0,0,0,1364,1359,1,0,0,
        0,1365,169,1,0,0,0,1366,1368,5,64,0,0,1367,1369,5,135,0,0,1368,1367,
        1,0,0,0,1368,1369,1,0,0,0,1369,1370,1,0,0,0,1370,1371,3,202,101,
        0,1371,171,1,0,0,0,1372,1374,5,65,0,0,1373,1375,5,135,0,0,1374,1373,
        1,0,0,0,1374,1375,1,0,0,0,1375,1376,1,0,0,0,1376,1387,3,6,3,0,1377,
        1379,5,135,0,0,1378,1377,1,0,0,0,1378,1379,1,0,0,0,1379,1380,1,0,
        0,0,1380,1382,5,4,0,0,1381,1383,5,135,0,0,1382,1381,1,0,0,0,1382,
        1383,1,0,0,0,1383,1384,1,0,0,0,1384,1386,3,6,3,0,1385,1378,1,0,0,
        0,1386,1389,1,0,0,0,1387,1385,1,0,0,0,1387,1388,1,0,0,0,1388,173,
        1,0,0,0,1389,1387,1,0,0,0,1390,1391,5,68,0,0,1391,1392,5,135,0,0,
        1392,1403,3,176,88,0,1393,1395,5,135,0,0,1394,1393,1,0,0,0,1394,
        1395,1,0,0,0,1395,1396,1,0,0,0,1396,1398,5,4,0,0,1397,1399,5,135,
        0,0,1398,1397,1,0,0,0,1398,1399,1,0,0,0,1399,1400,1,0,0,0,1400,1402,
        3,176,88,0,1401,1394,1,0,0,0,1402,1405,1,0,0,0,1403,1401,1,0,0,0,
        1403,1404,1,0,0,0,1404,175,1,0,0,0,1405,1403,1,0,0,0,1406,1407,3,
        302,151,0,1407,1408,3,218,109,0,1408,1411,1,0,0,0,1409,1411,3,228,
        114,0,1410,1406,1,0,0,0,1410,1409,1,0,0,0,1411,177,1,0,0,0,1412,
        1423,3,180,90,0,1413,1415,5,135,0,0,1414,1413,1,0,0,0,1414,1415,
        1,0,0,0,1415,1416,1,0,0,0,1416,1418,5,4,0,0,1417,1419,5,135,0,0,
        1418,1417,1,0,0,0,1418,1419,1,0,0,0,1419,1420,1,0,0,0,1420,1422,
        3,180,90,0,1421,1414,1,0,0,0,1422,1425,1,0,0,0,1423,1421,1,0,0,0,
        1423,1424,1,0,0,0,1424,1430,1,0,0,0,1425,1423,1,0,0,0,1426,1428,
        5,135,0,0,1427,1426,1,0,0,0,1427,1428,1,0,0,0,1428,1429,1,0,0,0,
        1429,1431,3,200,100,0,1430,1427,1,0,0,0,1430,1431,1,0,0,0,1431,179,
        1,0,0,0,1432,1437,3,296,148,0,1433,1434,5,135,0,0,1434,1435,5,61,
        0,0,1435,1436,5,135,0,0,1436,1438,3,302,151,0,1437,1433,1,0,0,0,
        1437,1438,1,0,0,0,1438,181,1,0,0,0,1439,1440,5,71,0,0,1440,1445,
        3,186,93,0,1441,1443,5,135,0,0,1442,1441,1,0,0,0,1442,1443,1,0,0,
        0,1443,1444,1,0,0,0,1444,1446,3,200,100,0,1445,1442,1,0,0,0,1445,
        1446,1,0,0,0,1446,183,1,0,0,0,1447,1448,5,72,0,0,1448,1449,3,186,
        93,0,1449,185,1,0,0,0,1450,1452,5,135,0,0,1451,1450,1,0,0,0,1451,
        1452,1,0,0,0,1452,1453,1,0,0,0,1453,1455,5,73,0,0,1454,1451,1,0,
        0,0,1454,1455,1,0,0,0,1455,1456,1,0,0,0,1456,1457,5,135,0,0,1457,
        1460,3,188,94,0,1458,1459,5,135,0,0,1459,1461,3,192,96,0,1460,1458,
        1,0,0,0,1460,1461,1,0,0,0,1461,1464,1,0,0,0,1462,1463,5,135,0,0,
        1463,1465,3,194,97,0,1464,1462,1,0,0,0,1464,1465,1,0,0,0,1465,1468,
        1,0,0,0,1466,1467,5,135,0,0,1467,1469,3,196,98,0,1468,1466,1,0,0,
        0,1468,1469,1,0,0,0,1469,187,1,0,0,0,1470,1481,5,5,0,0,1471,1473,
        5,135,0,0,1472,1471,1,0,0,0,1472,1473,1,0,0,0,1473,1474,1,0,0,0,
        1474,1476,5,4,0,0,1475,1477,5,135,0,0,1476,1475,1,0,0,0,1476,1477,
        1,0,0,0,1477,1478,1,0,0,0,1478,1480,3,190,95,0,1479,1472,1,0,0,0,
        1480,1483,1,0,0,0,1481,1479,1,0,0,0,1481,1482,1,0,0,0,1482,1499,
        1,0,0,0,1483,1481,1,0,0,0,1484,1495,3,190,95,0,1485,1487,5,135,0,
        0,1486,1485,1,0,0,0,1486,1487,1,0,0,0,1487,1488,1,0,0,0,1488,1490,
        5,4,0,0,1489,1491,5,135,0,0,1490,1489,1,0,0,0,1490,1491,1,0,0,0,
        1491,1492,1,0,0,0,1492,1494,3,190,95,0,1493,1486,1,0,0,0,1494,1497,
        1,0,0,0,1495,1493,1,0,0,0,1495,1496,1,0,0,0,1496,1499,1,0,0,0,1497,
        1495,1,0,0,0,1498,1470,1,0,0,0,1498,1484,1,0,0,0,1499,189,1,0,0,
        0,1500,1501,3,230,115,0,1501,1502,5,135,0,0,1502,1503,5,61,0,0,1503,
        1504,5,135,0,0,1504,1505,3,302,151,0,1505,1508,1,0,0,0,1506,1508,
        3,230,115,0,1507,1500,1,0,0,0,1507,1506,1,0,0,0,1508,191,1,0,0,0,
        1509,1510,5,74,0,0,1510,1511,5,135,0,0,1511,1512,5,75,0,0,1512,1513,
        5,135,0,0,1513,1521,3,198,99,0,1514,1516,5,4,0,0,1515,1517,5,135,
        0,0,1516,1515,1,0,0,0,1516,1517,1,0,0,0,1517,1518,1,0,0,0,1518,1520,
        3,198,99,0,1519,1514,1,0,0,0,1520,1523,1,0,0,0,1521,1519,1,0,0,0,
        1521,1522,1,0,0,0,1522,193,1,0,0,0,1523,1521,1,0,0,0,1524,1525,5,
        76,0,0,1525,1526,5,135,0,0,1526,1527,3,230,115,0,1527,195,1,0,0,
        0,1528,1529,5,77,0,0,1529,1530,5,135,0,0,1530,1531,3,230,115,0,1531,
        197,1,0,0,0,1532,1537,3,230,115,0,1533,1535,5,135,0,0,1534,1533,
        1,0,0,0,1534,1535,1,0,0,0,1535,1536,1,0,0,0,1536,1538,7,6,0,0,1537,
        1534,1,0,0,0,1537,1538,1,0,0,0,1538,199,1,0,0,0,1539,1540,5,82,0,
        0,1540,1541,5,135,0,0,1541,1542,3,230,115,0,1542,201,1,0,0,0,1543,
        1554,3,50,25,0,1544,1546,5,135,0,0,1545,1544,1,0,0,0,1545,1546,1,
        0,0,0,1546,1547,1,0,0,0,1547,1549,5,4,0,0,1548,1550,5,135,0,0,1549,
        1548,1,0,0,0,1549,1550,1,0,0,0,1550,1551,1,0,0,0,1551,1553,3,50,
        25,0,1552,1545,1,0,0,0,1553,1556,1,0,0,0,1554,1552,1,0,0,0,1554,
        1555,1,0,0,0,1555,203,1,0,0,0,1556,1554,1,0,0,0,1557,1558,3,206,
        103,0,1558,205,1,0,0,0,1559,1566,3,56,28,0,1560,1562,5,135,0,0,1561,
        1560,1,0,0,0,1561,1562,1,0,0,0,1562,1563,1,0,0,0,1563,1565,3,210,
        105,0,1564,1561,1,0,0,0,1565,1568,1,0,0,0,1566,1564,1,0,0,0,1566,
        1567,1,0,0,0,1567,1574,1,0,0,0,1568,1566,1,0,0,0,1569,1570,5,8,0,
        0,1570,1571,3,206,103,0,1571,1572,5,9,0,0,1572,1574,1,0,0,0,1573,
        1559,1,0,0,0,1573,1569,1,0,0,0,1574,207,1,0,0,0,1575,1580,3,56,28,
        0,1576,1578,5,135,0,0,1577,1576,1,0,0,0,1577,1578,1,0,0,0,1578,1579,
        1,0,0,0,1579,1581,3,210,105,0,1580,1577,1,0,0,0,1581,1582,1,0,0,
        0,1582,1580,1,0,0,0,1582,1583,1,0,0,0,1583,209,1,0,0,0,1584,1586,
        3,212,106,0,1585,1587,5,135,0,0,1586,1585,1,0,0,0,1586,1587,1,0,
        0,0,1587,1588,1,0,0,0,1588,1589,3,56,28,0,1589,211,1,0,0,0,1590,
        1592,3,328,164,0,1591,1593,5,135,0,0,1592,1591,1,0,0,0,1592,1593,
        1,0,0,0,1593,1594,1,0,0,0,1594,1596,3,332,166,0,1595,1597,5,135,
        0,0,1596,1595,1,0,0,0,1596,1597,1,0,0,0,1597,1599,1,0,0,0,1598,1600,
        3,66,33,0,1599,1598,1,0,0,0,1599,1600,1,0,0,0,1600,1602,1,0,0,0,
        1601,1603,5,135,0,0,1602,1601,1,0,0,0,1602,1603,1,0,0,0,1603,1604,
        1,0,0,0,1604,1606,3,332,166,0,1605,1607,5,135,0,0,1606,1605,1,0,
        0,0,1606,1607,1,0,0,0,1607,1608,1,0,0,0,1608,1609,3,330,165,0,1609,
        1655,1,0,0,0,1610,1612,3,328,164,0,1611,1613,5,135,0,0,1612,1611,
        1,0,0,0,1612,1613,1,0,0,0,1613,1614,1,0,0,0,1614,1616,3,332,166,
        0,1615,1617,5,135,0,0,1616,1615,1,0,0,0,1616,1617,1,0,0,0,1617,1619,
        1,0,0,0,1618,1620,3,66,33,0,1619,1618,1,0,0,0,1619,1620,1,0,0,0,
        1620,1622,1,0,0,0,1621,1623,5,135,0,0,1622,1621,1,0,0,0,1622,1623,
        1,0,0,0,1623,1624,1,0,0,0,1624,1625,3,332,166,0,1625,1655,1,0,0,
        0,1626,1628,3,332,166,0,1627,1629,5,135,0,0,1628,1627,1,0,0,0,1628,
        1629,1,0,0,0,1629,1631,1,0,0,0,1630,1632,3,66,33,0,1631,1630,1,0,
        0,0,1631,1632,1,0,0,0,1632,1634,1,0,0,0,1633,1635,5,135,0,0,1634,
        1633,1,0,0,0,1634,1635,1,0,0,0,1635,1636,1,0,0,0,1636,1638,3,332,
        166,0,1637,1639,5,135,0,0,1638,1637,1,0,0,0,1638,1639,1,0,0,0,1639,
        1640,1,0,0,0,1640,1641,3,330,165,0,1641,1655,1,0,0,0,1642,1644,3,
        332,166,0,1643,1645,5,135,0,0,1644,1643,1,0,0,0,1644,1645,1,0,0,
        0,1645,1647,1,0,0,0,1646,1648,3,66,33,0,1647,1646,1,0,0,0,1647,1648,
        1,0,0,0,1648,1650,1,0,0,0,1649,1651,5,135,0,0,1650,1649,1,0,0,0,
        1650,1651,1,0,0,0,1651,1652,1,0,0,0,1652,1653,3,332,166,0,1653,1655,
        1,0,0,0,1654,1590,1,0,0,0,1654,1610,1,0,0,0,1654,1626,1,0,0,0,1654,
        1642,1,0,0,0,1655,213,1,0,0,0,1656,1659,3,318,159,0,1657,1659,3,
        324,162,0,1658,1656,1,0,0,0,1658,1657,1,0,0,0,1659,215,1,0,0,0,1660,
        1662,5,10,0,0,1661,1663,5,135,0,0,1662,1661,1,0,0,0,1662,1663,1,
        0,0,0,1663,1664,1,0,0,0,1664,1678,3,226,113,0,1665,1667,5,135,0,
        0,1666,1665,1,0,0,0,1666,1667,1,0,0,0,1667,1668,1,0,0,0,1668,1670,
        5,25,0,0,1669,1671,5,10,0,0,1670,1669,1,0,0,0,1670,1671,1,0,0,0,
        1671,1673,1,0,0,0,1672,1674,5,135,0,0,1673,1672,1,0,0,0,1673,1674,
        1,0,0,0,1674,1675,1,0,0,0,1675,1677,3,226,113,0,1676,1666,1,0,0,
        0,1677,1680,1,0,0,0,1678,1676,1,0,0,0,1678,1679,1,0,0,0,1679,217,
        1,0,0,0,1680,1678,1,0,0,0,1681,1688,3,220,110,0,1682,1684,5,135,
        0,0,1683,1682,1,0,0,0,1683,1684,1,0,0,0,1684,1685,1,0,0,0,1685,1687,
        3,220,110,0,1686,1683,1,0,0,0,1687,1690,1,0,0,0,1688,1686,1,0,0,
        0,1688,1689,1,0,0,0,1689,219,1,0,0,0,1690,1688,1,0,0,0,1691,1693,
        5,10,0,0,1692,1694,5,135,0,0,1693,1692,1,0,0,0,1693,1694,1,0,0,0,
        1694,1695,1,0,0,0,1695,1696,3,224,112,0,1696,221,1,0,0,0,1697,1699,
        5,5,0,0,1698,1700,5,135,0,0,1699,1698,1,0,0,0,1699,1700,1,0,0,0,
        1700,1705,1,0,0,0,1701,1703,3,310,155,0,1702,1704,5,135,0,0,1703,
        1702,1,0,0,0,1703,1704,1,0,0,0,1704,1706,1,0,0,0,1705,1701,1,0,0,
        0,1705,1706,1,0,0,0,1706,1717,1,0,0,0,1707,1709,5,13,0,0,1708,1710,
        5,135,0,0,1709,1708,1,0,0,0,1709,1710,1,0,0,0,1710,1715,1,0,0,0,
        1711,1713,3,310,155,0,1712,1714,5,135,0,0,1713,1712,1,0,0,0,1713,
        1714,1,0,0,0,1714,1716,1,0,0,0,1715,1711,1,0,0,0,1715,1716,1,0,0,
        0,1716,1718,1,0,0,0,1717,1707,1,0,0,0,1717,1718,1,0,0,0,1718,223,
        1,0,0,0,1719,1720,3,326,163,0,1720,225,1,0,0,0,1721,1722,3,326,163,
        0,1722,227,1,0,0,0,1723,1728,3,268,134,0,1724,1726,5,135,0,0,1725,
        1724,1,0,0,0,1725,1726,1,0,0,0,1726,1727,1,0,0,0,1727,1729,3,266,
        133,0,1728,1725,1,0,0,0,1729,1730,1,0,0,0,1730,1728,1,0,0,0,1730,
        1731,1,0,0,0,1731,229,1,0,0,0,1732,1733,3,232,116,0,1733,231,1,0,
        0,0,1734,1741,3,234,117,0,1735,1736,5,135,0,0,1736,1737,5,83,0,0,
        1737,1738,5,135,0,0,1738,1740,3,234,117,0,1739,1735,1,0,0,0,1740,
        1743,1,0,0,0,1741,1739,1,0,0,0,1741,1742,1,0,0,0,1742,233,1,0,0,
        0,1743,1741,1,0,0,0,1744,1751,3,236,118,0,1745,1746,5,135,0,0,1746,
        1747,5,84,0,0,1747,1748,5,135,0,0,1748,1750,3,236,118,0,1749,1745,
        1,0,0,0,1750,1753,1,0,0,0,1751,1749,1,0,0,0,1751,1752,1,0,0,0,1752,
        235,1,0,0,0,1753,1751,1,0,0,0,1754,1761,3,238,119,0,1755,1756,5,
        135,0,0,1756,1757,5,85,0,0,1757,1758,5,135,0,0,1758,1760,3,238,119,
        0,1759,1755,1,0,0,0,1760,1763,1,0,0,0,1761,1759,1,0,0,0,1761,1762,
        1,0,0,0,1762,237,1,0,0,0,1763,1761,1,0,0,0,1764,1766,5,86,0,0,1765,
        1767,5,135,0,0,1766,1765,1,0,0,0,1766,1767,1,0,0,0,1767,1769,1,0,
        0,0,1768,1764,1,0,0,0,1769,1772,1,0,0,0,1770,1768,1,0,0,0,1770,1771,
        1,0,0,0,1771,1773,1,0,0,0,1772,1770,1,0,0,0,1773,1774,3,240,120,
        0,1774,239,1,0,0,0,1775,1787,3,68,34,0,1776,1778,5,135,0,0,1777,
        1776,1,0,0,0,1777,1778,1,0,0,0,1778,1779,1,0,0,0,1779,1781,3,256,
        128,0,1780,1782,5,135,0,0,1781,1780,1,0,0,0,1781,1782,1,0,0,0,1782,
        1783,1,0,0,0,1783,1784,3,68,34,0,1784,1786,1,0,0,0,1785,1777,1,0,
        0,0,1786,1789,1,0,0,0,1787,1785,1,0,0,0,1787,1788,1,0,0,0,1788,241,
        1,0,0,0,1789,1787,1,0,0,0,1790,1791,5,135,0,0,1791,1792,5,87,0,0,
        1792,1793,5,135,0,0,1793,1801,5,71,0,0,1794,1795,5,135,0,0,1795,
        1796,5,88,0,0,1796,1797,5,135,0,0,1797,1801,5,71,0,0,1798,1799,5,
        135,0,0,1799,1801,5,89,0,0,1800,1790,1,0,0,0,1800,1794,1,0,0,0,1800,
        1798,1,0,0,0,1801,1803,1,0,0,0,1802,1804,5,135,0,0,1803,1802,1,0,
        0,0,1803,1804,1,0,0,0,1804,1805,1,0,0,0,1805,1806,3,248,124,0,1806,
        243,1,0,0,0,1807,1808,5,135,0,0,1808,1810,5,90,0,0,1809,1811,5,135,
        0,0,1810,1809,1,0,0,0,1810,1811,1,0,0,0,1811,1812,1,0,0,0,1812,1813,
        3,248,124,0,1813,245,1,0,0,0,1814,1815,5,135,0,0,1815,1816,5,91,
        0,0,1816,1817,5,135,0,0,1817,1825,5,92,0,0,1818,1819,5,135,0,0,1819,
        1820,5,91,0,0,1820,1821,5,135,0,0,1821,1822,5,86,0,0,1822,1823,5,
        135,0,0,1823,1825,5,92,0,0,1824,1814,1,0,0,0,1824,1818,1,0,0,0,1825,
        247,1,0,0,0,1826,1847,3,258,129,0,1827,1829,5,135,0,0,1828,1827,
        1,0,0,0,1828,1829,1,0,0,0,1829,1830,1,0,0,0,1830,1832,3,254,127,
        0,1831,1833,5,135,0,0,1832,1831,1,0,0,0,1832,1833,1,0,0,0,1833,1834,
        1,0,0,0,1834,1835,3,258,129,0,1835,1846,1,0,0,0,1836,1838,5,135,
        0,0,1837,1836,1,0,0,0,1837,1838,1,0,0,0,1838,1839,1,0,0,0,1839,1841,
        3,254,127,0,1840,1842,5,135,0,0,1841,1840,1,0,0,0,1841,1842,1,0,
        0,0,1842,1843,1,0,0,0,1843,1844,3,258,129,0,1844,1846,1,0,0,0,1845,
        1828,1,0,0,0,1845,1837,1,0,0,0,1846,1849,1,0,0,0,1847,1845,1,0,0,
        0,1847,1848,1,0,0,0,1848,249,1,0,0,0,1849,1847,1,0,0,0,1850,1851,
        7,1,0,0,1851,251,1,0,0,0,1852,1853,5,16,0,0,1853,253,1,0,0,0,1854,
        1855,7,2,0,0,1855,255,1,0,0,0,1856,1857,7,3,0,0,1857,257,1,0,0,0,
        1858,1888,3,260,130,0,1859,1861,5,135,0,0,1860,1859,1,0,0,0,1860,
        1861,1,0,0,0,1861,1862,1,0,0,0,1862,1864,3,250,125,0,1863,1865,5,
        135,0,0,1864,1863,1,0,0,0,1864,1865,1,0,0,0,1865,1866,1,0,0,0,1866,
        1867,3,260,130,0,1867,1887,1,0,0,0,1868,1870,5,135,0,0,1869,1868,
        1,0,0,0,1869,1870,1,0,0,0,1870,1871,1,0,0,0,1871,1873,3,250,125,
        0,1872,1874,5,135,0,0,1873,1872,1,0,0,0,1873,1874,1,0,0,0,1874,1875,
        1,0,0,0,1875,1876,3,260,130,0,1876,1887,1,0,0,0,1877,1879,5,135,
        0,0,1878,1877,1,0,0,0,1878,1879,1,0,0,0,1879,1880,1,0,0,0,1880,1882,
        3,250,125,0,1881,1883,5,135,0,0,1882,1881,1,0,0,0,1882,1883,1,0,
        0,0,1883,1884,1,0,0,0,1884,1885,3,260,130,0,1885,1887,1,0,0,0,1886,
        1860,1,0,0,0,1886,1869,1,0,0,0,1886,1878,1,0,0,0,1887,1890,1,0,0,
        0,1888,1886,1,0,0,0,1888,1889,1,0,0,0,1889,259,1,0,0,0,1890,1888,
        1,0,0,0,1891,1903,3,262,131,0,1892,1894,5,135,0,0,1893,1892,1,0,
        0,0,1893,1894,1,0,0,0,1894,1895,1,0,0,0,1895,1897,3,252,126,0,1896,
        1898,5,135,0,0,1897,1896,1,0,0,0,1897,1898,1,0,0,0,1898,1899,1,0,
        0,0,1899,1900,3,262,131,0,1900,1902,1,0,0,0,1901,1893,1,0,0,0,1902,
        1905,1,0,0,0,1903,1901,1,0,0,0,1903,1904,1,0,0,0,1904,261,1,0,0,
        0,1905,1903,1,0,0,0,1906,1913,3,70,35,0,1907,1909,7,2,0,0,1908,1910,
        5,135,0,0,1909,1908,1,0,0,0,1909,1910,1,0,0,0,1910,1911,1,0,0,0,
        1911,1913,3,70,35,0,1912,1906,1,0,0,0,1912,1907,1,0,0,0,1913,263,
        1,0,0,0,1914,1921,3,268,134,0,1915,1917,5,135,0,0,1916,1915,1,0,
        0,0,1916,1917,1,0,0,0,1917,1918,1,0,0,0,1918,1920,3,266,133,0,1919,
        1916,1,0,0,0,1920,1923,1,0,0,0,1921,1919,1,0,0,0,1921,1922,1,0,0,
        0,1922,1928,1,0,0,0,1923,1921,1,0,0,0,1924,1926,5,135,0,0,1925,1924,
        1,0,0,0,1925,1926,1,0,0,0,1926,1927,1,0,0,0,1927,1929,3,218,109,
        0,1928,1925,1,0,0,0,1928,1929,1,0,0,0,1929,265,1,0,0,0,1930,1932,
        5,1,0,0,1931,1933,5,135,0,0,1932,1931,1,0,0,0,1932,1933,1,0,0,0,
        1933,1934,1,0,0,0,1934,1935,3,322,161,0,1935,267,1,0,0,0,1936,1961,
        3,304,152,0,1937,1961,3,324,162,0,1938,1961,3,270,135,0,1939,1941,
        5,93,0,0,1940,1942,5,135,0,0,1941,1940,1,0,0,0,1941,1942,1,0,0,0,
        1942,1943,1,0,0,0,1943,1945,5,8,0,0,1944,1946,5,135,0,0,1945,1944,
        1,0,0,0,1945,1946,1,0,0,0,1946,1947,1,0,0,0,1947,1949,5,5,0,0,1948,
        1950,5,135,0,0,1949,1948,1,0,0,0,1949,1950,1,0,0,0,1950,1951,1,0,
        0,0,1951,1961,5,9,0,0,1952,1961,3,274,137,0,1953,1961,3,276,138,
        0,1954,1961,3,278,139,0,1955,1961,3,280,140,0,1956,1961,3,282,141,
        0,1957,1961,3,286,143,0,1958,1961,3,42,21,0,1959,1961,3,302,151,
        0,1960,1936,1,0,0,0,1960,1937,1,0,0,0,1960,1938,1,0,0,0,1960,1939,
        1,0,0,0,1960,1952,1,0,0,0,1960,1953,1,0,0,0,1960,1954,1,0,0,0,1960,
        1955,1,0,0,0,1960,1956,1,0,0,0,1960,1957,1,0,0,0,1960,1958,1,0,0,
        0,1960,1959,1,0,0,0,1961,269,1,0,0,0,1962,1967,5,94,0,0,1963,1965,
        5,135,0,0,1964,1963,1,0,0,0,1964,1965,1,0,0,0,1965,1966,1,0,0,0,
        1966,1968,3,272,136,0,1967,1964,1,0,0,0,1968,1969,1,0,0,0,1969,1967,
        1,0,0,0,1969,1970,1,0,0,0,1970,1985,1,0,0,0,1971,1973,5,94,0,0,1972,
        1974,5,135,0,0,1973,1972,1,0,0,0,1973,1974,1,0,0,0,1974,1975,1,0,
        0,0,1975,1980,3,230,115,0,1976,1978,5,135,0,0,1977,1976,1,0,0,0,
        1977,1978,1,0,0,0,1978,1979,1,0,0,0,1979,1981,3,272,136,0,1980,1977,
        1,0,0,0,1981,1982,1,0,0,0,1982,1980,1,0,0,0,1982,1983,1,0,0,0,1983,
        1985,1,0,0,0,1984,1962,1,0,0,0,1984,1971,1,0,0,0,1985,1994,1,0,0,
        0,1986,1988,5,135,0,0,1987,1986,1,0,0,0,1987,1988,1,0,0,0,1988,1989,
        1,0,0,0,1989,1991,5,95,0,0,1990,1992,5,135,0,0,1991,1990,1,0,0,0,
        1991,1992,1,0,0,0,1992,1993,1,0,0,0,1993,1995,3,230,115,0,1994,1987,
        1,0,0,0,1994,1995,1,0,0,0,1995,1997,1,0,0,0,1996,1998,5,135,0,0,
        1997,1996,1,0,0,0,1997,1998,1,0,0,0,1998,1999,1,0,0,0,1999,2000,
        5,96,0,0,2000,271,1,0,0,0,2001,2003,5,97,0,0,2002,2004,5,135,0,0,
        2003,2002,1,0,0,0,2003,2004,1,0,0,0,2004,2005,1,0,0,0,2005,2007,
        3,230,115,0,2006,2008,5,135,0,0,2007,2006,1,0,0,0,2007,2008,1,0,
        0,0,2008,2009,1,0,0,0,2009,2011,5,98,0,0,2010,2012,5,135,0,0,2011,
        2010,1,0,0,0,2011,2012,1,0,0,0,2012,2013,1,0,0,0,2013,2014,3,230,
        115,0,2014,273,1,0,0,0,2015,2017,5,11,0,0,2016,2018,5,135,0,0,2017,
        2016,1,0,0,0,2017,2018,1,0,0,0,2018,2019,1,0,0,0,2019,2028,3,44,
        22,0,2020,2022,5,135,0,0,2021,2020,1,0,0,0,2021,2022,1,0,0,0,2022,
        2023,1,0,0,0,2023,2025,5,25,0,0,2024,2026,5,135,0,0,2025,2024,1,
        0,0,0,2025,2026,1,0,0,0,2026,2027,1,0,0,0,2027,2029,3,230,115,0,
        2028,2021,1,0,0,0,2028,2029,1,0,0,0,2029,2031,1,0,0,0,2030,2032,
        5,135,0,0,2031,2030,1,0,0,0,2031,2032,1,0,0,0,2032,2033,1,0,0,0,
        2033,2034,5,12,0,0,2034,275,1,0,0,0,2035,2037,5,11,0,0,2036,2038,
        5,135,0,0,2037,2036,1,0,0,0,2037,2038,1,0,0,0,2038,2047,1,0,0,0,
        2039,2041,3,302,151,0,2040,2042,5,135,0,0,2041,2040,1,0,0,0,2041,
        2042,1,0,0,0,2042,2043,1,0,0,0,2043,2045,5,2,0,0,2044,2046,5,135,
        0,0,2045,2044,1,0,0,0,2045,2046,1,0,0,0,2046,2048,1,0,0,0,2047,2039,
        1,0,0,0,2047,2048,1,0,0,0,2048,2049,1,0,0,0,2049,2051,3,208,104,
        0,2050,2052,5,135,0,0,2051,2050,1,0,0,0,2051,2052,1,0,0,0,2052,2057,
        1,0,0,0,2053,2055,3,200,100,0,2054,2056,5,135,0,0,2055,2054,1,0,
        0,0,2055,2056,1,0,0,0,2056,2058,1,0,0,0,2057,2053,1,0,0,0,2057,2058,
        1,0,0,0,2058,2059,1,0,0,0,2059,2061,5,25,0,0,2060,2062,5,135,0,0,
        2061,2060,1,0,0,0,2061,2062,1,0,0,0,2062,2063,1,0,0,0,2063,2065,
        3,230,115,0,2064,2066,5,135,0,0,2065,2064,1,0,0,0,2065,2066,1,0,
        0,0,2066,2067,1,0,0,0,2067,2068,5,12,0,0,2068,277,1,0,0,0,2069,2071,
        5,57,0,0,2070,2072,5,135,0,0,2071,2070,1,0,0,0,2071,2072,1,0,0,0,
        2072,2073,1,0,0,0,2073,2075,5,8,0,0,2074,2076,5,135,0,0,2075,2074,
        1,0,0,0,2075,2076,1,0,0,0,2076,2077,1,0,0,0,2077,2079,3,44,22,0,
        2078,2080,5,135,0,0,2079,2078,1,0,0,0,2079,2080,1,0,0,0,2080,2081,
        1,0,0,0,2081,2082,5,9,0,0,2082,2126,1,0,0,0,2083,2085,5,99,0,0,2084,
        2086,5,135,0,0,2085,2084,1,0,0,0,2085,2086,1,0,0,0,2086,2087,1,0,
        0,0,2087,2089,5,8,0,0,2088,2090,5,135,0,0,2089,2088,1,0,0,0,2089,
        2090,1,0,0,0,2090,2091,1,0,0,0,2091,2093,3,44,22,0,2092,2094,5,135,
        0,0,2093,2092,1,0,0,0,2093,2094,1,0,0,0,2094,2095,1,0,0,0,2095,2096,
        5,9,0,0,2096,2126,1,0,0,0,2097,2099,5,100,0,0,2098,2100,5,135,0,
        0,2099,2098,1,0,0,0,2099,2100,1,0,0,0,2100,2101,1,0,0,0,2101,2103,
        5,8,0,0,2102,2104,5,135,0,0,2103,2102,1,0,0,0,2103,2104,1,0,0,0,
        2104,2105,1,0,0,0,2105,2107,3,44,22,0,2106,2108,5,135,0,0,2107,2106,
        1,0,0,0,2107,2108,1,0,0,0,2108,2109,1,0,0,0,2109,2110,5,9,0,0,2110,
        2126,1,0,0,0,2111,2113,5,101,0,0,2112,2114,5,135,0,0,2113,2112,1,
        0,0,0,2113,2114,1,0,0,0,2114,2115,1,0,0,0,2115,2117,5,8,0,0,2116,
        2118,5,135,0,0,2117,2116,1,0,0,0,2117,2118,1,0,0,0,2118,2119,1,0,
        0,0,2119,2121,3,44,22,0,2120,2122,5,135,0,0,2121,2120,1,0,0,0,2121,
        2122,1,0,0,0,2122,2123,1,0,0,0,2123,2124,5,9,0,0,2124,2126,1,0,0,
        0,2125,2069,1,0,0,0,2125,2083,1,0,0,0,2125,2097,1,0,0,0,2125,2111,
        1,0,0,0,2126,279,1,0,0,0,2127,2128,3,208,104,0,2128,281,1,0,0,0,
        2129,2131,5,8,0,0,2130,2132,5,135,0,0,2131,2130,1,0,0,0,2131,2132,
        1,0,0,0,2132,2133,1,0,0,0,2133,2135,3,230,115,0,2134,2136,5,135,
        0,0,2135,2134,1,0,0,0,2135,2136,1,0,0,0,2136,2137,1,0,0,0,2137,2138,
        5,9,0,0,2138,283,1,0,0,0,2139,2140,3,302,151,0,2140,2141,5,135,0,
        0,2141,2142,5,90,0,0,2142,2143,5,135,0,0,2143,2144,3,230,115,0,2144,
        285,1,0,0,0,2145,2147,3,290,145,0,2146,2148,5,135,0,0,2147,2146,
        1,0,0,0,2147,2148,1,0,0,0,2148,2149,1,0,0,0,2149,2151,5,8,0,0,2150,
        2152,5,135,0,0,2151,2150,1,0,0,0,2151,2152,1,0,0,0,2152,2157,1,0,
        0,0,2153,2155,5,73,0,0,2154,2156,5,135,0,0,2155,2154,1,0,0,0,2155,
        2156,1,0,0,0,2156,2158,1,0,0,0,2157,2153,1,0,0,0,2157,2158,1,0,0,
        0,2158,2176,1,0,0,0,2159,2161,3,288,144,0,2160,2162,5,135,0,0,2161,
        2160,1,0,0,0,2161,2162,1,0,0,0,2162,2173,1,0,0,0,2163,2165,5,4,0,
        0,2164,2166,5,135,0,0,2165,2164,1,0,0,0,2165,2166,1,0,0,0,2166,2167,
        1,0,0,0,2167,2169,3,288,144,0,2168,2170,5,135,0,0,2169,2168,1,0,
        0,0,2169,2170,1,0,0,0,2170,2172,1,0,0,0,2171,2163,1,0,0,0,2172,2175,
        1,0,0,0,2173,2171,1,0,0,0,2173,2174,1,0,0,0,2174,2177,1,0,0,0,2175,
        2173,1,0,0,0,2176,2159,1,0,0,0,2176,2177,1,0,0,0,2177,2178,1,0,0,
        0,2178,2179,5,9,0,0,2179,287,1,0,0,0,2180,2181,3,230,115,0,2181,
        289,1,0,0,0,2182,2183,3,300,150,0,2183,2184,3,144,72,0,2184,291,
        1,0,0,0,2185,2187,3,298,149,0,2186,2188,5,135,0,0,2187,2186,1,0,
        0,0,2187,2188,1,0,0,0,2188,2189,1,0,0,0,2189,2191,5,8,0,0,2190,2192,
        5,135,0,0,2191,2190,1,0,0,0,2191,2192,1,0,0,0,2192,2210,1,0,0,0,
        2193,2195,3,230,115,0,2194,2196,5,135,0,0,2195,2194,1,0,0,0,2195,
        2196,1,0,0,0,2196,2207,1,0,0,0,2197,2199,5,4,0,0,2198,2200,5,135,
        0,0,2199,2198,1,0,0,0,2199,2200,1,0,0,0,2200,2201,1,0,0,0,2201,2203,
        3,230,115,0,2202,2204,5,135,0,0,2203,2202,1,0,0,0,2203,2204,1,0,
        0,0,2204,2206,1,0,0,0,2205,2197,1,0,0,0,2206,2209,1,0,0,0,2207,2205,
        1,0,0,0,2207,2208,1,0,0,0,2208,2211,1,0,0,0,2209,2207,1,0,0,0,2210,
        2193,1,0,0,0,2210,2211,1,0,0,0,2211,2212,1,0,0,0,2212,2213,5,9,0,
        0,2213,293,1,0,0,0,2214,2215,3,298,149,0,2215,295,1,0,0,0,2216,2217,
        3,144,72,0,2217,297,1,0,0,0,2218,2219,3,300,150,0,2219,2220,3,144,
        72,0,2220,299,1,0,0,0,2221,2222,3,144,72,0,2222,2223,5,1,0,0,2223,
        2225,1,0,0,0,2224,2221,1,0,0,0,2225,2228,1,0,0,0,2226,2224,1,0,0,
        0,2226,2227,1,0,0,0,2227,301,1,0,0,0,2228,2226,1,0,0,0,2229,2230,
        3,144,72,0,2230,303,1,0,0,0,2231,2238,3,306,153,0,2232,2238,5,92,
        0,0,2233,2238,3,308,154,0,2234,2238,5,117,0,0,2235,2238,3,314,157,
        0,2236,2238,3,318,159,0,2237,2231,1,0,0,0,2237,2232,1,0,0,0,2237,
        2233,1,0,0,0,2237,2234,1,0,0,0,2237,2235,1,0,0,0,2237,2236,1,0,0,
        0,2238,305,1,0,0,0,2239,2240,7,7,0,0,2240,307,1,0,0,0,2241,2244,
        3,312,156,0,2242,2244,3,310,155,0,2243,2241,1,0,0,0,2243,2242,1,
        0,0,0,2244,309,1,0,0,0,2245,2246,7,8,0,0,2246,311,1,0,0,0,2247,2248,
        7,9,0,0,2248,313,1,0,0,0,2249,2251,5,11,0,0,2250,2252,5,135,0,0,
        2251,2250,1,0,0,0,2251,2252,1,0,0,0,2252,2270,1,0,0,0,2253,2255,
        3,316,158,0,2254,2256,5,135,0,0,2255,2254,1,0,0,0,2255,2256,1,0,
        0,0,2256,2267,1,0,0,0,2257,2259,5,4,0,0,2258,2260,5,135,0,0,2259,
        2258,1,0,0,0,2259,2260,1,0,0,0,2260,2261,1,0,0,0,2261,2263,3,316,
        158,0,2262,2264,5,135,0,0,2263,2262,1,0,0,0,2263,2264,1,0,0,0,2264,
        2266,1,0,0,0,2265,2257,1,0,0,0,2266,2269,1,0,0,0,2267,2265,1,0,0,
        0,2267,2268,1,0,0,0,2268,2271,1,0,0,0,2269,2267,1,0,0,0,2270,2253,
        1,0,0,0,2270,2271,1,0,0,0,2271,2272,1,0,0,0,2272,2273,5,12,0,0,2273,
        315,1,0,0,0,2274,2275,3,230,115,0,2275,317,1,0,0,0,2276,2278,5,6,
        0,0,2277,2279,5,135,0,0,2278,2277,1,0,0,0,2278,2279,1,0,0,0,2279,
        2291,1,0,0,0,2280,2288,3,320,160,0,2281,2283,5,4,0,0,2282,2284,5,
        135,0,0,2283,2282,1,0,0,0,2283,2284,1,0,0,0,2284,2285,1,0,0,0,2285,
        2287,3,320,160,0,2286,2281,1,0,0,0,2287,2290,1,0,0,0,2288,2286,1,
        0,0,0,2288,2289,1,0,0,0,2289,2292,1,0,0,0,2290,2288,1,0,0,0,2291,
        2280,1,0,0,0,2291,2292,1,0,0,0,2292,2293,1,0,0,0,2293,2294,5,7,0,
        0,2294,319,1,0,0,0,2295,2297,3,322,161,0,2296,2298,5,135,0,0,2297,
        2296,1,0,0,0,2297,2298,1,0,0,0,2298,2299,1,0,0,0,2299,2301,5,10,
        0,0,2300,2302,5,135,0,0,2301,2300,1,0,0,0,2301,2302,1,0,0,0,2302,
        2303,1,0,0,0,2303,2305,3,230,115,0,2304,2306,5,135,0,0,2305,2304,
        1,0,0,0,2305,2306,1,0,0,0,2306,321,1,0,0,0,2307,2308,3,326,163,0,
        2308,323,1,0,0,0,2309,2312,5,26,0,0,2310,2313,3,144,72,0,2311,2313,
        5,106,0,0,2312,2310,1,0,0,0,2312,2311,1,0,0,0,2313,325,1,0,0,0,2314,
        2317,3,144,72,0,2315,2317,3,146,73,0,2316,2314,1,0,0,0,2316,2315,
        1,0,0,0,2317,327,1,0,0,0,2318,2319,7,10,0,0,2319,329,1,0,0,0,2320,
        2321,7,11,0,0,2321,331,1,0,0,0,2322,2323,7,12,0,0,2323,333,1,0,0,
        0,412,337,341,345,349,353,355,358,361,369,372,375,379,385,388,395,
        398,403,409,412,417,421,427,431,437,441,447,451,457,461,465,471,
        474,478,484,487,491,495,499,504,511,516,520,524,528,532,537,544,
        549,553,559,565,571,576,582,585,591,593,597,601,606,610,613,620,
        624,628,633,637,642,647,650,654,658,663,666,668,671,677,680,684,
        690,696,700,706,710,715,719,723,727,733,737,743,747,749,753,755,
        759,761,765,767,773,777,784,792,795,801,805,807,810,814,818,820,
        824,828,830,834,836,839,843,845,849,851,860,864,868,870,874,881,
        885,889,899,904,907,910,912,915,921,926,936,940,944,948,952,955,
        972,982,992,997,1001,1008,1012,1018,1034,1038,1042,1047,1051,1055,
        1057,1075,1078,1085,1099,1103,1107,1112,1116,1121,1125,1129,1131,
        1136,1140,1146,1152,1155,1159,1163,1165,1170,1175,1179,1182,1186,
        1191,1194,1197,1199,1202,1207,1214,1218,1222,1232,1239,1243,1246,
        1249,1257,1262,1269,1274,1277,1281,1285,1289,1295,1299,1304,1309,
        1313,1316,1318,1323,1330,1334,1344,1351,1364,1368,1374,1378,1382,
        1387,1394,1398,1403,1410,1414,1418,1423,1427,1430,1437,1442,1445,
        1451,1454,1460,1464,1468,1472,1476,1481,1486,1490,1495,1498,1507,
        1516,1521,1534,1537,1545,1549,1554,1561,1566,1573,1577,1582,1586,
        1592,1596,1599,1602,1606,1612,1616,1619,1622,1628,1631,1634,1638,
        1644,1647,1650,1654,1658,1662,1666,1670,1673,1678,1683,1688,1693,
        1699,1703,1705,1709,1713,1715,1717,1725,1730,1741,1751,1761,1766,
        1770,1777,1781,1787,1800,1803,1810,1824,1828,1832,1837,1841,1845,
        1847,1860,1864,1869,1873,1878,1882,1886,1888,1893,1897,1903,1909,
        1912,1916,1921,1925,1928,1932,1941,1945,1949,1960,1964,1969,1973,
        1977,1982,1984,1987,1991,1994,1997,2003,2007,2011,2017,2021,2025,
        2028,2031,2037,2041,2045,2047,2051,2055,2057,2061,2065,2071,2075,
        2079,2085,2089,2093,2099,2103,2107,2113,2117,2121,2125,2131,2135,
        2147,2151,2155,2157,2161,2165,2169,2173,2176,2187,2191,2195,2199,
        2203,2207,2210,2226,2237,2243,2251,2255,2259,2263,2267,2270,2278,
        2283,2288,2291,2297,2301,2305,2312,2316
    ]

class s_cypherParser ( Parser ):

    grammarFileName = "s_cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "'='", "'+='", "','", "'*'", "'{'", 
                     "'}'", "'('", "')'", "':'", "'['", "']'", "'..'", "'/'", 
                     "'%'", "'^'", "'+'", "'-'", "'<>'", "'<'", "'<='", 
                     "'>'", "'>='", "';'", "'|'", "'$'", "'\\u27E8'", "'\\u3008'", 
                     "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
                     "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", 
                     "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", 
                     "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
                     "'\\uFF0D'", "<INVALID>", "<INVALID>", "'NOW'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "AtT", "PoundValue", "NOW", 
                      "AT_TIME", "SNAPSHOT", "BETWEEN", "SCOPE", "STALE", 
                      "DURING", "OVERLAPS", "UNION", "ALL", "OPTIONAL", 
                      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", 
                      "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", 
                      "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", 
                      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
                      "WHERE", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", 
                      "CONTAINS", "IN", "IS", "NULL", "COUNT", "CASE", "ELSE", 
                      "END", "WHEN", "THEN", "ANY", "NONE", "SINGLE", "EXISTS", 
                      "TRUE", "FALSE", "HexInteger", "DecimalInteger", "OctalInteger", 
                      "HexLetter", "HexDigit", "Digit", "NonZeroDigit", 
                      "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", 
                      "RegularDecimalReal", "StringLiteral", "EscapedChar", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Query = 0
    RULE_oC_Match = 1
    RULE_oC_UpdatingClause = 2
    RULE_oC_SetItem = 3
    RULE_s_SetPropertyItemOne = 4
    RULE_s_SetPropertyItemTwo = 5
    RULE_s_SetValueItem = 6
    RULE_s_SetValueItemExpression = 7
    RULE_s_Stale = 8
    RULE_s_StaleItem = 9
    RULE_oC_Delete = 10
    RULE_s_DeleteItem = 11
    RULE_s_AtTime = 12
    RULE_s_Between = 13
    RULE_s_TimeWindowLimit = 14
    RULE_oC_InQueryCall = 15
    RULE_oC_StandaloneCall = 16
    RULE_s_YieldItems = 17
    RULE_s_YieldItem = 18
    RULE_s_WithPartQuery = 19
    RULE_s_With = 20
    RULE_oC_ExistentialSubquery = 21
    RULE_oC_FilterExpression = 22
    RULE_s_Snapshot = 23
    RULE_s_Scope = 24
    RULE_oC_PatternPart = 25
    RULE_s_PathFunctionPattern = 26
    RULE_s_SinglePathPattern = 27
    RULE_oC_NodePattern = 28
    RULE_s_Properties = 29
    RULE_s_PropertiesPattern = 30
    RULE_s_PropertyNode = 31
    RULE_s_ValueNode = 32
    RULE_oC_RelationshipDetail = 33
    RULE_oC_StringListNullPredicateExpression = 34
    RULE_oC_ListOperatorExpression = 35
    RULE_s_SingleIndexExpression = 36
    RULE_s_DoubleIndexExpression = 37
    RULE_s_LeftExpression = 38
    RULE_s_RightExpression = 39
    RULE_s_AtTExpression = 40
    RULE_s_PropertyLookupTime = 41
    RULE_s_TimePredicateExpression = 42
    RULE_s_AtTElement = 43
    RULE_s_Where = 44
    RULE_s_WhereExpression = 45
    RULE_s_OrWhereExpression = 46
    RULE_s_XorWhereExpression = 47
    RULE_s_AndWhereExpression = 48
    RULE_s_NotWhereExpression = 49
    RULE_s_ComparisonWhereExpression = 50
    RULE_s_MultiplyDivideModuloWhereOperator = 51
    RULE_s_PowerOfWhereOperator = 52
    RULE_s_AddOrSubtractWhereOperator = 53
    RULE_s_ComparisonWhereOperator = 54
    RULE_s_StringListNullPredicateWhereExpression = 55
    RULE_s_AddOrSubtractWhereExpression = 56
    RULE_s_TimePredicateWhereExpression = 57
    RULE_s_StringPredicateWhereExpression = 58
    RULE_s_ListPredicateWhereExpression = 59
    RULE_s_NullPredicateWhereExpression = 60
    RULE_s_MultiplyDivideModuloWhereExpression = 61
    RULE_s_PowerOfWhereExpression = 62
    RULE_s_UnaryAddOrSubtractWhereExpression = 63
    RULE_s_ListOperatorWhereExpression = 64
    RULE_s_PropertyOrLabelsWhereExpression = 65
    RULE_s_AtTWhereExpression = 66
    RULE_s_SingleIndexWhereExpression = 67
    RULE_s_DoubleIndexWhereExpression = 68
    RULE_s_LeftWhereExpression = 69
    RULE_s_RightWhereExpression = 70
    RULE_s_TimePointLiteral = 71
    RULE_oC_SymbolicName = 72
    RULE_oC_ReservedWord = 73
    RULE_oC_Cypher = 74
    RULE_oC_Statement = 75
    RULE_oC_RegularQuery = 76
    RULE_oC_Union = 77
    RULE_oC_SingleQuery = 78
    RULE_oC_SinglePartQuery = 79
    RULE_oC_MultiPartQuery = 80
    RULE_oC_ReadingClause = 81
    RULE_oC_Unwind = 82
    RULE_oC_Merge = 83
    RULE_oC_MergeAction = 84
    RULE_oC_Create = 85
    RULE_oC_Set = 86
    RULE_oC_Remove = 87
    RULE_oC_RemoveItem = 88
    RULE_oC_YieldItems = 89
    RULE_oC_YieldItem = 90
    RULE_oC_With = 91
    RULE_oC_Return = 92
    RULE_oC_ProjectionBody = 93
    RULE_oC_ProjectionItems = 94
    RULE_oC_ProjectionItem = 95
    RULE_oC_Order = 96
    RULE_oC_Skip = 97
    RULE_oC_Limit = 98
    RULE_oC_SortItem = 99
    RULE_oC_Where = 100
    RULE_oC_Pattern = 101
    RULE_oC_AnonymousPatternPart = 102
    RULE_oC_PatternElement = 103
    RULE_oC_RelationshipsPattern = 104
    RULE_oC_PatternElementChain = 105
    RULE_oC_RelationshipPattern = 106
    RULE_oC_Properties = 107
    RULE_oC_RelationshipTypes = 108
    RULE_oC_NodeLabels = 109
    RULE_oC_NodeLabel = 110
    RULE_oC_RangeLiteral = 111
    RULE_oC_LabelName = 112
    RULE_oC_RelTypeName = 113
    RULE_oC_PropertyExpression = 114
    RULE_oC_Expression = 115
    RULE_oC_OrExpression = 116
    RULE_oC_XorExpression = 117
    RULE_oC_AndExpression = 118
    RULE_oC_NotExpression = 119
    RULE_oC_ComparisonExpression = 120
    RULE_oC_StringPredicateExpression = 121
    RULE_oC_ListPredicateExpression = 122
    RULE_oC_NullPredicateExpression = 123
    RULE_oC_AddOrSubtractExpression = 124
    RULE_s_MultiplyDivideModuloOperator = 125
    RULE_s_PowerOfOperator = 126
    RULE_s_AddOrSubtractOperator = 127
    RULE_s_ComparisonOperator = 128
    RULE_oC_MultiplyDivideModuloExpression = 129
    RULE_oC_PowerOfExpression = 130
    RULE_oC_UnaryAddOrSubtractExpression = 131
    RULE_oC_PropertyOrLabelsExpression = 132
    RULE_oC_PropertyLookup = 133
    RULE_oC_Atom = 134
    RULE_oC_CaseExpression = 135
    RULE_oC_CaseAlternative = 136
    RULE_oC_ListComprehension = 137
    RULE_oC_PatternComprehension = 138
    RULE_oC_Quantifier = 139
    RULE_oC_PatternPredicate = 140
    RULE_oC_ParenthesizedExpression = 141
    RULE_oC_IdInColl = 142
    RULE_oC_FunctionInvocation = 143
    RULE_s_FunctionInvocationExpression = 144
    RULE_oC_FunctionName = 145
    RULE_oC_ExplicitProcedureInvocation = 146
    RULE_oC_ImplicitProcedureInvocation = 147
    RULE_oC_ProcedureResultField = 148
    RULE_oC_ProcedureName = 149
    RULE_oC_Namespace = 150
    RULE_oC_Variable = 151
    RULE_oC_Literal = 152
    RULE_oC_BooleanLiteral = 153
    RULE_oC_NumberLiteral = 154
    RULE_oC_IntegerLiteral = 155
    RULE_oC_DoubleLiteral = 156
    RULE_oC_ListLiteral = 157
    RULE_s_ListLiteralExpression = 158
    RULE_oC_MapLiteral = 159
    RULE_s_MapKeyValue = 160
    RULE_oC_PropertyKeyName = 161
    RULE_oC_Parameter = 162
    RULE_oC_SchemaName = 163
    RULE_oC_LeftArrowHead = 164
    RULE_oC_RightArrowHead = 165
    RULE_oC_Dash = 166

    ruleNames =  [ "oC_Query", "oC_Match", "oC_UpdatingClause", "oC_SetItem", 
                   "s_SetPropertyItemOne", "s_SetPropertyItemTwo", "s_SetValueItem", 
                   "s_SetValueItemExpression", "s_Stale", "s_StaleItem", 
                   "oC_Delete", "s_DeleteItem", "s_AtTime", "s_Between", 
                   "s_TimeWindowLimit", "oC_InQueryCall", "oC_StandaloneCall", 
                   "s_YieldItems", "s_YieldItem", "s_WithPartQuery", "s_With", 
                   "oC_ExistentialSubquery", "oC_FilterExpression", "s_Snapshot", 
                   "s_Scope", "oC_PatternPart", "s_PathFunctionPattern", 
                   "s_SinglePathPattern", "oC_NodePattern", "s_Properties", 
                   "s_PropertiesPattern", "s_PropertyNode", "s_ValueNode", 
                   "oC_RelationshipDetail", "oC_StringListNullPredicateExpression", 
                   "oC_ListOperatorExpression", "s_SingleIndexExpression", 
                   "s_DoubleIndexExpression", "s_LeftExpression", "s_RightExpression", 
                   "s_AtTExpression", "s_PropertyLookupTime", "s_TimePredicateExpression", 
                   "s_AtTElement", "s_Where", "s_WhereExpression", "s_OrWhereExpression", 
                   "s_XorWhereExpression", "s_AndWhereExpression", "s_NotWhereExpression", 
                   "s_ComparisonWhereExpression", "s_MultiplyDivideModuloWhereOperator", 
                   "s_PowerOfWhereOperator", "s_AddOrSubtractWhereOperator", 
                   "s_ComparisonWhereOperator", "s_StringListNullPredicateWhereExpression", 
                   "s_AddOrSubtractWhereExpression", "s_TimePredicateWhereExpression", 
                   "s_StringPredicateWhereExpression", "s_ListPredicateWhereExpression", 
                   "s_NullPredicateWhereExpression", "s_MultiplyDivideModuloWhereExpression", 
                   "s_PowerOfWhereExpression", "s_UnaryAddOrSubtractWhereExpression", 
                   "s_ListOperatorWhereExpression", "s_PropertyOrLabelsWhereExpression", 
                   "s_AtTWhereExpression", "s_SingleIndexWhereExpression", 
                   "s_DoubleIndexWhereExpression", "s_LeftWhereExpression", 
                   "s_RightWhereExpression", "s_TimePointLiteral", "oC_SymbolicName", 
                   "oC_ReservedWord", "oC_Cypher", "oC_Statement", "oC_RegularQuery", 
                   "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", 
                   "oC_ReadingClause", "oC_Unwind", "oC_Merge", "oC_MergeAction", 
                   "oC_Create", "oC_Set", "oC_Remove", "oC_RemoveItem", 
                   "oC_YieldItems", "oC_YieldItem", "oC_With", "oC_Return", 
                   "oC_ProjectionBody", "oC_ProjectionItems", "oC_ProjectionItem", 
                   "oC_Order", "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Where", 
                   "oC_Pattern", "oC_AnonymousPatternPart", "oC_PatternElement", 
                   "oC_RelationshipsPattern", "oC_PatternElementChain", 
                   "oC_RelationshipPattern", "oC_Properties", "oC_RelationshipTypes", 
                   "oC_NodeLabels", "oC_NodeLabel", "oC_RangeLiteral", "oC_LabelName", 
                   "oC_RelTypeName", "oC_PropertyExpression", "oC_Expression", 
                   "oC_OrExpression", "oC_XorExpression", "oC_AndExpression", 
                   "oC_NotExpression", "oC_ComparisonExpression", "oC_StringPredicateExpression", 
                   "oC_ListPredicateExpression", "oC_NullPredicateExpression", 
                   "oC_AddOrSubtractExpression", "s_MultiplyDivideModuloOperator", 
                   "s_PowerOfOperator", "s_AddOrSubtractOperator", "s_ComparisonOperator", 
                   "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", 
                   "oC_UnaryAddOrSubtractExpression", "oC_PropertyOrLabelsExpression", 
                   "oC_PropertyLookup", "oC_Atom", "oC_CaseExpression", 
                   "oC_CaseAlternative", "oC_ListComprehension", "oC_PatternComprehension", 
                   "oC_Quantifier", "oC_PatternPredicate", "oC_ParenthesizedExpression", 
                   "oC_IdInColl", "oC_FunctionInvocation", "s_FunctionInvocationExpression", 
                   "oC_FunctionName", "oC_ExplicitProcedureInvocation", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_Variable", "oC_Literal", 
                   "oC_BooleanLiteral", "oC_NumberLiteral", "oC_IntegerLiteral", 
                   "oC_DoubleLiteral", "oC_ListLiteral", "s_ListLiteralExpression", 
                   "oC_MapLiteral", "s_MapKeyValue", "oC_PropertyKeyName", 
                   "oC_Parameter", "oC_SchemaName", "oC_LeftArrowHead", 
                   "oC_RightArrowHead", "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    AtT=46
    PoundValue=47
    NOW=48
    AT_TIME=49
    SNAPSHOT=50
    BETWEEN=51
    SCOPE=52
    STALE=53
    DURING=54
    OVERLAPS=55
    UNION=56
    ALL=57
    OPTIONAL=58
    MATCH=59
    UNWIND=60
    AS=61
    MERGE=62
    ON=63
    CREATE=64
    SET=65
    DETACH=66
    DELETE=67
    REMOVE=68
    CALL=69
    YIELD=70
    WITH=71
    RETURN=72
    DISTINCT=73
    ORDER=74
    BY=75
    L_SKIP=76
    LIMIT=77
    ASCENDING=78
    ASC=79
    DESCENDING=80
    DESC=81
    WHERE=82
    OR=83
    XOR=84
    AND=85
    NOT=86
    STARTS=87
    ENDS=88
    CONTAINS=89
    IN=90
    IS=91
    NULL=92
    COUNT=93
    CASE=94
    ELSE=95
    END=96
    WHEN=97
    THEN=98
    ANY=99
    NONE=100
    SINGLE=101
    EXISTS=102
    TRUE=103
    FALSE=104
    HexInteger=105
    DecimalInteger=106
    OctalInteger=107
    HexLetter=108
    HexDigit=109
    Digit=110
    NonZeroDigit=111
    NonZeroOctDigit=112
    OctDigit=113
    ZeroDigit=114
    ExponentDecimalReal=115
    RegularDecimalReal=116
    StringLiteral=117
    EscapedChar=118
    CONSTRAINT=119
    DO=120
    FOR=121
    REQUIRE=122
    UNIQUE=123
    MANDATORY=124
    SCALAR=125
    OF=126
    ADD=127
    DROP=128
    FILTER=129
    EXTRACT=130
    UnescapedSymbolicName=131
    IdentifierStart=132
    IdentifierPart=133
    EscapedSymbolicName=134
    SP=135
    WHITESPACE=136
    Comment=137

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StandaloneCallContext,0)


        def s_TimeWindowLimit(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimeWindowLimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = s_cypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Query)
        try:
            self.state = 337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 334
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 335
                self.oC_StandaloneCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 336
                self.s_TimeWindowLimit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_Where(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = s_cypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 339
                self.match(s_cypherParser.OPTIONAL)
                self.state = 340
                self.match(s_cypherParser.SP)


            self.state = 343
            self.match(s_cypherParser.MATCH)
            self.state = 345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 344
                self.match(s_cypherParser.SP)


            self.state = 347
            self.oC_Pattern()
            self.state = 355
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 348
                    self.match(s_cypherParser.SP)


                self.state = 353
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 351
                    self.s_AtTime()
                    pass
                elif token in [51]:
                    self.state = 352
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 361
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 357
                    self.match(s_cypherParser.SP)


                self.state = 360
                self.s_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Create(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CreateContext,0)


        def oC_Merge(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MergeContext,0)


        def oC_Delete(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DeleteContext,0)


        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RemoveContext,0)


        def s_Stale(self):
            return self.getTypedRuleContext(s_cypherParser.S_StaleContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = s_cypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_UpdatingClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.state = 363
                self.oC_Create()
                pass
            elif token in [62]:
                self.state = 364
                self.oC_Merge()
                pass
            elif token in [66, 67]:
                self.state = 365
                self.oC_Delete()
                pass
            elif token in [65]:
                self.state = 366
                self.oC_Set()
                pass
            elif token in [68]:
                self.state = 367
                self.oC_Remove()
                pass
            elif token in [53]:
                self.state = 368
                self.s_Stale()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 371
                    self.match(s_cypherParser.SP)


                self.state = 374
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_SetPropertyItemOne(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemOneContext,0)


        def s_SetPropertyItemTwo(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemTwoContext,0)


        def s_SetValueItem(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetValueItemContext,0)


        def s_SetValueItemExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetValueItemExpressionContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = s_cypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 461
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 377
                self.oC_Variable()
                self.state = 379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 378
                    self.match(s_cypherParser.SP)


                self.state = 381
                self.s_AtTElement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 383
                self.oC_Variable()
                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 385
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 384
                        self.match(s_cypherParser.SP)


                    self.state = 387
                    self.s_AtTElement()


                self.state = 390
                self.match(s_cypherParser.T__0)
                self.state = 391
                self.s_SetPropertyItemOne()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 393
                self.oC_Variable()
                self.state = 398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 395
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 394
                        self.match(s_cypherParser.SP)


                    self.state = 397
                    self.s_AtTElement()


                self.state = 400
                self.match(s_cypherParser.T__0)
                self.state = 401
                self.s_SetPropertyItemTwo()
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 402
                    self.match(s_cypherParser.SP)


                self.state = 405
                self.s_SetValueItem()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 407
                self.oC_Variable()
                self.state = 412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 409
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 408
                        self.match(s_cypherParser.SP)


                    self.state = 411
                    self.s_AtTElement()


                self.state = 414
                self.match(s_cypherParser.T__0)
                self.state = 415
                self.s_SetPropertyItemTwo()
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 416
                    self.match(s_cypherParser.SP)


                self.state = 419
                self.match(s_cypherParser.T__1)
                self.state = 421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 420
                    self.match(s_cypherParser.SP)


                self.state = 423
                self.s_SetValueItemExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 425
                self.oC_PropertyExpression()
                self.state = 427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 426
                    self.match(s_cypherParser.SP)


                self.state = 429
                self.match(s_cypherParser.T__1)
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 430
                    self.match(s_cypherParser.SP)


                self.state = 433
                self.oC_Expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 435
                self.oC_Variable()
                self.state = 437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 436
                    self.match(s_cypherParser.SP)


                self.state = 439
                self.match(s_cypherParser.T__1)
                self.state = 441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 440
                    self.match(s_cypherParser.SP)


                self.state = 443
                self.oC_Expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 445
                self.oC_Variable()
                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 446
                    self.match(s_cypherParser.SP)


                self.state = 449
                self.match(s_cypherParser.T__2)
                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 450
                    self.match(s_cypherParser.SP)


                self.state = 453
                self.oC_Expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 455
                self.oC_Variable()
                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 456
                    self.match(s_cypherParser.SP)


                self.state = 459
                self.oC_NodeLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemOneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemOne

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemOne" ):
                listener.enterS_SetPropertyItemOne(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemOne" ):
                listener.exitS_SetPropertyItemOne(self)




    def s_SetPropertyItemOne(self):

        localctx = s_cypherParser.S_SetPropertyItemOneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_s_SetPropertyItemOne)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.oC_PropertyKeyName()
            self.state = 465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 464
                self.match(s_cypherParser.SP)


            self.state = 467
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemTwoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemTwo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemTwo" ):
                listener.enterS_SetPropertyItemTwo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemTwo" ):
                listener.exitS_SetPropertyItemTwo(self)




    def s_SetPropertyItemTwo(self):

        localctx = s_cypherParser.S_SetPropertyItemTwoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_s_SetPropertyItemTwo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.oC_PropertyKeyName()
            self.state = 474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 470
                    self.match(s_cypherParser.SP)


                self.state = 473
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetValueItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetValueItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetValueItem" ):
                listener.enterS_SetValueItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetValueItem" ):
                listener.exitS_SetValueItem(self)




    def s_SetValueItem(self):

        localctx = s_cypherParser.S_SetValueItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_s_SetValueItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self.match(s_cypherParser.PoundValue)
            self.state = 478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 477
                self.match(s_cypherParser.SP)


            self.state = 480
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetValueItemExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetValueItemExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetValueItemExpression" ):
                listener.enterS_SetValueItemExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetValueItemExpression" ):
                listener.exitS_SetValueItemExpression(self)




    def s_SetValueItemExpression(self):

        localctx = s_cypherParser.S_SetValueItemExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_s_SetValueItemExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self.oC_Expression()
            self.state = 487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 483
                    self.match(s_cypherParser.SP)


                self.state = 486
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def s_StaleItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StaleItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StaleItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Stale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Stale" ):
                listener.enterS_Stale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Stale" ):
                listener.exitS_Stale(self)




    def s_Stale(self):

        localctx = s_cypherParser.S_StaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_s_Stale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.match(s_cypherParser.STALE)
            self.state = 491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 490
                self.match(s_cypherParser.SP)


            self.state = 493
            self.s_StaleItem()
            self.state = 504
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 495
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 494
                        self.match(s_cypherParser.SP)


                    self.state = 497
                    self.match(s_cypherParser.T__3)
                    self.state = 499
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 498
                        self.match(s_cypherParser.SP)


                    self.state = 501
                    self.s_StaleItem() 
                self.state = 506
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StaleItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StaleItem" ):
                listener.enterS_StaleItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StaleItem" ):
                listener.exitS_StaleItem(self)




    def s_StaleItem(self):

        localctx = s_cypherParser.S_StaleItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_s_StaleItem)
        self._la = 0 # Token type
        try:
            self.state = 516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 507
                self.oC_Expression()
                self.state = 508
                self.match(s_cypherParser.T__0)
                self.state = 509
                self.oC_PropertyKeyName()
                self.state = 511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 510
                    self.match(s_cypherParser.SP)


                self.state = 513
                self.match(s_cypherParser.PoundValue)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 515
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def s_DeleteItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DeleteItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DeleteItemContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = s_cypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 518
                self.match(s_cypherParser.DETACH)
                self.state = 519
                self.match(s_cypherParser.SP)


            self.state = 522
            self.match(s_cypherParser.DELETE)
            self.state = 524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 523
                self.match(s_cypherParser.SP)


            self.state = 526
            self.s_DeleteItem()
            self.state = 537
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 528
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 527
                        self.match(s_cypherParser.SP)


                    self.state = 530
                    self.match(s_cypherParser.T__3)
                    self.state = 532
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 531
                        self.match(s_cypherParser.SP)


                    self.state = 534
                    self.s_DeleteItem() 
                self.state = 539
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DeleteItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DeleteItem" ):
                listener.enterS_DeleteItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DeleteItem" ):
                listener.exitS_DeleteItem(self)




    def s_DeleteItem(self):

        localctx = s_cypherParser.S_DeleteItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_s_DeleteItem)
        self._la = 0 # Token type
        try:
            self.state = 549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 540
                self.oC_Expression()
                self.state = 541
                self.match(s_cypherParser.T__0)
                self.state = 542
                self.oC_PropertyKeyName()
                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 543
                    self.match(s_cypherParser.SP)


                self.state = 546
                self.match(s_cypherParser.PoundValue)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 548
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTime" ):
                listener.enterS_AtTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTime" ):
                listener.exitS_AtTime(self)




    def s_AtTime(self):

        localctx = s_cypherParser.S_AtTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_s_AtTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(s_cypherParser.AT_TIME)
            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 552
                self.match(s_cypherParser.SP)


            self.state = 555
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_BetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Between

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Between" ):
                listener.enterS_Between(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Between" ):
                listener.exitS_Between(self)




    def s_Between(self):

        localctx = s_cypherParser.S_BetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_s_Between)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.match(s_cypherParser.BETWEEN)
            self.state = 559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 558
                self.match(s_cypherParser.SP)


            self.state = 561
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimeWindowLimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_Snapshot(self):
            return self.getTypedRuleContext(s_cypherParser.S_SnapshotContext,0)


        def s_Scope(self):
            return self.getTypedRuleContext(s_cypherParser.S_ScopeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimeWindowLimit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimeWindowLimit" ):
                listener.enterS_TimeWindowLimit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimeWindowLimit" ):
                listener.exitS_TimeWindowLimit(self)




    def s_TimeWindowLimit(self):

        localctx = s_cypherParser.S_TimeWindowLimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_s_TimeWindowLimit)
        try:
            self.state = 565
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 563
                self.s_Snapshot()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 564
                self.s_Scope()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def s_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.S_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = s_cypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self.match(s_cypherParser.CALL)
            self.state = 568
            self.match(s_cypherParser.SP)
            self.state = 569
            self.oC_ExplicitProcedureInvocation()
            self.state = 576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 570
                    self.match(s_cypherParser.SP)


                self.state = 573
                self.match(s_cypherParser.YIELD)
                self.state = 574
                self.match(s_cypherParser.SP)
                self.state = 575
                self.s_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def s_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.S_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = s_cypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_oC_StandaloneCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.match(s_cypherParser.CALL)
            self.state = 579
            self.match(s_cypherParser.SP)
            self.state = 582
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 580
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 581
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 584
                    self.match(s_cypherParser.SP)


                self.state = 587
                self.match(s_cypherParser.YIELD)
                self.state = 588
                self.match(s_cypherParser.SP)
                self.state = 591
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [5]:
                    self.state = 589
                    self.match(s_cypherParser.T__4)
                    pass
                elif token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                    self.state = 590
                    self.s_YieldItems()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_YieldItemContext,i)


        def s_Where(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_YieldItems" ):
                listener.enterS_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_YieldItems" ):
                listener.exitS_YieldItems(self)




    def s_YieldItems(self):

        localctx = s_cypherParser.S_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_s_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self.s_YieldItem()
            self.state = 606
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 597
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 596
                        self.match(s_cypherParser.SP)


                    self.state = 599
                    self.match(s_cypherParser.T__3)
                    self.state = 601
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 600
                        self.match(s_cypherParser.SP)


                    self.state = 603
                    self.s_YieldItem() 
                self.state = 608
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

            self.state = 613
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 609
                    self.match(s_cypherParser.SP)


                self.state = 612
                self.s_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_YieldItem" ):
                listener.enterS_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_YieldItem" ):
                listener.exitS_YieldItem(self)




    def s_YieldItem(self):

        localctx = s_cypherParser.S_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_s_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.oC_ProcedureResultField()
            self.state = 620
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 616
                self.match(s_cypherParser.SP)
                self.state = 617
                self.match(s_cypherParser.AS)
                self.state = 618
                self.match(s_cypherParser.SP)
                self.state = 619
                self.oC_Variable()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_With(self):
            return self.getTypedRuleContext(s_cypherParser.S_WithContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_WithPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_WithPartQuery" ):
                listener.enterS_WithPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_WithPartQuery" ):
                listener.exitS_WithPartQuery(self)




    def s_WithPartQuery(self):

        localctx = s_cypherParser.S_WithPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_s_WithPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                self.state = 622
                self.oC_ReadingClause()
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 623
                    self.match(s_cypherParser.SP)


                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64001) != 0):
                self.state = 631
                self.oC_UpdatingClause()
                self.state = 633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 632
                    self.match(s_cypherParser.SP)


                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 640
            self.s_With()
            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 641
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def s_Where(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_With" ):
                listener.enterS_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_With" ):
                listener.exitS_With(self)




    def s_With(self):

        localctx = s_cypherParser.S_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_s_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.match(s_cypherParser.WITH)
            self.state = 645
            self.oC_ProjectionBody()
            self.state = 650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 646
                    self.match(s_cypherParser.SP)


                self.state = 649
                self.s_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExistentialSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def s_Where(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExistentialSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExistentialSubquery" ):
                listener.enterOC_ExistentialSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExistentialSubquery" ):
                listener.exitOC_ExistentialSubquery(self)




    def oC_ExistentialSubquery(self):

        localctx = s_cypherParser.OC_ExistentialSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_oC_ExistentialSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.match(s_cypherParser.EXISTS)
            self.state = 654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 653
                self.match(s_cypherParser.SP)


            self.state = 656
            self.match(s_cypherParser.T__5)
            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 657
                self.match(s_cypherParser.SP)


            self.state = 668
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 71, 72]:
                self.state = 660
                self.oC_RegularQuery()
                pass
            elif token in [8, 48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 661
                self.oC_Pattern()
                self.state = 666
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                if la_ == 1:
                    self.state = 663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 662
                        self.match(s_cypherParser.SP)


                    self.state = 665
                    self.s_Where()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 670
                self.match(s_cypherParser.SP)


            self.state = 673
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IdInCollContext,0)


        def s_Where(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = s_cypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self.oC_IdInColl()
            self.state = 680
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 676
                    self.match(s_cypherParser.SP)


                self.state = 679
                self.s_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SnapshotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Snapshot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Snapshot" ):
                listener.enterS_Snapshot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Snapshot" ):
                listener.exitS_Snapshot(self)




    def s_Snapshot(self):

        localctx = s_cypherParser.S_SnapshotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_s_Snapshot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self.match(s_cypherParser.SNAPSHOT)
            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 683
                self.match(s_cypherParser.SP)


            self.state = 686
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Scope" ):
                listener.enterS_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Scope" ):
                listener.exitS_Scope(self)




    def s_Scope(self):

        localctx = s_cypherParser.S_ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_s_Scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.match(s_cypherParser.SCOPE)
            self.state = 690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 689
                self.match(s_cypherParser.SP)


            self.state = 692
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_PathFunctionPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PathFunctionPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AnonymousPatternPartContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = s_cypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 694
                self.oC_Variable()
                self.state = 696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 695
                    self.match(s_cypherParser.SP)


                self.state = 698
                self.match(s_cypherParser.T__1)
                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 699
                    self.match(s_cypherParser.SP)


                self.state = 702
                self.s_PathFunctionPattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 704
                self.oC_Variable()
                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 705
                    self.match(s_cypherParser.SP)


                self.state = 708
                self.match(s_cypherParser.T__1)
                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 709
                    self.match(s_cypherParser.SP)


                self.state = 712
                self.oC_AnonymousPatternPart()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 714
                self.oC_AnonymousPatternPart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PathFunctionPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def s_SinglePathPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_SinglePathPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PathFunctionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PathFunctionPattern" ):
                listener.enterS_PathFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PathFunctionPattern" ):
                listener.exitS_PathFunctionPattern(self)




    def s_PathFunctionPattern(self):

        localctx = s_cypherParser.S_PathFunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_s_PathFunctionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.oC_FunctionName()
            self.state = 719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 718
                self.match(s_cypherParser.SP)


            self.state = 721
            self.match(s_cypherParser.T__7)
            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 722
                self.match(s_cypherParser.SP)


            self.state = 725
            self.s_SinglePathPattern()
            self.state = 727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 726
                self.match(s_cypherParser.SP)


            self.state = 729
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SinglePathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodePatternContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,i)


        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SinglePathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SinglePathPattern" ):
                listener.enterS_SinglePathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SinglePathPattern" ):
                listener.exitS_SinglePathPattern(self)




    def s_SinglePathPattern(self):

        localctx = s_cypherParser.S_SinglePathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_s_SinglePathPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.oC_NodePattern()
            self.state = 733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 732
                self.match(s_cypherParser.SP)


            self.state = 735
            self.oC_RelationshipPattern()
            self.state = 737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 736
                self.match(s_cypherParser.SP)


            self.state = 739
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def s_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = s_cypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.match(s_cypherParser.T__7)
            self.state = 743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 742
                self.match(s_cypherParser.SP)


            self.state = 749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 745
                self.oC_Variable()
                self.state = 747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 746
                    self.match(s_cypherParser.SP)




            self.state = 755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 751
                self.oC_NodeLabels()
                self.state = 753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 752
                    self.match(s_cypherParser.SP)




            self.state = 761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 757
                self.s_AtTElement()
                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 758
                    self.match(s_cypherParser.SP)




            self.state = 767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6 or _la==26:
                self.state = 763
                self.s_Properties()
                self.state = 765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 764
                    self.match(s_cypherParser.SP)




            self.state = 769
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertiesPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesPatternContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Properties" ):
                listener.enterS_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Properties" ):
                listener.exitS_Properties(self)




    def s_Properties(self):

        localctx = s_cypherParser.S_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_s_Properties)
        try:
            self.state = 773
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 771
                self.s_PropertiesPattern()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 772
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_PropertyNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PropertyNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PropertyNodeContext,i)


        def s_ValueNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ValueNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ValueNodeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertiesPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertiesPattern" ):
                listener.enterS_PropertiesPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertiesPattern" ):
                listener.exitS_PropertiesPattern(self)




    def s_PropertiesPattern(self):

        localctx = s_cypherParser.S_PropertiesPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_s_PropertiesPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.match(s_cypherParser.T__5)
            self.state = 777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 776
                self.match(s_cypherParser.SP)


            self.state = 795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 779
                self.s_PropertyNode()
                self.state = 780
                self.match(s_cypherParser.T__9)
                self.state = 781
                self.s_ValueNode()
                self.state = 792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 782
                    self.match(s_cypherParser.T__3)
                    self.state = 784
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 783
                        self.match(s_cypherParser.SP)


                    self.state = 786
                    self.s_PropertyNode()
                    self.state = 787
                    self.match(s_cypherParser.T__9)
                    self.state = 788
                    self.s_ValueNode()
                    self.state = 794
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 797
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyNode" ):
                listener.enterS_PropertyNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyNode" ):
                listener.exitS_PropertyNode(self)




    def s_PropertyNode(self):

        localctx = s_cypherParser.S_PropertyNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_s_PropertyNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.oC_PropertyKeyName()
            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 800
                self.match(s_cypherParser.SP)


            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 803
                self.s_AtTElement()
                self.state = 805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 804
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ValueNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ValueNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ValueNode" ):
                listener.enterS_ValueNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ValueNode" ):
                listener.exitS_ValueNode(self)




    def s_ValueNode(self):

        localctx = s_cypherParser.S_ValueNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_s_ValueNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 809
                self.match(s_cypherParser.SP)


            self.state = 812
            self.oC_Expression()
            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 813
                self.match(s_cypherParser.SP)


            self.state = 820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 816
                self.s_AtTElement()
                self.state = 818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 817
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RangeLiteralContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = s_cypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(s_cypherParser.T__10)
            self.state = 824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 823
                self.match(s_cypherParser.SP)


            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 826
                self.oC_Variable()
                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 827
                    self.match(s_cypherParser.SP)




            self.state = 836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 832
                self.oC_RelationshipTypes()
                self.state = 834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 833
                    self.match(s_cypherParser.SP)




            self.state = 839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 838
                self.oC_RangeLiteral()


            self.state = 845
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 841
                self.s_AtTElement()
                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 842
                    self.match(s_cypherParser.SP)




            self.state = 851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6 or _la==26:
                self.state = 847
                self.oC_Properties()
                self.state = 849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 848
                    self.match(s_cypherParser.SP)




            self.state = 853
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def s_TimePredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateExpressionContext,0)


        def oC_StringPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringPredicateExpressionContext,0)


        def oC_ListPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListPredicateExpressionContext,0)


        def oC_NullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NullPredicateExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringListNullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullPredicateExpression" ):
                listener.enterOC_StringListNullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullPredicateExpression" ):
                listener.exitOC_StringListNullPredicateExpression(self)




    def oC_StringListNullPredicateExpression(self):

        localctx = s_cypherParser.OC_StringListNullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_oC_StringListNullPredicateExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self.oC_AddOrSubtractExpression()
            self.state = 860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 856
                self.s_TimePredicateExpression()

            elif la_ == 2:
                self.state = 857
                self.oC_StringPredicateExpression()

            elif la_ == 3:
                self.state = 858
                self.oC_ListPredicateExpression()

            elif la_ == 4:
                self.state = 859
                self.oC_NullPredicateExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def s_AtTExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTExpressionContext,0)


        def s_SingleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_SingleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_SingleIndexExpressionContext,i)


        def s_DoubleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DoubleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DoubleIndexExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = s_cypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_oC_ListOperatorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 862
                self.oC_PropertyOrLabelsExpression()
                pass

            elif la_ == 2:
                self.state = 863
                self.s_AtTExpression()
                pass


            self.state = 870
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 868
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                    if la_ == 1:
                        self.state = 866
                        self.s_SingleIndexExpression()
                        pass

                    elif la_ == 2:
                        self.state = 867
                        self.s_DoubleIndexExpression()
                        pass

             
                self.state = 872
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SingleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SingleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SingleIndexExpression" ):
                listener.enterS_SingleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SingleIndexExpression" ):
                listener.exitS_SingleIndexExpression(self)




    def s_SingleIndexExpression(self):

        localctx = s_cypherParser.S_SingleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_s_SingleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 873
                self.match(s_cypherParser.SP)


            self.state = 876
            self.match(s_cypherParser.T__10)
            self.state = 877
            self.s_LeftExpression()
            self.state = 878
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DoubleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def s_RightExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_RightExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DoubleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DoubleIndexExpression" ):
                listener.enterS_DoubleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DoubleIndexExpression" ):
                listener.exitS_DoubleIndexExpression(self)




    def s_DoubleIndexExpression(self):

        localctx = s_cypherParser.S_DoubleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_s_DoubleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 880
                self.match(s_cypherParser.SP)


            self.state = 883
            self.match(s_cypherParser.T__10)
            self.state = 885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070976) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 884
                self.s_LeftExpression()


            self.state = 887
            self.match(s_cypherParser.T__12)
            self.state = 889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070976) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 888
                self.s_RightExpression()


            self.state = 891
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_LeftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_LeftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_LeftExpression" ):
                listener.enterS_LeftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_LeftExpression" ):
                listener.exitS_LeftExpression(self)




    def s_LeftExpression(self):

        localctx = s_cypherParser.S_LeftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_s_LeftExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_RightExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_RightExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_RightExpression" ):
                listener.enterS_RightExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_RightExpression" ):
                listener.exitS_RightExpression(self)




    def s_RightExpression(self):

        localctx = s_cypherParser.S_RightExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_s_RightExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def s_PropertyLookupTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupTimeContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTExpression" ):
                listener.enterS_AtTExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTExpression" ):
                listener.exitS_AtTExpression(self)




    def s_AtTExpression(self):

        localctx = s_cypherParser.S_AtTExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_s_AtTExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.oC_Atom()
            self.state = 912
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.state = 902 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 899
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 898
                            self.match(s_cypherParser.SP)


                        self.state = 901
                        self.oC_PropertyLookup()

                    else:
                        raise NoViableAltException(self)
                    self.state = 904 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

                self.state = 910
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                if la_ == 1:
                    self.state = 907
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 906
                        self.match(s_cypherParser.SP)


                    self.state = 909
                    self.match(s_cypherParser.PoundValue)




            self.state = 915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 914
                self.match(s_cypherParser.SP)


            self.state = 917
            self.s_PropertyLookupTime()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyLookupTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyLookupTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyLookupTime" ):
                listener.enterS_PropertyLookupTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyLookupTime" ):
                listener.exitS_PropertyLookupTime(self)




    def s_PropertyLookupTime(self):

        localctx = s_cypherParser.S_PropertyLookupTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_s_PropertyLookupTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self.match(s_cypherParser.AtT)
            self.state = 926
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,136,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 921
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 920
                        self.match(s_cypherParser.SP)


                    self.state = 923
                    self.oC_PropertyLookup() 
                self.state = 928
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateExpression" ):
                listener.enterS_TimePredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateExpression" ):
                listener.exitS_TimePredicateExpression(self)




    def s_TimePredicateExpression(self):

        localctx = s_cypherParser.S_TimePredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_s_TimePredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 929
            self.match(s_cypherParser.SP)
            self.state = 930
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 931
            self.match(s_cypherParser.SP)
            self.state = 932
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_TimePointLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_TimePointLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_TimePointLiteralContext,i)


        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTElement" ):
                listener.enterS_AtTElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTElement" ):
                listener.exitS_AtTElement(self)




    def s_AtTElement(self):

        localctx = s_cypherParser.S_AtTElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_s_AtTElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self.match(s_cypherParser.AtT)
            self.state = 936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 935
                self.match(s_cypherParser.SP)


            self.state = 938
            self.match(s_cypherParser.T__7)
            self.state = 940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 939
                self.match(s_cypherParser.SP)


            self.state = 942
            self.s_TimePointLiteral()
            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 943
                self.match(s_cypherParser.SP)


            self.state = 946
            self.match(s_cypherParser.T__3)
            self.state = 948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 947
                self.match(s_cypherParser.SP)


            self.state = 952
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 117]:
                self.state = 950
                self.s_TimePointLiteral()
                pass
            elif token in [48]:
                self.state = 951
                self.match(s_cypherParser.NOW)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 954
                self.match(s_cypherParser.SP)


            self.state = 957
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def s_WhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Where" ):
                listener.enterS_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Where" ):
                listener.exitS_Where(self)




    def s_Where(self):

        localctx = s_cypherParser.S_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_s_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            self.match(s_cypherParser.WHERE)
            self.state = 960
            self.match(s_cypherParser.SP)
            self.state = 961
            self.s_WhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_OrWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_OrWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_WhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_WhereExpression" ):
                listener.enterS_WhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_WhereExpression" ):
                listener.exitS_WhereExpression(self)




    def s_WhereExpression(self):

        localctx = s_cypherParser.S_WhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_s_WhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.s_OrWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_OrWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_XorWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_XorWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_XorWhereExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_OrWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_OrWhereExpression" ):
                listener.enterS_OrWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_OrWhereExpression" ):
                listener.exitS_OrWhereExpression(self)




    def s_OrWhereExpression(self):

        localctx = s_cypherParser.S_OrWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_s_OrWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.s_XorWhereExpression()
            self.state = 972
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 966
                    self.match(s_cypherParser.SP)
                    self.state = 967
                    self.match(s_cypherParser.OR)
                    self.state = 968
                    self.match(s_cypherParser.SP)
                    self.state = 969
                    self.s_XorWhereExpression() 
                self.state = 974
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_XorWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_AndWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AndWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AndWhereExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_XorWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_XorWhereExpression" ):
                listener.enterS_XorWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_XorWhereExpression" ):
                listener.exitS_XorWhereExpression(self)




    def s_XorWhereExpression(self):

        localctx = s_cypherParser.S_XorWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_s_XorWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.s_AndWhereExpression()
            self.state = 982
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 976
                    self.match(s_cypherParser.SP)
                    self.state = 977
                    self.match(s_cypherParser.XOR)
                    self.state = 978
                    self.match(s_cypherParser.SP)
                    self.state = 979
                    self.s_AndWhereExpression() 
                self.state = 984
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AndWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_NotWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_NotWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_NotWhereExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AndWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AndWhereExpression" ):
                listener.enterS_AndWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AndWhereExpression" ):
                listener.exitS_AndWhereExpression(self)




    def s_AndWhereExpression(self):

        localctx = s_cypherParser.S_AndWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_s_AndWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.s_NotWhereExpression()
            self.state = 992
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 986
                    self.match(s_cypherParser.SP)
                    self.state = 987
                    self.match(s_cypherParser.AND)
                    self.state = 988
                    self.match(s_cypherParser.SP)
                    self.state = 989
                    self.s_NotWhereExpression() 
                self.state = 994
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_NotWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_ComparisonWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_ComparisonWhereExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_NotWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_NotWhereExpression" ):
                listener.enterS_NotWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_NotWhereExpression" ):
                listener.exitS_NotWhereExpression(self)




    def s_NotWhereExpression(self):

        localctx = s_cypherParser.S_NotWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_s_NotWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 995
                self.match(s_cypherParser.NOT)
                self.state = 997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 996
                    self.match(s_cypherParser.SP)


                self.state = 1003
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1004
            self.s_ComparisonWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ComparisonWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_StringListNullPredicateWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StringListNullPredicateWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StringListNullPredicateWhereExpressionContext,i)


        def s_ComparisonWhereOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ComparisonWhereOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ComparisonWhereOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ComparisonWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ComparisonWhereExpression" ):
                listener.enterS_ComparisonWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ComparisonWhereExpression" ):
                listener.exitS_ComparisonWhereExpression(self)




    def s_ComparisonWhereExpression(self):

        localctx = s_cypherParser.S_ComparisonWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_s_ComparisonWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1006
            self.s_StringListNullPredicateWhereExpression()
            self.state = 1018
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1008
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1007
                        self.match(s_cypherParser.SP)


                    self.state = 1010
                    self.s_ComparisonWhereOperator()
                    self.state = 1012
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1011
                        self.match(s_cypherParser.SP)


                    self.state = 1014
                    self.s_StringListNullPredicateWhereExpression() 
                self.state = 1020
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MultiplyDivideModuloWhereOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MultiplyDivideModuloWhereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MultiplyDivideModuloWhereOperator" ):
                listener.enterS_MultiplyDivideModuloWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MultiplyDivideModuloWhereOperator" ):
                listener.exitS_MultiplyDivideModuloWhereOperator(self)




    def s_MultiplyDivideModuloWhereOperator(self):

        localctx = s_cypherParser.S_MultiplyDivideModuloWhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_s_MultiplyDivideModuloWhereOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 49184) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PowerOfWhereOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PowerOfWhereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PowerOfWhereOperator" ):
                listener.enterS_PowerOfWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PowerOfWhereOperator" ):
                listener.exitS_PowerOfWhereOperator(self)




    def s_PowerOfWhereOperator(self):

        localctx = s_cypherParser.S_PowerOfWhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_s_PowerOfWhereOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self.match(s_cypherParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AddOrSubtractWhereOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AddOrSubtractWhereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AddOrSubtractWhereOperator" ):
                listener.enterS_AddOrSubtractWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AddOrSubtractWhereOperator" ):
                listener.exitS_AddOrSubtractWhereOperator(self)




    def s_AddOrSubtractWhereOperator(self):

        localctx = s_cypherParser.S_AddOrSubtractWhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_s_AddOrSubtractWhereOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            _la = self._input.LA(1)
            if not(_la==17 or _la==18):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ComparisonWhereOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ComparisonWhereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ComparisonWhereOperator" ):
                listener.enterS_ComparisonWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ComparisonWhereOperator" ):
                listener.exitS_ComparisonWhereOperator(self)




    def s_ComparisonWhereOperator(self):

        localctx = s_cypherParser.S_ComparisonWhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_s_ComparisonWhereOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 16252932) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StringListNullPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def s_TimePredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateWhereExpressionContext,0)


        def s_StringPredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_StringPredicateWhereExpressionContext,0)


        def s_ListPredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_ListPredicateWhereExpressionContext,0)


        def s_NullPredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_NullPredicateWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StringListNullPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StringListNullPredicateWhereExpression" ):
                listener.enterS_StringListNullPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StringListNullPredicateWhereExpression" ):
                listener.exitS_StringListNullPredicateWhereExpression(self)




    def s_StringListNullPredicateWhereExpression(self):

        localctx = s_cypherParser.S_StringListNullPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_s_StringListNullPredicateWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self.s_AddOrSubtractWhereExpression()
            self.state = 1034
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.state = 1030
                self.s_TimePredicateWhereExpression()

            elif la_ == 2:
                self.state = 1031
                self.s_StringPredicateWhereExpression()

            elif la_ == 3:
                self.state = 1032
                self.s_ListPredicateWhereExpression()

            elif la_ == 4:
                self.state = 1033
                self.s_NullPredicateWhereExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AddOrSubtractWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_MultiplyDivideModuloWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MultiplyDivideModuloWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MultiplyDivideModuloWhereExpressionContext,i)


        def s_AddOrSubtractWhereOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AddOrSubtractWhereOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AddOrSubtractWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AddOrSubtractWhereExpression" ):
                listener.enterS_AddOrSubtractWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AddOrSubtractWhereExpression" ):
                listener.exitS_AddOrSubtractWhereExpression(self)




    def s_AddOrSubtractWhereExpression(self):

        localctx = s_cypherParser.S_AddOrSubtractWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_s_AddOrSubtractWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036
            self.s_MultiplyDivideModuloWhereExpression()
            self.state = 1057
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,157,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1055
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                    if la_ == 1:
                        self.state = 1038
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1037
                            self.match(s_cypherParser.SP)


                        self.state = 1040
                        self.s_AddOrSubtractWhereOperator()
                        self.state = 1042
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1041
                            self.match(s_cypherParser.SP)


                        self.state = 1044
                        self.s_MultiplyDivideModuloWhereExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1047
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1046
                            self.match(s_cypherParser.SP)


                        self.state = 1049
                        self.s_AddOrSubtractWhereOperator()
                        self.state = 1051
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1050
                            self.match(s_cypherParser.SP)


                        self.state = 1053
                        self.s_MultiplyDivideModuloWhereExpression()
                        pass

             
                self.state = 1059
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,157,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateWhereExpression" ):
                listener.enterS_TimePredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateWhereExpression" ):
                listener.exitS_TimePredicateWhereExpression(self)




    def s_TimePredicateWhereExpression(self):

        localctx = s_cypherParser.S_TimePredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_s_TimePredicateWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self.match(s_cypherParser.SP)
            self.state = 1061
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1062
            self.match(s_cypherParser.SP)
            self.state = 1063
            self.s_AddOrSubtractWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StringPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StringPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StringPredicateWhereExpression" ):
                listener.enterS_StringPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StringPredicateWhereExpression" ):
                listener.exitS_StringPredicateWhereExpression(self)




    def s_StringPredicateWhereExpression(self):

        localctx = s_cypherParser.S_StringPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_s_StringPredicateWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1075
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 1065
                self.match(s_cypherParser.SP)
                self.state = 1066
                self.match(s_cypherParser.STARTS)
                self.state = 1067
                self.match(s_cypherParser.SP)
                self.state = 1068
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1069
                self.match(s_cypherParser.SP)
                self.state = 1070
                self.match(s_cypherParser.ENDS)
                self.state = 1071
                self.match(s_cypherParser.SP)
                self.state = 1072
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1073
                self.match(s_cypherParser.SP)
                self.state = 1074
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 1078
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1077
                self.match(s_cypherParser.SP)


            self.state = 1080
            self.s_AddOrSubtractWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ListPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ListPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ListPredicateWhereExpression" ):
                listener.enterS_ListPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ListPredicateWhereExpression" ):
                listener.exitS_ListPredicateWhereExpression(self)




    def s_ListPredicateWhereExpression(self):

        localctx = s_cypherParser.S_ListPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_s_ListPredicateWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1082
            self.match(s_cypherParser.SP)
            self.state = 1083
            self.match(s_cypherParser.IN)
            self.state = 1085
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1084
                self.match(s_cypherParser.SP)


            self.state = 1087
            self.s_AddOrSubtractWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_NullPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_NullPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_NullPredicateWhereExpression" ):
                listener.enterS_NullPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_NullPredicateWhereExpression" ):
                listener.exitS_NullPredicateWhereExpression(self)




    def s_NullPredicateWhereExpression(self):

        localctx = s_cypherParser.S_NullPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_s_NullPredicateWhereExpression)
        try:
            self.state = 1099
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1089
                self.match(s_cypherParser.SP)
                self.state = 1090
                self.match(s_cypherParser.IS)
                self.state = 1091
                self.match(s_cypherParser.SP)
                self.state = 1092
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1093
                self.match(s_cypherParser.SP)
                self.state = 1094
                self.match(s_cypherParser.IS)
                self.state = 1095
                self.match(s_cypherParser.SP)
                self.state = 1096
                self.match(s_cypherParser.NOT)
                self.state = 1097
                self.match(s_cypherParser.SP)
                self.state = 1098
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MultiplyDivideModuloWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PowerOfWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PowerOfWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PowerOfWhereExpressionContext,i)


        def s_MultiplyDivideModuloWhereOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MultiplyDivideModuloWhereOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MultiplyDivideModuloWhereOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MultiplyDivideModuloWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MultiplyDivideModuloWhereExpression" ):
                listener.enterS_MultiplyDivideModuloWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MultiplyDivideModuloWhereExpression" ):
                listener.exitS_MultiplyDivideModuloWhereExpression(self)




    def s_MultiplyDivideModuloWhereExpression(self):

        localctx = s_cypherParser.S_MultiplyDivideModuloWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_s_MultiplyDivideModuloWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            self.s_PowerOfWhereExpression()
            self.state = 1131
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,169,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1129
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                    if la_ == 1:
                        self.state = 1103
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1102
                            self.match(s_cypherParser.SP)


                        self.state = 1105
                        self.s_MultiplyDivideModuloWhereOperator()
                        self.state = 1107
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1106
                            self.match(s_cypherParser.SP)


                        self.state = 1109
                        self.s_PowerOfWhereExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1112
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1111
                            self.match(s_cypherParser.SP)


                        self.state = 1114
                        self.s_MultiplyDivideModuloWhereOperator()
                        self.state = 1116
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1115
                            self.match(s_cypherParser.SP)


                        self.state = 1118
                        self.s_PowerOfWhereExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1121
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1120
                            self.match(s_cypherParser.SP)


                        self.state = 1123
                        self.s_MultiplyDivideModuloWhereOperator()
                        self.state = 1125
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1124
                            self.match(s_cypherParser.SP)


                        self.state = 1127
                        self.s_PowerOfWhereExpression()
                        pass

             
                self.state = 1133
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PowerOfWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_UnaryAddOrSubtractWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_UnaryAddOrSubtractWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_UnaryAddOrSubtractWhereExpressionContext,i)


        def s_PowerOfWhereOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PowerOfWhereOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PowerOfWhereOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PowerOfWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PowerOfWhereExpression" ):
                listener.enterS_PowerOfWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PowerOfWhereExpression" ):
                listener.exitS_PowerOfWhereExpression(self)




    def s_PowerOfWhereExpression(self):

        localctx = s_cypherParser.S_PowerOfWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_s_PowerOfWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.s_UnaryAddOrSubtractWhereExpression()
            self.state = 1146
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1136
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1135
                        self.match(s_cypherParser.SP)


                    self.state = 1138
                    self.s_PowerOfWhereOperator()
                    self.state = 1140
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1139
                        self.match(s_cypherParser.SP)


                    self.state = 1142
                    self.s_UnaryAddOrSubtractWhereExpression() 
                self.state = 1148
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_UnaryAddOrSubtractWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_ListOperatorWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_ListOperatorWhereExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_UnaryAddOrSubtractWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_UnaryAddOrSubtractWhereExpression" ):
                listener.enterS_UnaryAddOrSubtractWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_UnaryAddOrSubtractWhereExpression" ):
                listener.exitS_UnaryAddOrSubtractWhereExpression(self)




    def s_UnaryAddOrSubtractWhereExpression(self):

        localctx = s_cypherParser.S_UnaryAddOrSubtractWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_s_UnaryAddOrSubtractWhereExpression)
        self._la = 0 # Token type
        try:
            self.state = 1155
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 8, 11, 26, 48, 57, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1149
                self.s_ListOperatorWhereExpression()
                pass
            elif token in [17, 18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1150
                _la = self._input.LA(1)
                if not(_la==17 or _la==18):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1151
                    self.match(s_cypherParser.SP)


                self.state = 1154
                self.s_ListOperatorWhereExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ListOperatorWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertyOrLabelsWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyOrLabelsWhereExpressionContext,0)


        def s_AtTWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTWhereExpressionContext,0)


        def s_SingleIndexWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_SingleIndexWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_SingleIndexWhereExpressionContext,i)


        def s_DoubleIndexWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DoubleIndexWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DoubleIndexWhereExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ListOperatorWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ListOperatorWhereExpression" ):
                listener.enterS_ListOperatorWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ListOperatorWhereExpression" ):
                listener.exitS_ListOperatorWhereExpression(self)




    def s_ListOperatorWhereExpression(self):

        localctx = s_cypherParser.S_ListOperatorWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_s_ListOperatorWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.state = 1157
                self.s_PropertyOrLabelsWhereExpression()
                pass

            elif la_ == 2:
                self.state = 1158
                self.s_AtTWhereExpression()
                pass


            self.state = 1165
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,177,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1163
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                    if la_ == 1:
                        self.state = 1161
                        self.s_SingleIndexWhereExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1162
                        self.s_DoubleIndexWhereExpression()
                        pass

             
                self.state = 1167
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,177,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyOrLabelsWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyOrLabelsWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyOrLabelsWhereExpression" ):
                listener.enterS_PropertyOrLabelsWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyOrLabelsWhereExpression" ):
                listener.exitS_PropertyOrLabelsWhereExpression(self)




    def s_PropertyOrLabelsWhereExpression(self):

        localctx = s_cypherParser.S_PropertyOrLabelsWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_s_PropertyOrLabelsWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1168
            self.oC_Atom()
            self.state = 1175
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,179,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1170
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1169
                        self.match(s_cypherParser.SP)


                    self.state = 1172
                    self.oC_PropertyLookup() 
                self.state = 1177
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,179,self._ctx)

            self.state = 1182
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.state = 1179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1178
                    self.match(s_cypherParser.SP)


                self.state = 1181
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def s_PropertyLookupTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupTimeContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTWhereExpression" ):
                listener.enterS_AtTWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTWhereExpression" ):
                listener.exitS_AtTWhereExpression(self)




    def s_AtTWhereExpression(self):

        localctx = s_cypherParser.S_AtTWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_s_AtTWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self.oC_Atom()
            self.state = 1199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 1189 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1186
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1185
                            self.match(s_cypherParser.SP)


                        self.state = 1188
                        self.oC_PropertyLookup()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1191 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,183,self._ctx)

                self.state = 1197
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1194
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1193
                        self.match(s_cypherParser.SP)


                    self.state = 1196
                    self.match(s_cypherParser.PoundValue)




            self.state = 1202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1201
                self.match(s_cypherParser.SP)


            self.state = 1204
            self.s_PropertyLookupTime()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SingleIndexWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_LeftWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftWhereExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SingleIndexWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SingleIndexWhereExpression" ):
                listener.enterS_SingleIndexWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SingleIndexWhereExpression" ):
                listener.exitS_SingleIndexWhereExpression(self)




    def s_SingleIndexWhereExpression(self):

        localctx = s_cypherParser.S_SingleIndexWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_s_SingleIndexWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1206
                self.match(s_cypherParser.SP)


            self.state = 1209
            self.match(s_cypherParser.T__10)
            self.state = 1210
            self.s_LeftWhereExpression()
            self.state = 1211
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DoubleIndexWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def s_LeftWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftWhereExpressionContext,0)


        def s_RightWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_RightWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DoubleIndexWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DoubleIndexWhereExpression" ):
                listener.enterS_DoubleIndexWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DoubleIndexWhereExpression" ):
                listener.exitS_DoubleIndexWhereExpression(self)




    def s_DoubleIndexWhereExpression(self):

        localctx = s_cypherParser.S_DoubleIndexWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_s_DoubleIndexWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1213
                self.match(s_cypherParser.SP)


            self.state = 1216
            self.match(s_cypherParser.T__10)
            self.state = 1218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070976) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1217
                self.s_LeftWhereExpression()


            self.state = 1220
            self.match(s_cypherParser.T__12)
            self.state = 1222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070976) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1221
                self.s_RightWhereExpression()


            self.state = 1224
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_LeftWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_LeftWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_LeftWhereExpression" ):
                listener.enterS_LeftWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_LeftWhereExpression" ):
                listener.exitS_LeftWhereExpression(self)




    def s_LeftWhereExpression(self):

        localctx = s_cypherParser.S_LeftWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_s_LeftWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1226
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_RightWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_RightWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_RightWhereExpression" ):
                listener.enterS_RightWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_RightWhereExpression" ):
                listener.exitS_RightWhereExpression(self)




    def s_RightWhereExpression(self):

        localctx = s_cypherParser.S_RightWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_s_RightWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1228
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePointLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePointLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePointLiteral" ):
                listener.enterS_TimePointLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePointLiteral" ):
                listener.exitS_TimePointLiteral(self)




    def s_TimePointLiteral(self):

        localctx = s_cypherParser.S_TimePointLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_s_TimePointLiteral)
        try:
            self.state = 1232
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1230
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1231
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(s_cypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(s_cypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(s_cypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(s_cypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(s_cypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = s_cypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1234
            _la = self._input.LA(1)
            if not(_la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(s_cypherParser.AND, 0)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def OR(self):
            return self.getToken(s_cypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(s_cypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(s_cypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(s_cypherParser.DO, 0)

        def FOR(self):
            return self.getToken(s_cypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(s_cypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(s_cypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(s_cypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(s_cypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(s_cypherParser.OF, 0)

        def ADD(self):
            return self.getToken(s_cypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(s_cypherParser.DROP, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = s_cypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1236
            _la = self._input.LA(1)
            if not(((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 128317405001678847) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(s_cypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = s_cypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1238
                self.match(s_cypherParser.SP)


            self.state = 1241
            self.oC_Statement()
            self.state = 1246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 1243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1242
                    self.match(s_cypherParser.SP)


                self.state = 1245
                self.match(s_cypherParser.T__23)


            self.state = 1249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1248
                self.match(s_cypherParser.SP)


            self.state = 1251
            self.match(s_cypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = s_cypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1253
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = s_cypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1255
            self.oC_SingleQuery()
            self.state = 1262
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,198,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1257
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1256
                        self.match(s_cypherParser.SP)


                    self.state = 1259
                    self.oC_Union() 
                self.state = 1264
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,198,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = s_cypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 1277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1265
                self.match(s_cypherParser.UNION)
                self.state = 1266
                self.match(s_cypherParser.SP)
                self.state = 1267
                self.match(s_cypherParser.ALL)
                self.state = 1269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1268
                    self.match(s_cypherParser.SP)


                self.state = 1271
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1272
                self.match(s_cypherParser.UNION)
                self.state = 1274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1273
                    self.match(s_cypherParser.SP)


                self.state = 1276
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = s_cypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_SingleQuery)
        try:
            self.state = 1281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1279
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1280
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = s_cypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 1318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 1283
                    self.oC_ReadingClause()
                    self.state = 1285
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1284
                        self.match(s_cypherParser.SP)


                    self.state = 1291
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1292
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 1293
                    self.oC_ReadingClause()
                    self.state = 1295
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1294
                        self.match(s_cypherParser.SP)


                    self.state = 1301
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1302
                self.oC_UpdatingClause()
                self.state = 1309
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,208,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1304
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1303
                            self.match(s_cypherParser.SP)


                        self.state = 1306
                        self.oC_UpdatingClause() 
                    self.state = 1311
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,208,self._ctx)

                self.state = 1316
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                if la_ == 1:
                    self.state = 1313
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1312
                        self.match(s_cypherParser.SP)


                    self.state = 1315
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def s_WithPartQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_WithPartQueryContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_WithPartQueryContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = s_cypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_MultiPartQuery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1320
                    self.s_WithPartQuery()

                else:
                    raise NoViableAltException(self)
                self.state = 1323 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

            self.state = 1325
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(s_cypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = s_cypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_ReadingClause)
        try:
            self.state = 1330
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1327
                self.oC_Match()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1328
                self.oC_Unwind()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1329
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = s_cypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1332
            self.match(s_cypherParser.UNWIND)
            self.state = 1334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1333
                self.match(s_cypherParser.SP)


            self.state = 1336
            self.oC_Expression()
            self.state = 1337
            self.match(s_cypherParser.SP)
            self.state = 1338
            self.match(s_cypherParser.AS)
            self.state = 1339
            self.match(s_cypherParser.SP)
            self.state = 1340
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = s_cypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1342
            self.match(s_cypherParser.MERGE)
            self.state = 1344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1343
                self.match(s_cypherParser.SP)


            self.state = 1346
            self.oC_PatternPart()
            self.state = 1351
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,216,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1347
                    self.match(s_cypherParser.SP)
                    self.state = 1348
                    self.oC_MergeAction() 
                self.state = 1353
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,216,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = s_cypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_MergeAction)
        try:
            self.state = 1364
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1354
                self.match(s_cypherParser.ON)
                self.state = 1355
                self.match(s_cypherParser.SP)
                self.state = 1356
                self.match(s_cypherParser.MATCH)
                self.state = 1357
                self.match(s_cypherParser.SP)
                self.state = 1358
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1359
                self.match(s_cypherParser.ON)
                self.state = 1360
                self.match(s_cypherParser.SP)
                self.state = 1361
                self.match(s_cypherParser.CREATE)
                self.state = 1362
                self.match(s_cypherParser.SP)
                self.state = 1363
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = s_cypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1366
            self.match(s_cypherParser.CREATE)
            self.state = 1368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1367
                self.match(s_cypherParser.SP)


            self.state = 1370
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = s_cypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1372
            self.match(s_cypherParser.SET)
            self.state = 1374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1373
                self.match(s_cypherParser.SP)


            self.state = 1376
            self.oC_SetItem()
            self.state = 1387
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,222,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1378
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1377
                        self.match(s_cypherParser.SP)


                    self.state = 1380
                    self.match(s_cypherParser.T__3)
                    self.state = 1382
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1381
                        self.match(s_cypherParser.SP)


                    self.state = 1384
                    self.oC_SetItem() 
                self.state = 1389
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,222,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = s_cypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1390
            self.match(s_cypherParser.REMOVE)
            self.state = 1391
            self.match(s_cypherParser.SP)
            self.state = 1392
            self.oC_RemoveItem()
            self.state = 1403
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,225,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1394
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1393
                        self.match(s_cypherParser.SP)


                    self.state = 1396
                    self.match(s_cypherParser.T__3)
                    self.state = 1398
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1397
                        self.match(s_cypherParser.SP)


                    self.state = 1400
                    self.oC_RemoveItem() 
                self.state = 1405
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,225,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = s_cypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_RemoveItem)
        try:
            self.state = 1410
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1406
                self.oC_Variable()
                self.state = 1407
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1409
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = s_cypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1412
            self.oC_YieldItem()
            self.state = 1423
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,229,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1414
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1413
                        self.match(s_cypherParser.SP)


                    self.state = 1416
                    self.match(s_cypherParser.T__3)
                    self.state = 1418
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1417
                        self.match(s_cypherParser.SP)


                    self.state = 1420
                    self.oC_YieldItem() 
                self.state = 1425
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,229,self._ctx)

            self.state = 1430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82 or _la==135:
                self.state = 1427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1426
                    self.match(s_cypherParser.SP)


                self.state = 1429
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = s_cypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1432
            self.oC_ProcedureResultField()
            self.state = 1437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.state = 1433
                self.match(s_cypherParser.SP)
                self.state = 1434
                self.match(s_cypherParser.AS)
                self.state = 1435
                self.match(s_cypherParser.SP)
                self.state = 1436
                self.oC_Variable()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = s_cypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1439
            self.match(s_cypherParser.WITH)
            self.state = 1440
            self.oC_ProjectionBody()
            self.state = 1445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82 or _la==135:
                self.state = 1442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1441
                    self.match(s_cypherParser.SP)


                self.state = 1444
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = s_cypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1447
            self.match(s_cypherParser.RETURN)
            self.state = 1448
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)




    def oC_ProjectionBody(self):

        localctx = s_cypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.state = 1451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1450
                    self.match(s_cypherParser.SP)


                self.state = 1453
                self.match(s_cypherParser.DISTINCT)


            self.state = 1456
            self.match(s_cypherParser.SP)
            self.state = 1457
            self.oC_ProjectionItems()
            self.state = 1460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.state = 1458
                self.match(s_cypherParser.SP)
                self.state = 1459
                self.oC_Order()


            self.state = 1464
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
            if la_ == 1:
                self.state = 1462
                self.match(s_cypherParser.SP)
                self.state = 1463
                self.oC_Skip()


            self.state = 1468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                self.state = 1466
                self.match(s_cypherParser.SP)
                self.state = 1467
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)




    def oC_ProjectionItems(self):

        localctx = s_cypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 1498
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1470
                self.match(s_cypherParser.T__4)
                self.state = 1481
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,242,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1472
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1471
                            self.match(s_cypherParser.SP)


                        self.state = 1474
                        self.match(s_cypherParser.T__3)
                        self.state = 1476
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1475
                            self.match(s_cypherParser.SP)


                        self.state = 1478
                        self.oC_ProjectionItem() 
                    self.state = 1483
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,242,self._ctx)

                pass
            elif token in [6, 8, 11, 17, 18, 26, 48, 57, 86, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1484
                self.oC_ProjectionItem()
                self.state = 1495
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,245,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1486
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1485
                            self.match(s_cypherParser.SP)


                        self.state = 1488
                        self.match(s_cypherParser.T__3)
                        self.state = 1490
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1489
                            self.match(s_cypherParser.SP)


                        self.state = 1492
                        self.oC_ProjectionItem() 
                    self.state = 1497
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,245,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)




    def oC_ProjectionItem(self):

        localctx = s_cypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_ProjectionItem)
        try:
            self.state = 1507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1500
                self.oC_Expression()
                self.state = 1501
                self.match(s_cypherParser.SP)
                self.state = 1502
                self.match(s_cypherParser.AS)
                self.state = 1503
                self.match(s_cypherParser.SP)
                self.state = 1504
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1506
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = s_cypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1509
            self.match(s_cypherParser.ORDER)
            self.state = 1510
            self.match(s_cypherParser.SP)
            self.state = 1511
            self.match(s_cypherParser.BY)
            self.state = 1512
            self.match(s_cypherParser.SP)
            self.state = 1513
            self.oC_SortItem()
            self.state = 1521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1514
                self.match(s_cypherParser.T__3)
                self.state = 1516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1515
                    self.match(s_cypherParser.SP)


                self.state = 1518
                self.oC_SortItem()
                self.state = 1523
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = s_cypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1524
            self.match(s_cypherParser.L_SKIP)
            self.state = 1525
            self.match(s_cypherParser.SP)
            self.state = 1526
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = s_cypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1528
            self.match(s_cypherParser.LIMIT)
            self.state = 1529
            self.match(s_cypherParser.SP)
            self.state = 1530
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = s_cypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1532
            self.oC_Expression()
            self.state = 1537
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.state = 1534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1533
                    self.match(s_cypherParser.SP)


                self.state = 1536
                _la = self._input.LA(1)
                if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = s_cypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1539
            self.match(s_cypherParser.WHERE)
            self.state = 1540
            self.match(s_cypherParser.SP)
            self.state = 1541
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = s_cypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1543
            self.oC_PatternPart()
            self.state = 1554
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,254,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1544
                        self.match(s_cypherParser.SP)


                    self.state = 1547
                    self.match(s_cypherParser.T__3)
                    self.state = 1549
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1548
                        self.match(s_cypherParser.SP)


                    self.state = 1551
                    self.oC_PatternPart() 
                self.state = 1556
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,254,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = s_cypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1557
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = s_cypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 1573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1559
                self.oC_NodePattern()
                self.state = 1566
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,256,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1561
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1560
                            self.match(s_cypherParser.SP)


                        self.state = 1563
                        self.oC_PatternElementChain() 
                    self.state = 1568
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,256,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1569
                self.match(s_cypherParser.T__7)
                self.state = 1570
                self.oC_PatternElement()
                self.state = 1571
                self.match(s_cypherParser.T__8)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = s_cypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1575
            self.oC_NodePattern()
            self.state = 1580 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1577
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1576
                        self.match(s_cypherParser.SP)


                    self.state = 1579
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 1582 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,259,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = s_cypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1584
            self.oC_RelationshipPattern()
            self.state = 1586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1585
                self.match(s_cypherParser.SP)


            self.state = 1588
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = s_cypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 1654
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1590
                self.oC_LeftArrowHead()
                self.state = 1592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1591
                    self.match(s_cypherParser.SP)


                self.state = 1594
                self.oC_Dash()
                self.state = 1596
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
                if la_ == 1:
                    self.state = 1595
                    self.match(s_cypherParser.SP)


                self.state = 1599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1598
                    self.oC_RelationshipDetail()


                self.state = 1602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1601
                    self.match(s_cypherParser.SP)


                self.state = 1604
                self.oC_Dash()
                self.state = 1606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1605
                    self.match(s_cypherParser.SP)


                self.state = 1608
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1610
                self.oC_LeftArrowHead()
                self.state = 1612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1611
                    self.match(s_cypherParser.SP)


                self.state = 1614
                self.oC_Dash()
                self.state = 1616
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
                if la_ == 1:
                    self.state = 1615
                    self.match(s_cypherParser.SP)


                self.state = 1619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1618
                    self.oC_RelationshipDetail()


                self.state = 1622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1621
                    self.match(s_cypherParser.SP)


                self.state = 1624
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1626
                self.oC_Dash()
                self.state = 1628
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
                if la_ == 1:
                    self.state = 1627
                    self.match(s_cypherParser.SP)


                self.state = 1631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1630
                    self.oC_RelationshipDetail()


                self.state = 1634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1633
                    self.match(s_cypherParser.SP)


                self.state = 1636
                self.oC_Dash()
                self.state = 1638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1637
                    self.match(s_cypherParser.SP)


                self.state = 1640
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1642
                self.oC_Dash()
                self.state = 1644
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
                if la_ == 1:
                    self.state = 1643
                    self.match(s_cypherParser.SP)


                self.state = 1647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1646
                    self.oC_RelationshipDetail()


                self.state = 1650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1649
                    self.match(s_cypherParser.SP)


                self.state = 1652
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = s_cypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_oC_Properties)
        try:
            self.state = 1658
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1656
                self.oC_MapLiteral()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1657
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = s_cypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1660
            self.match(s_cypherParser.T__9)
            self.state = 1662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1661
                self.match(s_cypherParser.SP)


            self.state = 1664
            self.oC_RelTypeName()
            self.state = 1678
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,283,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1666
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1665
                        self.match(s_cypherParser.SP)


                    self.state = 1668
                    self.match(s_cypherParser.T__24)
                    self.state = 1670
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==10:
                        self.state = 1669
                        self.match(s_cypherParser.T__9)


                    self.state = 1673
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1672
                        self.match(s_cypherParser.SP)


                    self.state = 1675
                    self.oC_RelTypeName() 
                self.state = 1680
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,283,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = s_cypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1681
            self.oC_NodeLabel()
            self.state = 1688
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,285,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1683
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1682
                        self.match(s_cypherParser.SP)


                    self.state = 1685
                    self.oC_NodeLabel() 
                self.state = 1690
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,285,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = s_cypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1691
            self.match(s_cypherParser.T__9)
            self.state = 1693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1692
                self.match(s_cypherParser.SP)


            self.state = 1695
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = s_cypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1697
            self.match(s_cypherParser.T__4)
            self.state = 1699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1698
                self.match(s_cypherParser.SP)


            self.state = 1705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                self.state = 1701
                self.oC_IntegerLiteral()
                self.state = 1703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1702
                    self.match(s_cypherParser.SP)




            self.state = 1717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 1707
                self.match(s_cypherParser.T__12)
                self.state = 1709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1708
                    self.match(s_cypherParser.SP)


                self.state = 1715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                    self.state = 1711
                    self.oC_IntegerLiteral()
                    self.state = 1713
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1712
                        self.match(s_cypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = s_cypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1719
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = s_cypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1721
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = s_cypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1723
            self.oC_Atom()
            self.state = 1728 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1725
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1724
                        self.match(s_cypherParser.SP)


                    self.state = 1727
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 1730 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,295,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = s_cypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1732
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = s_cypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1734
            self.oC_XorExpression()
            self.state = 1741
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,296,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1735
                    self.match(s_cypherParser.SP)
                    self.state = 1736
                    self.match(s_cypherParser.OR)
                    self.state = 1737
                    self.match(s_cypherParser.SP)
                    self.state = 1738
                    self.oC_XorExpression() 
                self.state = 1743
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,296,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = s_cypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1744
            self.oC_AndExpression()
            self.state = 1751
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,297,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1745
                    self.match(s_cypherParser.SP)
                    self.state = 1746
                    self.match(s_cypherParser.XOR)
                    self.state = 1747
                    self.match(s_cypherParser.SP)
                    self.state = 1748
                    self.oC_AndExpression() 
                self.state = 1753
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,297,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = s_cypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1754
            self.oC_NotExpression()
            self.state = 1761
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,298,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1755
                    self.match(s_cypherParser.SP)
                    self.state = 1756
                    self.match(s_cypherParser.AND)
                    self.state = 1757
                    self.match(s_cypherParser.SP)
                    self.state = 1758
                    self.oC_NotExpression() 
                self.state = 1763
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,298,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = s_cypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1764
                self.match(s_cypherParser.NOT)
                self.state = 1766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1765
                    self.match(s_cypherParser.SP)


                self.state = 1772
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1773
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_StringListNullPredicateExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,i)


        def s_ComparisonOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ComparisonOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ComparisonOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = s_cypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1775
            self.oC_StringListNullPredicateExpression()
            self.state = 1787
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,303,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1777
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1776
                        self.match(s_cypherParser.SP)


                    self.state = 1779
                    self.s_ComparisonOperator()
                    self.state = 1781
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1780
                        self.match(s_cypherParser.SP)


                    self.state = 1783
                    self.oC_StringListNullPredicateExpression() 
                self.state = 1789
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,303,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringPredicateExpression" ):
                listener.enterOC_StringPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringPredicateExpression" ):
                listener.exitOC_StringPredicateExpression(self)




    def oC_StringPredicateExpression(self):

        localctx = s_cypherParser.OC_StringPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_oC_StringPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1800
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                self.state = 1790
                self.match(s_cypherParser.SP)
                self.state = 1791
                self.match(s_cypherParser.STARTS)
                self.state = 1792
                self.match(s_cypherParser.SP)
                self.state = 1793
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1794
                self.match(s_cypherParser.SP)
                self.state = 1795
                self.match(s_cypherParser.ENDS)
                self.state = 1796
                self.match(s_cypherParser.SP)
                self.state = 1797
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1798
                self.match(s_cypherParser.SP)
                self.state = 1799
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 1803
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1802
                self.match(s_cypherParser.SP)


            self.state = 1805
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListPredicateExpression" ):
                listener.enterOC_ListPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListPredicateExpression" ):
                listener.exitOC_ListPredicateExpression(self)




    def oC_ListPredicateExpression(self):

        localctx = s_cypherParser.OC_ListPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_oC_ListPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1807
            self.match(s_cypherParser.SP)
            self.state = 1808
            self.match(s_cypherParser.IN)
            self.state = 1810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1809
                self.match(s_cypherParser.SP)


            self.state = 1812
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullPredicateExpression" ):
                listener.enterOC_NullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullPredicateExpression" ):
                listener.exitOC_NullPredicateExpression(self)




    def oC_NullPredicateExpression(self):

        localctx = s_cypherParser.OC_NullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_oC_NullPredicateExpression)
        try:
            self.state = 1824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1814
                self.match(s_cypherParser.SP)
                self.state = 1815
                self.match(s_cypherParser.IS)
                self.state = 1816
                self.match(s_cypherParser.SP)
                self.state = 1817
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1818
                self.match(s_cypherParser.SP)
                self.state = 1819
                self.match(s_cypherParser.IS)
                self.state = 1820
                self.match(s_cypherParser.SP)
                self.state = 1821
                self.match(s_cypherParser.NOT)
                self.state = 1822
                self.match(s_cypherParser.SP)
                self.state = 1823
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def s_AddOrSubtractOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AddOrSubtractOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1826
            self.oC_MultiplyDivideModuloExpression()
            self.state = 1847
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,313,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1845
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
                    if la_ == 1:
                        self.state = 1828
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1827
                            self.match(s_cypherParser.SP)


                        self.state = 1830
                        self.s_AddOrSubtractOperator()
                        self.state = 1832
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1831
                            self.match(s_cypherParser.SP)


                        self.state = 1834
                        self.oC_MultiplyDivideModuloExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1837
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1836
                            self.match(s_cypherParser.SP)


                        self.state = 1839
                        self.s_AddOrSubtractOperator()
                        self.state = 1841
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1840
                            self.match(s_cypherParser.SP)


                        self.state = 1843
                        self.oC_MultiplyDivideModuloExpression()
                        pass

             
                self.state = 1849
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,313,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MultiplyDivideModuloOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MultiplyDivideModuloOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MultiplyDivideModuloOperator" ):
                listener.enterS_MultiplyDivideModuloOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MultiplyDivideModuloOperator" ):
                listener.exitS_MultiplyDivideModuloOperator(self)




    def s_MultiplyDivideModuloOperator(self):

        localctx = s_cypherParser.S_MultiplyDivideModuloOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_s_MultiplyDivideModuloOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1850
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 49184) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PowerOfOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PowerOfOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PowerOfOperator" ):
                listener.enterS_PowerOfOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PowerOfOperator" ):
                listener.exitS_PowerOfOperator(self)




    def s_PowerOfOperator(self):

        localctx = s_cypherParser.S_PowerOfOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_s_PowerOfOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1852
            self.match(s_cypherParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AddOrSubtractOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AddOrSubtractOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AddOrSubtractOperator" ):
                listener.enterS_AddOrSubtractOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AddOrSubtractOperator" ):
                listener.exitS_AddOrSubtractOperator(self)




    def s_AddOrSubtractOperator(self):

        localctx = s_cypherParser.S_AddOrSubtractOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_s_AddOrSubtractOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1854
            _la = self._input.LA(1)
            if not(_la==17 or _la==18):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ComparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ComparisonOperator" ):
                listener.enterS_ComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ComparisonOperator" ):
                listener.exitS_ComparisonOperator(self)




    def s_ComparisonOperator(self):

        localctx = s_cypherParser.S_ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_s_ComparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1856
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 16252932) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PowerOfExpressionContext,i)


        def s_MultiplyDivideModuloOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MultiplyDivideModuloOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MultiplyDivideModuloOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = s_cypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1858
            self.oC_PowerOfExpression()
            self.state = 1888
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,321,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1886
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,320,self._ctx)
                    if la_ == 1:
                        self.state = 1860
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1859
                            self.match(s_cypherParser.SP)


                        self.state = 1862
                        self.s_MultiplyDivideModuloOperator()
                        self.state = 1864
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1863
                            self.match(s_cypherParser.SP)


                        self.state = 1866
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1869
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1868
                            self.match(s_cypherParser.SP)


                        self.state = 1871
                        self.s_MultiplyDivideModuloOperator()
                        self.state = 1873
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1872
                            self.match(s_cypherParser.SP)


                        self.state = 1875
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1878
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1877
                            self.match(s_cypherParser.SP)


                        self.state = 1880
                        self.s_MultiplyDivideModuloOperator()
                        self.state = 1882
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1881
                            self.match(s_cypherParser.SP)


                        self.state = 1884
                        self.oC_PowerOfExpression()
                        pass

             
                self.state = 1890
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,321,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def s_PowerOfOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PowerOfOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PowerOfOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = s_cypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1891
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 1903
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,324,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1893
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1892
                        self.match(s_cypherParser.SP)


                    self.state = 1895
                    self.s_PowerOfOperator()
                    self.state = 1897
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1896
                        self.match(s_cypherParser.SP)


                    self.state = 1899
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 1905
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,324,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ListOperatorExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListOperatorExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.state = 1912
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 8, 11, 26, 48, 57, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1906
                self.oC_ListOperatorExpression()
                pass
            elif token in [17, 18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1907
                _la = self._input.LA(1)
                if not(_la==17 or _la==18):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1908
                    self.match(s_cypherParser.SP)


                self.state = 1911
                self.oC_ListOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyOrLabelsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyOrLabelsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyOrLabelsExpression" ):
                listener.enterOC_PropertyOrLabelsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyOrLabelsExpression" ):
                listener.exitOC_PropertyOrLabelsExpression(self)




    def oC_PropertyOrLabelsExpression(self):

        localctx = s_cypherParser.OC_PropertyOrLabelsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_oC_PropertyOrLabelsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1914
            self.oC_Atom()
            self.state = 1921
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,328,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1916
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1915
                        self.match(s_cypherParser.SP)


                    self.state = 1918
                    self.oC_PropertyLookup() 
                self.state = 1923
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,328,self._ctx)

            self.state = 1928
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
            if la_ == 1:
                self.state = 1925
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1924
                    self.match(s_cypherParser.SP)


                self.state = 1927
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = s_cypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1930
            self.match(s_cypherParser.T__0)
            self.state = 1932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1931
                self.match(s_cypherParser.SP)


            self.state = 1934
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternComprehensionContext,0)


        def oC_Quantifier(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QuantifierContext,0)


        def oC_PatternPredicate(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPredicateContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionInvocationContext,0)


        def oC_ExistentialSubquery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExistentialSubqueryContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = s_cypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 1960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1936
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1937
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1938
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1939
                self.match(s_cypherParser.COUNT)
                self.state = 1941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1940
                    self.match(s_cypherParser.SP)


                self.state = 1943
                self.match(s_cypherParser.T__7)
                self.state = 1945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1944
                    self.match(s_cypherParser.SP)


                self.state = 1947
                self.match(s_cypherParser.T__4)
                self.state = 1949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1948
                    self.match(s_cypherParser.SP)


                self.state = 1951
                self.match(s_cypherParser.T__8)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1952
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1953
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1954
                self.oC_Quantifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1955
                self.oC_PatternPredicate()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1956
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1957
                self.oC_FunctionInvocation()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1958
                self.oC_ExistentialSubquery()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1959
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def oC_CaseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_CaseAlternativeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = s_cypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1984
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
            if la_ == 1:
                self.state = 1962
                self.match(s_cypherParser.CASE)
                self.state = 1967 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1964
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1963
                            self.match(s_cypherParser.SP)


                        self.state = 1966
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1969 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,337,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1971
                self.match(s_cypherParser.CASE)
                self.state = 1973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1972
                    self.match(s_cypherParser.SP)


                self.state = 1975
                self.oC_Expression()
                self.state = 1980 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1977
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1976
                            self.match(s_cypherParser.SP)


                        self.state = 1979
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1982 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,340,self._ctx)

                pass


            self.state = 1994
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
            if la_ == 1:
                self.state = 1987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1986
                    self.match(s_cypherParser.SP)


                self.state = 1989
                self.match(s_cypherParser.ELSE)
                self.state = 1991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1990
                    self.match(s_cypherParser.SP)


                self.state = 1993
                self.oC_Expression()


            self.state = 1997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1996
                self.match(s_cypherParser.SP)


            self.state = 1999
            self.match(s_cypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternative" ):
                listener.enterOC_CaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternative" ):
                listener.exitOC_CaseAlternative(self)




    def oC_CaseAlternative(self):

        localctx = s_cypherParser.OC_CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_oC_CaseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2001
            self.match(s_cypherParser.WHEN)
            self.state = 2003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2002
                self.match(s_cypherParser.SP)


            self.state = 2005
            self.oC_Expression()
            self.state = 2007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2006
                self.match(s_cypherParser.SP)


            self.state = 2009
            self.match(s_cypherParser.THEN)
            self.state = 2011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2010
                self.match(s_cypherParser.SP)


            self.state = 2013
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = s_cypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2015
            self.match(s_cypherParser.T__10)
            self.state = 2017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2016
                self.match(s_cypherParser.SP)


            self.state = 2019
            self.oC_FilterExpression()
            self.state = 2028
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
            if la_ == 1:
                self.state = 2021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2020
                    self.match(s_cypherParser.SP)


                self.state = 2023
                self.match(s_cypherParser.T__24)
                self.state = 2025
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2024
                    self.match(s_cypherParser.SP)


                self.state = 2027
                self.oC_Expression()


            self.state = 2031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2030
                self.match(s_cypherParser.SP)


            self.state = 2033
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = s_cypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2035
            self.match(s_cypherParser.T__10)
            self.state = 2037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2036
                self.match(s_cypherParser.SP)


            self.state = 2047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 2039
                self.oC_Variable()
                self.state = 2041
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2040
                    self.match(s_cypherParser.SP)


                self.state = 2043
                self.match(s_cypherParser.T__1)
                self.state = 2045
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2044
                    self.match(s_cypherParser.SP)




            self.state = 2049
            self.oC_RelationshipsPattern()
            self.state = 2051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2050
                self.match(s_cypherParser.SP)


            self.state = 2057
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 2053
                self.oC_Where()
                self.state = 2055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2054
                    self.match(s_cypherParser.SP)




            self.state = 2059
            self.match(s_cypherParser.T__24)
            self.state = 2061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2060
                self.match(s_cypherParser.SP)


            self.state = 2063
            self.oC_Expression()
            self.state = 2065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2064
                self.match(s_cypherParser.SP)


            self.state = 2067
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Quantifier" ):
                listener.enterOC_Quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Quantifier" ):
                listener.exitOC_Quantifier(self)




    def oC_Quantifier(self):

        localctx = s_cypherParser.OC_QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_oC_Quantifier)
        self._la = 0 # Token type
        try:
            self.state = 2125
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2069
                self.match(s_cypherParser.ALL)
                self.state = 2071
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2070
                    self.match(s_cypherParser.SP)


                self.state = 2073
                self.match(s_cypherParser.T__7)
                self.state = 2075
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2074
                    self.match(s_cypherParser.SP)


                self.state = 2077
                self.oC_FilterExpression()
                self.state = 2079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2078
                    self.match(s_cypherParser.SP)


                self.state = 2081
                self.match(s_cypherParser.T__8)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2083
                self.match(s_cypherParser.ANY)
                self.state = 2085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2084
                    self.match(s_cypherParser.SP)


                self.state = 2087
                self.match(s_cypherParser.T__7)
                self.state = 2089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2088
                    self.match(s_cypherParser.SP)


                self.state = 2091
                self.oC_FilterExpression()
                self.state = 2093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2092
                    self.match(s_cypherParser.SP)


                self.state = 2095
                self.match(s_cypherParser.T__8)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2097
                self.match(s_cypherParser.NONE)
                self.state = 2099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2098
                    self.match(s_cypherParser.SP)


                self.state = 2101
                self.match(s_cypherParser.T__7)
                self.state = 2103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2102
                    self.match(s_cypherParser.SP)


                self.state = 2105
                self.oC_FilterExpression()
                self.state = 2107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2106
                    self.match(s_cypherParser.SP)


                self.state = 2109
                self.match(s_cypherParser.T__8)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2111
                self.match(s_cypherParser.SINGLE)
                self.state = 2113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2112
                    self.match(s_cypherParser.SP)


                self.state = 2115
                self.match(s_cypherParser.T__7)
                self.state = 2117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2116
                    self.match(s_cypherParser.SP)


                self.state = 2119
                self.oC_FilterExpression()
                self.state = 2121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2120
                    self.match(s_cypherParser.SP)


                self.state = 2123
                self.match(s_cypherParser.T__8)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPredicate" ):
                listener.enterOC_PatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPredicate" ):
                listener.exitOC_PatternPredicate(self)




    def oC_PatternPredicate(self):

        localctx = s_cypherParser.OC_PatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_oC_PatternPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2127
            self.oC_RelationshipsPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = s_cypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2129
            self.match(s_cypherParser.T__7)
            self.state = 2131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2130
                self.match(s_cypherParser.SP)


            self.state = 2133
            self.oC_Expression()
            self.state = 2135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2134
                self.match(s_cypherParser.SP)


            self.state = 2137
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = s_cypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2139
            self.oC_Variable()
            self.state = 2140
            self.match(s_cypherParser.SP)
            self.state = 2141
            self.match(s_cypherParser.IN)
            self.state = 2142
            self.match(s_cypherParser.SP)
            self.state = 2143
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def s_FunctionInvocationExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_FunctionInvocationExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_FunctionInvocationExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = s_cypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2145
            self.oC_FunctionName()
            self.state = 2147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2146
                self.match(s_cypherParser.SP)


            self.state = 2149
            self.match(s_cypherParser.T__7)
            self.state = 2151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2150
                self.match(s_cypherParser.SP)


            self.state = 2157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 2153
                self.match(s_cypherParser.DISTINCT)
                self.state = 2155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2154
                    self.match(s_cypherParser.SP)




            self.state = 2176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070976) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 2159
                self.s_FunctionInvocationExpression()
                self.state = 2161
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2160
                    self.match(s_cypherParser.SP)


                self.state = 2173
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2163
                    self.match(s_cypherParser.T__3)
                    self.state = 2165
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2164
                        self.match(s_cypherParser.SP)


                    self.state = 2167
                    self.s_FunctionInvocationExpression()
                    self.state = 2169
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2168
                        self.match(s_cypherParser.SP)


                    self.state = 2175
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2178
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_FunctionInvocationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_FunctionInvocationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_FunctionInvocationExpression" ):
                listener.enterS_FunctionInvocationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_FunctionInvocationExpression" ):
                listener.exitS_FunctionInvocationExpression(self)




    def s_FunctionInvocationExpression(self):

        localctx = s_cypherParser.S_FunctionInvocationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_s_FunctionInvocationExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2180
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = s_cypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_oC_FunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2182
            self.oC_Namespace()
            self.state = 2183
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2185
            self.oC_ProcedureName()
            self.state = 2187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2186
                self.match(s_cypherParser.SP)


            self.state = 2189
            self.match(s_cypherParser.T__7)
            self.state = 2191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2190
                self.match(s_cypherParser.SP)


            self.state = 2210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070976) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 2193
                self.oC_Expression()
                self.state = 2195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2194
                    self.match(s_cypherParser.SP)


                self.state = 2207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2197
                    self.match(s_cypherParser.T__3)
                    self.state = 2199
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2198
                        self.match(s_cypherParser.SP)


                    self.state = 2201
                    self.oC_Expression()
                    self.state = 2203
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2202
                        self.match(s_cypherParser.SP)


                    self.state = 2209
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2212
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2214
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = s_cypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2216
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = s_cypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2218
            self.oC_Namespace()
            self.state = 2219
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = s_cypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2226
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,394,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2221
                    self.oC_SymbolicName()
                    self.state = 2222
                    self.match(s_cypherParser.T__0) 
                self.state = 2228
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,394,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = s_cypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2229
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_ListLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListLiteralContext,0)


        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = s_cypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_oC_Literal)
        try:
            self.state = 2237
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2231
                self.oC_BooleanLiteral()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2232
                self.match(s_cypherParser.NULL)
                pass
            elif token in [105, 106, 107, 115, 116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2233
                self.oC_NumberLiteral()
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2234
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2235
                self.oC_ListLiteral()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2236
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = s_cypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2239
            _la = self._input.LA(1)
            if not(_la==103 or _la==104):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = s_cypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_oC_NumberLiteral)
        try:
            self.state = 2243
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115, 116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2241
                self.oC_DoubleLiteral()
                pass
            elif token in [105, 106, 107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2242
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(s_cypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(s_cypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = s_cypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2245
            _la = self._input.LA(1)
            if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(s_cypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(s_cypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = s_cypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2247
            _la = self._input.LA(1)
            if not(_la==115 or _la==116):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_ListLiteralExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ListLiteralExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ListLiteralExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = s_cypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2249
            self.match(s_cypherParser.T__10)
            self.state = 2251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2250
                self.match(s_cypherParser.SP)


            self.state = 2270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070976) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 2253
                self.s_ListLiteralExpression()
                self.state = 2255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2254
                    self.match(s_cypherParser.SP)


                self.state = 2267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2257
                    self.match(s_cypherParser.T__3)
                    self.state = 2259
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2258
                        self.match(s_cypherParser.SP)


                    self.state = 2261
                    self.s_ListLiteralExpression()
                    self.state = 2263
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2262
                        self.match(s_cypherParser.SP)


                    self.state = 2269
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2272
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ListLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ListLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ListLiteralExpression" ):
                listener.enterS_ListLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ListLiteralExpression" ):
                listener.exitS_ListLiteralExpression(self)




    def s_ListLiteralExpression(self):

        localctx = s_cypherParser.S_ListLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_s_ListLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2274
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_MapKeyValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MapKeyValueContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MapKeyValueContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = s_cypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2276
            self.match(s_cypherParser.T__5)
            self.state = 2278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2277
                self.match(s_cypherParser.SP)


            self.state = 2291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 2280
                self.s_MapKeyValue()
                self.state = 2288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2281
                    self.match(s_cypherParser.T__3)
                    self.state = 2283
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2282
                        self.match(s_cypherParser.SP)


                    self.state = 2285
                    self.s_MapKeyValue()
                    self.state = 2290
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2293
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MapKeyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MapKeyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MapKeyValue" ):
                listener.enterS_MapKeyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MapKeyValue" ):
                listener.exitS_MapKeyValue(self)




    def s_MapKeyValue(self):

        localctx = s_cypherParser.S_MapKeyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_s_MapKeyValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2295
            self.oC_PropertyKeyName()
            self.state = 2297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2296
                self.match(s_cypherParser.SP)


            self.state = 2299
            self.match(s_cypherParser.T__9)
            self.state = 2301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2300
                self.match(s_cypherParser.SP)


            self.state = 2303
            self.oC_Expression()
            self.state = 2305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2304
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = s_cypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2307
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = s_cypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2309
            self.match(s_cypherParser.T__25)
            self.state = 2312
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 2310
                self.oC_SymbolicName()
                pass
            elif token in [106]:
                self.state = 2311
                self.match(s_cypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = s_cypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_oC_SchemaName)
        try:
            self.state = 2316
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,411,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2314
                self.oC_SymbolicName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2315
                self.oC_ReservedWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = s_cypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2318
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2014314496) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = s_cypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2320
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32216449024) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = s_cypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2322
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70334384701440) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





