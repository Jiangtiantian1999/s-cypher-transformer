# Generated from .\s_cypher.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,137,2449,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,1,0,1,0,1,0,3,0,350,8,0,1,1,
        1,1,3,1,354,8,1,1,1,1,1,3,1,358,8,1,1,1,1,1,3,1,362,8,1,1,1,1,1,
        3,1,366,8,1,3,1,368,8,1,1,1,3,1,371,8,1,1,1,3,1,374,8,1,1,2,1,2,
        1,2,1,2,1,2,1,2,3,2,382,8,2,1,3,1,3,3,3,386,8,3,1,3,1,3,3,3,390,
        8,3,1,3,3,3,393,8,3,1,4,1,4,3,4,397,8,4,1,4,1,4,1,4,5,4,402,8,4,
        10,4,12,4,405,9,4,1,4,3,4,408,8,4,1,4,3,4,411,8,4,1,5,1,5,3,5,415,
        8,5,1,5,1,5,3,5,419,8,5,1,5,1,5,3,5,423,8,5,1,5,5,5,426,8,5,10,5,
        12,5,429,9,5,1,5,3,5,432,8,5,1,5,3,5,435,8,5,1,6,1,6,1,6,1,6,3,6,
        441,8,6,1,6,1,6,3,6,445,8,6,1,6,5,6,448,8,6,10,6,12,6,451,9,6,1,
        6,3,6,454,8,6,1,6,3,6,457,8,6,1,7,1,7,3,7,461,8,7,1,7,1,7,3,7,465,
        8,7,1,7,1,7,3,7,469,8,7,1,7,5,7,472,8,7,10,7,12,7,475,9,7,1,7,3,
        7,478,8,7,1,7,3,7,481,8,7,1,8,1,8,3,8,485,8,8,1,8,1,8,1,8,1,8,3,
        8,491,8,8,1,8,3,8,494,8,8,1,8,1,8,1,8,1,8,1,8,3,8,501,8,8,1,8,3,
        8,504,8,8,1,8,1,8,1,8,3,8,509,8,8,1,8,1,8,1,8,1,8,3,8,515,8,8,1,
        8,3,8,518,8,8,1,8,1,8,1,8,3,8,523,8,8,1,8,1,8,3,8,527,8,8,1,8,1,
        8,1,8,1,8,3,8,533,8,8,1,8,1,8,3,8,537,8,8,1,8,1,8,1,8,1,8,3,8,543,
        8,8,1,8,1,8,3,8,547,8,8,1,8,1,8,1,8,1,8,3,8,553,8,8,1,8,1,8,3,8,
        557,8,8,1,8,1,8,1,8,1,8,3,8,563,8,8,1,8,1,8,3,8,567,8,8,1,9,1,9,
        3,9,571,8,9,1,9,1,9,1,10,1,10,3,10,577,8,10,1,10,3,10,580,8,10,1,
        11,1,11,3,11,584,8,11,1,11,1,11,1,12,1,12,3,12,590,8,12,1,12,3,12,
        593,8,12,1,13,1,13,1,13,1,13,3,13,599,8,13,1,13,1,13,1,13,3,13,604,
        8,13,1,14,1,14,3,14,608,8,14,1,14,1,14,3,14,612,8,14,1,14,1,14,3,
        14,616,8,14,1,14,1,14,3,14,620,8,14,1,14,5,14,623,8,14,10,14,12,
        14,626,9,14,1,14,3,14,629,8,14,1,14,1,14,3,14,633,8,14,3,14,635,
        8,14,1,15,1,15,1,15,1,15,3,15,641,8,15,1,15,1,15,1,15,3,15,646,8,
        15,1,16,1,16,3,16,650,8,16,1,16,1,16,1,17,1,17,3,17,656,8,17,1,17,
        1,17,1,18,1,18,3,18,662,8,18,1,19,1,19,1,19,1,19,3,19,668,8,19,1,
        19,1,19,1,19,3,19,673,8,19,1,20,1,20,1,20,1,20,3,20,679,8,20,1,20,
        3,20,682,8,20,1,20,1,20,1,20,1,20,3,20,688,8,20,3,20,690,8,20,1,
        21,1,21,3,21,694,8,21,1,21,1,21,3,21,698,8,21,1,21,5,21,701,8,21,
        10,21,12,21,704,9,21,1,21,3,21,707,8,21,1,21,3,21,710,8,21,1,22,
        1,22,1,22,1,22,1,22,3,22,717,8,22,1,23,1,23,3,23,721,8,23,5,23,723,
        8,23,10,23,12,23,726,9,23,1,23,1,23,3,23,730,8,23,5,23,732,8,23,
        10,23,12,23,735,9,23,1,23,1,23,3,23,739,8,23,1,24,1,24,1,24,3,24,
        744,8,24,1,24,3,24,747,8,24,1,25,1,25,3,25,751,8,25,1,25,1,25,3,
        25,755,8,25,1,25,1,25,1,25,3,25,760,8,25,1,25,3,25,763,8,25,3,25,
        765,8,25,1,25,3,25,768,8,25,1,25,1,25,1,26,1,26,3,26,774,8,26,1,
        26,3,26,777,8,26,1,27,1,27,3,27,781,8,27,1,27,1,27,1,28,1,28,3,28,
        787,8,28,1,28,1,28,1,29,1,29,3,29,793,8,29,1,29,1,29,3,29,797,8,
        29,1,29,1,29,1,29,1,29,3,29,803,8,29,1,29,1,29,3,29,807,8,29,1,29,
        1,29,1,29,3,29,812,8,29,1,30,1,30,3,30,816,8,30,1,30,1,30,3,30,820,
        8,30,1,30,1,30,3,30,824,8,30,1,30,1,30,1,31,1,31,3,31,830,8,31,1,
        31,1,31,3,31,834,8,31,1,31,1,31,1,32,1,32,3,32,840,8,32,1,32,1,32,
        3,32,844,8,32,3,32,846,8,32,1,32,1,32,3,32,850,8,32,3,32,852,8,32,
        1,32,1,32,3,32,856,8,32,3,32,858,8,32,1,32,1,32,3,32,862,8,32,3,
        32,864,8,32,1,32,1,32,1,33,1,33,3,33,870,8,33,1,34,1,34,3,34,874,
        8,34,1,34,1,34,1,34,1,34,1,34,3,34,881,8,34,1,34,1,34,1,34,1,34,
        5,34,887,8,34,10,34,12,34,890,9,34,3,34,892,8,34,1,34,1,34,1,35,
        1,35,3,35,898,8,35,1,35,1,35,3,35,902,8,35,3,35,904,8,35,1,36,3,
        36,907,8,36,1,36,1,36,3,36,911,8,36,1,36,1,36,3,36,915,8,36,3,36,
        917,8,36,1,37,1,37,3,37,921,8,37,1,37,1,37,3,37,925,8,37,3,37,927,
        8,37,1,37,1,37,3,37,931,8,37,3,37,933,8,37,1,37,3,37,936,8,37,1,
        37,1,37,3,37,940,8,37,3,37,942,8,37,1,37,1,37,3,37,946,8,37,3,37,
        948,8,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,3,38,957,8,38,1,39,1,
        39,3,39,961,8,39,1,39,1,39,5,39,965,8,39,10,39,12,39,968,9,39,1,
        40,3,40,971,8,40,1,40,1,40,1,40,1,40,1,41,3,41,978,8,41,1,41,1,41,
        3,41,982,8,41,1,41,1,41,3,41,986,8,41,1,41,1,41,1,42,1,42,1,43,1,
        43,1,44,1,44,3,44,996,8,44,1,44,4,44,999,8,44,11,44,12,44,1000,1,
        44,3,44,1004,8,44,1,44,3,44,1007,8,44,3,44,1009,8,44,1,44,3,44,1012,
        8,44,1,44,1,44,1,45,1,45,3,45,1018,8,45,1,45,5,45,1021,8,45,10,45,
        12,45,1024,9,45,1,46,1,46,3,46,1028,8,46,1,46,1,46,1,47,1,47,1,47,
        1,47,1,47,1,48,1,48,3,48,1039,8,48,1,48,1,48,3,48,1043,8,48,1,48,
        1,48,3,48,1047,8,48,1,48,1,48,3,48,1051,8,48,1,48,1,48,3,48,1055,
        8,48,1,48,3,48,1058,8,48,1,48,1,48,1,49,1,49,1,49,1,49,1,50,1,50,
        1,51,1,51,1,51,1,51,1,51,5,51,1073,8,51,10,51,12,51,1076,9,51,1,
        52,1,52,1,52,1,52,1,52,5,52,1083,8,52,10,52,12,52,1086,9,52,1,53,
        1,53,1,53,1,53,1,53,5,53,1093,8,53,10,53,12,53,1096,9,53,1,54,1,
        54,3,54,1100,8,54,5,54,1102,8,54,10,54,12,54,1105,9,54,1,54,1,54,
        1,55,1,55,3,55,1111,8,55,1,55,1,55,3,55,1115,8,55,1,55,1,55,5,55,
        1119,8,55,10,55,12,55,1122,9,55,1,56,1,56,1,57,1,57,1,58,1,58,1,
        59,1,59,1,60,1,60,1,60,1,60,1,60,3,60,1137,8,60,1,61,1,61,3,61,1141,
        8,61,1,61,1,61,3,61,1145,8,61,1,61,1,61,1,61,3,61,1150,8,61,1,61,
        1,61,3,61,1154,8,61,1,61,1,61,5,61,1158,8,61,10,61,12,61,1161,9,
        61,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,
        63,1,63,1,63,3,63,1178,8,63,1,63,3,63,1181,8,63,1,63,1,63,1,64,1,
        64,1,64,3,64,1188,8,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,1,
        65,1,65,1,65,1,65,3,65,1202,8,65,1,66,1,66,3,66,1206,8,66,1,66,1,
        66,3,66,1210,8,66,1,66,1,66,1,66,3,66,1215,8,66,1,66,1,66,3,66,1219,
        8,66,1,66,1,66,1,66,3,66,1224,8,66,1,66,1,66,3,66,1228,8,66,1,66,
        1,66,5,66,1232,8,66,10,66,12,66,1235,9,66,1,67,1,67,3,67,1239,8,
        67,1,67,1,67,3,67,1243,8,67,1,67,1,67,5,67,1247,8,67,10,67,12,67,
        1250,9,67,1,68,1,68,1,68,3,68,1255,8,68,1,68,3,68,1258,8,68,1,69,
        1,69,3,69,1262,8,69,1,69,1,69,5,69,1266,8,69,10,69,12,69,1269,9,
        69,1,70,1,70,3,70,1273,8,70,1,70,5,70,1276,8,70,10,70,12,70,1279,
        9,70,1,70,3,70,1282,8,70,1,70,3,70,1285,8,70,1,71,1,71,3,71,1289,
        8,71,1,71,4,71,1292,8,71,11,71,12,71,1293,1,71,3,71,1297,8,71,1,
        71,3,71,1300,8,71,3,71,1302,8,71,1,71,3,71,1305,8,71,1,71,1,71,1,
        72,3,72,1310,8,72,1,72,1,72,1,72,1,72,1,73,3,73,1317,8,73,1,73,1,
        73,3,73,1321,8,73,1,73,1,73,3,73,1325,8,73,1,73,1,73,1,74,1,74,1,
        75,1,75,1,76,1,76,3,76,1335,8,76,1,77,1,77,1,78,1,78,1,79,3,79,1342,
        8,79,1,79,1,79,3,79,1346,8,79,1,79,3,79,1349,8,79,1,79,3,79,1352,
        8,79,1,79,1,79,1,80,1,80,1,81,1,81,3,81,1360,8,81,1,81,5,81,1363,
        8,81,10,81,12,81,1366,9,81,1,82,1,82,1,82,1,82,3,82,1372,8,82,1,
        82,1,82,1,82,3,82,1377,8,82,1,82,3,82,1380,8,82,1,83,1,83,3,83,1384,
        8,83,1,84,1,84,3,84,1388,8,84,5,84,1390,8,84,10,84,12,84,1393,9,
        84,1,84,1,84,1,84,3,84,1398,8,84,5,84,1400,8,84,10,84,12,84,1403,
        9,84,1,84,1,84,3,84,1407,8,84,1,84,5,84,1410,8,84,10,84,12,84,1413,
        9,84,1,84,3,84,1416,8,84,1,84,3,84,1419,8,84,3,84,1421,8,84,1,85,
        4,85,1424,8,85,11,85,12,85,1425,1,85,1,85,1,86,1,86,1,86,3,86,1433,
        8,86,1,87,1,87,3,87,1437,8,87,1,87,1,87,1,87,1,87,1,87,1,87,1,88,
        1,88,3,88,1447,8,88,1,88,1,88,1,88,5,88,1452,8,88,10,88,12,88,1455,
        9,88,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,1467,
        8,89,1,90,1,90,3,90,1471,8,90,1,90,1,90,1,91,1,91,3,91,1477,8,91,
        1,91,1,91,3,91,1481,8,91,1,91,1,91,3,91,1485,8,91,1,91,5,91,1488,
        8,91,10,91,12,91,1491,9,91,1,92,1,92,3,92,1495,8,92,1,92,1,92,3,
        92,1499,8,92,1,92,1,92,3,92,1503,8,92,1,92,1,92,3,92,1507,8,92,1,
        92,5,92,1510,8,92,10,92,12,92,1513,9,92,1,93,1,93,1,93,1,93,3,93,
        1519,8,93,1,93,1,93,3,93,1523,8,93,1,93,5,93,1526,8,93,10,93,12,
        93,1529,9,93,1,94,1,94,1,94,1,94,3,94,1535,8,94,1,95,1,95,3,95,1539,
        8,95,1,95,1,95,3,95,1543,8,95,1,95,5,95,1546,8,95,10,95,12,95,1549,
        9,95,1,95,3,95,1552,8,95,1,95,3,95,1555,8,95,1,96,1,96,1,96,1,96,
        1,96,3,96,1562,8,96,1,97,1,97,1,97,3,97,1567,8,97,1,97,3,97,1570,
        8,97,1,98,1,98,1,98,1,99,3,99,1576,8,99,1,99,3,99,1579,8,99,1,99,
        1,99,1,99,1,99,3,99,1585,8,99,1,99,1,99,3,99,1589,8,99,1,99,1,99,
        3,99,1593,8,99,1,100,1,100,3,100,1597,8,100,1,100,1,100,3,100,1601,
        8,100,1,100,5,100,1604,8,100,10,100,12,100,1607,9,100,1,100,1,100,
        3,100,1611,8,100,1,100,1,100,3,100,1615,8,100,1,100,5,100,1618,8,
        100,10,100,12,100,1621,9,100,3,100,1623,8,100,1,101,1,101,1,101,
        1,101,1,101,1,101,1,101,3,101,1632,8,101,1,102,1,102,1,102,1,102,
        1,102,1,102,1,102,3,102,1641,8,102,1,102,5,102,1644,8,102,10,102,
        12,102,1647,9,102,1,103,1,103,1,103,1,103,1,104,1,104,1,104,1,104,
        1,105,1,105,3,105,1659,8,105,1,105,3,105,1662,8,105,1,106,1,106,
        1,106,1,106,1,107,1,107,3,107,1670,8,107,1,107,1,107,3,107,1674,
        8,107,1,107,5,107,1677,8,107,10,107,12,107,1680,9,107,1,108,1,108,
        1,109,1,109,3,109,1686,8,109,1,109,5,109,1689,8,109,10,109,12,109,
        1692,9,109,1,109,1,109,1,109,1,109,3,109,1698,8,109,1,110,1,110,
        3,110,1702,8,110,1,110,4,110,1705,8,110,11,110,12,110,1706,1,111,
        1,111,3,111,1711,8,111,1,111,1,111,1,112,1,112,3,112,1717,8,112,
        1,112,1,112,3,112,1721,8,112,1,112,3,112,1724,8,112,1,112,3,112,
        1727,8,112,1,112,1,112,3,112,1731,8,112,1,112,1,112,1,112,1,112,
        3,112,1737,8,112,1,112,1,112,3,112,1741,8,112,1,112,3,112,1744,8,
        112,1,112,3,112,1747,8,112,1,112,1,112,1,112,1,112,3,112,1753,8,
        112,1,112,3,112,1756,8,112,1,112,3,112,1759,8,112,1,112,1,112,3,
        112,1763,8,112,1,112,1,112,1,112,1,112,3,112,1769,8,112,1,112,3,
        112,1772,8,112,1,112,3,112,1775,8,112,1,112,1,112,3,112,1779,8,112,
        1,113,1,113,3,113,1783,8,113,1,114,1,114,3,114,1787,8,114,1,114,
        1,114,3,114,1791,8,114,1,114,1,114,3,114,1795,8,114,1,114,3,114,
        1798,8,114,1,114,5,114,1801,8,114,10,114,12,114,1804,9,114,1,115,
        1,115,3,115,1808,8,115,1,115,5,115,1811,8,115,10,115,12,115,1814,
        9,115,1,116,1,116,3,116,1818,8,116,1,116,1,116,1,117,1,117,3,117,
        1824,8,117,1,117,1,117,3,117,1828,8,117,3,117,1830,8,117,1,117,1,
        117,3,117,1834,8,117,1,117,1,117,3,117,1838,8,117,3,117,1840,8,117,
        3,117,1842,8,117,1,118,1,118,1,119,1,119,1,120,1,120,3,120,1850,
        8,120,1,120,4,120,1853,8,120,11,120,12,120,1854,1,121,1,121,1,122,
        1,122,1,122,1,122,1,122,5,122,1864,8,122,10,122,12,122,1867,9,122,
        1,123,1,123,1,123,1,123,1,123,5,123,1874,8,123,10,123,12,123,1877,
        9,123,1,124,1,124,1,124,1,124,1,124,5,124,1884,8,124,10,124,12,124,
        1887,9,124,1,125,1,125,3,125,1891,8,125,5,125,1893,8,125,10,125,
        12,125,1896,9,125,1,125,1,125,1,126,1,126,3,126,1902,8,126,1,126,
        1,126,3,126,1906,8,126,1,126,1,126,5,126,1910,8,126,10,126,12,126,
        1913,9,126,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,
        1,127,3,127,1925,8,127,1,127,3,127,1928,8,127,1,127,1,127,1,128,
        1,128,1,128,3,128,1935,8,128,1,128,1,128,1,129,1,129,1,129,1,129,
        1,129,1,129,1,129,1,129,1,129,1,129,3,129,1949,8,129,1,130,1,130,
        3,130,1953,8,130,1,130,1,130,3,130,1957,8,130,1,130,1,130,1,130,
        3,130,1962,8,130,1,130,1,130,3,130,1966,8,130,1,130,1,130,5,130,
        1970,8,130,10,130,12,130,1973,9,130,1,131,1,131,1,132,1,132,1,133,
        1,133,1,134,1,134,1,135,1,135,3,135,1985,8,135,1,135,1,135,3,135,
        1989,8,135,1,135,1,135,1,135,3,135,1994,8,135,1,135,1,135,3,135,
        1998,8,135,1,135,1,135,1,135,3,135,2003,8,135,1,135,1,135,3,135,
        2007,8,135,1,135,1,135,5,135,2011,8,135,10,135,12,135,2014,9,135,
        1,136,1,136,3,136,2018,8,136,1,136,1,136,3,136,2022,8,136,1,136,
        1,136,5,136,2026,8,136,10,136,12,136,2029,9,136,1,137,1,137,1,137,
        3,137,2034,8,137,1,137,3,137,2037,8,137,1,138,1,138,3,138,2041,8,
        138,1,138,5,138,2044,8,138,10,138,12,138,2047,9,138,1,138,3,138,
        2050,8,138,1,138,3,138,2053,8,138,1,139,1,139,3,139,2057,8,139,1,
        139,1,139,1,140,1,140,1,140,1,140,1,140,3,140,2066,8,140,1,140,1,
        140,3,140,2070,8,140,1,140,1,140,3,140,2074,8,140,1,140,1,140,1,
        140,1,140,1,140,1,140,1,140,1,140,1,140,3,140,2085,8,140,1,141,1,
        141,3,141,2089,8,141,1,141,4,141,2092,8,141,11,141,12,141,2093,1,
        141,1,141,3,141,2098,8,141,1,141,1,141,3,141,2102,8,141,1,141,4,
        141,2105,8,141,11,141,12,141,2106,3,141,2109,8,141,1,141,3,141,2112,
        8,141,1,141,1,141,3,141,2116,8,141,1,141,3,141,2119,8,141,1,141,
        3,141,2122,8,141,1,141,1,141,1,142,1,142,3,142,2128,8,142,1,142,
        1,142,3,142,2132,8,142,1,142,1,142,3,142,2136,8,142,1,142,1,142,
        1,143,1,143,3,143,2142,8,143,1,143,1,143,3,143,2146,8,143,1,143,
        1,143,3,143,2150,8,143,1,143,3,143,2153,8,143,1,143,3,143,2156,8,
        143,1,143,1,143,1,144,1,144,3,144,2162,8,144,1,144,1,144,3,144,2166,
        8,144,1,144,1,144,3,144,2170,8,144,3,144,2172,8,144,1,144,1,144,
        3,144,2176,8,144,1,144,1,144,3,144,2180,8,144,3,144,2182,8,144,1,
        144,1,144,3,144,2186,8,144,1,144,1,144,3,144,2190,8,144,1,144,1,
        144,1,145,1,145,3,145,2196,8,145,1,145,1,145,3,145,2200,8,145,1,
        145,1,145,3,145,2204,8,145,1,145,1,145,1,145,1,145,3,145,2210,8,
        145,1,145,1,145,3,145,2214,8,145,1,145,1,145,3,145,2218,8,145,1,
        145,1,145,1,145,1,145,3,145,2224,8,145,1,145,1,145,3,145,2228,8,
        145,1,145,1,145,3,145,2232,8,145,1,145,1,145,1,145,1,145,3,145,2238,
        8,145,1,145,1,145,3,145,2242,8,145,1,145,1,145,3,145,2246,8,145,
        1,145,1,145,3,145,2250,8,145,1,146,1,146,1,147,1,147,3,147,2256,
        8,147,1,147,1,147,3,147,2260,8,147,1,147,1,147,1,148,1,148,1,148,
        1,148,1,148,1,148,1,149,1,149,3,149,2272,8,149,1,149,1,149,3,149,
        2276,8,149,1,149,1,149,3,149,2280,8,149,3,149,2282,8,149,1,149,1,
        149,3,149,2286,8,149,1,149,1,149,3,149,2290,8,149,1,149,1,149,3,
        149,2294,8,149,5,149,2296,8,149,10,149,12,149,2299,9,149,3,149,2301,
        8,149,1,149,1,149,1,150,1,150,1,151,1,151,1,151,1,152,1,152,3,152,
        2312,8,152,1,152,1,152,3,152,2316,8,152,1,152,1,152,3,152,2320,8,
        152,1,152,1,152,3,152,2324,8,152,1,152,1,152,3,152,2328,8,152,5,
        152,2330,8,152,10,152,12,152,2333,9,152,3,152,2335,8,152,1,152,1,
        152,1,153,1,153,1,154,1,154,1,155,1,155,1,155,1,156,1,156,1,156,
        5,156,2349,8,156,10,156,12,156,2352,9,156,1,157,1,157,1,158,1,158,
        1,158,1,158,1,158,1,158,3,158,2362,8,158,1,159,1,159,1,160,1,160,
        3,160,2368,8,160,1,161,1,161,1,162,1,162,1,163,1,163,3,163,2376,
        8,163,1,163,1,163,3,163,2380,8,163,1,163,1,163,3,163,2384,8,163,
        1,163,1,163,3,163,2388,8,163,5,163,2390,8,163,10,163,12,163,2393,
        9,163,3,163,2395,8,163,1,163,1,163,1,164,1,164,1,165,1,165,3,165,
        2403,8,165,1,165,1,165,1,165,3,165,2408,8,165,1,165,5,165,2411,8,
        165,10,165,12,165,2414,9,165,3,165,2416,8,165,1,165,1,165,1,166,
        1,166,3,166,2422,8,166,1,166,1,166,3,166,2426,8,166,1,166,1,166,
        3,166,2430,8,166,1,167,1,167,1,168,1,168,1,168,3,168,2437,8,168,
        1,169,1,169,3,169,2441,8,169,1,170,1,170,1,171,1,171,1,172,1,172,
        1,172,0,0,173,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
        152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
        184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
        216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
        248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,
        280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,
        312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,
        344,0,13,1,0,54,55,2,0,5,5,14,15,1,0,17,18,2,0,3,3,19,23,6,0,48,
        48,93,93,99,101,108,108,129,131,134,134,5,0,48,68,71,92,94,98,102,
        104,119,128,1,0,78,81,1,0,103,104,1,0,105,107,1,0,115,116,2,0,20,
        20,27,30,2,0,22,22,31,34,2,0,18,18,35,45,2755,0,349,1,0,0,0,2,353,
        1,0,0,0,4,381,1,0,0,0,6,383,1,0,0,0,8,394,1,0,0,0,10,412,1,0,0,0,
        12,436,1,0,0,0,14,458,1,0,0,0,16,566,1,0,0,0,18,568,1,0,0,0,20,574,
        1,0,0,0,22,581,1,0,0,0,24,587,1,0,0,0,26,603,1,0,0,0,28,607,1,0,
        0,0,30,645,1,0,0,0,32,647,1,0,0,0,34,653,1,0,0,0,36,661,1,0,0,0,
        38,663,1,0,0,0,40,674,1,0,0,0,42,691,1,0,0,0,44,711,1,0,0,0,46,724,
        1,0,0,0,48,740,1,0,0,0,50,748,1,0,0,0,52,771,1,0,0,0,54,778,1,0,
        0,0,56,784,1,0,0,0,58,811,1,0,0,0,60,813,1,0,0,0,62,827,1,0,0,0,
        64,837,1,0,0,0,66,869,1,0,0,0,68,871,1,0,0,0,70,895,1,0,0,0,72,906,
        1,0,0,0,74,918,1,0,0,0,76,951,1,0,0,0,78,960,1,0,0,0,80,970,1,0,
        0,0,82,977,1,0,0,0,84,989,1,0,0,0,86,991,1,0,0,0,88,993,1,0,0,0,
        90,1015,1,0,0,0,92,1025,1,0,0,0,94,1031,1,0,0,0,96,1036,1,0,0,0,
        98,1061,1,0,0,0,100,1065,1,0,0,0,102,1067,1,0,0,0,104,1077,1,0,0,
        0,106,1087,1,0,0,0,108,1103,1,0,0,0,110,1108,1,0,0,0,112,1123,1,
        0,0,0,114,1125,1,0,0,0,116,1127,1,0,0,0,118,1129,1,0,0,0,120,1131,
        1,0,0,0,122,1138,1,0,0,0,124,1162,1,0,0,0,126,1177,1,0,0,0,128,1184,
        1,0,0,0,130,1201,1,0,0,0,132,1203,1,0,0,0,134,1236,1,0,0,0,136,1257,
        1,0,0,0,138,1261,1,0,0,0,140,1270,1,0,0,0,142,1286,1,0,0,0,144,1309,
        1,0,0,0,146,1316,1,0,0,0,148,1328,1,0,0,0,150,1330,1,0,0,0,152,1334,
        1,0,0,0,154,1336,1,0,0,0,156,1338,1,0,0,0,158,1341,1,0,0,0,160,1355,
        1,0,0,0,162,1357,1,0,0,0,164,1379,1,0,0,0,166,1383,1,0,0,0,168,1420,
        1,0,0,0,170,1423,1,0,0,0,172,1432,1,0,0,0,174,1434,1,0,0,0,176,1444,
        1,0,0,0,178,1466,1,0,0,0,180,1468,1,0,0,0,182,1474,1,0,0,0,184,1494,
        1,0,0,0,186,1514,1,0,0,0,188,1534,1,0,0,0,190,1536,1,0,0,0,192,1556,
        1,0,0,0,194,1563,1,0,0,0,196,1571,1,0,0,0,198,1578,1,0,0,0,200,1622,
        1,0,0,0,202,1631,1,0,0,0,204,1633,1,0,0,0,206,1648,1,0,0,0,208,1652,
        1,0,0,0,210,1656,1,0,0,0,212,1663,1,0,0,0,214,1667,1,0,0,0,216,1681,
        1,0,0,0,218,1697,1,0,0,0,220,1699,1,0,0,0,222,1708,1,0,0,0,224,1778,
        1,0,0,0,226,1782,1,0,0,0,228,1784,1,0,0,0,230,1805,1,0,0,0,232,1815,
        1,0,0,0,234,1821,1,0,0,0,236,1843,1,0,0,0,238,1845,1,0,0,0,240,1847,
        1,0,0,0,242,1856,1,0,0,0,244,1858,1,0,0,0,246,1868,1,0,0,0,248,1878,
        1,0,0,0,250,1894,1,0,0,0,252,1899,1,0,0,0,254,1924,1,0,0,0,256,1931,
        1,0,0,0,258,1948,1,0,0,0,260,1950,1,0,0,0,262,1974,1,0,0,0,264,1976,
        1,0,0,0,266,1978,1,0,0,0,268,1980,1,0,0,0,270,1982,1,0,0,0,272,2015,
        1,0,0,0,274,2036,1,0,0,0,276,2038,1,0,0,0,278,2054,1,0,0,0,280,2084,
        1,0,0,0,282,2108,1,0,0,0,284,2125,1,0,0,0,286,2139,1,0,0,0,288,2159,
        1,0,0,0,290,2249,1,0,0,0,292,2251,1,0,0,0,294,2253,1,0,0,0,296,2263,
        1,0,0,0,298,2269,1,0,0,0,300,2304,1,0,0,0,302,2306,1,0,0,0,304,2309,
        1,0,0,0,306,2338,1,0,0,0,308,2340,1,0,0,0,310,2342,1,0,0,0,312,2350,
        1,0,0,0,314,2353,1,0,0,0,316,2361,1,0,0,0,318,2363,1,0,0,0,320,2367,
        1,0,0,0,322,2369,1,0,0,0,324,2371,1,0,0,0,326,2373,1,0,0,0,328,2398,
        1,0,0,0,330,2400,1,0,0,0,332,2419,1,0,0,0,334,2431,1,0,0,0,336,2433,
        1,0,0,0,338,2440,1,0,0,0,340,2442,1,0,0,0,342,2444,1,0,0,0,344,2446,
        1,0,0,0,346,350,3,162,81,0,347,350,3,40,20,0,348,350,3,36,18,0,349,
        346,1,0,0,0,349,347,1,0,0,0,349,348,1,0,0,0,350,1,1,0,0,0,351,352,
        5,58,0,0,352,354,5,135,0,0,353,351,1,0,0,0,353,354,1,0,0,0,354,355,
        1,0,0,0,355,357,5,59,0,0,356,358,5,135,0,0,357,356,1,0,0,0,357,358,
        1,0,0,0,358,359,1,0,0,0,359,367,3,214,107,0,360,362,5,135,0,0,361,
        360,1,0,0,0,361,362,1,0,0,0,362,365,1,0,0,0,363,366,3,32,16,0,364,
        366,3,34,17,0,365,363,1,0,0,0,365,364,1,0,0,0,366,368,1,0,0,0,367,
        361,1,0,0,0,367,368,1,0,0,0,368,373,1,0,0,0,369,371,5,135,0,0,370,
        369,1,0,0,0,370,371,1,0,0,0,371,372,1,0,0,0,372,374,3,98,49,0,373,
        370,1,0,0,0,373,374,1,0,0,0,374,3,1,0,0,0,375,382,3,6,3,0,376,382,
        3,8,4,0,377,382,3,10,5,0,378,382,3,12,6,0,379,382,3,14,7,0,380,382,
        3,28,14,0,381,375,1,0,0,0,381,376,1,0,0,0,381,377,1,0,0,0,381,378,
        1,0,0,0,381,379,1,0,0,0,381,380,1,0,0,0,382,5,1,0,0,0,383,385,5,
        64,0,0,384,386,5,135,0,0,385,384,1,0,0,0,385,386,1,0,0,0,386,387,
        1,0,0,0,387,392,3,214,107,0,388,390,5,135,0,0,389,388,1,0,0,0,389,
        390,1,0,0,0,390,391,1,0,0,0,391,393,3,32,16,0,392,389,1,0,0,0,392,
        393,1,0,0,0,393,7,1,0,0,0,394,396,5,62,0,0,395,397,5,135,0,0,396,
        395,1,0,0,0,396,397,1,0,0,0,397,398,1,0,0,0,398,403,3,58,29,0,399,
        400,5,135,0,0,400,402,3,178,89,0,401,399,1,0,0,0,402,405,1,0,0,0,
        403,401,1,0,0,0,403,404,1,0,0,0,404,410,1,0,0,0,405,403,1,0,0,0,
        406,408,5,135,0,0,407,406,1,0,0,0,407,408,1,0,0,0,408,409,1,0,0,
        0,409,411,3,32,16,0,410,407,1,0,0,0,410,411,1,0,0,0,411,9,1,0,0,
        0,412,414,5,65,0,0,413,415,5,135,0,0,414,413,1,0,0,0,414,415,1,0,
        0,0,415,416,1,0,0,0,416,427,3,16,8,0,417,419,5,135,0,0,418,417,1,
        0,0,0,418,419,1,0,0,0,419,420,1,0,0,0,420,422,5,1,0,0,421,423,5,
        135,0,0,422,421,1,0,0,0,422,423,1,0,0,0,423,424,1,0,0,0,424,426,
        3,16,8,0,425,418,1,0,0,0,426,429,1,0,0,0,427,425,1,0,0,0,427,428,
        1,0,0,0,428,434,1,0,0,0,429,427,1,0,0,0,430,432,5,135,0,0,431,430,
        1,0,0,0,431,432,1,0,0,0,432,433,1,0,0,0,433,435,3,32,16,0,434,431,
        1,0,0,0,434,435,1,0,0,0,435,11,1,0,0,0,436,437,5,68,0,0,437,438,
        5,135,0,0,438,449,3,188,94,0,439,441,5,135,0,0,440,439,1,0,0,0,440,
        441,1,0,0,0,441,442,1,0,0,0,442,444,5,1,0,0,443,445,5,135,0,0,444,
        443,1,0,0,0,444,445,1,0,0,0,445,446,1,0,0,0,446,448,3,188,94,0,447,
        440,1,0,0,0,448,451,1,0,0,0,449,447,1,0,0,0,449,450,1,0,0,0,450,
        456,1,0,0,0,451,449,1,0,0,0,452,454,5,135,0,0,453,452,1,0,0,0,453,
        454,1,0,0,0,454,455,1,0,0,0,455,457,3,32,16,0,456,453,1,0,0,0,456,
        457,1,0,0,0,457,13,1,0,0,0,458,460,5,53,0,0,459,461,5,135,0,0,460,
        459,1,0,0,0,460,461,1,0,0,0,461,462,1,0,0,0,462,473,3,26,13,0,463,
        465,5,135,0,0,464,463,1,0,0,0,464,465,1,0,0,0,465,466,1,0,0,0,466,
        468,5,1,0,0,467,469,5,135,0,0,468,467,1,0,0,0,468,469,1,0,0,0,469,
        470,1,0,0,0,470,472,3,26,13,0,471,464,1,0,0,0,472,475,1,0,0,0,473,
        471,1,0,0,0,473,474,1,0,0,0,474,480,1,0,0,0,475,473,1,0,0,0,476,
        478,5,135,0,0,477,476,1,0,0,0,477,478,1,0,0,0,478,479,1,0,0,0,479,
        481,3,32,16,0,480,477,1,0,0,0,480,481,1,0,0,0,481,15,1,0,0,0,482,
        484,3,314,157,0,483,485,5,135,0,0,484,483,1,0,0,0,484,485,1,0,0,
        0,485,486,1,0,0,0,486,487,3,96,48,0,487,567,1,0,0,0,488,493,3,314,
        157,0,489,491,5,135,0,0,490,489,1,0,0,0,490,491,1,0,0,0,491,492,
        1,0,0,0,492,494,3,96,48,0,493,490,1,0,0,0,493,494,1,0,0,0,494,495,
        1,0,0,0,495,496,5,2,0,0,496,497,3,18,9,0,497,567,1,0,0,0,498,503,
        3,314,157,0,499,501,5,135,0,0,500,499,1,0,0,0,500,501,1,0,0,0,501,
        502,1,0,0,0,502,504,3,96,48,0,503,500,1,0,0,0,503,504,1,0,0,0,504,
        505,1,0,0,0,505,506,5,2,0,0,506,508,3,20,10,0,507,509,5,135,0,0,
        508,507,1,0,0,0,508,509,1,0,0,0,509,510,1,0,0,0,510,511,3,22,11,
        0,511,567,1,0,0,0,512,517,3,314,157,0,513,515,5,135,0,0,514,513,
        1,0,0,0,514,515,1,0,0,0,515,516,1,0,0,0,516,518,3,96,48,0,517,514,
        1,0,0,0,517,518,1,0,0,0,518,519,1,0,0,0,519,520,5,2,0,0,520,522,
        3,20,10,0,521,523,5,135,0,0,522,521,1,0,0,0,522,523,1,0,0,0,523,
        524,1,0,0,0,524,526,5,3,0,0,525,527,5,135,0,0,526,525,1,0,0,0,526,
        527,1,0,0,0,527,528,1,0,0,0,528,529,3,24,12,0,529,567,1,0,0,0,530,
        532,3,240,120,0,531,533,5,135,0,0,532,531,1,0,0,0,532,533,1,0,0,
        0,533,534,1,0,0,0,534,536,5,3,0,0,535,537,5,135,0,0,536,535,1,0,
        0,0,536,537,1,0,0,0,537,538,1,0,0,0,538,539,3,242,121,0,539,567,
        1,0,0,0,540,542,3,314,157,0,541,543,5,135,0,0,542,541,1,0,0,0,542,
        543,1,0,0,0,543,544,1,0,0,0,544,546,5,3,0,0,545,547,5,135,0,0,546,
        545,1,0,0,0,546,547,1,0,0,0,547,548,1,0,0,0,548,549,3,242,121,0,
        549,567,1,0,0,0,550,552,3,314,157,0,551,553,5,135,0,0,552,551,1,
        0,0,0,552,553,1,0,0,0,553,554,1,0,0,0,554,556,5,4,0,0,555,557,5,
        135,0,0,556,555,1,0,0,0,556,557,1,0,0,0,557,558,1,0,0,0,558,559,
        3,242,121,0,559,567,1,0,0,0,560,562,3,314,157,0,561,563,5,135,0,
        0,562,561,1,0,0,0,562,563,1,0,0,0,563,564,1,0,0,0,564,565,3,230,
        115,0,565,567,1,0,0,0,566,482,1,0,0,0,566,488,1,0,0,0,566,498,1,
        0,0,0,566,512,1,0,0,0,566,530,1,0,0,0,566,540,1,0,0,0,566,550,1,
        0,0,0,566,560,1,0,0,0,567,17,1,0,0,0,568,570,3,334,167,0,569,571,
        5,135,0,0,570,569,1,0,0,0,570,571,1,0,0,0,571,572,1,0,0,0,572,573,
        3,96,48,0,573,19,1,0,0,0,574,579,3,334,167,0,575,577,5,135,0,0,576,
        575,1,0,0,0,576,577,1,0,0,0,577,578,1,0,0,0,578,580,3,96,48,0,579,
        576,1,0,0,0,579,580,1,0,0,0,580,21,1,0,0,0,581,583,5,47,0,0,582,
        584,5,135,0,0,583,582,1,0,0,0,583,584,1,0,0,0,584,585,1,0,0,0,585,
        586,3,96,48,0,586,23,1,0,0,0,587,592,3,242,121,0,588,590,5,135,0,
        0,589,588,1,0,0,0,589,590,1,0,0,0,590,591,1,0,0,0,591,593,3,96,48,
        0,592,589,1,0,0,0,592,593,1,0,0,0,593,25,1,0,0,0,594,595,3,242,121,
        0,595,596,5,2,0,0,596,598,3,334,167,0,597,599,5,135,0,0,598,597,
        1,0,0,0,598,599,1,0,0,0,599,600,1,0,0,0,600,601,5,47,0,0,601,604,
        1,0,0,0,602,604,3,242,121,0,603,594,1,0,0,0,603,602,1,0,0,0,604,
        27,1,0,0,0,605,606,5,66,0,0,606,608,5,135,0,0,607,605,1,0,0,0,607,
        608,1,0,0,0,608,609,1,0,0,0,609,611,5,67,0,0,610,612,5,135,0,0,611,
        610,1,0,0,0,611,612,1,0,0,0,612,613,1,0,0,0,613,624,3,30,15,0,614,
        616,5,135,0,0,615,614,1,0,0,0,615,616,1,0,0,0,616,617,1,0,0,0,617,
        619,5,1,0,0,618,620,5,135,0,0,619,618,1,0,0,0,619,620,1,0,0,0,620,
        621,1,0,0,0,621,623,3,30,15,0,622,615,1,0,0,0,623,626,1,0,0,0,624,
        622,1,0,0,0,624,625,1,0,0,0,625,634,1,0,0,0,626,624,1,0,0,0,627,
        629,5,135,0,0,628,627,1,0,0,0,628,629,1,0,0,0,629,632,1,0,0,0,630,
        633,3,32,16,0,631,633,3,34,17,0,632,630,1,0,0,0,632,631,1,0,0,0,
        633,635,1,0,0,0,634,628,1,0,0,0,634,635,1,0,0,0,635,29,1,0,0,0,636,
        637,3,242,121,0,637,638,5,2,0,0,638,640,3,334,167,0,639,641,5,135,
        0,0,640,639,1,0,0,0,640,641,1,0,0,0,641,642,1,0,0,0,642,643,5,47,
        0,0,643,646,1,0,0,0,644,646,3,242,121,0,645,636,1,0,0,0,645,644,
        1,0,0,0,646,31,1,0,0,0,647,649,5,49,0,0,648,650,5,135,0,0,649,648,
        1,0,0,0,649,650,1,0,0,0,650,651,1,0,0,0,651,652,3,242,121,0,652,
        33,1,0,0,0,653,655,5,51,0,0,654,656,5,135,0,0,655,654,1,0,0,0,655,
        656,1,0,0,0,656,657,1,0,0,0,657,658,3,242,121,0,658,35,1,0,0,0,659,
        662,3,54,27,0,660,662,3,56,28,0,661,659,1,0,0,0,661,660,1,0,0,0,
        662,37,1,0,0,0,663,664,5,69,0,0,664,665,5,135,0,0,665,672,3,304,
        152,0,666,668,5,135,0,0,667,666,1,0,0,0,667,668,1,0,0,0,668,669,
        1,0,0,0,669,670,5,70,0,0,670,671,5,135,0,0,671,673,3,42,21,0,672,
        667,1,0,0,0,672,673,1,0,0,0,673,39,1,0,0,0,674,675,5,69,0,0,675,
        678,5,135,0,0,676,679,3,304,152,0,677,679,3,306,153,0,678,676,1,
        0,0,0,678,677,1,0,0,0,679,689,1,0,0,0,680,682,5,135,0,0,681,680,
        1,0,0,0,681,682,1,0,0,0,682,683,1,0,0,0,683,684,5,70,0,0,684,687,
        5,135,0,0,685,688,5,5,0,0,686,688,3,42,21,0,687,685,1,0,0,0,687,
        686,1,0,0,0,688,690,1,0,0,0,689,681,1,0,0,0,689,690,1,0,0,0,690,
        41,1,0,0,0,691,702,3,44,22,0,692,694,5,135,0,0,693,692,1,0,0,0,693,
        694,1,0,0,0,694,695,1,0,0,0,695,697,5,1,0,0,696,698,5,135,0,0,697,
        696,1,0,0,0,697,698,1,0,0,0,698,699,1,0,0,0,699,701,3,44,22,0,700,
        693,1,0,0,0,701,704,1,0,0,0,702,700,1,0,0,0,702,703,1,0,0,0,703,
        709,1,0,0,0,704,702,1,0,0,0,705,707,5,135,0,0,706,705,1,0,0,0,706,
        707,1,0,0,0,707,708,1,0,0,0,708,710,3,98,49,0,709,706,1,0,0,0,709,
        710,1,0,0,0,710,43,1,0,0,0,711,716,3,308,154,0,712,713,5,135,0,0,
        713,714,5,61,0,0,714,715,5,135,0,0,715,717,3,314,157,0,716,712,1,
        0,0,0,716,717,1,0,0,0,717,45,1,0,0,0,718,720,3,172,86,0,719,721,
        5,135,0,0,720,719,1,0,0,0,720,721,1,0,0,0,721,723,1,0,0,0,722,718,
        1,0,0,0,723,726,1,0,0,0,724,722,1,0,0,0,724,725,1,0,0,0,725,733,
        1,0,0,0,726,724,1,0,0,0,727,729,3,4,2,0,728,730,5,135,0,0,729,728,
        1,0,0,0,729,730,1,0,0,0,730,732,1,0,0,0,731,727,1,0,0,0,732,735,
        1,0,0,0,733,731,1,0,0,0,733,734,1,0,0,0,734,736,1,0,0,0,735,733,
        1,0,0,0,736,738,3,48,24,0,737,739,5,135,0,0,738,737,1,0,0,0,738,
        739,1,0,0,0,739,47,1,0,0,0,740,741,5,71,0,0,741,746,3,198,99,0,742,
        744,5,135,0,0,743,742,1,0,0,0,743,744,1,0,0,0,744,745,1,0,0,0,745,
        747,3,98,49,0,746,743,1,0,0,0,746,747,1,0,0,0,747,49,1,0,0,0,748,
        750,5,102,0,0,749,751,5,135,0,0,750,749,1,0,0,0,750,751,1,0,0,0,
        751,752,1,0,0,0,752,754,5,6,0,0,753,755,5,135,0,0,754,753,1,0,0,
        0,754,755,1,0,0,0,755,764,1,0,0,0,756,765,3,162,81,0,757,762,3,214,
        107,0,758,760,5,135,0,0,759,758,1,0,0,0,759,760,1,0,0,0,760,761,
        1,0,0,0,761,763,3,98,49,0,762,759,1,0,0,0,762,763,1,0,0,0,763,765,
        1,0,0,0,764,756,1,0,0,0,764,757,1,0,0,0,765,767,1,0,0,0,766,768,
        5,135,0,0,767,766,1,0,0,0,767,768,1,0,0,0,768,769,1,0,0,0,769,770,
        5,7,0,0,770,51,1,0,0,0,771,776,3,296,148,0,772,774,5,135,0,0,773,
        772,1,0,0,0,773,774,1,0,0,0,774,775,1,0,0,0,775,777,3,98,49,0,776,
        773,1,0,0,0,776,777,1,0,0,0,777,53,1,0,0,0,778,780,5,50,0,0,779,
        781,5,135,0,0,780,779,1,0,0,0,780,781,1,0,0,0,781,782,1,0,0,0,782,
        783,3,242,121,0,783,55,1,0,0,0,784,786,5,52,0,0,785,787,5,135,0,
        0,786,785,1,0,0,0,786,787,1,0,0,0,787,788,1,0,0,0,788,789,3,242,
        121,0,789,57,1,0,0,0,790,792,3,314,157,0,791,793,5,135,0,0,792,791,
        1,0,0,0,792,793,1,0,0,0,793,794,1,0,0,0,794,796,5,3,0,0,795,797,
        5,135,0,0,796,795,1,0,0,0,796,797,1,0,0,0,797,798,1,0,0,0,798,799,
        3,60,30,0,799,812,1,0,0,0,800,802,3,314,157,0,801,803,5,135,0,0,
        802,801,1,0,0,0,802,803,1,0,0,0,803,804,1,0,0,0,804,806,5,3,0,0,
        805,807,5,135,0,0,806,805,1,0,0,0,806,807,1,0,0,0,807,808,1,0,0,
        0,808,809,3,216,108,0,809,812,1,0,0,0,810,812,3,216,108,0,811,790,
        1,0,0,0,811,800,1,0,0,0,811,810,1,0,0,0,812,59,1,0,0,0,813,815,3,
        302,151,0,814,816,5,135,0,0,815,814,1,0,0,0,815,816,1,0,0,0,816,
        817,1,0,0,0,817,819,5,8,0,0,818,820,5,135,0,0,819,818,1,0,0,0,819,
        820,1,0,0,0,820,821,1,0,0,0,821,823,3,62,31,0,822,824,5,135,0,0,
        823,822,1,0,0,0,823,824,1,0,0,0,824,825,1,0,0,0,825,826,5,9,0,0,
        826,61,1,0,0,0,827,829,3,64,32,0,828,830,5,135,0,0,829,828,1,0,0,
        0,829,830,1,0,0,0,830,831,1,0,0,0,831,833,3,224,112,0,832,834,5,
        135,0,0,833,832,1,0,0,0,833,834,1,0,0,0,834,835,1,0,0,0,835,836,
        3,64,32,0,836,63,1,0,0,0,837,839,5,8,0,0,838,840,5,135,0,0,839,838,
        1,0,0,0,839,840,1,0,0,0,840,845,1,0,0,0,841,843,3,314,157,0,842,
        844,5,135,0,0,843,842,1,0,0,0,843,844,1,0,0,0,844,846,1,0,0,0,845,
        841,1,0,0,0,845,846,1,0,0,0,846,851,1,0,0,0,847,849,3,230,115,0,
        848,850,5,135,0,0,849,848,1,0,0,0,849,850,1,0,0,0,850,852,1,0,0,
        0,851,847,1,0,0,0,851,852,1,0,0,0,852,857,1,0,0,0,853,855,3,96,48,
        0,854,856,5,135,0,0,855,854,1,0,0,0,855,856,1,0,0,0,856,858,1,0,
        0,0,857,853,1,0,0,0,857,858,1,0,0,0,858,863,1,0,0,0,859,861,3,66,
        33,0,860,862,5,135,0,0,861,860,1,0,0,0,861,862,1,0,0,0,862,864,1,
        0,0,0,863,859,1,0,0,0,863,864,1,0,0,0,864,865,1,0,0,0,865,866,5,
        9,0,0,866,65,1,0,0,0,867,870,3,68,34,0,868,870,3,336,168,0,869,867,
        1,0,0,0,869,868,1,0,0,0,870,67,1,0,0,0,871,873,5,6,0,0,872,874,5,
        135,0,0,873,872,1,0,0,0,873,874,1,0,0,0,874,891,1,0,0,0,875,876,
        3,70,35,0,876,877,5,10,0,0,877,888,3,72,36,0,878,880,5,1,0,0,879,
        881,5,135,0,0,880,879,1,0,0,0,880,881,1,0,0,0,881,882,1,0,0,0,882,
        883,3,70,35,0,883,884,5,10,0,0,884,885,3,72,36,0,885,887,1,0,0,0,
        886,878,1,0,0,0,887,890,1,0,0,0,888,886,1,0,0,0,888,889,1,0,0,0,
        889,892,1,0,0,0,890,888,1,0,0,0,891,875,1,0,0,0,891,892,1,0,0,0,
        892,893,1,0,0,0,893,894,5,7,0,0,894,69,1,0,0,0,895,897,3,334,167,
        0,896,898,5,135,0,0,897,896,1,0,0,0,897,898,1,0,0,0,898,903,1,0,
        0,0,899,901,3,96,48,0,900,902,5,135,0,0,901,900,1,0,0,0,901,902,
        1,0,0,0,902,904,1,0,0,0,903,899,1,0,0,0,903,904,1,0,0,0,904,71,1,
        0,0,0,905,907,5,135,0,0,906,905,1,0,0,0,906,907,1,0,0,0,907,908,
        1,0,0,0,908,910,3,242,121,0,909,911,5,135,0,0,910,909,1,0,0,0,910,
        911,1,0,0,0,911,916,1,0,0,0,912,914,3,96,48,0,913,915,5,135,0,0,
        914,913,1,0,0,0,914,915,1,0,0,0,915,917,1,0,0,0,916,912,1,0,0,0,
        916,917,1,0,0,0,917,73,1,0,0,0,918,920,5,11,0,0,919,921,5,135,0,
        0,920,919,1,0,0,0,920,921,1,0,0,0,921,926,1,0,0,0,922,924,3,314,
        157,0,923,925,5,135,0,0,924,923,1,0,0,0,924,925,1,0,0,0,925,927,
        1,0,0,0,926,922,1,0,0,0,926,927,1,0,0,0,927,932,1,0,0,0,928,930,
        3,228,114,0,929,931,5,135,0,0,930,929,1,0,0,0,930,931,1,0,0,0,931,
        933,1,0,0,0,932,928,1,0,0,0,932,933,1,0,0,0,933,935,1,0,0,0,934,
        936,3,234,117,0,935,934,1,0,0,0,935,936,1,0,0,0,936,941,1,0,0,0,
        937,939,3,96,48,0,938,940,5,135,0,0,939,938,1,0,0,0,939,940,1,0,
        0,0,940,942,1,0,0,0,941,937,1,0,0,0,941,942,1,0,0,0,942,947,1,0,
        0,0,943,945,3,226,113,0,944,946,5,135,0,0,945,944,1,0,0,0,945,946,
        1,0,0,0,946,948,1,0,0,0,947,943,1,0,0,0,947,948,1,0,0,0,948,949,
        1,0,0,0,949,950,5,12,0,0,950,75,1,0,0,0,951,956,3,260,130,0,952,
        957,3,94,47,0,953,957,3,254,127,0,954,957,3,256,128,0,955,957,3,
        258,129,0,956,952,1,0,0,0,956,953,1,0,0,0,956,954,1,0,0,0,956,955,
        1,0,0,0,956,957,1,0,0,0,957,77,1,0,0,0,958,961,3,276,138,0,959,961,
        3,88,44,0,960,958,1,0,0,0,960,959,1,0,0,0,961,966,1,0,0,0,962,965,
        3,80,40,0,963,965,3,82,41,0,964,962,1,0,0,0,964,963,1,0,0,0,965,
        968,1,0,0,0,966,964,1,0,0,0,966,967,1,0,0,0,967,79,1,0,0,0,968,966,
        1,0,0,0,969,971,5,135,0,0,970,969,1,0,0,0,970,971,1,0,0,0,971,972,
        1,0,0,0,972,973,5,11,0,0,973,974,3,84,42,0,974,975,5,12,0,0,975,
        81,1,0,0,0,976,978,5,135,0,0,977,976,1,0,0,0,977,978,1,0,0,0,978,
        979,1,0,0,0,979,981,5,11,0,0,980,982,3,84,42,0,981,980,1,0,0,0,981,
        982,1,0,0,0,982,983,1,0,0,0,983,985,5,13,0,0,984,986,3,86,43,0,985,
        984,1,0,0,0,985,986,1,0,0,0,986,987,1,0,0,0,987,988,5,12,0,0,988,
        83,1,0,0,0,989,990,3,242,121,0,990,85,1,0,0,0,991,992,3,242,121,
        0,992,87,1,0,0,0,993,1008,3,280,140,0,994,996,5,135,0,0,995,994,
        1,0,0,0,995,996,1,0,0,0,996,997,1,0,0,0,997,999,3,278,139,0,998,
        995,1,0,0,0,999,1000,1,0,0,0,1000,998,1,0,0,0,1000,1001,1,0,0,0,
        1001,1006,1,0,0,0,1002,1004,5,135,0,0,1003,1002,1,0,0,0,1003,1004,
        1,0,0,0,1004,1005,1,0,0,0,1005,1007,5,47,0,0,1006,1003,1,0,0,0,1006,
        1007,1,0,0,0,1007,1009,1,0,0,0,1008,998,1,0,0,0,1008,1009,1,0,0,
        0,1009,1011,1,0,0,0,1010,1012,5,135,0,0,1011,1010,1,0,0,0,1011,1012,
        1,0,0,0,1012,1013,1,0,0,0,1013,1014,3,90,45,0,1014,89,1,0,0,0,1015,
        1022,5,46,0,0,1016,1018,5,135,0,0,1017,1016,1,0,0,0,1017,1018,1,
        0,0,0,1018,1019,1,0,0,0,1019,1021,3,92,46,0,1020,1017,1,0,0,0,1021,
        1024,1,0,0,0,1022,1020,1,0,0,0,1022,1023,1,0,0,0,1023,91,1,0,0,0,
        1024,1022,1,0,0,0,1025,1027,5,2,0,0,1026,1028,5,135,0,0,1027,1026,
        1,0,0,0,1027,1028,1,0,0,0,1028,1029,1,0,0,0,1029,1030,3,334,167,
        0,1030,93,1,0,0,0,1031,1032,5,135,0,0,1032,1033,7,0,0,0,1033,1034,
        5,135,0,0,1034,1035,3,260,130,0,1035,95,1,0,0,0,1036,1038,5,46,0,
        0,1037,1039,5,135,0,0,1038,1037,1,0,0,0,1038,1039,1,0,0,0,1039,1040,
        1,0,0,0,1040,1042,5,8,0,0,1041,1043,5,135,0,0,1042,1041,1,0,0,0,
        1042,1043,1,0,0,0,1043,1044,1,0,0,0,1044,1046,3,152,76,0,1045,1047,
        5,135,0,0,1046,1045,1,0,0,0,1046,1047,1,0,0,0,1047,1048,1,0,0,0,
        1048,1050,5,1,0,0,1049,1051,5,135,0,0,1050,1049,1,0,0,0,1050,1051,
        1,0,0,0,1051,1054,1,0,0,0,1052,1055,3,152,76,0,1053,1055,5,48,0,
        0,1054,1052,1,0,0,0,1054,1053,1,0,0,0,1055,1057,1,0,0,0,1056,1058,
        5,135,0,0,1057,1056,1,0,0,0,1057,1058,1,0,0,0,1058,1059,1,0,0,0,
        1059,1060,5,9,0,0,1060,97,1,0,0,0,1061,1062,5,82,0,0,1062,1063,5,
        135,0,0,1063,1064,3,100,50,0,1064,99,1,0,0,0,1065,1066,3,102,51,
        0,1066,101,1,0,0,0,1067,1074,3,104,52,0,1068,1069,5,135,0,0,1069,
        1070,5,83,0,0,1070,1071,5,135,0,0,1071,1073,3,104,52,0,1072,1068,
        1,0,0,0,1073,1076,1,0,0,0,1074,1072,1,0,0,0,1074,1075,1,0,0,0,1075,
        103,1,0,0,0,1076,1074,1,0,0,0,1077,1084,3,106,53,0,1078,1079,5,135,
        0,0,1079,1080,5,84,0,0,1080,1081,5,135,0,0,1081,1083,3,106,53,0,
        1082,1078,1,0,0,0,1083,1086,1,0,0,0,1084,1082,1,0,0,0,1084,1085,
        1,0,0,0,1085,105,1,0,0,0,1086,1084,1,0,0,0,1087,1094,3,108,54,0,
        1088,1089,5,135,0,0,1089,1090,5,85,0,0,1090,1091,5,135,0,0,1091,
        1093,3,108,54,0,1092,1088,1,0,0,0,1093,1096,1,0,0,0,1094,1092,1,
        0,0,0,1094,1095,1,0,0,0,1095,107,1,0,0,0,1096,1094,1,0,0,0,1097,
        1099,5,86,0,0,1098,1100,5,135,0,0,1099,1098,1,0,0,0,1099,1100,1,
        0,0,0,1100,1102,1,0,0,0,1101,1097,1,0,0,0,1102,1105,1,0,0,0,1103,
        1101,1,0,0,0,1103,1104,1,0,0,0,1104,1106,1,0,0,0,1105,1103,1,0,0,
        0,1106,1107,3,110,55,0,1107,109,1,0,0,0,1108,1120,3,120,60,0,1109,
        1111,5,135,0,0,1110,1109,1,0,0,0,1110,1111,1,0,0,0,1111,1112,1,0,
        0,0,1112,1114,3,118,59,0,1113,1115,5,135,0,0,1114,1113,1,0,0,0,1114,
        1115,1,0,0,0,1115,1116,1,0,0,0,1116,1117,3,120,60,0,1117,1119,1,
        0,0,0,1118,1110,1,0,0,0,1119,1122,1,0,0,0,1120,1118,1,0,0,0,1120,
        1121,1,0,0,0,1121,111,1,0,0,0,1122,1120,1,0,0,0,1123,1124,7,1,0,
        0,1124,113,1,0,0,0,1125,1126,5,16,0,0,1126,115,1,0,0,0,1127,1128,
        7,2,0,0,1128,117,1,0,0,0,1129,1130,7,3,0,0,1130,119,1,0,0,0,1131,
        1136,3,122,61,0,1132,1137,3,124,62,0,1133,1137,3,126,63,0,1134,1137,
        3,128,64,0,1135,1137,3,130,65,0,1136,1132,1,0,0,0,1136,1133,1,0,
        0,0,1136,1134,1,0,0,0,1136,1135,1,0,0,0,1136,1137,1,0,0,0,1137,121,
        1,0,0,0,1138,1159,3,132,66,0,1139,1141,5,135,0,0,1140,1139,1,0,0,
        0,1140,1141,1,0,0,0,1141,1142,1,0,0,0,1142,1144,3,116,58,0,1143,
        1145,5,135,0,0,1144,1143,1,0,0,0,1144,1145,1,0,0,0,1145,1146,1,0,
        0,0,1146,1147,3,132,66,0,1147,1158,1,0,0,0,1148,1150,5,135,0,0,1149,
        1148,1,0,0,0,1149,1150,1,0,0,0,1150,1151,1,0,0,0,1151,1153,3,116,
        58,0,1152,1154,5,135,0,0,1153,1152,1,0,0,0,1153,1154,1,0,0,0,1154,
        1155,1,0,0,0,1155,1156,3,132,66,0,1156,1158,1,0,0,0,1157,1140,1,
        0,0,0,1157,1149,1,0,0,0,1158,1161,1,0,0,0,1159,1157,1,0,0,0,1159,
        1160,1,0,0,0,1160,123,1,0,0,0,1161,1159,1,0,0,0,1162,1163,5,135,
        0,0,1163,1164,7,0,0,0,1164,1165,5,135,0,0,1165,1166,3,122,61,0,1166,
        125,1,0,0,0,1167,1168,5,135,0,0,1168,1169,5,87,0,0,1169,1170,5,135,
        0,0,1170,1178,5,71,0,0,1171,1172,5,135,0,0,1172,1173,5,88,0,0,1173,
        1174,5,135,0,0,1174,1178,5,71,0,0,1175,1176,5,135,0,0,1176,1178,
        5,89,0,0,1177,1167,1,0,0,0,1177,1171,1,0,0,0,1177,1175,1,0,0,0,1178,
        1180,1,0,0,0,1179,1181,5,135,0,0,1180,1179,1,0,0,0,1180,1181,1,0,
        0,0,1181,1182,1,0,0,0,1182,1183,3,122,61,0,1183,127,1,0,0,0,1184,
        1185,5,135,0,0,1185,1187,5,90,0,0,1186,1188,5,135,0,0,1187,1186,
        1,0,0,0,1187,1188,1,0,0,0,1188,1189,1,0,0,0,1189,1190,3,122,61,0,
        1190,129,1,0,0,0,1191,1192,5,135,0,0,1192,1193,5,91,0,0,1193,1194,
        5,135,0,0,1194,1202,5,92,0,0,1195,1196,5,135,0,0,1196,1197,5,91,
        0,0,1197,1198,5,135,0,0,1198,1199,5,86,0,0,1199,1200,5,135,0,0,1200,
        1202,5,92,0,0,1201,1191,1,0,0,0,1201,1195,1,0,0,0,1202,131,1,0,0,
        0,1203,1233,3,134,67,0,1204,1206,5,135,0,0,1205,1204,1,0,0,0,1205,
        1206,1,0,0,0,1206,1207,1,0,0,0,1207,1209,3,112,56,0,1208,1210,5,
        135,0,0,1209,1208,1,0,0,0,1209,1210,1,0,0,0,1210,1211,1,0,0,0,1211,
        1212,3,134,67,0,1212,1232,1,0,0,0,1213,1215,5,135,0,0,1214,1213,
        1,0,0,0,1214,1215,1,0,0,0,1215,1216,1,0,0,0,1216,1218,3,112,56,0,
        1217,1219,5,135,0,0,1218,1217,1,0,0,0,1218,1219,1,0,0,0,1219,1220,
        1,0,0,0,1220,1221,3,134,67,0,1221,1232,1,0,0,0,1222,1224,5,135,0,
        0,1223,1222,1,0,0,0,1223,1224,1,0,0,0,1224,1225,1,0,0,0,1225,1227,
        3,112,56,0,1226,1228,5,135,0,0,1227,1226,1,0,0,0,1227,1228,1,0,0,
        0,1228,1229,1,0,0,0,1229,1230,3,134,67,0,1230,1232,1,0,0,0,1231,
        1205,1,0,0,0,1231,1214,1,0,0,0,1231,1223,1,0,0,0,1232,1235,1,0,0,
        0,1233,1231,1,0,0,0,1233,1234,1,0,0,0,1234,133,1,0,0,0,1235,1233,
        1,0,0,0,1236,1248,3,136,68,0,1237,1239,5,135,0,0,1238,1237,1,0,0,
        0,1238,1239,1,0,0,0,1239,1240,1,0,0,0,1240,1242,3,114,57,0,1241,
        1243,5,135,0,0,1242,1241,1,0,0,0,1242,1243,1,0,0,0,1243,1244,1,0,
        0,0,1244,1245,3,136,68,0,1245,1247,1,0,0,0,1246,1238,1,0,0,0,1247,
        1250,1,0,0,0,1248,1246,1,0,0,0,1248,1249,1,0,0,0,1249,135,1,0,0,
        0,1250,1248,1,0,0,0,1251,1258,3,138,69,0,1252,1254,7,2,0,0,1253,
        1255,5,135,0,0,1254,1253,1,0,0,0,1254,1255,1,0,0,0,1255,1256,1,0,
        0,0,1256,1258,3,138,69,0,1257,1251,1,0,0,0,1257,1252,1,0,0,0,1258,
        137,1,0,0,0,1259,1262,3,140,70,0,1260,1262,3,142,71,0,1261,1259,
        1,0,0,0,1261,1260,1,0,0,0,1262,1267,1,0,0,0,1263,1266,3,144,72,0,
        1264,1266,3,146,73,0,1265,1263,1,0,0,0,1265,1264,1,0,0,0,1266,1269,
        1,0,0,0,1267,1265,1,0,0,0,1267,1268,1,0,0,0,1268,139,1,0,0,0,1269,
        1267,1,0,0,0,1270,1277,3,280,140,0,1271,1273,5,135,0,0,1272,1271,
        1,0,0,0,1272,1273,1,0,0,0,1273,1274,1,0,0,0,1274,1276,3,278,139,
        0,1275,1272,1,0,0,0,1276,1279,1,0,0,0,1277,1275,1,0,0,0,1277,1278,
        1,0,0,0,1278,1284,1,0,0,0,1279,1277,1,0,0,0,1280,1282,5,135,0,0,
        1281,1280,1,0,0,0,1281,1282,1,0,0,0,1282,1283,1,0,0,0,1283,1285,
        3,230,115,0,1284,1281,1,0,0,0,1284,1285,1,0,0,0,1285,141,1,0,0,0,
        1286,1301,3,280,140,0,1287,1289,5,135,0,0,1288,1287,1,0,0,0,1288,
        1289,1,0,0,0,1289,1290,1,0,0,0,1290,1292,3,278,139,0,1291,1288,1,
        0,0,0,1292,1293,1,0,0,0,1293,1291,1,0,0,0,1293,1294,1,0,0,0,1294,
        1299,1,0,0,0,1295,1297,5,135,0,0,1296,1295,1,0,0,0,1296,1297,1,0,
        0,0,1297,1298,1,0,0,0,1298,1300,5,47,0,0,1299,1296,1,0,0,0,1299,
        1300,1,0,0,0,1300,1302,1,0,0,0,1301,1291,1,0,0,0,1301,1302,1,0,0,
        0,1302,1304,1,0,0,0,1303,1305,5,135,0,0,1304,1303,1,0,0,0,1304,1305,
        1,0,0,0,1305,1306,1,0,0,0,1306,1307,3,90,45,0,1307,143,1,0,0,0,1308,
        1310,5,135,0,0,1309,1308,1,0,0,0,1309,1310,1,0,0,0,1310,1311,1,0,
        0,0,1311,1312,5,11,0,0,1312,1313,3,148,74,0,1313,1314,5,12,0,0,1314,
        145,1,0,0,0,1315,1317,5,135,0,0,1316,1315,1,0,0,0,1316,1317,1,0,
        0,0,1317,1318,1,0,0,0,1318,1320,5,11,0,0,1319,1321,3,148,74,0,1320,
        1319,1,0,0,0,1320,1321,1,0,0,0,1321,1322,1,0,0,0,1322,1324,5,13,
        0,0,1323,1325,3,150,75,0,1324,1323,1,0,0,0,1324,1325,1,0,0,0,1325,
        1326,1,0,0,0,1326,1327,5,12,0,0,1327,147,1,0,0,0,1328,1329,3,242,
        121,0,1329,149,1,0,0,0,1330,1331,3,242,121,0,1331,151,1,0,0,0,1332,
        1335,5,117,0,0,1333,1335,3,330,165,0,1334,1332,1,0,0,0,1334,1333,
        1,0,0,0,1335,153,1,0,0,0,1336,1337,7,4,0,0,1337,155,1,0,0,0,1338,
        1339,7,5,0,0,1339,157,1,0,0,0,1340,1342,5,135,0,0,1341,1340,1,0,
        0,0,1341,1342,1,0,0,0,1342,1343,1,0,0,0,1343,1348,3,160,80,0,1344,
        1346,5,135,0,0,1345,1344,1,0,0,0,1345,1346,1,0,0,0,1346,1347,1,0,
        0,0,1347,1349,5,24,0,0,1348,1345,1,0,0,0,1348,1349,1,0,0,0,1349,
        1351,1,0,0,0,1350,1352,5,135,0,0,1351,1350,1,0,0,0,1351,1352,1,0,
        0,0,1352,1353,1,0,0,0,1353,1354,5,0,0,1,1354,159,1,0,0,0,1355,1356,
        3,0,0,0,1356,161,1,0,0,0,1357,1364,3,166,83,0,1358,1360,5,135,0,
        0,1359,1358,1,0,0,0,1359,1360,1,0,0,0,1360,1361,1,0,0,0,1361,1363,
        3,164,82,0,1362,1359,1,0,0,0,1363,1366,1,0,0,0,1364,1362,1,0,0,0,
        1364,1365,1,0,0,0,1365,163,1,0,0,0,1366,1364,1,0,0,0,1367,1368,5,
        56,0,0,1368,1369,5,135,0,0,1369,1371,5,57,0,0,1370,1372,5,135,0,
        0,1371,1370,1,0,0,0,1371,1372,1,0,0,0,1372,1373,1,0,0,0,1373,1380,
        3,166,83,0,1374,1376,5,56,0,0,1375,1377,5,135,0,0,1376,1375,1,0,
        0,0,1376,1377,1,0,0,0,1377,1378,1,0,0,0,1378,1380,3,166,83,0,1379,
        1367,1,0,0,0,1379,1374,1,0,0,0,1380,165,1,0,0,0,1381,1384,3,168,
        84,0,1382,1384,3,170,85,0,1383,1381,1,0,0,0,1383,1382,1,0,0,0,1384,
        167,1,0,0,0,1385,1387,3,172,86,0,1386,1388,5,135,0,0,1387,1386,1,
        0,0,0,1387,1388,1,0,0,0,1388,1390,1,0,0,0,1389,1385,1,0,0,0,1390,
        1393,1,0,0,0,1391,1389,1,0,0,0,1391,1392,1,0,0,0,1392,1394,1,0,0,
        0,1393,1391,1,0,0,0,1394,1421,3,196,98,0,1395,1397,3,172,86,0,1396,
        1398,5,135,0,0,1397,1396,1,0,0,0,1397,1398,1,0,0,0,1398,1400,1,0,
        0,0,1399,1395,1,0,0,0,1400,1403,1,0,0,0,1401,1399,1,0,0,0,1401,1402,
        1,0,0,0,1402,1404,1,0,0,0,1403,1401,1,0,0,0,1404,1411,3,4,2,0,1405,
        1407,5,135,0,0,1406,1405,1,0,0,0,1406,1407,1,0,0,0,1407,1408,1,0,
        0,0,1408,1410,3,4,2,0,1409,1406,1,0,0,0,1410,1413,1,0,0,0,1411,1409,
        1,0,0,0,1411,1412,1,0,0,0,1412,1418,1,0,0,0,1413,1411,1,0,0,0,1414,
        1416,5,135,0,0,1415,1414,1,0,0,0,1415,1416,1,0,0,0,1416,1417,1,0,
        0,0,1417,1419,3,196,98,0,1418,1415,1,0,0,0,1418,1419,1,0,0,0,1419,
        1421,1,0,0,0,1420,1391,1,0,0,0,1420,1401,1,0,0,0,1421,169,1,0,0,
        0,1422,1424,3,46,23,0,1423,1422,1,0,0,0,1424,1425,1,0,0,0,1425,1423,
        1,0,0,0,1425,1426,1,0,0,0,1426,1427,1,0,0,0,1427,1428,3,168,84,0,
        1428,171,1,0,0,0,1429,1433,3,2,1,0,1430,1433,3,174,87,0,1431,1433,
        3,38,19,0,1432,1429,1,0,0,0,1432,1430,1,0,0,0,1432,1431,1,0,0,0,
        1433,173,1,0,0,0,1434,1436,5,60,0,0,1435,1437,5,135,0,0,1436,1435,
        1,0,0,0,1436,1437,1,0,0,0,1437,1438,1,0,0,0,1438,1439,3,242,121,
        0,1439,1440,5,135,0,0,1440,1441,5,61,0,0,1441,1442,5,135,0,0,1442,
        1443,3,314,157,0,1443,175,1,0,0,0,1444,1446,5,62,0,0,1445,1447,5,
        135,0,0,1446,1445,1,0,0,0,1446,1447,1,0,0,0,1447,1448,1,0,0,0,1448,
        1453,3,58,29,0,1449,1450,5,135,0,0,1450,1452,3,178,89,0,1451,1449,
        1,0,0,0,1452,1455,1,0,0,0,1453,1451,1,0,0,0,1453,1454,1,0,0,0,1454,
        177,1,0,0,0,1455,1453,1,0,0,0,1456,1457,5,63,0,0,1457,1458,5,135,
        0,0,1458,1459,5,59,0,0,1459,1460,5,135,0,0,1460,1467,3,182,91,0,
        1461,1462,5,63,0,0,1462,1463,5,135,0,0,1463,1464,5,64,0,0,1464,1465,
        5,135,0,0,1465,1467,3,182,91,0,1466,1456,1,0,0,0,1466,1461,1,0,0,
        0,1467,179,1,0,0,0,1468,1470,5,64,0,0,1469,1471,5,135,0,0,1470,1469,
        1,0,0,0,1470,1471,1,0,0,0,1471,1472,1,0,0,0,1472,1473,3,214,107,
        0,1473,181,1,0,0,0,1474,1476,5,65,0,0,1475,1477,5,135,0,0,1476,1475,
        1,0,0,0,1476,1477,1,0,0,0,1477,1478,1,0,0,0,1478,1489,3,16,8,0,1479,
        1481,5,135,0,0,1480,1479,1,0,0,0,1480,1481,1,0,0,0,1481,1482,1,0,
        0,0,1482,1484,5,1,0,0,1483,1485,5,135,0,0,1484,1483,1,0,0,0,1484,
        1485,1,0,0,0,1485,1486,1,0,0,0,1486,1488,3,16,8,0,1487,1480,1,0,
        0,0,1488,1491,1,0,0,0,1489,1487,1,0,0,0,1489,1490,1,0,0,0,1490,183,
        1,0,0,0,1491,1489,1,0,0,0,1492,1493,5,66,0,0,1493,1495,5,135,0,0,
        1494,1492,1,0,0,0,1494,1495,1,0,0,0,1495,1496,1,0,0,0,1496,1498,
        5,67,0,0,1497,1499,5,135,0,0,1498,1497,1,0,0,0,1498,1499,1,0,0,0,
        1499,1500,1,0,0,0,1500,1511,3,242,121,0,1501,1503,5,135,0,0,1502,
        1501,1,0,0,0,1502,1503,1,0,0,0,1503,1504,1,0,0,0,1504,1506,5,1,0,
        0,1505,1507,5,135,0,0,1506,1505,1,0,0,0,1506,1507,1,0,0,0,1507,1508,
        1,0,0,0,1508,1510,3,242,121,0,1509,1502,1,0,0,0,1510,1513,1,0,0,
        0,1511,1509,1,0,0,0,1511,1512,1,0,0,0,1512,185,1,0,0,0,1513,1511,
        1,0,0,0,1514,1515,5,68,0,0,1515,1516,5,135,0,0,1516,1527,3,188,94,
        0,1517,1519,5,135,0,0,1518,1517,1,0,0,0,1518,1519,1,0,0,0,1519,1520,
        1,0,0,0,1520,1522,5,1,0,0,1521,1523,5,135,0,0,1522,1521,1,0,0,0,
        1522,1523,1,0,0,0,1523,1524,1,0,0,0,1524,1526,3,188,94,0,1525,1518,
        1,0,0,0,1526,1529,1,0,0,0,1527,1525,1,0,0,0,1527,1528,1,0,0,0,1528,
        187,1,0,0,0,1529,1527,1,0,0,0,1530,1531,3,314,157,0,1531,1532,3,
        230,115,0,1532,1535,1,0,0,0,1533,1535,3,240,120,0,1534,1530,1,0,
        0,0,1534,1533,1,0,0,0,1535,189,1,0,0,0,1536,1547,3,192,96,0,1537,
        1539,5,135,0,0,1538,1537,1,0,0,0,1538,1539,1,0,0,0,1539,1540,1,0,
        0,0,1540,1542,5,1,0,0,1541,1543,5,135,0,0,1542,1541,1,0,0,0,1542,
        1543,1,0,0,0,1543,1544,1,0,0,0,1544,1546,3,192,96,0,1545,1538,1,
        0,0,0,1546,1549,1,0,0,0,1547,1545,1,0,0,0,1547,1548,1,0,0,0,1548,
        1554,1,0,0,0,1549,1547,1,0,0,0,1550,1552,5,135,0,0,1551,1550,1,0,
        0,0,1551,1552,1,0,0,0,1552,1553,1,0,0,0,1553,1555,3,212,106,0,1554,
        1551,1,0,0,0,1554,1555,1,0,0,0,1555,191,1,0,0,0,1556,1561,3,308,
        154,0,1557,1558,5,135,0,0,1558,1559,5,61,0,0,1559,1560,5,135,0,0,
        1560,1562,3,314,157,0,1561,1557,1,0,0,0,1561,1562,1,0,0,0,1562,193,
        1,0,0,0,1563,1564,5,71,0,0,1564,1569,3,198,99,0,1565,1567,5,135,
        0,0,1566,1565,1,0,0,0,1566,1567,1,0,0,0,1567,1568,1,0,0,0,1568,1570,
        3,212,106,0,1569,1566,1,0,0,0,1569,1570,1,0,0,0,1570,195,1,0,0,0,
        1571,1572,5,72,0,0,1572,1573,3,198,99,0,1573,197,1,0,0,0,1574,1576,
        5,135,0,0,1575,1574,1,0,0,0,1575,1576,1,0,0,0,1576,1577,1,0,0,0,
        1577,1579,5,73,0,0,1578,1575,1,0,0,0,1578,1579,1,0,0,0,1579,1580,
        1,0,0,0,1580,1581,5,135,0,0,1581,1584,3,200,100,0,1582,1583,5,135,
        0,0,1583,1585,3,204,102,0,1584,1582,1,0,0,0,1584,1585,1,0,0,0,1585,
        1588,1,0,0,0,1586,1587,5,135,0,0,1587,1589,3,206,103,0,1588,1586,
        1,0,0,0,1588,1589,1,0,0,0,1589,1592,1,0,0,0,1590,1591,5,135,0,0,
        1591,1593,3,208,104,0,1592,1590,1,0,0,0,1592,1593,1,0,0,0,1593,199,
        1,0,0,0,1594,1605,5,5,0,0,1595,1597,5,135,0,0,1596,1595,1,0,0,0,
        1596,1597,1,0,0,0,1597,1598,1,0,0,0,1598,1600,5,1,0,0,1599,1601,
        5,135,0,0,1600,1599,1,0,0,0,1600,1601,1,0,0,0,1601,1602,1,0,0,0,
        1602,1604,3,202,101,0,1603,1596,1,0,0,0,1604,1607,1,0,0,0,1605,1603,
        1,0,0,0,1605,1606,1,0,0,0,1606,1623,1,0,0,0,1607,1605,1,0,0,0,1608,
        1619,3,202,101,0,1609,1611,5,135,0,0,1610,1609,1,0,0,0,1610,1611,
        1,0,0,0,1611,1612,1,0,0,0,1612,1614,5,1,0,0,1613,1615,5,135,0,0,
        1614,1613,1,0,0,0,1614,1615,1,0,0,0,1615,1616,1,0,0,0,1616,1618,
        3,202,101,0,1617,1610,1,0,0,0,1618,1621,1,0,0,0,1619,1617,1,0,0,
        0,1619,1620,1,0,0,0,1620,1623,1,0,0,0,1621,1619,1,0,0,0,1622,1594,
        1,0,0,0,1622,1608,1,0,0,0,1623,201,1,0,0,0,1624,1625,3,242,121,0,
        1625,1626,5,135,0,0,1626,1627,5,61,0,0,1627,1628,5,135,0,0,1628,
        1629,3,314,157,0,1629,1632,1,0,0,0,1630,1632,3,242,121,0,1631,1624,
        1,0,0,0,1631,1630,1,0,0,0,1632,203,1,0,0,0,1633,1634,5,74,0,0,1634,
        1635,5,135,0,0,1635,1636,5,75,0,0,1636,1637,5,135,0,0,1637,1645,
        3,210,105,0,1638,1640,5,1,0,0,1639,1641,5,135,0,0,1640,1639,1,0,
        0,0,1640,1641,1,0,0,0,1641,1642,1,0,0,0,1642,1644,3,210,105,0,1643,
        1638,1,0,0,0,1644,1647,1,0,0,0,1645,1643,1,0,0,0,1645,1646,1,0,0,
        0,1646,205,1,0,0,0,1647,1645,1,0,0,0,1648,1649,5,76,0,0,1649,1650,
        5,135,0,0,1650,1651,3,242,121,0,1651,207,1,0,0,0,1652,1653,5,77,
        0,0,1653,1654,5,135,0,0,1654,1655,3,242,121,0,1655,209,1,0,0,0,1656,
        1661,3,242,121,0,1657,1659,5,135,0,0,1658,1657,1,0,0,0,1658,1659,
        1,0,0,0,1659,1660,1,0,0,0,1660,1662,7,6,0,0,1661,1658,1,0,0,0,1661,
        1662,1,0,0,0,1662,211,1,0,0,0,1663,1664,5,82,0,0,1664,1665,5,135,
        0,0,1665,1666,3,242,121,0,1666,213,1,0,0,0,1667,1678,3,58,29,0,1668,
        1670,5,135,0,0,1669,1668,1,0,0,0,1669,1670,1,0,0,0,1670,1671,1,0,
        0,0,1671,1673,5,1,0,0,1672,1674,5,135,0,0,1673,1672,1,0,0,0,1673,
        1674,1,0,0,0,1674,1675,1,0,0,0,1675,1677,3,58,29,0,1676,1669,1,0,
        0,0,1677,1680,1,0,0,0,1678,1676,1,0,0,0,1678,1679,1,0,0,0,1679,215,
        1,0,0,0,1680,1678,1,0,0,0,1681,1682,3,218,109,0,1682,217,1,0,0,0,
        1683,1690,3,64,32,0,1684,1686,5,135,0,0,1685,1684,1,0,0,0,1685,1686,
        1,0,0,0,1686,1687,1,0,0,0,1687,1689,3,222,111,0,1688,1685,1,0,0,
        0,1689,1692,1,0,0,0,1690,1688,1,0,0,0,1690,1691,1,0,0,0,1691,1698,
        1,0,0,0,1692,1690,1,0,0,0,1693,1694,5,8,0,0,1694,1695,3,218,109,
        0,1695,1696,5,9,0,0,1696,1698,1,0,0,0,1697,1683,1,0,0,0,1697,1693,
        1,0,0,0,1698,219,1,0,0,0,1699,1704,3,64,32,0,1700,1702,5,135,0,0,
        1701,1700,1,0,0,0,1701,1702,1,0,0,0,1702,1703,1,0,0,0,1703,1705,
        3,222,111,0,1704,1701,1,0,0,0,1705,1706,1,0,0,0,1706,1704,1,0,0,
        0,1706,1707,1,0,0,0,1707,221,1,0,0,0,1708,1710,3,224,112,0,1709,
        1711,5,135,0,0,1710,1709,1,0,0,0,1710,1711,1,0,0,0,1711,1712,1,0,
        0,0,1712,1713,3,64,32,0,1713,223,1,0,0,0,1714,1716,3,340,170,0,1715,
        1717,5,135,0,0,1716,1715,1,0,0,0,1716,1717,1,0,0,0,1717,1718,1,0,
        0,0,1718,1720,3,344,172,0,1719,1721,5,135,0,0,1720,1719,1,0,0,0,
        1720,1721,1,0,0,0,1721,1723,1,0,0,0,1722,1724,3,74,37,0,1723,1722,
        1,0,0,0,1723,1724,1,0,0,0,1724,1726,1,0,0,0,1725,1727,5,135,0,0,
        1726,1725,1,0,0,0,1726,1727,1,0,0,0,1727,1728,1,0,0,0,1728,1730,
        3,344,172,0,1729,1731,5,135,0,0,1730,1729,1,0,0,0,1730,1731,1,0,
        0,0,1731,1732,1,0,0,0,1732,1733,3,342,171,0,1733,1779,1,0,0,0,1734,
        1736,3,340,170,0,1735,1737,5,135,0,0,1736,1735,1,0,0,0,1736,1737,
        1,0,0,0,1737,1738,1,0,0,0,1738,1740,3,344,172,0,1739,1741,5,135,
        0,0,1740,1739,1,0,0,0,1740,1741,1,0,0,0,1741,1743,1,0,0,0,1742,1744,
        3,74,37,0,1743,1742,1,0,0,0,1743,1744,1,0,0,0,1744,1746,1,0,0,0,
        1745,1747,5,135,0,0,1746,1745,1,0,0,0,1746,1747,1,0,0,0,1747,1748,
        1,0,0,0,1748,1749,3,344,172,0,1749,1779,1,0,0,0,1750,1752,3,344,
        172,0,1751,1753,5,135,0,0,1752,1751,1,0,0,0,1752,1753,1,0,0,0,1753,
        1755,1,0,0,0,1754,1756,3,74,37,0,1755,1754,1,0,0,0,1755,1756,1,0,
        0,0,1756,1758,1,0,0,0,1757,1759,5,135,0,0,1758,1757,1,0,0,0,1758,
        1759,1,0,0,0,1759,1760,1,0,0,0,1760,1762,3,344,172,0,1761,1763,5,
        135,0,0,1762,1761,1,0,0,0,1762,1763,1,0,0,0,1763,1764,1,0,0,0,1764,
        1765,3,342,171,0,1765,1779,1,0,0,0,1766,1768,3,344,172,0,1767,1769,
        5,135,0,0,1768,1767,1,0,0,0,1768,1769,1,0,0,0,1769,1771,1,0,0,0,
        1770,1772,3,74,37,0,1771,1770,1,0,0,0,1771,1772,1,0,0,0,1772,1774,
        1,0,0,0,1773,1775,5,135,0,0,1774,1773,1,0,0,0,1774,1775,1,0,0,0,
        1775,1776,1,0,0,0,1776,1777,3,344,172,0,1777,1779,1,0,0,0,1778,1714,
        1,0,0,0,1778,1734,1,0,0,0,1778,1750,1,0,0,0,1778,1766,1,0,0,0,1779,
        225,1,0,0,0,1780,1783,3,330,165,0,1781,1783,3,336,168,0,1782,1780,
        1,0,0,0,1782,1781,1,0,0,0,1783,227,1,0,0,0,1784,1786,5,10,0,0,1785,
        1787,5,135,0,0,1786,1785,1,0,0,0,1786,1787,1,0,0,0,1787,1788,1,0,
        0,0,1788,1802,3,238,119,0,1789,1791,5,135,0,0,1790,1789,1,0,0,0,
        1790,1791,1,0,0,0,1791,1792,1,0,0,0,1792,1794,5,25,0,0,1793,1795,
        5,10,0,0,1794,1793,1,0,0,0,1794,1795,1,0,0,0,1795,1797,1,0,0,0,1796,
        1798,5,135,0,0,1797,1796,1,0,0,0,1797,1798,1,0,0,0,1798,1799,1,0,
        0,0,1799,1801,3,238,119,0,1800,1790,1,0,0,0,1801,1804,1,0,0,0,1802,
        1800,1,0,0,0,1802,1803,1,0,0,0,1803,229,1,0,0,0,1804,1802,1,0,0,
        0,1805,1812,3,232,116,0,1806,1808,5,135,0,0,1807,1806,1,0,0,0,1807,
        1808,1,0,0,0,1808,1809,1,0,0,0,1809,1811,3,232,116,0,1810,1807,1,
        0,0,0,1811,1814,1,0,0,0,1812,1810,1,0,0,0,1812,1813,1,0,0,0,1813,
        231,1,0,0,0,1814,1812,1,0,0,0,1815,1817,5,10,0,0,1816,1818,5,135,
        0,0,1817,1816,1,0,0,0,1817,1818,1,0,0,0,1818,1819,1,0,0,0,1819,1820,
        3,236,118,0,1820,233,1,0,0,0,1821,1823,5,5,0,0,1822,1824,5,135,0,
        0,1823,1822,1,0,0,0,1823,1824,1,0,0,0,1824,1829,1,0,0,0,1825,1827,
        3,322,161,0,1826,1828,5,135,0,0,1827,1826,1,0,0,0,1827,1828,1,0,
        0,0,1828,1830,1,0,0,0,1829,1825,1,0,0,0,1829,1830,1,0,0,0,1830,1841,
        1,0,0,0,1831,1833,5,13,0,0,1832,1834,5,135,0,0,1833,1832,1,0,0,0,
        1833,1834,1,0,0,0,1834,1839,1,0,0,0,1835,1837,3,322,161,0,1836,1838,
        5,135,0,0,1837,1836,1,0,0,0,1837,1838,1,0,0,0,1838,1840,1,0,0,0,
        1839,1835,1,0,0,0,1839,1840,1,0,0,0,1840,1842,1,0,0,0,1841,1831,
        1,0,0,0,1841,1842,1,0,0,0,1842,235,1,0,0,0,1843,1844,3,338,169,0,
        1844,237,1,0,0,0,1845,1846,3,338,169,0,1846,239,1,0,0,0,1847,1852,
        3,280,140,0,1848,1850,5,135,0,0,1849,1848,1,0,0,0,1849,1850,1,0,
        0,0,1850,1851,1,0,0,0,1851,1853,3,278,139,0,1852,1849,1,0,0,0,1853,
        1854,1,0,0,0,1854,1852,1,0,0,0,1854,1855,1,0,0,0,1855,241,1,0,0,
        0,1856,1857,3,244,122,0,1857,243,1,0,0,0,1858,1865,3,246,123,0,1859,
        1860,5,135,0,0,1860,1861,5,83,0,0,1861,1862,5,135,0,0,1862,1864,
        3,246,123,0,1863,1859,1,0,0,0,1864,1867,1,0,0,0,1865,1863,1,0,0,
        0,1865,1866,1,0,0,0,1866,245,1,0,0,0,1867,1865,1,0,0,0,1868,1875,
        3,248,124,0,1869,1870,5,135,0,0,1870,1871,5,84,0,0,1871,1872,5,135,
        0,0,1872,1874,3,248,124,0,1873,1869,1,0,0,0,1874,1877,1,0,0,0,1875,
        1873,1,0,0,0,1875,1876,1,0,0,0,1876,247,1,0,0,0,1877,1875,1,0,0,
        0,1878,1885,3,250,125,0,1879,1880,5,135,0,0,1880,1881,5,85,0,0,1881,
        1882,5,135,0,0,1882,1884,3,250,125,0,1883,1879,1,0,0,0,1884,1887,
        1,0,0,0,1885,1883,1,0,0,0,1885,1886,1,0,0,0,1886,249,1,0,0,0,1887,
        1885,1,0,0,0,1888,1890,5,86,0,0,1889,1891,5,135,0,0,1890,1889,1,
        0,0,0,1890,1891,1,0,0,0,1891,1893,1,0,0,0,1892,1888,1,0,0,0,1893,
        1896,1,0,0,0,1894,1892,1,0,0,0,1894,1895,1,0,0,0,1895,1897,1,0,0,
        0,1896,1894,1,0,0,0,1897,1898,3,252,126,0,1898,251,1,0,0,0,1899,
        1911,3,76,38,0,1900,1902,5,135,0,0,1901,1900,1,0,0,0,1901,1902,1,
        0,0,0,1902,1903,1,0,0,0,1903,1905,3,268,134,0,1904,1906,5,135,0,
        0,1905,1904,1,0,0,0,1905,1906,1,0,0,0,1906,1907,1,0,0,0,1907,1908,
        3,76,38,0,1908,1910,1,0,0,0,1909,1901,1,0,0,0,1910,1913,1,0,0,0,
        1911,1909,1,0,0,0,1911,1912,1,0,0,0,1912,253,1,0,0,0,1913,1911,1,
        0,0,0,1914,1915,5,135,0,0,1915,1916,5,87,0,0,1916,1917,5,135,0,0,
        1917,1925,5,71,0,0,1918,1919,5,135,0,0,1919,1920,5,88,0,0,1920,1921,
        5,135,0,0,1921,1925,5,71,0,0,1922,1923,5,135,0,0,1923,1925,5,89,
        0,0,1924,1914,1,0,0,0,1924,1918,1,0,0,0,1924,1922,1,0,0,0,1925,1927,
        1,0,0,0,1926,1928,5,135,0,0,1927,1926,1,0,0,0,1927,1928,1,0,0,0,
        1928,1929,1,0,0,0,1929,1930,3,260,130,0,1930,255,1,0,0,0,1931,1932,
        5,135,0,0,1932,1934,5,90,0,0,1933,1935,5,135,0,0,1934,1933,1,0,0,
        0,1934,1935,1,0,0,0,1935,1936,1,0,0,0,1936,1937,3,260,130,0,1937,
        257,1,0,0,0,1938,1939,5,135,0,0,1939,1940,5,91,0,0,1940,1941,5,135,
        0,0,1941,1949,5,92,0,0,1942,1943,5,135,0,0,1943,1944,5,91,0,0,1944,
        1945,5,135,0,0,1945,1946,5,86,0,0,1946,1947,5,135,0,0,1947,1949,
        5,92,0,0,1948,1938,1,0,0,0,1948,1942,1,0,0,0,1949,259,1,0,0,0,1950,
        1971,3,270,135,0,1951,1953,5,135,0,0,1952,1951,1,0,0,0,1952,1953,
        1,0,0,0,1953,1954,1,0,0,0,1954,1956,3,266,133,0,1955,1957,5,135,
        0,0,1956,1955,1,0,0,0,1956,1957,1,0,0,0,1957,1958,1,0,0,0,1958,1959,
        3,270,135,0,1959,1970,1,0,0,0,1960,1962,5,135,0,0,1961,1960,1,0,
        0,0,1961,1962,1,0,0,0,1962,1963,1,0,0,0,1963,1965,3,266,133,0,1964,
        1966,5,135,0,0,1965,1964,1,0,0,0,1965,1966,1,0,0,0,1966,1967,1,0,
        0,0,1967,1968,3,270,135,0,1968,1970,1,0,0,0,1969,1952,1,0,0,0,1969,
        1961,1,0,0,0,1970,1973,1,0,0,0,1971,1969,1,0,0,0,1971,1972,1,0,0,
        0,1972,261,1,0,0,0,1973,1971,1,0,0,0,1974,1975,7,1,0,0,1975,263,
        1,0,0,0,1976,1977,5,16,0,0,1977,265,1,0,0,0,1978,1979,7,2,0,0,1979,
        267,1,0,0,0,1980,1981,7,3,0,0,1981,269,1,0,0,0,1982,2012,3,272,136,
        0,1983,1985,5,135,0,0,1984,1983,1,0,0,0,1984,1985,1,0,0,0,1985,1986,
        1,0,0,0,1986,1988,3,262,131,0,1987,1989,5,135,0,0,1988,1987,1,0,
        0,0,1988,1989,1,0,0,0,1989,1990,1,0,0,0,1990,1991,3,272,136,0,1991,
        2011,1,0,0,0,1992,1994,5,135,0,0,1993,1992,1,0,0,0,1993,1994,1,0,
        0,0,1994,1995,1,0,0,0,1995,1997,3,262,131,0,1996,1998,5,135,0,0,
        1997,1996,1,0,0,0,1997,1998,1,0,0,0,1998,1999,1,0,0,0,1999,2000,
        3,272,136,0,2000,2011,1,0,0,0,2001,2003,5,135,0,0,2002,2001,1,0,
        0,0,2002,2003,1,0,0,0,2003,2004,1,0,0,0,2004,2006,3,262,131,0,2005,
        2007,5,135,0,0,2006,2005,1,0,0,0,2006,2007,1,0,0,0,2007,2008,1,0,
        0,0,2008,2009,3,272,136,0,2009,2011,1,0,0,0,2010,1984,1,0,0,0,2010,
        1993,1,0,0,0,2010,2002,1,0,0,0,2011,2014,1,0,0,0,2012,2010,1,0,0,
        0,2012,2013,1,0,0,0,2013,271,1,0,0,0,2014,2012,1,0,0,0,2015,2027,
        3,274,137,0,2016,2018,5,135,0,0,2017,2016,1,0,0,0,2017,2018,1,0,
        0,0,2018,2019,1,0,0,0,2019,2021,3,264,132,0,2020,2022,5,135,0,0,
        2021,2020,1,0,0,0,2021,2022,1,0,0,0,2022,2023,1,0,0,0,2023,2024,
        3,274,137,0,2024,2026,1,0,0,0,2025,2017,1,0,0,0,2026,2029,1,0,0,
        0,2027,2025,1,0,0,0,2027,2028,1,0,0,0,2028,273,1,0,0,0,2029,2027,
        1,0,0,0,2030,2037,3,78,39,0,2031,2033,7,2,0,0,2032,2034,5,135,0,
        0,2033,2032,1,0,0,0,2033,2034,1,0,0,0,2034,2035,1,0,0,0,2035,2037,
        3,78,39,0,2036,2030,1,0,0,0,2036,2031,1,0,0,0,2037,275,1,0,0,0,2038,
        2045,3,280,140,0,2039,2041,5,135,0,0,2040,2039,1,0,0,0,2040,2041,
        1,0,0,0,2041,2042,1,0,0,0,2042,2044,3,278,139,0,2043,2040,1,0,0,
        0,2044,2047,1,0,0,0,2045,2043,1,0,0,0,2045,2046,1,0,0,0,2046,2052,
        1,0,0,0,2047,2045,1,0,0,0,2048,2050,5,135,0,0,2049,2048,1,0,0,0,
        2049,2050,1,0,0,0,2050,2051,1,0,0,0,2051,2053,3,230,115,0,2052,2049,
        1,0,0,0,2052,2053,1,0,0,0,2053,277,1,0,0,0,2054,2056,5,2,0,0,2055,
        2057,5,135,0,0,2056,2055,1,0,0,0,2056,2057,1,0,0,0,2057,2058,1,0,
        0,0,2058,2059,3,334,167,0,2059,279,1,0,0,0,2060,2085,3,316,158,0,
        2061,2085,3,336,168,0,2062,2085,3,282,141,0,2063,2065,5,93,0,0,2064,
        2066,5,135,0,0,2065,2064,1,0,0,0,2065,2066,1,0,0,0,2066,2067,1,0,
        0,0,2067,2069,5,8,0,0,2068,2070,5,135,0,0,2069,2068,1,0,0,0,2069,
        2070,1,0,0,0,2070,2071,1,0,0,0,2071,2073,5,5,0,0,2072,2074,5,135,
        0,0,2073,2072,1,0,0,0,2073,2074,1,0,0,0,2074,2075,1,0,0,0,2075,2085,
        5,9,0,0,2076,2085,3,286,143,0,2077,2085,3,288,144,0,2078,2085,3,
        290,145,0,2079,2085,3,292,146,0,2080,2085,3,294,147,0,2081,2085,
        3,298,149,0,2082,2085,3,50,25,0,2083,2085,3,314,157,0,2084,2060,
        1,0,0,0,2084,2061,1,0,0,0,2084,2062,1,0,0,0,2084,2063,1,0,0,0,2084,
        2076,1,0,0,0,2084,2077,1,0,0,0,2084,2078,1,0,0,0,2084,2079,1,0,0,
        0,2084,2080,1,0,0,0,2084,2081,1,0,0,0,2084,2082,1,0,0,0,2084,2083,
        1,0,0,0,2085,281,1,0,0,0,2086,2091,5,94,0,0,2087,2089,5,135,0,0,
        2088,2087,1,0,0,0,2088,2089,1,0,0,0,2089,2090,1,0,0,0,2090,2092,
        3,284,142,0,2091,2088,1,0,0,0,2092,2093,1,0,0,0,2093,2091,1,0,0,
        0,2093,2094,1,0,0,0,2094,2109,1,0,0,0,2095,2097,5,94,0,0,2096,2098,
        5,135,0,0,2097,2096,1,0,0,0,2097,2098,1,0,0,0,2098,2099,1,0,0,0,
        2099,2104,3,242,121,0,2100,2102,5,135,0,0,2101,2100,1,0,0,0,2101,
        2102,1,0,0,0,2102,2103,1,0,0,0,2103,2105,3,284,142,0,2104,2101,1,
        0,0,0,2105,2106,1,0,0,0,2106,2104,1,0,0,0,2106,2107,1,0,0,0,2107,
        2109,1,0,0,0,2108,2086,1,0,0,0,2108,2095,1,0,0,0,2109,2118,1,0,0,
        0,2110,2112,5,135,0,0,2111,2110,1,0,0,0,2111,2112,1,0,0,0,2112,2113,
        1,0,0,0,2113,2115,5,95,0,0,2114,2116,5,135,0,0,2115,2114,1,0,0,0,
        2115,2116,1,0,0,0,2116,2117,1,0,0,0,2117,2119,3,242,121,0,2118,2111,
        1,0,0,0,2118,2119,1,0,0,0,2119,2121,1,0,0,0,2120,2122,5,135,0,0,
        2121,2120,1,0,0,0,2121,2122,1,0,0,0,2122,2123,1,0,0,0,2123,2124,
        5,96,0,0,2124,283,1,0,0,0,2125,2127,5,97,0,0,2126,2128,5,135,0,0,
        2127,2126,1,0,0,0,2127,2128,1,0,0,0,2128,2129,1,0,0,0,2129,2131,
        3,242,121,0,2130,2132,5,135,0,0,2131,2130,1,0,0,0,2131,2132,1,0,
        0,0,2132,2133,1,0,0,0,2133,2135,5,98,0,0,2134,2136,5,135,0,0,2135,
        2134,1,0,0,0,2135,2136,1,0,0,0,2136,2137,1,0,0,0,2137,2138,3,242,
        121,0,2138,285,1,0,0,0,2139,2141,5,11,0,0,2140,2142,5,135,0,0,2141,
        2140,1,0,0,0,2141,2142,1,0,0,0,2142,2143,1,0,0,0,2143,2152,3,52,
        26,0,2144,2146,5,135,0,0,2145,2144,1,0,0,0,2145,2146,1,0,0,0,2146,
        2147,1,0,0,0,2147,2149,5,25,0,0,2148,2150,5,135,0,0,2149,2148,1,
        0,0,0,2149,2150,1,0,0,0,2150,2151,1,0,0,0,2151,2153,3,242,121,0,
        2152,2145,1,0,0,0,2152,2153,1,0,0,0,2153,2155,1,0,0,0,2154,2156,
        5,135,0,0,2155,2154,1,0,0,0,2155,2156,1,0,0,0,2156,2157,1,0,0,0,
        2157,2158,5,12,0,0,2158,287,1,0,0,0,2159,2161,5,11,0,0,2160,2162,
        5,135,0,0,2161,2160,1,0,0,0,2161,2162,1,0,0,0,2162,2171,1,0,0,0,
        2163,2165,3,314,157,0,2164,2166,5,135,0,0,2165,2164,1,0,0,0,2165,
        2166,1,0,0,0,2166,2167,1,0,0,0,2167,2169,5,3,0,0,2168,2170,5,135,
        0,0,2169,2168,1,0,0,0,2169,2170,1,0,0,0,2170,2172,1,0,0,0,2171,2163,
        1,0,0,0,2171,2172,1,0,0,0,2172,2173,1,0,0,0,2173,2175,3,220,110,
        0,2174,2176,5,135,0,0,2175,2174,1,0,0,0,2175,2176,1,0,0,0,2176,2181,
        1,0,0,0,2177,2179,3,212,106,0,2178,2180,5,135,0,0,2179,2178,1,0,
        0,0,2179,2180,1,0,0,0,2180,2182,1,0,0,0,2181,2177,1,0,0,0,2181,2182,
        1,0,0,0,2182,2183,1,0,0,0,2183,2185,5,25,0,0,2184,2186,5,135,0,0,
        2185,2184,1,0,0,0,2185,2186,1,0,0,0,2186,2187,1,0,0,0,2187,2189,
        3,242,121,0,2188,2190,5,135,0,0,2189,2188,1,0,0,0,2189,2190,1,0,
        0,0,2190,2191,1,0,0,0,2191,2192,5,12,0,0,2192,289,1,0,0,0,2193,2195,
        5,57,0,0,2194,2196,5,135,0,0,2195,2194,1,0,0,0,2195,2196,1,0,0,0,
        2196,2197,1,0,0,0,2197,2199,5,8,0,0,2198,2200,5,135,0,0,2199,2198,
        1,0,0,0,2199,2200,1,0,0,0,2200,2201,1,0,0,0,2201,2203,3,52,26,0,
        2202,2204,5,135,0,0,2203,2202,1,0,0,0,2203,2204,1,0,0,0,2204,2205,
        1,0,0,0,2205,2206,5,9,0,0,2206,2250,1,0,0,0,2207,2209,5,99,0,0,2208,
        2210,5,135,0,0,2209,2208,1,0,0,0,2209,2210,1,0,0,0,2210,2211,1,0,
        0,0,2211,2213,5,8,0,0,2212,2214,5,135,0,0,2213,2212,1,0,0,0,2213,
        2214,1,0,0,0,2214,2215,1,0,0,0,2215,2217,3,52,26,0,2216,2218,5,135,
        0,0,2217,2216,1,0,0,0,2217,2218,1,0,0,0,2218,2219,1,0,0,0,2219,2220,
        5,9,0,0,2220,2250,1,0,0,0,2221,2223,5,100,0,0,2222,2224,5,135,0,
        0,2223,2222,1,0,0,0,2223,2224,1,0,0,0,2224,2225,1,0,0,0,2225,2227,
        5,8,0,0,2226,2228,5,135,0,0,2227,2226,1,0,0,0,2227,2228,1,0,0,0,
        2228,2229,1,0,0,0,2229,2231,3,52,26,0,2230,2232,5,135,0,0,2231,2230,
        1,0,0,0,2231,2232,1,0,0,0,2232,2233,1,0,0,0,2233,2234,5,9,0,0,2234,
        2250,1,0,0,0,2235,2237,5,101,0,0,2236,2238,5,135,0,0,2237,2236,1,
        0,0,0,2237,2238,1,0,0,0,2238,2239,1,0,0,0,2239,2241,5,8,0,0,2240,
        2242,5,135,0,0,2241,2240,1,0,0,0,2241,2242,1,0,0,0,2242,2243,1,0,
        0,0,2243,2245,3,52,26,0,2244,2246,5,135,0,0,2245,2244,1,0,0,0,2245,
        2246,1,0,0,0,2246,2247,1,0,0,0,2247,2248,5,9,0,0,2248,2250,1,0,0,
        0,2249,2193,1,0,0,0,2249,2207,1,0,0,0,2249,2221,1,0,0,0,2249,2235,
        1,0,0,0,2250,291,1,0,0,0,2251,2252,3,220,110,0,2252,293,1,0,0,0,
        2253,2255,5,8,0,0,2254,2256,5,135,0,0,2255,2254,1,0,0,0,2255,2256,
        1,0,0,0,2256,2257,1,0,0,0,2257,2259,3,242,121,0,2258,2260,5,135,
        0,0,2259,2258,1,0,0,0,2259,2260,1,0,0,0,2260,2261,1,0,0,0,2261,2262,
        5,9,0,0,2262,295,1,0,0,0,2263,2264,3,314,157,0,2264,2265,5,135,0,
        0,2265,2266,5,90,0,0,2266,2267,5,135,0,0,2267,2268,3,242,121,0,2268,
        297,1,0,0,0,2269,2271,3,302,151,0,2270,2272,5,135,0,0,2271,2270,
        1,0,0,0,2271,2272,1,0,0,0,2272,2273,1,0,0,0,2273,2275,5,8,0,0,2274,
        2276,5,135,0,0,2275,2274,1,0,0,0,2275,2276,1,0,0,0,2276,2281,1,0,
        0,0,2277,2279,5,73,0,0,2278,2280,5,135,0,0,2279,2278,1,0,0,0,2279,
        2280,1,0,0,0,2280,2282,1,0,0,0,2281,2277,1,0,0,0,2281,2282,1,0,0,
        0,2282,2300,1,0,0,0,2283,2285,3,300,150,0,2284,2286,5,135,0,0,2285,
        2284,1,0,0,0,2285,2286,1,0,0,0,2286,2297,1,0,0,0,2287,2289,5,1,0,
        0,2288,2290,5,135,0,0,2289,2288,1,0,0,0,2289,2290,1,0,0,0,2290,2291,
        1,0,0,0,2291,2293,3,300,150,0,2292,2294,5,135,0,0,2293,2292,1,0,
        0,0,2293,2294,1,0,0,0,2294,2296,1,0,0,0,2295,2287,1,0,0,0,2296,2299,
        1,0,0,0,2297,2295,1,0,0,0,2297,2298,1,0,0,0,2298,2301,1,0,0,0,2299,
        2297,1,0,0,0,2300,2283,1,0,0,0,2300,2301,1,0,0,0,2301,2302,1,0,0,
        0,2302,2303,5,9,0,0,2303,299,1,0,0,0,2304,2305,3,242,121,0,2305,
        301,1,0,0,0,2306,2307,3,312,156,0,2307,2308,3,154,77,0,2308,303,
        1,0,0,0,2309,2311,3,310,155,0,2310,2312,5,135,0,0,2311,2310,1,0,
        0,0,2311,2312,1,0,0,0,2312,2313,1,0,0,0,2313,2315,5,8,0,0,2314,2316,
        5,135,0,0,2315,2314,1,0,0,0,2315,2316,1,0,0,0,2316,2334,1,0,0,0,
        2317,2319,3,242,121,0,2318,2320,5,135,0,0,2319,2318,1,0,0,0,2319,
        2320,1,0,0,0,2320,2331,1,0,0,0,2321,2323,5,1,0,0,2322,2324,5,135,
        0,0,2323,2322,1,0,0,0,2323,2324,1,0,0,0,2324,2325,1,0,0,0,2325,2327,
        3,242,121,0,2326,2328,5,135,0,0,2327,2326,1,0,0,0,2327,2328,1,0,
        0,0,2328,2330,1,0,0,0,2329,2321,1,0,0,0,2330,2333,1,0,0,0,2331,2329,
        1,0,0,0,2331,2332,1,0,0,0,2332,2335,1,0,0,0,2333,2331,1,0,0,0,2334,
        2317,1,0,0,0,2334,2335,1,0,0,0,2335,2336,1,0,0,0,2336,2337,5,9,0,
        0,2337,305,1,0,0,0,2338,2339,3,310,155,0,2339,307,1,0,0,0,2340,2341,
        3,154,77,0,2341,309,1,0,0,0,2342,2343,3,312,156,0,2343,2344,3,154,
        77,0,2344,311,1,0,0,0,2345,2346,3,154,77,0,2346,2347,5,2,0,0,2347,
        2349,1,0,0,0,2348,2345,1,0,0,0,2349,2352,1,0,0,0,2350,2348,1,0,0,
        0,2350,2351,1,0,0,0,2351,313,1,0,0,0,2352,2350,1,0,0,0,2353,2354,
        3,154,77,0,2354,315,1,0,0,0,2355,2362,3,318,159,0,2356,2362,5,92,
        0,0,2357,2362,3,320,160,0,2358,2362,5,117,0,0,2359,2362,3,326,163,
        0,2360,2362,3,330,165,0,2361,2355,1,0,0,0,2361,2356,1,0,0,0,2361,
        2357,1,0,0,0,2361,2358,1,0,0,0,2361,2359,1,0,0,0,2361,2360,1,0,0,
        0,2362,317,1,0,0,0,2363,2364,7,7,0,0,2364,319,1,0,0,0,2365,2368,
        3,324,162,0,2366,2368,3,322,161,0,2367,2365,1,0,0,0,2367,2366,1,
        0,0,0,2368,321,1,0,0,0,2369,2370,7,8,0,0,2370,323,1,0,0,0,2371,2372,
        7,9,0,0,2372,325,1,0,0,0,2373,2375,5,11,0,0,2374,2376,5,135,0,0,
        2375,2374,1,0,0,0,2375,2376,1,0,0,0,2376,2394,1,0,0,0,2377,2379,
        3,328,164,0,2378,2380,5,135,0,0,2379,2378,1,0,0,0,2379,2380,1,0,
        0,0,2380,2391,1,0,0,0,2381,2383,5,1,0,0,2382,2384,5,135,0,0,2383,
        2382,1,0,0,0,2383,2384,1,0,0,0,2384,2385,1,0,0,0,2385,2387,3,328,
        164,0,2386,2388,5,135,0,0,2387,2386,1,0,0,0,2387,2388,1,0,0,0,2388,
        2390,1,0,0,0,2389,2381,1,0,0,0,2390,2393,1,0,0,0,2391,2389,1,0,0,
        0,2391,2392,1,0,0,0,2392,2395,1,0,0,0,2393,2391,1,0,0,0,2394,2377,
        1,0,0,0,2394,2395,1,0,0,0,2395,2396,1,0,0,0,2396,2397,5,12,0,0,2397,
        327,1,0,0,0,2398,2399,3,242,121,0,2399,329,1,0,0,0,2400,2402,5,6,
        0,0,2401,2403,5,135,0,0,2402,2401,1,0,0,0,2402,2403,1,0,0,0,2403,
        2415,1,0,0,0,2404,2412,3,332,166,0,2405,2407,5,1,0,0,2406,2408,5,
        135,0,0,2407,2406,1,0,0,0,2407,2408,1,0,0,0,2408,2409,1,0,0,0,2409,
        2411,3,332,166,0,2410,2405,1,0,0,0,2411,2414,1,0,0,0,2412,2410,1,
        0,0,0,2412,2413,1,0,0,0,2413,2416,1,0,0,0,2414,2412,1,0,0,0,2415,
        2404,1,0,0,0,2415,2416,1,0,0,0,2416,2417,1,0,0,0,2417,2418,5,7,0,
        0,2418,331,1,0,0,0,2419,2421,3,334,167,0,2420,2422,5,135,0,0,2421,
        2420,1,0,0,0,2421,2422,1,0,0,0,2422,2423,1,0,0,0,2423,2425,5,10,
        0,0,2424,2426,5,135,0,0,2425,2424,1,0,0,0,2425,2426,1,0,0,0,2426,
        2427,1,0,0,0,2427,2429,3,242,121,0,2428,2430,5,135,0,0,2429,2428,
        1,0,0,0,2429,2430,1,0,0,0,2430,333,1,0,0,0,2431,2432,3,338,169,0,
        2432,335,1,0,0,0,2433,2436,5,26,0,0,2434,2437,3,154,77,0,2435,2437,
        5,106,0,0,2436,2434,1,0,0,0,2436,2435,1,0,0,0,2437,337,1,0,0,0,2438,
        2441,3,154,77,0,2439,2441,3,156,78,0,2440,2438,1,0,0,0,2440,2439,
        1,0,0,0,2441,339,1,0,0,0,2442,2443,7,10,0,0,2443,341,1,0,0,0,2444,
        2445,7,11,0,0,2445,343,1,0,0,0,2446,2447,7,12,0,0,2447,345,1,0,0,
        0,439,349,353,357,361,365,367,370,373,381,385,389,392,396,403,407,
        410,414,418,422,427,431,434,440,444,449,453,456,460,464,468,473,
        477,480,484,490,493,500,503,508,514,517,522,526,532,536,542,546,
        552,556,562,566,570,576,579,583,589,592,598,603,607,611,615,619,
        624,628,632,634,640,645,649,655,661,667,672,678,681,687,689,693,
        697,702,706,709,716,720,724,729,733,738,743,746,750,754,759,762,
        764,767,773,776,780,786,792,796,802,806,811,815,819,823,829,833,
        839,843,845,849,851,855,857,861,863,869,873,880,888,891,897,901,
        903,906,910,914,916,920,924,926,930,932,935,939,941,945,947,956,
        960,964,966,970,977,981,985,995,1000,1003,1006,1008,1011,1017,1022,
        1027,1038,1042,1046,1050,1054,1057,1074,1084,1094,1099,1103,1110,
        1114,1120,1136,1140,1144,1149,1153,1157,1159,1177,1180,1187,1201,
        1205,1209,1214,1218,1223,1227,1231,1233,1238,1242,1248,1254,1257,
        1261,1265,1267,1272,1277,1281,1284,1288,1293,1296,1299,1301,1304,
        1309,1316,1320,1324,1334,1341,1345,1348,1351,1359,1364,1371,1376,
        1379,1383,1387,1391,1397,1401,1406,1411,1415,1418,1420,1425,1432,
        1436,1446,1453,1466,1470,1476,1480,1484,1489,1494,1498,1502,1506,
        1511,1518,1522,1527,1534,1538,1542,1547,1551,1554,1561,1566,1569,
        1575,1578,1584,1588,1592,1596,1600,1605,1610,1614,1619,1622,1631,
        1640,1645,1658,1661,1669,1673,1678,1685,1690,1697,1701,1706,1710,
        1716,1720,1723,1726,1730,1736,1740,1743,1746,1752,1755,1758,1762,
        1768,1771,1774,1778,1782,1786,1790,1794,1797,1802,1807,1812,1817,
        1823,1827,1829,1833,1837,1839,1841,1849,1854,1865,1875,1885,1890,
        1894,1901,1905,1911,1924,1927,1934,1948,1952,1956,1961,1965,1969,
        1971,1984,1988,1993,1997,2002,2006,2010,2012,2017,2021,2027,2033,
        2036,2040,2045,2049,2052,2056,2065,2069,2073,2084,2088,2093,2097,
        2101,2106,2108,2111,2115,2118,2121,2127,2131,2135,2141,2145,2149,
        2152,2155,2161,2165,2169,2171,2175,2179,2181,2185,2189,2195,2199,
        2203,2209,2213,2217,2223,2227,2231,2237,2241,2245,2249,2255,2259,
        2271,2275,2279,2281,2285,2289,2293,2297,2300,2311,2315,2319,2323,
        2327,2331,2334,2350,2361,2367,2375,2379,2383,2387,2391,2394,2402,
        2407,2412,2415,2421,2425,2429,2436,2440
    ]

class s_cypherParser ( Parser ):

    grammarFileName = "s_cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "','", "'.'", "'='", "'+='", "'*'", "'{'", 
                     "'}'", "'('", "')'", "':'", "'['", "']'", "'..'", "'/'", 
                     "'%'", "'^'", "'+'", "'-'", "'<>'", "'<'", "'<='", 
                     "'>'", "'>='", "';'", "'|'", "'$'", "'\\u27E8'", "'\\u3008'", 
                     "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
                     "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", 
                     "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", 
                     "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
                     "'\\uFF0D'", "<INVALID>", "<INVALID>", "'NOW'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "AtT", "PoundValue", "NOW", 
                      "AT_TIME", "SNAPSHOT", "BETWEEN", "SCOPE", "STALE", 
                      "DURING", "OVERLAPS", "UNION", "ALL", "OPTIONAL", 
                      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", 
                      "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", 
                      "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", 
                      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
                      "WHERE", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", 
                      "CONTAINS", "IN", "IS", "NULL", "COUNT", "CASE", "ELSE", 
                      "END", "WHEN", "THEN", "ANY", "NONE", "SINGLE", "EXISTS", 
                      "TRUE", "FALSE", "HexInteger", "DecimalInteger", "OctalInteger", 
                      "HexLetter", "HexDigit", "Digit", "NonZeroDigit", 
                      "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", 
                      "RegularDecimalReal", "StringLiteral", "EscapedChar", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Query = 0
    RULE_oC_Match = 1
    RULE_oC_UpdatingClause = 2
    RULE_s_Create = 3
    RULE_s_Merge = 4
    RULE_s_Set = 5
    RULE_s_Remove = 6
    RULE_s_Stale = 7
    RULE_oC_SetItem = 8
    RULE_s_SetPropertyItemOne = 9
    RULE_s_SetPropertyItemTwo = 10
    RULE_s_SetValueItem = 11
    RULE_s_SetValueItemExpression = 12
    RULE_s_StaleItem = 13
    RULE_s_Delete = 14
    RULE_s_DeleteItem = 15
    RULE_s_AtTime = 16
    RULE_s_Between = 17
    RULE_s_TimeWindowLimit = 18
    RULE_oC_InQueryCall = 19
    RULE_oC_StandaloneCall = 20
    RULE_s_YieldItems = 21
    RULE_s_YieldItem = 22
    RULE_s_WithPartQuery = 23
    RULE_s_With = 24
    RULE_oC_ExistentialSubquery = 25
    RULE_oC_FilterExpression = 26
    RULE_s_Snapshot = 27
    RULE_s_Scope = 28
    RULE_oC_PatternPart = 29
    RULE_s_PathFunctionPattern = 30
    RULE_s_SinglePathPattern = 31
    RULE_oC_NodePattern = 32
    RULE_s_Properties = 33
    RULE_s_PropertiesPattern = 34
    RULE_s_PropertyNode = 35
    RULE_s_ValueNode = 36
    RULE_oC_RelationshipDetail = 37
    RULE_oC_StringListNullPredicateExpression = 38
    RULE_oC_ListOperatorExpression = 39
    RULE_s_SingleIndexExpression = 40
    RULE_s_DoubleIndexExpression = 41
    RULE_s_LeftExpression = 42
    RULE_s_RightExpression = 43
    RULE_s_AtTExpression = 44
    RULE_s_PropertyLookupTime = 45
    RULE_s_PropertyLookup = 46
    RULE_s_TimePredicateExpression = 47
    RULE_s_AtTElement = 48
    RULE_s_Where = 49
    RULE_s_WhereExpression = 50
    RULE_s_OrWhereExpression = 51
    RULE_s_XorWhereExpression = 52
    RULE_s_AndWhereExpression = 53
    RULE_s_NotWhereExpression = 54
    RULE_s_ComparisonWhereExpression = 55
    RULE_s_MultiplyDivideModuloWhereOperator = 56
    RULE_s_PowerOfWhereOperator = 57
    RULE_s_AddOrSubtractWhereOperator = 58
    RULE_s_ComparisonWhereOperator = 59
    RULE_s_StringListNullPredicateWhereExpression = 60
    RULE_s_AddOrSubtractWhereExpression = 61
    RULE_s_TimePredicateWhereExpression = 62
    RULE_s_StringPredicateWhereExpression = 63
    RULE_s_ListPredicateWhereExpression = 64
    RULE_s_NullPredicateWhereExpression = 65
    RULE_s_MultiplyDivideModuloWhereExpression = 66
    RULE_s_PowerOfWhereExpression = 67
    RULE_s_UnaryAddOrSubtractWhereExpression = 68
    RULE_s_ListOperatorWhereExpression = 69
    RULE_s_PropertyOrLabelsWhereExpression = 70
    RULE_s_AtTWhereExpression = 71
    RULE_s_SingleIndexWhereExpression = 72
    RULE_s_DoubleIndexWhereExpression = 73
    RULE_s_LeftWhereExpression = 74
    RULE_s_RightWhereExpression = 75
    RULE_s_TimePointLiteral = 76
    RULE_oC_SymbolicName = 77
    RULE_oC_ReservedWord = 78
    RULE_oC_Cypher = 79
    RULE_oC_Statement = 80
    RULE_oC_RegularQuery = 81
    RULE_oC_Union = 82
    RULE_oC_SingleQuery = 83
    RULE_oC_SinglePartQuery = 84
    RULE_oC_MultiPartQuery = 85
    RULE_oC_ReadingClause = 86
    RULE_oC_Unwind = 87
    RULE_oC_Merge = 88
    RULE_oC_MergeAction = 89
    RULE_oC_Create = 90
    RULE_oC_Set = 91
    RULE_oC_Delete = 92
    RULE_oC_Remove = 93
    RULE_oC_RemoveItem = 94
    RULE_oC_YieldItems = 95
    RULE_oC_YieldItem = 96
    RULE_oC_With = 97
    RULE_oC_Return = 98
    RULE_oC_ProjectionBody = 99
    RULE_oC_ProjectionItems = 100
    RULE_oC_ProjectionItem = 101
    RULE_oC_Order = 102
    RULE_oC_Skip = 103
    RULE_oC_Limit = 104
    RULE_oC_SortItem = 105
    RULE_oC_Where = 106
    RULE_oC_Pattern = 107
    RULE_oC_AnonymousPatternPart = 108
    RULE_oC_PatternElement = 109
    RULE_oC_RelationshipsPattern = 110
    RULE_oC_PatternElementChain = 111
    RULE_oC_RelationshipPattern = 112
    RULE_oC_Properties = 113
    RULE_oC_RelationshipTypes = 114
    RULE_oC_NodeLabels = 115
    RULE_oC_NodeLabel = 116
    RULE_oC_RangeLiteral = 117
    RULE_oC_LabelName = 118
    RULE_oC_RelTypeName = 119
    RULE_oC_PropertyExpression = 120
    RULE_oC_Expression = 121
    RULE_oC_OrExpression = 122
    RULE_oC_XorExpression = 123
    RULE_oC_AndExpression = 124
    RULE_oC_NotExpression = 125
    RULE_oC_ComparisonExpression = 126
    RULE_oC_StringPredicateExpression = 127
    RULE_oC_ListPredicateExpression = 128
    RULE_oC_NullPredicateExpression = 129
    RULE_oC_AddOrSubtractExpression = 130
    RULE_s_MultiplyDivideModuloOperator = 131
    RULE_s_PowerOfOperator = 132
    RULE_s_AddOrSubtractOperator = 133
    RULE_s_ComparisonOperator = 134
    RULE_oC_MultiplyDivideModuloExpression = 135
    RULE_oC_PowerOfExpression = 136
    RULE_oC_UnaryAddOrSubtractExpression = 137
    RULE_oC_PropertyOrLabelsExpression = 138
    RULE_oC_PropertyLookup = 139
    RULE_oC_Atom = 140
    RULE_oC_CaseExpression = 141
    RULE_oC_CaseAlternative = 142
    RULE_oC_ListComprehension = 143
    RULE_oC_PatternComprehension = 144
    RULE_oC_Quantifier = 145
    RULE_oC_PatternPredicate = 146
    RULE_oC_ParenthesizedExpression = 147
    RULE_oC_IdInColl = 148
    RULE_oC_FunctionInvocation = 149
    RULE_s_FunctionInvocationExpression = 150
    RULE_oC_FunctionName = 151
    RULE_oC_ExplicitProcedureInvocation = 152
    RULE_oC_ImplicitProcedureInvocation = 153
    RULE_oC_ProcedureResultField = 154
    RULE_oC_ProcedureName = 155
    RULE_oC_Namespace = 156
    RULE_oC_Variable = 157
    RULE_oC_Literal = 158
    RULE_oC_BooleanLiteral = 159
    RULE_oC_NumberLiteral = 160
    RULE_oC_IntegerLiteral = 161
    RULE_oC_DoubleLiteral = 162
    RULE_oC_ListLiteral = 163
    RULE_s_ListLiteralExpression = 164
    RULE_oC_MapLiteral = 165
    RULE_s_MapKeyValue = 166
    RULE_oC_PropertyKeyName = 167
    RULE_oC_Parameter = 168
    RULE_oC_SchemaName = 169
    RULE_oC_LeftArrowHead = 170
    RULE_oC_RightArrowHead = 171
    RULE_oC_Dash = 172

    ruleNames =  [ "oC_Query", "oC_Match", "oC_UpdatingClause", "s_Create", 
                   "s_Merge", "s_Set", "s_Remove", "s_Stale", "oC_SetItem", 
                   "s_SetPropertyItemOne", "s_SetPropertyItemTwo", "s_SetValueItem", 
                   "s_SetValueItemExpression", "s_StaleItem", "s_Delete", 
                   "s_DeleteItem", "s_AtTime", "s_Between", "s_TimeWindowLimit", 
                   "oC_InQueryCall", "oC_StandaloneCall", "s_YieldItems", 
                   "s_YieldItem", "s_WithPartQuery", "s_With", "oC_ExistentialSubquery", 
                   "oC_FilterExpression", "s_Snapshot", "s_Scope", "oC_PatternPart", 
                   "s_PathFunctionPattern", "s_SinglePathPattern", "oC_NodePattern", 
                   "s_Properties", "s_PropertiesPattern", "s_PropertyNode", 
                   "s_ValueNode", "oC_RelationshipDetail", "oC_StringListNullPredicateExpression", 
                   "oC_ListOperatorExpression", "s_SingleIndexExpression", 
                   "s_DoubleIndexExpression", "s_LeftExpression", "s_RightExpression", 
                   "s_AtTExpression", "s_PropertyLookupTime", "s_PropertyLookup", 
                   "s_TimePredicateExpression", "s_AtTElement", "s_Where", 
                   "s_WhereExpression", "s_OrWhereExpression", "s_XorWhereExpression", 
                   "s_AndWhereExpression", "s_NotWhereExpression", "s_ComparisonWhereExpression", 
                   "s_MultiplyDivideModuloWhereOperator", "s_PowerOfWhereOperator", 
                   "s_AddOrSubtractWhereOperator", "s_ComparisonWhereOperator", 
                   "s_StringListNullPredicateWhereExpression", "s_AddOrSubtractWhereExpression", 
                   "s_TimePredicateWhereExpression", "s_StringPredicateWhereExpression", 
                   "s_ListPredicateWhereExpression", "s_NullPredicateWhereExpression", 
                   "s_MultiplyDivideModuloWhereExpression", "s_PowerOfWhereExpression", 
                   "s_UnaryAddOrSubtractWhereExpression", "s_ListOperatorWhereExpression", 
                   "s_PropertyOrLabelsWhereExpression", "s_AtTWhereExpression", 
                   "s_SingleIndexWhereExpression", "s_DoubleIndexWhereExpression", 
                   "s_LeftWhereExpression", "s_RightWhereExpression", "s_TimePointLiteral", 
                   "oC_SymbolicName", "oC_ReservedWord", "oC_Cypher", "oC_Statement", 
                   "oC_RegularQuery", "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", 
                   "oC_MultiPartQuery", "oC_ReadingClause", "oC_Unwind", 
                   "oC_Merge", "oC_MergeAction", "oC_Create", "oC_Set", 
                   "oC_Delete", "oC_Remove", "oC_RemoveItem", "oC_YieldItems", 
                   "oC_YieldItem", "oC_With", "oC_Return", "oC_ProjectionBody", 
                   "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", 
                   "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", 
                   "oC_AnonymousPatternPart", "oC_PatternElement", "oC_RelationshipsPattern", 
                   "oC_PatternElementChain", "oC_RelationshipPattern", "oC_Properties", 
                   "oC_RelationshipTypes", "oC_NodeLabels", "oC_NodeLabel", 
                   "oC_RangeLiteral", "oC_LabelName", "oC_RelTypeName", 
                   "oC_PropertyExpression", "oC_Expression", "oC_OrExpression", 
                   "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", 
                   "oC_ComparisonExpression", "oC_StringPredicateExpression", 
                   "oC_ListPredicateExpression", "oC_NullPredicateExpression", 
                   "oC_AddOrSubtractExpression", "s_MultiplyDivideModuloOperator", 
                   "s_PowerOfOperator", "s_AddOrSubtractOperator", "s_ComparisonOperator", 
                   "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", 
                   "oC_UnaryAddOrSubtractExpression", "oC_PropertyOrLabelsExpression", 
                   "oC_PropertyLookup", "oC_Atom", "oC_CaseExpression", 
                   "oC_CaseAlternative", "oC_ListComprehension", "oC_PatternComprehension", 
                   "oC_Quantifier", "oC_PatternPredicate", "oC_ParenthesizedExpression", 
                   "oC_IdInColl", "oC_FunctionInvocation", "s_FunctionInvocationExpression", 
                   "oC_FunctionName", "oC_ExplicitProcedureInvocation", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_Variable", "oC_Literal", 
                   "oC_BooleanLiteral", "oC_NumberLiteral", "oC_IntegerLiteral", 
                   "oC_DoubleLiteral", "oC_ListLiteral", "s_ListLiteralExpression", 
                   "oC_MapLiteral", "s_MapKeyValue", "oC_PropertyKeyName", 
                   "oC_Parameter", "oC_SchemaName", "oC_LeftArrowHead", 
                   "oC_RightArrowHead", "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    AtT=46
    PoundValue=47
    NOW=48
    AT_TIME=49
    SNAPSHOT=50
    BETWEEN=51
    SCOPE=52
    STALE=53
    DURING=54
    OVERLAPS=55
    UNION=56
    ALL=57
    OPTIONAL=58
    MATCH=59
    UNWIND=60
    AS=61
    MERGE=62
    ON=63
    CREATE=64
    SET=65
    DETACH=66
    DELETE=67
    REMOVE=68
    CALL=69
    YIELD=70
    WITH=71
    RETURN=72
    DISTINCT=73
    ORDER=74
    BY=75
    L_SKIP=76
    LIMIT=77
    ASCENDING=78
    ASC=79
    DESCENDING=80
    DESC=81
    WHERE=82
    OR=83
    XOR=84
    AND=85
    NOT=86
    STARTS=87
    ENDS=88
    CONTAINS=89
    IN=90
    IS=91
    NULL=92
    COUNT=93
    CASE=94
    ELSE=95
    END=96
    WHEN=97
    THEN=98
    ANY=99
    NONE=100
    SINGLE=101
    EXISTS=102
    TRUE=103
    FALSE=104
    HexInteger=105
    DecimalInteger=106
    OctalInteger=107
    HexLetter=108
    HexDigit=109
    Digit=110
    NonZeroDigit=111
    NonZeroOctDigit=112
    OctDigit=113
    ZeroDigit=114
    ExponentDecimalReal=115
    RegularDecimalReal=116
    StringLiteral=117
    EscapedChar=118
    CONSTRAINT=119
    DO=120
    FOR=121
    REQUIRE=122
    UNIQUE=123
    MANDATORY=124
    SCALAR=125
    OF=126
    ADD=127
    DROP=128
    FILTER=129
    EXTRACT=130
    UnescapedSymbolicName=131
    IdentifierStart=132
    IdentifierPart=133
    EscapedSymbolicName=134
    SP=135
    WHITESPACE=136
    Comment=137

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StandaloneCallContext,0)


        def s_TimeWindowLimit(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimeWindowLimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = s_cypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Query)
        try:
            self.state = 349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 346
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 347
                self.oC_StandaloneCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 348
                self.s_TimeWindowLimit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_Where(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = s_cypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 351
                self.match(s_cypherParser.OPTIONAL)
                self.state = 352
                self.match(s_cypherParser.SP)


            self.state = 355
            self.match(s_cypherParser.MATCH)
            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 356
                self.match(s_cypherParser.SP)


            self.state = 359
            self.oC_Pattern()
            self.state = 367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 360
                    self.match(s_cypherParser.SP)


                self.state = 365
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 363
                    self.s_AtTime()
                    pass
                elif token in [51]:
                    self.state = 364
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 369
                    self.match(s_cypherParser.SP)


                self.state = 372
                self.s_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_Create(self):
            return self.getTypedRuleContext(s_cypherParser.S_CreateContext,0)


        def s_Merge(self):
            return self.getTypedRuleContext(s_cypherParser.S_MergeContext,0)


        def s_Set(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetContext,0)


        def s_Remove(self):
            return self.getTypedRuleContext(s_cypherParser.S_RemoveContext,0)


        def s_Stale(self):
            return self.getTypedRuleContext(s_cypherParser.S_StaleContext,0)


        def s_Delete(self):
            return self.getTypedRuleContext(s_cypherParser.S_DeleteContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = s_cypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_UpdatingClause)
        try:
            self.state = 381
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.enterOuterAlt(localctx, 1)
                self.state = 375
                self.s_Create()
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 376
                self.s_Merge()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 3)
                self.state = 377
                self.s_Set()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 4)
                self.state = 378
                self.s_Remove()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 5)
                self.state = 379
                self.s_Stale()
                pass
            elif token in [66, 67]:
                self.enterOuterAlt(localctx, 6)
                self.state = 380
                self.s_Delete()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Create" ):
                listener.enterS_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Create" ):
                listener.exitS_Create(self)




    def s_Create(self):

        localctx = s_cypherParser.S_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_s_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383
            self.match(s_cypherParser.CREATE)
            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 384
                self.match(s_cypherParser.SP)


            self.state = 387
            self.oC_Pattern()
            self.state = 392
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 388
                    self.match(s_cypherParser.SP)


                self.state = 391
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Merge" ):
                listener.enterS_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Merge" ):
                listener.exitS_Merge(self)




    def s_Merge(self):

        localctx = s_cypherParser.S_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_s_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.match(s_cypherParser.MERGE)
            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 395
                self.match(s_cypherParser.SP)


            self.state = 398
            self.oC_PatternPart()
            self.state = 403
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 399
                    self.match(s_cypherParser.SP)
                    self.state = 400
                    self.oC_MergeAction() 
                self.state = 405
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

            self.state = 410
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 406
                    self.match(s_cypherParser.SP)


                self.state = 409
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Set" ):
                listener.enterS_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Set" ):
                listener.exitS_Set(self)




    def s_Set(self):

        localctx = s_cypherParser.S_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_s_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.match(s_cypherParser.SET)
            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 413
                self.match(s_cypherParser.SP)


            self.state = 416
            self.oC_SetItem()
            self.state = 427
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 418
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 417
                        self.match(s_cypherParser.SP)


                    self.state = 420
                    self.match(s_cypherParser.T__0)
                    self.state = 422
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 421
                        self.match(s_cypherParser.SP)


                    self.state = 424
                    self.oC_SetItem() 
                self.state = 429
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

            self.state = 434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 430
                    self.match(s_cypherParser.SP)


                self.state = 433
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RemoveItemContext,i)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Remove" ):
                listener.enterS_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Remove" ):
                listener.exitS_Remove(self)




    def s_Remove(self):

        localctx = s_cypherParser.S_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_s_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.match(s_cypherParser.REMOVE)
            self.state = 437
            self.match(s_cypherParser.SP)
            self.state = 438
            self.oC_RemoveItem()
            self.state = 449
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 440
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 439
                        self.match(s_cypherParser.SP)


                    self.state = 442
                    self.match(s_cypherParser.T__0)
                    self.state = 444
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 443
                        self.match(s_cypherParser.SP)


                    self.state = 446
                    self.oC_RemoveItem() 
                self.state = 451
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

            self.state = 456
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 452
                    self.match(s_cypherParser.SP)


                self.state = 455
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def s_StaleItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StaleItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StaleItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Stale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Stale" ):
                listener.enterS_Stale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Stale" ):
                listener.exitS_Stale(self)




    def s_Stale(self):

        localctx = s_cypherParser.S_StaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_s_Stale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.match(s_cypherParser.STALE)
            self.state = 460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 459
                self.match(s_cypherParser.SP)


            self.state = 462
            self.s_StaleItem()
            self.state = 473
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 464
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 463
                        self.match(s_cypherParser.SP)


                    self.state = 466
                    self.match(s_cypherParser.T__0)
                    self.state = 468
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 467
                        self.match(s_cypherParser.SP)


                    self.state = 470
                    self.s_StaleItem() 
                self.state = 475
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

            self.state = 480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 476
                    self.match(s_cypherParser.SP)


                self.state = 479
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_SetPropertyItemOne(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemOneContext,0)


        def s_SetPropertyItemTwo(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemTwoContext,0)


        def s_SetValueItem(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetValueItemContext,0)


        def s_SetValueItemExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetValueItemExpressionContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = s_cypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 482
                self.oC_Variable()
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 483
                    self.match(s_cypherParser.SP)


                self.state = 486
                self.s_AtTElement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 488
                self.oC_Variable()
                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 490
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 489
                        self.match(s_cypherParser.SP)


                    self.state = 492
                    self.s_AtTElement()


                self.state = 495
                self.match(s_cypherParser.T__1)
                self.state = 496
                self.s_SetPropertyItemOne()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 498
                self.oC_Variable()
                self.state = 503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 500
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 499
                        self.match(s_cypherParser.SP)


                    self.state = 502
                    self.s_AtTElement()


                self.state = 505
                self.match(s_cypherParser.T__1)
                self.state = 506
                self.s_SetPropertyItemTwo()
                self.state = 508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 507
                    self.match(s_cypherParser.SP)


                self.state = 510
                self.s_SetValueItem()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 512
                self.oC_Variable()
                self.state = 517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 514
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 513
                        self.match(s_cypherParser.SP)


                    self.state = 516
                    self.s_AtTElement()


                self.state = 519
                self.match(s_cypherParser.T__1)
                self.state = 520
                self.s_SetPropertyItemTwo()
                self.state = 522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 521
                    self.match(s_cypherParser.SP)


                self.state = 524
                self.match(s_cypherParser.T__2)
                self.state = 526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 525
                    self.match(s_cypherParser.SP)


                self.state = 528
                self.s_SetValueItemExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 530
                self.oC_PropertyExpression()
                self.state = 532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 531
                    self.match(s_cypherParser.SP)


                self.state = 534
                self.match(s_cypherParser.T__2)
                self.state = 536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 535
                    self.match(s_cypherParser.SP)


                self.state = 538
                self.oC_Expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 540
                self.oC_Variable()
                self.state = 542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 541
                    self.match(s_cypherParser.SP)


                self.state = 544
                self.match(s_cypherParser.T__2)
                self.state = 546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 545
                    self.match(s_cypherParser.SP)


                self.state = 548
                self.oC_Expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 550
                self.oC_Variable()
                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 551
                    self.match(s_cypherParser.SP)


                self.state = 554
                self.match(s_cypherParser.T__3)
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 555
                    self.match(s_cypherParser.SP)


                self.state = 558
                self.oC_Expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 560
                self.oC_Variable()
                self.state = 562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 561
                    self.match(s_cypherParser.SP)


                self.state = 564
                self.oC_NodeLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemOneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemOne

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemOne" ):
                listener.enterS_SetPropertyItemOne(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemOne" ):
                listener.exitS_SetPropertyItemOne(self)




    def s_SetPropertyItemOne(self):

        localctx = s_cypherParser.S_SetPropertyItemOneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_s_SetPropertyItemOne)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.oC_PropertyKeyName()
            self.state = 570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 569
                self.match(s_cypherParser.SP)


            self.state = 572
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemTwoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemTwo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemTwo" ):
                listener.enterS_SetPropertyItemTwo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemTwo" ):
                listener.exitS_SetPropertyItemTwo(self)




    def s_SetPropertyItemTwo(self):

        localctx = s_cypherParser.S_SetPropertyItemTwoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_s_SetPropertyItemTwo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.oC_PropertyKeyName()
            self.state = 579
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 575
                    self.match(s_cypherParser.SP)


                self.state = 578
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetValueItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetValueItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetValueItem" ):
                listener.enterS_SetValueItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetValueItem" ):
                listener.exitS_SetValueItem(self)




    def s_SetValueItem(self):

        localctx = s_cypherParser.S_SetValueItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_s_SetValueItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self.match(s_cypherParser.PoundValue)
            self.state = 583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 582
                self.match(s_cypherParser.SP)


            self.state = 585
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetValueItemExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetValueItemExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetValueItemExpression" ):
                listener.enterS_SetValueItemExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetValueItemExpression" ):
                listener.exitS_SetValueItemExpression(self)




    def s_SetValueItemExpression(self):

        localctx = s_cypherParser.S_SetValueItemExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_s_SetValueItemExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self.oC_Expression()
            self.state = 592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 588
                    self.match(s_cypherParser.SP)


                self.state = 591
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StaleItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StaleItem" ):
                listener.enterS_StaleItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StaleItem" ):
                listener.exitS_StaleItem(self)




    def s_StaleItem(self):

        localctx = s_cypherParser.S_StaleItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_s_StaleItem)
        self._la = 0 # Token type
        try:
            self.state = 603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 594
                self.oC_Expression()
                self.state = 595
                self.match(s_cypherParser.T__1)
                self.state = 596
                self.oC_PropertyKeyName()
                self.state = 598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 597
                    self.match(s_cypherParser.SP)


                self.state = 600
                self.match(s_cypherParser.PoundValue)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 602
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def s_DeleteItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DeleteItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DeleteItemContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Delete" ):
                listener.enterS_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Delete" ):
                listener.exitS_Delete(self)




    def s_Delete(self):

        localctx = s_cypherParser.S_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_s_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 605
                self.match(s_cypherParser.DETACH)
                self.state = 606
                self.match(s_cypherParser.SP)


            self.state = 609
            self.match(s_cypherParser.DELETE)
            self.state = 611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 610
                self.match(s_cypherParser.SP)


            self.state = 613
            self.s_DeleteItem()
            self.state = 624
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 615
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 614
                        self.match(s_cypherParser.SP)


                    self.state = 617
                    self.match(s_cypherParser.T__0)
                    self.state = 619
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 618
                        self.match(s_cypherParser.SP)


                    self.state = 621
                    self.s_DeleteItem() 
                self.state = 626
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

            self.state = 634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 627
                    self.match(s_cypherParser.SP)


                self.state = 632
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 630
                    self.s_AtTime()
                    pass
                elif token in [51]:
                    self.state = 631
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DeleteItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DeleteItem" ):
                listener.enterS_DeleteItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DeleteItem" ):
                listener.exitS_DeleteItem(self)




    def s_DeleteItem(self):

        localctx = s_cypherParser.S_DeleteItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_s_DeleteItem)
        self._la = 0 # Token type
        try:
            self.state = 645
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 636
                self.oC_Expression()
                self.state = 637
                self.match(s_cypherParser.T__1)
                self.state = 638
                self.oC_PropertyKeyName()
                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 639
                    self.match(s_cypherParser.SP)


                self.state = 642
                self.match(s_cypherParser.PoundValue)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 644
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTime" ):
                listener.enterS_AtTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTime" ):
                listener.exitS_AtTime(self)




    def s_AtTime(self):

        localctx = s_cypherParser.S_AtTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_s_AtTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(s_cypherParser.AT_TIME)
            self.state = 649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 648
                self.match(s_cypherParser.SP)


            self.state = 651
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_BetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Between

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Between" ):
                listener.enterS_Between(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Between" ):
                listener.exitS_Between(self)




    def s_Between(self):

        localctx = s_cypherParser.S_BetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_s_Between)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.match(s_cypherParser.BETWEEN)
            self.state = 655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 654
                self.match(s_cypherParser.SP)


            self.state = 657
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimeWindowLimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_Snapshot(self):
            return self.getTypedRuleContext(s_cypherParser.S_SnapshotContext,0)


        def s_Scope(self):
            return self.getTypedRuleContext(s_cypherParser.S_ScopeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimeWindowLimit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimeWindowLimit" ):
                listener.enterS_TimeWindowLimit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimeWindowLimit" ):
                listener.exitS_TimeWindowLimit(self)




    def s_TimeWindowLimit(self):

        localctx = s_cypherParser.S_TimeWindowLimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_s_TimeWindowLimit)
        try:
            self.state = 661
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 659
                self.s_Snapshot()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 660
                self.s_Scope()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def s_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.S_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = s_cypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.match(s_cypherParser.CALL)
            self.state = 664
            self.match(s_cypherParser.SP)
            self.state = 665
            self.oC_ExplicitProcedureInvocation()
            self.state = 672
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 666
                    self.match(s_cypherParser.SP)


                self.state = 669
                self.match(s_cypherParser.YIELD)
                self.state = 670
                self.match(s_cypherParser.SP)
                self.state = 671
                self.s_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def s_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.S_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = s_cypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_oC_StandaloneCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.match(s_cypherParser.CALL)
            self.state = 675
            self.match(s_cypherParser.SP)
            self.state = 678
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 676
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 677
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 689
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 680
                    self.match(s_cypherParser.SP)


                self.state = 683
                self.match(s_cypherParser.YIELD)
                self.state = 684
                self.match(s_cypherParser.SP)
                self.state = 687
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [5]:
                    self.state = 685
                    self.match(s_cypherParser.T__4)
                    pass
                elif token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                    self.state = 686
                    self.s_YieldItems()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_YieldItemContext,i)


        def s_Where(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_YieldItems" ):
                listener.enterS_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_YieldItems" ):
                listener.exitS_YieldItems(self)




    def s_YieldItems(self):

        localctx = s_cypherParser.S_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_s_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.s_YieldItem()
            self.state = 702
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 693
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 692
                        self.match(s_cypherParser.SP)


                    self.state = 695
                    self.match(s_cypherParser.T__0)
                    self.state = 697
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 696
                        self.match(s_cypherParser.SP)


                    self.state = 699
                    self.s_YieldItem() 
                self.state = 704
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

            self.state = 709
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 705
                    self.match(s_cypherParser.SP)


                self.state = 708
                self.s_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_YieldItem" ):
                listener.enterS_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_YieldItem" ):
                listener.exitS_YieldItem(self)




    def s_YieldItem(self):

        localctx = s_cypherParser.S_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_s_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.oC_ProcedureResultField()
            self.state = 716
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 712
                self.match(s_cypherParser.SP)
                self.state = 713
                self.match(s_cypherParser.AS)
                self.state = 714
                self.match(s_cypherParser.SP)
                self.state = 715
                self.oC_Variable()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_With(self):
            return self.getTypedRuleContext(s_cypherParser.S_WithContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_WithPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_WithPartQuery" ):
                listener.enterS_WithPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_WithPartQuery" ):
                listener.exitS_WithPartQuery(self)




    def s_WithPartQuery(self):

        localctx = s_cypherParser.S_WithPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_s_WithPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                self.state = 718
                self.oC_ReadingClause()
                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 719
                    self.match(s_cypherParser.SP)


                self.state = 726
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64001) != 0):
                self.state = 727
                self.oC_UpdatingClause()
                self.state = 729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 728
                    self.match(s_cypherParser.SP)


                self.state = 735
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 736
            self.s_With()
            self.state = 738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 737
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def s_Where(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_With" ):
                listener.enterS_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_With" ):
                listener.exitS_With(self)




    def s_With(self):

        localctx = s_cypherParser.S_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_s_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self.match(s_cypherParser.WITH)
            self.state = 741
            self.oC_ProjectionBody()
            self.state = 746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 742
                    self.match(s_cypherParser.SP)


                self.state = 745
                self.s_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExistentialSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def s_Where(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExistentialSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExistentialSubquery" ):
                listener.enterOC_ExistentialSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExistentialSubquery" ):
                listener.exitOC_ExistentialSubquery(self)




    def oC_ExistentialSubquery(self):

        localctx = s_cypherParser.OC_ExistentialSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_oC_ExistentialSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.match(s_cypherParser.EXISTS)
            self.state = 750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 749
                self.match(s_cypherParser.SP)


            self.state = 752
            self.match(s_cypherParser.T__5)
            self.state = 754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 753
                self.match(s_cypherParser.SP)


            self.state = 764
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 71, 72]:
                self.state = 756
                self.oC_RegularQuery()
                pass
            elif token in [8, 48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 757
                self.oC_Pattern()
                self.state = 762
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                if la_ == 1:
                    self.state = 759
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 758
                        self.match(s_cypherParser.SP)


                    self.state = 761
                    self.s_Where()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 766
                self.match(s_cypherParser.SP)


            self.state = 769
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IdInCollContext,0)


        def s_Where(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = s_cypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.oC_IdInColl()
            self.state = 776
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 772
                    self.match(s_cypherParser.SP)


                self.state = 775
                self.s_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SnapshotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Snapshot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Snapshot" ):
                listener.enterS_Snapshot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Snapshot" ):
                listener.exitS_Snapshot(self)




    def s_Snapshot(self):

        localctx = s_cypherParser.S_SnapshotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_s_Snapshot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.match(s_cypherParser.SNAPSHOT)
            self.state = 780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 779
                self.match(s_cypherParser.SP)


            self.state = 782
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Scope" ):
                listener.enterS_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Scope" ):
                listener.exitS_Scope(self)




    def s_Scope(self):

        localctx = s_cypherParser.S_ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_s_Scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.match(s_cypherParser.SCOPE)
            self.state = 786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 785
                self.match(s_cypherParser.SP)


            self.state = 788
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_PathFunctionPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PathFunctionPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AnonymousPatternPartContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = s_cypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 811
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 790
                self.oC_Variable()
                self.state = 792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 791
                    self.match(s_cypherParser.SP)


                self.state = 794
                self.match(s_cypherParser.T__2)
                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 795
                    self.match(s_cypherParser.SP)


                self.state = 798
                self.s_PathFunctionPattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 800
                self.oC_Variable()
                self.state = 802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 801
                    self.match(s_cypherParser.SP)


                self.state = 804
                self.match(s_cypherParser.T__2)
                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 805
                    self.match(s_cypherParser.SP)


                self.state = 808
                self.oC_AnonymousPatternPart()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 810
                self.oC_AnonymousPatternPart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PathFunctionPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def s_SinglePathPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_SinglePathPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PathFunctionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PathFunctionPattern" ):
                listener.enterS_PathFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PathFunctionPattern" ):
                listener.exitS_PathFunctionPattern(self)




    def s_PathFunctionPattern(self):

        localctx = s_cypherParser.S_PathFunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_s_PathFunctionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.oC_FunctionName()
            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 814
                self.match(s_cypherParser.SP)


            self.state = 817
            self.match(s_cypherParser.T__7)
            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 818
                self.match(s_cypherParser.SP)


            self.state = 821
            self.s_SinglePathPattern()
            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 822
                self.match(s_cypherParser.SP)


            self.state = 825
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SinglePathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodePatternContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,i)


        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SinglePathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SinglePathPattern" ):
                listener.enterS_SinglePathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SinglePathPattern" ):
                listener.exitS_SinglePathPattern(self)




    def s_SinglePathPattern(self):

        localctx = s_cypherParser.S_SinglePathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_s_SinglePathPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self.oC_NodePattern()
            self.state = 829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 828
                self.match(s_cypherParser.SP)


            self.state = 831
            self.oC_RelationshipPattern()
            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 832
                self.match(s_cypherParser.SP)


            self.state = 835
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def s_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = s_cypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.match(s_cypherParser.T__7)
            self.state = 839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 838
                self.match(s_cypherParser.SP)


            self.state = 845
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 841
                self.oC_Variable()
                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 842
                    self.match(s_cypherParser.SP)




            self.state = 851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 847
                self.oC_NodeLabels()
                self.state = 849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 848
                    self.match(s_cypherParser.SP)




            self.state = 857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 853
                self.s_AtTElement()
                self.state = 855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 854
                    self.match(s_cypherParser.SP)




            self.state = 863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6 or _la==26:
                self.state = 859
                self.s_Properties()
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 860
                    self.match(s_cypherParser.SP)




            self.state = 865
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertiesPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesPatternContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Properties" ):
                listener.enterS_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Properties" ):
                listener.exitS_Properties(self)




    def s_Properties(self):

        localctx = s_cypherParser.S_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_s_Properties)
        try:
            self.state = 869
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 867
                self.s_PropertiesPattern()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 868
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_PropertyNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PropertyNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PropertyNodeContext,i)


        def s_ValueNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ValueNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ValueNodeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertiesPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertiesPattern" ):
                listener.enterS_PropertiesPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertiesPattern" ):
                listener.exitS_PropertiesPattern(self)




    def s_PropertiesPattern(self):

        localctx = s_cypherParser.S_PropertiesPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_s_PropertiesPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.match(s_cypherParser.T__5)
            self.state = 873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 872
                self.match(s_cypherParser.SP)


            self.state = 891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 875
                self.s_PropertyNode()
                self.state = 876
                self.match(s_cypherParser.T__9)
                self.state = 877
                self.s_ValueNode()
                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 878
                    self.match(s_cypherParser.T__0)
                    self.state = 880
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 879
                        self.match(s_cypherParser.SP)


                    self.state = 882
                    self.s_PropertyNode()
                    self.state = 883
                    self.match(s_cypherParser.T__9)
                    self.state = 884
                    self.s_ValueNode()
                    self.state = 890
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 893
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyNode" ):
                listener.enterS_PropertyNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyNode" ):
                listener.exitS_PropertyNode(self)




    def s_PropertyNode(self):

        localctx = s_cypherParser.S_PropertyNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_s_PropertyNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self.oC_PropertyKeyName()
            self.state = 897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 896
                self.match(s_cypherParser.SP)


            self.state = 903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 899
                self.s_AtTElement()
                self.state = 901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 900
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ValueNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ValueNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ValueNode" ):
                listener.enterS_ValueNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ValueNode" ):
                listener.exitS_ValueNode(self)




    def s_ValueNode(self):

        localctx = s_cypherParser.S_ValueNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_s_ValueNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 905
                self.match(s_cypherParser.SP)


            self.state = 908
            self.oC_Expression()
            self.state = 910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 909
                self.match(s_cypherParser.SP)


            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 912
                self.s_AtTElement()
                self.state = 914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 913
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RangeLiteralContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = s_cypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            self.match(s_cypherParser.T__10)
            self.state = 920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 919
                self.match(s_cypherParser.SP)


            self.state = 926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 922
                self.oC_Variable()
                self.state = 924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 923
                    self.match(s_cypherParser.SP)




            self.state = 932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 928
                self.oC_RelationshipTypes()
                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 929
                    self.match(s_cypherParser.SP)




            self.state = 935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 934
                self.oC_RangeLiteral()


            self.state = 941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 937
                self.s_AtTElement()
                self.state = 939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 938
                    self.match(s_cypherParser.SP)




            self.state = 947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6 or _la==26:
                self.state = 943
                self.oC_Properties()
                self.state = 945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 944
                    self.match(s_cypherParser.SP)




            self.state = 949
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def s_TimePredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateExpressionContext,0)


        def oC_StringPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringPredicateExpressionContext,0)


        def oC_ListPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListPredicateExpressionContext,0)


        def oC_NullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NullPredicateExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringListNullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullPredicateExpression" ):
                listener.enterOC_StringListNullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullPredicateExpression" ):
                listener.exitOC_StringListNullPredicateExpression(self)




    def oC_StringListNullPredicateExpression(self):

        localctx = s_cypherParser.OC_StringListNullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_oC_StringListNullPredicateExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.oC_AddOrSubtractExpression()
            self.state = 956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 952
                self.s_TimePredicateExpression()

            elif la_ == 2:
                self.state = 953
                self.oC_StringPredicateExpression()

            elif la_ == 3:
                self.state = 954
                self.oC_ListPredicateExpression()

            elif la_ == 4:
                self.state = 955
                self.oC_NullPredicateExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def s_AtTExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTExpressionContext,0)


        def s_SingleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_SingleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_SingleIndexExpressionContext,i)


        def s_DoubleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DoubleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DoubleIndexExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = s_cypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_oC_ListOperatorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.state = 958
                self.oC_PropertyOrLabelsExpression()
                pass

            elif la_ == 2:
                self.state = 959
                self.s_AtTExpression()
                pass


            self.state = 966
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 964
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                    if la_ == 1:
                        self.state = 962
                        self.s_SingleIndexExpression()
                        pass

                    elif la_ == 2:
                        self.state = 963
                        self.s_DoubleIndexExpression()
                        pass

             
                self.state = 968
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SingleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SingleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SingleIndexExpression" ):
                listener.enterS_SingleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SingleIndexExpression" ):
                listener.exitS_SingleIndexExpression(self)




    def s_SingleIndexExpression(self):

        localctx = s_cypherParser.S_SingleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_s_SingleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 969
                self.match(s_cypherParser.SP)


            self.state = 972
            self.match(s_cypherParser.T__10)
            self.state = 973
            self.s_LeftExpression()
            self.state = 974
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DoubleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def s_RightExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_RightExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DoubleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DoubleIndexExpression" ):
                listener.enterS_DoubleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DoubleIndexExpression" ):
                listener.exitS_DoubleIndexExpression(self)




    def s_DoubleIndexExpression(self):

        localctx = s_cypherParser.S_DoubleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_s_DoubleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 976
                self.match(s_cypherParser.SP)


            self.state = 979
            self.match(s_cypherParser.T__10)
            self.state = 981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070976) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 980
                self.s_LeftExpression()


            self.state = 983
            self.match(s_cypherParser.T__12)
            self.state = 985
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070976) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 984
                self.s_RightExpression()


            self.state = 987
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_LeftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_LeftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_LeftExpression" ):
                listener.enterS_LeftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_LeftExpression" ):
                listener.exitS_LeftExpression(self)




    def s_LeftExpression(self):

        localctx = s_cypherParser.S_LeftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_s_LeftExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_RightExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_RightExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_RightExpression" ):
                listener.enterS_RightExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_RightExpression" ):
                listener.exitS_RightExpression(self)




    def s_RightExpression(self):

        localctx = s_cypherParser.S_RightExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_s_RightExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def s_PropertyLookupTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupTimeContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTExpression" ):
                listener.enterS_AtTExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTExpression" ):
                listener.exitS_AtTExpression(self)




    def s_AtTExpression(self):

        localctx = s_cypherParser.S_AtTExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_s_AtTExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.oC_Atom()
            self.state = 1008
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 998 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 995
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 994
                            self.match(s_cypherParser.SP)


                        self.state = 997
                        self.oC_PropertyLookup()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1000 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

                self.state = 1006
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
                if la_ == 1:
                    self.state = 1003
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1002
                        self.match(s_cypherParser.SP)


                    self.state = 1005
                    self.match(s_cypherParser.PoundValue)




            self.state = 1011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1010
                self.match(s_cypherParser.SP)


            self.state = 1013
            self.s_PropertyLookupTime()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyLookupTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyLookupTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyLookupTime" ):
                listener.enterS_PropertyLookupTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyLookupTime" ):
                listener.exitS_PropertyLookupTime(self)




    def s_PropertyLookupTime(self):

        localctx = s_cypherParser.S_PropertyLookupTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_s_PropertyLookupTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self.match(s_cypherParser.AtT)
            self.state = 1022
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,157,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1017
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1016
                        self.match(s_cypherParser.SP)


                    self.state = 1019
                    self.s_PropertyLookup() 
                self.state = 1024
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,157,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyLookup" ):
                listener.enterS_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyLookup" ):
                listener.exitS_PropertyLookup(self)




    def s_PropertyLookup(self):

        localctx = s_cypherParser.S_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_s_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.match(s_cypherParser.T__1)
            self.state = 1027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1026
                self.match(s_cypherParser.SP)


            self.state = 1029
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateExpression" ):
                listener.enterS_TimePredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateExpression" ):
                listener.exitS_TimePredicateExpression(self)




    def s_TimePredicateExpression(self):

        localctx = s_cypherParser.S_TimePredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_s_TimePredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self.match(s_cypherParser.SP)
            self.state = 1032
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1033
            self.match(s_cypherParser.SP)
            self.state = 1034
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_TimePointLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_TimePointLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_TimePointLiteralContext,i)


        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTElement" ):
                listener.enterS_AtTElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTElement" ):
                listener.exitS_AtTElement(self)




    def s_AtTElement(self):

        localctx = s_cypherParser.S_AtTElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_s_AtTElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036
            self.match(s_cypherParser.AtT)
            self.state = 1038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1037
                self.match(s_cypherParser.SP)


            self.state = 1040
            self.match(s_cypherParser.T__7)
            self.state = 1042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1041
                self.match(s_cypherParser.SP)


            self.state = 1044
            self.s_TimePointLiteral()
            self.state = 1046
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1045
                self.match(s_cypherParser.SP)


            self.state = 1048
            self.match(s_cypherParser.T__0)
            self.state = 1050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1049
                self.match(s_cypherParser.SP)


            self.state = 1054
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 117]:
                self.state = 1052
                self.s_TimePointLiteral()
                pass
            elif token in [48]:
                self.state = 1053
                self.match(s_cypherParser.NOW)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1057
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1056
                self.match(s_cypherParser.SP)


            self.state = 1059
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def s_WhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Where" ):
                listener.enterS_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Where" ):
                listener.exitS_Where(self)




    def s_Where(self):

        localctx = s_cypherParser.S_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_s_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            self.match(s_cypherParser.WHERE)
            self.state = 1062
            self.match(s_cypherParser.SP)
            self.state = 1063
            self.s_WhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_OrWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_OrWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_WhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_WhereExpression" ):
                listener.enterS_WhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_WhereExpression" ):
                listener.exitS_WhereExpression(self)




    def s_WhereExpression(self):

        localctx = s_cypherParser.S_WhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_s_WhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            self.s_OrWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_OrWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_XorWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_XorWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_XorWhereExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_OrWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_OrWhereExpression" ):
                listener.enterS_OrWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_OrWhereExpression" ):
                listener.exitS_OrWhereExpression(self)




    def s_OrWhereExpression(self):

        localctx = s_cypherParser.S_OrWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_s_OrWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self.s_XorWhereExpression()
            self.state = 1074
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,165,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1068
                    self.match(s_cypherParser.SP)
                    self.state = 1069
                    self.match(s_cypherParser.OR)
                    self.state = 1070
                    self.match(s_cypherParser.SP)
                    self.state = 1071
                    self.s_XorWhereExpression() 
                self.state = 1076
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,165,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_XorWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_AndWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AndWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AndWhereExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_XorWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_XorWhereExpression" ):
                listener.enterS_XorWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_XorWhereExpression" ):
                listener.exitS_XorWhereExpression(self)




    def s_XorWhereExpression(self):

        localctx = s_cypherParser.S_XorWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_s_XorWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1077
            self.s_AndWhereExpression()
            self.state = 1084
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,166,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1078
                    self.match(s_cypherParser.SP)
                    self.state = 1079
                    self.match(s_cypherParser.XOR)
                    self.state = 1080
                    self.match(s_cypherParser.SP)
                    self.state = 1081
                    self.s_AndWhereExpression() 
                self.state = 1086
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,166,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AndWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_NotWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_NotWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_NotWhereExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AndWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AndWhereExpression" ):
                listener.enterS_AndWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AndWhereExpression" ):
                listener.exitS_AndWhereExpression(self)




    def s_AndWhereExpression(self):

        localctx = s_cypherParser.S_AndWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_s_AndWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087
            self.s_NotWhereExpression()
            self.state = 1094
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,167,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1088
                    self.match(s_cypherParser.SP)
                    self.state = 1089
                    self.match(s_cypherParser.AND)
                    self.state = 1090
                    self.match(s_cypherParser.SP)
                    self.state = 1091
                    self.s_NotWhereExpression() 
                self.state = 1096
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_NotWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_ComparisonWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_ComparisonWhereExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_NotWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_NotWhereExpression" ):
                listener.enterS_NotWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_NotWhereExpression" ):
                listener.exitS_NotWhereExpression(self)




    def s_NotWhereExpression(self):

        localctx = s_cypherParser.S_NotWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_s_NotWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1097
                self.match(s_cypherParser.NOT)
                self.state = 1099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1098
                    self.match(s_cypherParser.SP)


                self.state = 1105
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1106
            self.s_ComparisonWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ComparisonWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_StringListNullPredicateWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StringListNullPredicateWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StringListNullPredicateWhereExpressionContext,i)


        def s_ComparisonWhereOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ComparisonWhereOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ComparisonWhereOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ComparisonWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ComparisonWhereExpression" ):
                listener.enterS_ComparisonWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ComparisonWhereExpression" ):
                listener.exitS_ComparisonWhereExpression(self)




    def s_ComparisonWhereExpression(self):

        localctx = s_cypherParser.S_ComparisonWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_s_ComparisonWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self.s_StringListNullPredicateWhereExpression()
            self.state = 1120
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1110
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1109
                        self.match(s_cypherParser.SP)


                    self.state = 1112
                    self.s_ComparisonWhereOperator()
                    self.state = 1114
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1113
                        self.match(s_cypherParser.SP)


                    self.state = 1116
                    self.s_StringListNullPredicateWhereExpression() 
                self.state = 1122
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MultiplyDivideModuloWhereOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MultiplyDivideModuloWhereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MultiplyDivideModuloWhereOperator" ):
                listener.enterS_MultiplyDivideModuloWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MultiplyDivideModuloWhereOperator" ):
                listener.exitS_MultiplyDivideModuloWhereOperator(self)




    def s_MultiplyDivideModuloWhereOperator(self):

        localctx = s_cypherParser.S_MultiplyDivideModuloWhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_s_MultiplyDivideModuloWhereOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1123
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 49184) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PowerOfWhereOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PowerOfWhereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PowerOfWhereOperator" ):
                listener.enterS_PowerOfWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PowerOfWhereOperator" ):
                listener.exitS_PowerOfWhereOperator(self)




    def s_PowerOfWhereOperator(self):

        localctx = s_cypherParser.S_PowerOfWhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_s_PowerOfWhereOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.match(s_cypherParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AddOrSubtractWhereOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AddOrSubtractWhereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AddOrSubtractWhereOperator" ):
                listener.enterS_AddOrSubtractWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AddOrSubtractWhereOperator" ):
                listener.exitS_AddOrSubtractWhereOperator(self)




    def s_AddOrSubtractWhereOperator(self):

        localctx = s_cypherParser.S_AddOrSubtractWhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_s_AddOrSubtractWhereOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1127
            _la = self._input.LA(1)
            if not(_la==17 or _la==18):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ComparisonWhereOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ComparisonWhereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ComparisonWhereOperator" ):
                listener.enterS_ComparisonWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ComparisonWhereOperator" ):
                listener.exitS_ComparisonWhereOperator(self)




    def s_ComparisonWhereOperator(self):

        localctx = s_cypherParser.S_ComparisonWhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_s_ComparisonWhereOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 16252936) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StringListNullPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def s_TimePredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateWhereExpressionContext,0)


        def s_StringPredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_StringPredicateWhereExpressionContext,0)


        def s_ListPredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_ListPredicateWhereExpressionContext,0)


        def s_NullPredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_NullPredicateWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StringListNullPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StringListNullPredicateWhereExpression" ):
                listener.enterS_StringListNullPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StringListNullPredicateWhereExpression" ):
                listener.exitS_StringListNullPredicateWhereExpression(self)




    def s_StringListNullPredicateWhereExpression(self):

        localctx = s_cypherParser.S_StringListNullPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_s_StringListNullPredicateWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self.s_AddOrSubtractWhereExpression()
            self.state = 1136
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1132
                self.s_TimePredicateWhereExpression()

            elif la_ == 2:
                self.state = 1133
                self.s_StringPredicateWhereExpression()

            elif la_ == 3:
                self.state = 1134
                self.s_ListPredicateWhereExpression()

            elif la_ == 4:
                self.state = 1135
                self.s_NullPredicateWhereExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AddOrSubtractWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_MultiplyDivideModuloWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MultiplyDivideModuloWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MultiplyDivideModuloWhereExpressionContext,i)


        def s_AddOrSubtractWhereOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AddOrSubtractWhereOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AddOrSubtractWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AddOrSubtractWhereExpression" ):
                listener.enterS_AddOrSubtractWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AddOrSubtractWhereExpression" ):
                listener.exitS_AddOrSubtractWhereExpression(self)




    def s_AddOrSubtractWhereExpression(self):

        localctx = s_cypherParser.S_AddOrSubtractWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_s_AddOrSubtractWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self.s_MultiplyDivideModuloWhereExpression()
            self.state = 1159
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,179,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1157
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                    if la_ == 1:
                        self.state = 1140
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1139
                            self.match(s_cypherParser.SP)


                        self.state = 1142
                        self.s_AddOrSubtractWhereOperator()
                        self.state = 1144
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1143
                            self.match(s_cypherParser.SP)


                        self.state = 1146
                        self.s_MultiplyDivideModuloWhereExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1149
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1148
                            self.match(s_cypherParser.SP)


                        self.state = 1151
                        self.s_AddOrSubtractWhereOperator()
                        self.state = 1153
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1152
                            self.match(s_cypherParser.SP)


                        self.state = 1155
                        self.s_MultiplyDivideModuloWhereExpression()
                        pass

             
                self.state = 1161
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,179,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateWhereExpression" ):
                listener.enterS_TimePredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateWhereExpression" ):
                listener.exitS_TimePredicateWhereExpression(self)




    def s_TimePredicateWhereExpression(self):

        localctx = s_cypherParser.S_TimePredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_s_TimePredicateWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self.match(s_cypherParser.SP)
            self.state = 1163
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1164
            self.match(s_cypherParser.SP)
            self.state = 1165
            self.s_AddOrSubtractWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StringPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StringPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StringPredicateWhereExpression" ):
                listener.enterS_StringPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StringPredicateWhereExpression" ):
                listener.exitS_StringPredicateWhereExpression(self)




    def s_StringPredicateWhereExpression(self):

        localctx = s_cypherParser.S_StringPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_s_StringPredicateWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.state = 1167
                self.match(s_cypherParser.SP)
                self.state = 1168
                self.match(s_cypherParser.STARTS)
                self.state = 1169
                self.match(s_cypherParser.SP)
                self.state = 1170
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1171
                self.match(s_cypherParser.SP)
                self.state = 1172
                self.match(s_cypherParser.ENDS)
                self.state = 1173
                self.match(s_cypherParser.SP)
                self.state = 1174
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1175
                self.match(s_cypherParser.SP)
                self.state = 1176
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 1180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1179
                self.match(s_cypherParser.SP)


            self.state = 1182
            self.s_AddOrSubtractWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ListPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ListPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ListPredicateWhereExpression" ):
                listener.enterS_ListPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ListPredicateWhereExpression" ):
                listener.exitS_ListPredicateWhereExpression(self)




    def s_ListPredicateWhereExpression(self):

        localctx = s_cypherParser.S_ListPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_s_ListPredicateWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self.match(s_cypherParser.SP)
            self.state = 1185
            self.match(s_cypherParser.IN)
            self.state = 1187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1186
                self.match(s_cypherParser.SP)


            self.state = 1189
            self.s_AddOrSubtractWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_NullPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_NullPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_NullPredicateWhereExpression" ):
                listener.enterS_NullPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_NullPredicateWhereExpression" ):
                listener.exitS_NullPredicateWhereExpression(self)




    def s_NullPredicateWhereExpression(self):

        localctx = s_cypherParser.S_NullPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_s_NullPredicateWhereExpression)
        try:
            self.state = 1201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1191
                self.match(s_cypherParser.SP)
                self.state = 1192
                self.match(s_cypherParser.IS)
                self.state = 1193
                self.match(s_cypherParser.SP)
                self.state = 1194
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1195
                self.match(s_cypherParser.SP)
                self.state = 1196
                self.match(s_cypherParser.IS)
                self.state = 1197
                self.match(s_cypherParser.SP)
                self.state = 1198
                self.match(s_cypherParser.NOT)
                self.state = 1199
                self.match(s_cypherParser.SP)
                self.state = 1200
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MultiplyDivideModuloWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PowerOfWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PowerOfWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PowerOfWhereExpressionContext,i)


        def s_MultiplyDivideModuloWhereOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MultiplyDivideModuloWhereOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MultiplyDivideModuloWhereOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MultiplyDivideModuloWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MultiplyDivideModuloWhereExpression" ):
                listener.enterS_MultiplyDivideModuloWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MultiplyDivideModuloWhereExpression" ):
                listener.exitS_MultiplyDivideModuloWhereExpression(self)




    def s_MultiplyDivideModuloWhereExpression(self):

        localctx = s_cypherParser.S_MultiplyDivideModuloWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_s_MultiplyDivideModuloWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            self.s_PowerOfWhereExpression()
            self.state = 1233
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,191,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1231
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
                    if la_ == 1:
                        self.state = 1205
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1204
                            self.match(s_cypherParser.SP)


                        self.state = 1207
                        self.s_MultiplyDivideModuloWhereOperator()
                        self.state = 1209
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1208
                            self.match(s_cypherParser.SP)


                        self.state = 1211
                        self.s_PowerOfWhereExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1214
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1213
                            self.match(s_cypherParser.SP)


                        self.state = 1216
                        self.s_MultiplyDivideModuloWhereOperator()
                        self.state = 1218
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1217
                            self.match(s_cypherParser.SP)


                        self.state = 1220
                        self.s_PowerOfWhereExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1223
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1222
                            self.match(s_cypherParser.SP)


                        self.state = 1225
                        self.s_MultiplyDivideModuloWhereOperator()
                        self.state = 1227
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1226
                            self.match(s_cypherParser.SP)


                        self.state = 1229
                        self.s_PowerOfWhereExpression()
                        pass

             
                self.state = 1235
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,191,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PowerOfWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_UnaryAddOrSubtractWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_UnaryAddOrSubtractWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_UnaryAddOrSubtractWhereExpressionContext,i)


        def s_PowerOfWhereOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PowerOfWhereOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PowerOfWhereOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PowerOfWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PowerOfWhereExpression" ):
                listener.enterS_PowerOfWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PowerOfWhereExpression" ):
                listener.exitS_PowerOfWhereExpression(self)




    def s_PowerOfWhereExpression(self):

        localctx = s_cypherParser.S_PowerOfWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_s_PowerOfWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1236
            self.s_UnaryAddOrSubtractWhereExpression()
            self.state = 1248
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,194,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1238
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1237
                        self.match(s_cypherParser.SP)


                    self.state = 1240
                    self.s_PowerOfWhereOperator()
                    self.state = 1242
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1241
                        self.match(s_cypherParser.SP)


                    self.state = 1244
                    self.s_UnaryAddOrSubtractWhereExpression() 
                self.state = 1250
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_UnaryAddOrSubtractWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_ListOperatorWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_ListOperatorWhereExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_UnaryAddOrSubtractWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_UnaryAddOrSubtractWhereExpression" ):
                listener.enterS_UnaryAddOrSubtractWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_UnaryAddOrSubtractWhereExpression" ):
                listener.exitS_UnaryAddOrSubtractWhereExpression(self)




    def s_UnaryAddOrSubtractWhereExpression(self):

        localctx = s_cypherParser.S_UnaryAddOrSubtractWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_s_UnaryAddOrSubtractWhereExpression)
        self._la = 0 # Token type
        try:
            self.state = 1257
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 8, 11, 26, 48, 57, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1251
                self.s_ListOperatorWhereExpression()
                pass
            elif token in [17, 18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1252
                _la = self._input.LA(1)
                if not(_la==17 or _la==18):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1253
                    self.match(s_cypherParser.SP)


                self.state = 1256
                self.s_ListOperatorWhereExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ListOperatorWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertyOrLabelsWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyOrLabelsWhereExpressionContext,0)


        def s_AtTWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTWhereExpressionContext,0)


        def s_SingleIndexWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_SingleIndexWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_SingleIndexWhereExpressionContext,i)


        def s_DoubleIndexWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DoubleIndexWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DoubleIndexWhereExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ListOperatorWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ListOperatorWhereExpression" ):
                listener.enterS_ListOperatorWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ListOperatorWhereExpression" ):
                listener.exitS_ListOperatorWhereExpression(self)




    def s_ListOperatorWhereExpression(self):

        localctx = s_cypherParser.S_ListOperatorWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_s_ListOperatorWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1261
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.state = 1259
                self.s_PropertyOrLabelsWhereExpression()
                pass

            elif la_ == 2:
                self.state = 1260
                self.s_AtTWhereExpression()
                pass


            self.state = 1267
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,199,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1265
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                    if la_ == 1:
                        self.state = 1263
                        self.s_SingleIndexWhereExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1264
                        self.s_DoubleIndexWhereExpression()
                        pass

             
                self.state = 1269
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,199,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyOrLabelsWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyOrLabelsWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyOrLabelsWhereExpression" ):
                listener.enterS_PropertyOrLabelsWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyOrLabelsWhereExpression" ):
                listener.exitS_PropertyOrLabelsWhereExpression(self)




    def s_PropertyOrLabelsWhereExpression(self):

        localctx = s_cypherParser.S_PropertyOrLabelsWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_s_PropertyOrLabelsWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self.oC_Atom()
            self.state = 1277
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,201,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1272
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1271
                        self.match(s_cypherParser.SP)


                    self.state = 1274
                    self.oC_PropertyLookup() 
                self.state = 1279
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,201,self._ctx)

            self.state = 1284
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.state = 1281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1280
                    self.match(s_cypherParser.SP)


                self.state = 1283
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def s_PropertyLookupTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupTimeContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTWhereExpression" ):
                listener.enterS_AtTWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTWhereExpression" ):
                listener.exitS_AtTWhereExpression(self)




    def s_AtTWhereExpression(self):

        localctx = s_cypherParser.S_AtTWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_s_AtTWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1286
            self.oC_Atom()
            self.state = 1301
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.state = 1291 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1288
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1287
                            self.match(s_cypherParser.SP)


                        self.state = 1290
                        self.oC_PropertyLookup()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1293 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,205,self._ctx)

                self.state = 1299
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
                if la_ == 1:
                    self.state = 1296
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1295
                        self.match(s_cypherParser.SP)


                    self.state = 1298
                    self.match(s_cypherParser.PoundValue)




            self.state = 1304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1303
                self.match(s_cypherParser.SP)


            self.state = 1306
            self.s_PropertyLookupTime()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SingleIndexWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_LeftWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftWhereExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SingleIndexWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SingleIndexWhereExpression" ):
                listener.enterS_SingleIndexWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SingleIndexWhereExpression" ):
                listener.exitS_SingleIndexWhereExpression(self)




    def s_SingleIndexWhereExpression(self):

        localctx = s_cypherParser.S_SingleIndexWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_s_SingleIndexWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1308
                self.match(s_cypherParser.SP)


            self.state = 1311
            self.match(s_cypherParser.T__10)
            self.state = 1312
            self.s_LeftWhereExpression()
            self.state = 1313
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DoubleIndexWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def s_LeftWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftWhereExpressionContext,0)


        def s_RightWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_RightWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DoubleIndexWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DoubleIndexWhereExpression" ):
                listener.enterS_DoubleIndexWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DoubleIndexWhereExpression" ):
                listener.exitS_DoubleIndexWhereExpression(self)




    def s_DoubleIndexWhereExpression(self):

        localctx = s_cypherParser.S_DoubleIndexWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_s_DoubleIndexWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1315
                self.match(s_cypherParser.SP)


            self.state = 1318
            self.match(s_cypherParser.T__10)
            self.state = 1320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070976) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1319
                self.s_LeftWhereExpression()


            self.state = 1322
            self.match(s_cypherParser.T__12)
            self.state = 1324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070976) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1323
                self.s_RightWhereExpression()


            self.state = 1326
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_LeftWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_LeftWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_LeftWhereExpression" ):
                listener.enterS_LeftWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_LeftWhereExpression" ):
                listener.exitS_LeftWhereExpression(self)




    def s_LeftWhereExpression(self):

        localctx = s_cypherParser.S_LeftWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_s_LeftWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1328
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_RightWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_RightWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_RightWhereExpression" ):
                listener.enterS_RightWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_RightWhereExpression" ):
                listener.exitS_RightWhereExpression(self)




    def s_RightWhereExpression(self):

        localctx = s_cypherParser.S_RightWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_s_RightWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1330
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePointLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePointLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePointLiteral" ):
                listener.enterS_TimePointLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePointLiteral" ):
                listener.exitS_TimePointLiteral(self)




    def s_TimePointLiteral(self):

        localctx = s_cypherParser.S_TimePointLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_s_TimePointLiteral)
        try:
            self.state = 1334
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1332
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1333
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(s_cypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(s_cypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(s_cypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(s_cypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(s_cypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = s_cypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1336
            _la = self._input.LA(1)
            if not(_la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(s_cypherParser.AND, 0)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def OR(self):
            return self.getToken(s_cypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(s_cypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(s_cypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(s_cypherParser.DO, 0)

        def FOR(self):
            return self.getToken(s_cypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(s_cypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(s_cypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(s_cypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(s_cypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(s_cypherParser.OF, 0)

        def ADD(self):
            return self.getToken(s_cypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(s_cypherParser.DROP, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = s_cypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1338
            _la = self._input.LA(1)
            if not(((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 128317405001678847) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(s_cypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = s_cypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1340
                self.match(s_cypherParser.SP)


            self.state = 1343
            self.oC_Statement()
            self.state = 1348
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.state = 1345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1344
                    self.match(s_cypherParser.SP)


                self.state = 1347
                self.match(s_cypherParser.T__23)


            self.state = 1351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1350
                self.match(s_cypherParser.SP)


            self.state = 1353
            self.match(s_cypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = s_cypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1355
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = s_cypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1357
            self.oC_SingleQuery()
            self.state = 1364
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,220,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1359
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1358
                        self.match(s_cypherParser.SP)


                    self.state = 1361
                    self.oC_Union() 
                self.state = 1366
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,220,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = s_cypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 1379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1367
                self.match(s_cypherParser.UNION)
                self.state = 1368
                self.match(s_cypherParser.SP)
                self.state = 1369
                self.match(s_cypherParser.ALL)
                self.state = 1371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1370
                    self.match(s_cypherParser.SP)


                self.state = 1373
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1374
                self.match(s_cypherParser.UNION)
                self.state = 1376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1375
                    self.match(s_cypherParser.SP)


                self.state = 1378
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = s_cypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_SingleQuery)
        try:
            self.state = 1383
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1381
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1382
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = s_cypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 1420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 1385
                    self.oC_ReadingClause()
                    self.state = 1387
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1386
                        self.match(s_cypherParser.SP)


                    self.state = 1393
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1394
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 1395
                    self.oC_ReadingClause()
                    self.state = 1397
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1396
                        self.match(s_cypherParser.SP)


                    self.state = 1403
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1404
                self.oC_UpdatingClause()
                self.state = 1411
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,230,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1406
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1405
                            self.match(s_cypherParser.SP)


                        self.state = 1408
                        self.oC_UpdatingClause() 
                    self.state = 1413
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,230,self._ctx)

                self.state = 1418
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 1415
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1414
                        self.match(s_cypherParser.SP)


                    self.state = 1417
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def s_WithPartQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_WithPartQueryContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_WithPartQueryContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = s_cypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_MultiPartQuery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1423 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1422
                    self.s_WithPartQuery()

                else:
                    raise NoViableAltException(self)
                self.state = 1425 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,234,self._ctx)

            self.state = 1427
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(s_cypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = s_cypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_ReadingClause)
        try:
            self.state = 1432
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1429
                self.oC_Match()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1430
                self.oC_Unwind()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1431
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = s_cypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1434
            self.match(s_cypherParser.UNWIND)
            self.state = 1436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1435
                self.match(s_cypherParser.SP)


            self.state = 1438
            self.oC_Expression()
            self.state = 1439
            self.match(s_cypherParser.SP)
            self.state = 1440
            self.match(s_cypherParser.AS)
            self.state = 1441
            self.match(s_cypherParser.SP)
            self.state = 1442
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = s_cypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1444
            self.match(s_cypherParser.MERGE)
            self.state = 1446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1445
                self.match(s_cypherParser.SP)


            self.state = 1448
            self.oC_PatternPart()
            self.state = 1453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==135:
                self.state = 1449
                self.match(s_cypherParser.SP)
                self.state = 1450
                self.oC_MergeAction()
                self.state = 1455
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = s_cypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_MergeAction)
        try:
            self.state = 1466
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1456
                self.match(s_cypherParser.ON)
                self.state = 1457
                self.match(s_cypherParser.SP)
                self.state = 1458
                self.match(s_cypherParser.MATCH)
                self.state = 1459
                self.match(s_cypherParser.SP)
                self.state = 1460
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1461
                self.match(s_cypherParser.ON)
                self.state = 1462
                self.match(s_cypherParser.SP)
                self.state = 1463
                self.match(s_cypherParser.CREATE)
                self.state = 1464
                self.match(s_cypherParser.SP)
                self.state = 1465
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = s_cypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1468
            self.match(s_cypherParser.CREATE)
            self.state = 1470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1469
                self.match(s_cypherParser.SP)


            self.state = 1472
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = s_cypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1474
            self.match(s_cypherParser.SET)
            self.state = 1476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1475
                self.match(s_cypherParser.SP)


            self.state = 1478
            self.oC_SetItem()
            self.state = 1489
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,244,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1480
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1479
                        self.match(s_cypherParser.SP)


                    self.state = 1482
                    self.match(s_cypherParser.T__0)
                    self.state = 1484
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1483
                        self.match(s_cypherParser.SP)


                    self.state = 1486
                    self.oC_SetItem() 
                self.state = 1491
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,244,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = s_cypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 1492
                self.match(s_cypherParser.DETACH)
                self.state = 1493
                self.match(s_cypherParser.SP)


            self.state = 1496
            self.match(s_cypherParser.DELETE)
            self.state = 1498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1497
                self.match(s_cypherParser.SP)


            self.state = 1500
            self.oC_Expression()
            self.state = 1511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1 or _la==135:
                self.state = 1502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1501
                    self.match(s_cypherParser.SP)


                self.state = 1504
                self.match(s_cypherParser.T__0)
                self.state = 1506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1505
                    self.match(s_cypherParser.SP)


                self.state = 1508
                self.oC_Expression()
                self.state = 1513
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = s_cypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1514
            self.match(s_cypherParser.REMOVE)
            self.state = 1515
            self.match(s_cypherParser.SP)
            self.state = 1516
            self.oC_RemoveItem()
            self.state = 1527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1 or _la==135:
                self.state = 1518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1517
                    self.match(s_cypherParser.SP)


                self.state = 1520
                self.match(s_cypherParser.T__0)
                self.state = 1522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1521
                    self.match(s_cypherParser.SP)


                self.state = 1524
                self.oC_RemoveItem()
                self.state = 1529
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = s_cypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_RemoveItem)
        try:
            self.state = 1534
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1530
                self.oC_Variable()
                self.state = 1531
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1533
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = s_cypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1536
            self.oC_YieldItem()
            self.state = 1547
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,256,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1538
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1537
                        self.match(s_cypherParser.SP)


                    self.state = 1540
                    self.match(s_cypherParser.T__0)
                    self.state = 1542
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1541
                        self.match(s_cypherParser.SP)


                    self.state = 1544
                    self.oC_YieldItem() 
                self.state = 1549
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,256,self._ctx)

            self.state = 1554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82 or _la==135:
                self.state = 1551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1550
                    self.match(s_cypherParser.SP)


                self.state = 1553
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = s_cypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1556
            self.oC_ProcedureResultField()
            self.state = 1561
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.state = 1557
                self.match(s_cypherParser.SP)
                self.state = 1558
                self.match(s_cypherParser.AS)
                self.state = 1559
                self.match(s_cypherParser.SP)
                self.state = 1560
                self.oC_Variable()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = s_cypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1563
            self.match(s_cypherParser.WITH)
            self.state = 1564
            self.oC_ProjectionBody()
            self.state = 1569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82 or _la==135:
                self.state = 1566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1565
                    self.match(s_cypherParser.SP)


                self.state = 1568
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = s_cypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1571
            self.match(s_cypherParser.RETURN)
            self.state = 1572
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)




    def oC_ProjectionBody(self):

        localctx = s_cypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
            if la_ == 1:
                self.state = 1575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1574
                    self.match(s_cypherParser.SP)


                self.state = 1577
                self.match(s_cypherParser.DISTINCT)


            self.state = 1580
            self.match(s_cypherParser.SP)
            self.state = 1581
            self.oC_ProjectionItems()
            self.state = 1584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
            if la_ == 1:
                self.state = 1582
                self.match(s_cypherParser.SP)
                self.state = 1583
                self.oC_Order()


            self.state = 1588
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                self.state = 1586
                self.match(s_cypherParser.SP)
                self.state = 1587
                self.oC_Skip()


            self.state = 1592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.state = 1590
                self.match(s_cypherParser.SP)
                self.state = 1591
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)




    def oC_ProjectionItems(self):

        localctx = s_cypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 1622
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1594
                self.match(s_cypherParser.T__4)
                self.state = 1605
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,269,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1596
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1595
                            self.match(s_cypherParser.SP)


                        self.state = 1598
                        self.match(s_cypherParser.T__0)
                        self.state = 1600
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1599
                            self.match(s_cypherParser.SP)


                        self.state = 1602
                        self.oC_ProjectionItem() 
                    self.state = 1607
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,269,self._ctx)

                pass
            elif token in [6, 8, 11, 17, 18, 26, 48, 57, 86, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1608
                self.oC_ProjectionItem()
                self.state = 1619
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,272,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1610
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1609
                            self.match(s_cypherParser.SP)


                        self.state = 1612
                        self.match(s_cypherParser.T__0)
                        self.state = 1614
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1613
                            self.match(s_cypherParser.SP)


                        self.state = 1616
                        self.oC_ProjectionItem() 
                    self.state = 1621
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,272,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)




    def oC_ProjectionItem(self):

        localctx = s_cypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_ProjectionItem)
        try:
            self.state = 1631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1624
                self.oC_Expression()
                self.state = 1625
                self.match(s_cypherParser.SP)
                self.state = 1626
                self.match(s_cypherParser.AS)
                self.state = 1627
                self.match(s_cypherParser.SP)
                self.state = 1628
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1630
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = s_cypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1633
            self.match(s_cypherParser.ORDER)
            self.state = 1634
            self.match(s_cypherParser.SP)
            self.state = 1635
            self.match(s_cypherParser.BY)
            self.state = 1636
            self.match(s_cypherParser.SP)
            self.state = 1637
            self.oC_SortItem()
            self.state = 1645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 1638
                self.match(s_cypherParser.T__0)
                self.state = 1640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1639
                    self.match(s_cypherParser.SP)


                self.state = 1642
                self.oC_SortItem()
                self.state = 1647
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = s_cypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1648
            self.match(s_cypherParser.L_SKIP)
            self.state = 1649
            self.match(s_cypherParser.SP)
            self.state = 1650
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = s_cypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1652
            self.match(s_cypherParser.LIMIT)
            self.state = 1653
            self.match(s_cypherParser.SP)
            self.state = 1654
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = s_cypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1656
            self.oC_Expression()
            self.state = 1661
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.state = 1658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1657
                    self.match(s_cypherParser.SP)


                self.state = 1660
                _la = self._input.LA(1)
                if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = s_cypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1663
            self.match(s_cypherParser.WHERE)
            self.state = 1664
            self.match(s_cypherParser.SP)
            self.state = 1665
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = s_cypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1667
            self.oC_PatternPart()
            self.state = 1678
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,281,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1669
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1668
                        self.match(s_cypherParser.SP)


                    self.state = 1671
                    self.match(s_cypherParser.T__0)
                    self.state = 1673
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1672
                        self.match(s_cypherParser.SP)


                    self.state = 1675
                    self.oC_PatternPart() 
                self.state = 1680
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,281,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = s_cypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1681
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = s_cypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 1697
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1683
                self.oC_NodePattern()
                self.state = 1690
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,283,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1685
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1684
                            self.match(s_cypherParser.SP)


                        self.state = 1687
                        self.oC_PatternElementChain() 
                    self.state = 1692
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,283,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1693
                self.match(s_cypherParser.T__7)
                self.state = 1694
                self.oC_PatternElement()
                self.state = 1695
                self.match(s_cypherParser.T__8)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = s_cypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1699
            self.oC_NodePattern()
            self.state = 1704 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1701
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1700
                        self.match(s_cypherParser.SP)


                    self.state = 1703
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 1706 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,286,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = s_cypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1708
            self.oC_RelationshipPattern()
            self.state = 1710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1709
                self.match(s_cypherParser.SP)


            self.state = 1712
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = s_cypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 1778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1714
                self.oC_LeftArrowHead()
                self.state = 1716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1715
                    self.match(s_cypherParser.SP)


                self.state = 1718
                self.oC_Dash()
                self.state = 1720
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
                if la_ == 1:
                    self.state = 1719
                    self.match(s_cypherParser.SP)


                self.state = 1723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1722
                    self.oC_RelationshipDetail()


                self.state = 1726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1725
                    self.match(s_cypherParser.SP)


                self.state = 1728
                self.oC_Dash()
                self.state = 1730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1729
                    self.match(s_cypherParser.SP)


                self.state = 1732
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1734
                self.oC_LeftArrowHead()
                self.state = 1736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1735
                    self.match(s_cypherParser.SP)


                self.state = 1738
                self.oC_Dash()
                self.state = 1740
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
                if la_ == 1:
                    self.state = 1739
                    self.match(s_cypherParser.SP)


                self.state = 1743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1742
                    self.oC_RelationshipDetail()


                self.state = 1746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1745
                    self.match(s_cypherParser.SP)


                self.state = 1748
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1750
                self.oC_Dash()
                self.state = 1752
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
                if la_ == 1:
                    self.state = 1751
                    self.match(s_cypherParser.SP)


                self.state = 1755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1754
                    self.oC_RelationshipDetail()


                self.state = 1758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1757
                    self.match(s_cypherParser.SP)


                self.state = 1760
                self.oC_Dash()
                self.state = 1762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1761
                    self.match(s_cypherParser.SP)


                self.state = 1764
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1766
                self.oC_Dash()
                self.state = 1768
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
                if la_ == 1:
                    self.state = 1767
                    self.match(s_cypherParser.SP)


                self.state = 1771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1770
                    self.oC_RelationshipDetail()


                self.state = 1774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1773
                    self.match(s_cypherParser.SP)


                self.state = 1776
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = s_cypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_oC_Properties)
        try:
            self.state = 1782
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1780
                self.oC_MapLiteral()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1781
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = s_cypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1784
            self.match(s_cypherParser.T__9)
            self.state = 1786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1785
                self.match(s_cypherParser.SP)


            self.state = 1788
            self.oC_RelTypeName()
            self.state = 1802
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,310,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1790
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1789
                        self.match(s_cypherParser.SP)


                    self.state = 1792
                    self.match(s_cypherParser.T__24)
                    self.state = 1794
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==10:
                        self.state = 1793
                        self.match(s_cypherParser.T__9)


                    self.state = 1797
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1796
                        self.match(s_cypherParser.SP)


                    self.state = 1799
                    self.oC_RelTypeName() 
                self.state = 1804
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,310,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = s_cypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1805
            self.oC_NodeLabel()
            self.state = 1812
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,312,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1807
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1806
                        self.match(s_cypherParser.SP)


                    self.state = 1809
                    self.oC_NodeLabel() 
                self.state = 1814
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,312,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = s_cypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1815
            self.match(s_cypherParser.T__9)
            self.state = 1817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1816
                self.match(s_cypherParser.SP)


            self.state = 1819
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = s_cypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1821
            self.match(s_cypherParser.T__4)
            self.state = 1823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1822
                self.match(s_cypherParser.SP)


            self.state = 1829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                self.state = 1825
                self.oC_IntegerLiteral()
                self.state = 1827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1826
                    self.match(s_cypherParser.SP)




            self.state = 1841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 1831
                self.match(s_cypherParser.T__12)
                self.state = 1833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1832
                    self.match(s_cypherParser.SP)


                self.state = 1839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                    self.state = 1835
                    self.oC_IntegerLiteral()
                    self.state = 1837
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1836
                        self.match(s_cypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = s_cypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1843
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = s_cypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1845
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = s_cypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1847
            self.oC_Atom()
            self.state = 1852 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1849
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1848
                        self.match(s_cypherParser.SP)


                    self.state = 1851
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 1854 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,322,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = s_cypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1856
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = s_cypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1858
            self.oC_XorExpression()
            self.state = 1865
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,323,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1859
                    self.match(s_cypherParser.SP)
                    self.state = 1860
                    self.match(s_cypherParser.OR)
                    self.state = 1861
                    self.match(s_cypherParser.SP)
                    self.state = 1862
                    self.oC_XorExpression() 
                self.state = 1867
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,323,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = s_cypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1868
            self.oC_AndExpression()
            self.state = 1875
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,324,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1869
                    self.match(s_cypherParser.SP)
                    self.state = 1870
                    self.match(s_cypherParser.XOR)
                    self.state = 1871
                    self.match(s_cypherParser.SP)
                    self.state = 1872
                    self.oC_AndExpression() 
                self.state = 1877
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,324,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = s_cypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1878
            self.oC_NotExpression()
            self.state = 1885
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,325,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1879
                    self.match(s_cypherParser.SP)
                    self.state = 1880
                    self.match(s_cypherParser.AND)
                    self.state = 1881
                    self.match(s_cypherParser.SP)
                    self.state = 1882
                    self.oC_NotExpression() 
                self.state = 1887
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,325,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = s_cypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1888
                self.match(s_cypherParser.NOT)
                self.state = 1890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1889
                    self.match(s_cypherParser.SP)


                self.state = 1896
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1897
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_StringListNullPredicateExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,i)


        def s_ComparisonOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ComparisonOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ComparisonOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = s_cypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1899
            self.oC_StringListNullPredicateExpression()
            self.state = 1911
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,330,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1901
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1900
                        self.match(s_cypherParser.SP)


                    self.state = 1903
                    self.s_ComparisonOperator()
                    self.state = 1905
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1904
                        self.match(s_cypherParser.SP)


                    self.state = 1907
                    self.oC_StringListNullPredicateExpression() 
                self.state = 1913
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,330,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringPredicateExpression" ):
                listener.enterOC_StringPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringPredicateExpression" ):
                listener.exitOC_StringPredicateExpression(self)




    def oC_StringPredicateExpression(self):

        localctx = s_cypherParser.OC_StringPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_oC_StringPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.state = 1914
                self.match(s_cypherParser.SP)
                self.state = 1915
                self.match(s_cypherParser.STARTS)
                self.state = 1916
                self.match(s_cypherParser.SP)
                self.state = 1917
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1918
                self.match(s_cypherParser.SP)
                self.state = 1919
                self.match(s_cypherParser.ENDS)
                self.state = 1920
                self.match(s_cypherParser.SP)
                self.state = 1921
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1922
                self.match(s_cypherParser.SP)
                self.state = 1923
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 1927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1926
                self.match(s_cypherParser.SP)


            self.state = 1929
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListPredicateExpression" ):
                listener.enterOC_ListPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListPredicateExpression" ):
                listener.exitOC_ListPredicateExpression(self)




    def oC_ListPredicateExpression(self):

        localctx = s_cypherParser.OC_ListPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_oC_ListPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1931
            self.match(s_cypherParser.SP)
            self.state = 1932
            self.match(s_cypherParser.IN)
            self.state = 1934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1933
                self.match(s_cypherParser.SP)


            self.state = 1936
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullPredicateExpression" ):
                listener.enterOC_NullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullPredicateExpression" ):
                listener.exitOC_NullPredicateExpression(self)




    def oC_NullPredicateExpression(self):

        localctx = s_cypherParser.OC_NullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_oC_NullPredicateExpression)
        try:
            self.state = 1948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1938
                self.match(s_cypherParser.SP)
                self.state = 1939
                self.match(s_cypherParser.IS)
                self.state = 1940
                self.match(s_cypherParser.SP)
                self.state = 1941
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1942
                self.match(s_cypherParser.SP)
                self.state = 1943
                self.match(s_cypherParser.IS)
                self.state = 1944
                self.match(s_cypherParser.SP)
                self.state = 1945
                self.match(s_cypherParser.NOT)
                self.state = 1946
                self.match(s_cypherParser.SP)
                self.state = 1947
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def s_AddOrSubtractOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AddOrSubtractOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1950
            self.oC_MultiplyDivideModuloExpression()
            self.state = 1971
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,340,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1969
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
                    if la_ == 1:
                        self.state = 1952
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1951
                            self.match(s_cypherParser.SP)


                        self.state = 1954
                        self.s_AddOrSubtractOperator()
                        self.state = 1956
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1955
                            self.match(s_cypherParser.SP)


                        self.state = 1958
                        self.oC_MultiplyDivideModuloExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1961
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1960
                            self.match(s_cypherParser.SP)


                        self.state = 1963
                        self.s_AddOrSubtractOperator()
                        self.state = 1965
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1964
                            self.match(s_cypherParser.SP)


                        self.state = 1967
                        self.oC_MultiplyDivideModuloExpression()
                        pass

             
                self.state = 1973
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,340,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MultiplyDivideModuloOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MultiplyDivideModuloOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MultiplyDivideModuloOperator" ):
                listener.enterS_MultiplyDivideModuloOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MultiplyDivideModuloOperator" ):
                listener.exitS_MultiplyDivideModuloOperator(self)




    def s_MultiplyDivideModuloOperator(self):

        localctx = s_cypherParser.S_MultiplyDivideModuloOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_s_MultiplyDivideModuloOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1974
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 49184) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PowerOfOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PowerOfOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PowerOfOperator" ):
                listener.enterS_PowerOfOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PowerOfOperator" ):
                listener.exitS_PowerOfOperator(self)




    def s_PowerOfOperator(self):

        localctx = s_cypherParser.S_PowerOfOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_s_PowerOfOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1976
            self.match(s_cypherParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AddOrSubtractOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AddOrSubtractOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AddOrSubtractOperator" ):
                listener.enterS_AddOrSubtractOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AddOrSubtractOperator" ):
                listener.exitS_AddOrSubtractOperator(self)




    def s_AddOrSubtractOperator(self):

        localctx = s_cypherParser.S_AddOrSubtractOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_s_AddOrSubtractOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1978
            _la = self._input.LA(1)
            if not(_la==17 or _la==18):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ComparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ComparisonOperator" ):
                listener.enterS_ComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ComparisonOperator" ):
                listener.exitS_ComparisonOperator(self)




    def s_ComparisonOperator(self):

        localctx = s_cypherParser.S_ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_s_ComparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1980
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 16252936) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PowerOfExpressionContext,i)


        def s_MultiplyDivideModuloOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MultiplyDivideModuloOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MultiplyDivideModuloOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = s_cypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1982
            self.oC_PowerOfExpression()
            self.state = 2012
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,348,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2010
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,347,self._ctx)
                    if la_ == 1:
                        self.state = 1984
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1983
                            self.match(s_cypherParser.SP)


                        self.state = 1986
                        self.s_MultiplyDivideModuloOperator()
                        self.state = 1988
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1987
                            self.match(s_cypherParser.SP)


                        self.state = 1990
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1993
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1992
                            self.match(s_cypherParser.SP)


                        self.state = 1995
                        self.s_MultiplyDivideModuloOperator()
                        self.state = 1997
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1996
                            self.match(s_cypherParser.SP)


                        self.state = 1999
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 3:
                        self.state = 2002
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 2001
                            self.match(s_cypherParser.SP)


                        self.state = 2004
                        self.s_MultiplyDivideModuloOperator()
                        self.state = 2006
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 2005
                            self.match(s_cypherParser.SP)


                        self.state = 2008
                        self.oC_PowerOfExpression()
                        pass

             
                self.state = 2014
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,348,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def s_PowerOfOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PowerOfOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PowerOfOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = s_cypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2015
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 2027
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,351,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2017
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2016
                        self.match(s_cypherParser.SP)


                    self.state = 2019
                    self.s_PowerOfOperator()
                    self.state = 2021
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2020
                        self.match(s_cypherParser.SP)


                    self.state = 2023
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 2029
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,351,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ListOperatorExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListOperatorExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.state = 2036
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 8, 11, 26, 48, 57, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2030
                self.oC_ListOperatorExpression()
                pass
            elif token in [17, 18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2031
                _la = self._input.LA(1)
                if not(_la==17 or _la==18):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2033
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2032
                    self.match(s_cypherParser.SP)


                self.state = 2035
                self.oC_ListOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyOrLabelsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyOrLabelsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyOrLabelsExpression" ):
                listener.enterOC_PropertyOrLabelsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyOrLabelsExpression" ):
                listener.exitOC_PropertyOrLabelsExpression(self)




    def oC_PropertyOrLabelsExpression(self):

        localctx = s_cypherParser.OC_PropertyOrLabelsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_oC_PropertyOrLabelsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2038
            self.oC_Atom()
            self.state = 2045
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,355,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2040
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2039
                        self.match(s_cypherParser.SP)


                    self.state = 2042
                    self.oC_PropertyLookup() 
                self.state = 2047
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,355,self._ctx)

            self.state = 2052
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
            if la_ == 1:
                self.state = 2049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2048
                    self.match(s_cypherParser.SP)


                self.state = 2051
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = s_cypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2054
            self.match(s_cypherParser.T__1)
            self.state = 2056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2055
                self.match(s_cypherParser.SP)


            self.state = 2058
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternComprehensionContext,0)


        def oC_Quantifier(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QuantifierContext,0)


        def oC_PatternPredicate(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPredicateContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionInvocationContext,0)


        def oC_ExistentialSubquery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExistentialSubqueryContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = s_cypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 2084
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,362,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2060
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2061
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2062
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2063
                self.match(s_cypherParser.COUNT)
                self.state = 2065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2064
                    self.match(s_cypherParser.SP)


                self.state = 2067
                self.match(s_cypherParser.T__7)
                self.state = 2069
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2068
                    self.match(s_cypherParser.SP)


                self.state = 2071
                self.match(s_cypherParser.T__4)
                self.state = 2073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2072
                    self.match(s_cypherParser.SP)


                self.state = 2075
                self.match(s_cypherParser.T__8)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2076
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2077
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2078
                self.oC_Quantifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2079
                self.oC_PatternPredicate()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2080
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2081
                self.oC_FunctionInvocation()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2082
                self.oC_ExistentialSubquery()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2083
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def oC_CaseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_CaseAlternativeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = s_cypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2108
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
            if la_ == 1:
                self.state = 2086
                self.match(s_cypherParser.CASE)
                self.state = 2091 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2088
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 2087
                            self.match(s_cypherParser.SP)


                        self.state = 2090
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2093 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,364,self._ctx)

                pass

            elif la_ == 2:
                self.state = 2095
                self.match(s_cypherParser.CASE)
                self.state = 2097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2096
                    self.match(s_cypherParser.SP)


                self.state = 2099
                self.oC_Expression()
                self.state = 2104 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2101
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 2100
                            self.match(s_cypherParser.SP)


                        self.state = 2103
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2106 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,367,self._ctx)

                pass


            self.state = 2118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
            if la_ == 1:
                self.state = 2111
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2110
                    self.match(s_cypherParser.SP)


                self.state = 2113
                self.match(s_cypherParser.ELSE)
                self.state = 2115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2114
                    self.match(s_cypherParser.SP)


                self.state = 2117
                self.oC_Expression()


            self.state = 2121
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2120
                self.match(s_cypherParser.SP)


            self.state = 2123
            self.match(s_cypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternative" ):
                listener.enterOC_CaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternative" ):
                listener.exitOC_CaseAlternative(self)




    def oC_CaseAlternative(self):

        localctx = s_cypherParser.OC_CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_oC_CaseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2125
            self.match(s_cypherParser.WHEN)
            self.state = 2127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2126
                self.match(s_cypherParser.SP)


            self.state = 2129
            self.oC_Expression()
            self.state = 2131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2130
                self.match(s_cypherParser.SP)


            self.state = 2133
            self.match(s_cypherParser.THEN)
            self.state = 2135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2134
                self.match(s_cypherParser.SP)


            self.state = 2137
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = s_cypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2139
            self.match(s_cypherParser.T__10)
            self.state = 2141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2140
                self.match(s_cypherParser.SP)


            self.state = 2143
            self.oC_FilterExpression()
            self.state = 2152
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,379,self._ctx)
            if la_ == 1:
                self.state = 2145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2144
                    self.match(s_cypherParser.SP)


                self.state = 2147
                self.match(s_cypherParser.T__24)
                self.state = 2149
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2148
                    self.match(s_cypherParser.SP)


                self.state = 2151
                self.oC_Expression()


            self.state = 2155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2154
                self.match(s_cypherParser.SP)


            self.state = 2157
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = s_cypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2159
            self.match(s_cypherParser.T__10)
            self.state = 2161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2160
                self.match(s_cypherParser.SP)


            self.state = 2171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 2163
                self.oC_Variable()
                self.state = 2165
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2164
                    self.match(s_cypherParser.SP)


                self.state = 2167
                self.match(s_cypherParser.T__2)
                self.state = 2169
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2168
                    self.match(s_cypherParser.SP)




            self.state = 2173
            self.oC_RelationshipsPattern()
            self.state = 2175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2174
                self.match(s_cypherParser.SP)


            self.state = 2181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 2177
                self.oC_Where()
                self.state = 2179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2178
                    self.match(s_cypherParser.SP)




            self.state = 2183
            self.match(s_cypherParser.T__24)
            self.state = 2185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2184
                self.match(s_cypherParser.SP)


            self.state = 2187
            self.oC_Expression()
            self.state = 2189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2188
                self.match(s_cypherParser.SP)


            self.state = 2191
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Quantifier" ):
                listener.enterOC_Quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Quantifier" ):
                listener.exitOC_Quantifier(self)




    def oC_Quantifier(self):

        localctx = s_cypherParser.OC_QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_oC_Quantifier)
        self._la = 0 # Token type
        try:
            self.state = 2249
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2193
                self.match(s_cypherParser.ALL)
                self.state = 2195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2194
                    self.match(s_cypherParser.SP)


                self.state = 2197
                self.match(s_cypherParser.T__7)
                self.state = 2199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2198
                    self.match(s_cypherParser.SP)


                self.state = 2201
                self.oC_FilterExpression()
                self.state = 2203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2202
                    self.match(s_cypherParser.SP)


                self.state = 2205
                self.match(s_cypherParser.T__8)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2207
                self.match(s_cypherParser.ANY)
                self.state = 2209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2208
                    self.match(s_cypherParser.SP)


                self.state = 2211
                self.match(s_cypherParser.T__7)
                self.state = 2213
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2212
                    self.match(s_cypherParser.SP)


                self.state = 2215
                self.oC_FilterExpression()
                self.state = 2217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2216
                    self.match(s_cypherParser.SP)


                self.state = 2219
                self.match(s_cypherParser.T__8)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2221
                self.match(s_cypherParser.NONE)
                self.state = 2223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2222
                    self.match(s_cypherParser.SP)


                self.state = 2225
                self.match(s_cypherParser.T__7)
                self.state = 2227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2226
                    self.match(s_cypherParser.SP)


                self.state = 2229
                self.oC_FilterExpression()
                self.state = 2231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2230
                    self.match(s_cypherParser.SP)


                self.state = 2233
                self.match(s_cypherParser.T__8)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2235
                self.match(s_cypherParser.SINGLE)
                self.state = 2237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2236
                    self.match(s_cypherParser.SP)


                self.state = 2239
                self.match(s_cypherParser.T__7)
                self.state = 2241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2240
                    self.match(s_cypherParser.SP)


                self.state = 2243
                self.oC_FilterExpression()
                self.state = 2245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2244
                    self.match(s_cypherParser.SP)


                self.state = 2247
                self.match(s_cypherParser.T__8)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPredicate" ):
                listener.enterOC_PatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPredicate" ):
                listener.exitOC_PatternPredicate(self)




    def oC_PatternPredicate(self):

        localctx = s_cypherParser.OC_PatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_oC_PatternPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2251
            self.oC_RelationshipsPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = s_cypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2253
            self.match(s_cypherParser.T__7)
            self.state = 2255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2254
                self.match(s_cypherParser.SP)


            self.state = 2257
            self.oC_Expression()
            self.state = 2259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2258
                self.match(s_cypherParser.SP)


            self.state = 2261
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = s_cypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2263
            self.oC_Variable()
            self.state = 2264
            self.match(s_cypherParser.SP)
            self.state = 2265
            self.match(s_cypherParser.IN)
            self.state = 2266
            self.match(s_cypherParser.SP)
            self.state = 2267
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def s_FunctionInvocationExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_FunctionInvocationExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_FunctionInvocationExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = s_cypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2269
            self.oC_FunctionName()
            self.state = 2271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2270
                self.match(s_cypherParser.SP)


            self.state = 2273
            self.match(s_cypherParser.T__7)
            self.state = 2275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2274
                self.match(s_cypherParser.SP)


            self.state = 2281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 2277
                self.match(s_cypherParser.DISTINCT)
                self.state = 2279
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2278
                    self.match(s_cypherParser.SP)




            self.state = 2300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070976) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 2283
                self.s_FunctionInvocationExpression()
                self.state = 2285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2284
                    self.match(s_cypherParser.SP)


                self.state = 2297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 2287
                    self.match(s_cypherParser.T__0)
                    self.state = 2289
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2288
                        self.match(s_cypherParser.SP)


                    self.state = 2291
                    self.s_FunctionInvocationExpression()
                    self.state = 2293
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2292
                        self.match(s_cypherParser.SP)


                    self.state = 2299
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2302
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_FunctionInvocationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_FunctionInvocationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_FunctionInvocationExpression" ):
                listener.enterS_FunctionInvocationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_FunctionInvocationExpression" ):
                listener.exitS_FunctionInvocationExpression(self)




    def s_FunctionInvocationExpression(self):

        localctx = s_cypherParser.S_FunctionInvocationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_s_FunctionInvocationExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2304
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = s_cypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_oC_FunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2306
            self.oC_Namespace()
            self.state = 2307
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2309
            self.oC_ProcedureName()
            self.state = 2311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2310
                self.match(s_cypherParser.SP)


            self.state = 2313
            self.match(s_cypherParser.T__7)
            self.state = 2315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2314
                self.match(s_cypherParser.SP)


            self.state = 2334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070976) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 2317
                self.oC_Expression()
                self.state = 2319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2318
                    self.match(s_cypherParser.SP)


                self.state = 2331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 2321
                    self.match(s_cypherParser.T__0)
                    self.state = 2323
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2322
                        self.match(s_cypherParser.SP)


                    self.state = 2325
                    self.oC_Expression()
                    self.state = 2327
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2326
                        self.match(s_cypherParser.SP)


                    self.state = 2333
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2336
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2338
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = s_cypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2340
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = s_cypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2342
            self.oC_Namespace()
            self.state = 2343
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = s_cypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2350
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,421,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2345
                    self.oC_SymbolicName()
                    self.state = 2346
                    self.match(s_cypherParser.T__1) 
                self.state = 2352
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,421,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = s_cypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2353
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_ListLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListLiteralContext,0)


        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = s_cypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_oC_Literal)
        try:
            self.state = 2361
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2355
                self.oC_BooleanLiteral()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2356
                self.match(s_cypherParser.NULL)
                pass
            elif token in [105, 106, 107, 115, 116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2357
                self.oC_NumberLiteral()
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2358
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2359
                self.oC_ListLiteral()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2360
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = s_cypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2363
            _la = self._input.LA(1)
            if not(_la==103 or _la==104):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = s_cypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_oC_NumberLiteral)
        try:
            self.state = 2367
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115, 116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2365
                self.oC_DoubleLiteral()
                pass
            elif token in [105, 106, 107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2366
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(s_cypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(s_cypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = s_cypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2369
            _la = self._input.LA(1)
            if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(s_cypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(s_cypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = s_cypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2371
            _la = self._input.LA(1)
            if not(_la==115 or _la==116):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_ListLiteralExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ListLiteralExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ListLiteralExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = s_cypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2373
            self.match(s_cypherParser.T__10)
            self.state = 2375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2374
                self.match(s_cypherParser.SP)


            self.state = 2394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070976) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 2377
                self.s_ListLiteralExpression()
                self.state = 2379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2378
                    self.match(s_cypherParser.SP)


                self.state = 2391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 2381
                    self.match(s_cypherParser.T__0)
                    self.state = 2383
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2382
                        self.match(s_cypherParser.SP)


                    self.state = 2385
                    self.s_ListLiteralExpression()
                    self.state = 2387
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2386
                        self.match(s_cypherParser.SP)


                    self.state = 2393
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2396
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ListLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ListLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ListLiteralExpression" ):
                listener.enterS_ListLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ListLiteralExpression" ):
                listener.exitS_ListLiteralExpression(self)




    def s_ListLiteralExpression(self):

        localctx = s_cypherParser.S_ListLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_s_ListLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2398
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_MapKeyValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MapKeyValueContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MapKeyValueContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = s_cypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2400
            self.match(s_cypherParser.T__5)
            self.state = 2402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2401
                self.match(s_cypherParser.SP)


            self.state = 2415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 2404
                self.s_MapKeyValue()
                self.state = 2412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 2405
                    self.match(s_cypherParser.T__0)
                    self.state = 2407
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2406
                        self.match(s_cypherParser.SP)


                    self.state = 2409
                    self.s_MapKeyValue()
                    self.state = 2414
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2417
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MapKeyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MapKeyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MapKeyValue" ):
                listener.enterS_MapKeyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MapKeyValue" ):
                listener.exitS_MapKeyValue(self)




    def s_MapKeyValue(self):

        localctx = s_cypherParser.S_MapKeyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_s_MapKeyValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2419
            self.oC_PropertyKeyName()
            self.state = 2421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2420
                self.match(s_cypherParser.SP)


            self.state = 2423
            self.match(s_cypherParser.T__9)
            self.state = 2425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2424
                self.match(s_cypherParser.SP)


            self.state = 2427
            self.oC_Expression()
            self.state = 2429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2428
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = s_cypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2431
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = s_cypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2433
            self.match(s_cypherParser.T__25)
            self.state = 2436
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 2434
                self.oC_SymbolicName()
                pass
            elif token in [106]:
                self.state = 2435
                self.match(s_cypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = s_cypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_oC_SchemaName)
        try:
            self.state = 2440
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,438,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2438
                self.oC_SymbolicName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2439
                self.oC_ReservedWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = s_cypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2442
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2014314496) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = s_cypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2444
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32216449024) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = s_cypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2446
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70334384701440) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





