# Generated from s_cypher.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,137,2433,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        1,0,1,0,1,0,3,0,344,8,0,1,1,1,1,3,1,348,8,1,1,1,1,1,3,1,352,8,1,
        1,1,1,1,3,1,356,8,1,1,1,1,1,3,1,360,8,1,3,1,362,8,1,1,1,3,1,365,
        8,1,1,1,3,1,368,8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,376,8,2,1,3,1,3,
        3,3,380,8,3,1,3,1,3,3,3,384,8,3,1,3,3,3,387,8,3,1,4,1,4,3,4,391,
        8,4,1,4,1,4,1,4,5,4,396,8,4,10,4,12,4,399,9,4,1,4,3,4,402,8,4,1,
        4,3,4,405,8,4,1,5,1,5,3,5,409,8,5,1,5,1,5,3,5,413,8,5,1,5,1,5,3,
        5,417,8,5,1,5,5,5,420,8,5,10,5,12,5,423,9,5,1,5,3,5,426,8,5,1,5,
        3,5,429,8,5,1,6,1,6,3,6,433,8,6,1,6,1,6,3,6,437,8,6,1,6,1,6,3,6,
        441,8,6,1,6,5,6,444,8,6,10,6,12,6,447,9,6,1,6,3,6,450,8,6,1,6,3,
        6,453,8,6,1,7,1,7,3,7,457,8,7,1,7,1,7,3,7,461,8,7,1,7,1,7,3,7,465,
        8,7,1,7,1,7,3,7,469,8,7,1,7,3,7,472,8,7,1,7,3,7,475,8,7,1,7,3,7,
        478,8,7,1,7,1,7,3,7,482,8,7,1,7,1,7,1,7,1,7,3,7,488,8,7,1,7,1,7,
        3,7,492,8,7,1,7,1,7,1,7,1,7,3,7,498,8,7,1,7,1,7,3,7,502,8,7,1,7,
        1,7,1,7,1,7,3,7,508,8,7,1,7,1,7,1,7,1,7,3,7,514,8,7,1,7,1,7,1,7,
        1,7,3,7,520,8,7,1,7,3,7,523,8,7,1,7,1,7,1,7,1,7,1,7,3,7,530,8,7,
        1,7,3,7,533,8,7,1,7,1,7,1,7,3,7,538,8,7,1,7,1,7,3,7,542,8,7,1,8,
        1,8,3,8,546,8,8,1,8,1,8,1,9,1,9,3,9,552,8,9,1,9,3,9,555,8,9,1,10,
        1,10,3,10,559,8,10,1,10,1,10,1,11,1,11,3,11,565,8,11,1,11,1,11,3,
        11,569,8,11,1,11,1,11,3,11,573,8,11,1,12,1,12,3,12,577,8,12,1,12,
        1,12,3,12,581,8,12,1,12,1,12,3,12,585,8,12,1,12,1,12,3,12,589,8,
        12,1,12,5,12,592,8,12,10,12,12,12,595,9,12,1,12,3,12,598,8,12,1,
        12,1,12,3,12,602,8,12,3,12,604,8,12,1,13,1,13,3,13,608,8,13,1,13,
        1,13,3,13,612,8,13,1,13,1,13,3,13,616,8,13,3,13,618,8,13,3,13,620,
        8,13,1,14,1,14,1,14,1,14,3,14,626,8,14,1,15,1,15,3,15,630,8,15,1,
        15,1,15,1,16,1,16,3,16,636,8,16,1,16,1,16,1,17,1,17,3,17,642,8,17,
        1,18,1,18,1,18,1,18,3,18,648,8,18,1,18,1,18,1,18,3,18,653,8,18,1,
        19,1,19,1,19,1,19,3,19,659,8,19,1,19,3,19,662,8,19,1,19,1,19,1,19,
        1,19,3,19,668,8,19,3,19,670,8,19,1,20,1,20,3,20,674,8,20,1,20,1,
        20,3,20,678,8,20,1,20,5,20,681,8,20,10,20,12,20,684,9,20,1,20,3,
        20,687,8,20,1,20,3,20,690,8,20,1,21,1,21,1,21,1,21,1,21,3,21,697,
        8,21,1,22,1,22,3,22,701,8,22,5,22,703,8,22,10,22,12,22,706,9,22,
        1,22,1,22,3,22,710,8,22,5,22,712,8,22,10,22,12,22,715,9,22,1,22,
        1,22,3,22,719,8,22,1,23,1,23,1,23,3,23,724,8,23,1,23,3,23,727,8,
        23,1,24,1,24,3,24,731,8,24,1,24,1,24,3,24,735,8,24,1,24,1,24,1,24,
        3,24,740,8,24,1,24,3,24,743,8,24,3,24,745,8,24,1,24,3,24,748,8,24,
        1,24,1,24,1,25,1,25,3,25,754,8,25,1,25,3,25,757,8,25,1,26,1,26,3,
        26,761,8,26,1,26,1,26,1,27,1,27,3,27,767,8,27,1,27,1,27,1,28,1,28,
        3,28,773,8,28,1,28,1,28,3,28,777,8,28,1,28,1,28,1,28,1,28,3,28,783,
        8,28,1,28,1,28,3,28,787,8,28,1,28,1,28,1,28,3,28,792,8,28,1,29,1,
        29,3,29,796,8,29,1,29,1,29,3,29,800,8,29,1,29,1,29,3,29,804,8,29,
        1,29,1,29,1,30,1,30,3,30,810,8,30,1,30,1,30,3,30,814,8,30,1,30,1,
        30,1,31,1,31,3,31,820,8,31,1,31,1,31,3,31,824,8,31,3,31,826,8,31,
        1,31,1,31,3,31,830,8,31,3,31,832,8,31,1,31,1,31,3,31,836,8,31,3,
        31,838,8,31,1,31,1,31,3,31,842,8,31,3,31,844,8,31,1,31,1,31,1,32,
        1,32,3,32,850,8,32,1,33,1,33,3,33,854,8,33,1,33,1,33,1,33,1,33,1,
        33,3,33,861,8,33,1,33,1,33,1,33,1,33,5,33,867,8,33,10,33,12,33,870,
        9,33,3,33,872,8,33,1,33,1,33,1,34,1,34,3,34,878,8,34,1,34,1,34,3,
        34,882,8,34,3,34,884,8,34,1,35,3,35,887,8,35,1,35,1,35,3,35,891,
        8,35,1,35,1,35,3,35,895,8,35,3,35,897,8,35,1,36,1,36,3,36,901,8,
        36,1,36,1,36,3,36,905,8,36,3,36,907,8,36,1,36,1,36,3,36,911,8,36,
        3,36,913,8,36,1,36,3,36,916,8,36,1,36,1,36,3,36,920,8,36,3,36,922,
        8,36,1,36,1,36,3,36,926,8,36,3,36,928,8,36,1,36,1,36,1,37,1,37,1,
        37,1,37,1,37,3,37,937,8,37,1,38,1,38,3,38,941,8,38,1,38,1,38,5,38,
        945,8,38,10,38,12,38,948,9,38,1,39,3,39,951,8,39,1,39,1,39,1,39,
        1,39,1,40,3,40,958,8,40,1,40,1,40,3,40,962,8,40,1,40,1,40,3,40,966,
        8,40,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,3,43,976,8,43,1,43,
        5,43,979,8,43,10,43,12,43,982,9,43,1,43,3,43,985,8,43,1,43,1,43,
        3,43,989,8,43,1,44,1,44,3,44,993,8,44,1,44,5,44,996,8,44,10,44,12,
        44,999,9,44,1,44,3,44,1002,8,44,1,44,1,44,3,44,1006,8,44,1,44,1,
        44,3,44,1010,8,44,3,44,1012,8,44,1,44,3,44,1015,8,44,1,44,1,44,1,
        45,1,45,3,45,1021,8,45,1,45,5,45,1024,8,45,10,45,12,45,1027,9,45,
        1,46,1,46,1,46,1,46,1,46,1,47,1,47,3,47,1036,8,47,1,47,1,47,3,47,
        1040,8,47,1,47,1,47,3,47,1044,8,47,1,47,1,47,3,47,1048,8,47,1,47,
        3,47,1051,8,47,1,47,1,47,3,47,1055,8,47,1,47,3,47,1058,8,47,1,47,
        1,47,1,48,1,48,1,48,1,48,1,49,1,49,1,50,1,50,1,50,1,50,1,50,5,50,
        1073,8,50,10,50,12,50,1076,9,50,1,51,1,51,1,51,1,51,1,51,5,51,1083,
        8,51,10,51,12,51,1086,9,51,1,52,1,52,1,52,1,52,1,52,5,52,1093,8,
        52,10,52,12,52,1096,9,52,1,53,1,53,3,53,1100,8,53,5,53,1102,8,53,
        10,53,12,53,1105,9,53,1,53,1,53,1,54,1,54,3,54,1111,8,54,1,54,1,
        54,3,54,1115,8,54,1,54,1,54,5,54,1119,8,54,10,54,12,54,1122,9,54,
        1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,59,1,59,1,59,
        3,59,1137,8,59,1,60,1,60,3,60,1141,8,60,1,60,1,60,3,60,1145,8,60,
        1,60,1,60,1,60,3,60,1150,8,60,1,60,1,60,3,60,1154,8,60,1,60,1,60,
        5,60,1158,8,60,10,60,12,60,1161,9,60,1,61,1,61,1,61,1,61,1,61,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1178,8,62,1,
        62,3,62,1181,8,62,1,62,1,62,1,63,1,63,1,63,3,63,1188,8,63,1,63,1,
        63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,1202,8,
        64,1,65,1,65,3,65,1206,8,65,1,65,1,65,3,65,1210,8,65,1,65,1,65,1,
        65,3,65,1215,8,65,1,65,1,65,3,65,1219,8,65,1,65,1,65,1,65,3,65,1224,
        8,65,1,65,1,65,3,65,1228,8,65,1,65,1,65,5,65,1232,8,65,10,65,12,
        65,1235,9,65,1,66,1,66,3,66,1239,8,66,1,66,1,66,3,66,1243,8,66,1,
        66,1,66,5,66,1247,8,66,10,66,12,66,1250,9,66,1,67,1,67,1,67,3,67,
        1255,8,67,1,67,3,67,1258,8,67,1,68,1,68,3,68,1262,8,68,1,68,1,68,
        5,68,1266,8,68,10,68,12,68,1269,9,68,1,69,1,69,3,69,1273,8,69,1,
        69,5,69,1276,8,69,10,69,12,69,1279,9,69,1,69,3,69,1282,8,69,1,69,
        3,69,1285,8,69,1,70,1,70,3,70,1289,8,70,1,70,5,70,1292,8,70,10,70,
        12,70,1295,9,70,1,70,3,70,1298,8,70,1,70,1,70,3,70,1302,8,70,1,70,
        1,70,3,70,1306,8,70,3,70,1308,8,70,1,70,3,70,1311,8,70,1,70,1,70,
        1,71,3,71,1316,8,71,1,71,1,71,1,71,1,71,1,72,3,72,1323,8,72,1,72,
        1,72,3,72,1327,8,72,1,72,1,72,3,72,1331,8,72,1,72,1,72,1,73,1,73,
        1,74,1,74,1,75,1,75,3,75,1341,8,75,1,76,1,76,1,77,1,77,1,78,3,78,
        1348,8,78,1,78,1,78,3,78,1352,8,78,1,78,3,78,1355,8,78,1,78,3,78,
        1358,8,78,1,78,1,78,1,79,1,79,1,80,1,80,3,80,1366,8,80,1,80,5,80,
        1369,8,80,10,80,12,80,1372,9,80,1,81,1,81,1,81,1,81,3,81,1378,8,
        81,1,81,1,81,1,81,3,81,1383,8,81,1,81,3,81,1386,8,81,1,82,1,82,3,
        82,1390,8,82,1,83,1,83,3,83,1394,8,83,5,83,1396,8,83,10,83,12,83,
        1399,9,83,1,83,1,83,1,83,3,83,1404,8,83,5,83,1406,8,83,10,83,12,
        83,1409,9,83,1,83,1,83,3,83,1413,8,83,1,83,5,83,1416,8,83,10,83,
        12,83,1419,9,83,1,83,3,83,1422,8,83,1,83,3,83,1425,8,83,3,83,1427,
        8,83,1,84,4,84,1430,8,84,11,84,12,84,1431,1,84,1,84,1,85,1,85,1,
        85,3,85,1439,8,85,1,86,1,86,3,86,1443,8,86,1,86,1,86,1,86,1,86,1,
        86,1,86,1,87,1,87,3,87,1453,8,87,1,87,1,87,1,87,5,87,1458,8,87,10,
        87,12,87,1461,9,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
        1,88,3,88,1473,8,88,1,89,1,89,3,89,1477,8,89,1,89,1,89,1,90,1,90,
        3,90,1483,8,90,1,90,1,90,3,90,1487,8,90,1,90,1,90,3,90,1491,8,90,
        1,90,5,90,1494,8,90,10,90,12,90,1497,9,90,1,91,1,91,3,91,1501,8,
        91,1,91,1,91,3,91,1505,8,91,1,91,1,91,3,91,1509,8,91,1,91,1,91,3,
        91,1513,8,91,1,91,5,91,1516,8,91,10,91,12,91,1519,9,91,1,92,1,92,
        1,92,1,92,3,92,1525,8,92,1,92,1,92,3,92,1529,8,92,1,92,5,92,1532,
        8,92,10,92,12,92,1535,9,92,1,93,1,93,3,93,1539,8,93,1,93,1,93,3,
        93,1543,8,93,1,93,5,93,1546,8,93,10,93,12,93,1549,9,93,1,93,3,93,
        1552,8,93,1,93,3,93,1555,8,93,1,94,1,94,1,94,1,94,1,94,3,94,1562,
        8,94,1,95,1,95,1,95,3,95,1567,8,95,1,95,3,95,1570,8,95,1,96,1,96,
        1,96,1,97,3,97,1576,8,97,1,97,3,97,1579,8,97,1,97,1,97,1,97,1,97,
        3,97,1585,8,97,1,97,1,97,3,97,1589,8,97,1,97,1,97,3,97,1593,8,97,
        1,98,1,98,3,98,1597,8,98,1,98,1,98,3,98,1601,8,98,1,98,5,98,1604,
        8,98,10,98,12,98,1607,9,98,1,98,1,98,3,98,1611,8,98,1,98,1,98,3,
        98,1615,8,98,1,98,5,98,1618,8,98,10,98,12,98,1621,9,98,3,98,1623,
        8,98,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1632,8,99,1,100,1,100,
        1,100,1,100,1,100,1,100,1,100,3,100,1641,8,100,1,100,5,100,1644,
        8,100,10,100,12,100,1647,9,100,1,101,1,101,1,101,1,101,1,102,1,102,
        1,102,1,102,1,103,1,103,3,103,1659,8,103,1,103,3,103,1662,8,103,
        1,104,1,104,1,104,1,104,1,105,1,105,3,105,1670,8,105,1,105,1,105,
        3,105,1674,8,105,1,105,5,105,1677,8,105,10,105,12,105,1680,9,105,
        1,106,1,106,1,107,1,107,3,107,1686,8,107,1,107,5,107,1689,8,107,
        10,107,12,107,1692,9,107,1,107,1,107,1,107,1,107,3,107,1698,8,107,
        1,108,1,108,3,108,1702,8,108,1,108,4,108,1705,8,108,11,108,12,108,
        1706,1,109,1,109,3,109,1711,8,109,1,109,1,109,1,110,1,110,3,110,
        1717,8,110,1,110,1,110,3,110,1721,8,110,1,110,3,110,1724,8,110,1,
        110,3,110,1727,8,110,1,110,1,110,3,110,1731,8,110,1,110,1,110,1,
        110,1,110,3,110,1737,8,110,1,110,1,110,3,110,1741,8,110,1,110,3,
        110,1744,8,110,1,110,3,110,1747,8,110,1,110,1,110,1,110,1,110,3,
        110,1753,8,110,1,110,3,110,1756,8,110,1,110,3,110,1759,8,110,1,110,
        1,110,3,110,1763,8,110,1,110,1,110,1,110,1,110,3,110,1769,8,110,
        1,110,3,110,1772,8,110,1,110,3,110,1775,8,110,1,110,1,110,3,110,
        1779,8,110,1,111,1,111,3,111,1783,8,111,1,112,1,112,3,112,1787,8,
        112,1,112,1,112,3,112,1791,8,112,1,112,1,112,3,112,1795,8,112,1,
        112,3,112,1798,8,112,1,112,5,112,1801,8,112,10,112,12,112,1804,9,
        112,1,113,1,113,3,113,1808,8,113,1,113,5,113,1811,8,113,10,113,12,
        113,1814,9,113,1,114,1,114,3,114,1818,8,114,1,114,1,114,1,115,1,
        115,3,115,1824,8,115,1,115,1,115,3,115,1828,8,115,3,115,1830,8,115,
        1,115,1,115,3,115,1834,8,115,1,115,1,115,3,115,1838,8,115,3,115,
        1840,8,115,3,115,1842,8,115,1,116,1,116,1,117,1,117,1,118,1,118,
        3,118,1850,8,118,1,118,4,118,1853,8,118,11,118,12,118,1854,1,119,
        1,119,1,120,1,120,1,120,1,120,1,120,5,120,1864,8,120,10,120,12,120,
        1867,9,120,1,121,1,121,1,121,1,121,1,121,5,121,1874,8,121,10,121,
        12,121,1877,9,121,1,122,1,122,1,122,1,122,1,122,5,122,1884,8,122,
        10,122,12,122,1887,9,122,1,123,1,123,3,123,1891,8,123,5,123,1893,
        8,123,10,123,12,123,1896,9,123,1,123,1,123,1,124,1,124,3,124,1902,
        8,124,1,124,1,124,3,124,1906,8,124,1,124,1,124,5,124,1910,8,124,
        10,124,12,124,1913,9,124,1,125,1,125,1,125,1,125,1,125,1,125,1,125,
        1,125,1,125,1,125,3,125,1925,8,125,1,125,3,125,1928,8,125,1,125,
        1,125,1,126,1,126,1,126,3,126,1935,8,126,1,126,1,126,1,127,1,127,
        1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,1949,8,127,
        1,128,1,128,3,128,1953,8,128,1,128,1,128,3,128,1957,8,128,1,128,
        1,128,1,128,3,128,1962,8,128,1,128,1,128,3,128,1966,8,128,1,128,
        1,128,5,128,1970,8,128,10,128,12,128,1973,9,128,1,129,1,129,1,130,
        1,130,1,131,1,131,1,132,1,132,1,133,1,133,3,133,1985,8,133,1,133,
        1,133,3,133,1989,8,133,1,133,1,133,1,133,3,133,1994,8,133,1,133,
        1,133,3,133,1998,8,133,1,133,1,133,1,133,3,133,2003,8,133,1,133,
        1,133,3,133,2007,8,133,1,133,1,133,5,133,2011,8,133,10,133,12,133,
        2014,9,133,1,134,1,134,3,134,2018,8,134,1,134,1,134,3,134,2022,8,
        134,1,134,1,134,5,134,2026,8,134,10,134,12,134,2029,9,134,1,135,
        1,135,1,135,3,135,2034,8,135,1,135,3,135,2037,8,135,1,136,1,136,
        3,136,2041,8,136,1,136,1,136,1,137,1,137,1,137,1,137,1,137,3,137,
        2050,8,137,1,137,1,137,3,137,2054,8,137,1,137,1,137,3,137,2058,8,
        137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,3,137,
        2069,8,137,1,138,1,138,3,138,2073,8,138,1,138,4,138,2076,8,138,11,
        138,12,138,2077,1,138,1,138,3,138,2082,8,138,1,138,1,138,3,138,2086,
        8,138,1,138,4,138,2089,8,138,11,138,12,138,2090,3,138,2093,8,138,
        1,138,3,138,2096,8,138,1,138,1,138,3,138,2100,8,138,1,138,3,138,
        2103,8,138,1,138,3,138,2106,8,138,1,138,1,138,1,139,1,139,3,139,
        2112,8,139,1,139,1,139,3,139,2116,8,139,1,139,1,139,3,139,2120,8,
        139,1,139,1,139,1,140,1,140,3,140,2126,8,140,1,140,1,140,3,140,2130,
        8,140,1,140,1,140,3,140,2134,8,140,1,140,3,140,2137,8,140,1,140,
        3,140,2140,8,140,1,140,1,140,1,141,1,141,3,141,2146,8,141,1,141,
        1,141,3,141,2150,8,141,1,141,1,141,3,141,2154,8,141,3,141,2156,8,
        141,1,141,1,141,3,141,2160,8,141,1,141,1,141,3,141,2164,8,141,3,
        141,2166,8,141,1,141,1,141,3,141,2170,8,141,1,141,1,141,3,141,2174,
        8,141,1,141,1,141,1,142,1,142,3,142,2180,8,142,1,142,1,142,3,142,
        2184,8,142,1,142,1,142,3,142,2188,8,142,1,142,1,142,1,142,1,142,
        3,142,2194,8,142,1,142,1,142,3,142,2198,8,142,1,142,1,142,3,142,
        2202,8,142,1,142,1,142,1,142,1,142,3,142,2208,8,142,1,142,1,142,
        3,142,2212,8,142,1,142,1,142,3,142,2216,8,142,1,142,1,142,1,142,
        1,142,3,142,2222,8,142,1,142,1,142,3,142,2226,8,142,1,142,1,142,
        3,142,2230,8,142,1,142,1,142,3,142,2234,8,142,1,143,1,143,1,144,
        1,144,3,144,2240,8,144,1,144,1,144,3,144,2244,8,144,1,144,1,144,
        1,145,1,145,1,145,1,145,1,145,1,145,1,146,1,146,3,146,2256,8,146,
        1,146,1,146,3,146,2260,8,146,1,146,1,146,3,146,2264,8,146,3,146,
        2266,8,146,1,146,1,146,3,146,2270,8,146,1,146,1,146,3,146,2274,8,
        146,1,146,1,146,3,146,2278,8,146,5,146,2280,8,146,10,146,12,146,
        2283,9,146,3,146,2285,8,146,1,146,1,146,1,147,1,147,1,148,1,148,
        1,148,1,149,1,149,3,149,2296,8,149,1,149,1,149,3,149,2300,8,149,
        1,149,1,149,3,149,2304,8,149,1,149,1,149,3,149,2308,8,149,1,149,
        1,149,3,149,2312,8,149,5,149,2314,8,149,10,149,12,149,2317,9,149,
        3,149,2319,8,149,1,149,1,149,1,150,1,150,1,151,1,151,1,152,1,152,
        1,152,1,153,1,153,1,153,5,153,2333,8,153,10,153,12,153,2336,9,153,
        1,154,1,154,1,155,1,155,1,155,1,155,1,155,1,155,3,155,2346,8,155,
        1,156,1,156,1,157,1,157,3,157,2352,8,157,1,158,1,158,1,159,1,159,
        1,160,1,160,3,160,2360,8,160,1,160,1,160,3,160,2364,8,160,1,160,
        1,160,3,160,2368,8,160,1,160,1,160,3,160,2372,8,160,5,160,2374,8,
        160,10,160,12,160,2377,9,160,3,160,2379,8,160,1,160,1,160,1,161,
        1,161,1,162,1,162,3,162,2387,8,162,1,162,1,162,1,162,3,162,2392,
        8,162,1,162,5,162,2395,8,162,10,162,12,162,2398,9,162,3,162,2400,
        8,162,1,162,1,162,1,163,1,163,3,163,2406,8,163,1,163,1,163,3,163,
        2410,8,163,1,163,1,163,3,163,2414,8,163,1,164,1,164,1,165,1,165,
        1,165,3,165,2421,8,165,1,166,1,166,3,166,2425,8,166,1,167,1,167,
        1,168,1,168,1,169,1,169,1,169,0,0,170,0,2,4,6,8,10,12,14,16,18,20,
        22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
        204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
        236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,
        268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,
        300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,
        332,334,336,338,0,13,1,0,54,55,2,0,7,7,14,15,1,0,17,18,2,0,4,4,19,
        23,6,0,48,48,93,93,99,101,108,108,129,131,134,134,5,0,48,68,71,92,
        94,98,102,104,119,128,1,0,78,81,1,0,103,104,1,0,105,107,1,0,115,
        116,2,0,20,20,27,30,2,0,22,22,31,34,2,0,18,18,35,45,2745,0,343,1,
        0,0,0,2,347,1,0,0,0,4,375,1,0,0,0,6,377,1,0,0,0,8,388,1,0,0,0,10,
        406,1,0,0,0,12,430,1,0,0,0,14,541,1,0,0,0,16,543,1,0,0,0,18,549,
        1,0,0,0,20,556,1,0,0,0,22,562,1,0,0,0,24,576,1,0,0,0,26,605,1,0,
        0,0,28,625,1,0,0,0,30,627,1,0,0,0,32,633,1,0,0,0,34,641,1,0,0,0,
        36,643,1,0,0,0,38,654,1,0,0,0,40,671,1,0,0,0,42,691,1,0,0,0,44,704,
        1,0,0,0,46,720,1,0,0,0,48,728,1,0,0,0,50,751,1,0,0,0,52,758,1,0,
        0,0,54,764,1,0,0,0,56,791,1,0,0,0,58,793,1,0,0,0,60,807,1,0,0,0,
        62,817,1,0,0,0,64,849,1,0,0,0,66,851,1,0,0,0,68,875,1,0,0,0,70,886,
        1,0,0,0,72,898,1,0,0,0,74,931,1,0,0,0,76,940,1,0,0,0,78,950,1,0,
        0,0,80,957,1,0,0,0,82,969,1,0,0,0,84,971,1,0,0,0,86,973,1,0,0,0,
        88,990,1,0,0,0,90,1018,1,0,0,0,92,1028,1,0,0,0,94,1033,1,0,0,0,96,
        1061,1,0,0,0,98,1065,1,0,0,0,100,1067,1,0,0,0,102,1077,1,0,0,0,104,
        1087,1,0,0,0,106,1103,1,0,0,0,108,1108,1,0,0,0,110,1123,1,0,0,0,
        112,1125,1,0,0,0,114,1127,1,0,0,0,116,1129,1,0,0,0,118,1131,1,0,
        0,0,120,1138,1,0,0,0,122,1162,1,0,0,0,124,1177,1,0,0,0,126,1184,
        1,0,0,0,128,1201,1,0,0,0,130,1203,1,0,0,0,132,1236,1,0,0,0,134,1257,
        1,0,0,0,136,1261,1,0,0,0,138,1270,1,0,0,0,140,1286,1,0,0,0,142,1315,
        1,0,0,0,144,1322,1,0,0,0,146,1334,1,0,0,0,148,1336,1,0,0,0,150,1340,
        1,0,0,0,152,1342,1,0,0,0,154,1344,1,0,0,0,156,1347,1,0,0,0,158,1361,
        1,0,0,0,160,1363,1,0,0,0,162,1385,1,0,0,0,164,1389,1,0,0,0,166,1426,
        1,0,0,0,168,1429,1,0,0,0,170,1438,1,0,0,0,172,1440,1,0,0,0,174,1450,
        1,0,0,0,176,1472,1,0,0,0,178,1474,1,0,0,0,180,1480,1,0,0,0,182,1500,
        1,0,0,0,184,1520,1,0,0,0,186,1536,1,0,0,0,188,1556,1,0,0,0,190,1563,
        1,0,0,0,192,1571,1,0,0,0,194,1578,1,0,0,0,196,1622,1,0,0,0,198,1631,
        1,0,0,0,200,1633,1,0,0,0,202,1648,1,0,0,0,204,1652,1,0,0,0,206,1656,
        1,0,0,0,208,1663,1,0,0,0,210,1667,1,0,0,0,212,1681,1,0,0,0,214,1697,
        1,0,0,0,216,1699,1,0,0,0,218,1708,1,0,0,0,220,1778,1,0,0,0,222,1782,
        1,0,0,0,224,1784,1,0,0,0,226,1805,1,0,0,0,228,1815,1,0,0,0,230,1821,
        1,0,0,0,232,1843,1,0,0,0,234,1845,1,0,0,0,236,1847,1,0,0,0,238,1856,
        1,0,0,0,240,1858,1,0,0,0,242,1868,1,0,0,0,244,1878,1,0,0,0,246,1894,
        1,0,0,0,248,1899,1,0,0,0,250,1924,1,0,0,0,252,1931,1,0,0,0,254,1948,
        1,0,0,0,256,1950,1,0,0,0,258,1974,1,0,0,0,260,1976,1,0,0,0,262,1978,
        1,0,0,0,264,1980,1,0,0,0,266,1982,1,0,0,0,268,2015,1,0,0,0,270,2036,
        1,0,0,0,272,2038,1,0,0,0,274,2068,1,0,0,0,276,2092,1,0,0,0,278,2109,
        1,0,0,0,280,2123,1,0,0,0,282,2143,1,0,0,0,284,2233,1,0,0,0,286,2235,
        1,0,0,0,288,2237,1,0,0,0,290,2247,1,0,0,0,292,2253,1,0,0,0,294,2288,
        1,0,0,0,296,2290,1,0,0,0,298,2293,1,0,0,0,300,2322,1,0,0,0,302,2324,
        1,0,0,0,304,2326,1,0,0,0,306,2334,1,0,0,0,308,2337,1,0,0,0,310,2345,
        1,0,0,0,312,2347,1,0,0,0,314,2351,1,0,0,0,316,2353,1,0,0,0,318,2355,
        1,0,0,0,320,2357,1,0,0,0,322,2382,1,0,0,0,324,2384,1,0,0,0,326,2403,
        1,0,0,0,328,2415,1,0,0,0,330,2417,1,0,0,0,332,2424,1,0,0,0,334,2426,
        1,0,0,0,336,2428,1,0,0,0,338,2430,1,0,0,0,340,344,3,160,80,0,341,
        344,3,38,19,0,342,344,3,34,17,0,343,340,1,0,0,0,343,341,1,0,0,0,
        343,342,1,0,0,0,344,1,1,0,0,0,345,346,5,58,0,0,346,348,5,135,0,0,
        347,345,1,0,0,0,347,348,1,0,0,0,348,349,1,0,0,0,349,351,5,59,0,0,
        350,352,5,135,0,0,351,350,1,0,0,0,351,352,1,0,0,0,352,353,1,0,0,
        0,353,361,3,210,105,0,354,356,5,135,0,0,355,354,1,0,0,0,355,356,
        1,0,0,0,356,359,1,0,0,0,357,360,3,30,15,0,358,360,3,32,16,0,359,
        357,1,0,0,0,359,358,1,0,0,0,360,362,1,0,0,0,361,355,1,0,0,0,361,
        362,1,0,0,0,362,367,1,0,0,0,363,365,5,135,0,0,364,363,1,0,0,0,364,
        365,1,0,0,0,365,366,1,0,0,0,366,368,3,96,48,0,367,364,1,0,0,0,367,
        368,1,0,0,0,368,3,1,0,0,0,369,376,3,6,3,0,370,376,3,8,4,0,371,376,
        3,10,5,0,372,376,3,184,92,0,373,376,3,12,6,0,374,376,3,24,12,0,375,
        369,1,0,0,0,375,370,1,0,0,0,375,371,1,0,0,0,375,372,1,0,0,0,375,
        373,1,0,0,0,375,374,1,0,0,0,376,5,1,0,0,0,377,379,5,64,0,0,378,380,
        5,135,0,0,379,378,1,0,0,0,379,380,1,0,0,0,380,381,1,0,0,0,381,386,
        3,210,105,0,382,384,5,135,0,0,383,382,1,0,0,0,383,384,1,0,0,0,384,
        385,1,0,0,0,385,387,3,30,15,0,386,383,1,0,0,0,386,387,1,0,0,0,387,
        7,1,0,0,0,388,390,5,62,0,0,389,391,5,135,0,0,390,389,1,0,0,0,390,
        391,1,0,0,0,391,392,1,0,0,0,392,397,3,56,28,0,393,394,5,135,0,0,
        394,396,3,176,88,0,395,393,1,0,0,0,396,399,1,0,0,0,397,395,1,0,0,
        0,397,398,1,0,0,0,398,404,1,0,0,0,399,397,1,0,0,0,400,402,5,135,
        0,0,401,400,1,0,0,0,401,402,1,0,0,0,402,403,1,0,0,0,403,405,3,30,
        15,0,404,401,1,0,0,0,404,405,1,0,0,0,405,9,1,0,0,0,406,408,5,65,
        0,0,407,409,5,135,0,0,408,407,1,0,0,0,408,409,1,0,0,0,409,410,1,
        0,0,0,410,421,3,14,7,0,411,413,5,135,0,0,412,411,1,0,0,0,412,413,
        1,0,0,0,413,414,1,0,0,0,414,416,5,1,0,0,415,417,5,135,0,0,416,415,
        1,0,0,0,416,417,1,0,0,0,417,418,1,0,0,0,418,420,3,14,7,0,419,412,
        1,0,0,0,420,423,1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,428,
        1,0,0,0,423,421,1,0,0,0,424,426,5,135,0,0,425,424,1,0,0,0,425,426,
        1,0,0,0,426,427,1,0,0,0,427,429,3,30,15,0,428,425,1,0,0,0,428,429,
        1,0,0,0,429,11,1,0,0,0,430,432,5,53,0,0,431,433,5,135,0,0,432,431,
        1,0,0,0,432,433,1,0,0,0,433,434,1,0,0,0,434,445,3,22,11,0,435,437,
        5,135,0,0,436,435,1,0,0,0,436,437,1,0,0,0,437,438,1,0,0,0,438,440,
        5,1,0,0,439,441,5,135,0,0,440,439,1,0,0,0,440,441,1,0,0,0,441,442,
        1,0,0,0,442,444,3,22,11,0,443,436,1,0,0,0,444,447,1,0,0,0,445,443,
        1,0,0,0,445,446,1,0,0,0,446,452,1,0,0,0,447,445,1,0,0,0,448,450,
        5,135,0,0,449,448,1,0,0,0,449,450,1,0,0,0,450,451,1,0,0,0,451,453,
        3,30,15,0,452,449,1,0,0,0,452,453,1,0,0,0,453,13,1,0,0,0,454,474,
        3,236,118,0,455,457,5,135,0,0,456,455,1,0,0,0,456,457,1,0,0,0,457,
        458,1,0,0,0,458,460,5,46,0,0,459,461,5,135,0,0,460,459,1,0,0,0,460,
        461,1,0,0,0,461,462,1,0,0,0,462,464,5,2,0,0,463,465,5,135,0,0,464,
        463,1,0,0,0,464,465,1,0,0,0,465,468,1,0,0,0,466,469,3,150,75,0,467,
        469,5,48,0,0,468,466,1,0,0,0,468,467,1,0,0,0,469,471,1,0,0,0,470,
        472,5,135,0,0,471,470,1,0,0,0,471,472,1,0,0,0,472,473,1,0,0,0,473,
        475,5,3,0,0,474,456,1,0,0,0,474,475,1,0,0,0,475,477,1,0,0,0,476,
        478,5,135,0,0,477,476,1,0,0,0,477,478,1,0,0,0,478,479,1,0,0,0,479,
        481,5,4,0,0,480,482,5,135,0,0,481,480,1,0,0,0,481,482,1,0,0,0,482,
        483,1,0,0,0,483,484,3,238,119,0,484,542,1,0,0,0,485,487,3,308,154,
        0,486,488,5,135,0,0,487,486,1,0,0,0,487,488,1,0,0,0,488,489,1,0,
        0,0,489,491,5,4,0,0,490,492,5,135,0,0,491,490,1,0,0,0,491,492,1,
        0,0,0,492,493,1,0,0,0,493,494,3,238,119,0,494,542,1,0,0,0,495,497,
        3,308,154,0,496,498,5,135,0,0,497,496,1,0,0,0,497,498,1,0,0,0,498,
        499,1,0,0,0,499,501,5,5,0,0,500,502,5,135,0,0,501,500,1,0,0,0,501,
        502,1,0,0,0,502,503,1,0,0,0,503,504,3,238,119,0,504,542,1,0,0,0,
        505,507,3,308,154,0,506,508,5,135,0,0,507,506,1,0,0,0,507,508,1,
        0,0,0,508,509,1,0,0,0,509,510,3,226,113,0,510,542,1,0,0,0,511,513,
        3,308,154,0,512,514,5,135,0,0,513,512,1,0,0,0,513,514,1,0,0,0,514,
        515,1,0,0,0,515,516,3,94,47,0,516,542,1,0,0,0,517,522,3,308,154,
        0,518,520,5,135,0,0,519,518,1,0,0,0,519,520,1,0,0,0,520,521,1,0,
        0,0,521,523,3,94,47,0,522,519,1,0,0,0,522,523,1,0,0,0,523,524,1,
        0,0,0,524,525,5,6,0,0,525,526,3,16,8,0,526,542,1,0,0,0,527,532,3,
        308,154,0,528,530,5,135,0,0,529,528,1,0,0,0,529,530,1,0,0,0,530,
        531,1,0,0,0,531,533,3,94,47,0,532,529,1,0,0,0,532,533,1,0,0,0,533,
        534,1,0,0,0,534,535,5,6,0,0,535,537,3,18,9,0,536,538,5,135,0,0,537,
        536,1,0,0,0,537,538,1,0,0,0,538,539,1,0,0,0,539,540,3,20,10,0,540,
        542,1,0,0,0,541,454,1,0,0,0,541,485,1,0,0,0,541,495,1,0,0,0,541,
        505,1,0,0,0,541,511,1,0,0,0,541,517,1,0,0,0,541,527,1,0,0,0,542,
        15,1,0,0,0,543,545,3,328,164,0,544,546,5,135,0,0,545,544,1,0,0,0,
        545,546,1,0,0,0,546,547,1,0,0,0,547,548,3,94,47,0,548,17,1,0,0,0,
        549,554,3,328,164,0,550,552,5,135,0,0,551,550,1,0,0,0,551,552,1,
        0,0,0,552,553,1,0,0,0,553,555,3,94,47,0,554,551,1,0,0,0,554,555,
        1,0,0,0,555,19,1,0,0,0,556,558,5,47,0,0,557,559,5,135,0,0,558,557,
        1,0,0,0,558,559,1,0,0,0,559,560,1,0,0,0,560,561,3,94,47,0,561,21,
        1,0,0,0,562,572,3,238,119,0,563,565,5,135,0,0,564,563,1,0,0,0,564,
        565,1,0,0,0,565,566,1,0,0,0,566,568,3,272,136,0,567,569,5,135,0,
        0,568,567,1,0,0,0,568,569,1,0,0,0,569,570,1,0,0,0,570,571,5,47,0,
        0,571,573,1,0,0,0,572,564,1,0,0,0,572,573,1,0,0,0,573,23,1,0,0,0,
        574,575,5,66,0,0,575,577,5,135,0,0,576,574,1,0,0,0,576,577,1,0,0,
        0,577,578,1,0,0,0,578,580,5,67,0,0,579,581,5,135,0,0,580,579,1,0,
        0,0,580,581,1,0,0,0,581,582,1,0,0,0,582,593,3,26,13,0,583,585,5,
        135,0,0,584,583,1,0,0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,588,
        5,1,0,0,587,589,5,135,0,0,588,587,1,0,0,0,588,589,1,0,0,0,589,590,
        1,0,0,0,590,592,3,26,13,0,591,584,1,0,0,0,592,595,1,0,0,0,593,591,
        1,0,0,0,593,594,1,0,0,0,594,603,1,0,0,0,595,593,1,0,0,0,596,598,
        5,135,0,0,597,596,1,0,0,0,597,598,1,0,0,0,598,601,1,0,0,0,599,602,
        3,30,15,0,600,602,3,32,16,0,601,599,1,0,0,0,601,600,1,0,0,0,602,
        604,1,0,0,0,603,597,1,0,0,0,603,604,1,0,0,0,604,25,1,0,0,0,605,619,
        3,238,119,0,606,608,5,135,0,0,607,606,1,0,0,0,607,608,1,0,0,0,608,
        609,1,0,0,0,609,617,3,272,136,0,610,612,5,135,0,0,611,610,1,0,0,
        0,611,612,1,0,0,0,612,615,1,0,0,0,613,616,5,47,0,0,614,616,3,94,
        47,0,615,613,1,0,0,0,615,614,1,0,0,0,616,618,1,0,0,0,617,611,1,0,
        0,0,617,618,1,0,0,0,618,620,1,0,0,0,619,607,1,0,0,0,619,620,1,0,
        0,0,620,27,1,0,0,0,621,622,3,308,154,0,622,623,3,226,113,0,623,626,
        1,0,0,0,624,626,3,236,118,0,625,621,1,0,0,0,625,624,1,0,0,0,626,
        29,1,0,0,0,627,629,5,49,0,0,628,630,5,135,0,0,629,628,1,0,0,0,629,
        630,1,0,0,0,630,631,1,0,0,0,631,632,3,238,119,0,632,31,1,0,0,0,633,
        635,5,51,0,0,634,636,5,135,0,0,635,634,1,0,0,0,635,636,1,0,0,0,636,
        637,1,0,0,0,637,638,3,238,119,0,638,33,1,0,0,0,639,642,3,52,26,0,
        640,642,3,54,27,0,641,639,1,0,0,0,641,640,1,0,0,0,642,35,1,0,0,0,
        643,644,5,69,0,0,644,645,5,135,0,0,645,652,3,298,149,0,646,648,5,
        135,0,0,647,646,1,0,0,0,647,648,1,0,0,0,648,649,1,0,0,0,649,650,
        5,70,0,0,650,651,5,135,0,0,651,653,3,40,20,0,652,647,1,0,0,0,652,
        653,1,0,0,0,653,37,1,0,0,0,654,655,5,69,0,0,655,658,5,135,0,0,656,
        659,3,298,149,0,657,659,3,300,150,0,658,656,1,0,0,0,658,657,1,0,
        0,0,659,669,1,0,0,0,660,662,5,135,0,0,661,660,1,0,0,0,661,662,1,
        0,0,0,662,663,1,0,0,0,663,664,5,70,0,0,664,667,5,135,0,0,665,668,
        5,7,0,0,666,668,3,40,20,0,667,665,1,0,0,0,667,666,1,0,0,0,668,670,
        1,0,0,0,669,661,1,0,0,0,669,670,1,0,0,0,670,39,1,0,0,0,671,682,3,
        42,21,0,672,674,5,135,0,0,673,672,1,0,0,0,673,674,1,0,0,0,674,675,
        1,0,0,0,675,677,5,1,0,0,676,678,5,135,0,0,677,676,1,0,0,0,677,678,
        1,0,0,0,678,679,1,0,0,0,679,681,3,42,21,0,680,673,1,0,0,0,681,684,
        1,0,0,0,682,680,1,0,0,0,682,683,1,0,0,0,683,689,1,0,0,0,684,682,
        1,0,0,0,685,687,5,135,0,0,686,685,1,0,0,0,686,687,1,0,0,0,687,688,
        1,0,0,0,688,690,3,96,48,0,689,686,1,0,0,0,689,690,1,0,0,0,690,41,
        1,0,0,0,691,696,3,302,151,0,692,693,5,135,0,0,693,694,5,61,0,0,694,
        695,5,135,0,0,695,697,3,308,154,0,696,692,1,0,0,0,696,697,1,0,0,
        0,697,43,1,0,0,0,698,700,3,170,85,0,699,701,5,135,0,0,700,699,1,
        0,0,0,700,701,1,0,0,0,701,703,1,0,0,0,702,698,1,0,0,0,703,706,1,
        0,0,0,704,702,1,0,0,0,704,705,1,0,0,0,705,713,1,0,0,0,706,704,1,
        0,0,0,707,709,3,4,2,0,708,710,5,135,0,0,709,708,1,0,0,0,709,710,
        1,0,0,0,710,712,1,0,0,0,711,707,1,0,0,0,712,715,1,0,0,0,713,711,
        1,0,0,0,713,714,1,0,0,0,714,716,1,0,0,0,715,713,1,0,0,0,716,718,
        3,46,23,0,717,719,5,135,0,0,718,717,1,0,0,0,718,719,1,0,0,0,719,
        45,1,0,0,0,720,721,5,71,0,0,721,726,3,194,97,0,722,724,5,135,0,0,
        723,722,1,0,0,0,723,724,1,0,0,0,724,725,1,0,0,0,725,727,3,96,48,
        0,726,723,1,0,0,0,726,727,1,0,0,0,727,47,1,0,0,0,728,730,5,102,0,
        0,729,731,5,135,0,0,730,729,1,0,0,0,730,731,1,0,0,0,731,732,1,0,
        0,0,732,734,5,8,0,0,733,735,5,135,0,0,734,733,1,0,0,0,734,735,1,
        0,0,0,735,744,1,0,0,0,736,745,3,160,80,0,737,742,3,210,105,0,738,
        740,5,135,0,0,739,738,1,0,0,0,739,740,1,0,0,0,740,741,1,0,0,0,741,
        743,3,96,48,0,742,739,1,0,0,0,742,743,1,0,0,0,743,745,1,0,0,0,744,
        736,1,0,0,0,744,737,1,0,0,0,745,747,1,0,0,0,746,748,5,135,0,0,747,
        746,1,0,0,0,747,748,1,0,0,0,748,749,1,0,0,0,749,750,5,9,0,0,750,
        49,1,0,0,0,751,756,3,290,145,0,752,754,5,135,0,0,753,752,1,0,0,0,
        753,754,1,0,0,0,754,755,1,0,0,0,755,757,3,96,48,0,756,753,1,0,0,
        0,756,757,1,0,0,0,757,51,1,0,0,0,758,760,5,50,0,0,759,761,5,135,
        0,0,760,759,1,0,0,0,760,761,1,0,0,0,761,762,1,0,0,0,762,763,3,238,
        119,0,763,53,1,0,0,0,764,766,5,52,0,0,765,767,5,135,0,0,766,765,
        1,0,0,0,766,767,1,0,0,0,767,768,1,0,0,0,768,769,3,238,119,0,769,
        55,1,0,0,0,770,772,3,308,154,0,771,773,5,135,0,0,772,771,1,0,0,0,
        772,773,1,0,0,0,773,774,1,0,0,0,774,776,5,4,0,0,775,777,5,135,0,
        0,776,775,1,0,0,0,776,777,1,0,0,0,777,778,1,0,0,0,778,779,3,58,29,
        0,779,792,1,0,0,0,780,782,3,308,154,0,781,783,5,135,0,0,782,781,
        1,0,0,0,782,783,1,0,0,0,783,784,1,0,0,0,784,786,5,4,0,0,785,787,
        5,135,0,0,786,785,1,0,0,0,786,787,1,0,0,0,787,788,1,0,0,0,788,789,
        3,212,106,0,789,792,1,0,0,0,790,792,3,212,106,0,791,770,1,0,0,0,
        791,780,1,0,0,0,791,790,1,0,0,0,792,57,1,0,0,0,793,795,3,296,148,
        0,794,796,5,135,0,0,795,794,1,0,0,0,795,796,1,0,0,0,796,797,1,0,
        0,0,797,799,5,2,0,0,798,800,5,135,0,0,799,798,1,0,0,0,799,800,1,
        0,0,0,800,801,1,0,0,0,801,803,3,60,30,0,802,804,5,135,0,0,803,802,
        1,0,0,0,803,804,1,0,0,0,804,805,1,0,0,0,805,806,5,3,0,0,806,59,1,
        0,0,0,807,809,3,62,31,0,808,810,5,135,0,0,809,808,1,0,0,0,809,810,
        1,0,0,0,810,811,1,0,0,0,811,813,3,220,110,0,812,814,5,135,0,0,813,
        812,1,0,0,0,813,814,1,0,0,0,814,815,1,0,0,0,815,816,3,62,31,0,816,
        61,1,0,0,0,817,819,5,2,0,0,818,820,5,135,0,0,819,818,1,0,0,0,819,
        820,1,0,0,0,820,825,1,0,0,0,821,823,3,308,154,0,822,824,5,135,0,
        0,823,822,1,0,0,0,823,824,1,0,0,0,824,826,1,0,0,0,825,821,1,0,0,
        0,825,826,1,0,0,0,826,831,1,0,0,0,827,829,3,226,113,0,828,830,5,
        135,0,0,829,828,1,0,0,0,829,830,1,0,0,0,830,832,1,0,0,0,831,827,
        1,0,0,0,831,832,1,0,0,0,832,837,1,0,0,0,833,835,3,94,47,0,834,836,
        5,135,0,0,835,834,1,0,0,0,835,836,1,0,0,0,836,838,1,0,0,0,837,833,
        1,0,0,0,837,838,1,0,0,0,838,843,1,0,0,0,839,841,3,64,32,0,840,842,
        5,135,0,0,841,840,1,0,0,0,841,842,1,0,0,0,842,844,1,0,0,0,843,839,
        1,0,0,0,843,844,1,0,0,0,844,845,1,0,0,0,845,846,5,3,0,0,846,63,1,
        0,0,0,847,850,3,66,33,0,848,850,3,330,165,0,849,847,1,0,0,0,849,
        848,1,0,0,0,850,65,1,0,0,0,851,853,5,8,0,0,852,854,5,135,0,0,853,
        852,1,0,0,0,853,854,1,0,0,0,854,871,1,0,0,0,855,856,3,68,34,0,856,
        857,5,10,0,0,857,868,3,70,35,0,858,860,5,1,0,0,859,861,5,135,0,0,
        860,859,1,0,0,0,860,861,1,0,0,0,861,862,1,0,0,0,862,863,3,68,34,
        0,863,864,5,10,0,0,864,865,3,70,35,0,865,867,1,0,0,0,866,858,1,0,
        0,0,867,870,1,0,0,0,868,866,1,0,0,0,868,869,1,0,0,0,869,872,1,0,
        0,0,870,868,1,0,0,0,871,855,1,0,0,0,871,872,1,0,0,0,872,873,1,0,
        0,0,873,874,5,9,0,0,874,67,1,0,0,0,875,877,3,328,164,0,876,878,5,
        135,0,0,877,876,1,0,0,0,877,878,1,0,0,0,878,883,1,0,0,0,879,881,
        3,94,47,0,880,882,5,135,0,0,881,880,1,0,0,0,881,882,1,0,0,0,882,
        884,1,0,0,0,883,879,1,0,0,0,883,884,1,0,0,0,884,69,1,0,0,0,885,887,
        5,135,0,0,886,885,1,0,0,0,886,887,1,0,0,0,887,888,1,0,0,0,888,890,
        3,238,119,0,889,891,5,135,0,0,890,889,1,0,0,0,890,891,1,0,0,0,891,
        896,1,0,0,0,892,894,3,94,47,0,893,895,5,135,0,0,894,893,1,0,0,0,
        894,895,1,0,0,0,895,897,1,0,0,0,896,892,1,0,0,0,896,897,1,0,0,0,
        897,71,1,0,0,0,898,900,5,11,0,0,899,901,5,135,0,0,900,899,1,0,0,
        0,900,901,1,0,0,0,901,906,1,0,0,0,902,904,3,308,154,0,903,905,5,
        135,0,0,904,903,1,0,0,0,904,905,1,0,0,0,905,907,1,0,0,0,906,902,
        1,0,0,0,906,907,1,0,0,0,907,912,1,0,0,0,908,910,3,224,112,0,909,
        911,5,135,0,0,910,909,1,0,0,0,910,911,1,0,0,0,911,913,1,0,0,0,912,
        908,1,0,0,0,912,913,1,0,0,0,913,915,1,0,0,0,914,916,3,230,115,0,
        915,914,1,0,0,0,915,916,1,0,0,0,916,921,1,0,0,0,917,919,3,94,47,
        0,918,920,5,135,0,0,919,918,1,0,0,0,919,920,1,0,0,0,920,922,1,0,
        0,0,921,917,1,0,0,0,921,922,1,0,0,0,922,927,1,0,0,0,923,925,3,222,
        111,0,924,926,5,135,0,0,925,924,1,0,0,0,925,926,1,0,0,0,926,928,
        1,0,0,0,927,923,1,0,0,0,927,928,1,0,0,0,928,929,1,0,0,0,929,930,
        5,12,0,0,930,73,1,0,0,0,931,936,3,256,128,0,932,937,3,92,46,0,933,
        937,3,250,125,0,934,937,3,252,126,0,935,937,3,254,127,0,936,932,
        1,0,0,0,936,933,1,0,0,0,936,934,1,0,0,0,936,935,1,0,0,0,936,937,
        1,0,0,0,937,75,1,0,0,0,938,941,3,86,43,0,939,941,3,88,44,0,940,938,
        1,0,0,0,940,939,1,0,0,0,941,946,1,0,0,0,942,945,3,78,39,0,943,945,
        3,80,40,0,944,942,1,0,0,0,944,943,1,0,0,0,945,948,1,0,0,0,946,944,
        1,0,0,0,946,947,1,0,0,0,947,77,1,0,0,0,948,946,1,0,0,0,949,951,5,
        135,0,0,950,949,1,0,0,0,950,951,1,0,0,0,951,952,1,0,0,0,952,953,
        5,11,0,0,953,954,3,82,41,0,954,955,5,12,0,0,955,79,1,0,0,0,956,958,
        5,135,0,0,957,956,1,0,0,0,957,958,1,0,0,0,958,959,1,0,0,0,959,961,
        5,11,0,0,960,962,3,82,41,0,961,960,1,0,0,0,961,962,1,0,0,0,962,963,
        1,0,0,0,963,965,5,13,0,0,964,966,3,84,42,0,965,964,1,0,0,0,965,966,
        1,0,0,0,966,967,1,0,0,0,967,968,5,12,0,0,968,81,1,0,0,0,969,970,
        3,238,119,0,970,83,1,0,0,0,971,972,3,238,119,0,972,85,1,0,0,0,973,
        980,3,274,137,0,974,976,5,135,0,0,975,974,1,0,0,0,975,976,1,0,0,
        0,976,977,1,0,0,0,977,979,3,272,136,0,978,975,1,0,0,0,979,982,1,
        0,0,0,980,978,1,0,0,0,980,981,1,0,0,0,981,988,1,0,0,0,982,980,1,
        0,0,0,983,985,5,135,0,0,984,983,1,0,0,0,984,985,1,0,0,0,985,986,
        1,0,0,0,986,989,3,226,113,0,987,989,3,94,47,0,988,984,1,0,0,0,988,
        987,1,0,0,0,988,989,1,0,0,0,989,87,1,0,0,0,990,1011,3,274,137,0,
        991,993,5,135,0,0,992,991,1,0,0,0,992,993,1,0,0,0,993,994,1,0,0,
        0,994,996,3,272,136,0,995,992,1,0,0,0,996,999,1,0,0,0,997,995,1,
        0,0,0,997,998,1,0,0,0,998,1001,1,0,0,0,999,997,1,0,0,0,1000,1002,
        5,135,0,0,1001,1000,1,0,0,0,1001,1002,1,0,0,0,1002,1003,1,0,0,0,
        1003,1009,3,272,136,0,1004,1006,5,135,0,0,1005,1004,1,0,0,0,1005,
        1006,1,0,0,0,1006,1007,1,0,0,0,1007,1010,5,47,0,0,1008,1010,3,94,
        47,0,1009,1005,1,0,0,0,1009,1008,1,0,0,0,1009,1010,1,0,0,0,1010,
        1012,1,0,0,0,1011,997,1,0,0,0,1011,1012,1,0,0,0,1012,1014,1,0,0,
        0,1013,1015,5,135,0,0,1014,1013,1,0,0,0,1014,1015,1,0,0,0,1015,1016,
        1,0,0,0,1016,1017,3,90,45,0,1017,89,1,0,0,0,1018,1025,5,46,0,0,1019,
        1021,5,135,0,0,1020,1019,1,0,0,0,1020,1021,1,0,0,0,1021,1022,1,0,
        0,0,1022,1024,3,272,136,0,1023,1020,1,0,0,0,1024,1027,1,0,0,0,1025,
        1023,1,0,0,0,1025,1026,1,0,0,0,1026,91,1,0,0,0,1027,1025,1,0,0,0,
        1028,1029,5,135,0,0,1029,1030,7,0,0,0,1030,1031,5,135,0,0,1031,1032,
        3,256,128,0,1032,93,1,0,0,0,1033,1035,5,46,0,0,1034,1036,5,135,0,
        0,1035,1034,1,0,0,0,1035,1036,1,0,0,0,1036,1037,1,0,0,0,1037,1047,
        5,2,0,0,1038,1040,5,135,0,0,1039,1038,1,0,0,0,1039,1040,1,0,0,0,
        1040,1041,1,0,0,0,1041,1043,3,150,75,0,1042,1044,5,135,0,0,1043,
        1042,1,0,0,0,1043,1044,1,0,0,0,1044,1045,1,0,0,0,1045,1046,5,1,0,
        0,1046,1048,1,0,0,0,1047,1039,1,0,0,0,1047,1048,1,0,0,0,1048,1050,
        1,0,0,0,1049,1051,5,135,0,0,1050,1049,1,0,0,0,1050,1051,1,0,0,0,
        1051,1054,1,0,0,0,1052,1055,3,150,75,0,1053,1055,5,48,0,0,1054,1052,
        1,0,0,0,1054,1053,1,0,0,0,1055,1057,1,0,0,0,1056,1058,5,135,0,0,
        1057,1056,1,0,0,0,1057,1058,1,0,0,0,1058,1059,1,0,0,0,1059,1060,
        5,3,0,0,1060,95,1,0,0,0,1061,1062,5,82,0,0,1062,1063,5,135,0,0,1063,
        1064,3,98,49,0,1064,97,1,0,0,0,1065,1066,3,100,50,0,1066,99,1,0,
        0,0,1067,1074,3,102,51,0,1068,1069,5,135,0,0,1069,1070,5,83,0,0,
        1070,1071,5,135,0,0,1071,1073,3,102,51,0,1072,1068,1,0,0,0,1073,
        1076,1,0,0,0,1074,1072,1,0,0,0,1074,1075,1,0,0,0,1075,101,1,0,0,
        0,1076,1074,1,0,0,0,1077,1084,3,104,52,0,1078,1079,5,135,0,0,1079,
        1080,5,84,0,0,1080,1081,5,135,0,0,1081,1083,3,104,52,0,1082,1078,
        1,0,0,0,1083,1086,1,0,0,0,1084,1082,1,0,0,0,1084,1085,1,0,0,0,1085,
        103,1,0,0,0,1086,1084,1,0,0,0,1087,1094,3,106,53,0,1088,1089,5,135,
        0,0,1089,1090,5,85,0,0,1090,1091,5,135,0,0,1091,1093,3,106,53,0,
        1092,1088,1,0,0,0,1093,1096,1,0,0,0,1094,1092,1,0,0,0,1094,1095,
        1,0,0,0,1095,105,1,0,0,0,1096,1094,1,0,0,0,1097,1099,5,86,0,0,1098,
        1100,5,135,0,0,1099,1098,1,0,0,0,1099,1100,1,0,0,0,1100,1102,1,0,
        0,0,1101,1097,1,0,0,0,1102,1105,1,0,0,0,1103,1101,1,0,0,0,1103,1104,
        1,0,0,0,1104,1106,1,0,0,0,1105,1103,1,0,0,0,1106,1107,3,108,54,0,
        1107,107,1,0,0,0,1108,1120,3,118,59,0,1109,1111,5,135,0,0,1110,1109,
        1,0,0,0,1110,1111,1,0,0,0,1111,1112,1,0,0,0,1112,1114,3,116,58,0,
        1113,1115,5,135,0,0,1114,1113,1,0,0,0,1114,1115,1,0,0,0,1115,1116,
        1,0,0,0,1116,1117,3,118,59,0,1117,1119,1,0,0,0,1118,1110,1,0,0,0,
        1119,1122,1,0,0,0,1120,1118,1,0,0,0,1120,1121,1,0,0,0,1121,109,1,
        0,0,0,1122,1120,1,0,0,0,1123,1124,7,1,0,0,1124,111,1,0,0,0,1125,
        1126,5,16,0,0,1126,113,1,0,0,0,1127,1128,7,2,0,0,1128,115,1,0,0,
        0,1129,1130,7,3,0,0,1130,117,1,0,0,0,1131,1136,3,120,60,0,1132,1137,
        3,122,61,0,1133,1137,3,124,62,0,1134,1137,3,126,63,0,1135,1137,3,
        128,64,0,1136,1132,1,0,0,0,1136,1133,1,0,0,0,1136,1134,1,0,0,0,1136,
        1135,1,0,0,0,1136,1137,1,0,0,0,1137,119,1,0,0,0,1138,1159,3,130,
        65,0,1139,1141,5,135,0,0,1140,1139,1,0,0,0,1140,1141,1,0,0,0,1141,
        1142,1,0,0,0,1142,1144,3,114,57,0,1143,1145,5,135,0,0,1144,1143,
        1,0,0,0,1144,1145,1,0,0,0,1145,1146,1,0,0,0,1146,1147,3,130,65,0,
        1147,1158,1,0,0,0,1148,1150,5,135,0,0,1149,1148,1,0,0,0,1149,1150,
        1,0,0,0,1150,1151,1,0,0,0,1151,1153,3,114,57,0,1152,1154,5,135,0,
        0,1153,1152,1,0,0,0,1153,1154,1,0,0,0,1154,1155,1,0,0,0,1155,1156,
        3,130,65,0,1156,1158,1,0,0,0,1157,1140,1,0,0,0,1157,1149,1,0,0,0,
        1158,1161,1,0,0,0,1159,1157,1,0,0,0,1159,1160,1,0,0,0,1160,121,1,
        0,0,0,1161,1159,1,0,0,0,1162,1163,5,135,0,0,1163,1164,7,0,0,0,1164,
        1165,5,135,0,0,1165,1166,3,120,60,0,1166,123,1,0,0,0,1167,1168,5,
        135,0,0,1168,1169,5,87,0,0,1169,1170,5,135,0,0,1170,1178,5,71,0,
        0,1171,1172,5,135,0,0,1172,1173,5,88,0,0,1173,1174,5,135,0,0,1174,
        1178,5,71,0,0,1175,1176,5,135,0,0,1176,1178,5,89,0,0,1177,1167,1,
        0,0,0,1177,1171,1,0,0,0,1177,1175,1,0,0,0,1178,1180,1,0,0,0,1179,
        1181,5,135,0,0,1180,1179,1,0,0,0,1180,1181,1,0,0,0,1181,1182,1,0,
        0,0,1182,1183,3,120,60,0,1183,125,1,0,0,0,1184,1185,5,135,0,0,1185,
        1187,5,90,0,0,1186,1188,5,135,0,0,1187,1186,1,0,0,0,1187,1188,1,
        0,0,0,1188,1189,1,0,0,0,1189,1190,3,120,60,0,1190,127,1,0,0,0,1191,
        1192,5,135,0,0,1192,1193,5,91,0,0,1193,1194,5,135,0,0,1194,1202,
        5,92,0,0,1195,1196,5,135,0,0,1196,1197,5,91,0,0,1197,1198,5,135,
        0,0,1198,1199,5,86,0,0,1199,1200,5,135,0,0,1200,1202,5,92,0,0,1201,
        1191,1,0,0,0,1201,1195,1,0,0,0,1202,129,1,0,0,0,1203,1233,3,132,
        66,0,1204,1206,5,135,0,0,1205,1204,1,0,0,0,1205,1206,1,0,0,0,1206,
        1207,1,0,0,0,1207,1209,3,110,55,0,1208,1210,5,135,0,0,1209,1208,
        1,0,0,0,1209,1210,1,0,0,0,1210,1211,1,0,0,0,1211,1212,3,132,66,0,
        1212,1232,1,0,0,0,1213,1215,5,135,0,0,1214,1213,1,0,0,0,1214,1215,
        1,0,0,0,1215,1216,1,0,0,0,1216,1218,3,110,55,0,1217,1219,5,135,0,
        0,1218,1217,1,0,0,0,1218,1219,1,0,0,0,1219,1220,1,0,0,0,1220,1221,
        3,132,66,0,1221,1232,1,0,0,0,1222,1224,5,135,0,0,1223,1222,1,0,0,
        0,1223,1224,1,0,0,0,1224,1225,1,0,0,0,1225,1227,3,110,55,0,1226,
        1228,5,135,0,0,1227,1226,1,0,0,0,1227,1228,1,0,0,0,1228,1229,1,0,
        0,0,1229,1230,3,132,66,0,1230,1232,1,0,0,0,1231,1205,1,0,0,0,1231,
        1214,1,0,0,0,1231,1223,1,0,0,0,1232,1235,1,0,0,0,1233,1231,1,0,0,
        0,1233,1234,1,0,0,0,1234,131,1,0,0,0,1235,1233,1,0,0,0,1236,1248,
        3,134,67,0,1237,1239,5,135,0,0,1238,1237,1,0,0,0,1238,1239,1,0,0,
        0,1239,1240,1,0,0,0,1240,1242,3,112,56,0,1241,1243,5,135,0,0,1242,
        1241,1,0,0,0,1242,1243,1,0,0,0,1243,1244,1,0,0,0,1244,1245,3,134,
        67,0,1245,1247,1,0,0,0,1246,1238,1,0,0,0,1247,1250,1,0,0,0,1248,
        1246,1,0,0,0,1248,1249,1,0,0,0,1249,133,1,0,0,0,1250,1248,1,0,0,
        0,1251,1258,3,136,68,0,1252,1254,7,2,0,0,1253,1255,5,135,0,0,1254,
        1253,1,0,0,0,1254,1255,1,0,0,0,1255,1256,1,0,0,0,1256,1258,3,136,
        68,0,1257,1251,1,0,0,0,1257,1252,1,0,0,0,1258,135,1,0,0,0,1259,1262,
        3,138,69,0,1260,1262,3,140,70,0,1261,1259,1,0,0,0,1261,1260,1,0,
        0,0,1262,1267,1,0,0,0,1263,1266,3,142,71,0,1264,1266,3,144,72,0,
        1265,1263,1,0,0,0,1265,1264,1,0,0,0,1266,1269,1,0,0,0,1267,1265,
        1,0,0,0,1267,1268,1,0,0,0,1268,137,1,0,0,0,1269,1267,1,0,0,0,1270,
        1277,3,274,137,0,1271,1273,5,135,0,0,1272,1271,1,0,0,0,1272,1273,
        1,0,0,0,1273,1274,1,0,0,0,1274,1276,3,272,136,0,1275,1272,1,0,0,
        0,1276,1279,1,0,0,0,1277,1275,1,0,0,0,1277,1278,1,0,0,0,1278,1284,
        1,0,0,0,1279,1277,1,0,0,0,1280,1282,5,135,0,0,1281,1280,1,0,0,0,
        1281,1282,1,0,0,0,1282,1283,1,0,0,0,1283,1285,3,226,113,0,1284,1281,
        1,0,0,0,1284,1285,1,0,0,0,1285,139,1,0,0,0,1286,1307,3,274,137,0,
        1287,1289,5,135,0,0,1288,1287,1,0,0,0,1288,1289,1,0,0,0,1289,1290,
        1,0,0,0,1290,1292,3,272,136,0,1291,1288,1,0,0,0,1292,1295,1,0,0,
        0,1293,1291,1,0,0,0,1293,1294,1,0,0,0,1294,1297,1,0,0,0,1295,1293,
        1,0,0,0,1296,1298,5,135,0,0,1297,1296,1,0,0,0,1297,1298,1,0,0,0,
        1298,1299,1,0,0,0,1299,1305,3,272,136,0,1300,1302,5,135,0,0,1301,
        1300,1,0,0,0,1301,1302,1,0,0,0,1302,1303,1,0,0,0,1303,1306,5,47,
        0,0,1304,1306,3,94,47,0,1305,1301,1,0,0,0,1305,1304,1,0,0,0,1305,
        1306,1,0,0,0,1306,1308,1,0,0,0,1307,1293,1,0,0,0,1307,1308,1,0,0,
        0,1308,1310,1,0,0,0,1309,1311,5,135,0,0,1310,1309,1,0,0,0,1310,1311,
        1,0,0,0,1311,1312,1,0,0,0,1312,1313,3,90,45,0,1313,141,1,0,0,0,1314,
        1316,5,135,0,0,1315,1314,1,0,0,0,1315,1316,1,0,0,0,1316,1317,1,0,
        0,0,1317,1318,5,11,0,0,1318,1319,3,146,73,0,1319,1320,5,12,0,0,1320,
        143,1,0,0,0,1321,1323,5,135,0,0,1322,1321,1,0,0,0,1322,1323,1,0,
        0,0,1323,1324,1,0,0,0,1324,1326,5,11,0,0,1325,1327,3,146,73,0,1326,
        1325,1,0,0,0,1326,1327,1,0,0,0,1327,1328,1,0,0,0,1328,1330,5,13,
        0,0,1329,1331,3,148,74,0,1330,1329,1,0,0,0,1330,1331,1,0,0,0,1331,
        1332,1,0,0,0,1332,1333,5,12,0,0,1333,145,1,0,0,0,1334,1335,3,238,
        119,0,1335,147,1,0,0,0,1336,1337,3,238,119,0,1337,149,1,0,0,0,1338,
        1341,5,117,0,0,1339,1341,3,324,162,0,1340,1338,1,0,0,0,1340,1339,
        1,0,0,0,1341,151,1,0,0,0,1342,1343,7,4,0,0,1343,153,1,0,0,0,1344,
        1345,7,5,0,0,1345,155,1,0,0,0,1346,1348,5,135,0,0,1347,1346,1,0,
        0,0,1347,1348,1,0,0,0,1348,1349,1,0,0,0,1349,1354,3,158,79,0,1350,
        1352,5,135,0,0,1351,1350,1,0,0,0,1351,1352,1,0,0,0,1352,1353,1,0,
        0,0,1353,1355,5,24,0,0,1354,1351,1,0,0,0,1354,1355,1,0,0,0,1355,
        1357,1,0,0,0,1356,1358,5,135,0,0,1357,1356,1,0,0,0,1357,1358,1,0,
        0,0,1358,1359,1,0,0,0,1359,1360,5,0,0,1,1360,157,1,0,0,0,1361,1362,
        3,0,0,0,1362,159,1,0,0,0,1363,1370,3,164,82,0,1364,1366,5,135,0,
        0,1365,1364,1,0,0,0,1365,1366,1,0,0,0,1366,1367,1,0,0,0,1367,1369,
        3,162,81,0,1368,1365,1,0,0,0,1369,1372,1,0,0,0,1370,1368,1,0,0,0,
        1370,1371,1,0,0,0,1371,161,1,0,0,0,1372,1370,1,0,0,0,1373,1374,5,
        56,0,0,1374,1375,5,135,0,0,1375,1377,5,57,0,0,1376,1378,5,135,0,
        0,1377,1376,1,0,0,0,1377,1378,1,0,0,0,1378,1379,1,0,0,0,1379,1386,
        3,164,82,0,1380,1382,5,56,0,0,1381,1383,5,135,0,0,1382,1381,1,0,
        0,0,1382,1383,1,0,0,0,1383,1384,1,0,0,0,1384,1386,3,164,82,0,1385,
        1373,1,0,0,0,1385,1380,1,0,0,0,1386,163,1,0,0,0,1387,1390,3,166,
        83,0,1388,1390,3,168,84,0,1389,1387,1,0,0,0,1389,1388,1,0,0,0,1390,
        165,1,0,0,0,1391,1393,3,170,85,0,1392,1394,5,135,0,0,1393,1392,1,
        0,0,0,1393,1394,1,0,0,0,1394,1396,1,0,0,0,1395,1391,1,0,0,0,1396,
        1399,1,0,0,0,1397,1395,1,0,0,0,1397,1398,1,0,0,0,1398,1400,1,0,0,
        0,1399,1397,1,0,0,0,1400,1427,3,192,96,0,1401,1403,3,170,85,0,1402,
        1404,5,135,0,0,1403,1402,1,0,0,0,1403,1404,1,0,0,0,1404,1406,1,0,
        0,0,1405,1401,1,0,0,0,1406,1409,1,0,0,0,1407,1405,1,0,0,0,1407,1408,
        1,0,0,0,1408,1410,1,0,0,0,1409,1407,1,0,0,0,1410,1417,3,4,2,0,1411,
        1413,5,135,0,0,1412,1411,1,0,0,0,1412,1413,1,0,0,0,1413,1414,1,0,
        0,0,1414,1416,3,4,2,0,1415,1412,1,0,0,0,1416,1419,1,0,0,0,1417,1415,
        1,0,0,0,1417,1418,1,0,0,0,1418,1424,1,0,0,0,1419,1417,1,0,0,0,1420,
        1422,5,135,0,0,1421,1420,1,0,0,0,1421,1422,1,0,0,0,1422,1423,1,0,
        0,0,1423,1425,3,192,96,0,1424,1421,1,0,0,0,1424,1425,1,0,0,0,1425,
        1427,1,0,0,0,1426,1397,1,0,0,0,1426,1407,1,0,0,0,1427,167,1,0,0,
        0,1428,1430,3,44,22,0,1429,1428,1,0,0,0,1430,1431,1,0,0,0,1431,1429,
        1,0,0,0,1431,1432,1,0,0,0,1432,1433,1,0,0,0,1433,1434,3,166,83,0,
        1434,169,1,0,0,0,1435,1439,3,2,1,0,1436,1439,3,172,86,0,1437,1439,
        3,36,18,0,1438,1435,1,0,0,0,1438,1436,1,0,0,0,1438,1437,1,0,0,0,
        1439,171,1,0,0,0,1440,1442,5,60,0,0,1441,1443,5,135,0,0,1442,1441,
        1,0,0,0,1442,1443,1,0,0,0,1443,1444,1,0,0,0,1444,1445,3,238,119,
        0,1445,1446,5,135,0,0,1446,1447,5,61,0,0,1447,1448,5,135,0,0,1448,
        1449,3,308,154,0,1449,173,1,0,0,0,1450,1452,5,62,0,0,1451,1453,5,
        135,0,0,1452,1451,1,0,0,0,1452,1453,1,0,0,0,1453,1454,1,0,0,0,1454,
        1459,3,56,28,0,1455,1456,5,135,0,0,1456,1458,3,176,88,0,1457,1455,
        1,0,0,0,1458,1461,1,0,0,0,1459,1457,1,0,0,0,1459,1460,1,0,0,0,1460,
        175,1,0,0,0,1461,1459,1,0,0,0,1462,1463,5,63,0,0,1463,1464,5,135,
        0,0,1464,1465,5,59,0,0,1465,1466,5,135,0,0,1466,1473,3,180,90,0,
        1467,1468,5,63,0,0,1468,1469,5,135,0,0,1469,1470,5,64,0,0,1470,1471,
        5,135,0,0,1471,1473,3,180,90,0,1472,1462,1,0,0,0,1472,1467,1,0,0,
        0,1473,177,1,0,0,0,1474,1476,5,64,0,0,1475,1477,5,135,0,0,1476,1475,
        1,0,0,0,1476,1477,1,0,0,0,1477,1478,1,0,0,0,1478,1479,3,210,105,
        0,1479,179,1,0,0,0,1480,1482,5,65,0,0,1481,1483,5,135,0,0,1482,1481,
        1,0,0,0,1482,1483,1,0,0,0,1483,1484,1,0,0,0,1484,1495,3,14,7,0,1485,
        1487,5,135,0,0,1486,1485,1,0,0,0,1486,1487,1,0,0,0,1487,1488,1,0,
        0,0,1488,1490,5,1,0,0,1489,1491,5,135,0,0,1490,1489,1,0,0,0,1490,
        1491,1,0,0,0,1491,1492,1,0,0,0,1492,1494,3,14,7,0,1493,1486,1,0,
        0,0,1494,1497,1,0,0,0,1495,1493,1,0,0,0,1495,1496,1,0,0,0,1496,181,
        1,0,0,0,1497,1495,1,0,0,0,1498,1499,5,66,0,0,1499,1501,5,135,0,0,
        1500,1498,1,0,0,0,1500,1501,1,0,0,0,1501,1502,1,0,0,0,1502,1504,
        5,67,0,0,1503,1505,5,135,0,0,1504,1503,1,0,0,0,1504,1505,1,0,0,0,
        1505,1506,1,0,0,0,1506,1517,3,238,119,0,1507,1509,5,135,0,0,1508,
        1507,1,0,0,0,1508,1509,1,0,0,0,1509,1510,1,0,0,0,1510,1512,5,1,0,
        0,1511,1513,5,135,0,0,1512,1511,1,0,0,0,1512,1513,1,0,0,0,1513,1514,
        1,0,0,0,1514,1516,3,238,119,0,1515,1508,1,0,0,0,1516,1519,1,0,0,
        0,1517,1515,1,0,0,0,1517,1518,1,0,0,0,1518,183,1,0,0,0,1519,1517,
        1,0,0,0,1520,1521,5,68,0,0,1521,1522,5,135,0,0,1522,1533,3,28,14,
        0,1523,1525,5,135,0,0,1524,1523,1,0,0,0,1524,1525,1,0,0,0,1525,1526,
        1,0,0,0,1526,1528,5,1,0,0,1527,1529,5,135,0,0,1528,1527,1,0,0,0,
        1528,1529,1,0,0,0,1529,1530,1,0,0,0,1530,1532,3,28,14,0,1531,1524,
        1,0,0,0,1532,1535,1,0,0,0,1533,1531,1,0,0,0,1533,1534,1,0,0,0,1534,
        185,1,0,0,0,1535,1533,1,0,0,0,1536,1547,3,188,94,0,1537,1539,5,135,
        0,0,1538,1537,1,0,0,0,1538,1539,1,0,0,0,1539,1540,1,0,0,0,1540,1542,
        5,1,0,0,1541,1543,5,135,0,0,1542,1541,1,0,0,0,1542,1543,1,0,0,0,
        1543,1544,1,0,0,0,1544,1546,3,188,94,0,1545,1538,1,0,0,0,1546,1549,
        1,0,0,0,1547,1545,1,0,0,0,1547,1548,1,0,0,0,1548,1554,1,0,0,0,1549,
        1547,1,0,0,0,1550,1552,5,135,0,0,1551,1550,1,0,0,0,1551,1552,1,0,
        0,0,1552,1553,1,0,0,0,1553,1555,3,208,104,0,1554,1551,1,0,0,0,1554,
        1555,1,0,0,0,1555,187,1,0,0,0,1556,1561,3,302,151,0,1557,1558,5,
        135,0,0,1558,1559,5,61,0,0,1559,1560,5,135,0,0,1560,1562,3,308,154,
        0,1561,1557,1,0,0,0,1561,1562,1,0,0,0,1562,189,1,0,0,0,1563,1564,
        5,71,0,0,1564,1569,3,194,97,0,1565,1567,5,135,0,0,1566,1565,1,0,
        0,0,1566,1567,1,0,0,0,1567,1568,1,0,0,0,1568,1570,3,208,104,0,1569,
        1566,1,0,0,0,1569,1570,1,0,0,0,1570,191,1,0,0,0,1571,1572,5,72,0,
        0,1572,1573,3,194,97,0,1573,193,1,0,0,0,1574,1576,5,135,0,0,1575,
        1574,1,0,0,0,1575,1576,1,0,0,0,1576,1577,1,0,0,0,1577,1579,5,73,
        0,0,1578,1575,1,0,0,0,1578,1579,1,0,0,0,1579,1580,1,0,0,0,1580,1581,
        5,135,0,0,1581,1584,3,196,98,0,1582,1583,5,135,0,0,1583,1585,3,200,
        100,0,1584,1582,1,0,0,0,1584,1585,1,0,0,0,1585,1588,1,0,0,0,1586,
        1587,5,135,0,0,1587,1589,3,202,101,0,1588,1586,1,0,0,0,1588,1589,
        1,0,0,0,1589,1592,1,0,0,0,1590,1591,5,135,0,0,1591,1593,3,204,102,
        0,1592,1590,1,0,0,0,1592,1593,1,0,0,0,1593,195,1,0,0,0,1594,1605,
        5,7,0,0,1595,1597,5,135,0,0,1596,1595,1,0,0,0,1596,1597,1,0,0,0,
        1597,1598,1,0,0,0,1598,1600,5,1,0,0,1599,1601,5,135,0,0,1600,1599,
        1,0,0,0,1600,1601,1,0,0,0,1601,1602,1,0,0,0,1602,1604,3,198,99,0,
        1603,1596,1,0,0,0,1604,1607,1,0,0,0,1605,1603,1,0,0,0,1605,1606,
        1,0,0,0,1606,1623,1,0,0,0,1607,1605,1,0,0,0,1608,1619,3,198,99,0,
        1609,1611,5,135,0,0,1610,1609,1,0,0,0,1610,1611,1,0,0,0,1611,1612,
        1,0,0,0,1612,1614,5,1,0,0,1613,1615,5,135,0,0,1614,1613,1,0,0,0,
        1614,1615,1,0,0,0,1615,1616,1,0,0,0,1616,1618,3,198,99,0,1617,1610,
        1,0,0,0,1618,1621,1,0,0,0,1619,1617,1,0,0,0,1619,1620,1,0,0,0,1620,
        1623,1,0,0,0,1621,1619,1,0,0,0,1622,1594,1,0,0,0,1622,1608,1,0,0,
        0,1623,197,1,0,0,0,1624,1625,3,238,119,0,1625,1626,5,135,0,0,1626,
        1627,5,61,0,0,1627,1628,5,135,0,0,1628,1629,3,308,154,0,1629,1632,
        1,0,0,0,1630,1632,3,238,119,0,1631,1624,1,0,0,0,1631,1630,1,0,0,
        0,1632,199,1,0,0,0,1633,1634,5,74,0,0,1634,1635,5,135,0,0,1635,1636,
        5,75,0,0,1636,1637,5,135,0,0,1637,1645,3,206,103,0,1638,1640,5,1,
        0,0,1639,1641,5,135,0,0,1640,1639,1,0,0,0,1640,1641,1,0,0,0,1641,
        1642,1,0,0,0,1642,1644,3,206,103,0,1643,1638,1,0,0,0,1644,1647,1,
        0,0,0,1645,1643,1,0,0,0,1645,1646,1,0,0,0,1646,201,1,0,0,0,1647,
        1645,1,0,0,0,1648,1649,5,76,0,0,1649,1650,5,135,0,0,1650,1651,3,
        238,119,0,1651,203,1,0,0,0,1652,1653,5,77,0,0,1653,1654,5,135,0,
        0,1654,1655,3,238,119,0,1655,205,1,0,0,0,1656,1661,3,238,119,0,1657,
        1659,5,135,0,0,1658,1657,1,0,0,0,1658,1659,1,0,0,0,1659,1660,1,0,
        0,0,1660,1662,7,6,0,0,1661,1658,1,0,0,0,1661,1662,1,0,0,0,1662,207,
        1,0,0,0,1663,1664,5,82,0,0,1664,1665,5,135,0,0,1665,1666,3,238,119,
        0,1666,209,1,0,0,0,1667,1678,3,56,28,0,1668,1670,5,135,0,0,1669,
        1668,1,0,0,0,1669,1670,1,0,0,0,1670,1671,1,0,0,0,1671,1673,5,1,0,
        0,1672,1674,5,135,0,0,1673,1672,1,0,0,0,1673,1674,1,0,0,0,1674,1675,
        1,0,0,0,1675,1677,3,56,28,0,1676,1669,1,0,0,0,1677,1680,1,0,0,0,
        1678,1676,1,0,0,0,1678,1679,1,0,0,0,1679,211,1,0,0,0,1680,1678,1,
        0,0,0,1681,1682,3,214,107,0,1682,213,1,0,0,0,1683,1690,3,62,31,0,
        1684,1686,5,135,0,0,1685,1684,1,0,0,0,1685,1686,1,0,0,0,1686,1687,
        1,0,0,0,1687,1689,3,218,109,0,1688,1685,1,0,0,0,1689,1692,1,0,0,
        0,1690,1688,1,0,0,0,1690,1691,1,0,0,0,1691,1698,1,0,0,0,1692,1690,
        1,0,0,0,1693,1694,5,2,0,0,1694,1695,3,214,107,0,1695,1696,5,3,0,
        0,1696,1698,1,0,0,0,1697,1683,1,0,0,0,1697,1693,1,0,0,0,1698,215,
        1,0,0,0,1699,1704,3,62,31,0,1700,1702,5,135,0,0,1701,1700,1,0,0,
        0,1701,1702,1,0,0,0,1702,1703,1,0,0,0,1703,1705,3,218,109,0,1704,
        1701,1,0,0,0,1705,1706,1,0,0,0,1706,1704,1,0,0,0,1706,1707,1,0,0,
        0,1707,217,1,0,0,0,1708,1710,3,220,110,0,1709,1711,5,135,0,0,1710,
        1709,1,0,0,0,1710,1711,1,0,0,0,1711,1712,1,0,0,0,1712,1713,3,62,
        31,0,1713,219,1,0,0,0,1714,1716,3,334,167,0,1715,1717,5,135,0,0,
        1716,1715,1,0,0,0,1716,1717,1,0,0,0,1717,1718,1,0,0,0,1718,1720,
        3,338,169,0,1719,1721,5,135,0,0,1720,1719,1,0,0,0,1720,1721,1,0,
        0,0,1721,1723,1,0,0,0,1722,1724,3,72,36,0,1723,1722,1,0,0,0,1723,
        1724,1,0,0,0,1724,1726,1,0,0,0,1725,1727,5,135,0,0,1726,1725,1,0,
        0,0,1726,1727,1,0,0,0,1727,1728,1,0,0,0,1728,1730,3,338,169,0,1729,
        1731,5,135,0,0,1730,1729,1,0,0,0,1730,1731,1,0,0,0,1731,1732,1,0,
        0,0,1732,1733,3,336,168,0,1733,1779,1,0,0,0,1734,1736,3,334,167,
        0,1735,1737,5,135,0,0,1736,1735,1,0,0,0,1736,1737,1,0,0,0,1737,1738,
        1,0,0,0,1738,1740,3,338,169,0,1739,1741,5,135,0,0,1740,1739,1,0,
        0,0,1740,1741,1,0,0,0,1741,1743,1,0,0,0,1742,1744,3,72,36,0,1743,
        1742,1,0,0,0,1743,1744,1,0,0,0,1744,1746,1,0,0,0,1745,1747,5,135,
        0,0,1746,1745,1,0,0,0,1746,1747,1,0,0,0,1747,1748,1,0,0,0,1748,1749,
        3,338,169,0,1749,1779,1,0,0,0,1750,1752,3,338,169,0,1751,1753,5,
        135,0,0,1752,1751,1,0,0,0,1752,1753,1,0,0,0,1753,1755,1,0,0,0,1754,
        1756,3,72,36,0,1755,1754,1,0,0,0,1755,1756,1,0,0,0,1756,1758,1,0,
        0,0,1757,1759,5,135,0,0,1758,1757,1,0,0,0,1758,1759,1,0,0,0,1759,
        1760,1,0,0,0,1760,1762,3,338,169,0,1761,1763,5,135,0,0,1762,1761,
        1,0,0,0,1762,1763,1,0,0,0,1763,1764,1,0,0,0,1764,1765,3,336,168,
        0,1765,1779,1,0,0,0,1766,1768,3,338,169,0,1767,1769,5,135,0,0,1768,
        1767,1,0,0,0,1768,1769,1,0,0,0,1769,1771,1,0,0,0,1770,1772,3,72,
        36,0,1771,1770,1,0,0,0,1771,1772,1,0,0,0,1772,1774,1,0,0,0,1773,
        1775,5,135,0,0,1774,1773,1,0,0,0,1774,1775,1,0,0,0,1775,1776,1,0,
        0,0,1776,1777,3,338,169,0,1777,1779,1,0,0,0,1778,1714,1,0,0,0,1778,
        1734,1,0,0,0,1778,1750,1,0,0,0,1778,1766,1,0,0,0,1779,221,1,0,0,
        0,1780,1783,3,324,162,0,1781,1783,3,330,165,0,1782,1780,1,0,0,0,
        1782,1781,1,0,0,0,1783,223,1,0,0,0,1784,1786,5,10,0,0,1785,1787,
        5,135,0,0,1786,1785,1,0,0,0,1786,1787,1,0,0,0,1787,1788,1,0,0,0,
        1788,1802,3,234,117,0,1789,1791,5,135,0,0,1790,1789,1,0,0,0,1790,
        1791,1,0,0,0,1791,1792,1,0,0,0,1792,1794,5,25,0,0,1793,1795,5,10,
        0,0,1794,1793,1,0,0,0,1794,1795,1,0,0,0,1795,1797,1,0,0,0,1796,1798,
        5,135,0,0,1797,1796,1,0,0,0,1797,1798,1,0,0,0,1798,1799,1,0,0,0,
        1799,1801,3,234,117,0,1800,1790,1,0,0,0,1801,1804,1,0,0,0,1802,1800,
        1,0,0,0,1802,1803,1,0,0,0,1803,225,1,0,0,0,1804,1802,1,0,0,0,1805,
        1812,3,228,114,0,1806,1808,5,135,0,0,1807,1806,1,0,0,0,1807,1808,
        1,0,0,0,1808,1809,1,0,0,0,1809,1811,3,228,114,0,1810,1807,1,0,0,
        0,1811,1814,1,0,0,0,1812,1810,1,0,0,0,1812,1813,1,0,0,0,1813,227,
        1,0,0,0,1814,1812,1,0,0,0,1815,1817,5,10,0,0,1816,1818,5,135,0,0,
        1817,1816,1,0,0,0,1817,1818,1,0,0,0,1818,1819,1,0,0,0,1819,1820,
        3,232,116,0,1820,229,1,0,0,0,1821,1823,5,7,0,0,1822,1824,5,135,0,
        0,1823,1822,1,0,0,0,1823,1824,1,0,0,0,1824,1829,1,0,0,0,1825,1827,
        3,316,158,0,1826,1828,5,135,0,0,1827,1826,1,0,0,0,1827,1828,1,0,
        0,0,1828,1830,1,0,0,0,1829,1825,1,0,0,0,1829,1830,1,0,0,0,1830,1841,
        1,0,0,0,1831,1833,5,13,0,0,1832,1834,5,135,0,0,1833,1832,1,0,0,0,
        1833,1834,1,0,0,0,1834,1839,1,0,0,0,1835,1837,3,316,158,0,1836,1838,
        5,135,0,0,1837,1836,1,0,0,0,1837,1838,1,0,0,0,1838,1840,1,0,0,0,
        1839,1835,1,0,0,0,1839,1840,1,0,0,0,1840,1842,1,0,0,0,1841,1831,
        1,0,0,0,1841,1842,1,0,0,0,1842,231,1,0,0,0,1843,1844,3,332,166,0,
        1844,233,1,0,0,0,1845,1846,3,332,166,0,1846,235,1,0,0,0,1847,1852,
        3,274,137,0,1848,1850,5,135,0,0,1849,1848,1,0,0,0,1849,1850,1,0,
        0,0,1850,1851,1,0,0,0,1851,1853,3,272,136,0,1852,1849,1,0,0,0,1853,
        1854,1,0,0,0,1854,1852,1,0,0,0,1854,1855,1,0,0,0,1855,237,1,0,0,
        0,1856,1857,3,240,120,0,1857,239,1,0,0,0,1858,1865,3,242,121,0,1859,
        1860,5,135,0,0,1860,1861,5,83,0,0,1861,1862,5,135,0,0,1862,1864,
        3,242,121,0,1863,1859,1,0,0,0,1864,1867,1,0,0,0,1865,1863,1,0,0,
        0,1865,1866,1,0,0,0,1866,241,1,0,0,0,1867,1865,1,0,0,0,1868,1875,
        3,244,122,0,1869,1870,5,135,0,0,1870,1871,5,84,0,0,1871,1872,5,135,
        0,0,1872,1874,3,244,122,0,1873,1869,1,0,0,0,1874,1877,1,0,0,0,1875,
        1873,1,0,0,0,1875,1876,1,0,0,0,1876,243,1,0,0,0,1877,1875,1,0,0,
        0,1878,1885,3,246,123,0,1879,1880,5,135,0,0,1880,1881,5,85,0,0,1881,
        1882,5,135,0,0,1882,1884,3,246,123,0,1883,1879,1,0,0,0,1884,1887,
        1,0,0,0,1885,1883,1,0,0,0,1885,1886,1,0,0,0,1886,245,1,0,0,0,1887,
        1885,1,0,0,0,1888,1890,5,86,0,0,1889,1891,5,135,0,0,1890,1889,1,
        0,0,0,1890,1891,1,0,0,0,1891,1893,1,0,0,0,1892,1888,1,0,0,0,1893,
        1896,1,0,0,0,1894,1892,1,0,0,0,1894,1895,1,0,0,0,1895,1897,1,0,0,
        0,1896,1894,1,0,0,0,1897,1898,3,248,124,0,1898,247,1,0,0,0,1899,
        1911,3,74,37,0,1900,1902,5,135,0,0,1901,1900,1,0,0,0,1901,1902,1,
        0,0,0,1902,1903,1,0,0,0,1903,1905,3,264,132,0,1904,1906,5,135,0,
        0,1905,1904,1,0,0,0,1905,1906,1,0,0,0,1906,1907,1,0,0,0,1907,1908,
        3,74,37,0,1908,1910,1,0,0,0,1909,1901,1,0,0,0,1910,1913,1,0,0,0,
        1911,1909,1,0,0,0,1911,1912,1,0,0,0,1912,249,1,0,0,0,1913,1911,1,
        0,0,0,1914,1915,5,135,0,0,1915,1916,5,87,0,0,1916,1917,5,135,0,0,
        1917,1925,5,71,0,0,1918,1919,5,135,0,0,1919,1920,5,88,0,0,1920,1921,
        5,135,0,0,1921,1925,5,71,0,0,1922,1923,5,135,0,0,1923,1925,5,89,
        0,0,1924,1914,1,0,0,0,1924,1918,1,0,0,0,1924,1922,1,0,0,0,1925,1927,
        1,0,0,0,1926,1928,5,135,0,0,1927,1926,1,0,0,0,1927,1928,1,0,0,0,
        1928,1929,1,0,0,0,1929,1930,3,256,128,0,1930,251,1,0,0,0,1931,1932,
        5,135,0,0,1932,1934,5,90,0,0,1933,1935,5,135,0,0,1934,1933,1,0,0,
        0,1934,1935,1,0,0,0,1935,1936,1,0,0,0,1936,1937,3,256,128,0,1937,
        253,1,0,0,0,1938,1939,5,135,0,0,1939,1940,5,91,0,0,1940,1941,5,135,
        0,0,1941,1949,5,92,0,0,1942,1943,5,135,0,0,1943,1944,5,91,0,0,1944,
        1945,5,135,0,0,1945,1946,5,86,0,0,1946,1947,5,135,0,0,1947,1949,
        5,92,0,0,1948,1938,1,0,0,0,1948,1942,1,0,0,0,1949,255,1,0,0,0,1950,
        1971,3,266,133,0,1951,1953,5,135,0,0,1952,1951,1,0,0,0,1952,1953,
        1,0,0,0,1953,1954,1,0,0,0,1954,1956,3,262,131,0,1955,1957,5,135,
        0,0,1956,1955,1,0,0,0,1956,1957,1,0,0,0,1957,1958,1,0,0,0,1958,1959,
        3,266,133,0,1959,1970,1,0,0,0,1960,1962,5,135,0,0,1961,1960,1,0,
        0,0,1961,1962,1,0,0,0,1962,1963,1,0,0,0,1963,1965,3,262,131,0,1964,
        1966,5,135,0,0,1965,1964,1,0,0,0,1965,1966,1,0,0,0,1966,1967,1,0,
        0,0,1967,1968,3,266,133,0,1968,1970,1,0,0,0,1969,1952,1,0,0,0,1969,
        1961,1,0,0,0,1970,1973,1,0,0,0,1971,1969,1,0,0,0,1971,1972,1,0,0,
        0,1972,257,1,0,0,0,1973,1971,1,0,0,0,1974,1975,7,1,0,0,1975,259,
        1,0,0,0,1976,1977,5,16,0,0,1977,261,1,0,0,0,1978,1979,7,2,0,0,1979,
        263,1,0,0,0,1980,1981,7,3,0,0,1981,265,1,0,0,0,1982,2012,3,268,134,
        0,1983,1985,5,135,0,0,1984,1983,1,0,0,0,1984,1985,1,0,0,0,1985,1986,
        1,0,0,0,1986,1988,3,258,129,0,1987,1989,5,135,0,0,1988,1987,1,0,
        0,0,1988,1989,1,0,0,0,1989,1990,1,0,0,0,1990,1991,3,268,134,0,1991,
        2011,1,0,0,0,1992,1994,5,135,0,0,1993,1992,1,0,0,0,1993,1994,1,0,
        0,0,1994,1995,1,0,0,0,1995,1997,3,258,129,0,1996,1998,5,135,0,0,
        1997,1996,1,0,0,0,1997,1998,1,0,0,0,1998,1999,1,0,0,0,1999,2000,
        3,268,134,0,2000,2011,1,0,0,0,2001,2003,5,135,0,0,2002,2001,1,0,
        0,0,2002,2003,1,0,0,0,2003,2004,1,0,0,0,2004,2006,3,258,129,0,2005,
        2007,5,135,0,0,2006,2005,1,0,0,0,2006,2007,1,0,0,0,2007,2008,1,0,
        0,0,2008,2009,3,268,134,0,2009,2011,1,0,0,0,2010,1984,1,0,0,0,2010,
        1993,1,0,0,0,2010,2002,1,0,0,0,2011,2014,1,0,0,0,2012,2010,1,0,0,
        0,2012,2013,1,0,0,0,2013,267,1,0,0,0,2014,2012,1,0,0,0,2015,2027,
        3,270,135,0,2016,2018,5,135,0,0,2017,2016,1,0,0,0,2017,2018,1,0,
        0,0,2018,2019,1,0,0,0,2019,2021,3,260,130,0,2020,2022,5,135,0,0,
        2021,2020,1,0,0,0,2021,2022,1,0,0,0,2022,2023,1,0,0,0,2023,2024,
        3,270,135,0,2024,2026,1,0,0,0,2025,2017,1,0,0,0,2026,2029,1,0,0,
        0,2027,2025,1,0,0,0,2027,2028,1,0,0,0,2028,269,1,0,0,0,2029,2027,
        1,0,0,0,2030,2037,3,76,38,0,2031,2033,7,2,0,0,2032,2034,5,135,0,
        0,2033,2032,1,0,0,0,2033,2034,1,0,0,0,2034,2035,1,0,0,0,2035,2037,
        3,76,38,0,2036,2030,1,0,0,0,2036,2031,1,0,0,0,2037,271,1,0,0,0,2038,
        2040,5,6,0,0,2039,2041,5,135,0,0,2040,2039,1,0,0,0,2040,2041,1,0,
        0,0,2041,2042,1,0,0,0,2042,2043,3,328,164,0,2043,273,1,0,0,0,2044,
        2069,3,310,155,0,2045,2069,3,330,165,0,2046,2069,3,276,138,0,2047,
        2049,5,93,0,0,2048,2050,5,135,0,0,2049,2048,1,0,0,0,2049,2050,1,
        0,0,0,2050,2051,1,0,0,0,2051,2053,5,2,0,0,2052,2054,5,135,0,0,2053,
        2052,1,0,0,0,2053,2054,1,0,0,0,2054,2055,1,0,0,0,2055,2057,5,7,0,
        0,2056,2058,5,135,0,0,2057,2056,1,0,0,0,2057,2058,1,0,0,0,2058,2059,
        1,0,0,0,2059,2069,5,3,0,0,2060,2069,3,280,140,0,2061,2069,3,282,
        141,0,2062,2069,3,284,142,0,2063,2069,3,286,143,0,2064,2069,3,288,
        144,0,2065,2069,3,292,146,0,2066,2069,3,48,24,0,2067,2069,3,308,
        154,0,2068,2044,1,0,0,0,2068,2045,1,0,0,0,2068,2046,1,0,0,0,2068,
        2047,1,0,0,0,2068,2060,1,0,0,0,2068,2061,1,0,0,0,2068,2062,1,0,0,
        0,2068,2063,1,0,0,0,2068,2064,1,0,0,0,2068,2065,1,0,0,0,2068,2066,
        1,0,0,0,2068,2067,1,0,0,0,2069,275,1,0,0,0,2070,2075,5,94,0,0,2071,
        2073,5,135,0,0,2072,2071,1,0,0,0,2072,2073,1,0,0,0,2073,2074,1,0,
        0,0,2074,2076,3,278,139,0,2075,2072,1,0,0,0,2076,2077,1,0,0,0,2077,
        2075,1,0,0,0,2077,2078,1,0,0,0,2078,2093,1,0,0,0,2079,2081,5,94,
        0,0,2080,2082,5,135,0,0,2081,2080,1,0,0,0,2081,2082,1,0,0,0,2082,
        2083,1,0,0,0,2083,2088,3,238,119,0,2084,2086,5,135,0,0,2085,2084,
        1,0,0,0,2085,2086,1,0,0,0,2086,2087,1,0,0,0,2087,2089,3,278,139,
        0,2088,2085,1,0,0,0,2089,2090,1,0,0,0,2090,2088,1,0,0,0,2090,2091,
        1,0,0,0,2091,2093,1,0,0,0,2092,2070,1,0,0,0,2092,2079,1,0,0,0,2093,
        2102,1,0,0,0,2094,2096,5,135,0,0,2095,2094,1,0,0,0,2095,2096,1,0,
        0,0,2096,2097,1,0,0,0,2097,2099,5,95,0,0,2098,2100,5,135,0,0,2099,
        2098,1,0,0,0,2099,2100,1,0,0,0,2100,2101,1,0,0,0,2101,2103,3,238,
        119,0,2102,2095,1,0,0,0,2102,2103,1,0,0,0,2103,2105,1,0,0,0,2104,
        2106,5,135,0,0,2105,2104,1,0,0,0,2105,2106,1,0,0,0,2106,2107,1,0,
        0,0,2107,2108,5,96,0,0,2108,277,1,0,0,0,2109,2111,5,97,0,0,2110,
        2112,5,135,0,0,2111,2110,1,0,0,0,2111,2112,1,0,0,0,2112,2113,1,0,
        0,0,2113,2115,3,238,119,0,2114,2116,5,135,0,0,2115,2114,1,0,0,0,
        2115,2116,1,0,0,0,2116,2117,1,0,0,0,2117,2119,5,98,0,0,2118,2120,
        5,135,0,0,2119,2118,1,0,0,0,2119,2120,1,0,0,0,2120,2121,1,0,0,0,
        2121,2122,3,238,119,0,2122,279,1,0,0,0,2123,2125,5,11,0,0,2124,2126,
        5,135,0,0,2125,2124,1,0,0,0,2125,2126,1,0,0,0,2126,2127,1,0,0,0,
        2127,2136,3,50,25,0,2128,2130,5,135,0,0,2129,2128,1,0,0,0,2129,2130,
        1,0,0,0,2130,2131,1,0,0,0,2131,2133,5,25,0,0,2132,2134,5,135,0,0,
        2133,2132,1,0,0,0,2133,2134,1,0,0,0,2134,2135,1,0,0,0,2135,2137,
        3,238,119,0,2136,2129,1,0,0,0,2136,2137,1,0,0,0,2137,2139,1,0,0,
        0,2138,2140,5,135,0,0,2139,2138,1,0,0,0,2139,2140,1,0,0,0,2140,2141,
        1,0,0,0,2141,2142,5,12,0,0,2142,281,1,0,0,0,2143,2145,5,11,0,0,2144,
        2146,5,135,0,0,2145,2144,1,0,0,0,2145,2146,1,0,0,0,2146,2155,1,0,
        0,0,2147,2149,3,308,154,0,2148,2150,5,135,0,0,2149,2148,1,0,0,0,
        2149,2150,1,0,0,0,2150,2151,1,0,0,0,2151,2153,5,4,0,0,2152,2154,
        5,135,0,0,2153,2152,1,0,0,0,2153,2154,1,0,0,0,2154,2156,1,0,0,0,
        2155,2147,1,0,0,0,2155,2156,1,0,0,0,2156,2157,1,0,0,0,2157,2159,
        3,216,108,0,2158,2160,5,135,0,0,2159,2158,1,0,0,0,2159,2160,1,0,
        0,0,2160,2165,1,0,0,0,2161,2163,3,208,104,0,2162,2164,5,135,0,0,
        2163,2162,1,0,0,0,2163,2164,1,0,0,0,2164,2166,1,0,0,0,2165,2161,
        1,0,0,0,2165,2166,1,0,0,0,2166,2167,1,0,0,0,2167,2169,5,25,0,0,2168,
        2170,5,135,0,0,2169,2168,1,0,0,0,2169,2170,1,0,0,0,2170,2171,1,0,
        0,0,2171,2173,3,238,119,0,2172,2174,5,135,0,0,2173,2172,1,0,0,0,
        2173,2174,1,0,0,0,2174,2175,1,0,0,0,2175,2176,5,12,0,0,2176,283,
        1,0,0,0,2177,2179,5,57,0,0,2178,2180,5,135,0,0,2179,2178,1,0,0,0,
        2179,2180,1,0,0,0,2180,2181,1,0,0,0,2181,2183,5,2,0,0,2182,2184,
        5,135,0,0,2183,2182,1,0,0,0,2183,2184,1,0,0,0,2184,2185,1,0,0,0,
        2185,2187,3,50,25,0,2186,2188,5,135,0,0,2187,2186,1,0,0,0,2187,2188,
        1,0,0,0,2188,2189,1,0,0,0,2189,2190,5,3,0,0,2190,2234,1,0,0,0,2191,
        2193,5,99,0,0,2192,2194,5,135,0,0,2193,2192,1,0,0,0,2193,2194,1,
        0,0,0,2194,2195,1,0,0,0,2195,2197,5,2,0,0,2196,2198,5,135,0,0,2197,
        2196,1,0,0,0,2197,2198,1,0,0,0,2198,2199,1,0,0,0,2199,2201,3,50,
        25,0,2200,2202,5,135,0,0,2201,2200,1,0,0,0,2201,2202,1,0,0,0,2202,
        2203,1,0,0,0,2203,2204,5,3,0,0,2204,2234,1,0,0,0,2205,2207,5,100,
        0,0,2206,2208,5,135,0,0,2207,2206,1,0,0,0,2207,2208,1,0,0,0,2208,
        2209,1,0,0,0,2209,2211,5,2,0,0,2210,2212,5,135,0,0,2211,2210,1,0,
        0,0,2211,2212,1,0,0,0,2212,2213,1,0,0,0,2213,2215,3,50,25,0,2214,
        2216,5,135,0,0,2215,2214,1,0,0,0,2215,2216,1,0,0,0,2216,2217,1,0,
        0,0,2217,2218,5,3,0,0,2218,2234,1,0,0,0,2219,2221,5,101,0,0,2220,
        2222,5,135,0,0,2221,2220,1,0,0,0,2221,2222,1,0,0,0,2222,2223,1,0,
        0,0,2223,2225,5,2,0,0,2224,2226,5,135,0,0,2225,2224,1,0,0,0,2225,
        2226,1,0,0,0,2226,2227,1,0,0,0,2227,2229,3,50,25,0,2228,2230,5,135,
        0,0,2229,2228,1,0,0,0,2229,2230,1,0,0,0,2230,2231,1,0,0,0,2231,2232,
        5,3,0,0,2232,2234,1,0,0,0,2233,2177,1,0,0,0,2233,2191,1,0,0,0,2233,
        2205,1,0,0,0,2233,2219,1,0,0,0,2234,285,1,0,0,0,2235,2236,3,216,
        108,0,2236,287,1,0,0,0,2237,2239,5,2,0,0,2238,2240,5,135,0,0,2239,
        2238,1,0,0,0,2239,2240,1,0,0,0,2240,2241,1,0,0,0,2241,2243,3,238,
        119,0,2242,2244,5,135,0,0,2243,2242,1,0,0,0,2243,2244,1,0,0,0,2244,
        2245,1,0,0,0,2245,2246,5,3,0,0,2246,289,1,0,0,0,2247,2248,3,308,
        154,0,2248,2249,5,135,0,0,2249,2250,5,90,0,0,2250,2251,5,135,0,0,
        2251,2252,3,238,119,0,2252,291,1,0,0,0,2253,2255,3,296,148,0,2254,
        2256,5,135,0,0,2255,2254,1,0,0,0,2255,2256,1,0,0,0,2256,2257,1,0,
        0,0,2257,2259,5,2,0,0,2258,2260,5,135,0,0,2259,2258,1,0,0,0,2259,
        2260,1,0,0,0,2260,2265,1,0,0,0,2261,2263,5,73,0,0,2262,2264,5,135,
        0,0,2263,2262,1,0,0,0,2263,2264,1,0,0,0,2264,2266,1,0,0,0,2265,2261,
        1,0,0,0,2265,2266,1,0,0,0,2266,2284,1,0,0,0,2267,2269,3,294,147,
        0,2268,2270,5,135,0,0,2269,2268,1,0,0,0,2269,2270,1,0,0,0,2270,2281,
        1,0,0,0,2271,2273,5,1,0,0,2272,2274,5,135,0,0,2273,2272,1,0,0,0,
        2273,2274,1,0,0,0,2274,2275,1,0,0,0,2275,2277,3,294,147,0,2276,2278,
        5,135,0,0,2277,2276,1,0,0,0,2277,2278,1,0,0,0,2278,2280,1,0,0,0,
        2279,2271,1,0,0,0,2280,2283,1,0,0,0,2281,2279,1,0,0,0,2281,2282,
        1,0,0,0,2282,2285,1,0,0,0,2283,2281,1,0,0,0,2284,2267,1,0,0,0,2284,
        2285,1,0,0,0,2285,2286,1,0,0,0,2286,2287,5,3,0,0,2287,293,1,0,0,
        0,2288,2289,3,238,119,0,2289,295,1,0,0,0,2290,2291,3,306,153,0,2291,
        2292,3,152,76,0,2292,297,1,0,0,0,2293,2295,3,304,152,0,2294,2296,
        5,135,0,0,2295,2294,1,0,0,0,2295,2296,1,0,0,0,2296,2297,1,0,0,0,
        2297,2299,5,2,0,0,2298,2300,5,135,0,0,2299,2298,1,0,0,0,2299,2300,
        1,0,0,0,2300,2318,1,0,0,0,2301,2303,3,238,119,0,2302,2304,5,135,
        0,0,2303,2302,1,0,0,0,2303,2304,1,0,0,0,2304,2315,1,0,0,0,2305,2307,
        5,1,0,0,2306,2308,5,135,0,0,2307,2306,1,0,0,0,2307,2308,1,0,0,0,
        2308,2309,1,0,0,0,2309,2311,3,238,119,0,2310,2312,5,135,0,0,2311,
        2310,1,0,0,0,2311,2312,1,0,0,0,2312,2314,1,0,0,0,2313,2305,1,0,0,
        0,2314,2317,1,0,0,0,2315,2313,1,0,0,0,2315,2316,1,0,0,0,2316,2319,
        1,0,0,0,2317,2315,1,0,0,0,2318,2301,1,0,0,0,2318,2319,1,0,0,0,2319,
        2320,1,0,0,0,2320,2321,5,3,0,0,2321,299,1,0,0,0,2322,2323,3,304,
        152,0,2323,301,1,0,0,0,2324,2325,3,152,76,0,2325,303,1,0,0,0,2326,
        2327,3,306,153,0,2327,2328,3,152,76,0,2328,305,1,0,0,0,2329,2330,
        3,152,76,0,2330,2331,5,6,0,0,2331,2333,1,0,0,0,2332,2329,1,0,0,0,
        2333,2336,1,0,0,0,2334,2332,1,0,0,0,2334,2335,1,0,0,0,2335,307,1,
        0,0,0,2336,2334,1,0,0,0,2337,2338,3,152,76,0,2338,309,1,0,0,0,2339,
        2346,3,312,156,0,2340,2346,5,92,0,0,2341,2346,3,314,157,0,2342,2346,
        5,117,0,0,2343,2346,3,320,160,0,2344,2346,3,324,162,0,2345,2339,
        1,0,0,0,2345,2340,1,0,0,0,2345,2341,1,0,0,0,2345,2342,1,0,0,0,2345,
        2343,1,0,0,0,2345,2344,1,0,0,0,2346,311,1,0,0,0,2347,2348,7,7,0,
        0,2348,313,1,0,0,0,2349,2352,3,318,159,0,2350,2352,3,316,158,0,2351,
        2349,1,0,0,0,2351,2350,1,0,0,0,2352,315,1,0,0,0,2353,2354,7,8,0,
        0,2354,317,1,0,0,0,2355,2356,7,9,0,0,2356,319,1,0,0,0,2357,2359,
        5,11,0,0,2358,2360,5,135,0,0,2359,2358,1,0,0,0,2359,2360,1,0,0,0,
        2360,2378,1,0,0,0,2361,2363,3,322,161,0,2362,2364,5,135,0,0,2363,
        2362,1,0,0,0,2363,2364,1,0,0,0,2364,2375,1,0,0,0,2365,2367,5,1,0,
        0,2366,2368,5,135,0,0,2367,2366,1,0,0,0,2367,2368,1,0,0,0,2368,2369,
        1,0,0,0,2369,2371,3,322,161,0,2370,2372,5,135,0,0,2371,2370,1,0,
        0,0,2371,2372,1,0,0,0,2372,2374,1,0,0,0,2373,2365,1,0,0,0,2374,2377,
        1,0,0,0,2375,2373,1,0,0,0,2375,2376,1,0,0,0,2376,2379,1,0,0,0,2377,
        2375,1,0,0,0,2378,2361,1,0,0,0,2378,2379,1,0,0,0,2379,2380,1,0,0,
        0,2380,2381,5,12,0,0,2381,321,1,0,0,0,2382,2383,3,238,119,0,2383,
        323,1,0,0,0,2384,2386,5,8,0,0,2385,2387,5,135,0,0,2386,2385,1,0,
        0,0,2386,2387,1,0,0,0,2387,2399,1,0,0,0,2388,2396,3,326,163,0,2389,
        2391,5,1,0,0,2390,2392,5,135,0,0,2391,2390,1,0,0,0,2391,2392,1,0,
        0,0,2392,2393,1,0,0,0,2393,2395,3,326,163,0,2394,2389,1,0,0,0,2395,
        2398,1,0,0,0,2396,2394,1,0,0,0,2396,2397,1,0,0,0,2397,2400,1,0,0,
        0,2398,2396,1,0,0,0,2399,2388,1,0,0,0,2399,2400,1,0,0,0,2400,2401,
        1,0,0,0,2401,2402,5,9,0,0,2402,325,1,0,0,0,2403,2405,3,328,164,0,
        2404,2406,5,135,0,0,2405,2404,1,0,0,0,2405,2406,1,0,0,0,2406,2407,
        1,0,0,0,2407,2409,5,10,0,0,2408,2410,5,135,0,0,2409,2408,1,0,0,0,
        2409,2410,1,0,0,0,2410,2411,1,0,0,0,2411,2413,3,238,119,0,2412,2414,
        5,135,0,0,2413,2412,1,0,0,0,2413,2414,1,0,0,0,2414,327,1,0,0,0,2415,
        2416,3,332,166,0,2416,329,1,0,0,0,2417,2420,5,26,0,0,2418,2421,3,
        152,76,0,2419,2421,5,106,0,0,2420,2418,1,0,0,0,2420,2419,1,0,0,0,
        2421,331,1,0,0,0,2422,2425,3,152,76,0,2423,2425,3,154,77,0,2424,
        2422,1,0,0,0,2424,2423,1,0,0,0,2425,333,1,0,0,0,2426,2427,7,10,0,
        0,2427,335,1,0,0,0,2428,2429,7,11,0,0,2429,337,1,0,0,0,2430,2431,
        7,12,0,0,2431,339,1,0,0,0,440,343,347,351,355,359,361,364,367,375,
        379,383,386,390,397,401,404,408,412,416,421,425,428,432,436,440,
        445,449,452,456,460,464,468,471,474,477,481,487,491,497,501,507,
        513,519,522,529,532,537,541,545,551,554,558,564,568,572,576,580,
        584,588,593,597,601,603,607,611,615,617,619,625,629,635,641,647,
        652,658,661,667,669,673,677,682,686,689,696,700,704,709,713,718,
        723,726,730,734,739,742,744,747,753,756,760,766,772,776,782,786,
        791,795,799,803,809,813,819,823,825,829,831,835,837,841,843,849,
        853,860,868,871,877,881,883,886,890,894,896,900,904,906,910,912,
        915,919,921,925,927,936,940,944,946,950,957,961,965,975,980,984,
        988,992,997,1001,1005,1009,1011,1014,1020,1025,1035,1039,1043,1047,
        1050,1054,1057,1074,1084,1094,1099,1103,1110,1114,1120,1136,1140,
        1144,1149,1153,1157,1159,1177,1180,1187,1201,1205,1209,1214,1218,
        1223,1227,1231,1233,1238,1242,1248,1254,1257,1261,1265,1267,1272,
        1277,1281,1284,1288,1293,1297,1301,1305,1307,1310,1315,1322,1326,
        1330,1340,1347,1351,1354,1357,1365,1370,1377,1382,1385,1389,1393,
        1397,1403,1407,1412,1417,1421,1424,1426,1431,1438,1442,1452,1459,
        1472,1476,1482,1486,1490,1495,1500,1504,1508,1512,1517,1524,1528,
        1533,1538,1542,1547,1551,1554,1561,1566,1569,1575,1578,1584,1588,
        1592,1596,1600,1605,1610,1614,1619,1622,1631,1640,1645,1658,1661,
        1669,1673,1678,1685,1690,1697,1701,1706,1710,1716,1720,1723,1726,
        1730,1736,1740,1743,1746,1752,1755,1758,1762,1768,1771,1774,1778,
        1782,1786,1790,1794,1797,1802,1807,1812,1817,1823,1827,1829,1833,
        1837,1839,1841,1849,1854,1865,1875,1885,1890,1894,1901,1905,1911,
        1924,1927,1934,1948,1952,1956,1961,1965,1969,1971,1984,1988,1993,
        1997,2002,2006,2010,2012,2017,2021,2027,2033,2036,2040,2049,2053,
        2057,2068,2072,2077,2081,2085,2090,2092,2095,2099,2102,2105,2111,
        2115,2119,2125,2129,2133,2136,2139,2145,2149,2153,2155,2159,2163,
        2165,2169,2173,2179,2183,2187,2193,2197,2201,2207,2211,2215,2221,
        2225,2229,2233,2239,2243,2255,2259,2263,2265,2269,2273,2277,2281,
        2284,2295,2299,2303,2307,2311,2315,2318,2334,2345,2351,2359,2363,
        2367,2371,2375,2378,2386,2391,2396,2399,2405,2409,2413,2420,2424
    ]

class s_cypherParser ( Parser ):

    grammarFileName = "s_cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "','", "'('", "')'", "'='", "'+='", "'.'", 
                     "'*'", "'{'", "'}'", "':'", "'['", "']'", "'..'", "'/'", 
                     "'%'", "'^'", "'+'", "'-'", "'<>'", "'<'", "'<='", 
                     "'>'", "'>='", "';'", "'|'", "'$'", "'\\u27E8'", "'\\u3008'", 
                     "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
                     "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", 
                     "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", 
                     "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
                     "'\\uFF0D'", "<INVALID>", "<INVALID>", "'NOW'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "AtT", "PoundValue", "NOW", 
                      "AT_TIME", "SNAPSHOT", "BETWEEN", "SCOPE", "STALE", 
                      "DURING", "OVERLAPS", "UNION", "ALL", "OPTIONAL", 
                      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", 
                      "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", 
                      "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", 
                      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
                      "WHERE", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", 
                      "CONTAINS", "IN", "IS", "NULL", "COUNT", "CASE", "ELSE", 
                      "END", "WHEN", "THEN", "ANY", "NONE", "SINGLE", "EXISTS", 
                      "TRUE", "FALSE", "HexInteger", "DecimalInteger", "OctalInteger", 
                      "HexLetter", "HexDigit", "Digit", "NonZeroDigit", 
                      "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", 
                      "RegularDecimalReal", "StringLiteral", "EscapedChar", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Query = 0
    RULE_oC_Match = 1
    RULE_oC_UpdatingClause = 2
    RULE_s_Create = 3
    RULE_s_Merge = 4
    RULE_s_Set = 5
    RULE_s_Stale = 6
    RULE_oC_SetItem = 7
    RULE_s_SetPropertyItemOne = 8
    RULE_s_SetPropertyItemTwo = 9
    RULE_s_SetValueItem = 10
    RULE_s_StaleItem = 11
    RULE_s_Delete = 12
    RULE_s_DeleteItem = 13
    RULE_oC_RemoveItem = 14
    RULE_s_AtTime = 15
    RULE_s_Between = 16
    RULE_s_TimeWindowLimit = 17
    RULE_oC_InQueryCall = 18
    RULE_oC_StandaloneCall = 19
    RULE_s_YieldItems = 20
    RULE_s_YieldItem = 21
    RULE_s_WithPartQuery = 22
    RULE_s_With = 23
    RULE_oC_ExistentialSubquery = 24
    RULE_oC_FilterExpression = 25
    RULE_s_Snapshot = 26
    RULE_s_Scope = 27
    RULE_oC_PatternPart = 28
    RULE_s_PathFunctionPattern = 29
    RULE_s_SinglePathPattern = 30
    RULE_oC_NodePattern = 31
    RULE_s_Properties = 32
    RULE_s_PropertiesPattern = 33
    RULE_s_PropertyNode = 34
    RULE_s_ValueNode = 35
    RULE_oC_RelationshipDetail = 36
    RULE_oC_StringListNullPredicateExpression = 37
    RULE_oC_ListOperatorExpression = 38
    RULE_s_SingleIndexExpression = 39
    RULE_s_DoubleIndexExpression = 40
    RULE_s_LeftExpression = 41
    RULE_s_RightExpression = 42
    RULE_oC_PropertyOrLabelsExpression = 43
    RULE_s_AtTExpression = 44
    RULE_s_PropertyLookupTime = 45
    RULE_s_TimePredicateExpression = 46
    RULE_s_AtTElement = 47
    RULE_s_Where = 48
    RULE_s_WhereExpression = 49
    RULE_s_OrWhereExpression = 50
    RULE_s_XorWhereExpression = 51
    RULE_s_AndWhereExpression = 52
    RULE_s_NotWhereExpression = 53
    RULE_s_ComparisonWhereExpression = 54
    RULE_s_MultiplyDivideModuloWhereOperator = 55
    RULE_s_PowerOfWhereOperator = 56
    RULE_s_AddOrSubtractWhereOperator = 57
    RULE_s_ComparisonWhereOperator = 58
    RULE_s_StringListNullPredicateWhereExpression = 59
    RULE_s_AddOrSubtractWhereExpression = 60
    RULE_s_TimePredicateWhereExpression = 61
    RULE_s_StringPredicateWhereExpression = 62
    RULE_s_ListPredicateWhereExpression = 63
    RULE_s_NullPredicateWhereExpression = 64
    RULE_s_MultiplyDivideModuloWhereExpression = 65
    RULE_s_PowerOfWhereExpression = 66
    RULE_s_UnaryAddOrSubtractWhereExpression = 67
    RULE_s_ListOperatorWhereExpression = 68
    RULE_s_PropertyOrLabelsWhereExpression = 69
    RULE_s_AtTWhereExpression = 70
    RULE_s_SingleIndexWhereExpression = 71
    RULE_s_DoubleIndexWhereExpression = 72
    RULE_s_LeftWhereExpression = 73
    RULE_s_RightWhereExpression = 74
    RULE_s_TimePointLiteral = 75
    RULE_oC_SymbolicName = 76
    RULE_oC_ReservedWord = 77
    RULE_oC_Cypher = 78
    RULE_oC_Statement = 79
    RULE_oC_RegularQuery = 80
    RULE_oC_Union = 81
    RULE_oC_SingleQuery = 82
    RULE_oC_SinglePartQuery = 83
    RULE_oC_MultiPartQuery = 84
    RULE_oC_ReadingClause = 85
    RULE_oC_Unwind = 86
    RULE_oC_Merge = 87
    RULE_oC_MergeAction = 88
    RULE_oC_Create = 89
    RULE_oC_Set = 90
    RULE_oC_Delete = 91
    RULE_oC_Remove = 92
    RULE_oC_YieldItems = 93
    RULE_oC_YieldItem = 94
    RULE_oC_With = 95
    RULE_oC_Return = 96
    RULE_oC_ProjectionBody = 97
    RULE_oC_ProjectionItems = 98
    RULE_oC_ProjectionItem = 99
    RULE_oC_Order = 100
    RULE_oC_Skip = 101
    RULE_oC_Limit = 102
    RULE_oC_SortItem = 103
    RULE_oC_Where = 104
    RULE_oC_Pattern = 105
    RULE_oC_AnonymousPatternPart = 106
    RULE_oC_PatternElement = 107
    RULE_oC_RelationshipsPattern = 108
    RULE_oC_PatternElementChain = 109
    RULE_oC_RelationshipPattern = 110
    RULE_oC_Properties = 111
    RULE_oC_RelationshipTypes = 112
    RULE_oC_NodeLabels = 113
    RULE_oC_NodeLabel = 114
    RULE_oC_RangeLiteral = 115
    RULE_oC_LabelName = 116
    RULE_oC_RelTypeName = 117
    RULE_oC_PropertyExpression = 118
    RULE_oC_Expression = 119
    RULE_oC_OrExpression = 120
    RULE_oC_XorExpression = 121
    RULE_oC_AndExpression = 122
    RULE_oC_NotExpression = 123
    RULE_oC_ComparisonExpression = 124
    RULE_oC_StringPredicateExpression = 125
    RULE_oC_ListPredicateExpression = 126
    RULE_oC_NullPredicateExpression = 127
    RULE_oC_AddOrSubtractExpression = 128
    RULE_s_MultiplyDivideModuloOperator = 129
    RULE_s_PowerOfOperator = 130
    RULE_s_AddOrSubtractOperator = 131
    RULE_s_ComparisonOperator = 132
    RULE_oC_MultiplyDivideModuloExpression = 133
    RULE_oC_PowerOfExpression = 134
    RULE_oC_UnaryAddOrSubtractExpression = 135
    RULE_oC_PropertyLookup = 136
    RULE_oC_Atom = 137
    RULE_oC_CaseExpression = 138
    RULE_oC_CaseAlternative = 139
    RULE_oC_ListComprehension = 140
    RULE_oC_PatternComprehension = 141
    RULE_oC_Quantifier = 142
    RULE_oC_PatternPredicate = 143
    RULE_oC_ParenthesizedExpression = 144
    RULE_oC_IdInColl = 145
    RULE_oC_FunctionInvocation = 146
    RULE_s_FunctionInvocationExpression = 147
    RULE_oC_FunctionName = 148
    RULE_oC_ExplicitProcedureInvocation = 149
    RULE_oC_ImplicitProcedureInvocation = 150
    RULE_oC_ProcedureResultField = 151
    RULE_oC_ProcedureName = 152
    RULE_oC_Namespace = 153
    RULE_oC_Variable = 154
    RULE_oC_Literal = 155
    RULE_oC_BooleanLiteral = 156
    RULE_oC_NumberLiteral = 157
    RULE_oC_IntegerLiteral = 158
    RULE_oC_DoubleLiteral = 159
    RULE_oC_ListLiteral = 160
    RULE_s_ListLiteralExpression = 161
    RULE_oC_MapLiteral = 162
    RULE_s_MapKeyValue = 163
    RULE_oC_PropertyKeyName = 164
    RULE_oC_Parameter = 165
    RULE_oC_SchemaName = 166
    RULE_oC_LeftArrowHead = 167
    RULE_oC_RightArrowHead = 168
    RULE_oC_Dash = 169

    ruleNames =  [ "oC_Query", "oC_Match", "oC_UpdatingClause", "s_Create", 
                   "s_Merge", "s_Set", "s_Stale", "oC_SetItem", "s_SetPropertyItemOne", 
                   "s_SetPropertyItemTwo", "s_SetValueItem", "s_StaleItem", 
                   "s_Delete", "s_DeleteItem", "oC_RemoveItem", "s_AtTime", 
                   "s_Between", "s_TimeWindowLimit", "oC_InQueryCall", "oC_StandaloneCall", 
                   "s_YieldItems", "s_YieldItem", "s_WithPartQuery", "s_With", 
                   "oC_ExistentialSubquery", "oC_FilterExpression", "s_Snapshot", 
                   "s_Scope", "oC_PatternPart", "s_PathFunctionPattern", 
                   "s_SinglePathPattern", "oC_NodePattern", "s_Properties", 
                   "s_PropertiesPattern", "s_PropertyNode", "s_ValueNode", 
                   "oC_RelationshipDetail", "oC_StringListNullPredicateExpression", 
                   "oC_ListOperatorExpression", "s_SingleIndexExpression", 
                   "s_DoubleIndexExpression", "s_LeftExpression", "s_RightExpression", 
                   "oC_PropertyOrLabelsExpression", "s_AtTExpression", "s_PropertyLookupTime", 
                   "s_TimePredicateExpression", "s_AtTElement", "s_Where", 
                   "s_WhereExpression", "s_OrWhereExpression", "s_XorWhereExpression", 
                   "s_AndWhereExpression", "s_NotWhereExpression", "s_ComparisonWhereExpression", 
                   "s_MultiplyDivideModuloWhereOperator", "s_PowerOfWhereOperator", 
                   "s_AddOrSubtractWhereOperator", "s_ComparisonWhereOperator", 
                   "s_StringListNullPredicateWhereExpression", "s_AddOrSubtractWhereExpression", 
                   "s_TimePredicateWhereExpression", "s_StringPredicateWhereExpression", 
                   "s_ListPredicateWhereExpression", "s_NullPredicateWhereExpression", 
                   "s_MultiplyDivideModuloWhereExpression", "s_PowerOfWhereExpression", 
                   "s_UnaryAddOrSubtractWhereExpression", "s_ListOperatorWhereExpression", 
                   "s_PropertyOrLabelsWhereExpression", "s_AtTWhereExpression", 
                   "s_SingleIndexWhereExpression", "s_DoubleIndexWhereExpression", 
                   "s_LeftWhereExpression", "s_RightWhereExpression", "s_TimePointLiteral", 
                   "oC_SymbolicName", "oC_ReservedWord", "oC_Cypher", "oC_Statement", 
                   "oC_RegularQuery", "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", 
                   "oC_MultiPartQuery", "oC_ReadingClause", "oC_Unwind", 
                   "oC_Merge", "oC_MergeAction", "oC_Create", "oC_Set", 
                   "oC_Delete", "oC_Remove", "oC_YieldItems", "oC_YieldItem", 
                   "oC_With", "oC_Return", "oC_ProjectionBody", "oC_ProjectionItems", 
                   "oC_ProjectionItem", "oC_Order", "oC_Skip", "oC_Limit", 
                   "oC_SortItem", "oC_Where", "oC_Pattern", "oC_AnonymousPatternPart", 
                   "oC_PatternElement", "oC_RelationshipsPattern", "oC_PatternElementChain", 
                   "oC_RelationshipPattern", "oC_Properties", "oC_RelationshipTypes", 
                   "oC_NodeLabels", "oC_NodeLabel", "oC_RangeLiteral", "oC_LabelName", 
                   "oC_RelTypeName", "oC_PropertyExpression", "oC_Expression", 
                   "oC_OrExpression", "oC_XorExpression", "oC_AndExpression", 
                   "oC_NotExpression", "oC_ComparisonExpression", "oC_StringPredicateExpression", 
                   "oC_ListPredicateExpression", "oC_NullPredicateExpression", 
                   "oC_AddOrSubtractExpression", "s_MultiplyDivideModuloOperator", 
                   "s_PowerOfOperator", "s_AddOrSubtractOperator", "s_ComparisonOperator", 
                   "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", 
                   "oC_UnaryAddOrSubtractExpression", "oC_PropertyLookup", 
                   "oC_Atom", "oC_CaseExpression", "oC_CaseAlternative", 
                   "oC_ListComprehension", "oC_PatternComprehension", "oC_Quantifier", 
                   "oC_PatternPredicate", "oC_ParenthesizedExpression", 
                   "oC_IdInColl", "oC_FunctionInvocation", "s_FunctionInvocationExpression", 
                   "oC_FunctionName", "oC_ExplicitProcedureInvocation", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_Variable", "oC_Literal", 
                   "oC_BooleanLiteral", "oC_NumberLiteral", "oC_IntegerLiteral", 
                   "oC_DoubleLiteral", "oC_ListLiteral", "s_ListLiteralExpression", 
                   "oC_MapLiteral", "s_MapKeyValue", "oC_PropertyKeyName", 
                   "oC_Parameter", "oC_SchemaName", "oC_LeftArrowHead", 
                   "oC_RightArrowHead", "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    AtT=46
    PoundValue=47
    NOW=48
    AT_TIME=49
    SNAPSHOT=50
    BETWEEN=51
    SCOPE=52
    STALE=53
    DURING=54
    OVERLAPS=55
    UNION=56
    ALL=57
    OPTIONAL=58
    MATCH=59
    UNWIND=60
    AS=61
    MERGE=62
    ON=63
    CREATE=64
    SET=65
    DETACH=66
    DELETE=67
    REMOVE=68
    CALL=69
    YIELD=70
    WITH=71
    RETURN=72
    DISTINCT=73
    ORDER=74
    BY=75
    L_SKIP=76
    LIMIT=77
    ASCENDING=78
    ASC=79
    DESCENDING=80
    DESC=81
    WHERE=82
    OR=83
    XOR=84
    AND=85
    NOT=86
    STARTS=87
    ENDS=88
    CONTAINS=89
    IN=90
    IS=91
    NULL=92
    COUNT=93
    CASE=94
    ELSE=95
    END=96
    WHEN=97
    THEN=98
    ANY=99
    NONE=100
    SINGLE=101
    EXISTS=102
    TRUE=103
    FALSE=104
    HexInteger=105
    DecimalInteger=106
    OctalInteger=107
    HexLetter=108
    HexDigit=109
    Digit=110
    NonZeroDigit=111
    NonZeroOctDigit=112
    OctDigit=113
    ZeroDigit=114
    ExponentDecimalReal=115
    RegularDecimalReal=116
    StringLiteral=117
    EscapedChar=118
    CONSTRAINT=119
    DO=120
    FOR=121
    REQUIRE=122
    UNIQUE=123
    MANDATORY=124
    SCALAR=125
    OF=126
    ADD=127
    DROP=128
    FILTER=129
    EXTRACT=130
    UnescapedSymbolicName=131
    IdentifierStart=132
    IdentifierPart=133
    EscapedSymbolicName=134
    SP=135
    WHITESPACE=136
    Comment=137

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StandaloneCallContext,0)


        def s_TimeWindowLimit(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimeWindowLimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = s_cypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Query)
        try:
            self.state = 343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 340
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 341
                self.oC_StandaloneCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 342
                self.s_TimeWindowLimit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_Where(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = s_cypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 345
                self.match(s_cypherParser.OPTIONAL)
                self.state = 346
                self.match(s_cypherParser.SP)


            self.state = 349
            self.match(s_cypherParser.MATCH)
            self.state = 351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 350
                self.match(s_cypherParser.SP)


            self.state = 353
            self.oC_Pattern()
            self.state = 361
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 354
                    self.match(s_cypherParser.SP)


                self.state = 359
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 357
                    self.s_AtTime()
                    pass
                elif token in [51]:
                    self.state = 358
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 363
                    self.match(s_cypherParser.SP)


                self.state = 366
                self.s_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_Create(self):
            return self.getTypedRuleContext(s_cypherParser.S_CreateContext,0)


        def s_Merge(self):
            return self.getTypedRuleContext(s_cypherParser.S_MergeContext,0)


        def s_Set(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RemoveContext,0)


        def s_Stale(self):
            return self.getTypedRuleContext(s_cypherParser.S_StaleContext,0)


        def s_Delete(self):
            return self.getTypedRuleContext(s_cypherParser.S_DeleteContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = s_cypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_UpdatingClause)
        try:
            self.state = 375
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.enterOuterAlt(localctx, 1)
                self.state = 369
                self.s_Create()
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 370
                self.s_Merge()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 3)
                self.state = 371
                self.s_Set()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 4)
                self.state = 372
                self.oC_Remove()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 5)
                self.state = 373
                self.s_Stale()
                pass
            elif token in [66, 67]:
                self.enterOuterAlt(localctx, 6)
                self.state = 374
                self.s_Delete()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Create" ):
                listener.enterS_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Create" ):
                listener.exitS_Create(self)




    def s_Create(self):

        localctx = s_cypherParser.S_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_s_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            self.match(s_cypherParser.CREATE)
            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 378
                self.match(s_cypherParser.SP)


            self.state = 381
            self.oC_Pattern()
            self.state = 386
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 382
                    self.match(s_cypherParser.SP)


                self.state = 385
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Merge" ):
                listener.enterS_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Merge" ):
                listener.exitS_Merge(self)




    def s_Merge(self):

        localctx = s_cypherParser.S_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_s_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.match(s_cypherParser.MERGE)
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 389
                self.match(s_cypherParser.SP)


            self.state = 392
            self.oC_PatternPart()
            self.state = 397
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 393
                    self.match(s_cypherParser.SP)
                    self.state = 394
                    self.oC_MergeAction() 
                self.state = 399
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

            self.state = 404
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 400
                    self.match(s_cypherParser.SP)


                self.state = 403
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Set" ):
                listener.enterS_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Set" ):
                listener.exitS_Set(self)




    def s_Set(self):

        localctx = s_cypherParser.S_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_s_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.match(s_cypherParser.SET)
            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 407
                self.match(s_cypherParser.SP)


            self.state = 410
            self.oC_SetItem()
            self.state = 421
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 412
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 411
                        self.match(s_cypherParser.SP)


                    self.state = 414
                    self.match(s_cypherParser.T__0)
                    self.state = 416
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 415
                        self.match(s_cypherParser.SP)


                    self.state = 418
                    self.oC_SetItem() 
                self.state = 423
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

            self.state = 428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 424
                    self.match(s_cypherParser.SP)


                self.state = 427
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def s_StaleItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StaleItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StaleItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Stale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Stale" ):
                listener.enterS_Stale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Stale" ):
                listener.exitS_Stale(self)




    def s_Stale(self):

        localctx = s_cypherParser.S_StaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_s_Stale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.match(s_cypherParser.STALE)
            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 431
                self.match(s_cypherParser.SP)


            self.state = 434
            self.s_StaleItem()
            self.state = 445
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 436
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 435
                        self.match(s_cypherParser.SP)


                    self.state = 438
                    self.match(s_cypherParser.T__0)
                    self.state = 440
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 439
                        self.match(s_cypherParser.SP)


                    self.state = 442
                    self.s_StaleItem() 
                self.state = 447
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

            self.state = 452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 448
                    self.match(s_cypherParser.SP)


                self.state = 451
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_TimePointLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePointLiteralContext,0)


        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def s_SetPropertyItemOne(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemOneContext,0)


        def s_SetPropertyItemTwo(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemTwoContext,0)


        def s_SetValueItem(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetValueItemContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = s_cypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 454
                self.oC_PropertyExpression()
                self.state = 474
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                if la_ == 1:
                    self.state = 456
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 455
                        self.match(s_cypherParser.SP)


                    self.state = 458
                    self.match(s_cypherParser.AtT)
                    self.state = 460
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 459
                        self.match(s_cypherParser.SP)


                    self.state = 462
                    self.match(s_cypherParser.T__1)
                    self.state = 464
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 463
                        self.match(s_cypherParser.SP)


                    self.state = 468
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [8, 117]:
                        self.state = 466
                        self.s_TimePointLiteral()
                        pass
                    elif token in [48]:
                        self.state = 467
                        self.match(s_cypherParser.NOW)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 471
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 470
                        self.match(s_cypherParser.SP)


                    self.state = 473
                    self.match(s_cypherParser.T__2)


                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 476
                    self.match(s_cypherParser.SP)


                self.state = 479
                self.match(s_cypherParser.T__3)
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 480
                    self.match(s_cypherParser.SP)


                self.state = 483
                self.oC_Expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 485
                self.oC_Variable()
                self.state = 487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 486
                    self.match(s_cypherParser.SP)


                self.state = 489
                self.match(s_cypherParser.T__3)
                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 490
                    self.match(s_cypherParser.SP)


                self.state = 493
                self.oC_Expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 495
                self.oC_Variable()
                self.state = 497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 496
                    self.match(s_cypherParser.SP)


                self.state = 499
                self.match(s_cypherParser.T__4)
                self.state = 501
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 500
                    self.match(s_cypherParser.SP)


                self.state = 503
                self.oC_Expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 505
                self.oC_Variable()
                self.state = 507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 506
                    self.match(s_cypherParser.SP)


                self.state = 509
                self.oC_NodeLabels()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 511
                self.oC_Variable()
                self.state = 513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 512
                    self.match(s_cypherParser.SP)


                self.state = 515
                self.s_AtTElement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 517
                self.oC_Variable()
                self.state = 522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 519
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 518
                        self.match(s_cypherParser.SP)


                    self.state = 521
                    self.s_AtTElement()


                self.state = 524
                self.match(s_cypherParser.T__5)
                self.state = 525
                self.s_SetPropertyItemOne()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 527
                self.oC_Variable()
                self.state = 532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 529
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 528
                        self.match(s_cypherParser.SP)


                    self.state = 531
                    self.s_AtTElement()


                self.state = 534
                self.match(s_cypherParser.T__5)
                self.state = 535
                self.s_SetPropertyItemTwo()
                self.state = 537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 536
                    self.match(s_cypherParser.SP)


                self.state = 539
                self.s_SetValueItem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemOneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemOne

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemOne" ):
                listener.enterS_SetPropertyItemOne(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemOne" ):
                listener.exitS_SetPropertyItemOne(self)




    def s_SetPropertyItemOne(self):

        localctx = s_cypherParser.S_SetPropertyItemOneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_s_SetPropertyItemOne)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            self.oC_PropertyKeyName()
            self.state = 545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 544
                self.match(s_cypherParser.SP)


            self.state = 547
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemTwoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemTwo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemTwo" ):
                listener.enterS_SetPropertyItemTwo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemTwo" ):
                listener.exitS_SetPropertyItemTwo(self)




    def s_SetPropertyItemTwo(self):

        localctx = s_cypherParser.S_SetPropertyItemTwoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_s_SetPropertyItemTwo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self.oC_PropertyKeyName()
            self.state = 554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 550
                    self.match(s_cypherParser.SP)


                self.state = 553
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetValueItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetValueItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetValueItem" ):
                listener.enterS_SetValueItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetValueItem" ):
                listener.exitS_SetValueItem(self)




    def s_SetValueItem(self):

        localctx = s_cypherParser.S_SetValueItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_s_SetValueItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.match(s_cypherParser.PoundValue)
            self.state = 558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 557
                self.match(s_cypherParser.SP)


            self.state = 560
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyLookup(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StaleItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StaleItem" ):
                listener.enterS_StaleItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StaleItem" ):
                listener.exitS_StaleItem(self)




    def s_StaleItem(self):

        localctx = s_cypherParser.S_StaleItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_s_StaleItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.oC_Expression()
            self.state = 572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 563
                    self.match(s_cypherParser.SP)


                self.state = 566
                self.oC_PropertyLookup()
                self.state = 568
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 567
                    self.match(s_cypherParser.SP)


                self.state = 570
                self.match(s_cypherParser.PoundValue)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def s_DeleteItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DeleteItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DeleteItemContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Delete" ):
                listener.enterS_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Delete" ):
                listener.exitS_Delete(self)




    def s_Delete(self):

        localctx = s_cypherParser.S_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_s_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 574
                self.match(s_cypherParser.DETACH)
                self.state = 575
                self.match(s_cypherParser.SP)


            self.state = 578
            self.match(s_cypherParser.DELETE)
            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 579
                self.match(s_cypherParser.SP)


            self.state = 582
            self.s_DeleteItem()
            self.state = 593
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 584
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 583
                        self.match(s_cypherParser.SP)


                    self.state = 586
                    self.match(s_cypherParser.T__0)
                    self.state = 588
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 587
                        self.match(s_cypherParser.SP)


                    self.state = 590
                    self.s_DeleteItem() 
                self.state = 595
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

            self.state = 603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 596
                    self.match(s_cypherParser.SP)


                self.state = 601
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 599
                    self.s_AtTime()
                    pass
                elif token in [51]:
                    self.state = 600
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyLookup(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DeleteItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DeleteItem" ):
                listener.enterS_DeleteItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DeleteItem" ):
                listener.exitS_DeleteItem(self)




    def s_DeleteItem(self):

        localctx = s_cypherParser.S_DeleteItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_s_DeleteItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.oC_Expression()
            self.state = 619
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 606
                    self.match(s_cypherParser.SP)


                self.state = 609
                self.oC_PropertyLookup()
                self.state = 617
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 611
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 610
                        self.match(s_cypherParser.SP)


                    self.state = 615
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [47]:
                        self.state = 613
                        self.match(s_cypherParser.PoundValue)
                        pass
                    elif token in [46]:
                        self.state = 614
                        self.s_AtTElement()
                        pass
                    else:
                        raise NoViableAltException(self)





        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = s_cypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_oC_RemoveItem)
        try:
            self.state = 625
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 621
                self.oC_Variable()
                self.state = 622
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 624
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTime" ):
                listener.enterS_AtTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTime" ):
                listener.exitS_AtTime(self)




    def s_AtTime(self):

        localctx = s_cypherParser.S_AtTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_s_AtTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self.match(s_cypherParser.AT_TIME)
            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 628
                self.match(s_cypherParser.SP)


            self.state = 631
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_BetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Between

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Between" ):
                listener.enterS_Between(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Between" ):
                listener.exitS_Between(self)




    def s_Between(self):

        localctx = s_cypherParser.S_BetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_s_Between)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self.match(s_cypherParser.BETWEEN)
            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 634
                self.match(s_cypherParser.SP)


            self.state = 637
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimeWindowLimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_Snapshot(self):
            return self.getTypedRuleContext(s_cypherParser.S_SnapshotContext,0)


        def s_Scope(self):
            return self.getTypedRuleContext(s_cypherParser.S_ScopeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimeWindowLimit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimeWindowLimit" ):
                listener.enterS_TimeWindowLimit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimeWindowLimit" ):
                listener.exitS_TimeWindowLimit(self)




    def s_TimeWindowLimit(self):

        localctx = s_cypherParser.S_TimeWindowLimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_s_TimeWindowLimit)
        try:
            self.state = 641
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 639
                self.s_Snapshot()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 640
                self.s_Scope()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def s_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.S_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = s_cypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.match(s_cypherParser.CALL)
            self.state = 644
            self.match(s_cypherParser.SP)
            self.state = 645
            self.oC_ExplicitProcedureInvocation()
            self.state = 652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 646
                    self.match(s_cypherParser.SP)


                self.state = 649
                self.match(s_cypherParser.YIELD)
                self.state = 650
                self.match(s_cypherParser.SP)
                self.state = 651
                self.s_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def s_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.S_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = s_cypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_oC_StandaloneCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.match(s_cypherParser.CALL)
            self.state = 655
            self.match(s_cypherParser.SP)
            self.state = 658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 656
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 657
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 660
                    self.match(s_cypherParser.SP)


                self.state = 663
                self.match(s_cypherParser.YIELD)
                self.state = 664
                self.match(s_cypherParser.SP)
                self.state = 667
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [7]:
                    self.state = 665
                    self.match(s_cypherParser.T__6)
                    pass
                elif token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                    self.state = 666
                    self.s_YieldItems()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_YieldItemContext,i)


        def s_Where(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_YieldItems" ):
                listener.enterS_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_YieldItems" ):
                listener.exitS_YieldItems(self)




    def s_YieldItems(self):

        localctx = s_cypherParser.S_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_s_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.s_YieldItem()
            self.state = 682
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 673
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 672
                        self.match(s_cypherParser.SP)


                    self.state = 675
                    self.match(s_cypherParser.T__0)
                    self.state = 677
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 676
                        self.match(s_cypherParser.SP)


                    self.state = 679
                    self.s_YieldItem() 
                self.state = 684
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

            self.state = 689
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 685
                    self.match(s_cypherParser.SP)


                self.state = 688
                self.s_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_YieldItem" ):
                listener.enterS_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_YieldItem" ):
                listener.exitS_YieldItem(self)




    def s_YieldItem(self):

        localctx = s_cypherParser.S_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_s_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.oC_ProcedureResultField()
            self.state = 696
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 692
                self.match(s_cypherParser.SP)
                self.state = 693
                self.match(s_cypherParser.AS)
                self.state = 694
                self.match(s_cypherParser.SP)
                self.state = 695
                self.oC_Variable()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_With(self):
            return self.getTypedRuleContext(s_cypherParser.S_WithContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_WithPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_WithPartQuery" ):
                listener.enterS_WithPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_WithPartQuery" ):
                listener.exitS_WithPartQuery(self)




    def s_WithPartQuery(self):

        localctx = s_cypherParser.S_WithPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_s_WithPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                self.state = 698
                self.oC_ReadingClause()
                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 699
                    self.match(s_cypherParser.SP)


                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64001) != 0):
                self.state = 707
                self.oC_UpdatingClause()
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 708
                    self.match(s_cypherParser.SP)


                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 716
            self.s_With()
            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 717
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def s_Where(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_With" ):
                listener.enterS_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_With" ):
                listener.exitS_With(self)




    def s_With(self):

        localctx = s_cypherParser.S_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_s_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.match(s_cypherParser.WITH)
            self.state = 721
            self.oC_ProjectionBody()
            self.state = 726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 722
                    self.match(s_cypherParser.SP)


                self.state = 725
                self.s_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExistentialSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def s_Where(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExistentialSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExistentialSubquery" ):
                listener.enterOC_ExistentialSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExistentialSubquery" ):
                listener.exitOC_ExistentialSubquery(self)




    def oC_ExistentialSubquery(self):

        localctx = s_cypherParser.OC_ExistentialSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_oC_ExistentialSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.match(s_cypherParser.EXISTS)
            self.state = 730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 729
                self.match(s_cypherParser.SP)


            self.state = 732
            self.match(s_cypherParser.T__7)
            self.state = 734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 733
                self.match(s_cypherParser.SP)


            self.state = 744
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 71, 72]:
                self.state = 736
                self.oC_RegularQuery()
                pass
            elif token in [2, 48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 737
                self.oC_Pattern()
                self.state = 742
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                if la_ == 1:
                    self.state = 739
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 738
                        self.match(s_cypherParser.SP)


                    self.state = 741
                    self.s_Where()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 746
                self.match(s_cypherParser.SP)


            self.state = 749
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IdInCollContext,0)


        def s_Where(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = s_cypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.oC_IdInColl()
            self.state = 756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 752
                    self.match(s_cypherParser.SP)


                self.state = 755
                self.s_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SnapshotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Snapshot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Snapshot" ):
                listener.enterS_Snapshot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Snapshot" ):
                listener.exitS_Snapshot(self)




    def s_Snapshot(self):

        localctx = s_cypherParser.S_SnapshotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_s_Snapshot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.match(s_cypherParser.SNAPSHOT)
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 759
                self.match(s_cypherParser.SP)


            self.state = 762
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Scope" ):
                listener.enterS_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Scope" ):
                listener.exitS_Scope(self)




    def s_Scope(self):

        localctx = s_cypherParser.S_ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_s_Scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self.match(s_cypherParser.SCOPE)
            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 765
                self.match(s_cypherParser.SP)


            self.state = 768
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_PathFunctionPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PathFunctionPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AnonymousPatternPartContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = s_cypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 770
                self.oC_Variable()
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 771
                    self.match(s_cypherParser.SP)


                self.state = 774
                self.match(s_cypherParser.T__3)
                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 775
                    self.match(s_cypherParser.SP)


                self.state = 778
                self.s_PathFunctionPattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 780
                self.oC_Variable()
                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 781
                    self.match(s_cypherParser.SP)


                self.state = 784
                self.match(s_cypherParser.T__3)
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 785
                    self.match(s_cypherParser.SP)


                self.state = 788
                self.oC_AnonymousPatternPart()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 790
                self.oC_AnonymousPatternPart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PathFunctionPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def s_SinglePathPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_SinglePathPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PathFunctionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PathFunctionPattern" ):
                listener.enterS_PathFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PathFunctionPattern" ):
                listener.exitS_PathFunctionPattern(self)




    def s_PathFunctionPattern(self):

        localctx = s_cypherParser.S_PathFunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_s_PathFunctionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.oC_FunctionName()
            self.state = 795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 794
                self.match(s_cypherParser.SP)


            self.state = 797
            self.match(s_cypherParser.T__1)
            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 798
                self.match(s_cypherParser.SP)


            self.state = 801
            self.s_SinglePathPattern()
            self.state = 803
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 802
                self.match(s_cypherParser.SP)


            self.state = 805
            self.match(s_cypherParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SinglePathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodePatternContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,i)


        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SinglePathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SinglePathPattern" ):
                listener.enterS_SinglePathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SinglePathPattern" ):
                listener.exitS_SinglePathPattern(self)




    def s_SinglePathPattern(self):

        localctx = s_cypherParser.S_SinglePathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_s_SinglePathPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.oC_NodePattern()
            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 808
                self.match(s_cypherParser.SP)


            self.state = 811
            self.oC_RelationshipPattern()
            self.state = 813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 812
                self.match(s_cypherParser.SP)


            self.state = 815
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def s_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = s_cypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self.match(s_cypherParser.T__1)
            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 818
                self.match(s_cypherParser.SP)


            self.state = 825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 821
                self.oC_Variable()
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 822
                    self.match(s_cypherParser.SP)




            self.state = 831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 827
                self.oC_NodeLabels()
                self.state = 829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 828
                    self.match(s_cypherParser.SP)




            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 833
                self.s_AtTElement()
                self.state = 835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 834
                    self.match(s_cypherParser.SP)




            self.state = 843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==26:
                self.state = 839
                self.s_Properties()
                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 840
                    self.match(s_cypherParser.SP)




            self.state = 845
            self.match(s_cypherParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertiesPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesPatternContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Properties" ):
                listener.enterS_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Properties" ):
                listener.exitS_Properties(self)




    def s_Properties(self):

        localctx = s_cypherParser.S_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_s_Properties)
        try:
            self.state = 849
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 847
                self.s_PropertiesPattern()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 848
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_PropertyNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PropertyNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PropertyNodeContext,i)


        def s_ValueNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ValueNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ValueNodeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertiesPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertiesPattern" ):
                listener.enterS_PropertiesPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertiesPattern" ):
                listener.exitS_PropertiesPattern(self)




    def s_PropertiesPattern(self):

        localctx = s_cypherParser.S_PropertiesPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_s_PropertiesPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.match(s_cypherParser.T__7)
            self.state = 853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 852
                self.match(s_cypherParser.SP)


            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 855
                self.s_PropertyNode()
                self.state = 856
                self.match(s_cypherParser.T__9)
                self.state = 857
                self.s_ValueNode()
                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 858
                    self.match(s_cypherParser.T__0)
                    self.state = 860
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 859
                        self.match(s_cypherParser.SP)


                    self.state = 862
                    self.s_PropertyNode()
                    self.state = 863
                    self.match(s_cypherParser.T__9)
                    self.state = 864
                    self.s_ValueNode()
                    self.state = 870
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 873
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyNode" ):
                listener.enterS_PropertyNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyNode" ):
                listener.exitS_PropertyNode(self)




    def s_PropertyNode(self):

        localctx = s_cypherParser.S_PropertyNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_s_PropertyNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.oC_PropertyKeyName()
            self.state = 877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 876
                self.match(s_cypherParser.SP)


            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 879
                self.s_AtTElement()
                self.state = 881
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 880
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ValueNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ValueNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ValueNode" ):
                listener.enterS_ValueNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ValueNode" ):
                listener.exitS_ValueNode(self)




    def s_ValueNode(self):

        localctx = s_cypherParser.S_ValueNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_s_ValueNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 885
                self.match(s_cypherParser.SP)


            self.state = 888
            self.oC_Expression()
            self.state = 890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 889
                self.match(s_cypherParser.SP)


            self.state = 896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 892
                self.s_AtTElement()
                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 893
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RangeLiteralContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = s_cypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 898
            self.match(s_cypherParser.T__10)
            self.state = 900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 899
                self.match(s_cypherParser.SP)


            self.state = 906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 902
                self.oC_Variable()
                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 903
                    self.match(s_cypherParser.SP)




            self.state = 912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 908
                self.oC_RelationshipTypes()
                self.state = 910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 909
                    self.match(s_cypherParser.SP)




            self.state = 915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 914
                self.oC_RangeLiteral()


            self.state = 921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 917
                self.s_AtTElement()
                self.state = 919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 918
                    self.match(s_cypherParser.SP)




            self.state = 927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==26:
                self.state = 923
                self.oC_Properties()
                self.state = 925
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 924
                    self.match(s_cypherParser.SP)




            self.state = 929
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def s_TimePredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateExpressionContext,0)


        def oC_StringPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringPredicateExpressionContext,0)


        def oC_ListPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListPredicateExpressionContext,0)


        def oC_NullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NullPredicateExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringListNullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullPredicateExpression" ):
                listener.enterOC_StringListNullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullPredicateExpression" ):
                listener.exitOC_StringListNullPredicateExpression(self)




    def oC_StringListNullPredicateExpression(self):

        localctx = s_cypherParser.OC_StringListNullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_oC_StringListNullPredicateExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self.oC_AddOrSubtractExpression()
            self.state = 936
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 932
                self.s_TimePredicateExpression()

            elif la_ == 2:
                self.state = 933
                self.oC_StringPredicateExpression()

            elif la_ == 3:
                self.state = 934
                self.oC_ListPredicateExpression()

            elif la_ == 4:
                self.state = 935
                self.oC_NullPredicateExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def s_AtTExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTExpressionContext,0)


        def s_SingleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_SingleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_SingleIndexExpressionContext,i)


        def s_DoubleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DoubleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DoubleIndexExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = s_cypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_oC_ListOperatorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.state = 938
                self.oC_PropertyOrLabelsExpression()
                pass

            elif la_ == 2:
                self.state = 939
                self.s_AtTExpression()
                pass


            self.state = 946
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 944
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                    if la_ == 1:
                        self.state = 942
                        self.s_SingleIndexExpression()
                        pass

                    elif la_ == 2:
                        self.state = 943
                        self.s_DoubleIndexExpression()
                        pass

             
                self.state = 948
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SingleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SingleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SingleIndexExpression" ):
                listener.enterS_SingleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SingleIndexExpression" ):
                listener.exitS_SingleIndexExpression(self)




    def s_SingleIndexExpression(self):

        localctx = s_cypherParser.S_SingleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_s_SingleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 949
                self.match(s_cypherParser.SP)


            self.state = 952
            self.match(s_cypherParser.T__10)
            self.state = 953
            self.s_LeftExpression()
            self.state = 954
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DoubleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def s_RightExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_RightExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DoubleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DoubleIndexExpression" ):
                listener.enterS_DoubleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DoubleIndexExpression" ):
                listener.exitS_DoubleIndexExpression(self)




    def s_DoubleIndexExpression(self):

        localctx = s_cypherParser.S_DoubleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_s_DoubleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 956
                self.match(s_cypherParser.SP)


            self.state = 959
            self.match(s_cypherParser.T__10)
            self.state = 961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070916) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 960
                self.s_LeftExpression()


            self.state = 963
            self.match(s_cypherParser.T__12)
            self.state = 965
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070916) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 964
                self.s_RightExpression()


            self.state = 967
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_LeftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_LeftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_LeftExpression" ):
                listener.enterS_LeftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_LeftExpression" ):
                listener.exitS_LeftExpression(self)




    def s_LeftExpression(self):

        localctx = s_cypherParser.S_LeftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_s_LeftExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_RightExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_RightExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_RightExpression" ):
                listener.enterS_RightExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_RightExpression" ):
                listener.exitS_RightExpression(self)




    def s_RightExpression(self):

        localctx = s_cypherParser.S_RightExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_s_RightExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyOrLabelsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyOrLabelsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyOrLabelsExpression" ):
                listener.enterOC_PropertyOrLabelsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyOrLabelsExpression" ):
                listener.exitOC_PropertyOrLabelsExpression(self)




    def oC_PropertyOrLabelsExpression(self):

        localctx = s_cypherParser.OC_PropertyOrLabelsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_oC_PropertyOrLabelsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            self.oC_Atom()
            self.state = 980
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 975
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 974
                        self.match(s_cypherParser.SP)


                    self.state = 977
                    self.oC_PropertyLookup() 
                self.state = 982
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

            self.state = 988
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 984
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 983
                    self.match(s_cypherParser.SP)


                self.state = 986
                self.oC_NodeLabels()

            elif la_ == 2:
                self.state = 987
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def s_PropertyLookupTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupTimeContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTExpression" ):
                listener.enterS_AtTExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTExpression" ):
                listener.exitS_AtTExpression(self)




    def s_AtTExpression(self):

        localctx = s_cypherParser.S_AtTExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_s_AtTExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.oC_Atom()
            self.state = 1011
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 997
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 992
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 991
                            self.match(s_cypherParser.SP)


                        self.state = 994
                        self.oC_PropertyLookup() 
                    self.state = 999
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

                self.state = 1001
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1000
                    self.match(s_cypherParser.SP)


                self.state = 1003
                self.oC_PropertyLookup()
                self.state = 1009
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                if la_ == 1:
                    self.state = 1005
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1004
                        self.match(s_cypherParser.SP)


                    self.state = 1007
                    self.match(s_cypherParser.PoundValue)

                elif la_ == 2:
                    self.state = 1008
                    self.s_AtTElement()




            self.state = 1014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1013
                self.match(s_cypherParser.SP)


            self.state = 1016
            self.s_PropertyLookupTime()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyLookupTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyLookupTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyLookupTime" ):
                listener.enterS_PropertyLookupTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyLookupTime" ):
                listener.exitS_PropertyLookupTime(self)




    def s_PropertyLookupTime(self):

        localctx = s_cypherParser.S_PropertyLookupTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_s_PropertyLookupTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.match(s_cypherParser.AtT)
            self.state = 1025
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,162,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1020
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1019
                        self.match(s_cypherParser.SP)


                    self.state = 1022
                    self.oC_PropertyLookup() 
                self.state = 1027
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateExpression" ):
                listener.enterS_TimePredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateExpression" ):
                listener.exitS_TimePredicateExpression(self)




    def s_TimePredicateExpression(self):

        localctx = s_cypherParser.S_TimePredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_s_TimePredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.match(s_cypherParser.SP)
            self.state = 1029
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1030
            self.match(s_cypherParser.SP)
            self.state = 1031
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_TimePointLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_TimePointLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_TimePointLiteralContext,i)


        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTElement" ):
                listener.enterS_AtTElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTElement" ):
                listener.exitS_AtTElement(self)




    def s_AtTElement(self):

        localctx = s_cypherParser.S_AtTElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_s_AtTElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            self.match(s_cypherParser.AtT)
            self.state = 1035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1034
                self.match(s_cypherParser.SP)


            self.state = 1037
            self.match(s_cypherParser.T__1)
            self.state = 1047
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.state = 1039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1038
                    self.match(s_cypherParser.SP)


                self.state = 1041
                self.s_TimePointLiteral()
                self.state = 1043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1042
                    self.match(s_cypherParser.SP)


                self.state = 1045
                self.match(s_cypherParser.T__0)


            self.state = 1050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1049
                self.match(s_cypherParser.SP)


            self.state = 1054
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 117]:
                self.state = 1052
                self.s_TimePointLiteral()
                pass
            elif token in [48]:
                self.state = 1053
                self.match(s_cypherParser.NOW)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1057
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1056
                self.match(s_cypherParser.SP)


            self.state = 1059
            self.match(s_cypherParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def s_WhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Where" ):
                listener.enterS_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Where" ):
                listener.exitS_Where(self)




    def s_Where(self):

        localctx = s_cypherParser.S_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_s_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            self.match(s_cypherParser.WHERE)
            self.state = 1062
            self.match(s_cypherParser.SP)
            self.state = 1063
            self.s_WhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_OrWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_OrWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_WhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_WhereExpression" ):
                listener.enterS_WhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_WhereExpression" ):
                listener.exitS_WhereExpression(self)




    def s_WhereExpression(self):

        localctx = s_cypherParser.S_WhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_s_WhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            self.s_OrWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_OrWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_XorWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_XorWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_XorWhereExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_OrWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_OrWhereExpression" ):
                listener.enterS_OrWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_OrWhereExpression" ):
                listener.exitS_OrWhereExpression(self)




    def s_OrWhereExpression(self):

        localctx = s_cypherParser.S_OrWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_s_OrWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self.s_XorWhereExpression()
            self.state = 1074
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1068
                    self.match(s_cypherParser.SP)
                    self.state = 1069
                    self.match(s_cypherParser.OR)
                    self.state = 1070
                    self.match(s_cypherParser.SP)
                    self.state = 1071
                    self.s_XorWhereExpression() 
                self.state = 1076
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_XorWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_AndWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AndWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AndWhereExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_XorWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_XorWhereExpression" ):
                listener.enterS_XorWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_XorWhereExpression" ):
                listener.exitS_XorWhereExpression(self)




    def s_XorWhereExpression(self):

        localctx = s_cypherParser.S_XorWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_s_XorWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1077
            self.s_AndWhereExpression()
            self.state = 1084
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1078
                    self.match(s_cypherParser.SP)
                    self.state = 1079
                    self.match(s_cypherParser.XOR)
                    self.state = 1080
                    self.match(s_cypherParser.SP)
                    self.state = 1081
                    self.s_AndWhereExpression() 
                self.state = 1086
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AndWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_NotWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_NotWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_NotWhereExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AndWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AndWhereExpression" ):
                listener.enterS_AndWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AndWhereExpression" ):
                listener.exitS_AndWhereExpression(self)




    def s_AndWhereExpression(self):

        localctx = s_cypherParser.S_AndWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_s_AndWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087
            self.s_NotWhereExpression()
            self.state = 1094
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1088
                    self.match(s_cypherParser.SP)
                    self.state = 1089
                    self.match(s_cypherParser.AND)
                    self.state = 1090
                    self.match(s_cypherParser.SP)
                    self.state = 1091
                    self.s_NotWhereExpression() 
                self.state = 1096
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_NotWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_ComparisonWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_ComparisonWhereExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_NotWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_NotWhereExpression" ):
                listener.enterS_NotWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_NotWhereExpression" ):
                listener.exitS_NotWhereExpression(self)




    def s_NotWhereExpression(self):

        localctx = s_cypherParser.S_NotWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_s_NotWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1097
                self.match(s_cypherParser.NOT)
                self.state = 1099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1098
                    self.match(s_cypherParser.SP)


                self.state = 1105
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1106
            self.s_ComparisonWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ComparisonWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_StringListNullPredicateWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StringListNullPredicateWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StringListNullPredicateWhereExpressionContext,i)


        def s_ComparisonWhereOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ComparisonWhereOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ComparisonWhereOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ComparisonWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ComparisonWhereExpression" ):
                listener.enterS_ComparisonWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ComparisonWhereExpression" ):
                listener.exitS_ComparisonWhereExpression(self)




    def s_ComparisonWhereExpression(self):

        localctx = s_cypherParser.S_ComparisonWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_s_ComparisonWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self.s_StringListNullPredicateWhereExpression()
            self.state = 1120
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,177,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1110
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1109
                        self.match(s_cypherParser.SP)


                    self.state = 1112
                    self.s_ComparisonWhereOperator()
                    self.state = 1114
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1113
                        self.match(s_cypherParser.SP)


                    self.state = 1116
                    self.s_StringListNullPredicateWhereExpression() 
                self.state = 1122
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,177,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MultiplyDivideModuloWhereOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MultiplyDivideModuloWhereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MultiplyDivideModuloWhereOperator" ):
                listener.enterS_MultiplyDivideModuloWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MultiplyDivideModuloWhereOperator" ):
                listener.exitS_MultiplyDivideModuloWhereOperator(self)




    def s_MultiplyDivideModuloWhereOperator(self):

        localctx = s_cypherParser.S_MultiplyDivideModuloWhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_s_MultiplyDivideModuloWhereOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1123
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 49280) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PowerOfWhereOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PowerOfWhereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PowerOfWhereOperator" ):
                listener.enterS_PowerOfWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PowerOfWhereOperator" ):
                listener.exitS_PowerOfWhereOperator(self)




    def s_PowerOfWhereOperator(self):

        localctx = s_cypherParser.S_PowerOfWhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_s_PowerOfWhereOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.match(s_cypherParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AddOrSubtractWhereOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AddOrSubtractWhereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AddOrSubtractWhereOperator" ):
                listener.enterS_AddOrSubtractWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AddOrSubtractWhereOperator" ):
                listener.exitS_AddOrSubtractWhereOperator(self)




    def s_AddOrSubtractWhereOperator(self):

        localctx = s_cypherParser.S_AddOrSubtractWhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_s_AddOrSubtractWhereOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1127
            _la = self._input.LA(1)
            if not(_la==17 or _la==18):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ComparisonWhereOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ComparisonWhereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ComparisonWhereOperator" ):
                listener.enterS_ComparisonWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ComparisonWhereOperator" ):
                listener.exitS_ComparisonWhereOperator(self)




    def s_ComparisonWhereOperator(self):

        localctx = s_cypherParser.S_ComparisonWhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_s_ComparisonWhereOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 16252944) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StringListNullPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def s_TimePredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateWhereExpressionContext,0)


        def s_StringPredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_StringPredicateWhereExpressionContext,0)


        def s_ListPredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_ListPredicateWhereExpressionContext,0)


        def s_NullPredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_NullPredicateWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StringListNullPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StringListNullPredicateWhereExpression" ):
                listener.enterS_StringListNullPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StringListNullPredicateWhereExpression" ):
                listener.exitS_StringListNullPredicateWhereExpression(self)




    def s_StringListNullPredicateWhereExpression(self):

        localctx = s_cypherParser.S_StringListNullPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_s_StringListNullPredicateWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self.s_AddOrSubtractWhereExpression()
            self.state = 1136
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 1132
                self.s_TimePredicateWhereExpression()

            elif la_ == 2:
                self.state = 1133
                self.s_StringPredicateWhereExpression()

            elif la_ == 3:
                self.state = 1134
                self.s_ListPredicateWhereExpression()

            elif la_ == 4:
                self.state = 1135
                self.s_NullPredicateWhereExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AddOrSubtractWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_MultiplyDivideModuloWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MultiplyDivideModuloWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MultiplyDivideModuloWhereExpressionContext,i)


        def s_AddOrSubtractWhereOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AddOrSubtractWhereOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AddOrSubtractWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AddOrSubtractWhereExpression" ):
                listener.enterS_AddOrSubtractWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AddOrSubtractWhereExpression" ):
                listener.exitS_AddOrSubtractWhereExpression(self)




    def s_AddOrSubtractWhereExpression(self):

        localctx = s_cypherParser.S_AddOrSubtractWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_s_AddOrSubtractWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self.s_MultiplyDivideModuloWhereExpression()
            self.state = 1159
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1157
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                    if la_ == 1:
                        self.state = 1140
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1139
                            self.match(s_cypherParser.SP)


                        self.state = 1142
                        self.s_AddOrSubtractWhereOperator()
                        self.state = 1144
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1143
                            self.match(s_cypherParser.SP)


                        self.state = 1146
                        self.s_MultiplyDivideModuloWhereExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1149
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1148
                            self.match(s_cypherParser.SP)


                        self.state = 1151
                        self.s_AddOrSubtractWhereOperator()
                        self.state = 1153
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1152
                            self.match(s_cypherParser.SP)


                        self.state = 1155
                        self.s_MultiplyDivideModuloWhereExpression()
                        pass

             
                self.state = 1161
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateWhereExpression" ):
                listener.enterS_TimePredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateWhereExpression" ):
                listener.exitS_TimePredicateWhereExpression(self)




    def s_TimePredicateWhereExpression(self):

        localctx = s_cypherParser.S_TimePredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_s_TimePredicateWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self.match(s_cypherParser.SP)
            self.state = 1163
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1164
            self.match(s_cypherParser.SP)
            self.state = 1165
            self.s_AddOrSubtractWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StringPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StringPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StringPredicateWhereExpression" ):
                listener.enterS_StringPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StringPredicateWhereExpression" ):
                listener.exitS_StringPredicateWhereExpression(self)




    def s_StringPredicateWhereExpression(self):

        localctx = s_cypherParser.S_StringPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_s_StringPredicateWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                self.state = 1167
                self.match(s_cypherParser.SP)
                self.state = 1168
                self.match(s_cypherParser.STARTS)
                self.state = 1169
                self.match(s_cypherParser.SP)
                self.state = 1170
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1171
                self.match(s_cypherParser.SP)
                self.state = 1172
                self.match(s_cypherParser.ENDS)
                self.state = 1173
                self.match(s_cypherParser.SP)
                self.state = 1174
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1175
                self.match(s_cypherParser.SP)
                self.state = 1176
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 1180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1179
                self.match(s_cypherParser.SP)


            self.state = 1182
            self.s_AddOrSubtractWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ListPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ListPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ListPredicateWhereExpression" ):
                listener.enterS_ListPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ListPredicateWhereExpression" ):
                listener.exitS_ListPredicateWhereExpression(self)




    def s_ListPredicateWhereExpression(self):

        localctx = s_cypherParser.S_ListPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_s_ListPredicateWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self.match(s_cypherParser.SP)
            self.state = 1185
            self.match(s_cypherParser.IN)
            self.state = 1187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1186
                self.match(s_cypherParser.SP)


            self.state = 1189
            self.s_AddOrSubtractWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_NullPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_NullPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_NullPredicateWhereExpression" ):
                listener.enterS_NullPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_NullPredicateWhereExpression" ):
                listener.exitS_NullPredicateWhereExpression(self)




    def s_NullPredicateWhereExpression(self):

        localctx = s_cypherParser.S_NullPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_s_NullPredicateWhereExpression)
        try:
            self.state = 1201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1191
                self.match(s_cypherParser.SP)
                self.state = 1192
                self.match(s_cypherParser.IS)
                self.state = 1193
                self.match(s_cypherParser.SP)
                self.state = 1194
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1195
                self.match(s_cypherParser.SP)
                self.state = 1196
                self.match(s_cypherParser.IS)
                self.state = 1197
                self.match(s_cypherParser.SP)
                self.state = 1198
                self.match(s_cypherParser.NOT)
                self.state = 1199
                self.match(s_cypherParser.SP)
                self.state = 1200
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MultiplyDivideModuloWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PowerOfWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PowerOfWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PowerOfWhereExpressionContext,i)


        def s_MultiplyDivideModuloWhereOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MultiplyDivideModuloWhereOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MultiplyDivideModuloWhereOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MultiplyDivideModuloWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MultiplyDivideModuloWhereExpression" ):
                listener.enterS_MultiplyDivideModuloWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MultiplyDivideModuloWhereExpression" ):
                listener.exitS_MultiplyDivideModuloWhereExpression(self)




    def s_MultiplyDivideModuloWhereExpression(self):

        localctx = s_cypherParser.S_MultiplyDivideModuloWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_s_MultiplyDivideModuloWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            self.s_PowerOfWhereExpression()
            self.state = 1233
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,196,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1231
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
                    if la_ == 1:
                        self.state = 1205
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1204
                            self.match(s_cypherParser.SP)


                        self.state = 1207
                        self.s_MultiplyDivideModuloWhereOperator()
                        self.state = 1209
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1208
                            self.match(s_cypherParser.SP)


                        self.state = 1211
                        self.s_PowerOfWhereExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1214
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1213
                            self.match(s_cypherParser.SP)


                        self.state = 1216
                        self.s_MultiplyDivideModuloWhereOperator()
                        self.state = 1218
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1217
                            self.match(s_cypherParser.SP)


                        self.state = 1220
                        self.s_PowerOfWhereExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1223
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1222
                            self.match(s_cypherParser.SP)


                        self.state = 1225
                        self.s_MultiplyDivideModuloWhereOperator()
                        self.state = 1227
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1226
                            self.match(s_cypherParser.SP)


                        self.state = 1229
                        self.s_PowerOfWhereExpression()
                        pass

             
                self.state = 1235
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,196,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PowerOfWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_UnaryAddOrSubtractWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_UnaryAddOrSubtractWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_UnaryAddOrSubtractWhereExpressionContext,i)


        def s_PowerOfWhereOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PowerOfWhereOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PowerOfWhereOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PowerOfWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PowerOfWhereExpression" ):
                listener.enterS_PowerOfWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PowerOfWhereExpression" ):
                listener.exitS_PowerOfWhereExpression(self)




    def s_PowerOfWhereExpression(self):

        localctx = s_cypherParser.S_PowerOfWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_s_PowerOfWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1236
            self.s_UnaryAddOrSubtractWhereExpression()
            self.state = 1248
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,199,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1238
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1237
                        self.match(s_cypherParser.SP)


                    self.state = 1240
                    self.s_PowerOfWhereOperator()
                    self.state = 1242
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1241
                        self.match(s_cypherParser.SP)


                    self.state = 1244
                    self.s_UnaryAddOrSubtractWhereExpression() 
                self.state = 1250
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,199,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_UnaryAddOrSubtractWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_ListOperatorWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_ListOperatorWhereExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_UnaryAddOrSubtractWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_UnaryAddOrSubtractWhereExpression" ):
                listener.enterS_UnaryAddOrSubtractWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_UnaryAddOrSubtractWhereExpression" ):
                listener.exitS_UnaryAddOrSubtractWhereExpression(self)




    def s_UnaryAddOrSubtractWhereExpression(self):

        localctx = s_cypherParser.S_UnaryAddOrSubtractWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_s_UnaryAddOrSubtractWhereExpression)
        self._la = 0 # Token type
        try:
            self.state = 1257
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 8, 11, 26, 48, 57, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1251
                self.s_ListOperatorWhereExpression()
                pass
            elif token in [17, 18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1252
                _la = self._input.LA(1)
                if not(_la==17 or _la==18):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1253
                    self.match(s_cypherParser.SP)


                self.state = 1256
                self.s_ListOperatorWhereExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ListOperatorWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertyOrLabelsWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyOrLabelsWhereExpressionContext,0)


        def s_AtTWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTWhereExpressionContext,0)


        def s_SingleIndexWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_SingleIndexWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_SingleIndexWhereExpressionContext,i)


        def s_DoubleIndexWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DoubleIndexWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DoubleIndexWhereExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ListOperatorWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ListOperatorWhereExpression" ):
                listener.enterS_ListOperatorWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ListOperatorWhereExpression" ):
                listener.exitS_ListOperatorWhereExpression(self)




    def s_ListOperatorWhereExpression(self):

        localctx = s_cypherParser.S_ListOperatorWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_s_ListOperatorWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1261
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.state = 1259
                self.s_PropertyOrLabelsWhereExpression()
                pass

            elif la_ == 2:
                self.state = 1260
                self.s_AtTWhereExpression()
                pass


            self.state = 1267
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,204,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1265
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
                    if la_ == 1:
                        self.state = 1263
                        self.s_SingleIndexWhereExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1264
                        self.s_DoubleIndexWhereExpression()
                        pass

             
                self.state = 1269
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,204,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyOrLabelsWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyOrLabelsWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyOrLabelsWhereExpression" ):
                listener.enterS_PropertyOrLabelsWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyOrLabelsWhereExpression" ):
                listener.exitS_PropertyOrLabelsWhereExpression(self)




    def s_PropertyOrLabelsWhereExpression(self):

        localctx = s_cypherParser.S_PropertyOrLabelsWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_s_PropertyOrLabelsWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self.oC_Atom()
            self.state = 1277
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,206,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1272
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1271
                        self.match(s_cypherParser.SP)


                    self.state = 1274
                    self.oC_PropertyLookup() 
                self.state = 1279
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

            self.state = 1284
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.state = 1281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1280
                    self.match(s_cypherParser.SP)


                self.state = 1283
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def s_PropertyLookupTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupTimeContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTWhereExpression" ):
                listener.enterS_AtTWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTWhereExpression" ):
                listener.exitS_AtTWhereExpression(self)




    def s_AtTWhereExpression(self):

        localctx = s_cypherParser.S_AtTWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_s_AtTWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1286
            self.oC_Atom()
            self.state = 1307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.state = 1293
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,210,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1288
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1287
                            self.match(s_cypherParser.SP)


                        self.state = 1290
                        self.oC_PropertyLookup() 
                    self.state = 1295
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,210,self._ctx)

                self.state = 1297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1296
                    self.match(s_cypherParser.SP)


                self.state = 1299
                self.oC_PropertyLookup()
                self.state = 1305
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
                if la_ == 1:
                    self.state = 1301
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1300
                        self.match(s_cypherParser.SP)


                    self.state = 1303
                    self.match(s_cypherParser.PoundValue)

                elif la_ == 2:
                    self.state = 1304
                    self.s_AtTElement()




            self.state = 1310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1309
                self.match(s_cypherParser.SP)


            self.state = 1312
            self.s_PropertyLookupTime()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SingleIndexWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_LeftWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftWhereExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SingleIndexWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SingleIndexWhereExpression" ):
                listener.enterS_SingleIndexWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SingleIndexWhereExpression" ):
                listener.exitS_SingleIndexWhereExpression(self)




    def s_SingleIndexWhereExpression(self):

        localctx = s_cypherParser.S_SingleIndexWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_s_SingleIndexWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1314
                self.match(s_cypherParser.SP)


            self.state = 1317
            self.match(s_cypherParser.T__10)
            self.state = 1318
            self.s_LeftWhereExpression()
            self.state = 1319
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DoubleIndexWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def s_LeftWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftWhereExpressionContext,0)


        def s_RightWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_RightWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DoubleIndexWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DoubleIndexWhereExpression" ):
                listener.enterS_DoubleIndexWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DoubleIndexWhereExpression" ):
                listener.exitS_DoubleIndexWhereExpression(self)




    def s_DoubleIndexWhereExpression(self):

        localctx = s_cypherParser.S_DoubleIndexWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_s_DoubleIndexWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1321
                self.match(s_cypherParser.SP)


            self.state = 1324
            self.match(s_cypherParser.T__10)
            self.state = 1326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070916) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1325
                self.s_LeftWhereExpression()


            self.state = 1328
            self.match(s_cypherParser.T__12)
            self.state = 1330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070916) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1329
                self.s_RightWhereExpression()


            self.state = 1332
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_LeftWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_LeftWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_LeftWhereExpression" ):
                listener.enterS_LeftWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_LeftWhereExpression" ):
                listener.exitS_LeftWhereExpression(self)




    def s_LeftWhereExpression(self):

        localctx = s_cypherParser.S_LeftWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_s_LeftWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1334
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_RightWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_RightWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_RightWhereExpression" ):
                listener.enterS_RightWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_RightWhereExpression" ):
                listener.exitS_RightWhereExpression(self)




    def s_RightWhereExpression(self):

        localctx = s_cypherParser.S_RightWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_s_RightWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1336
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePointLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePointLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePointLiteral" ):
                listener.enterS_TimePointLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePointLiteral" ):
                listener.exitS_TimePointLiteral(self)




    def s_TimePointLiteral(self):

        localctx = s_cypherParser.S_TimePointLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_s_TimePointLiteral)
        try:
            self.state = 1340
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1338
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1339
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(s_cypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(s_cypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(s_cypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(s_cypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(s_cypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = s_cypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1342
            _la = self._input.LA(1)
            if not(_la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(s_cypherParser.AND, 0)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def OR(self):
            return self.getToken(s_cypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(s_cypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(s_cypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(s_cypherParser.DO, 0)

        def FOR(self):
            return self.getToken(s_cypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(s_cypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(s_cypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(s_cypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(s_cypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(s_cypherParser.OF, 0)

        def ADD(self):
            return self.getToken(s_cypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(s_cypherParser.DROP, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = s_cypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            _la = self._input.LA(1)
            if not(((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 128317405001678847) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(s_cypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = s_cypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1346
                self.match(s_cypherParser.SP)


            self.state = 1349
            self.oC_Statement()
            self.state = 1354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.state = 1351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1350
                    self.match(s_cypherParser.SP)


                self.state = 1353
                self.match(s_cypherParser.T__23)


            self.state = 1357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1356
                self.match(s_cypherParser.SP)


            self.state = 1359
            self.match(s_cypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = s_cypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1361
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = s_cypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1363
            self.oC_SingleQuery()
            self.state = 1370
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,226,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1365
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1364
                        self.match(s_cypherParser.SP)


                    self.state = 1367
                    self.oC_Union() 
                self.state = 1372
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,226,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = s_cypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 1385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1373
                self.match(s_cypherParser.UNION)
                self.state = 1374
                self.match(s_cypherParser.SP)
                self.state = 1375
                self.match(s_cypherParser.ALL)
                self.state = 1377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1376
                    self.match(s_cypherParser.SP)


                self.state = 1379
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1380
                self.match(s_cypherParser.UNION)
                self.state = 1382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1381
                    self.match(s_cypherParser.SP)


                self.state = 1384
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = s_cypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_SingleQuery)
        try:
            self.state = 1389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1387
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1388
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = s_cypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 1426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 1391
                    self.oC_ReadingClause()
                    self.state = 1393
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1392
                        self.match(s_cypherParser.SP)


                    self.state = 1399
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1400
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 1401
                    self.oC_ReadingClause()
                    self.state = 1403
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1402
                        self.match(s_cypherParser.SP)


                    self.state = 1409
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1410
                self.oC_UpdatingClause()
                self.state = 1417
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,236,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1412
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1411
                            self.match(s_cypherParser.SP)


                        self.state = 1414
                        self.oC_UpdatingClause() 
                    self.state = 1419
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,236,self._ctx)

                self.state = 1424
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
                if la_ == 1:
                    self.state = 1421
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1420
                        self.match(s_cypherParser.SP)


                    self.state = 1423
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def s_WithPartQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_WithPartQueryContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_WithPartQueryContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = s_cypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_MultiPartQuery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1429 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1428
                    self.s_WithPartQuery()

                else:
                    raise NoViableAltException(self)
                self.state = 1431 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,240,self._ctx)

            self.state = 1433
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(s_cypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = s_cypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_ReadingClause)
        try:
            self.state = 1438
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1435
                self.oC_Match()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1436
                self.oC_Unwind()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1437
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = s_cypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1440
            self.match(s_cypherParser.UNWIND)
            self.state = 1442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1441
                self.match(s_cypherParser.SP)


            self.state = 1444
            self.oC_Expression()
            self.state = 1445
            self.match(s_cypherParser.SP)
            self.state = 1446
            self.match(s_cypherParser.AS)
            self.state = 1447
            self.match(s_cypherParser.SP)
            self.state = 1448
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = s_cypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1450
            self.match(s_cypherParser.MERGE)
            self.state = 1452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1451
                self.match(s_cypherParser.SP)


            self.state = 1454
            self.oC_PatternPart()
            self.state = 1459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==135:
                self.state = 1455
                self.match(s_cypherParser.SP)
                self.state = 1456
                self.oC_MergeAction()
                self.state = 1461
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = s_cypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_MergeAction)
        try:
            self.state = 1472
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1462
                self.match(s_cypherParser.ON)
                self.state = 1463
                self.match(s_cypherParser.SP)
                self.state = 1464
                self.match(s_cypherParser.MATCH)
                self.state = 1465
                self.match(s_cypherParser.SP)
                self.state = 1466
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1467
                self.match(s_cypherParser.ON)
                self.state = 1468
                self.match(s_cypherParser.SP)
                self.state = 1469
                self.match(s_cypherParser.CREATE)
                self.state = 1470
                self.match(s_cypherParser.SP)
                self.state = 1471
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = s_cypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1474
            self.match(s_cypherParser.CREATE)
            self.state = 1476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1475
                self.match(s_cypherParser.SP)


            self.state = 1478
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = s_cypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1480
            self.match(s_cypherParser.SET)
            self.state = 1482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1481
                self.match(s_cypherParser.SP)


            self.state = 1484
            self.oC_SetItem()
            self.state = 1495
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,250,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1486
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1485
                        self.match(s_cypherParser.SP)


                    self.state = 1488
                    self.match(s_cypherParser.T__0)
                    self.state = 1490
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1489
                        self.match(s_cypherParser.SP)


                    self.state = 1492
                    self.oC_SetItem() 
                self.state = 1497
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,250,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = s_cypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 1498
                self.match(s_cypherParser.DETACH)
                self.state = 1499
                self.match(s_cypherParser.SP)


            self.state = 1502
            self.match(s_cypherParser.DELETE)
            self.state = 1504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1503
                self.match(s_cypherParser.SP)


            self.state = 1506
            self.oC_Expression()
            self.state = 1517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1 or _la==135:
                self.state = 1508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1507
                    self.match(s_cypherParser.SP)


                self.state = 1510
                self.match(s_cypherParser.T__0)
                self.state = 1512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1511
                    self.match(s_cypherParser.SP)


                self.state = 1514
                self.oC_Expression()
                self.state = 1519
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = s_cypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1520
            self.match(s_cypherParser.REMOVE)
            self.state = 1521
            self.match(s_cypherParser.SP)
            self.state = 1522
            self.oC_RemoveItem()
            self.state = 1533
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,258,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1524
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1523
                        self.match(s_cypherParser.SP)


                    self.state = 1526
                    self.match(s_cypherParser.T__0)
                    self.state = 1528
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1527
                        self.match(s_cypherParser.SP)


                    self.state = 1530
                    self.oC_RemoveItem() 
                self.state = 1535
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,258,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = s_cypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1536
            self.oC_YieldItem()
            self.state = 1547
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,261,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1538
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1537
                        self.match(s_cypherParser.SP)


                    self.state = 1540
                    self.match(s_cypherParser.T__0)
                    self.state = 1542
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1541
                        self.match(s_cypherParser.SP)


                    self.state = 1544
                    self.oC_YieldItem() 
                self.state = 1549
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,261,self._ctx)

            self.state = 1554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82 or _la==135:
                self.state = 1551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1550
                    self.match(s_cypherParser.SP)


                self.state = 1553
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = s_cypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1556
            self.oC_ProcedureResultField()
            self.state = 1561
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
            if la_ == 1:
                self.state = 1557
                self.match(s_cypherParser.SP)
                self.state = 1558
                self.match(s_cypherParser.AS)
                self.state = 1559
                self.match(s_cypherParser.SP)
                self.state = 1560
                self.oC_Variable()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = s_cypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1563
            self.match(s_cypherParser.WITH)
            self.state = 1564
            self.oC_ProjectionBody()
            self.state = 1569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82 or _la==135:
                self.state = 1566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1565
                    self.match(s_cypherParser.SP)


                self.state = 1568
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = s_cypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1571
            self.match(s_cypherParser.RETURN)
            self.state = 1572
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)




    def oC_ProjectionBody(self):

        localctx = s_cypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
            if la_ == 1:
                self.state = 1575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1574
                    self.match(s_cypherParser.SP)


                self.state = 1577
                self.match(s_cypherParser.DISTINCT)


            self.state = 1580
            self.match(s_cypherParser.SP)
            self.state = 1581
            self.oC_ProjectionItems()
            self.state = 1584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
            if la_ == 1:
                self.state = 1582
                self.match(s_cypherParser.SP)
                self.state = 1583
                self.oC_Order()


            self.state = 1588
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.state = 1586
                self.match(s_cypherParser.SP)
                self.state = 1587
                self.oC_Skip()


            self.state = 1592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.state = 1590
                self.match(s_cypherParser.SP)
                self.state = 1591
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)




    def oC_ProjectionItems(self):

        localctx = s_cypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 1622
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1594
                self.match(s_cypherParser.T__6)
                self.state = 1605
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,274,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1596
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1595
                            self.match(s_cypherParser.SP)


                        self.state = 1598
                        self.match(s_cypherParser.T__0)
                        self.state = 1600
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1599
                            self.match(s_cypherParser.SP)


                        self.state = 1602
                        self.oC_ProjectionItem() 
                    self.state = 1607
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,274,self._ctx)

                pass
            elif token in [2, 8, 11, 17, 18, 26, 48, 57, 86, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1608
                self.oC_ProjectionItem()
                self.state = 1619
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,277,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1610
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1609
                            self.match(s_cypherParser.SP)


                        self.state = 1612
                        self.match(s_cypherParser.T__0)
                        self.state = 1614
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1613
                            self.match(s_cypherParser.SP)


                        self.state = 1616
                        self.oC_ProjectionItem() 
                    self.state = 1621
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,277,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)




    def oC_ProjectionItem(self):

        localctx = s_cypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_ProjectionItem)
        try:
            self.state = 1631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1624
                self.oC_Expression()
                self.state = 1625
                self.match(s_cypherParser.SP)
                self.state = 1626
                self.match(s_cypherParser.AS)
                self.state = 1627
                self.match(s_cypherParser.SP)
                self.state = 1628
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1630
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = s_cypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1633
            self.match(s_cypherParser.ORDER)
            self.state = 1634
            self.match(s_cypherParser.SP)
            self.state = 1635
            self.match(s_cypherParser.BY)
            self.state = 1636
            self.match(s_cypherParser.SP)
            self.state = 1637
            self.oC_SortItem()
            self.state = 1645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 1638
                self.match(s_cypherParser.T__0)
                self.state = 1640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1639
                    self.match(s_cypherParser.SP)


                self.state = 1642
                self.oC_SortItem()
                self.state = 1647
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = s_cypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1648
            self.match(s_cypherParser.L_SKIP)
            self.state = 1649
            self.match(s_cypherParser.SP)
            self.state = 1650
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = s_cypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1652
            self.match(s_cypherParser.LIMIT)
            self.state = 1653
            self.match(s_cypherParser.SP)
            self.state = 1654
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = s_cypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1656
            self.oC_Expression()
            self.state = 1661
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
            if la_ == 1:
                self.state = 1658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1657
                    self.match(s_cypherParser.SP)


                self.state = 1660
                _la = self._input.LA(1)
                if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = s_cypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1663
            self.match(s_cypherParser.WHERE)
            self.state = 1664
            self.match(s_cypherParser.SP)
            self.state = 1665
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = s_cypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1667
            self.oC_PatternPart()
            self.state = 1678
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,286,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1669
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1668
                        self.match(s_cypherParser.SP)


                    self.state = 1671
                    self.match(s_cypherParser.T__0)
                    self.state = 1673
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1672
                        self.match(s_cypherParser.SP)


                    self.state = 1675
                    self.oC_PatternPart() 
                self.state = 1680
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,286,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = s_cypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1681
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = s_cypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 1697
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1683
                self.oC_NodePattern()
                self.state = 1690
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,288,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1685
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1684
                            self.match(s_cypherParser.SP)


                        self.state = 1687
                        self.oC_PatternElementChain() 
                    self.state = 1692
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,288,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1693
                self.match(s_cypherParser.T__1)
                self.state = 1694
                self.oC_PatternElement()
                self.state = 1695
                self.match(s_cypherParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = s_cypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1699
            self.oC_NodePattern()
            self.state = 1704 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1701
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1700
                        self.match(s_cypherParser.SP)


                    self.state = 1703
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 1706 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,291,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = s_cypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1708
            self.oC_RelationshipPattern()
            self.state = 1710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1709
                self.match(s_cypherParser.SP)


            self.state = 1712
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = s_cypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 1778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1714
                self.oC_LeftArrowHead()
                self.state = 1716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1715
                    self.match(s_cypherParser.SP)


                self.state = 1718
                self.oC_Dash()
                self.state = 1720
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
                if la_ == 1:
                    self.state = 1719
                    self.match(s_cypherParser.SP)


                self.state = 1723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1722
                    self.oC_RelationshipDetail()


                self.state = 1726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1725
                    self.match(s_cypherParser.SP)


                self.state = 1728
                self.oC_Dash()
                self.state = 1730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1729
                    self.match(s_cypherParser.SP)


                self.state = 1732
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1734
                self.oC_LeftArrowHead()
                self.state = 1736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1735
                    self.match(s_cypherParser.SP)


                self.state = 1738
                self.oC_Dash()
                self.state = 1740
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
                if la_ == 1:
                    self.state = 1739
                    self.match(s_cypherParser.SP)


                self.state = 1743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1742
                    self.oC_RelationshipDetail()


                self.state = 1746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1745
                    self.match(s_cypherParser.SP)


                self.state = 1748
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1750
                self.oC_Dash()
                self.state = 1752
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
                if la_ == 1:
                    self.state = 1751
                    self.match(s_cypherParser.SP)


                self.state = 1755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1754
                    self.oC_RelationshipDetail()


                self.state = 1758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1757
                    self.match(s_cypherParser.SP)


                self.state = 1760
                self.oC_Dash()
                self.state = 1762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1761
                    self.match(s_cypherParser.SP)


                self.state = 1764
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1766
                self.oC_Dash()
                self.state = 1768
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
                if la_ == 1:
                    self.state = 1767
                    self.match(s_cypherParser.SP)


                self.state = 1771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1770
                    self.oC_RelationshipDetail()


                self.state = 1774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1773
                    self.match(s_cypherParser.SP)


                self.state = 1776
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = s_cypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_oC_Properties)
        try:
            self.state = 1782
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1780
                self.oC_MapLiteral()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1781
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = s_cypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1784
            self.match(s_cypherParser.T__9)
            self.state = 1786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1785
                self.match(s_cypherParser.SP)


            self.state = 1788
            self.oC_RelTypeName()
            self.state = 1802
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,315,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1790
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1789
                        self.match(s_cypherParser.SP)


                    self.state = 1792
                    self.match(s_cypherParser.T__24)
                    self.state = 1794
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==10:
                        self.state = 1793
                        self.match(s_cypherParser.T__9)


                    self.state = 1797
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1796
                        self.match(s_cypherParser.SP)


                    self.state = 1799
                    self.oC_RelTypeName() 
                self.state = 1804
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,315,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = s_cypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1805
            self.oC_NodeLabel()
            self.state = 1812
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,317,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1807
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1806
                        self.match(s_cypherParser.SP)


                    self.state = 1809
                    self.oC_NodeLabel() 
                self.state = 1814
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,317,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = s_cypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1815
            self.match(s_cypherParser.T__9)
            self.state = 1817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1816
                self.match(s_cypherParser.SP)


            self.state = 1819
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = s_cypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1821
            self.match(s_cypherParser.T__6)
            self.state = 1823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1822
                self.match(s_cypherParser.SP)


            self.state = 1829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                self.state = 1825
                self.oC_IntegerLiteral()
                self.state = 1827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1826
                    self.match(s_cypherParser.SP)




            self.state = 1841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 1831
                self.match(s_cypherParser.T__12)
                self.state = 1833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1832
                    self.match(s_cypherParser.SP)


                self.state = 1839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                    self.state = 1835
                    self.oC_IntegerLiteral()
                    self.state = 1837
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1836
                        self.match(s_cypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = s_cypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1843
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = s_cypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1845
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = s_cypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1847
            self.oC_Atom()
            self.state = 1852 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1849
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1848
                        self.match(s_cypherParser.SP)


                    self.state = 1851
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 1854 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,327,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = s_cypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1856
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = s_cypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1858
            self.oC_XorExpression()
            self.state = 1865
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,328,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1859
                    self.match(s_cypherParser.SP)
                    self.state = 1860
                    self.match(s_cypherParser.OR)
                    self.state = 1861
                    self.match(s_cypherParser.SP)
                    self.state = 1862
                    self.oC_XorExpression() 
                self.state = 1867
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,328,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = s_cypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1868
            self.oC_AndExpression()
            self.state = 1875
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,329,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1869
                    self.match(s_cypherParser.SP)
                    self.state = 1870
                    self.match(s_cypherParser.XOR)
                    self.state = 1871
                    self.match(s_cypherParser.SP)
                    self.state = 1872
                    self.oC_AndExpression() 
                self.state = 1877
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,329,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = s_cypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1878
            self.oC_NotExpression()
            self.state = 1885
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,330,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1879
                    self.match(s_cypherParser.SP)
                    self.state = 1880
                    self.match(s_cypherParser.AND)
                    self.state = 1881
                    self.match(s_cypherParser.SP)
                    self.state = 1882
                    self.oC_NotExpression() 
                self.state = 1887
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,330,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = s_cypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1888
                self.match(s_cypherParser.NOT)
                self.state = 1890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1889
                    self.match(s_cypherParser.SP)


                self.state = 1896
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1897
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_StringListNullPredicateExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,i)


        def s_ComparisonOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ComparisonOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ComparisonOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = s_cypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1899
            self.oC_StringListNullPredicateExpression()
            self.state = 1911
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,335,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1901
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1900
                        self.match(s_cypherParser.SP)


                    self.state = 1903
                    self.s_ComparisonOperator()
                    self.state = 1905
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1904
                        self.match(s_cypherParser.SP)


                    self.state = 1907
                    self.oC_StringListNullPredicateExpression() 
                self.state = 1913
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,335,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringPredicateExpression" ):
                listener.enterOC_StringPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringPredicateExpression" ):
                listener.exitOC_StringPredicateExpression(self)




    def oC_StringPredicateExpression(self):

        localctx = s_cypherParser.OC_StringPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_oC_StringPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
            if la_ == 1:
                self.state = 1914
                self.match(s_cypherParser.SP)
                self.state = 1915
                self.match(s_cypherParser.STARTS)
                self.state = 1916
                self.match(s_cypherParser.SP)
                self.state = 1917
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1918
                self.match(s_cypherParser.SP)
                self.state = 1919
                self.match(s_cypherParser.ENDS)
                self.state = 1920
                self.match(s_cypherParser.SP)
                self.state = 1921
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1922
                self.match(s_cypherParser.SP)
                self.state = 1923
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 1927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1926
                self.match(s_cypherParser.SP)


            self.state = 1929
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListPredicateExpression" ):
                listener.enterOC_ListPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListPredicateExpression" ):
                listener.exitOC_ListPredicateExpression(self)




    def oC_ListPredicateExpression(self):

        localctx = s_cypherParser.OC_ListPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_oC_ListPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1931
            self.match(s_cypherParser.SP)
            self.state = 1932
            self.match(s_cypherParser.IN)
            self.state = 1934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1933
                self.match(s_cypherParser.SP)


            self.state = 1936
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullPredicateExpression" ):
                listener.enterOC_NullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullPredicateExpression" ):
                listener.exitOC_NullPredicateExpression(self)




    def oC_NullPredicateExpression(self):

        localctx = s_cypherParser.OC_NullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_oC_NullPredicateExpression)
        try:
            self.state = 1948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1938
                self.match(s_cypherParser.SP)
                self.state = 1939
                self.match(s_cypherParser.IS)
                self.state = 1940
                self.match(s_cypherParser.SP)
                self.state = 1941
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1942
                self.match(s_cypherParser.SP)
                self.state = 1943
                self.match(s_cypherParser.IS)
                self.state = 1944
                self.match(s_cypherParser.SP)
                self.state = 1945
                self.match(s_cypherParser.NOT)
                self.state = 1946
                self.match(s_cypherParser.SP)
                self.state = 1947
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def s_AddOrSubtractOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AddOrSubtractOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1950
            self.oC_MultiplyDivideModuloExpression()
            self.state = 1971
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,345,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1969
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
                    if la_ == 1:
                        self.state = 1952
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1951
                            self.match(s_cypherParser.SP)


                        self.state = 1954
                        self.s_AddOrSubtractOperator()
                        self.state = 1956
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1955
                            self.match(s_cypherParser.SP)


                        self.state = 1958
                        self.oC_MultiplyDivideModuloExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1961
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1960
                            self.match(s_cypherParser.SP)


                        self.state = 1963
                        self.s_AddOrSubtractOperator()
                        self.state = 1965
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1964
                            self.match(s_cypherParser.SP)


                        self.state = 1967
                        self.oC_MultiplyDivideModuloExpression()
                        pass

             
                self.state = 1973
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,345,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MultiplyDivideModuloOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MultiplyDivideModuloOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MultiplyDivideModuloOperator" ):
                listener.enterS_MultiplyDivideModuloOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MultiplyDivideModuloOperator" ):
                listener.exitS_MultiplyDivideModuloOperator(self)




    def s_MultiplyDivideModuloOperator(self):

        localctx = s_cypherParser.S_MultiplyDivideModuloOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_s_MultiplyDivideModuloOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1974
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 49280) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PowerOfOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PowerOfOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PowerOfOperator" ):
                listener.enterS_PowerOfOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PowerOfOperator" ):
                listener.exitS_PowerOfOperator(self)




    def s_PowerOfOperator(self):

        localctx = s_cypherParser.S_PowerOfOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_s_PowerOfOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1976
            self.match(s_cypherParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AddOrSubtractOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AddOrSubtractOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AddOrSubtractOperator" ):
                listener.enterS_AddOrSubtractOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AddOrSubtractOperator" ):
                listener.exitS_AddOrSubtractOperator(self)




    def s_AddOrSubtractOperator(self):

        localctx = s_cypherParser.S_AddOrSubtractOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_s_AddOrSubtractOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1978
            _la = self._input.LA(1)
            if not(_la==17 or _la==18):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ComparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ComparisonOperator" ):
                listener.enterS_ComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ComparisonOperator" ):
                listener.exitS_ComparisonOperator(self)




    def s_ComparisonOperator(self):

        localctx = s_cypherParser.S_ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_s_ComparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1980
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 16252944) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PowerOfExpressionContext,i)


        def s_MultiplyDivideModuloOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MultiplyDivideModuloOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MultiplyDivideModuloOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = s_cypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1982
            self.oC_PowerOfExpression()
            self.state = 2012
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,353,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2010
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
                    if la_ == 1:
                        self.state = 1984
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1983
                            self.match(s_cypherParser.SP)


                        self.state = 1986
                        self.s_MultiplyDivideModuloOperator()
                        self.state = 1988
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1987
                            self.match(s_cypherParser.SP)


                        self.state = 1990
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1993
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1992
                            self.match(s_cypherParser.SP)


                        self.state = 1995
                        self.s_MultiplyDivideModuloOperator()
                        self.state = 1997
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1996
                            self.match(s_cypherParser.SP)


                        self.state = 1999
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 3:
                        self.state = 2002
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 2001
                            self.match(s_cypherParser.SP)


                        self.state = 2004
                        self.s_MultiplyDivideModuloOperator()
                        self.state = 2006
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 2005
                            self.match(s_cypherParser.SP)


                        self.state = 2008
                        self.oC_PowerOfExpression()
                        pass

             
                self.state = 2014
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,353,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def s_PowerOfOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PowerOfOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PowerOfOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = s_cypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2015
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 2027
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,356,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2017
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2016
                        self.match(s_cypherParser.SP)


                    self.state = 2019
                    self.s_PowerOfOperator()
                    self.state = 2021
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2020
                        self.match(s_cypherParser.SP)


                    self.state = 2023
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 2029
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,356,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ListOperatorExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListOperatorExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.state = 2036
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 8, 11, 26, 48, 57, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2030
                self.oC_ListOperatorExpression()
                pass
            elif token in [17, 18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2031
                _la = self._input.LA(1)
                if not(_la==17 or _la==18):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2033
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2032
                    self.match(s_cypherParser.SP)


                self.state = 2035
                self.oC_ListOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = s_cypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2038
            self.match(s_cypherParser.T__5)
            self.state = 2040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2039
                self.match(s_cypherParser.SP)


            self.state = 2042
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternComprehensionContext,0)


        def oC_Quantifier(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QuantifierContext,0)


        def oC_PatternPredicate(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPredicateContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionInvocationContext,0)


        def oC_ExistentialSubquery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExistentialSubqueryContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = s_cypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 2068
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2044
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2045
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2046
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2047
                self.match(s_cypherParser.COUNT)
                self.state = 2049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2048
                    self.match(s_cypherParser.SP)


                self.state = 2051
                self.match(s_cypherParser.T__1)
                self.state = 2053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2052
                    self.match(s_cypherParser.SP)


                self.state = 2055
                self.match(s_cypherParser.T__6)
                self.state = 2057
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2056
                    self.match(s_cypherParser.SP)


                self.state = 2059
                self.match(s_cypherParser.T__2)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2060
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2061
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2062
                self.oC_Quantifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2063
                self.oC_PatternPredicate()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2064
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2065
                self.oC_FunctionInvocation()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2066
                self.oC_ExistentialSubquery()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2067
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def oC_CaseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_CaseAlternativeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = s_cypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2092
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
            if la_ == 1:
                self.state = 2070
                self.match(s_cypherParser.CASE)
                self.state = 2075 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2072
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 2071
                            self.match(s_cypherParser.SP)


                        self.state = 2074
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2077 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,365,self._ctx)

                pass

            elif la_ == 2:
                self.state = 2079
                self.match(s_cypherParser.CASE)
                self.state = 2081
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2080
                    self.match(s_cypherParser.SP)


                self.state = 2083
                self.oC_Expression()
                self.state = 2088 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2085
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 2084
                            self.match(s_cypherParser.SP)


                        self.state = 2087
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2090 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,368,self._ctx)

                pass


            self.state = 2102
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
            if la_ == 1:
                self.state = 2095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2094
                    self.match(s_cypherParser.SP)


                self.state = 2097
                self.match(s_cypherParser.ELSE)
                self.state = 2099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2098
                    self.match(s_cypherParser.SP)


                self.state = 2101
                self.oC_Expression()


            self.state = 2105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2104
                self.match(s_cypherParser.SP)


            self.state = 2107
            self.match(s_cypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternative" ):
                listener.enterOC_CaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternative" ):
                listener.exitOC_CaseAlternative(self)




    def oC_CaseAlternative(self):

        localctx = s_cypherParser.OC_CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_oC_CaseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2109
            self.match(s_cypherParser.WHEN)
            self.state = 2111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2110
                self.match(s_cypherParser.SP)


            self.state = 2113
            self.oC_Expression()
            self.state = 2115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2114
                self.match(s_cypherParser.SP)


            self.state = 2117
            self.match(s_cypherParser.THEN)
            self.state = 2119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2118
                self.match(s_cypherParser.SP)


            self.state = 2121
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = s_cypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2123
            self.match(s_cypherParser.T__10)
            self.state = 2125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2124
                self.match(s_cypherParser.SP)


            self.state = 2127
            self.oC_FilterExpression()
            self.state = 2136
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
            if la_ == 1:
                self.state = 2129
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2128
                    self.match(s_cypherParser.SP)


                self.state = 2131
                self.match(s_cypherParser.T__24)
                self.state = 2133
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2132
                    self.match(s_cypherParser.SP)


                self.state = 2135
                self.oC_Expression()


            self.state = 2139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2138
                self.match(s_cypherParser.SP)


            self.state = 2141
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = s_cypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2143
            self.match(s_cypherParser.T__10)
            self.state = 2145
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2144
                self.match(s_cypherParser.SP)


            self.state = 2155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 2147
                self.oC_Variable()
                self.state = 2149
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2148
                    self.match(s_cypherParser.SP)


                self.state = 2151
                self.match(s_cypherParser.T__3)
                self.state = 2153
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2152
                    self.match(s_cypherParser.SP)




            self.state = 2157
            self.oC_RelationshipsPattern()
            self.state = 2159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2158
                self.match(s_cypherParser.SP)


            self.state = 2165
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 2161
                self.oC_Where()
                self.state = 2163
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2162
                    self.match(s_cypherParser.SP)




            self.state = 2167
            self.match(s_cypherParser.T__24)
            self.state = 2169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2168
                self.match(s_cypherParser.SP)


            self.state = 2171
            self.oC_Expression()
            self.state = 2173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2172
                self.match(s_cypherParser.SP)


            self.state = 2175
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Quantifier" ):
                listener.enterOC_Quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Quantifier" ):
                listener.exitOC_Quantifier(self)




    def oC_Quantifier(self):

        localctx = s_cypherParser.OC_QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_oC_Quantifier)
        self._la = 0 # Token type
        try:
            self.state = 2233
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2177
                self.match(s_cypherParser.ALL)
                self.state = 2179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2178
                    self.match(s_cypherParser.SP)


                self.state = 2181
                self.match(s_cypherParser.T__1)
                self.state = 2183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2182
                    self.match(s_cypherParser.SP)


                self.state = 2185
                self.oC_FilterExpression()
                self.state = 2187
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2186
                    self.match(s_cypherParser.SP)


                self.state = 2189
                self.match(s_cypherParser.T__2)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2191
                self.match(s_cypherParser.ANY)
                self.state = 2193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2192
                    self.match(s_cypherParser.SP)


                self.state = 2195
                self.match(s_cypherParser.T__1)
                self.state = 2197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2196
                    self.match(s_cypherParser.SP)


                self.state = 2199
                self.oC_FilterExpression()
                self.state = 2201
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2200
                    self.match(s_cypherParser.SP)


                self.state = 2203
                self.match(s_cypherParser.T__2)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2205
                self.match(s_cypherParser.NONE)
                self.state = 2207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2206
                    self.match(s_cypherParser.SP)


                self.state = 2209
                self.match(s_cypherParser.T__1)
                self.state = 2211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2210
                    self.match(s_cypherParser.SP)


                self.state = 2213
                self.oC_FilterExpression()
                self.state = 2215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2214
                    self.match(s_cypherParser.SP)


                self.state = 2217
                self.match(s_cypherParser.T__2)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2219
                self.match(s_cypherParser.SINGLE)
                self.state = 2221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2220
                    self.match(s_cypherParser.SP)


                self.state = 2223
                self.match(s_cypherParser.T__1)
                self.state = 2225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2224
                    self.match(s_cypherParser.SP)


                self.state = 2227
                self.oC_FilterExpression()
                self.state = 2229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2228
                    self.match(s_cypherParser.SP)


                self.state = 2231
                self.match(s_cypherParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPredicate" ):
                listener.enterOC_PatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPredicate" ):
                listener.exitOC_PatternPredicate(self)




    def oC_PatternPredicate(self):

        localctx = s_cypherParser.OC_PatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_oC_PatternPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2235
            self.oC_RelationshipsPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = s_cypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2237
            self.match(s_cypherParser.T__1)
            self.state = 2239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2238
                self.match(s_cypherParser.SP)


            self.state = 2241
            self.oC_Expression()
            self.state = 2243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2242
                self.match(s_cypherParser.SP)


            self.state = 2245
            self.match(s_cypherParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = s_cypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2247
            self.oC_Variable()
            self.state = 2248
            self.match(s_cypherParser.SP)
            self.state = 2249
            self.match(s_cypherParser.IN)
            self.state = 2250
            self.match(s_cypherParser.SP)
            self.state = 2251
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def s_FunctionInvocationExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_FunctionInvocationExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_FunctionInvocationExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = s_cypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2253
            self.oC_FunctionName()
            self.state = 2255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2254
                self.match(s_cypherParser.SP)


            self.state = 2257
            self.match(s_cypherParser.T__1)
            self.state = 2259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2258
                self.match(s_cypherParser.SP)


            self.state = 2265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 2261
                self.match(s_cypherParser.DISTINCT)
                self.state = 2263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2262
                    self.match(s_cypherParser.SP)




            self.state = 2284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070916) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 2267
                self.s_FunctionInvocationExpression()
                self.state = 2269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2268
                    self.match(s_cypherParser.SP)


                self.state = 2281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 2271
                    self.match(s_cypherParser.T__0)
                    self.state = 2273
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2272
                        self.match(s_cypherParser.SP)


                    self.state = 2275
                    self.s_FunctionInvocationExpression()
                    self.state = 2277
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2276
                        self.match(s_cypherParser.SP)


                    self.state = 2283
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2286
            self.match(s_cypherParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_FunctionInvocationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_FunctionInvocationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_FunctionInvocationExpression" ):
                listener.enterS_FunctionInvocationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_FunctionInvocationExpression" ):
                listener.exitS_FunctionInvocationExpression(self)




    def s_FunctionInvocationExpression(self):

        localctx = s_cypherParser.S_FunctionInvocationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_s_FunctionInvocationExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2288
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = s_cypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_oC_FunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2290
            self.oC_Namespace()
            self.state = 2291
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2293
            self.oC_ProcedureName()
            self.state = 2295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2294
                self.match(s_cypherParser.SP)


            self.state = 2297
            self.match(s_cypherParser.T__1)
            self.state = 2299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2298
                self.match(s_cypherParser.SP)


            self.state = 2318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070916) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 2301
                self.oC_Expression()
                self.state = 2303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2302
                    self.match(s_cypherParser.SP)


                self.state = 2315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 2305
                    self.match(s_cypherParser.T__0)
                    self.state = 2307
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2306
                        self.match(s_cypherParser.SP)


                    self.state = 2309
                    self.oC_Expression()
                    self.state = 2311
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2310
                        self.match(s_cypherParser.SP)


                    self.state = 2317
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2320
            self.match(s_cypherParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2322
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = s_cypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2324
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = s_cypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2326
            self.oC_Namespace()
            self.state = 2327
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = s_cypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2334
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,422,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2329
                    self.oC_SymbolicName()
                    self.state = 2330
                    self.match(s_cypherParser.T__5) 
                self.state = 2336
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,422,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = s_cypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2337
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_ListLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListLiteralContext,0)


        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = s_cypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_oC_Literal)
        try:
            self.state = 2345
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2339
                self.oC_BooleanLiteral()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2340
                self.match(s_cypherParser.NULL)
                pass
            elif token in [105, 106, 107, 115, 116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2341
                self.oC_NumberLiteral()
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2342
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2343
                self.oC_ListLiteral()
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2344
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = s_cypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2347
            _la = self._input.LA(1)
            if not(_la==103 or _la==104):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = s_cypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_oC_NumberLiteral)
        try:
            self.state = 2351
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115, 116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2349
                self.oC_DoubleLiteral()
                pass
            elif token in [105, 106, 107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2350
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(s_cypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(s_cypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = s_cypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2353
            _la = self._input.LA(1)
            if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(s_cypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(s_cypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = s_cypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2355
            _la = self._input.LA(1)
            if not(_la==115 or _la==116):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_ListLiteralExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ListLiteralExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ListLiteralExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = s_cypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2357
            self.match(s_cypherParser.T__10)
            self.state = 2359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2358
                self.match(s_cypherParser.SP)


            self.state = 2378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070916) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 2361
                self.s_ListLiteralExpression()
                self.state = 2363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2362
                    self.match(s_cypherParser.SP)


                self.state = 2375
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 2365
                    self.match(s_cypherParser.T__0)
                    self.state = 2367
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2366
                        self.match(s_cypherParser.SP)


                    self.state = 2369
                    self.s_ListLiteralExpression()
                    self.state = 2371
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2370
                        self.match(s_cypherParser.SP)


                    self.state = 2377
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2380
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ListLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ListLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ListLiteralExpression" ):
                listener.enterS_ListLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ListLiteralExpression" ):
                listener.exitS_ListLiteralExpression(self)




    def s_ListLiteralExpression(self):

        localctx = s_cypherParser.S_ListLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_s_ListLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2382
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_MapKeyValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MapKeyValueContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MapKeyValueContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = s_cypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2384
            self.match(s_cypherParser.T__7)
            self.state = 2386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2385
                self.match(s_cypherParser.SP)


            self.state = 2399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 2388
                self.s_MapKeyValue()
                self.state = 2396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 2389
                    self.match(s_cypherParser.T__0)
                    self.state = 2391
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2390
                        self.match(s_cypherParser.SP)


                    self.state = 2393
                    self.s_MapKeyValue()
                    self.state = 2398
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2401
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MapKeyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MapKeyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MapKeyValue" ):
                listener.enterS_MapKeyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MapKeyValue" ):
                listener.exitS_MapKeyValue(self)




    def s_MapKeyValue(self):

        localctx = s_cypherParser.S_MapKeyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_s_MapKeyValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2403
            self.oC_PropertyKeyName()
            self.state = 2405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2404
                self.match(s_cypherParser.SP)


            self.state = 2407
            self.match(s_cypherParser.T__9)
            self.state = 2409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2408
                self.match(s_cypherParser.SP)


            self.state = 2411
            self.oC_Expression()
            self.state = 2413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2412
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = s_cypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2415
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = s_cypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2417
            self.match(s_cypherParser.T__25)
            self.state = 2420
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 2418
                self.oC_SymbolicName()
                pass
            elif token in [106]:
                self.state = 2419
                self.match(s_cypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = s_cypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_oC_SchemaName)
        try:
            self.state = 2424
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,439,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2422
                self.oC_SymbolicName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2423
                self.oC_ReservedWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = s_cypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2426
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2014314496) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = s_cypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2428
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32216449024) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = s_cypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2430
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70334384701440) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





