# Generated from .\s_cypher.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,137,1951,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,1,0,1,0,1,
        0,3,0,254,8,0,1,1,1,1,3,1,258,8,1,1,1,1,1,3,1,262,8,1,1,1,1,1,3,
        1,266,8,1,1,1,1,1,3,1,270,8,1,3,1,272,8,1,1,1,3,1,275,8,1,1,1,3,
        1,278,8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,286,8,2,1,2,3,2,289,8,2,1,
        2,3,2,292,8,2,1,3,1,3,3,3,296,8,3,1,3,1,3,1,3,1,3,3,3,302,8,3,1,
        3,3,3,305,8,3,1,3,1,3,1,3,3,3,310,8,3,1,3,1,3,1,3,1,3,3,3,316,8,
        3,1,3,3,3,319,8,3,1,3,1,3,1,3,3,3,324,8,3,1,3,3,3,327,8,3,1,3,3,
        3,330,8,3,1,3,1,3,3,3,334,8,3,1,3,1,3,1,3,1,3,3,3,340,8,3,1,3,3,
        3,343,8,3,1,3,1,3,1,3,3,3,348,8,3,1,3,3,3,351,8,3,1,3,3,3,354,8,
        3,1,3,1,3,3,3,358,8,3,1,3,1,3,3,3,362,8,3,1,3,3,3,365,8,3,1,3,1,
        3,3,3,369,8,3,1,3,1,3,3,3,373,8,3,1,3,1,3,1,3,1,3,3,3,379,8,3,1,
        3,1,3,3,3,383,8,3,1,3,1,3,1,3,1,3,3,3,389,8,3,1,3,1,3,3,3,393,8,
        3,1,3,1,3,1,3,1,3,3,3,399,8,3,1,3,1,3,3,3,403,8,3,1,4,1,4,3,4,407,
        8,4,1,4,1,4,3,4,411,8,4,1,4,1,4,3,4,415,8,4,1,4,5,4,418,8,4,10,4,
        12,4,421,9,4,1,5,1,5,1,5,1,5,3,5,427,8,5,1,5,1,5,1,5,3,5,432,8,5,
        1,6,1,6,3,6,436,8,6,1,6,1,6,3,6,440,8,6,1,6,1,6,3,6,444,8,6,1,6,
        1,6,3,6,448,8,6,1,6,5,6,451,8,6,10,6,12,6,454,9,6,1,7,1,7,1,7,1,
        7,3,7,460,8,7,1,7,1,7,1,7,3,7,465,8,7,1,8,1,8,3,8,469,8,8,1,8,1,
        8,1,9,1,9,3,9,475,8,9,1,9,1,9,1,10,1,10,3,10,481,8,10,1,11,1,11,
        3,11,485,8,11,1,11,1,11,1,12,1,12,3,12,491,8,12,1,12,1,12,1,13,1,
        13,3,13,497,8,13,1,13,1,13,3,13,501,8,13,1,13,1,13,1,13,1,13,3,13,
        507,8,13,1,13,1,13,3,13,511,8,13,1,13,1,13,1,13,3,13,516,8,13,1,
        14,1,14,3,14,520,8,14,1,14,1,14,3,14,524,8,14,1,14,1,14,3,14,528,
        8,14,1,14,1,14,1,15,1,15,3,15,534,8,15,1,15,1,15,3,15,538,8,15,1,
        15,1,15,1,16,1,16,3,16,544,8,16,1,16,1,16,3,16,548,8,16,3,16,550,
        8,16,1,16,1,16,3,16,554,8,16,3,16,556,8,16,1,16,1,16,3,16,560,8,
        16,3,16,562,8,16,1,16,1,16,3,16,566,8,16,3,16,568,8,16,1,16,1,16,
        1,17,1,17,3,17,574,8,17,1,18,1,18,3,18,578,8,18,1,18,1,18,1,18,1,
        18,1,18,3,18,585,8,18,1,18,1,18,1,18,1,18,5,18,591,8,18,10,18,12,
        18,594,9,18,3,18,596,8,18,1,18,1,18,1,19,1,19,3,19,602,8,19,1,19,
        1,19,3,19,606,8,19,3,19,608,8,19,1,20,3,20,611,8,20,1,20,1,20,3,
        20,615,8,20,1,20,1,20,3,20,619,8,20,3,20,621,8,20,1,21,1,21,3,21,
        625,8,21,1,21,1,21,3,21,629,8,21,3,21,631,8,21,1,21,1,21,3,21,635,
        8,21,3,21,637,8,21,1,21,3,21,640,8,21,1,21,1,21,3,21,644,8,21,3,
        21,646,8,21,1,21,1,21,3,21,650,8,21,3,21,652,8,21,1,21,1,21,1,22,
        1,22,1,22,1,22,1,22,3,22,661,8,22,1,23,1,23,3,23,665,8,23,1,23,1,
        23,5,23,669,8,23,10,23,12,23,672,9,23,1,24,3,24,675,8,24,1,24,1,
        24,1,24,1,24,1,25,3,25,682,8,25,1,25,1,25,3,25,686,8,25,1,25,1,25,
        3,25,690,8,25,1,25,1,25,1,26,1,26,3,26,696,8,26,1,26,4,26,699,8,
        26,11,26,12,26,700,1,26,3,26,704,8,26,1,26,3,26,707,8,26,3,26,709,
        8,26,1,26,3,26,712,8,26,1,26,1,26,1,27,1,27,3,27,718,8,27,1,27,5,
        27,721,8,27,10,27,12,27,724,9,27,1,28,1,28,1,28,1,28,1,28,1,29,1,
        29,3,29,733,8,29,1,29,1,29,3,29,737,8,29,1,29,1,29,3,29,741,8,29,
        1,29,1,29,3,29,745,8,29,1,29,1,29,3,29,749,8,29,1,29,3,29,752,8,
        29,1,29,1,29,1,30,1,30,3,30,758,8,30,1,31,1,31,1,32,1,32,1,33,3,
        33,765,8,33,1,33,1,33,3,33,769,8,33,1,33,3,33,772,8,33,1,33,3,33,
        775,8,33,1,33,1,33,1,34,1,34,1,35,1,35,3,35,783,8,35,1,35,5,35,786,
        8,35,10,35,12,35,789,9,35,1,36,1,36,1,36,1,36,3,36,795,8,36,1,36,
        1,36,1,36,3,36,800,8,36,1,36,3,36,803,8,36,1,37,1,37,3,37,807,8,
        37,1,38,1,38,3,38,811,8,38,5,38,813,8,38,10,38,12,38,816,9,38,1,
        38,1,38,1,38,3,38,821,8,38,5,38,823,8,38,10,38,12,38,826,9,38,1,
        38,1,38,3,38,830,8,38,1,38,5,38,833,8,38,10,38,12,38,836,9,38,1,
        38,3,38,839,8,38,1,38,3,38,842,8,38,3,38,844,8,38,1,39,4,39,847,
        8,39,11,39,12,39,848,1,39,1,39,1,40,1,40,3,40,855,8,40,5,40,857,
        8,40,10,40,12,40,860,9,40,1,40,1,40,3,40,864,8,40,5,40,866,8,40,
        10,40,12,40,869,9,40,1,40,1,40,3,40,873,8,40,1,41,1,41,1,41,3,41,
        878,8,41,1,42,1,42,3,42,882,8,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
        43,1,43,3,43,892,8,43,1,43,1,43,1,43,5,43,897,8,43,10,43,12,43,900,
        9,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,912,
        8,44,1,45,1,45,3,45,916,8,45,1,45,1,45,1,46,1,46,3,46,922,8,46,1,
        46,1,46,3,46,926,8,46,1,46,1,46,3,46,930,8,46,1,46,5,46,933,8,46,
        10,46,12,46,936,9,46,1,47,1,47,1,47,1,47,3,47,942,8,47,1,47,1,47,
        3,47,946,8,47,1,47,5,47,949,8,47,10,47,12,47,952,9,47,1,48,1,48,
        1,48,1,48,3,48,958,8,48,1,49,1,49,1,49,1,49,3,49,964,8,49,1,49,1,
        49,1,49,3,49,969,8,49,1,50,1,50,1,50,1,50,3,50,975,8,50,1,50,3,50,
        978,8,50,1,50,1,50,1,50,1,50,3,50,984,8,50,3,50,986,8,50,1,51,1,
        51,3,51,990,8,51,1,51,1,51,3,51,994,8,51,1,51,5,51,997,8,51,10,51,
        12,51,1000,9,51,1,51,3,51,1003,8,51,1,51,3,51,1006,8,51,1,52,1,52,
        1,52,1,52,1,52,3,52,1013,8,52,1,52,1,52,1,53,1,53,1,53,3,53,1020,
        8,53,1,53,3,53,1023,8,53,1,54,1,54,1,54,1,55,3,55,1029,8,55,1,55,
        3,55,1032,8,55,1,55,1,55,1,55,1,55,3,55,1038,8,55,1,55,1,55,3,55,
        1042,8,55,1,55,1,55,3,55,1046,8,55,1,56,1,56,3,56,1050,8,56,1,56,
        1,56,3,56,1054,8,56,1,56,5,56,1057,8,56,10,56,12,56,1060,9,56,1,
        56,1,56,3,56,1064,8,56,1,56,1,56,3,56,1068,8,56,1,56,5,56,1071,8,
        56,10,56,12,56,1074,9,56,3,56,1076,8,56,1,57,1,57,1,57,1,57,1,57,
        1,57,1,57,3,57,1085,8,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,
        1094,8,58,1,58,5,58,1097,8,58,10,58,12,58,1100,9,58,1,59,1,59,1,
        59,1,59,1,60,1,60,1,60,1,60,1,61,1,61,3,61,1112,8,61,1,61,3,61,1115,
        8,61,1,62,1,62,1,62,1,62,1,63,1,63,3,63,1123,8,63,1,63,1,63,3,63,
        1127,8,63,1,63,5,63,1130,8,63,10,63,12,63,1133,9,63,1,64,1,64,1,
        65,1,65,3,65,1139,8,65,1,65,5,65,1142,8,65,10,65,12,65,1145,9,65,
        1,65,1,65,1,65,1,65,3,65,1151,8,65,1,66,1,66,3,66,1155,8,66,1,66,
        4,66,1158,8,66,11,66,12,66,1159,1,67,1,67,3,67,1164,8,67,1,67,1,
        67,1,68,1,68,3,68,1170,8,68,1,68,1,68,3,68,1174,8,68,1,68,3,68,1177,
        8,68,1,68,3,68,1180,8,68,1,68,1,68,3,68,1184,8,68,1,68,1,68,1,68,
        1,68,3,68,1190,8,68,1,68,1,68,3,68,1194,8,68,1,68,3,68,1197,8,68,
        1,68,3,68,1200,8,68,1,68,1,68,1,68,1,68,3,68,1206,8,68,1,68,3,68,
        1209,8,68,1,68,3,68,1212,8,68,1,68,1,68,3,68,1216,8,68,1,68,1,68,
        1,68,1,68,3,68,1222,8,68,1,68,3,68,1225,8,68,1,68,3,68,1228,8,68,
        1,68,1,68,3,68,1232,8,68,1,69,1,69,3,69,1236,8,69,1,70,1,70,3,70,
        1240,8,70,1,70,1,70,3,70,1244,8,70,1,70,1,70,3,70,1248,8,70,1,70,
        3,70,1251,8,70,1,70,5,70,1254,8,70,10,70,12,70,1257,9,70,1,71,1,
        71,3,71,1261,8,71,1,71,5,71,1264,8,71,10,71,12,71,1267,9,71,1,72,
        1,72,3,72,1271,8,72,1,72,1,72,1,73,1,73,3,73,1277,8,73,1,73,1,73,
        3,73,1281,8,73,3,73,1283,8,73,1,73,1,73,3,73,1287,8,73,1,73,1,73,
        3,73,1291,8,73,3,73,1293,8,73,3,73,1295,8,73,1,74,1,74,1,75,1,75,
        1,76,1,76,3,76,1303,8,76,1,76,4,76,1306,8,76,11,76,12,76,1307,1,
        77,1,77,1,78,1,78,1,78,1,78,1,78,5,78,1317,8,78,10,78,12,78,1320,
        9,78,1,79,1,79,1,79,1,79,1,79,5,79,1327,8,79,10,79,12,79,1330,9,
        79,1,80,1,80,1,80,1,80,1,80,5,80,1337,8,80,10,80,12,80,1340,9,80,
        1,81,1,81,3,81,1344,8,81,5,81,1346,8,81,10,81,12,81,1349,9,81,1,
        81,1,81,1,82,1,82,3,82,1355,8,82,1,82,5,82,1358,8,82,10,82,12,82,
        1361,9,82,1,83,1,83,3,83,1365,8,83,1,83,1,83,1,83,3,83,1370,8,83,
        1,83,1,83,1,83,3,83,1375,8,83,1,83,1,83,1,83,3,83,1380,8,83,1,83,
        1,83,1,83,3,83,1385,8,83,1,83,1,83,1,83,3,83,1390,8,83,1,83,3,83,
        1393,8,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,
        1405,8,84,1,84,3,84,1408,8,84,1,84,1,84,1,85,1,85,1,85,3,85,1415,
        8,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,
        3,86,1429,8,86,1,87,1,87,3,87,1433,8,87,1,87,1,87,3,87,1437,8,87,
        1,87,1,87,3,87,1441,8,87,1,87,1,87,3,87,1445,8,87,1,87,5,87,1448,
        8,87,10,87,12,87,1451,9,87,1,88,1,88,3,88,1455,8,88,1,88,1,88,3,
        88,1459,8,88,1,88,1,88,3,88,1463,8,88,1,88,1,88,3,88,1467,8,88,1,
        88,1,88,3,88,1471,8,88,1,88,1,88,3,88,1475,8,88,1,88,5,88,1478,8,
        88,10,88,12,88,1481,9,88,1,89,1,89,3,89,1485,8,89,1,89,1,89,3,89,
        1489,8,89,1,89,5,89,1492,8,89,10,89,12,89,1495,9,89,1,90,1,90,1,
        90,3,90,1500,8,90,1,90,3,90,1503,8,90,1,91,1,91,3,91,1507,8,91,1,
        91,5,91,1510,8,91,10,91,12,91,1513,9,91,1,91,3,91,1516,8,91,1,91,
        3,91,1519,8,91,1,92,1,92,3,92,1523,8,92,1,92,1,92,1,93,1,93,1,93,
        1,93,1,93,3,93,1532,8,93,1,93,1,93,3,93,1536,8,93,1,93,1,93,3,93,
        1540,8,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,1551,
        8,93,1,94,1,94,3,94,1555,8,94,1,94,4,94,1558,8,94,11,94,12,94,1559,
        1,94,1,94,3,94,1564,8,94,1,94,1,94,3,94,1568,8,94,1,94,4,94,1571,
        8,94,11,94,12,94,1572,3,94,1575,8,94,1,94,3,94,1578,8,94,1,94,1,
        94,3,94,1582,8,94,1,94,3,94,1585,8,94,1,94,3,94,1588,8,94,1,94,1,
        94,1,95,1,95,3,95,1594,8,95,1,95,1,95,3,95,1598,8,95,1,95,1,95,3,
        95,1602,8,95,1,95,1,95,1,96,1,96,3,96,1608,8,96,1,96,1,96,3,96,1612,
        8,96,1,96,1,96,3,96,1616,8,96,1,96,3,96,1619,8,96,1,96,3,96,1622,
        8,96,1,96,1,96,1,97,1,97,3,97,1628,8,97,1,97,1,97,3,97,1632,8,97,
        1,97,1,97,3,97,1636,8,97,3,97,1638,8,97,1,97,1,97,3,97,1642,8,97,
        1,97,1,97,3,97,1646,8,97,3,97,1648,8,97,1,97,1,97,3,97,1652,8,97,
        1,97,1,97,3,97,1656,8,97,1,97,1,97,1,98,1,98,3,98,1662,8,98,1,98,
        1,98,3,98,1666,8,98,1,98,1,98,3,98,1670,8,98,1,98,1,98,1,98,1,98,
        3,98,1676,8,98,1,98,1,98,3,98,1680,8,98,1,98,1,98,3,98,1684,8,98,
        1,98,1,98,1,98,1,98,3,98,1690,8,98,1,98,1,98,3,98,1694,8,98,1,98,
        1,98,3,98,1698,8,98,1,98,1,98,1,98,1,98,3,98,1704,8,98,1,98,1,98,
        3,98,1708,8,98,1,98,1,98,3,98,1712,8,98,1,98,1,98,3,98,1716,8,98,
        1,99,1,99,3,99,1720,8,99,1,99,3,99,1723,8,99,1,100,1,100,1,101,1,
        101,3,101,1729,8,101,1,101,1,101,3,101,1733,8,101,1,101,1,101,1,
        102,1,102,1,102,1,102,1,102,1,102,1,103,1,103,3,103,1745,8,103,1,
        103,1,103,3,103,1749,8,103,1,103,1,103,3,103,1753,8,103,3,103,1755,
        8,103,1,103,1,103,3,103,1759,8,103,1,103,1,103,3,103,1763,8,103,
        1,103,1,103,3,103,1767,8,103,5,103,1769,8,103,10,103,12,103,1772,
        9,103,3,103,1774,8,103,1,103,1,103,1,104,1,104,1,104,1,105,1,105,
        3,105,1783,8,105,1,105,1,105,3,105,1787,8,105,1,105,1,105,1,105,
        3,105,1792,8,105,1,105,3,105,1795,8,105,3,105,1797,8,105,1,105,3,
        105,1800,8,105,1,105,1,105,1,106,1,106,3,106,1806,8,106,1,106,1,
        106,3,106,1810,8,106,1,106,1,106,3,106,1814,8,106,1,106,1,106,3,
        106,1818,8,106,1,106,1,106,3,106,1822,8,106,5,106,1824,8,106,10,
        106,12,106,1827,9,106,3,106,1829,8,106,1,106,1,106,1,107,1,107,1,
        108,1,108,1,109,1,109,1,109,1,110,1,110,1,110,5,110,1843,8,110,10,
        110,12,110,1846,9,110,1,111,1,111,1,112,1,112,1,112,1,112,1,112,
        1,112,3,112,1856,8,112,1,113,1,113,1,114,1,114,3,114,1862,8,114,
        1,115,1,115,1,116,1,116,1,117,1,117,3,117,1870,8,117,1,117,1,117,
        3,117,1874,8,117,1,117,1,117,3,117,1878,8,117,1,117,1,117,3,117,
        1882,8,117,5,117,1884,8,117,10,117,12,117,1887,9,117,3,117,1889,
        8,117,1,117,1,117,1,118,1,118,3,118,1895,8,118,1,118,1,118,3,118,
        1899,8,118,1,118,1,118,3,118,1903,8,118,1,118,1,118,3,118,1907,8,
        118,1,118,1,118,3,118,1911,8,118,1,118,1,118,3,118,1915,8,118,1,
        118,1,118,3,118,1919,8,118,1,118,1,118,3,118,1923,8,118,5,118,1925,
        8,118,10,118,12,118,1928,9,118,3,118,1930,8,118,1,118,1,118,1,119,
        1,119,1,120,1,120,1,120,3,120,1939,8,120,1,121,1,121,3,121,1943,
        8,121,1,122,1,122,1,123,1,123,1,124,1,124,1,124,0,0,125,0,2,4,6,
        8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
        52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,
        96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,
        130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
        162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,
        194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,
        226,228,230,232,234,236,238,240,242,244,246,248,0,11,1,0,54,55,6,
        0,48,48,93,93,99,101,108,108,129,131,134,134,5,0,48,68,71,92,94,
        98,102,104,119,128,1,0,78,81,1,0,21,22,1,0,103,104,1,0,105,107,1,
        0,115,116,2,0,17,17,27,30,2,0,18,18,31,34,2,0,22,22,35,45,2231,0,
        253,1,0,0,0,2,257,1,0,0,0,4,285,1,0,0,0,6,402,1,0,0,0,8,404,1,0,
        0,0,10,431,1,0,0,0,12,435,1,0,0,0,14,464,1,0,0,0,16,466,1,0,0,0,
        18,472,1,0,0,0,20,480,1,0,0,0,22,482,1,0,0,0,24,488,1,0,0,0,26,515,
        1,0,0,0,28,517,1,0,0,0,30,531,1,0,0,0,32,541,1,0,0,0,34,573,1,0,
        0,0,36,575,1,0,0,0,38,599,1,0,0,0,40,610,1,0,0,0,42,622,1,0,0,0,
        44,655,1,0,0,0,46,664,1,0,0,0,48,674,1,0,0,0,50,681,1,0,0,0,52,693,
        1,0,0,0,54,715,1,0,0,0,56,725,1,0,0,0,58,730,1,0,0,0,60,757,1,0,
        0,0,62,759,1,0,0,0,64,761,1,0,0,0,66,764,1,0,0,0,68,778,1,0,0,0,
        70,780,1,0,0,0,72,802,1,0,0,0,74,806,1,0,0,0,76,843,1,0,0,0,78,846,
        1,0,0,0,80,858,1,0,0,0,82,877,1,0,0,0,84,879,1,0,0,0,86,889,1,0,
        0,0,88,911,1,0,0,0,90,913,1,0,0,0,92,919,1,0,0,0,94,937,1,0,0,0,
        96,957,1,0,0,0,98,959,1,0,0,0,100,970,1,0,0,0,102,987,1,0,0,0,104,
        1012,1,0,0,0,106,1016,1,0,0,0,108,1024,1,0,0,0,110,1031,1,0,0,0,
        112,1075,1,0,0,0,114,1084,1,0,0,0,116,1086,1,0,0,0,118,1101,1,0,
        0,0,120,1105,1,0,0,0,122,1109,1,0,0,0,124,1116,1,0,0,0,126,1120,
        1,0,0,0,128,1134,1,0,0,0,130,1150,1,0,0,0,132,1152,1,0,0,0,134,1161,
        1,0,0,0,136,1231,1,0,0,0,138,1235,1,0,0,0,140,1237,1,0,0,0,142,1258,
        1,0,0,0,144,1268,1,0,0,0,146,1274,1,0,0,0,148,1296,1,0,0,0,150,1298,
        1,0,0,0,152,1300,1,0,0,0,154,1309,1,0,0,0,156,1311,1,0,0,0,158,1321,
        1,0,0,0,160,1331,1,0,0,0,162,1347,1,0,0,0,164,1352,1,0,0,0,166,1392,
        1,0,0,0,168,1404,1,0,0,0,170,1411,1,0,0,0,172,1428,1,0,0,0,174,1430,
        1,0,0,0,176,1452,1,0,0,0,178,1482,1,0,0,0,180,1502,1,0,0,0,182,1504,
        1,0,0,0,184,1520,1,0,0,0,186,1550,1,0,0,0,188,1574,1,0,0,0,190,1591,
        1,0,0,0,192,1605,1,0,0,0,194,1625,1,0,0,0,196,1715,1,0,0,0,198,1717,
        1,0,0,0,200,1724,1,0,0,0,202,1726,1,0,0,0,204,1736,1,0,0,0,206,1742,
        1,0,0,0,208,1777,1,0,0,0,210,1780,1,0,0,0,212,1803,1,0,0,0,214,1832,
        1,0,0,0,216,1834,1,0,0,0,218,1836,1,0,0,0,220,1844,1,0,0,0,222,1847,
        1,0,0,0,224,1855,1,0,0,0,226,1857,1,0,0,0,228,1861,1,0,0,0,230,1863,
        1,0,0,0,232,1865,1,0,0,0,234,1867,1,0,0,0,236,1892,1,0,0,0,238,1933,
        1,0,0,0,240,1935,1,0,0,0,242,1942,1,0,0,0,244,1944,1,0,0,0,246,1946,
        1,0,0,0,248,1948,1,0,0,0,250,254,3,70,35,0,251,254,3,100,50,0,252,
        254,3,20,10,0,253,250,1,0,0,0,253,251,1,0,0,0,253,252,1,0,0,0,254,
        1,1,0,0,0,255,256,5,58,0,0,256,258,5,135,0,0,257,255,1,0,0,0,257,
        258,1,0,0,0,258,259,1,0,0,0,259,261,5,59,0,0,260,262,5,135,0,0,261,
        260,1,0,0,0,261,262,1,0,0,0,262,263,1,0,0,0,263,271,3,126,63,0,264,
        266,5,135,0,0,265,264,1,0,0,0,265,266,1,0,0,0,266,269,1,0,0,0,267,
        270,3,16,8,0,268,270,3,18,9,0,269,267,1,0,0,0,269,268,1,0,0,0,270,
        272,1,0,0,0,271,265,1,0,0,0,271,272,1,0,0,0,272,277,1,0,0,0,273,
        275,5,135,0,0,274,273,1,0,0,0,274,275,1,0,0,0,275,276,1,0,0,0,276,
        278,3,124,62,0,277,274,1,0,0,0,277,278,1,0,0,0,278,3,1,0,0,0,279,
        286,3,90,45,0,280,286,3,86,43,0,281,286,3,12,6,0,282,286,3,92,46,
        0,283,286,3,94,47,0,284,286,3,8,4,0,285,279,1,0,0,0,285,280,1,0,
        0,0,285,281,1,0,0,0,285,282,1,0,0,0,285,283,1,0,0,0,285,284,1,0,
        0,0,286,291,1,0,0,0,287,289,5,135,0,0,288,287,1,0,0,0,288,289,1,
        0,0,0,289,290,1,0,0,0,290,292,3,16,8,0,291,288,1,0,0,0,291,292,1,
        0,0,0,292,5,1,0,0,0,293,295,3,222,111,0,294,296,5,135,0,0,295,294,
        1,0,0,0,295,296,1,0,0,0,296,297,1,0,0,0,297,298,3,58,29,0,298,403,
        1,0,0,0,299,304,3,222,111,0,300,302,5,135,0,0,301,300,1,0,0,0,301,
        302,1,0,0,0,302,303,1,0,0,0,303,305,3,58,29,0,304,301,1,0,0,0,304,
        305,1,0,0,0,305,306,1,0,0,0,306,307,5,1,0,0,307,309,3,238,119,0,
        308,310,5,135,0,0,309,308,1,0,0,0,309,310,1,0,0,0,310,311,1,0,0,
        0,311,312,3,58,29,0,312,403,1,0,0,0,313,318,3,222,111,0,314,316,
        5,135,0,0,315,314,1,0,0,0,315,316,1,0,0,0,316,317,1,0,0,0,317,319,
        3,58,29,0,318,315,1,0,0,0,318,319,1,0,0,0,319,320,1,0,0,0,320,321,
        5,1,0,0,321,326,3,238,119,0,322,324,5,135,0,0,323,322,1,0,0,0,323,
        324,1,0,0,0,324,325,1,0,0,0,325,327,3,58,29,0,326,323,1,0,0,0,326,
        327,1,0,0,0,327,329,1,0,0,0,328,330,5,135,0,0,329,328,1,0,0,0,329,
        330,1,0,0,0,330,331,1,0,0,0,331,333,5,47,0,0,332,334,5,135,0,0,333,
        332,1,0,0,0,333,334,1,0,0,0,334,335,1,0,0,0,335,336,3,58,29,0,336,
        403,1,0,0,0,337,342,3,222,111,0,338,340,5,135,0,0,339,338,1,0,0,
        0,339,340,1,0,0,0,340,341,1,0,0,0,341,343,3,58,29,0,342,339,1,0,
        0,0,342,343,1,0,0,0,343,344,1,0,0,0,344,345,5,1,0,0,345,350,3,238,
        119,0,346,348,5,135,0,0,347,346,1,0,0,0,347,348,1,0,0,0,348,349,
        1,0,0,0,349,351,3,58,29,0,350,347,1,0,0,0,350,351,1,0,0,0,351,353,
        1,0,0,0,352,354,5,135,0,0,353,352,1,0,0,0,353,354,1,0,0,0,354,355,
        1,0,0,0,355,357,5,2,0,0,356,358,5,135,0,0,357,356,1,0,0,0,357,358,
        1,0,0,0,358,359,1,0,0,0,359,364,3,154,77,0,360,362,5,135,0,0,361,
        360,1,0,0,0,361,362,1,0,0,0,362,363,1,0,0,0,363,365,3,58,29,0,364,
        361,1,0,0,0,364,365,1,0,0,0,365,403,1,0,0,0,366,368,3,152,76,0,367,
        369,5,135,0,0,368,367,1,0,0,0,368,369,1,0,0,0,369,370,1,0,0,0,370,
        372,5,2,0,0,371,373,5,135,0,0,372,371,1,0,0,0,372,373,1,0,0,0,373,
        374,1,0,0,0,374,375,3,154,77,0,375,403,1,0,0,0,376,378,3,222,111,
        0,377,379,5,135,0,0,378,377,1,0,0,0,378,379,1,0,0,0,379,380,1,0,
        0,0,380,382,5,2,0,0,381,383,5,135,0,0,382,381,1,0,0,0,382,383,1,
        0,0,0,383,384,1,0,0,0,384,385,3,154,77,0,385,403,1,0,0,0,386,388,
        3,222,111,0,387,389,5,135,0,0,388,387,1,0,0,0,388,389,1,0,0,0,389,
        390,1,0,0,0,390,392,5,3,0,0,391,393,5,135,0,0,392,391,1,0,0,0,392,
        393,1,0,0,0,393,394,1,0,0,0,394,395,3,154,77,0,395,403,1,0,0,0,396,
        398,3,222,111,0,397,399,5,135,0,0,398,397,1,0,0,0,398,399,1,0,0,
        0,399,400,1,0,0,0,400,401,3,142,71,0,401,403,1,0,0,0,402,293,1,0,
        0,0,402,299,1,0,0,0,402,313,1,0,0,0,402,337,1,0,0,0,402,366,1,0,
        0,0,402,376,1,0,0,0,402,386,1,0,0,0,402,396,1,0,0,0,403,7,1,0,0,
        0,404,406,5,53,0,0,405,407,5,135,0,0,406,405,1,0,0,0,406,407,1,0,
        0,0,407,408,1,0,0,0,408,419,3,10,5,0,409,411,5,135,0,0,410,409,1,
        0,0,0,410,411,1,0,0,0,411,412,1,0,0,0,412,414,5,4,0,0,413,415,5,
        135,0,0,414,413,1,0,0,0,414,415,1,0,0,0,415,416,1,0,0,0,416,418,
        3,10,5,0,417,410,1,0,0,0,418,421,1,0,0,0,419,417,1,0,0,0,419,420,
        1,0,0,0,420,9,1,0,0,0,421,419,1,0,0,0,422,423,3,154,77,0,423,424,
        5,1,0,0,424,426,3,238,119,0,425,427,5,135,0,0,426,425,1,0,0,0,426,
        427,1,0,0,0,427,428,1,0,0,0,428,429,5,47,0,0,429,432,1,0,0,0,430,
        432,3,154,77,0,431,422,1,0,0,0,431,430,1,0,0,0,432,11,1,0,0,0,433,
        434,5,66,0,0,434,436,5,135,0,0,435,433,1,0,0,0,435,436,1,0,0,0,436,
        437,1,0,0,0,437,439,5,67,0,0,438,440,5,135,0,0,439,438,1,0,0,0,439,
        440,1,0,0,0,440,441,1,0,0,0,441,452,3,14,7,0,442,444,5,135,0,0,443,
        442,1,0,0,0,443,444,1,0,0,0,444,445,1,0,0,0,445,447,5,4,0,0,446,
        448,5,135,0,0,447,446,1,0,0,0,447,448,1,0,0,0,448,449,1,0,0,0,449,
        451,3,14,7,0,450,443,1,0,0,0,451,454,1,0,0,0,452,450,1,0,0,0,452,
        453,1,0,0,0,453,13,1,0,0,0,454,452,1,0,0,0,455,456,3,154,77,0,456,
        457,5,1,0,0,457,459,3,238,119,0,458,460,5,135,0,0,459,458,1,0,0,
        0,459,460,1,0,0,0,460,461,1,0,0,0,461,462,5,47,0,0,462,465,1,0,0,
        0,463,465,3,154,77,0,464,455,1,0,0,0,464,463,1,0,0,0,465,15,1,0,
        0,0,466,468,5,49,0,0,467,469,5,135,0,0,468,467,1,0,0,0,468,469,1,
        0,0,0,469,470,1,0,0,0,470,471,3,154,77,0,471,17,1,0,0,0,472,474,
        5,51,0,0,473,475,5,135,0,0,474,473,1,0,0,0,474,475,1,0,0,0,475,476,
        1,0,0,0,476,477,3,154,77,0,477,19,1,0,0,0,478,481,3,22,11,0,479,
        481,3,24,12,0,480,478,1,0,0,0,480,479,1,0,0,0,481,21,1,0,0,0,482,
        484,5,50,0,0,483,485,5,135,0,0,484,483,1,0,0,0,484,485,1,0,0,0,485,
        486,1,0,0,0,486,487,3,154,77,0,487,23,1,0,0,0,488,490,5,52,0,0,489,
        491,5,135,0,0,490,489,1,0,0,0,490,491,1,0,0,0,491,492,1,0,0,0,492,
        493,3,154,77,0,493,25,1,0,0,0,494,496,3,222,111,0,495,497,5,135,
        0,0,496,495,1,0,0,0,496,497,1,0,0,0,497,498,1,0,0,0,498,500,5,2,
        0,0,499,501,5,135,0,0,500,499,1,0,0,0,500,501,1,0,0,0,501,502,1,
        0,0,0,502,503,3,28,14,0,503,516,1,0,0,0,504,506,3,222,111,0,505,
        507,5,135,0,0,506,505,1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,0,508,
        510,5,2,0,0,509,511,5,135,0,0,510,509,1,0,0,0,510,511,1,0,0,0,511,
        512,1,0,0,0,512,513,3,128,64,0,513,516,1,0,0,0,514,516,3,128,64,
        0,515,494,1,0,0,0,515,504,1,0,0,0,515,514,1,0,0,0,516,27,1,0,0,0,
        517,519,3,208,104,0,518,520,5,135,0,0,519,518,1,0,0,0,519,520,1,
        0,0,0,520,521,1,0,0,0,521,523,5,5,0,0,522,524,5,135,0,0,523,522,
        1,0,0,0,523,524,1,0,0,0,524,525,1,0,0,0,525,527,3,30,15,0,526,528,
        5,135,0,0,527,526,1,0,0,0,527,528,1,0,0,0,528,529,1,0,0,0,529,530,
        5,6,0,0,530,29,1,0,0,0,531,533,3,32,16,0,532,534,5,135,0,0,533,532,
        1,0,0,0,533,534,1,0,0,0,534,535,1,0,0,0,535,537,3,136,68,0,536,538,
        5,135,0,0,537,536,1,0,0,0,537,538,1,0,0,0,538,539,1,0,0,0,539,540,
        3,32,16,0,540,31,1,0,0,0,541,543,5,5,0,0,542,544,5,135,0,0,543,542,
        1,0,0,0,543,544,1,0,0,0,544,549,1,0,0,0,545,547,3,222,111,0,546,
        548,5,135,0,0,547,546,1,0,0,0,547,548,1,0,0,0,548,550,1,0,0,0,549,
        545,1,0,0,0,549,550,1,0,0,0,550,555,1,0,0,0,551,553,3,142,71,0,552,
        554,5,135,0,0,553,552,1,0,0,0,553,554,1,0,0,0,554,556,1,0,0,0,555,
        551,1,0,0,0,555,556,1,0,0,0,556,561,1,0,0,0,557,559,3,58,29,0,558,
        560,5,135,0,0,559,558,1,0,0,0,559,560,1,0,0,0,560,562,1,0,0,0,561,
        557,1,0,0,0,561,562,1,0,0,0,562,567,1,0,0,0,563,565,3,34,17,0,564,
        566,5,135,0,0,565,564,1,0,0,0,565,566,1,0,0,0,566,568,1,0,0,0,567,
        563,1,0,0,0,567,568,1,0,0,0,568,569,1,0,0,0,569,570,5,6,0,0,570,
        33,1,0,0,0,571,574,3,36,18,0,572,574,3,240,120,0,573,571,1,0,0,0,
        573,572,1,0,0,0,574,35,1,0,0,0,575,577,5,7,0,0,576,578,5,135,0,0,
        577,576,1,0,0,0,577,578,1,0,0,0,578,595,1,0,0,0,579,580,3,38,19,
        0,580,581,5,8,0,0,581,592,3,40,20,0,582,584,5,4,0,0,583,585,5,135,
        0,0,584,583,1,0,0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,587,3,38,
        19,0,587,588,5,8,0,0,588,589,3,40,20,0,589,591,1,0,0,0,590,582,1,
        0,0,0,591,594,1,0,0,0,592,590,1,0,0,0,592,593,1,0,0,0,593,596,1,
        0,0,0,594,592,1,0,0,0,595,579,1,0,0,0,595,596,1,0,0,0,596,597,1,
        0,0,0,597,598,5,9,0,0,598,37,1,0,0,0,599,601,3,238,119,0,600,602,
        5,135,0,0,601,600,1,0,0,0,601,602,1,0,0,0,602,607,1,0,0,0,603,605,
        3,58,29,0,604,606,5,135,0,0,605,604,1,0,0,0,605,606,1,0,0,0,606,
        608,1,0,0,0,607,603,1,0,0,0,607,608,1,0,0,0,608,39,1,0,0,0,609,611,
        5,135,0,0,610,609,1,0,0,0,610,611,1,0,0,0,611,612,1,0,0,0,612,614,
        3,154,77,0,613,615,5,135,0,0,614,613,1,0,0,0,614,615,1,0,0,0,615,
        620,1,0,0,0,616,618,3,58,29,0,617,619,5,135,0,0,618,617,1,0,0,0,
        618,619,1,0,0,0,619,621,1,0,0,0,620,616,1,0,0,0,620,621,1,0,0,0,
        621,41,1,0,0,0,622,624,5,10,0,0,623,625,5,135,0,0,624,623,1,0,0,
        0,624,625,1,0,0,0,625,630,1,0,0,0,626,628,3,222,111,0,627,629,5,
        135,0,0,628,627,1,0,0,0,628,629,1,0,0,0,629,631,1,0,0,0,630,626,
        1,0,0,0,630,631,1,0,0,0,631,636,1,0,0,0,632,634,3,140,70,0,633,635,
        5,135,0,0,634,633,1,0,0,0,634,635,1,0,0,0,635,637,1,0,0,0,636,632,
        1,0,0,0,636,637,1,0,0,0,637,639,1,0,0,0,638,640,3,146,73,0,639,638,
        1,0,0,0,639,640,1,0,0,0,640,645,1,0,0,0,641,643,3,58,29,0,642,644,
        5,135,0,0,643,642,1,0,0,0,643,644,1,0,0,0,644,646,1,0,0,0,645,641,
        1,0,0,0,645,646,1,0,0,0,646,651,1,0,0,0,647,649,3,138,69,0,648,650,
        5,135,0,0,649,648,1,0,0,0,649,650,1,0,0,0,650,652,1,0,0,0,651,647,
        1,0,0,0,651,652,1,0,0,0,652,653,1,0,0,0,653,654,5,11,0,0,654,43,
        1,0,0,0,655,660,3,174,87,0,656,661,3,56,28,0,657,661,3,168,84,0,
        658,661,3,170,85,0,659,661,3,172,86,0,660,656,1,0,0,0,660,657,1,
        0,0,0,660,658,1,0,0,0,660,659,1,0,0,0,660,661,1,0,0,0,661,45,1,0,
        0,0,662,665,3,182,91,0,663,665,3,52,26,0,664,662,1,0,0,0,664,663,
        1,0,0,0,665,670,1,0,0,0,666,669,3,48,24,0,667,669,3,50,25,0,668,
        666,1,0,0,0,668,667,1,0,0,0,669,672,1,0,0,0,670,668,1,0,0,0,670,
        671,1,0,0,0,671,47,1,0,0,0,672,670,1,0,0,0,673,675,5,135,0,0,674,
        673,1,0,0,0,674,675,1,0,0,0,675,676,1,0,0,0,676,677,5,10,0,0,677,
        678,3,154,77,0,678,679,5,11,0,0,679,49,1,0,0,0,680,682,5,135,0,0,
        681,680,1,0,0,0,681,682,1,0,0,0,682,683,1,0,0,0,683,685,5,10,0,0,
        684,686,3,154,77,0,685,684,1,0,0,0,685,686,1,0,0,0,686,687,1,0,0,
        0,687,689,5,12,0,0,688,690,3,154,77,0,689,688,1,0,0,0,689,690,1,
        0,0,0,690,691,1,0,0,0,691,692,5,11,0,0,692,51,1,0,0,0,693,708,3,
        186,93,0,694,696,5,135,0,0,695,694,1,0,0,0,695,696,1,0,0,0,696,697,
        1,0,0,0,697,699,3,184,92,0,698,695,1,0,0,0,699,700,1,0,0,0,700,698,
        1,0,0,0,700,701,1,0,0,0,701,706,1,0,0,0,702,704,5,135,0,0,703,702,
        1,0,0,0,703,704,1,0,0,0,704,705,1,0,0,0,705,707,5,47,0,0,706,703,
        1,0,0,0,706,707,1,0,0,0,707,709,1,0,0,0,708,698,1,0,0,0,708,709,
        1,0,0,0,709,711,1,0,0,0,710,712,5,135,0,0,711,710,1,0,0,0,711,712,
        1,0,0,0,712,713,1,0,0,0,713,714,3,54,27,0,714,53,1,0,0,0,715,722,
        5,46,0,0,716,718,5,135,0,0,717,716,1,0,0,0,717,718,1,0,0,0,718,719,
        1,0,0,0,719,721,3,184,92,0,720,717,1,0,0,0,721,724,1,0,0,0,722,720,
        1,0,0,0,722,723,1,0,0,0,723,55,1,0,0,0,724,722,1,0,0,0,725,726,5,
        135,0,0,726,727,7,0,0,0,727,728,5,135,0,0,728,729,3,174,87,0,729,
        57,1,0,0,0,730,732,5,46,0,0,731,733,5,135,0,0,732,731,1,0,0,0,732,
        733,1,0,0,0,733,734,1,0,0,0,734,736,5,5,0,0,735,737,5,135,0,0,736,
        735,1,0,0,0,736,737,1,0,0,0,737,738,1,0,0,0,738,740,3,60,30,0,739,
        741,5,135,0,0,740,739,1,0,0,0,740,741,1,0,0,0,741,742,1,0,0,0,742,
        744,5,4,0,0,743,745,5,135,0,0,744,743,1,0,0,0,744,745,1,0,0,0,745,
        748,1,0,0,0,746,749,3,60,30,0,747,749,5,48,0,0,748,746,1,0,0,0,748,
        747,1,0,0,0,749,751,1,0,0,0,750,752,5,135,0,0,751,750,1,0,0,0,751,
        752,1,0,0,0,752,753,1,0,0,0,753,754,5,6,0,0,754,59,1,0,0,0,755,758,
        5,117,0,0,756,758,3,236,118,0,757,755,1,0,0,0,757,756,1,0,0,0,758,
        61,1,0,0,0,759,760,7,1,0,0,760,63,1,0,0,0,761,762,7,2,0,0,762,65,
        1,0,0,0,763,765,5,135,0,0,764,763,1,0,0,0,764,765,1,0,0,0,765,766,
        1,0,0,0,766,771,3,68,34,0,767,769,5,135,0,0,768,767,1,0,0,0,768,
        769,1,0,0,0,769,770,1,0,0,0,770,772,5,13,0,0,771,768,1,0,0,0,771,
        772,1,0,0,0,772,774,1,0,0,0,773,775,5,135,0,0,774,773,1,0,0,0,774,
        775,1,0,0,0,775,776,1,0,0,0,776,777,5,0,0,1,777,67,1,0,0,0,778,779,
        3,0,0,0,779,69,1,0,0,0,780,787,3,74,37,0,781,783,5,135,0,0,782,781,
        1,0,0,0,782,783,1,0,0,0,783,784,1,0,0,0,784,786,3,72,36,0,785,782,
        1,0,0,0,786,789,1,0,0,0,787,785,1,0,0,0,787,788,1,0,0,0,788,71,1,
        0,0,0,789,787,1,0,0,0,790,791,5,56,0,0,791,792,5,135,0,0,792,794,
        5,57,0,0,793,795,5,135,0,0,794,793,1,0,0,0,794,795,1,0,0,0,795,796,
        1,0,0,0,796,803,3,74,37,0,797,799,5,56,0,0,798,800,5,135,0,0,799,
        798,1,0,0,0,799,800,1,0,0,0,800,801,1,0,0,0,801,803,3,74,37,0,802,
        790,1,0,0,0,802,797,1,0,0,0,803,73,1,0,0,0,804,807,3,76,38,0,805,
        807,3,78,39,0,806,804,1,0,0,0,806,805,1,0,0,0,807,75,1,0,0,0,808,
        810,3,82,41,0,809,811,5,135,0,0,810,809,1,0,0,0,810,811,1,0,0,0,
        811,813,1,0,0,0,812,808,1,0,0,0,813,816,1,0,0,0,814,812,1,0,0,0,
        814,815,1,0,0,0,815,817,1,0,0,0,816,814,1,0,0,0,817,844,3,108,54,
        0,818,820,3,82,41,0,819,821,5,135,0,0,820,819,1,0,0,0,820,821,1,
        0,0,0,821,823,1,0,0,0,822,818,1,0,0,0,823,826,1,0,0,0,824,822,1,
        0,0,0,824,825,1,0,0,0,825,827,1,0,0,0,826,824,1,0,0,0,827,834,3,
        4,2,0,828,830,5,135,0,0,829,828,1,0,0,0,829,830,1,0,0,0,830,831,
        1,0,0,0,831,833,3,4,2,0,832,829,1,0,0,0,833,836,1,0,0,0,834,832,
        1,0,0,0,834,835,1,0,0,0,835,841,1,0,0,0,836,834,1,0,0,0,837,839,
        5,135,0,0,838,837,1,0,0,0,838,839,1,0,0,0,839,840,1,0,0,0,840,842,
        3,108,54,0,841,838,1,0,0,0,841,842,1,0,0,0,842,844,1,0,0,0,843,814,
        1,0,0,0,843,824,1,0,0,0,844,77,1,0,0,0,845,847,3,80,40,0,846,845,
        1,0,0,0,847,848,1,0,0,0,848,846,1,0,0,0,848,849,1,0,0,0,849,850,
        1,0,0,0,850,851,3,76,38,0,851,79,1,0,0,0,852,854,3,82,41,0,853,855,
        5,135,0,0,854,853,1,0,0,0,854,855,1,0,0,0,855,857,1,0,0,0,856,852,
        1,0,0,0,857,860,1,0,0,0,858,856,1,0,0,0,858,859,1,0,0,0,859,867,
        1,0,0,0,860,858,1,0,0,0,861,863,3,4,2,0,862,864,5,135,0,0,863,862,
        1,0,0,0,863,864,1,0,0,0,864,866,1,0,0,0,865,861,1,0,0,0,866,869,
        1,0,0,0,867,865,1,0,0,0,867,868,1,0,0,0,868,870,1,0,0,0,869,867,
        1,0,0,0,870,872,3,106,53,0,871,873,5,135,0,0,872,871,1,0,0,0,872,
        873,1,0,0,0,873,81,1,0,0,0,874,878,3,2,1,0,875,878,3,84,42,0,876,
        878,3,98,49,0,877,874,1,0,0,0,877,875,1,0,0,0,877,876,1,0,0,0,878,
        83,1,0,0,0,879,881,5,60,0,0,880,882,5,135,0,0,881,880,1,0,0,0,881,
        882,1,0,0,0,882,883,1,0,0,0,883,884,3,154,77,0,884,885,5,135,0,0,
        885,886,5,61,0,0,886,887,5,135,0,0,887,888,3,222,111,0,888,85,1,
        0,0,0,889,891,5,62,0,0,890,892,5,135,0,0,891,890,1,0,0,0,891,892,
        1,0,0,0,892,893,1,0,0,0,893,898,3,26,13,0,894,895,5,135,0,0,895,
        897,3,88,44,0,896,894,1,0,0,0,897,900,1,0,0,0,898,896,1,0,0,0,898,
        899,1,0,0,0,899,87,1,0,0,0,900,898,1,0,0,0,901,902,5,63,0,0,902,
        903,5,135,0,0,903,904,5,59,0,0,904,905,5,135,0,0,905,912,3,92,46,
        0,906,907,5,63,0,0,907,908,5,135,0,0,908,909,5,64,0,0,909,910,5,
        135,0,0,910,912,3,92,46,0,911,901,1,0,0,0,911,906,1,0,0,0,912,89,
        1,0,0,0,913,915,5,64,0,0,914,916,5,135,0,0,915,914,1,0,0,0,915,916,
        1,0,0,0,916,917,1,0,0,0,917,918,3,126,63,0,918,91,1,0,0,0,919,921,
        5,65,0,0,920,922,5,135,0,0,921,920,1,0,0,0,921,922,1,0,0,0,922,923,
        1,0,0,0,923,934,3,6,3,0,924,926,5,135,0,0,925,924,1,0,0,0,925,926,
        1,0,0,0,926,927,1,0,0,0,927,929,5,4,0,0,928,930,5,135,0,0,929,928,
        1,0,0,0,929,930,1,0,0,0,930,931,1,0,0,0,931,933,3,6,3,0,932,925,
        1,0,0,0,933,936,1,0,0,0,934,932,1,0,0,0,934,935,1,0,0,0,935,93,1,
        0,0,0,936,934,1,0,0,0,937,938,5,68,0,0,938,939,5,135,0,0,939,950,
        3,96,48,0,940,942,5,135,0,0,941,940,1,0,0,0,941,942,1,0,0,0,942,
        943,1,0,0,0,943,945,5,4,0,0,944,946,5,135,0,0,945,944,1,0,0,0,945,
        946,1,0,0,0,946,947,1,0,0,0,947,949,3,96,48,0,948,941,1,0,0,0,949,
        952,1,0,0,0,950,948,1,0,0,0,950,951,1,0,0,0,951,95,1,0,0,0,952,950,
        1,0,0,0,953,954,3,222,111,0,954,955,3,142,71,0,955,958,1,0,0,0,956,
        958,3,152,76,0,957,953,1,0,0,0,957,956,1,0,0,0,958,97,1,0,0,0,959,
        960,5,69,0,0,960,961,5,135,0,0,961,968,3,212,106,0,962,964,5,135,
        0,0,963,962,1,0,0,0,963,964,1,0,0,0,964,965,1,0,0,0,965,966,5,70,
        0,0,966,967,5,135,0,0,967,969,3,102,51,0,968,963,1,0,0,0,968,969,
        1,0,0,0,969,99,1,0,0,0,970,971,5,69,0,0,971,974,5,135,0,0,972,975,
        3,212,106,0,973,975,3,214,107,0,974,972,1,0,0,0,974,973,1,0,0,0,
        975,985,1,0,0,0,976,978,5,135,0,0,977,976,1,0,0,0,977,978,1,0,0,
        0,978,979,1,0,0,0,979,980,5,70,0,0,980,983,5,135,0,0,981,984,5,14,
        0,0,982,984,3,102,51,0,983,981,1,0,0,0,983,982,1,0,0,0,984,986,1,
        0,0,0,985,977,1,0,0,0,985,986,1,0,0,0,986,101,1,0,0,0,987,998,3,
        104,52,0,988,990,5,135,0,0,989,988,1,0,0,0,989,990,1,0,0,0,990,991,
        1,0,0,0,991,993,5,4,0,0,992,994,5,135,0,0,993,992,1,0,0,0,993,994,
        1,0,0,0,994,995,1,0,0,0,995,997,3,104,52,0,996,989,1,0,0,0,997,1000,
        1,0,0,0,998,996,1,0,0,0,998,999,1,0,0,0,999,1005,1,0,0,0,1000,998,
        1,0,0,0,1001,1003,5,135,0,0,1002,1001,1,0,0,0,1002,1003,1,0,0,0,
        1003,1004,1,0,0,0,1004,1006,3,124,62,0,1005,1002,1,0,0,0,1005,1006,
        1,0,0,0,1006,103,1,0,0,0,1007,1008,3,216,108,0,1008,1009,5,135,0,
        0,1009,1010,5,61,0,0,1010,1011,5,135,0,0,1011,1013,1,0,0,0,1012,
        1007,1,0,0,0,1012,1013,1,0,0,0,1013,1014,1,0,0,0,1014,1015,3,222,
        111,0,1015,105,1,0,0,0,1016,1017,5,71,0,0,1017,1022,3,110,55,0,1018,
        1020,5,135,0,0,1019,1018,1,0,0,0,1019,1020,1,0,0,0,1020,1021,1,0,
        0,0,1021,1023,3,124,62,0,1022,1019,1,0,0,0,1022,1023,1,0,0,0,1023,
        107,1,0,0,0,1024,1025,5,72,0,0,1025,1026,3,110,55,0,1026,109,1,0,
        0,0,1027,1029,5,135,0,0,1028,1027,1,0,0,0,1028,1029,1,0,0,0,1029,
        1030,1,0,0,0,1030,1032,5,73,0,0,1031,1028,1,0,0,0,1031,1032,1,0,
        0,0,1032,1033,1,0,0,0,1033,1034,5,135,0,0,1034,1037,3,112,56,0,1035,
        1036,5,135,0,0,1036,1038,3,116,58,0,1037,1035,1,0,0,0,1037,1038,
        1,0,0,0,1038,1041,1,0,0,0,1039,1040,5,135,0,0,1040,1042,3,118,59,
        0,1041,1039,1,0,0,0,1041,1042,1,0,0,0,1042,1045,1,0,0,0,1043,1044,
        5,135,0,0,1044,1046,3,120,60,0,1045,1043,1,0,0,0,1045,1046,1,0,0,
        0,1046,111,1,0,0,0,1047,1058,5,14,0,0,1048,1050,5,135,0,0,1049,1048,
        1,0,0,0,1049,1050,1,0,0,0,1050,1051,1,0,0,0,1051,1053,5,4,0,0,1052,
        1054,5,135,0,0,1053,1052,1,0,0,0,1053,1054,1,0,0,0,1054,1055,1,0,
        0,0,1055,1057,3,114,57,0,1056,1049,1,0,0,0,1057,1060,1,0,0,0,1058,
        1056,1,0,0,0,1058,1059,1,0,0,0,1059,1076,1,0,0,0,1060,1058,1,0,0,
        0,1061,1072,3,114,57,0,1062,1064,5,135,0,0,1063,1062,1,0,0,0,1063,
        1064,1,0,0,0,1064,1065,1,0,0,0,1065,1067,5,4,0,0,1066,1068,5,135,
        0,0,1067,1066,1,0,0,0,1067,1068,1,0,0,0,1068,1069,1,0,0,0,1069,1071,
        3,114,57,0,1070,1063,1,0,0,0,1071,1074,1,0,0,0,1072,1070,1,0,0,0,
        1072,1073,1,0,0,0,1073,1076,1,0,0,0,1074,1072,1,0,0,0,1075,1047,
        1,0,0,0,1075,1061,1,0,0,0,1076,113,1,0,0,0,1077,1078,3,154,77,0,
        1078,1079,5,135,0,0,1079,1080,5,61,0,0,1080,1081,5,135,0,0,1081,
        1082,3,222,111,0,1082,1085,1,0,0,0,1083,1085,3,154,77,0,1084,1077,
        1,0,0,0,1084,1083,1,0,0,0,1085,115,1,0,0,0,1086,1087,5,74,0,0,1087,
        1088,5,135,0,0,1088,1089,5,75,0,0,1089,1090,5,135,0,0,1090,1098,
        3,122,61,0,1091,1093,5,4,0,0,1092,1094,5,135,0,0,1093,1092,1,0,0,
        0,1093,1094,1,0,0,0,1094,1095,1,0,0,0,1095,1097,3,122,61,0,1096,
        1091,1,0,0,0,1097,1100,1,0,0,0,1098,1096,1,0,0,0,1098,1099,1,0,0,
        0,1099,117,1,0,0,0,1100,1098,1,0,0,0,1101,1102,5,76,0,0,1102,1103,
        5,135,0,0,1103,1104,3,154,77,0,1104,119,1,0,0,0,1105,1106,5,77,0,
        0,1106,1107,5,135,0,0,1107,1108,3,154,77,0,1108,121,1,0,0,0,1109,
        1114,3,154,77,0,1110,1112,5,135,0,0,1111,1110,1,0,0,0,1111,1112,
        1,0,0,0,1112,1113,1,0,0,0,1113,1115,7,3,0,0,1114,1111,1,0,0,0,1114,
        1115,1,0,0,0,1115,123,1,0,0,0,1116,1117,5,82,0,0,1117,1118,5,135,
        0,0,1118,1119,3,154,77,0,1119,125,1,0,0,0,1120,1131,3,26,13,0,1121,
        1123,5,135,0,0,1122,1121,1,0,0,0,1122,1123,1,0,0,0,1123,1124,1,0,
        0,0,1124,1126,5,4,0,0,1125,1127,5,135,0,0,1126,1125,1,0,0,0,1126,
        1127,1,0,0,0,1127,1128,1,0,0,0,1128,1130,3,26,13,0,1129,1122,1,0,
        0,0,1130,1133,1,0,0,0,1131,1129,1,0,0,0,1131,1132,1,0,0,0,1132,127,
        1,0,0,0,1133,1131,1,0,0,0,1134,1135,3,130,65,0,1135,129,1,0,0,0,
        1136,1143,3,32,16,0,1137,1139,5,135,0,0,1138,1137,1,0,0,0,1138,1139,
        1,0,0,0,1139,1140,1,0,0,0,1140,1142,3,134,67,0,1141,1138,1,0,0,0,
        1142,1145,1,0,0,0,1143,1141,1,0,0,0,1143,1144,1,0,0,0,1144,1151,
        1,0,0,0,1145,1143,1,0,0,0,1146,1147,5,5,0,0,1147,1148,3,130,65,0,
        1148,1149,5,6,0,0,1149,1151,1,0,0,0,1150,1136,1,0,0,0,1150,1146,
        1,0,0,0,1151,131,1,0,0,0,1152,1157,3,32,16,0,1153,1155,5,135,0,0,
        1154,1153,1,0,0,0,1154,1155,1,0,0,0,1155,1156,1,0,0,0,1156,1158,
        3,134,67,0,1157,1154,1,0,0,0,1158,1159,1,0,0,0,1159,1157,1,0,0,0,
        1159,1160,1,0,0,0,1160,133,1,0,0,0,1161,1163,3,136,68,0,1162,1164,
        5,135,0,0,1163,1162,1,0,0,0,1163,1164,1,0,0,0,1164,1165,1,0,0,0,
        1165,1166,3,32,16,0,1166,135,1,0,0,0,1167,1169,3,244,122,0,1168,
        1170,5,135,0,0,1169,1168,1,0,0,0,1169,1170,1,0,0,0,1170,1171,1,0,
        0,0,1171,1173,3,248,124,0,1172,1174,5,135,0,0,1173,1172,1,0,0,0,
        1173,1174,1,0,0,0,1174,1176,1,0,0,0,1175,1177,3,42,21,0,1176,1175,
        1,0,0,0,1176,1177,1,0,0,0,1177,1179,1,0,0,0,1178,1180,5,135,0,0,
        1179,1178,1,0,0,0,1179,1180,1,0,0,0,1180,1181,1,0,0,0,1181,1183,
        3,248,124,0,1182,1184,5,135,0,0,1183,1182,1,0,0,0,1183,1184,1,0,
        0,0,1184,1185,1,0,0,0,1185,1186,3,246,123,0,1186,1232,1,0,0,0,1187,
        1189,3,244,122,0,1188,1190,5,135,0,0,1189,1188,1,0,0,0,1189,1190,
        1,0,0,0,1190,1191,1,0,0,0,1191,1193,3,248,124,0,1192,1194,5,135,
        0,0,1193,1192,1,0,0,0,1193,1194,1,0,0,0,1194,1196,1,0,0,0,1195,1197,
        3,42,21,0,1196,1195,1,0,0,0,1196,1197,1,0,0,0,1197,1199,1,0,0,0,
        1198,1200,5,135,0,0,1199,1198,1,0,0,0,1199,1200,1,0,0,0,1200,1201,
        1,0,0,0,1201,1202,3,248,124,0,1202,1232,1,0,0,0,1203,1205,3,248,
        124,0,1204,1206,5,135,0,0,1205,1204,1,0,0,0,1205,1206,1,0,0,0,1206,
        1208,1,0,0,0,1207,1209,3,42,21,0,1208,1207,1,0,0,0,1208,1209,1,0,
        0,0,1209,1211,1,0,0,0,1210,1212,5,135,0,0,1211,1210,1,0,0,0,1211,
        1212,1,0,0,0,1212,1213,1,0,0,0,1213,1215,3,248,124,0,1214,1216,5,
        135,0,0,1215,1214,1,0,0,0,1215,1216,1,0,0,0,1216,1217,1,0,0,0,1217,
        1218,3,246,123,0,1218,1232,1,0,0,0,1219,1221,3,248,124,0,1220,1222,
        5,135,0,0,1221,1220,1,0,0,0,1221,1222,1,0,0,0,1222,1224,1,0,0,0,
        1223,1225,3,42,21,0,1224,1223,1,0,0,0,1224,1225,1,0,0,0,1225,1227,
        1,0,0,0,1226,1228,5,135,0,0,1227,1226,1,0,0,0,1227,1228,1,0,0,0,
        1228,1229,1,0,0,0,1229,1230,3,248,124,0,1230,1232,1,0,0,0,1231,1167,
        1,0,0,0,1231,1187,1,0,0,0,1231,1203,1,0,0,0,1231,1219,1,0,0,0,1232,
        137,1,0,0,0,1233,1236,3,236,118,0,1234,1236,3,240,120,0,1235,1233,
        1,0,0,0,1235,1234,1,0,0,0,1236,139,1,0,0,0,1237,1239,5,8,0,0,1238,
        1240,5,135,0,0,1239,1238,1,0,0,0,1239,1240,1,0,0,0,1240,1241,1,0,
        0,0,1241,1255,3,150,75,0,1242,1244,5,135,0,0,1243,1242,1,0,0,0,1243,
        1244,1,0,0,0,1244,1245,1,0,0,0,1245,1247,5,15,0,0,1246,1248,5,8,
        0,0,1247,1246,1,0,0,0,1247,1248,1,0,0,0,1248,1250,1,0,0,0,1249,1251,
        5,135,0,0,1250,1249,1,0,0,0,1250,1251,1,0,0,0,1251,1252,1,0,0,0,
        1252,1254,3,150,75,0,1253,1243,1,0,0,0,1254,1257,1,0,0,0,1255,1253,
        1,0,0,0,1255,1256,1,0,0,0,1256,141,1,0,0,0,1257,1255,1,0,0,0,1258,
        1265,3,144,72,0,1259,1261,5,135,0,0,1260,1259,1,0,0,0,1260,1261,
        1,0,0,0,1261,1262,1,0,0,0,1262,1264,3,144,72,0,1263,1260,1,0,0,0,
        1264,1267,1,0,0,0,1265,1263,1,0,0,0,1265,1266,1,0,0,0,1266,143,1,
        0,0,0,1267,1265,1,0,0,0,1268,1270,5,8,0,0,1269,1271,5,135,0,0,1270,
        1269,1,0,0,0,1270,1271,1,0,0,0,1271,1272,1,0,0,0,1272,1273,3,148,
        74,0,1273,145,1,0,0,0,1274,1276,5,14,0,0,1275,1277,5,135,0,0,1276,
        1275,1,0,0,0,1276,1277,1,0,0,0,1277,1282,1,0,0,0,1278,1280,3,230,
        115,0,1279,1281,5,135,0,0,1280,1279,1,0,0,0,1280,1281,1,0,0,0,1281,
        1283,1,0,0,0,1282,1278,1,0,0,0,1282,1283,1,0,0,0,1283,1294,1,0,0,
        0,1284,1286,5,12,0,0,1285,1287,5,135,0,0,1286,1285,1,0,0,0,1286,
        1287,1,0,0,0,1287,1292,1,0,0,0,1288,1290,3,230,115,0,1289,1291,5,
        135,0,0,1290,1289,1,0,0,0,1290,1291,1,0,0,0,1291,1293,1,0,0,0,1292,
        1288,1,0,0,0,1292,1293,1,0,0,0,1293,1295,1,0,0,0,1294,1284,1,0,0,
        0,1294,1295,1,0,0,0,1295,147,1,0,0,0,1296,1297,3,242,121,0,1297,
        149,1,0,0,0,1298,1299,3,242,121,0,1299,151,1,0,0,0,1300,1305,3,186,
        93,0,1301,1303,5,135,0,0,1302,1301,1,0,0,0,1302,1303,1,0,0,0,1303,
        1304,1,0,0,0,1304,1306,3,184,92,0,1305,1302,1,0,0,0,1306,1307,1,
        0,0,0,1307,1305,1,0,0,0,1307,1308,1,0,0,0,1308,153,1,0,0,0,1309,
        1310,3,156,78,0,1310,155,1,0,0,0,1311,1318,3,158,79,0,1312,1313,
        5,135,0,0,1313,1314,5,83,0,0,1314,1315,5,135,0,0,1315,1317,3,158,
        79,0,1316,1312,1,0,0,0,1317,1320,1,0,0,0,1318,1316,1,0,0,0,1318,
        1319,1,0,0,0,1319,157,1,0,0,0,1320,1318,1,0,0,0,1321,1328,3,160,
        80,0,1322,1323,5,135,0,0,1323,1324,5,84,0,0,1324,1325,5,135,0,0,
        1325,1327,3,160,80,0,1326,1322,1,0,0,0,1327,1330,1,0,0,0,1328,1326,
        1,0,0,0,1328,1329,1,0,0,0,1329,159,1,0,0,0,1330,1328,1,0,0,0,1331,
        1338,3,162,81,0,1332,1333,5,135,0,0,1333,1334,5,85,0,0,1334,1335,
        5,135,0,0,1335,1337,3,162,81,0,1336,1332,1,0,0,0,1337,1340,1,0,0,
        0,1338,1336,1,0,0,0,1338,1339,1,0,0,0,1339,161,1,0,0,0,1340,1338,
        1,0,0,0,1341,1343,5,86,0,0,1342,1344,5,135,0,0,1343,1342,1,0,0,0,
        1343,1344,1,0,0,0,1344,1346,1,0,0,0,1345,1341,1,0,0,0,1346,1349,
        1,0,0,0,1347,1345,1,0,0,0,1347,1348,1,0,0,0,1348,1350,1,0,0,0,1349,
        1347,1,0,0,0,1350,1351,3,164,82,0,1351,163,1,0,0,0,1352,1359,3,44,
        22,0,1353,1355,5,135,0,0,1354,1353,1,0,0,0,1354,1355,1,0,0,0,1355,
        1356,1,0,0,0,1356,1358,3,166,83,0,1357,1354,1,0,0,0,1358,1361,1,
        0,0,0,1359,1357,1,0,0,0,1359,1360,1,0,0,0,1360,165,1,0,0,0,1361,
        1359,1,0,0,0,1362,1364,5,2,0,0,1363,1365,5,135,0,0,1364,1363,1,0,
        0,0,1364,1365,1,0,0,0,1365,1366,1,0,0,0,1366,1393,3,44,22,0,1367,
        1369,5,16,0,0,1368,1370,5,135,0,0,1369,1368,1,0,0,0,1369,1370,1,
        0,0,0,1370,1371,1,0,0,0,1371,1393,3,44,22,0,1372,1374,5,17,0,0,1373,
        1375,5,135,0,0,1374,1373,1,0,0,0,1374,1375,1,0,0,0,1375,1376,1,0,
        0,0,1376,1393,3,44,22,0,1377,1379,5,18,0,0,1378,1380,5,135,0,0,1379,
        1378,1,0,0,0,1379,1380,1,0,0,0,1380,1381,1,0,0,0,1381,1393,3,44,
        22,0,1382,1384,5,19,0,0,1383,1385,5,135,0,0,1384,1383,1,0,0,0,1384,
        1385,1,0,0,0,1385,1386,1,0,0,0,1386,1393,3,44,22,0,1387,1389,5,20,
        0,0,1388,1390,5,135,0,0,1389,1388,1,0,0,0,1389,1390,1,0,0,0,1390,
        1391,1,0,0,0,1391,1393,3,44,22,0,1392,1362,1,0,0,0,1392,1367,1,0,
        0,0,1392,1372,1,0,0,0,1392,1377,1,0,0,0,1392,1382,1,0,0,0,1392,1387,
        1,0,0,0,1393,167,1,0,0,0,1394,1395,5,135,0,0,1395,1396,5,87,0,0,
        1396,1397,5,135,0,0,1397,1405,5,71,0,0,1398,1399,5,135,0,0,1399,
        1400,5,88,0,0,1400,1401,5,135,0,0,1401,1405,5,71,0,0,1402,1403,5,
        135,0,0,1403,1405,5,89,0,0,1404,1394,1,0,0,0,1404,1398,1,0,0,0,1404,
        1402,1,0,0,0,1405,1407,1,0,0,0,1406,1408,5,135,0,0,1407,1406,1,0,
        0,0,1407,1408,1,0,0,0,1408,1409,1,0,0,0,1409,1410,3,174,87,0,1410,
        169,1,0,0,0,1411,1412,5,135,0,0,1412,1414,5,90,0,0,1413,1415,5,135,
        0,0,1414,1413,1,0,0,0,1414,1415,1,0,0,0,1415,1416,1,0,0,0,1416,1417,
        3,174,87,0,1417,171,1,0,0,0,1418,1419,5,135,0,0,1419,1420,5,91,0,
        0,1420,1421,5,135,0,0,1421,1429,5,92,0,0,1422,1423,5,135,0,0,1423,
        1424,5,91,0,0,1424,1425,5,135,0,0,1425,1426,5,86,0,0,1426,1427,5,
        135,0,0,1427,1429,5,92,0,0,1428,1418,1,0,0,0,1428,1422,1,0,0,0,1429,
        173,1,0,0,0,1430,1449,3,176,88,0,1431,1433,5,135,0,0,1432,1431,1,
        0,0,0,1432,1433,1,0,0,0,1433,1434,1,0,0,0,1434,1436,5,21,0,0,1435,
        1437,5,135,0,0,1436,1435,1,0,0,0,1436,1437,1,0,0,0,1437,1438,1,0,
        0,0,1438,1448,3,176,88,0,1439,1441,5,135,0,0,1440,1439,1,0,0,0,1440,
        1441,1,0,0,0,1441,1442,1,0,0,0,1442,1444,5,22,0,0,1443,1445,5,135,
        0,0,1444,1443,1,0,0,0,1444,1445,1,0,0,0,1445,1446,1,0,0,0,1446,1448,
        3,176,88,0,1447,1432,1,0,0,0,1447,1440,1,0,0,0,1448,1451,1,0,0,0,
        1449,1447,1,0,0,0,1449,1450,1,0,0,0,1450,175,1,0,0,0,1451,1449,1,
        0,0,0,1452,1479,3,178,89,0,1453,1455,5,135,0,0,1454,1453,1,0,0,0,
        1454,1455,1,0,0,0,1455,1456,1,0,0,0,1456,1458,5,14,0,0,1457,1459,
        5,135,0,0,1458,1457,1,0,0,0,1458,1459,1,0,0,0,1459,1460,1,0,0,0,
        1460,1478,3,178,89,0,1461,1463,5,135,0,0,1462,1461,1,0,0,0,1462,
        1463,1,0,0,0,1463,1464,1,0,0,0,1464,1466,5,23,0,0,1465,1467,5,135,
        0,0,1466,1465,1,0,0,0,1466,1467,1,0,0,0,1467,1468,1,0,0,0,1468,1478,
        3,178,89,0,1469,1471,5,135,0,0,1470,1469,1,0,0,0,1470,1471,1,0,0,
        0,1471,1472,1,0,0,0,1472,1474,5,24,0,0,1473,1475,5,135,0,0,1474,
        1473,1,0,0,0,1474,1475,1,0,0,0,1475,1476,1,0,0,0,1476,1478,3,178,
        89,0,1477,1454,1,0,0,0,1477,1462,1,0,0,0,1477,1470,1,0,0,0,1478,
        1481,1,0,0,0,1479,1477,1,0,0,0,1479,1480,1,0,0,0,1480,177,1,0,0,
        0,1481,1479,1,0,0,0,1482,1493,3,180,90,0,1483,1485,5,135,0,0,1484,
        1483,1,0,0,0,1484,1485,1,0,0,0,1485,1486,1,0,0,0,1486,1488,5,25,
        0,0,1487,1489,5,135,0,0,1488,1487,1,0,0,0,1488,1489,1,0,0,0,1489,
        1490,1,0,0,0,1490,1492,3,180,90,0,1491,1484,1,0,0,0,1492,1495,1,
        0,0,0,1493,1491,1,0,0,0,1493,1494,1,0,0,0,1494,179,1,0,0,0,1495,
        1493,1,0,0,0,1496,1503,3,46,23,0,1497,1499,7,4,0,0,1498,1500,5,135,
        0,0,1499,1498,1,0,0,0,1499,1500,1,0,0,0,1500,1501,1,0,0,0,1501,1503,
        3,46,23,0,1502,1496,1,0,0,0,1502,1497,1,0,0,0,1503,181,1,0,0,0,1504,
        1511,3,186,93,0,1505,1507,5,135,0,0,1506,1505,1,0,0,0,1506,1507,
        1,0,0,0,1507,1508,1,0,0,0,1508,1510,3,184,92,0,1509,1506,1,0,0,0,
        1510,1513,1,0,0,0,1511,1509,1,0,0,0,1511,1512,1,0,0,0,1512,1518,
        1,0,0,0,1513,1511,1,0,0,0,1514,1516,5,135,0,0,1515,1514,1,0,0,0,
        1515,1516,1,0,0,0,1516,1517,1,0,0,0,1517,1519,3,142,71,0,1518,1515,
        1,0,0,0,1518,1519,1,0,0,0,1519,183,1,0,0,0,1520,1522,5,1,0,0,1521,
        1523,5,135,0,0,1522,1521,1,0,0,0,1522,1523,1,0,0,0,1523,1524,1,0,
        0,0,1524,1525,3,238,119,0,1525,185,1,0,0,0,1526,1551,3,224,112,0,
        1527,1551,3,240,120,0,1528,1551,3,188,94,0,1529,1531,5,93,0,0,1530,
        1532,5,135,0,0,1531,1530,1,0,0,0,1531,1532,1,0,0,0,1532,1533,1,0,
        0,0,1533,1535,5,5,0,0,1534,1536,5,135,0,0,1535,1534,1,0,0,0,1535,
        1536,1,0,0,0,1536,1537,1,0,0,0,1537,1539,5,14,0,0,1538,1540,5,135,
        0,0,1539,1538,1,0,0,0,1539,1540,1,0,0,0,1540,1541,1,0,0,0,1541,1551,
        5,6,0,0,1542,1551,3,192,96,0,1543,1551,3,194,97,0,1544,1551,3,196,
        98,0,1545,1551,3,200,100,0,1546,1551,3,202,101,0,1547,1551,3,206,
        103,0,1548,1551,3,210,105,0,1549,1551,3,222,111,0,1550,1526,1,0,
        0,0,1550,1527,1,0,0,0,1550,1528,1,0,0,0,1550,1529,1,0,0,0,1550,1542,
        1,0,0,0,1550,1543,1,0,0,0,1550,1544,1,0,0,0,1550,1545,1,0,0,0,1550,
        1546,1,0,0,0,1550,1547,1,0,0,0,1550,1548,1,0,0,0,1550,1549,1,0,0,
        0,1551,187,1,0,0,0,1552,1557,5,94,0,0,1553,1555,5,135,0,0,1554,1553,
        1,0,0,0,1554,1555,1,0,0,0,1555,1556,1,0,0,0,1556,1558,3,190,95,0,
        1557,1554,1,0,0,0,1558,1559,1,0,0,0,1559,1557,1,0,0,0,1559,1560,
        1,0,0,0,1560,1575,1,0,0,0,1561,1563,5,94,0,0,1562,1564,5,135,0,0,
        1563,1562,1,0,0,0,1563,1564,1,0,0,0,1564,1565,1,0,0,0,1565,1570,
        3,154,77,0,1566,1568,5,135,0,0,1567,1566,1,0,0,0,1567,1568,1,0,0,
        0,1568,1569,1,0,0,0,1569,1571,3,190,95,0,1570,1567,1,0,0,0,1571,
        1572,1,0,0,0,1572,1570,1,0,0,0,1572,1573,1,0,0,0,1573,1575,1,0,0,
        0,1574,1552,1,0,0,0,1574,1561,1,0,0,0,1575,1584,1,0,0,0,1576,1578,
        5,135,0,0,1577,1576,1,0,0,0,1577,1578,1,0,0,0,1578,1579,1,0,0,0,
        1579,1581,5,95,0,0,1580,1582,5,135,0,0,1581,1580,1,0,0,0,1581,1582,
        1,0,0,0,1582,1583,1,0,0,0,1583,1585,3,154,77,0,1584,1577,1,0,0,0,
        1584,1585,1,0,0,0,1585,1587,1,0,0,0,1586,1588,5,135,0,0,1587,1586,
        1,0,0,0,1587,1588,1,0,0,0,1588,1589,1,0,0,0,1589,1590,5,96,0,0,1590,
        189,1,0,0,0,1591,1593,5,97,0,0,1592,1594,5,135,0,0,1593,1592,1,0,
        0,0,1593,1594,1,0,0,0,1594,1595,1,0,0,0,1595,1597,3,154,77,0,1596,
        1598,5,135,0,0,1597,1596,1,0,0,0,1597,1598,1,0,0,0,1598,1599,1,0,
        0,0,1599,1601,5,98,0,0,1600,1602,5,135,0,0,1601,1600,1,0,0,0,1601,
        1602,1,0,0,0,1602,1603,1,0,0,0,1603,1604,3,154,77,0,1604,191,1,0,
        0,0,1605,1607,5,10,0,0,1606,1608,5,135,0,0,1607,1606,1,0,0,0,1607,
        1608,1,0,0,0,1608,1609,1,0,0,0,1609,1618,3,198,99,0,1610,1612,5,
        135,0,0,1611,1610,1,0,0,0,1611,1612,1,0,0,0,1612,1613,1,0,0,0,1613,
        1615,5,15,0,0,1614,1616,5,135,0,0,1615,1614,1,0,0,0,1615,1616,1,
        0,0,0,1616,1617,1,0,0,0,1617,1619,3,154,77,0,1618,1611,1,0,0,0,1618,
        1619,1,0,0,0,1619,1621,1,0,0,0,1620,1622,5,135,0,0,1621,1620,1,0,
        0,0,1621,1622,1,0,0,0,1622,1623,1,0,0,0,1623,1624,5,11,0,0,1624,
        193,1,0,0,0,1625,1627,5,10,0,0,1626,1628,5,135,0,0,1627,1626,1,0,
        0,0,1627,1628,1,0,0,0,1628,1637,1,0,0,0,1629,1631,3,222,111,0,1630,
        1632,5,135,0,0,1631,1630,1,0,0,0,1631,1632,1,0,0,0,1632,1633,1,0,
        0,0,1633,1635,5,2,0,0,1634,1636,5,135,0,0,1635,1634,1,0,0,0,1635,
        1636,1,0,0,0,1636,1638,1,0,0,0,1637,1629,1,0,0,0,1637,1638,1,0,0,
        0,1638,1639,1,0,0,0,1639,1641,3,132,66,0,1640,1642,5,135,0,0,1641,
        1640,1,0,0,0,1641,1642,1,0,0,0,1642,1647,1,0,0,0,1643,1645,3,124,
        62,0,1644,1646,5,135,0,0,1645,1644,1,0,0,0,1645,1646,1,0,0,0,1646,
        1648,1,0,0,0,1647,1643,1,0,0,0,1647,1648,1,0,0,0,1648,1649,1,0,0,
        0,1649,1651,5,15,0,0,1650,1652,5,135,0,0,1651,1650,1,0,0,0,1651,
        1652,1,0,0,0,1652,1653,1,0,0,0,1653,1655,3,154,77,0,1654,1656,5,
        135,0,0,1655,1654,1,0,0,0,1655,1656,1,0,0,0,1656,1657,1,0,0,0,1657,
        1658,5,11,0,0,1658,195,1,0,0,0,1659,1661,5,57,0,0,1660,1662,5,135,
        0,0,1661,1660,1,0,0,0,1661,1662,1,0,0,0,1662,1663,1,0,0,0,1663,1665,
        5,5,0,0,1664,1666,5,135,0,0,1665,1664,1,0,0,0,1665,1666,1,0,0,0,
        1666,1667,1,0,0,0,1667,1669,3,198,99,0,1668,1670,5,135,0,0,1669,
        1668,1,0,0,0,1669,1670,1,0,0,0,1670,1671,1,0,0,0,1671,1672,5,6,0,
        0,1672,1716,1,0,0,0,1673,1675,5,99,0,0,1674,1676,5,135,0,0,1675,
        1674,1,0,0,0,1675,1676,1,0,0,0,1676,1677,1,0,0,0,1677,1679,5,5,0,
        0,1678,1680,5,135,0,0,1679,1678,1,0,0,0,1679,1680,1,0,0,0,1680,1681,
        1,0,0,0,1681,1683,3,198,99,0,1682,1684,5,135,0,0,1683,1682,1,0,0,
        0,1683,1684,1,0,0,0,1684,1685,1,0,0,0,1685,1686,5,6,0,0,1686,1716,
        1,0,0,0,1687,1689,5,100,0,0,1688,1690,5,135,0,0,1689,1688,1,0,0,
        0,1689,1690,1,0,0,0,1690,1691,1,0,0,0,1691,1693,5,5,0,0,1692,1694,
        5,135,0,0,1693,1692,1,0,0,0,1693,1694,1,0,0,0,1694,1695,1,0,0,0,
        1695,1697,3,198,99,0,1696,1698,5,135,0,0,1697,1696,1,0,0,0,1697,
        1698,1,0,0,0,1698,1699,1,0,0,0,1699,1700,5,6,0,0,1700,1716,1,0,0,
        0,1701,1703,5,101,0,0,1702,1704,5,135,0,0,1703,1702,1,0,0,0,1703,
        1704,1,0,0,0,1704,1705,1,0,0,0,1705,1707,5,5,0,0,1706,1708,5,135,
        0,0,1707,1706,1,0,0,0,1707,1708,1,0,0,0,1708,1709,1,0,0,0,1709,1711,
        3,198,99,0,1710,1712,5,135,0,0,1711,1710,1,0,0,0,1711,1712,1,0,0,
        0,1712,1713,1,0,0,0,1713,1714,5,6,0,0,1714,1716,1,0,0,0,1715,1659,
        1,0,0,0,1715,1673,1,0,0,0,1715,1687,1,0,0,0,1715,1701,1,0,0,0,1716,
        197,1,0,0,0,1717,1722,3,204,102,0,1718,1720,5,135,0,0,1719,1718,
        1,0,0,0,1719,1720,1,0,0,0,1720,1721,1,0,0,0,1721,1723,3,124,62,0,
        1722,1719,1,0,0,0,1722,1723,1,0,0,0,1723,199,1,0,0,0,1724,1725,3,
        132,66,0,1725,201,1,0,0,0,1726,1728,5,5,0,0,1727,1729,5,135,0,0,
        1728,1727,1,0,0,0,1728,1729,1,0,0,0,1729,1730,1,0,0,0,1730,1732,
        3,154,77,0,1731,1733,5,135,0,0,1732,1731,1,0,0,0,1732,1733,1,0,0,
        0,1733,1734,1,0,0,0,1734,1735,5,6,0,0,1735,203,1,0,0,0,1736,1737,
        3,222,111,0,1737,1738,5,135,0,0,1738,1739,5,90,0,0,1739,1740,5,135,
        0,0,1740,1741,3,154,77,0,1741,205,1,0,0,0,1742,1744,3,208,104,0,
        1743,1745,5,135,0,0,1744,1743,1,0,0,0,1744,1745,1,0,0,0,1745,1746,
        1,0,0,0,1746,1748,5,5,0,0,1747,1749,5,135,0,0,1748,1747,1,0,0,0,
        1748,1749,1,0,0,0,1749,1754,1,0,0,0,1750,1752,5,73,0,0,1751,1753,
        5,135,0,0,1752,1751,1,0,0,0,1752,1753,1,0,0,0,1753,1755,1,0,0,0,
        1754,1750,1,0,0,0,1754,1755,1,0,0,0,1755,1773,1,0,0,0,1756,1758,
        3,154,77,0,1757,1759,5,135,0,0,1758,1757,1,0,0,0,1758,1759,1,0,0,
        0,1759,1770,1,0,0,0,1760,1762,5,4,0,0,1761,1763,5,135,0,0,1762,1761,
        1,0,0,0,1762,1763,1,0,0,0,1763,1764,1,0,0,0,1764,1766,3,154,77,0,
        1765,1767,5,135,0,0,1766,1765,1,0,0,0,1766,1767,1,0,0,0,1767,1769,
        1,0,0,0,1768,1760,1,0,0,0,1769,1772,1,0,0,0,1770,1768,1,0,0,0,1770,
        1771,1,0,0,0,1771,1774,1,0,0,0,1772,1770,1,0,0,0,1773,1756,1,0,0,
        0,1773,1774,1,0,0,0,1774,1775,1,0,0,0,1775,1776,5,6,0,0,1776,207,
        1,0,0,0,1777,1778,3,220,110,0,1778,1779,3,62,31,0,1779,209,1,0,0,
        0,1780,1782,5,102,0,0,1781,1783,5,135,0,0,1782,1781,1,0,0,0,1782,
        1783,1,0,0,0,1783,1784,1,0,0,0,1784,1786,5,7,0,0,1785,1787,5,135,
        0,0,1786,1785,1,0,0,0,1786,1787,1,0,0,0,1787,1796,1,0,0,0,1788,1797,
        3,70,35,0,1789,1794,3,126,63,0,1790,1792,5,135,0,0,1791,1790,1,0,
        0,0,1791,1792,1,0,0,0,1792,1793,1,0,0,0,1793,1795,3,124,62,0,1794,
        1791,1,0,0,0,1794,1795,1,0,0,0,1795,1797,1,0,0,0,1796,1788,1,0,0,
        0,1796,1789,1,0,0,0,1797,1799,1,0,0,0,1798,1800,5,135,0,0,1799,1798,
        1,0,0,0,1799,1800,1,0,0,0,1800,1801,1,0,0,0,1801,1802,5,9,0,0,1802,
        211,1,0,0,0,1803,1805,3,218,109,0,1804,1806,5,135,0,0,1805,1804,
        1,0,0,0,1805,1806,1,0,0,0,1806,1807,1,0,0,0,1807,1809,5,5,0,0,1808,
        1810,5,135,0,0,1809,1808,1,0,0,0,1809,1810,1,0,0,0,1810,1828,1,0,
        0,0,1811,1813,3,154,77,0,1812,1814,5,135,0,0,1813,1812,1,0,0,0,1813,
        1814,1,0,0,0,1814,1825,1,0,0,0,1815,1817,5,4,0,0,1816,1818,5,135,
        0,0,1817,1816,1,0,0,0,1817,1818,1,0,0,0,1818,1819,1,0,0,0,1819,1821,
        3,154,77,0,1820,1822,5,135,0,0,1821,1820,1,0,0,0,1821,1822,1,0,0,
        0,1822,1824,1,0,0,0,1823,1815,1,0,0,0,1824,1827,1,0,0,0,1825,1823,
        1,0,0,0,1825,1826,1,0,0,0,1826,1829,1,0,0,0,1827,1825,1,0,0,0,1828,
        1811,1,0,0,0,1828,1829,1,0,0,0,1829,1830,1,0,0,0,1830,1831,5,6,0,
        0,1831,213,1,0,0,0,1832,1833,3,218,109,0,1833,215,1,0,0,0,1834,1835,
        3,62,31,0,1835,217,1,0,0,0,1836,1837,3,220,110,0,1837,1838,3,62,
        31,0,1838,219,1,0,0,0,1839,1840,3,62,31,0,1840,1841,5,1,0,0,1841,
        1843,1,0,0,0,1842,1839,1,0,0,0,1843,1846,1,0,0,0,1844,1842,1,0,0,
        0,1844,1845,1,0,0,0,1845,221,1,0,0,0,1846,1844,1,0,0,0,1847,1848,
        3,62,31,0,1848,223,1,0,0,0,1849,1856,3,226,113,0,1850,1856,5,92,
        0,0,1851,1856,3,228,114,0,1852,1856,5,117,0,0,1853,1856,3,234,117,
        0,1854,1856,3,236,118,0,1855,1849,1,0,0,0,1855,1850,1,0,0,0,1855,
        1851,1,0,0,0,1855,1852,1,0,0,0,1855,1853,1,0,0,0,1855,1854,1,0,0,
        0,1856,225,1,0,0,0,1857,1858,7,5,0,0,1858,227,1,0,0,0,1859,1862,
        3,232,116,0,1860,1862,3,230,115,0,1861,1859,1,0,0,0,1861,1860,1,
        0,0,0,1862,229,1,0,0,0,1863,1864,7,6,0,0,1864,231,1,0,0,0,1865,1866,
        7,7,0,0,1866,233,1,0,0,0,1867,1869,5,10,0,0,1868,1870,5,135,0,0,
        1869,1868,1,0,0,0,1869,1870,1,0,0,0,1870,1888,1,0,0,0,1871,1873,
        3,154,77,0,1872,1874,5,135,0,0,1873,1872,1,0,0,0,1873,1874,1,0,0,
        0,1874,1885,1,0,0,0,1875,1877,5,4,0,0,1876,1878,5,135,0,0,1877,1876,
        1,0,0,0,1877,1878,1,0,0,0,1878,1879,1,0,0,0,1879,1881,3,154,77,0,
        1880,1882,5,135,0,0,1881,1880,1,0,0,0,1881,1882,1,0,0,0,1882,1884,
        1,0,0,0,1883,1875,1,0,0,0,1884,1887,1,0,0,0,1885,1883,1,0,0,0,1885,
        1886,1,0,0,0,1886,1889,1,0,0,0,1887,1885,1,0,0,0,1888,1871,1,0,0,
        0,1888,1889,1,0,0,0,1889,1890,1,0,0,0,1890,1891,5,11,0,0,1891,235,
        1,0,0,0,1892,1894,5,7,0,0,1893,1895,5,135,0,0,1894,1893,1,0,0,0,
        1894,1895,1,0,0,0,1895,1929,1,0,0,0,1896,1898,3,238,119,0,1897,1899,
        5,135,0,0,1898,1897,1,0,0,0,1898,1899,1,0,0,0,1899,1900,1,0,0,0,
        1900,1902,5,8,0,0,1901,1903,5,135,0,0,1902,1901,1,0,0,0,1902,1903,
        1,0,0,0,1903,1904,1,0,0,0,1904,1906,3,154,77,0,1905,1907,5,135,0,
        0,1906,1905,1,0,0,0,1906,1907,1,0,0,0,1907,1926,1,0,0,0,1908,1910,
        5,4,0,0,1909,1911,5,135,0,0,1910,1909,1,0,0,0,1910,1911,1,0,0,0,
        1911,1912,1,0,0,0,1912,1914,3,238,119,0,1913,1915,5,135,0,0,1914,
        1913,1,0,0,0,1914,1915,1,0,0,0,1915,1916,1,0,0,0,1916,1918,5,8,0,
        0,1917,1919,5,135,0,0,1918,1917,1,0,0,0,1918,1919,1,0,0,0,1919,1920,
        1,0,0,0,1920,1922,3,154,77,0,1921,1923,5,135,0,0,1922,1921,1,0,0,
        0,1922,1923,1,0,0,0,1923,1925,1,0,0,0,1924,1908,1,0,0,0,1925,1928,
        1,0,0,0,1926,1924,1,0,0,0,1926,1927,1,0,0,0,1927,1930,1,0,0,0,1928,
        1926,1,0,0,0,1929,1896,1,0,0,0,1929,1930,1,0,0,0,1930,1931,1,0,0,
        0,1931,1932,5,9,0,0,1932,237,1,0,0,0,1933,1934,3,242,121,0,1934,
        239,1,0,0,0,1935,1938,5,26,0,0,1936,1939,3,62,31,0,1937,1939,5,106,
        0,0,1938,1936,1,0,0,0,1938,1937,1,0,0,0,1939,241,1,0,0,0,1940,1943,
        3,62,31,0,1941,1943,3,64,32,0,1942,1940,1,0,0,0,1942,1941,1,0,0,
        0,1943,243,1,0,0,0,1944,1945,7,8,0,0,1945,245,1,0,0,0,1946,1947,
        7,9,0,0,1947,247,1,0,0,0,1948,1949,7,10,0,0,1949,249,1,0,0,0,366,
        253,257,261,265,269,271,274,277,285,288,291,295,301,304,309,315,
        318,323,326,329,333,339,342,347,350,353,357,361,364,368,372,378,
        382,388,392,398,402,406,410,414,419,426,431,435,439,443,447,452,
        459,464,468,474,480,484,490,496,500,506,510,515,519,523,527,533,
        537,543,547,549,553,555,559,561,565,567,573,577,584,592,595,601,
        605,607,610,614,618,620,624,628,630,634,636,639,643,645,649,651,
        660,664,668,670,674,681,685,689,695,700,703,706,708,711,717,722,
        732,736,740,744,748,751,757,764,768,771,774,782,787,794,799,802,
        806,810,814,820,824,829,834,838,841,843,848,854,858,863,867,872,
        877,881,891,898,911,915,921,925,929,934,941,945,950,957,963,968,
        974,977,983,985,989,993,998,1002,1005,1012,1019,1022,1028,1031,1037,
        1041,1045,1049,1053,1058,1063,1067,1072,1075,1084,1093,1098,1111,
        1114,1122,1126,1131,1138,1143,1150,1154,1159,1163,1169,1173,1176,
        1179,1183,1189,1193,1196,1199,1205,1208,1211,1215,1221,1224,1227,
        1231,1235,1239,1243,1247,1250,1255,1260,1265,1270,1276,1280,1282,
        1286,1290,1292,1294,1302,1307,1318,1328,1338,1343,1347,1354,1359,
        1364,1369,1374,1379,1384,1389,1392,1404,1407,1414,1428,1432,1436,
        1440,1444,1447,1449,1454,1458,1462,1466,1470,1474,1477,1479,1484,
        1488,1493,1499,1502,1506,1511,1515,1518,1522,1531,1535,1539,1550,
        1554,1559,1563,1567,1572,1574,1577,1581,1584,1587,1593,1597,1601,
        1607,1611,1615,1618,1621,1627,1631,1635,1637,1641,1645,1647,1651,
        1655,1661,1665,1669,1675,1679,1683,1689,1693,1697,1703,1707,1711,
        1715,1719,1722,1728,1732,1744,1748,1752,1754,1758,1762,1766,1770,
        1773,1782,1786,1791,1794,1796,1799,1805,1809,1813,1817,1821,1825,
        1828,1844,1855,1861,1869,1873,1877,1881,1885,1888,1894,1898,1902,
        1906,1910,1914,1918,1922,1926,1929,1938,1942
    ]

class s_cypherParser ( Parser ):

    grammarFileName = "s_cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "'='", "'+='", "','", "'('", "')'", 
                     "'{'", "':'", "'}'", "'['", "']'", "'..'", "';'", "'*'", 
                     "'|'", "'<>'", "'<'", "'>'", "'<='", "'>='", "'+'", 
                     "'-'", "'/'", "'%'", "'^'", "'$'", "'\\u27E8'", "'\\u3008'", 
                     "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
                     "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", 
                     "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", 
                     "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
                     "'\\uFF0D'", "<INVALID>", "<INVALID>", "'NOW'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "AtT", "PoundValue", "NOW", 
                      "AT_TIME", "SNAPSHOT", "BETWEEN", "SCOPE", "STALE", 
                      "DURING", "OVERLAPS", "UNION", "ALL", "OPTIONAL", 
                      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", 
                      "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", 
                      "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", 
                      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
                      "WHERE", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", 
                      "CONTAINS", "IN", "IS", "NULL", "COUNT", "CASE", "ELSE", 
                      "END", "WHEN", "THEN", "ANY", "NONE", "SINGLE", "EXISTS", 
                      "TRUE", "FALSE", "HexInteger", "DecimalInteger", "OctalInteger", 
                      "HexLetter", "HexDigit", "Digit", "NonZeroDigit", 
                      "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", 
                      "RegularDecimalReal", "StringLiteral", "EscapedChar", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Query = 0
    RULE_oC_Match = 1
    RULE_oC_UpdatingClause = 2
    RULE_oC_SetItem = 3
    RULE_s_Stale = 4
    RULE_s_StaleItem = 5
    RULE_oC_Delete = 6
    RULE_s_DeleteItem = 7
    RULE_s_AtTime = 8
    RULE_s_Between = 9
    RULE_s_TimeWindowLimit = 10
    RULE_s_Snapshot = 11
    RULE_s_Scope = 12
    RULE_oC_PatternPart = 13
    RULE_s_PathFunctionPattern = 14
    RULE_s_SinglePathPattern = 15
    RULE_oC_NodePattern = 16
    RULE_s_Properties = 17
    RULE_s_PropertiesPattern = 18
    RULE_s_PropertyNode = 19
    RULE_s_ValueNode = 20
    RULE_oC_RelationshipDetail = 21
    RULE_oC_StringListNullPredicateExpression = 22
    RULE_oC_ListOperatorExpression = 23
    RULE_oC_SingleIndexExpression = 24
    RULE_oC_DoubleIndexExpression = 25
    RULE_s_AtTExpression = 26
    RULE_oC_PropertyLookupTime = 27
    RULE_s_TimePredicateExpression = 28
    RULE_s_AtTElement = 29
    RULE_s_TimePointLiteral = 30
    RULE_oC_SymbolicName = 31
    RULE_oC_ReservedWord = 32
    RULE_oC_Cypher = 33
    RULE_oC_Statement = 34
    RULE_oC_RegularQuery = 35
    RULE_oC_Union = 36
    RULE_oC_SingleQuery = 37
    RULE_oC_SinglePartQuery = 38
    RULE_oC_MultiPartQuery = 39
    RULE_s_WithPartQuery = 40
    RULE_oC_ReadingClause = 41
    RULE_oC_Unwind = 42
    RULE_oC_Merge = 43
    RULE_oC_MergeAction = 44
    RULE_oC_Create = 45
    RULE_oC_Set = 46
    RULE_oC_Remove = 47
    RULE_oC_RemoveItem = 48
    RULE_oC_InQueryCall = 49
    RULE_oC_StandaloneCall = 50
    RULE_oC_YieldItems = 51
    RULE_oC_YieldItem = 52
    RULE_oC_With = 53
    RULE_oC_Return = 54
    RULE_oC_ProjectionBody = 55
    RULE_oC_ProjectionItems = 56
    RULE_oC_ProjectionItem = 57
    RULE_oC_Order = 58
    RULE_oC_Skip = 59
    RULE_oC_Limit = 60
    RULE_oC_SortItem = 61
    RULE_oC_Where = 62
    RULE_oC_Pattern = 63
    RULE_oC_AnonymousPatternPart = 64
    RULE_oC_PatternElement = 65
    RULE_oC_RelationshipsPattern = 66
    RULE_oC_PatternElementChain = 67
    RULE_oC_RelationshipPattern = 68
    RULE_oC_Properties = 69
    RULE_oC_RelationshipTypes = 70
    RULE_oC_NodeLabels = 71
    RULE_oC_NodeLabel = 72
    RULE_oC_RangeLiteral = 73
    RULE_oC_LabelName = 74
    RULE_oC_RelTypeName = 75
    RULE_oC_PropertyExpression = 76
    RULE_oC_Expression = 77
    RULE_oC_OrExpression = 78
    RULE_oC_XorExpression = 79
    RULE_oC_AndExpression = 80
    RULE_oC_NotExpression = 81
    RULE_oC_ComparisonExpression = 82
    RULE_oC_PartialComparisonExpression = 83
    RULE_oC_StringPredicateExpression = 84
    RULE_oC_ListPredicateExpression = 85
    RULE_oC_NullPredicateExpression = 86
    RULE_oC_AddOrSubtractExpression = 87
    RULE_oC_MultiplyDivideModuloExpression = 88
    RULE_oC_PowerOfExpression = 89
    RULE_oC_UnaryAddOrSubtractExpression = 90
    RULE_oC_PropertyOrLabelsExpression = 91
    RULE_oC_PropertyLookup = 92
    RULE_oC_Atom = 93
    RULE_oC_CaseExpression = 94
    RULE_oC_CaseAlternative = 95
    RULE_oC_ListComprehension = 96
    RULE_oC_PatternComprehension = 97
    RULE_oC_Quantifier = 98
    RULE_oC_FilterExpression = 99
    RULE_oC_PatternPredicate = 100
    RULE_oC_ParenthesizedExpression = 101
    RULE_oC_IdInColl = 102
    RULE_oC_FunctionInvocation = 103
    RULE_oC_FunctionName = 104
    RULE_oC_ExistentialSubquery = 105
    RULE_oC_ExplicitProcedureInvocation = 106
    RULE_oC_ImplicitProcedureInvocation = 107
    RULE_oC_ProcedureResultField = 108
    RULE_oC_ProcedureName = 109
    RULE_oC_Namespace = 110
    RULE_oC_Variable = 111
    RULE_oC_Literal = 112
    RULE_oC_BooleanLiteral = 113
    RULE_oC_NumberLiteral = 114
    RULE_oC_IntegerLiteral = 115
    RULE_oC_DoubleLiteral = 116
    RULE_oC_ListLiteral = 117
    RULE_oC_MapLiteral = 118
    RULE_oC_PropertyKeyName = 119
    RULE_oC_Parameter = 120
    RULE_oC_SchemaName = 121
    RULE_oC_LeftArrowHead = 122
    RULE_oC_RightArrowHead = 123
    RULE_oC_Dash = 124

    ruleNames =  [ "oC_Query", "oC_Match", "oC_UpdatingClause", "oC_SetItem", 
                   "s_Stale", "s_StaleItem", "oC_Delete", "s_DeleteItem", 
                   "s_AtTime", "s_Between", "s_TimeWindowLimit", "s_Snapshot", 
                   "s_Scope", "oC_PatternPart", "s_PathFunctionPattern", 
                   "s_SinglePathPattern", "oC_NodePattern", "s_Properties", 
                   "s_PropertiesPattern", "s_PropertyNode", "s_ValueNode", 
                   "oC_RelationshipDetail", "oC_StringListNullPredicateExpression", 
                   "oC_ListOperatorExpression", "oC_SingleIndexExpression", 
                   "oC_DoubleIndexExpression", "s_AtTExpression", "oC_PropertyLookupTime", 
                   "s_TimePredicateExpression", "s_AtTElement", "s_TimePointLiteral", 
                   "oC_SymbolicName", "oC_ReservedWord", "oC_Cypher", "oC_Statement", 
                   "oC_RegularQuery", "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", 
                   "oC_MultiPartQuery", "s_WithPartQuery", "oC_ReadingClause", 
                   "oC_Unwind", "oC_Merge", "oC_MergeAction", "oC_Create", 
                   "oC_Set", "oC_Remove", "oC_RemoveItem", "oC_InQueryCall", 
                   "oC_StandaloneCall", "oC_YieldItems", "oC_YieldItem", 
                   "oC_With", "oC_Return", "oC_ProjectionBody", "oC_ProjectionItems", 
                   "oC_ProjectionItem", "oC_Order", "oC_Skip", "oC_Limit", 
                   "oC_SortItem", "oC_Where", "oC_Pattern", "oC_AnonymousPatternPart", 
                   "oC_PatternElement", "oC_RelationshipsPattern", "oC_PatternElementChain", 
                   "oC_RelationshipPattern", "oC_Properties", "oC_RelationshipTypes", 
                   "oC_NodeLabels", "oC_NodeLabel", "oC_RangeLiteral", "oC_LabelName", 
                   "oC_RelTypeName", "oC_PropertyExpression", "oC_Expression", 
                   "oC_OrExpression", "oC_XorExpression", "oC_AndExpression", 
                   "oC_NotExpression", "oC_ComparisonExpression", "oC_PartialComparisonExpression", 
                   "oC_StringPredicateExpression", "oC_ListPredicateExpression", 
                   "oC_NullPredicateExpression", "oC_AddOrSubtractExpression", 
                   "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", 
                   "oC_UnaryAddOrSubtractExpression", "oC_PropertyOrLabelsExpression", 
                   "oC_PropertyLookup", "oC_Atom", "oC_CaseExpression", 
                   "oC_CaseAlternative", "oC_ListComprehension", "oC_PatternComprehension", 
                   "oC_Quantifier", "oC_FilterExpression", "oC_PatternPredicate", 
                   "oC_ParenthesizedExpression", "oC_IdInColl", "oC_FunctionInvocation", 
                   "oC_FunctionName", "oC_ExistentialSubquery", "oC_ExplicitProcedureInvocation", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_Variable", "oC_Literal", 
                   "oC_BooleanLiteral", "oC_NumberLiteral", "oC_IntegerLiteral", 
                   "oC_DoubleLiteral", "oC_ListLiteral", "oC_MapLiteral", 
                   "oC_PropertyKeyName", "oC_Parameter", "oC_SchemaName", 
                   "oC_LeftArrowHead", "oC_RightArrowHead", "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    AtT=46
    PoundValue=47
    NOW=48
    AT_TIME=49
    SNAPSHOT=50
    BETWEEN=51
    SCOPE=52
    STALE=53
    DURING=54
    OVERLAPS=55
    UNION=56
    ALL=57
    OPTIONAL=58
    MATCH=59
    UNWIND=60
    AS=61
    MERGE=62
    ON=63
    CREATE=64
    SET=65
    DETACH=66
    DELETE=67
    REMOVE=68
    CALL=69
    YIELD=70
    WITH=71
    RETURN=72
    DISTINCT=73
    ORDER=74
    BY=75
    L_SKIP=76
    LIMIT=77
    ASCENDING=78
    ASC=79
    DESCENDING=80
    DESC=81
    WHERE=82
    OR=83
    XOR=84
    AND=85
    NOT=86
    STARTS=87
    ENDS=88
    CONTAINS=89
    IN=90
    IS=91
    NULL=92
    COUNT=93
    CASE=94
    ELSE=95
    END=96
    WHEN=97
    THEN=98
    ANY=99
    NONE=100
    SINGLE=101
    EXISTS=102
    TRUE=103
    FALSE=104
    HexInteger=105
    DecimalInteger=106
    OctalInteger=107
    HexLetter=108
    HexDigit=109
    Digit=110
    NonZeroDigit=111
    NonZeroOctDigit=112
    OctDigit=113
    ZeroDigit=114
    ExponentDecimalReal=115
    RegularDecimalReal=116
    StringLiteral=117
    EscapedChar=118
    CONSTRAINT=119
    DO=120
    FOR=121
    REQUIRE=122
    UNIQUE=123
    MANDATORY=124
    SCALAR=125
    OF=126
    ADD=127
    DROP=128
    FILTER=129
    EXTRACT=130
    UnescapedSymbolicName=131
    IdentifierStart=132
    IdentifierPart=133
    EscapedSymbolicName=134
    SP=135
    WHITESPACE=136
    Comment=137

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StandaloneCallContext,0)


        def s_TimeWindowLimit(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimeWindowLimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = s_cypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Query)
        try:
            self.state = 253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 250
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 251
                self.oC_StandaloneCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 252
                self.s_TimeWindowLimit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = s_cypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 255
                self.match(s_cypherParser.OPTIONAL)
                self.state = 256
                self.match(s_cypherParser.SP)


            self.state = 259
            self.match(s_cypherParser.MATCH)
            self.state = 261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 260
                self.match(s_cypherParser.SP)


            self.state = 263
            self.oC_Pattern()
            self.state = 271
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 264
                    self.match(s_cypherParser.SP)


                self.state = 269
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 267
                    self.s_AtTime()
                    pass
                elif token in [51]:
                    self.state = 268
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 273
                    self.match(s_cypherParser.SP)


                self.state = 276
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Create(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CreateContext,0)


        def oC_Merge(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MergeContext,0)


        def oC_Delete(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DeleteContext,0)


        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RemoveContext,0)


        def s_Stale(self):
            return self.getTypedRuleContext(s_cypherParser.S_StaleContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = s_cypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_UpdatingClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.state = 279
                self.oC_Create()
                pass
            elif token in [62]:
                self.state = 280
                self.oC_Merge()
                pass
            elif token in [66, 67]:
                self.state = 281
                self.oC_Delete()
                pass
            elif token in [65]:
                self.state = 282
                self.oC_Set()
                pass
            elif token in [68]:
                self.state = 283
                self.oC_Remove()
                pass
            elif token in [53]:
                self.state = 284
                self.s_Stale()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 287
                    self.match(s_cypherParser.SP)


                self.state = 290
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_AtTElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AtTElementContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = s_cypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 293
                self.oC_Variable()
                self.state = 295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 294
                    self.match(s_cypherParser.SP)


                self.state = 297
                self.s_AtTElement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 299
                self.oC_Variable()
                self.state = 304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 301
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 300
                        self.match(s_cypherParser.SP)


                    self.state = 303
                    self.s_AtTElement()


                self.state = 306
                self.match(s_cypherParser.T__0)
                self.state = 307
                self.oC_PropertyKeyName()
                self.state = 309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 308
                    self.match(s_cypherParser.SP)


                self.state = 311
                self.s_AtTElement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 313
                self.oC_Variable()
                self.state = 318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 315
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 314
                        self.match(s_cypherParser.SP)


                    self.state = 317
                    self.s_AtTElement()


                self.state = 320
                self.match(s_cypherParser.T__0)
                self.state = 321
                self.oC_PropertyKeyName()
                self.state = 326
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 323
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 322
                        self.match(s_cypherParser.SP)


                    self.state = 325
                    self.s_AtTElement()


                self.state = 329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 328
                    self.match(s_cypherParser.SP)


                self.state = 331
                self.match(s_cypherParser.PoundValue)
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 332
                    self.match(s_cypherParser.SP)


                self.state = 335
                self.s_AtTElement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 337
                self.oC_Variable()
                self.state = 342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 339
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 338
                        self.match(s_cypherParser.SP)


                    self.state = 341
                    self.s_AtTElement()


                self.state = 344
                self.match(s_cypherParser.T__0)
                self.state = 345
                self.oC_PropertyKeyName()
                self.state = 350
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                if la_ == 1:
                    self.state = 347
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 346
                        self.match(s_cypherParser.SP)


                    self.state = 349
                    self.s_AtTElement()


                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 352
                    self.match(s_cypherParser.SP)


                self.state = 355
                self.match(s_cypherParser.T__1)
                self.state = 357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 356
                    self.match(s_cypherParser.SP)


                self.state = 359
                self.oC_Expression()
                self.state = 364
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 361
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 360
                        self.match(s_cypherParser.SP)


                    self.state = 363
                    self.s_AtTElement()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 366
                self.oC_PropertyExpression()
                self.state = 368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 367
                    self.match(s_cypherParser.SP)


                self.state = 370
                self.match(s_cypherParser.T__1)
                self.state = 372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 371
                    self.match(s_cypherParser.SP)


                self.state = 374
                self.oC_Expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 376
                self.oC_Variable()
                self.state = 378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 377
                    self.match(s_cypherParser.SP)


                self.state = 380
                self.match(s_cypherParser.T__1)
                self.state = 382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 381
                    self.match(s_cypherParser.SP)


                self.state = 384
                self.oC_Expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 386
                self.oC_Variable()
                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 387
                    self.match(s_cypherParser.SP)


                self.state = 390
                self.match(s_cypherParser.T__2)
                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 391
                    self.match(s_cypherParser.SP)


                self.state = 394
                self.oC_Expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 396
                self.oC_Variable()
                self.state = 398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 397
                    self.match(s_cypherParser.SP)


                self.state = 400
                self.oC_NodeLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def s_StaleItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StaleItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StaleItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Stale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Stale" ):
                listener.enterS_Stale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Stale" ):
                listener.exitS_Stale(self)




    def s_Stale(self):

        localctx = s_cypherParser.S_StaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_s_Stale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self.match(s_cypherParser.STALE)
            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 405
                self.match(s_cypherParser.SP)


            self.state = 408
            self.s_StaleItem()
            self.state = 419
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 410
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 409
                        self.match(s_cypherParser.SP)


                    self.state = 412
                    self.match(s_cypherParser.T__3)
                    self.state = 414
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 413
                        self.match(s_cypherParser.SP)


                    self.state = 416
                    self.s_StaleItem() 
                self.state = 421
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StaleItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StaleItem" ):
                listener.enterS_StaleItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StaleItem" ):
                listener.exitS_StaleItem(self)




    def s_StaleItem(self):

        localctx = s_cypherParser.S_StaleItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_s_StaleItem)
        self._la = 0 # Token type
        try:
            self.state = 431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 422
                self.oC_Expression()
                self.state = 423
                self.match(s_cypherParser.T__0)
                self.state = 424
                self.oC_PropertyKeyName()
                self.state = 426
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 425
                    self.match(s_cypherParser.SP)


                self.state = 428
                self.match(s_cypherParser.PoundValue)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 430
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def s_DeleteItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DeleteItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DeleteItemContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = s_cypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 433
                self.match(s_cypherParser.DETACH)
                self.state = 434
                self.match(s_cypherParser.SP)


            self.state = 437
            self.match(s_cypherParser.DELETE)
            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 438
                self.match(s_cypherParser.SP)


            self.state = 441
            self.s_DeleteItem()
            self.state = 452
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 443
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 442
                        self.match(s_cypherParser.SP)


                    self.state = 445
                    self.match(s_cypherParser.T__3)
                    self.state = 447
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 446
                        self.match(s_cypherParser.SP)


                    self.state = 449
                    self.s_DeleteItem() 
                self.state = 454
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DeleteItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DeleteItem" ):
                listener.enterS_DeleteItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DeleteItem" ):
                listener.exitS_DeleteItem(self)




    def s_DeleteItem(self):

        localctx = s_cypherParser.S_DeleteItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_s_DeleteItem)
        self._la = 0 # Token type
        try:
            self.state = 464
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 455
                self.oC_Expression()
                self.state = 456
                self.match(s_cypherParser.T__0)
                self.state = 457
                self.oC_PropertyKeyName()
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 458
                    self.match(s_cypherParser.SP)


                self.state = 461
                self.match(s_cypherParser.PoundValue)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 463
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTime" ):
                listener.enterS_AtTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTime" ):
                listener.exitS_AtTime(self)




    def s_AtTime(self):

        localctx = s_cypherParser.S_AtTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_s_AtTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.match(s_cypherParser.AT_TIME)
            self.state = 468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 467
                self.match(s_cypherParser.SP)


            self.state = 470
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_BetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Between

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Between" ):
                listener.enterS_Between(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Between" ):
                listener.exitS_Between(self)




    def s_Between(self):

        localctx = s_cypherParser.S_BetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_s_Between)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self.match(s_cypherParser.BETWEEN)
            self.state = 474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 473
                self.match(s_cypherParser.SP)


            self.state = 476
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimeWindowLimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_Snapshot(self):
            return self.getTypedRuleContext(s_cypherParser.S_SnapshotContext,0)


        def s_Scope(self):
            return self.getTypedRuleContext(s_cypherParser.S_ScopeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimeWindowLimit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimeWindowLimit" ):
                listener.enterS_TimeWindowLimit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimeWindowLimit" ):
                listener.exitS_TimeWindowLimit(self)




    def s_TimeWindowLimit(self):

        localctx = s_cypherParser.S_TimeWindowLimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_s_TimeWindowLimit)
        try:
            self.state = 480
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 478
                self.s_Snapshot()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 479
                self.s_Scope()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SnapshotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Snapshot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Snapshot" ):
                listener.enterS_Snapshot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Snapshot" ):
                listener.exitS_Snapshot(self)




    def s_Snapshot(self):

        localctx = s_cypherParser.S_SnapshotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_s_Snapshot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self.match(s_cypherParser.SNAPSHOT)
            self.state = 484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 483
                self.match(s_cypherParser.SP)


            self.state = 486
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Scope" ):
                listener.enterS_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Scope" ):
                listener.exitS_Scope(self)




    def s_Scope(self):

        localctx = s_cypherParser.S_ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_s_Scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.match(s_cypherParser.SCOPE)
            self.state = 490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 489
                self.match(s_cypherParser.SP)


            self.state = 492
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_PathFunctionPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PathFunctionPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AnonymousPatternPartContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = s_cypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 494
                self.oC_Variable()
                self.state = 496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 495
                    self.match(s_cypherParser.SP)


                self.state = 498
                self.match(s_cypherParser.T__1)
                self.state = 500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 499
                    self.match(s_cypherParser.SP)


                self.state = 502
                self.s_PathFunctionPattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 504
                self.oC_Variable()
                self.state = 506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 505
                    self.match(s_cypherParser.SP)


                self.state = 508
                self.match(s_cypherParser.T__1)
                self.state = 510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 509
                    self.match(s_cypherParser.SP)


                self.state = 512
                self.oC_AnonymousPatternPart()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 514
                self.oC_AnonymousPatternPart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PathFunctionPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def s_SinglePathPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_SinglePathPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PathFunctionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PathFunctionPattern" ):
                listener.enterS_PathFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PathFunctionPattern" ):
                listener.exitS_PathFunctionPattern(self)




    def s_PathFunctionPattern(self):

        localctx = s_cypherParser.S_PathFunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_s_PathFunctionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.oC_FunctionName()
            self.state = 519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 518
                self.match(s_cypherParser.SP)


            self.state = 521
            self.match(s_cypherParser.T__4)
            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 522
                self.match(s_cypherParser.SP)


            self.state = 525
            self.s_SinglePathPattern()
            self.state = 527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 526
                self.match(s_cypherParser.SP)


            self.state = 529
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SinglePathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodePatternContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,i)


        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SinglePathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SinglePathPattern" ):
                listener.enterS_SinglePathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SinglePathPattern" ):
                listener.exitS_SinglePathPattern(self)




    def s_SinglePathPattern(self):

        localctx = s_cypherParser.S_SinglePathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_s_SinglePathPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.oC_NodePattern()
            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 532
                self.match(s_cypherParser.SP)


            self.state = 535
            self.oC_RelationshipPattern()
            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 536
                self.match(s_cypherParser.SP)


            self.state = 539
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def s_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = s_cypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(s_cypherParser.T__4)
            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 542
                self.match(s_cypherParser.SP)


            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 545
                self.oC_Variable()
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 546
                    self.match(s_cypherParser.SP)




            self.state = 555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 551
                self.oC_NodeLabels()
                self.state = 553
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 552
                    self.match(s_cypherParser.SP)




            self.state = 561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 557
                self.s_AtTElement()
                self.state = 559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 558
                    self.match(s_cypherParser.SP)




            self.state = 567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==26:
                self.state = 563
                self.s_Properties()
                self.state = 565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 564
                    self.match(s_cypherParser.SP)




            self.state = 569
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertiesPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesPatternContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Properties" ):
                listener.enterS_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Properties" ):
                listener.exitS_Properties(self)




    def s_Properties(self):

        localctx = s_cypherParser.S_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_s_Properties)
        try:
            self.state = 573
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 571
                self.s_PropertiesPattern()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 572
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_PropertyNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PropertyNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PropertyNodeContext,i)


        def s_ValueNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ValueNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ValueNodeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertiesPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertiesPattern" ):
                listener.enterS_PropertiesPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertiesPattern" ):
                listener.exitS_PropertiesPattern(self)




    def s_PropertiesPattern(self):

        localctx = s_cypherParser.S_PropertiesPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_s_PropertiesPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.match(s_cypherParser.T__6)
            self.state = 577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 576
                self.match(s_cypherParser.SP)


            self.state = 595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 579
                self.s_PropertyNode()
                self.state = 580
                self.match(s_cypherParser.T__7)
                self.state = 581
                self.s_ValueNode()
                self.state = 592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 582
                    self.match(s_cypherParser.T__3)
                    self.state = 584
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 583
                        self.match(s_cypherParser.SP)


                    self.state = 586
                    self.s_PropertyNode()
                    self.state = 587
                    self.match(s_cypherParser.T__7)
                    self.state = 588
                    self.s_ValueNode()
                    self.state = 594
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 597
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyNode" ):
                listener.enterS_PropertyNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyNode" ):
                listener.exitS_PropertyNode(self)




    def s_PropertyNode(self):

        localctx = s_cypherParser.S_PropertyNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_s_PropertyNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self.oC_PropertyKeyName()
            self.state = 601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 600
                self.match(s_cypherParser.SP)


            self.state = 607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 603
                self.s_AtTElement()
                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 604
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ValueNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ValueNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ValueNode" ):
                listener.enterS_ValueNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ValueNode" ):
                listener.exitS_ValueNode(self)




    def s_ValueNode(self):

        localctx = s_cypherParser.S_ValueNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_s_ValueNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 609
                self.match(s_cypherParser.SP)


            self.state = 612
            self.oC_Expression()
            self.state = 614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 613
                self.match(s_cypherParser.SP)


            self.state = 620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 616
                self.s_AtTElement()
                self.state = 618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 617
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RangeLiteralContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = s_cypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 622
            self.match(s_cypherParser.T__9)
            self.state = 624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 623
                self.match(s_cypherParser.SP)


            self.state = 630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 626
                self.oC_Variable()
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 627
                    self.match(s_cypherParser.SP)




            self.state = 636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 632
                self.oC_RelationshipTypes()
                self.state = 634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 633
                    self.match(s_cypherParser.SP)




            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 638
                self.oC_RangeLiteral()


            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 641
                self.s_AtTElement()
                self.state = 643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 642
                    self.match(s_cypherParser.SP)




            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==26:
                self.state = 647
                self.oC_Properties()
                self.state = 649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 648
                    self.match(s_cypherParser.SP)




            self.state = 653
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def s_TimePredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateExpressionContext,0)


        def oC_StringPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringPredicateExpressionContext,0)


        def oC_ListPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListPredicateExpressionContext,0)


        def oC_NullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NullPredicateExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringListNullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullPredicateExpression" ):
                listener.enterOC_StringListNullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullPredicateExpression" ):
                listener.exitOC_StringListNullPredicateExpression(self)




    def oC_StringListNullPredicateExpression(self):

        localctx = s_cypherParser.OC_StringListNullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_oC_StringListNullPredicateExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.oC_AddOrSubtractExpression()
            self.state = 660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 656
                self.s_TimePredicateExpression()

            elif la_ == 2:
                self.state = 657
                self.oC_StringPredicateExpression()

            elif la_ == 3:
                self.state = 658
                self.oC_ListPredicateExpression()

            elif la_ == 4:
                self.state = 659
                self.oC_NullPredicateExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def s_AtTExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTExpressionContext,0)


        def oC_SingleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SingleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SingleIndexExpressionContext,i)


        def oC_DoubleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_DoubleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_DoubleIndexExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = s_cypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_oC_ListOperatorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 662
                self.oC_PropertyOrLabelsExpression()
                pass

            elif la_ == 2:
                self.state = 663
                self.s_AtTExpression()
                pass


            self.state = 670
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 668
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                    if la_ == 1:
                        self.state = 666
                        self.oC_SingleIndexExpression()
                        pass

                    elif la_ == 2:
                        self.state = 667
                        self.oC_DoubleIndexExpression()
                        pass

             
                self.state = 672
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SingleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleIndexExpression" ):
                listener.enterOC_SingleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleIndexExpression" ):
                listener.exitOC_SingleIndexExpression(self)




    def oC_SingleIndexExpression(self):

        localctx = s_cypherParser.OC_SingleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_oC_SingleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 673
                self.match(s_cypherParser.SP)


            self.state = 676
            self.match(s_cypherParser.T__9)
            self.state = 677
            self.oC_Expression()
            self.state = 678
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_DoubleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleIndexExpression" ):
                listener.enterOC_DoubleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleIndexExpression" ):
                listener.exitOC_DoubleIndexExpression(self)




    def oC_DoubleIndexExpression(self):

        localctx = s_cypherParser.OC_DoubleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_oC_DoubleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 680
                self.match(s_cypherParser.SP)


            self.state = 683
            self.match(s_cypherParser.T__9)
            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 684
                self.oC_Expression()


            self.state = 687
            self.match(s_cypherParser.T__11)
            self.state = 689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 688
                self.oC_Expression()


            self.state = 691
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookupTime(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupTimeContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTExpression" ):
                listener.enterS_AtTExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTExpression" ):
                listener.exitS_AtTExpression(self)




    def s_AtTExpression(self):

        localctx = s_cypherParser.S_AtTExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_s_AtTExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.oC_Atom()
            self.state = 708
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 698 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 695
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 694
                            self.match(s_cypherParser.SP)


                        self.state = 697
                        self.oC_PropertyLookup()

                    else:
                        raise NoViableAltException(self)
                    self.state = 700 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                self.state = 706
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 703
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 702
                        self.match(s_cypherParser.SP)


                    self.state = 705
                    self.match(s_cypherParser.PoundValue)




            self.state = 711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 710
                self.match(s_cypherParser.SP)


            self.state = 713
            self.oC_PropertyLookupTime()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookupTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookupTime" ):
                listener.enterOC_PropertyLookupTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookupTime" ):
                listener.exitOC_PropertyLookupTime(self)




    def oC_PropertyLookupTime(self):

        localctx = s_cypherParser.OC_PropertyLookupTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_oC_PropertyLookupTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self.match(s_cypherParser.AtT)
            self.state = 722
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 717
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 716
                        self.match(s_cypherParser.SP)


                    self.state = 719
                    self.oC_PropertyLookup() 
                self.state = 724
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateExpression" ):
                listener.enterS_TimePredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateExpression" ):
                listener.exitS_TimePredicateExpression(self)




    def s_TimePredicateExpression(self):

        localctx = s_cypherParser.S_TimePredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_s_TimePredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.match(s_cypherParser.SP)
            self.state = 726
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 727
            self.match(s_cypherParser.SP)
            self.state = 728
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_TimePointLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_TimePointLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_TimePointLiteralContext,i)


        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTElement" ):
                listener.enterS_AtTElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTElement" ):
                listener.exitS_AtTElement(self)




    def s_AtTElement(self):

        localctx = s_cypherParser.S_AtTElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_s_AtTElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.match(s_cypherParser.AtT)
            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 731
                self.match(s_cypherParser.SP)


            self.state = 734
            self.match(s_cypherParser.T__4)
            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 735
                self.match(s_cypherParser.SP)


            self.state = 738
            self.s_TimePointLiteral()
            self.state = 740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 739
                self.match(s_cypherParser.SP)


            self.state = 742
            self.match(s_cypherParser.T__3)
            self.state = 744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 743
                self.match(s_cypherParser.SP)


            self.state = 748
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 117]:
                self.state = 746
                self.s_TimePointLiteral()
                pass
            elif token in [48]:
                self.state = 747
                self.match(s_cypherParser.NOW)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 750
                self.match(s_cypherParser.SP)


            self.state = 753
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePointLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePointLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePointLiteral" ):
                listener.enterS_TimePointLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePointLiteral" ):
                listener.exitS_TimePointLiteral(self)




    def s_TimePointLiteral(self):

        localctx = s_cypherParser.S_TimePointLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_s_TimePointLiteral)
        try:
            self.state = 757
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 755
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 756
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(s_cypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(s_cypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(s_cypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(s_cypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(s_cypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = s_cypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            _la = self._input.LA(1)
            if not(_la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(s_cypherParser.AND, 0)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def OR(self):
            return self.getToken(s_cypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(s_cypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(s_cypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(s_cypherParser.DO, 0)

        def FOR(self):
            return self.getToken(s_cypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(s_cypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(s_cypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(s_cypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(s_cypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(s_cypherParser.OF, 0)

        def ADD(self):
            return self.getToken(s_cypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(s_cypherParser.DROP, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = s_cypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            _la = self._input.LA(1)
            if not(((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 128317405001678847) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(s_cypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = s_cypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 763
                self.match(s_cypherParser.SP)


            self.state = 766
            self.oC_Statement()
            self.state = 771
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 767
                    self.match(s_cypherParser.SP)


                self.state = 770
                self.match(s_cypherParser.T__12)


            self.state = 774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 773
                self.match(s_cypherParser.SP)


            self.state = 776
            self.match(s_cypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = s_cypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = s_cypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            self.oC_SingleQuery()
            self.state = 787
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 782
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 781
                        self.match(s_cypherParser.SP)


                    self.state = 784
                    self.oC_Union() 
                self.state = 789
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = s_cypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 790
                self.match(s_cypherParser.UNION)
                self.state = 791
                self.match(s_cypherParser.SP)
                self.state = 792
                self.match(s_cypherParser.ALL)
                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 793
                    self.match(s_cypherParser.SP)


                self.state = 796
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 797
                self.match(s_cypherParser.UNION)
                self.state = 799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 798
                    self.match(s_cypherParser.SP)


                self.state = 801
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = s_cypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_oC_SingleQuery)
        try:
            self.state = 806
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 804
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 805
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = s_cypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 808
                    self.oC_ReadingClause()
                    self.state = 810
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 809
                        self.match(s_cypherParser.SP)


                    self.state = 816
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 817
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 818
                    self.oC_ReadingClause()
                    self.state = 820
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 819
                        self.match(s_cypherParser.SP)


                    self.state = 826
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 827
                self.oC_UpdatingClause()
                self.state = 834
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 829
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 828
                            self.match(s_cypherParser.SP)


                        self.state = 831
                        self.oC_UpdatingClause() 
                    self.state = 836
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

                self.state = 841
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 838
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 837
                        self.match(s_cypherParser.SP)


                    self.state = 840
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def s_WithPartQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_WithPartQueryContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_WithPartQueryContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = s_cypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_oC_MultiPartQuery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 845
                    self.s_WithPartQuery()

                else:
                    raise NoViableAltException(self)
                self.state = 848 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

            self.state = 850
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_With(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WithContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_WithPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_WithPartQuery" ):
                listener.enterS_WithPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_WithPartQuery" ):
                listener.exitS_WithPartQuery(self)




    def s_WithPartQuery(self):

        localctx = s_cypherParser.S_WithPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_s_WithPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                self.state = 852
                self.oC_ReadingClause()
                self.state = 854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 853
                    self.match(s_cypherParser.SP)


                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64001) != 0):
                self.state = 861
                self.oC_UpdatingClause()
                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 862
                    self.match(s_cypherParser.SP)


                self.state = 869
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 870
            self.oC_With()
            self.state = 872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 871
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(s_cypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = s_cypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_oC_ReadingClause)
        try:
            self.state = 877
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 874
                self.oC_Match()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 875
                self.oC_Unwind()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 876
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = s_cypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.match(s_cypherParser.UNWIND)
            self.state = 881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 880
                self.match(s_cypherParser.SP)


            self.state = 883
            self.oC_Expression()
            self.state = 884
            self.match(s_cypherParser.SP)
            self.state = 885
            self.match(s_cypherParser.AS)
            self.state = 886
            self.match(s_cypherParser.SP)
            self.state = 887
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = s_cypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.match(s_cypherParser.MERGE)
            self.state = 891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 890
                self.match(s_cypherParser.SP)


            self.state = 893
            self.oC_PatternPart()
            self.state = 898
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 894
                    self.match(s_cypherParser.SP)
                    self.state = 895
                    self.oC_MergeAction() 
                self.state = 900
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = s_cypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_oC_MergeAction)
        try:
            self.state = 911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 901
                self.match(s_cypherParser.ON)
                self.state = 902
                self.match(s_cypherParser.SP)
                self.state = 903
                self.match(s_cypherParser.MATCH)
                self.state = 904
                self.match(s_cypherParser.SP)
                self.state = 905
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 906
                self.match(s_cypherParser.ON)
                self.state = 907
                self.match(s_cypherParser.SP)
                self.state = 908
                self.match(s_cypherParser.CREATE)
                self.state = 909
                self.match(s_cypherParser.SP)
                self.state = 910
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = s_cypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.match(s_cypherParser.CREATE)
            self.state = 915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 914
                self.match(s_cypherParser.SP)


            self.state = 917
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = s_cypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self.match(s_cypherParser.SET)
            self.state = 921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 920
                self.match(s_cypherParser.SP)


            self.state = 923
            self.oC_SetItem()
            self.state = 934
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 925
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 924
                        self.match(s_cypherParser.SP)


                    self.state = 927
                    self.match(s_cypherParser.T__3)
                    self.state = 929
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 928
                        self.match(s_cypherParser.SP)


                    self.state = 931
                    self.oC_SetItem() 
                self.state = 936
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = s_cypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self.match(s_cypherParser.REMOVE)
            self.state = 938
            self.match(s_cypherParser.SP)
            self.state = 939
            self.oC_RemoveItem()
            self.state = 950
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 941
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 940
                        self.match(s_cypherParser.SP)


                    self.state = 943
                    self.match(s_cypherParser.T__3)
                    self.state = 945
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 944
                        self.match(s_cypherParser.SP)


                    self.state = 947
                    self.oC_RemoveItem() 
                self.state = 952
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = s_cypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_oC_RemoveItem)
        try:
            self.state = 957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 953
                self.oC_Variable()
                self.state = 954
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 956
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = s_cypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            self.match(s_cypherParser.CALL)
            self.state = 960
            self.match(s_cypherParser.SP)
            self.state = 961
            self.oC_ExplicitProcedureInvocation()
            self.state = 968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 962
                    self.match(s_cypherParser.SP)


                self.state = 965
                self.match(s_cypherParser.YIELD)
                self.state = 966
                self.match(s_cypherParser.SP)
                self.state = 967
                self.oC_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = s_cypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_oC_StandaloneCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.match(s_cypherParser.CALL)
            self.state = 971
            self.match(s_cypherParser.SP)
            self.state = 974
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 972
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 973
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 985
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.state = 977
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 976
                    self.match(s_cypherParser.SP)


                self.state = 979
                self.match(s_cypherParser.YIELD)
                self.state = 980
                self.match(s_cypherParser.SP)
                self.state = 983
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14]:
                    self.state = 981
                    self.match(s_cypherParser.T__13)
                    pass
                elif token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                    self.state = 982
                    self.oC_YieldItems()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = s_cypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 987
            self.oC_YieldItem()
            self.state = 998
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,166,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 989
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 988
                        self.match(s_cypherParser.SP)


                    self.state = 991
                    self.match(s_cypherParser.T__3)
                    self.state = 993
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 992
                        self.match(s_cypherParser.SP)


                    self.state = 995
                    self.oC_YieldItem() 
                self.state = 1000
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,166,self._ctx)

            self.state = 1005
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 1002
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1001
                    self.match(s_cypherParser.SP)


                self.state = 1004
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = s_cypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1007
                self.oC_ProcedureResultField()
                self.state = 1008
                self.match(s_cypherParser.SP)
                self.state = 1009
                self.match(s_cypherParser.AS)
                self.state = 1010
                self.match(s_cypherParser.SP)


            self.state = 1014
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = s_cypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self.match(s_cypherParser.WITH)
            self.state = 1017
            self.oC_ProjectionBody()
            self.state = 1022
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1018
                    self.match(s_cypherParser.SP)


                self.state = 1021
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = s_cypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1024
            self.match(s_cypherParser.RETURN)
            self.state = 1025
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)




    def oC_ProjectionBody(self):

        localctx = s_cypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1027
                    self.match(s_cypherParser.SP)


                self.state = 1030
                self.match(s_cypherParser.DISTINCT)


            self.state = 1033
            self.match(s_cypherParser.SP)
            self.state = 1034
            self.oC_ProjectionItems()
            self.state = 1037
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1035
                self.match(s_cypherParser.SP)
                self.state = 1036
                self.oC_Order()


            self.state = 1041
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.state = 1039
                self.match(s_cypherParser.SP)
                self.state = 1040
                self.oC_Skip()


            self.state = 1045
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.state = 1043
                self.match(s_cypherParser.SP)
                self.state = 1044
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)




    def oC_ProjectionItems(self):

        localctx = s_cypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 1075
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1047
                self.match(s_cypherParser.T__13)
                self.state = 1058
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,179,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1049
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1048
                            self.match(s_cypherParser.SP)


                        self.state = 1051
                        self.match(s_cypherParser.T__3)
                        self.state = 1053
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1052
                            self.match(s_cypherParser.SP)


                        self.state = 1055
                        self.oC_ProjectionItem() 
                    self.state = 1060
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,179,self._ctx)

                pass
            elif token in [5, 7, 10, 21, 22, 26, 48, 57, 86, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1061
                self.oC_ProjectionItem()
                self.state = 1072
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,182,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1063
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1062
                            self.match(s_cypherParser.SP)


                        self.state = 1065
                        self.match(s_cypherParser.T__3)
                        self.state = 1067
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1066
                            self.match(s_cypherParser.SP)


                        self.state = 1069
                        self.oC_ProjectionItem() 
                    self.state = 1074
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)




    def oC_ProjectionItem(self):

        localctx = s_cypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_oC_ProjectionItem)
        try:
            self.state = 1084
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1077
                self.oC_Expression()
                self.state = 1078
                self.match(s_cypherParser.SP)
                self.state = 1079
                self.match(s_cypherParser.AS)
                self.state = 1080
                self.match(s_cypherParser.SP)
                self.state = 1081
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1083
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = s_cypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            self.match(s_cypherParser.ORDER)
            self.state = 1087
            self.match(s_cypherParser.SP)
            self.state = 1088
            self.match(s_cypherParser.BY)
            self.state = 1089
            self.match(s_cypherParser.SP)
            self.state = 1090
            self.oC_SortItem()
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1091
                self.match(s_cypherParser.T__3)
                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1092
                    self.match(s_cypherParser.SP)


                self.state = 1095
                self.oC_SortItem()
                self.state = 1100
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = s_cypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            self.match(s_cypherParser.L_SKIP)
            self.state = 1102
            self.match(s_cypherParser.SP)
            self.state = 1103
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = s_cypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1105
            self.match(s_cypherParser.LIMIT)
            self.state = 1106
            self.match(s_cypherParser.SP)
            self.state = 1107
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = s_cypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1109
            self.oC_Expression()
            self.state = 1114
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.state = 1111
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1110
                    self.match(s_cypherParser.SP)


                self.state = 1113
                _la = self._input.LA(1)
                if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = s_cypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            self.match(s_cypherParser.WHERE)
            self.state = 1117
            self.match(s_cypherParser.SP)
            self.state = 1118
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = s_cypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            self.oC_PatternPart()
            self.state = 1131
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,191,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1122
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1121
                        self.match(s_cypherParser.SP)


                    self.state = 1124
                    self.match(s_cypherParser.T__3)
                    self.state = 1126
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1125
                        self.match(s_cypherParser.SP)


                    self.state = 1128
                    self.oC_PatternPart() 
                self.state = 1133
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,191,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = s_cypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = s_cypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 1150
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1136
                self.oC_NodePattern()
                self.state = 1143
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,193,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1138
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1137
                            self.match(s_cypherParser.SP)


                        self.state = 1140
                        self.oC_PatternElementChain() 
                    self.state = 1145
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,193,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1146
                self.match(s_cypherParser.T__4)
                self.state = 1147
                self.oC_PatternElement()
                self.state = 1148
                self.match(s_cypherParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = s_cypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self.oC_NodePattern()
            self.state = 1157 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1154
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1153
                        self.match(s_cypherParser.SP)


                    self.state = 1156
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 1159 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,196,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = s_cypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self.oC_RelationshipPattern()
            self.state = 1163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1162
                self.match(s_cypherParser.SP)


            self.state = 1165
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = s_cypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 1231
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1167
                self.oC_LeftArrowHead()
                self.state = 1169
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1168
                    self.match(s_cypherParser.SP)


                self.state = 1171
                self.oC_Dash()
                self.state = 1173
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                if la_ == 1:
                    self.state = 1172
                    self.match(s_cypherParser.SP)


                self.state = 1176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1175
                    self.oC_RelationshipDetail()


                self.state = 1179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1178
                    self.match(s_cypherParser.SP)


                self.state = 1181
                self.oC_Dash()
                self.state = 1183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1182
                    self.match(s_cypherParser.SP)


                self.state = 1185
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1187
                self.oC_LeftArrowHead()
                self.state = 1189
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1188
                    self.match(s_cypherParser.SP)


                self.state = 1191
                self.oC_Dash()
                self.state = 1193
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
                if la_ == 1:
                    self.state = 1192
                    self.match(s_cypherParser.SP)


                self.state = 1196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1195
                    self.oC_RelationshipDetail()


                self.state = 1199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1198
                    self.match(s_cypherParser.SP)


                self.state = 1201
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1203
                self.oC_Dash()
                self.state = 1205
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
                if la_ == 1:
                    self.state = 1204
                    self.match(s_cypherParser.SP)


                self.state = 1208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1207
                    self.oC_RelationshipDetail()


                self.state = 1211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1210
                    self.match(s_cypherParser.SP)


                self.state = 1213
                self.oC_Dash()
                self.state = 1215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1214
                    self.match(s_cypherParser.SP)


                self.state = 1217
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1219
                self.oC_Dash()
                self.state = 1221
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
                if la_ == 1:
                    self.state = 1220
                    self.match(s_cypherParser.SP)


                self.state = 1224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1223
                    self.oC_RelationshipDetail()


                self.state = 1227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1226
                    self.match(s_cypherParser.SP)


                self.state = 1229
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = s_cypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_oC_Properties)
        try:
            self.state = 1235
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1233
                self.oC_MapLiteral()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1234
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = s_cypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1237
            self.match(s_cypherParser.T__7)
            self.state = 1239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1238
                self.match(s_cypherParser.SP)


            self.state = 1241
            self.oC_RelTypeName()
            self.state = 1255
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,220,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1243
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1242
                        self.match(s_cypherParser.SP)


                    self.state = 1245
                    self.match(s_cypherParser.T__14)
                    self.state = 1247
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==8:
                        self.state = 1246
                        self.match(s_cypherParser.T__7)


                    self.state = 1250
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1249
                        self.match(s_cypherParser.SP)


                    self.state = 1252
                    self.oC_RelTypeName() 
                self.state = 1257
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,220,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = s_cypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self.oC_NodeLabel()
            self.state = 1265
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,222,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1260
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1259
                        self.match(s_cypherParser.SP)


                    self.state = 1262
                    self.oC_NodeLabel() 
                self.state = 1267
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,222,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = s_cypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1268
            self.match(s_cypherParser.T__7)
            self.state = 1270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1269
                self.match(s_cypherParser.SP)


            self.state = 1272
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = s_cypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1274
            self.match(s_cypherParser.T__13)
            self.state = 1276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1275
                self.match(s_cypherParser.SP)


            self.state = 1282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                self.state = 1278
                self.oC_IntegerLiteral()
                self.state = 1280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1279
                    self.match(s_cypherParser.SP)




            self.state = 1294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 1284
                self.match(s_cypherParser.T__11)
                self.state = 1286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1285
                    self.match(s_cypherParser.SP)


                self.state = 1292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                    self.state = 1288
                    self.oC_IntegerLiteral()
                    self.state = 1290
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1289
                        self.match(s_cypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = s_cypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1296
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = s_cypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = s_cypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1300
            self.oC_Atom()
            self.state = 1305 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1302
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1301
                        self.match(s_cypherParser.SP)


                    self.state = 1304
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 1307 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = s_cypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1309
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = s_cypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1311
            self.oC_XorExpression()
            self.state = 1318
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,233,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1312
                    self.match(s_cypherParser.SP)
                    self.state = 1313
                    self.match(s_cypherParser.OR)
                    self.state = 1314
                    self.match(s_cypherParser.SP)
                    self.state = 1315
                    self.oC_XorExpression() 
                self.state = 1320
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,233,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = s_cypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            self.oC_AndExpression()
            self.state = 1328
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,234,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1322
                    self.match(s_cypherParser.SP)
                    self.state = 1323
                    self.match(s_cypherParser.XOR)
                    self.state = 1324
                    self.match(s_cypherParser.SP)
                    self.state = 1325
                    self.oC_AndExpression() 
                self.state = 1330
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,234,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = s_cypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1331
            self.oC_NotExpression()
            self.state = 1338
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,235,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1332
                    self.match(s_cypherParser.SP)
                    self.state = 1333
                    self.match(s_cypherParser.AND)
                    self.state = 1334
                    self.match(s_cypherParser.SP)
                    self.state = 1335
                    self.oC_NotExpression() 
                self.state = 1340
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,235,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = s_cypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1341
                self.match(s_cypherParser.NOT)
                self.state = 1343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1342
                    self.match(s_cypherParser.SP)


                self.state = 1349
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1350
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def oC_PartialComparisonExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PartialComparisonExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PartialComparisonExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = s_cypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1352
            self.oC_StringListNullPredicateExpression()
            self.state = 1359
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,239,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1354
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1353
                        self.match(s_cypherParser.SP)


                    self.state = 1356
                    self.oC_PartialComparisonExpression() 
                self.state = 1361
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,239,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PartialComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PartialComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PartialComparisonExpression" ):
                listener.enterOC_PartialComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PartialComparisonExpression" ):
                listener.exitOC_PartialComparisonExpression(self)




    def oC_PartialComparisonExpression(self):

        localctx = s_cypherParser.OC_PartialComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_PartialComparisonExpression)
        self._la = 0 # Token type
        try:
            self.state = 1392
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1362
                self.match(s_cypherParser.T__1)
                self.state = 1364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1363
                    self.match(s_cypherParser.SP)


                self.state = 1366
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1367
                self.match(s_cypherParser.T__15)
                self.state = 1369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1368
                    self.match(s_cypherParser.SP)


                self.state = 1371
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1372
                self.match(s_cypherParser.T__16)
                self.state = 1374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1373
                    self.match(s_cypherParser.SP)


                self.state = 1376
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1377
                self.match(s_cypherParser.T__17)
                self.state = 1379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1378
                    self.match(s_cypherParser.SP)


                self.state = 1381
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1382
                self.match(s_cypherParser.T__18)
                self.state = 1384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1383
                    self.match(s_cypherParser.SP)


                self.state = 1386
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1387
                self.match(s_cypherParser.T__19)
                self.state = 1389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1388
                    self.match(s_cypherParser.SP)


                self.state = 1391
                self.oC_StringListNullPredicateExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringPredicateExpression" ):
                listener.enterOC_StringPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringPredicateExpression" ):
                listener.exitOC_StringPredicateExpression(self)




    def oC_StringPredicateExpression(self):

        localctx = s_cypherParser.OC_StringPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_StringPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1404
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
            if la_ == 1:
                self.state = 1394
                self.match(s_cypherParser.SP)
                self.state = 1395
                self.match(s_cypherParser.STARTS)
                self.state = 1396
                self.match(s_cypherParser.SP)
                self.state = 1397
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1398
                self.match(s_cypherParser.SP)
                self.state = 1399
                self.match(s_cypherParser.ENDS)
                self.state = 1400
                self.match(s_cypherParser.SP)
                self.state = 1401
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1402
                self.match(s_cypherParser.SP)
                self.state = 1403
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 1407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1406
                self.match(s_cypherParser.SP)


            self.state = 1409
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListPredicateExpression" ):
                listener.enterOC_ListPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListPredicateExpression" ):
                listener.exitOC_ListPredicateExpression(self)




    def oC_ListPredicateExpression(self):

        localctx = s_cypherParser.OC_ListPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_ListPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1411
            self.match(s_cypherParser.SP)
            self.state = 1412
            self.match(s_cypherParser.IN)
            self.state = 1414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1413
                self.match(s_cypherParser.SP)


            self.state = 1416
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullPredicateExpression" ):
                listener.enterOC_NullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullPredicateExpression" ):
                listener.exitOC_NullPredicateExpression(self)




    def oC_NullPredicateExpression(self):

        localctx = s_cypherParser.OC_NullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_NullPredicateExpression)
        try:
            self.state = 1428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1418
                self.match(s_cypherParser.SP)
                self.state = 1419
                self.match(s_cypherParser.IS)
                self.state = 1420
                self.match(s_cypherParser.SP)
                self.state = 1421
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1422
                self.match(s_cypherParser.SP)
                self.state = 1423
                self.match(s_cypherParser.IS)
                self.state = 1424
                self.match(s_cypherParser.SP)
                self.state = 1425
                self.match(s_cypherParser.NOT)
                self.state = 1426
                self.match(s_cypherParser.SP)
                self.state = 1427
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1430
            self.oC_MultiplyDivideModuloExpression()
            self.state = 1449
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,256,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1447
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
                    if la_ == 1:
                        self.state = 1432
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1431
                            self.match(s_cypherParser.SP)


                        self.state = 1434
                        self.match(s_cypherParser.T__20)
                        self.state = 1436
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1435
                            self.match(s_cypherParser.SP)


                        self.state = 1438
                        self.oC_MultiplyDivideModuloExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1440
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1439
                            self.match(s_cypherParser.SP)


                        self.state = 1442
                        self.match(s_cypherParser.T__21)
                        self.state = 1444
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1443
                            self.match(s_cypherParser.SP)


                        self.state = 1446
                        self.oC_MultiplyDivideModuloExpression()
                        pass

             
                self.state = 1451
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,256,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PowerOfExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = s_cypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1452
            self.oC_PowerOfExpression()
            self.state = 1479
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,264,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1477
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
                    if la_ == 1:
                        self.state = 1454
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1453
                            self.match(s_cypherParser.SP)


                        self.state = 1456
                        self.match(s_cypherParser.T__13)
                        self.state = 1458
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1457
                            self.match(s_cypherParser.SP)


                        self.state = 1460
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1462
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1461
                            self.match(s_cypherParser.SP)


                        self.state = 1464
                        self.match(s_cypherParser.T__22)
                        self.state = 1466
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1465
                            self.match(s_cypherParser.SP)


                        self.state = 1468
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1470
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1469
                            self.match(s_cypherParser.SP)


                        self.state = 1472
                        self.match(s_cypherParser.T__23)
                        self.state = 1474
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1473
                            self.match(s_cypherParser.SP)


                        self.state = 1476
                        self.oC_PowerOfExpression()
                        pass

             
                self.state = 1481
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,264,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = s_cypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1482
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 1493
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,267,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1484
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1483
                        self.match(s_cypherParser.SP)


                    self.state = 1486
                    self.match(s_cypherParser.T__24)
                    self.state = 1488
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1487
                        self.match(s_cypherParser.SP)


                    self.state = 1490
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 1495
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,267,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ListOperatorExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListOperatorExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.state = 1502
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 7, 10, 26, 48, 57, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1496
                self.oC_ListOperatorExpression()
                pass
            elif token in [21, 22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1497
                _la = self._input.LA(1)
                if not(_la==21 or _la==22):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1498
                    self.match(s_cypherParser.SP)


                self.state = 1501
                self.oC_ListOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyOrLabelsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyOrLabelsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyOrLabelsExpression" ):
                listener.enterOC_PropertyOrLabelsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyOrLabelsExpression" ):
                listener.exitOC_PropertyOrLabelsExpression(self)




    def oC_PropertyOrLabelsExpression(self):

        localctx = s_cypherParser.OC_PropertyOrLabelsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_PropertyOrLabelsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1504
            self.oC_Atom()
            self.state = 1511
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,271,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1506
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1505
                        self.match(s_cypherParser.SP)


                    self.state = 1508
                    self.oC_PropertyLookup() 
                self.state = 1513
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,271,self._ctx)

            self.state = 1518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.state = 1515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1514
                    self.match(s_cypherParser.SP)


                self.state = 1517
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = s_cypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1520
            self.match(s_cypherParser.T__0)
            self.state = 1522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1521
                self.match(s_cypherParser.SP)


            self.state = 1524
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternComprehensionContext,0)


        def oC_Quantifier(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QuantifierContext,0)


        def oC_PatternPredicate(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPredicateContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionInvocationContext,0)


        def oC_ExistentialSubquery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExistentialSubqueryContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = s_cypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 1550
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1526
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1527
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1528
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1529
                self.match(s_cypherParser.COUNT)
                self.state = 1531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1530
                    self.match(s_cypherParser.SP)


                self.state = 1533
                self.match(s_cypherParser.T__4)
                self.state = 1535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1534
                    self.match(s_cypherParser.SP)


                self.state = 1537
                self.match(s_cypherParser.T__13)
                self.state = 1539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1538
                    self.match(s_cypherParser.SP)


                self.state = 1541
                self.match(s_cypherParser.T__5)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1542
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1543
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1544
                self.oC_Quantifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1545
                self.oC_PatternPredicate()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1546
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1547
                self.oC_FunctionInvocation()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1548
                self.oC_ExistentialSubquery()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1549
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def oC_CaseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_CaseAlternativeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = s_cypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.state = 1552
                self.match(s_cypherParser.CASE)
                self.state = 1557 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1554
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1553
                            self.match(s_cypherParser.SP)


                        self.state = 1556
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1559 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,280,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1561
                self.match(s_cypherParser.CASE)
                self.state = 1563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1562
                    self.match(s_cypherParser.SP)


                self.state = 1565
                self.oC_Expression()
                self.state = 1570 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1567
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1566
                            self.match(s_cypherParser.SP)


                        self.state = 1569
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1572 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,283,self._ctx)

                pass


            self.state = 1584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.state = 1577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1576
                    self.match(s_cypherParser.SP)


                self.state = 1579
                self.match(s_cypherParser.ELSE)
                self.state = 1581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1580
                    self.match(s_cypherParser.SP)


                self.state = 1583
                self.oC_Expression()


            self.state = 1587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1586
                self.match(s_cypherParser.SP)


            self.state = 1589
            self.match(s_cypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternative" ):
                listener.enterOC_CaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternative" ):
                listener.exitOC_CaseAlternative(self)




    def oC_CaseAlternative(self):

        localctx = s_cypherParser.OC_CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_CaseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1591
            self.match(s_cypherParser.WHEN)
            self.state = 1593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1592
                self.match(s_cypherParser.SP)


            self.state = 1595
            self.oC_Expression()
            self.state = 1597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1596
                self.match(s_cypherParser.SP)


            self.state = 1599
            self.match(s_cypherParser.THEN)
            self.state = 1601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1600
                self.match(s_cypherParser.SP)


            self.state = 1603
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = s_cypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1605
            self.match(s_cypherParser.T__9)
            self.state = 1607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1606
                self.match(s_cypherParser.SP)


            self.state = 1609
            self.oC_FilterExpression()
            self.state = 1618
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.state = 1611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1610
                    self.match(s_cypherParser.SP)


                self.state = 1613
                self.match(s_cypherParser.T__14)
                self.state = 1615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1614
                    self.match(s_cypherParser.SP)


                self.state = 1617
                self.oC_Expression()


            self.state = 1621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1620
                self.match(s_cypherParser.SP)


            self.state = 1623
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = s_cypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1625
            self.match(s_cypherParser.T__9)
            self.state = 1627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1626
                self.match(s_cypherParser.SP)


            self.state = 1637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 1629
                self.oC_Variable()
                self.state = 1631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1630
                    self.match(s_cypherParser.SP)


                self.state = 1633
                self.match(s_cypherParser.T__1)
                self.state = 1635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1634
                    self.match(s_cypherParser.SP)




            self.state = 1639
            self.oC_RelationshipsPattern()
            self.state = 1641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1640
                self.match(s_cypherParser.SP)


            self.state = 1647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 1643
                self.oC_Where()
                self.state = 1645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1644
                    self.match(s_cypherParser.SP)




            self.state = 1649
            self.match(s_cypherParser.T__14)
            self.state = 1651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1650
                self.match(s_cypherParser.SP)


            self.state = 1653
            self.oC_Expression()
            self.state = 1655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1654
                self.match(s_cypherParser.SP)


            self.state = 1657
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Quantifier" ):
                listener.enterOC_Quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Quantifier" ):
                listener.exitOC_Quantifier(self)




    def oC_Quantifier(self):

        localctx = s_cypherParser.OC_QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_Quantifier)
        self._la = 0 # Token type
        try:
            self.state = 1715
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1659
                self.match(s_cypherParser.ALL)
                self.state = 1661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1660
                    self.match(s_cypherParser.SP)


                self.state = 1663
                self.match(s_cypherParser.T__4)
                self.state = 1665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1664
                    self.match(s_cypherParser.SP)


                self.state = 1667
                self.oC_FilterExpression()
                self.state = 1669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1668
                    self.match(s_cypherParser.SP)


                self.state = 1671
                self.match(s_cypherParser.T__5)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1673
                self.match(s_cypherParser.ANY)
                self.state = 1675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1674
                    self.match(s_cypherParser.SP)


                self.state = 1677
                self.match(s_cypherParser.T__4)
                self.state = 1679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1678
                    self.match(s_cypherParser.SP)


                self.state = 1681
                self.oC_FilterExpression()
                self.state = 1683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1682
                    self.match(s_cypherParser.SP)


                self.state = 1685
                self.match(s_cypherParser.T__5)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1687
                self.match(s_cypherParser.NONE)
                self.state = 1689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1688
                    self.match(s_cypherParser.SP)


                self.state = 1691
                self.match(s_cypherParser.T__4)
                self.state = 1693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1692
                    self.match(s_cypherParser.SP)


                self.state = 1695
                self.oC_FilterExpression()
                self.state = 1697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1696
                    self.match(s_cypherParser.SP)


                self.state = 1699
                self.match(s_cypherParser.T__5)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1701
                self.match(s_cypherParser.SINGLE)
                self.state = 1703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1702
                    self.match(s_cypherParser.SP)


                self.state = 1705
                self.match(s_cypherParser.T__4)
                self.state = 1707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1706
                    self.match(s_cypherParser.SP)


                self.state = 1709
                self.oC_FilterExpression()
                self.state = 1711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1710
                    self.match(s_cypherParser.SP)


                self.state = 1713
                self.match(s_cypherParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IdInCollContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = s_cypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1717
            self.oC_IdInColl()
            self.state = 1722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,320,self._ctx)
            if la_ == 1:
                self.state = 1719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1718
                    self.match(s_cypherParser.SP)


                self.state = 1721
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPredicate" ):
                listener.enterOC_PatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPredicate" ):
                listener.exitOC_PatternPredicate(self)




    def oC_PatternPredicate(self):

        localctx = s_cypherParser.OC_PatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_PatternPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1724
            self.oC_RelationshipsPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = s_cypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1726
            self.match(s_cypherParser.T__4)
            self.state = 1728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1727
                self.match(s_cypherParser.SP)


            self.state = 1730
            self.oC_Expression()
            self.state = 1732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1731
                self.match(s_cypherParser.SP)


            self.state = 1734
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = s_cypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1736
            self.oC_Variable()
            self.state = 1737
            self.match(s_cypherParser.SP)
            self.state = 1738
            self.match(s_cypherParser.IN)
            self.state = 1739
            self.match(s_cypherParser.SP)
            self.state = 1740
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = s_cypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1742
            self.oC_FunctionName()
            self.state = 1744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1743
                self.match(s_cypherParser.SP)


            self.state = 1746
            self.match(s_cypherParser.T__4)
            self.state = 1748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1747
                self.match(s_cypherParser.SP)


            self.state = 1754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 1750
                self.match(s_cypherParser.DISTINCT)
                self.state = 1752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1751
                    self.match(s_cypherParser.SP)




            self.state = 1773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1756
                self.oC_Expression()
                self.state = 1758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1757
                    self.match(s_cypherParser.SP)


                self.state = 1770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1760
                    self.match(s_cypherParser.T__3)
                    self.state = 1762
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1761
                        self.match(s_cypherParser.SP)


                    self.state = 1764
                    self.oC_Expression()
                    self.state = 1766
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1765
                        self.match(s_cypherParser.SP)


                    self.state = 1772
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1775
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = s_cypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_oC_FunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1777
            self.oC_Namespace()
            self.state = 1778
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExistentialSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExistentialSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExistentialSubquery" ):
                listener.enterOC_ExistentialSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExistentialSubquery" ):
                listener.exitOC_ExistentialSubquery(self)




    def oC_ExistentialSubquery(self):

        localctx = s_cypherParser.OC_ExistentialSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_oC_ExistentialSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1780
            self.match(s_cypherParser.EXISTS)
            self.state = 1782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1781
                self.match(s_cypherParser.SP)


            self.state = 1784
            self.match(s_cypherParser.T__6)
            self.state = 1786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1785
                self.match(s_cypherParser.SP)


            self.state = 1796
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 71, 72]:
                self.state = 1788
                self.oC_RegularQuery()
                pass
            elif token in [5, 48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 1789
                self.oC_Pattern()
                self.state = 1794
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
                if la_ == 1:
                    self.state = 1791
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1790
                        self.match(s_cypherParser.SP)


                    self.state = 1793
                    self.oC_Where()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1798
                self.match(s_cypherParser.SP)


            self.state = 1801
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1803
            self.oC_ProcedureName()
            self.state = 1805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1804
                self.match(s_cypherParser.SP)


            self.state = 1807
            self.match(s_cypherParser.T__4)
            self.state = 1809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1808
                self.match(s_cypherParser.SP)


            self.state = 1828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1811
                self.oC_Expression()
                self.state = 1813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1812
                    self.match(s_cypherParser.SP)


                self.state = 1825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1815
                    self.match(s_cypherParser.T__3)
                    self.state = 1817
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1816
                        self.match(s_cypherParser.SP)


                    self.state = 1819
                    self.oC_Expression()
                    self.state = 1821
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1820
                        self.match(s_cypherParser.SP)


                    self.state = 1827
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1830
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1832
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = s_cypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1834
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = s_cypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1836
            self.oC_Namespace()
            self.state = 1837
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = s_cypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1844
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,345,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1839
                    self.oC_SymbolicName()
                    self.state = 1840
                    self.match(s_cypherParser.T__0) 
                self.state = 1846
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,345,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = s_cypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1847
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_ListLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListLiteralContext,0)


        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = s_cypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_oC_Literal)
        try:
            self.state = 1855
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1849
                self.oC_BooleanLiteral()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1850
                self.match(s_cypherParser.NULL)
                pass
            elif token in [105, 106, 107, 115, 116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1851
                self.oC_NumberLiteral()
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1852
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1853
                self.oC_ListLiteral()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1854
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = s_cypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1857
            _la = self._input.LA(1)
            if not(_la==103 or _la==104):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = s_cypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_oC_NumberLiteral)
        try:
            self.state = 1861
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115, 116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1859
                self.oC_DoubleLiteral()
                pass
            elif token in [105, 106, 107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1860
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(s_cypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(s_cypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = s_cypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1863
            _la = self._input.LA(1)
            if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(s_cypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(s_cypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = s_cypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1865
            _la = self._input.LA(1)
            if not(_la==115 or _la==116):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = s_cypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1867
            self.match(s_cypherParser.T__9)
            self.state = 1869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1868
                self.match(s_cypherParser.SP)


            self.state = 1888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1871
                self.oC_Expression()
                self.state = 1873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1872
                    self.match(s_cypherParser.SP)


                self.state = 1885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1875
                    self.match(s_cypherParser.T__3)
                    self.state = 1877
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1876
                        self.match(s_cypherParser.SP)


                    self.state = 1879
                    self.oC_Expression()
                    self.state = 1881
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1880
                        self.match(s_cypherParser.SP)


                    self.state = 1887
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1890
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyKeyName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyKeyNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,i)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = s_cypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1892
            self.match(s_cypherParser.T__6)
            self.state = 1894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1893
                self.match(s_cypherParser.SP)


            self.state = 1929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 1896
                self.oC_PropertyKeyName()
                self.state = 1898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1897
                    self.match(s_cypherParser.SP)


                self.state = 1900
                self.match(s_cypherParser.T__7)
                self.state = 1902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1901
                    self.match(s_cypherParser.SP)


                self.state = 1904
                self.oC_Expression()
                self.state = 1906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1905
                    self.match(s_cypherParser.SP)


                self.state = 1926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1908
                    self.match(s_cypherParser.T__3)
                    self.state = 1910
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1909
                        self.match(s_cypherParser.SP)


                    self.state = 1912
                    self.oC_PropertyKeyName()
                    self.state = 1914
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1913
                        self.match(s_cypherParser.SP)


                    self.state = 1916
                    self.match(s_cypherParser.T__7)
                    self.state = 1918
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1917
                        self.match(s_cypherParser.SP)


                    self.state = 1920
                    self.oC_Expression()
                    self.state = 1922
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1921
                        self.match(s_cypherParser.SP)


                    self.state = 1928
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1931
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = s_cypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1933
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = s_cypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1935
            self.match(s_cypherParser.T__25)
            self.state = 1938
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 1936
                self.oC_SymbolicName()
                pass
            elif token in [106]:
                self.state = 1937
                self.match(s_cypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = s_cypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_oC_SchemaName)
        try:
            self.state = 1942
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1940
                self.oC_SymbolicName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1941
                self.oC_ReservedWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = s_cypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1944
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2013396992) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = s_cypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1946
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32212516864) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = s_cypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1948
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70334388633600) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





