# Generated from s_cypher.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,137,2344,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,1,0,1,0,1,0,3,0,340,8,
        0,1,1,1,1,3,1,344,8,1,1,1,1,1,3,1,348,8,1,1,1,1,1,3,1,352,8,1,1,
        1,1,1,3,1,356,8,1,3,1,358,8,1,1,1,3,1,361,8,1,1,1,3,1,364,8,1,1,
        2,1,2,1,2,1,2,1,2,3,2,371,8,2,1,2,3,2,374,8,2,1,2,3,2,377,8,2,1,
        2,1,2,3,2,381,8,2,1,2,1,2,3,2,385,8,2,3,2,387,8,2,3,2,389,8,2,1,
        3,1,3,3,3,393,8,3,1,3,1,3,1,3,1,3,3,3,399,8,3,1,3,3,3,402,8,3,1,
        3,1,3,1,3,1,3,1,3,3,3,409,8,3,1,3,3,3,412,8,3,1,3,1,3,1,3,3,3,417,
        8,3,1,3,1,3,1,3,1,3,3,3,423,8,3,1,3,3,3,426,8,3,1,3,1,3,1,3,3,3,
        431,8,3,1,3,1,3,3,3,435,8,3,1,3,1,3,1,3,1,3,3,3,441,8,3,1,3,1,3,
        3,3,445,8,3,1,3,1,3,1,3,1,3,3,3,451,8,3,1,3,1,3,3,3,455,8,3,1,3,
        1,3,1,3,1,3,3,3,461,8,3,1,3,1,3,3,3,465,8,3,1,3,1,3,1,3,1,3,3,3,
        471,8,3,1,3,1,3,3,3,475,8,3,1,4,1,4,3,4,479,8,4,1,4,1,4,1,5,1,5,
        3,5,485,8,5,1,5,3,5,488,8,5,1,6,1,6,3,6,492,8,6,1,6,1,6,1,7,1,7,
        3,7,498,8,7,1,7,3,7,501,8,7,1,8,1,8,3,8,505,8,8,1,8,1,8,3,8,509,
        8,8,1,8,1,8,3,8,513,8,8,1,8,5,8,516,8,8,10,8,12,8,519,9,8,1,9,1,
        9,1,9,1,9,3,9,525,8,9,1,9,1,9,1,9,3,9,530,8,9,1,10,1,10,3,10,534,
        8,10,1,10,1,10,3,10,538,8,10,1,10,1,10,3,10,542,8,10,1,10,1,10,3,
        10,546,8,10,1,10,5,10,549,8,10,10,10,12,10,552,9,10,1,11,1,11,1,
        11,1,11,3,11,558,8,11,1,11,1,11,1,11,3,11,563,8,11,1,12,1,12,3,12,
        567,8,12,1,12,1,12,1,13,1,13,3,13,573,8,13,1,13,1,13,1,14,1,14,3,
        14,579,8,14,1,15,1,15,1,15,1,15,3,15,585,8,15,1,15,1,15,1,15,3,15,
        590,8,15,1,16,1,16,1,16,1,16,3,16,596,8,16,1,16,3,16,599,8,16,1,
        16,1,16,1,16,1,16,3,16,605,8,16,3,16,607,8,16,1,17,1,17,3,17,611,
        8,17,1,17,1,17,3,17,615,8,17,1,17,5,17,618,8,17,10,17,12,17,621,
        9,17,1,17,3,17,624,8,17,1,17,3,17,627,8,17,1,18,1,18,1,18,1,18,1,
        18,3,18,634,8,18,1,19,1,19,3,19,638,8,19,5,19,640,8,19,10,19,12,
        19,643,9,19,1,19,1,19,3,19,647,8,19,5,19,649,8,19,10,19,12,19,652,
        9,19,1,19,1,19,3,19,656,8,19,1,20,1,20,1,20,3,20,661,8,20,1,20,3,
        20,664,8,20,1,21,1,21,3,21,668,8,21,1,21,1,21,3,21,672,8,21,1,21,
        1,21,1,21,3,21,677,8,21,1,21,3,21,680,8,21,3,21,682,8,21,1,21,3,
        21,685,8,21,1,21,1,21,1,22,1,22,3,22,691,8,22,1,22,3,22,694,8,22,
        1,23,1,23,3,23,698,8,23,1,23,1,23,1,24,1,24,3,24,704,8,24,1,24,1,
        24,1,25,1,25,3,25,710,8,25,1,25,1,25,3,25,714,8,25,1,25,1,25,1,25,
        1,25,3,25,720,8,25,1,25,1,25,3,25,724,8,25,1,25,1,25,1,25,3,25,729,
        8,25,1,26,1,26,3,26,733,8,26,1,26,1,26,3,26,737,8,26,1,26,1,26,3,
        26,741,8,26,1,26,1,26,1,27,1,27,3,27,747,8,27,1,27,1,27,3,27,751,
        8,27,1,27,1,27,1,28,1,28,3,28,757,8,28,1,28,1,28,3,28,761,8,28,3,
        28,763,8,28,1,28,1,28,3,28,767,8,28,3,28,769,8,28,1,28,1,28,3,28,
        773,8,28,3,28,775,8,28,1,28,1,28,3,28,779,8,28,3,28,781,8,28,1,28,
        1,28,1,29,1,29,3,29,787,8,29,1,30,1,30,3,30,791,8,30,1,30,1,30,1,
        30,1,30,1,30,3,30,798,8,30,1,30,1,30,1,30,1,30,5,30,804,8,30,10,
        30,12,30,807,9,30,3,30,809,8,30,1,30,1,30,1,31,1,31,3,31,815,8,31,
        1,31,1,31,3,31,819,8,31,3,31,821,8,31,1,32,3,32,824,8,32,1,32,1,
        32,3,32,828,8,32,1,32,1,32,3,32,832,8,32,3,32,834,8,32,1,33,1,33,
        3,33,838,8,33,1,33,1,33,3,33,842,8,33,3,33,844,8,33,1,33,1,33,3,
        33,848,8,33,3,33,850,8,33,1,33,3,33,853,8,33,1,33,1,33,3,33,857,
        8,33,3,33,859,8,33,1,33,1,33,3,33,863,8,33,3,33,865,8,33,1,33,1,
        33,1,34,1,34,1,34,1,34,1,34,3,34,874,8,34,1,35,1,35,3,35,878,8,35,
        1,35,1,35,5,35,882,8,35,10,35,12,35,885,9,35,1,36,3,36,888,8,36,
        1,36,1,36,1,36,1,36,1,37,3,37,895,8,37,1,37,1,37,3,37,899,8,37,1,
        37,1,37,3,37,903,8,37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,3,
        40,913,8,40,1,40,4,40,916,8,40,11,40,12,40,917,1,40,3,40,921,8,40,
        1,40,3,40,924,8,40,3,40,926,8,40,1,40,3,40,929,8,40,1,40,1,40,1,
        41,1,41,3,41,935,8,41,1,41,5,41,938,8,41,10,41,12,41,941,9,41,1,
        42,1,42,3,42,945,8,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,1,
        44,3,44,956,8,44,1,44,1,44,3,44,960,8,44,1,44,1,44,3,44,964,8,44,
        1,44,1,44,3,44,968,8,44,1,44,1,44,3,44,972,8,44,1,44,3,44,975,8,
        44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,47,1,
        47,5,47,990,8,47,10,47,12,47,993,9,47,1,48,1,48,1,48,1,48,1,48,5,
        48,1000,8,48,10,48,12,48,1003,9,48,1,49,1,49,1,49,1,49,1,49,5,49,
        1010,8,49,10,49,12,49,1013,9,49,1,50,1,50,3,50,1017,8,50,5,50,1019,
        8,50,10,50,12,50,1022,9,50,1,50,1,50,1,51,1,51,3,51,1028,8,51,1,
        51,1,51,3,51,1032,8,51,1,51,1,51,5,51,1036,8,51,10,51,12,51,1039,
        9,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,1,56,
        1,56,3,56,1054,8,56,1,57,1,57,3,57,1058,8,57,1,57,1,57,3,57,1062,
        8,57,1,57,1,57,1,57,3,57,1067,8,57,1,57,1,57,3,57,1071,8,57,1,57,
        1,57,5,57,1075,8,57,10,57,12,57,1078,9,57,1,58,1,58,1,58,1,58,1,
        58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1095,8,
        59,1,59,3,59,1098,8,59,1,59,1,59,1,60,1,60,1,60,3,60,1105,8,60,1,
        60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,1119,
        8,61,1,62,1,62,3,62,1123,8,62,1,62,1,62,3,62,1127,8,62,1,62,1,62,
        1,62,3,62,1132,8,62,1,62,1,62,3,62,1136,8,62,1,62,1,62,1,62,3,62,
        1141,8,62,1,62,1,62,3,62,1145,8,62,1,62,1,62,5,62,1149,8,62,10,62,
        12,62,1152,9,62,1,63,1,63,3,63,1156,8,63,1,63,1,63,3,63,1160,8,63,
        1,63,1,63,5,63,1164,8,63,10,63,12,63,1167,9,63,1,64,1,64,1,64,3,
        64,1172,8,64,1,64,3,64,1175,8,64,1,65,1,65,3,65,1179,8,65,1,65,1,
        65,5,65,1183,8,65,10,65,12,65,1186,9,65,1,66,1,66,3,66,1190,8,66,
        1,66,5,66,1193,8,66,10,66,12,66,1196,9,66,1,66,3,66,1199,8,66,1,
        66,3,66,1202,8,66,1,67,1,67,3,67,1206,8,67,1,67,4,67,1209,8,67,11,
        67,12,67,1210,1,67,3,67,1214,8,67,1,67,3,67,1217,8,67,3,67,1219,
        8,67,1,67,3,67,1222,8,67,1,67,1,67,1,68,3,68,1227,8,68,1,68,1,68,
        1,68,1,68,1,69,3,69,1234,8,69,1,69,1,69,3,69,1238,8,69,1,69,1,69,
        3,69,1242,8,69,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,3,72,1252,
        8,72,1,73,1,73,1,74,1,74,1,75,3,75,1259,8,75,1,75,1,75,3,75,1263,
        8,75,1,75,3,75,1266,8,75,1,75,3,75,1269,8,75,1,75,1,75,1,76,1,76,
        1,77,1,77,3,77,1277,8,77,1,77,5,77,1280,8,77,10,77,12,77,1283,9,
        77,1,78,1,78,1,78,1,78,3,78,1289,8,78,1,78,1,78,1,78,3,78,1294,8,
        78,1,78,3,78,1297,8,78,1,79,1,79,3,79,1301,8,79,1,80,1,80,3,80,1305,
        8,80,5,80,1307,8,80,10,80,12,80,1310,9,80,1,80,1,80,1,80,3,80,1315,
        8,80,5,80,1317,8,80,10,80,12,80,1320,9,80,1,80,1,80,3,80,1324,8,
        80,1,80,5,80,1327,8,80,10,80,12,80,1330,9,80,1,80,3,80,1333,8,80,
        1,80,3,80,1336,8,80,3,80,1338,8,80,1,81,4,81,1341,8,81,11,81,12,
        81,1342,1,81,1,81,1,82,1,82,1,82,3,82,1350,8,82,1,83,1,83,3,83,1354,
        8,83,1,83,1,83,1,83,1,83,1,83,1,83,1,84,1,84,3,84,1364,8,84,1,84,
        1,84,1,84,5,84,1369,8,84,10,84,12,84,1372,9,84,1,85,1,85,1,85,1,
        85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1384,8,85,1,86,1,86,3,86,1388,
        8,86,1,86,1,86,1,87,1,87,3,87,1394,8,87,1,87,1,87,3,87,1398,8,87,
        1,87,1,87,3,87,1402,8,87,1,87,5,87,1405,8,87,10,87,12,87,1408,9,
        87,1,88,1,88,1,88,1,88,3,88,1414,8,88,1,88,1,88,3,88,1418,8,88,1,
        88,5,88,1421,8,88,10,88,12,88,1424,9,88,1,89,1,89,1,89,1,89,3,89,
        1430,8,89,1,90,1,90,3,90,1434,8,90,1,90,1,90,3,90,1438,8,90,1,90,
        5,90,1441,8,90,10,90,12,90,1444,9,90,1,90,3,90,1447,8,90,1,90,3,
        90,1450,8,90,1,91,1,91,1,91,1,91,1,91,3,91,1457,8,91,1,92,1,92,1,
        92,3,92,1462,8,92,1,92,3,92,1465,8,92,1,93,1,93,1,93,1,94,3,94,1471,
        8,94,1,94,3,94,1474,8,94,1,94,1,94,1,94,1,94,3,94,1480,8,94,1,94,
        1,94,3,94,1484,8,94,1,94,1,94,3,94,1488,8,94,1,95,1,95,3,95,1492,
        8,95,1,95,1,95,3,95,1496,8,95,1,95,5,95,1499,8,95,10,95,12,95,1502,
        9,95,1,95,1,95,3,95,1506,8,95,1,95,1,95,3,95,1510,8,95,1,95,5,95,
        1513,8,95,10,95,12,95,1516,9,95,3,95,1518,8,95,1,96,1,96,1,96,1,
        96,1,96,1,96,1,96,3,96,1527,8,96,1,97,1,97,1,97,1,97,1,97,1,97,1,
        97,3,97,1536,8,97,1,97,5,97,1539,8,97,10,97,12,97,1542,9,97,1,98,
        1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,100,1,100,3,100,1554,8,100,
        1,100,3,100,1557,8,100,1,101,1,101,1,101,1,101,1,102,1,102,3,102,
        1565,8,102,1,102,1,102,3,102,1569,8,102,1,102,5,102,1572,8,102,10,
        102,12,102,1575,9,102,1,103,1,103,1,104,1,104,3,104,1581,8,104,1,
        104,5,104,1584,8,104,10,104,12,104,1587,9,104,1,104,1,104,1,104,
        1,104,3,104,1593,8,104,1,105,1,105,3,105,1597,8,105,1,105,4,105,
        1600,8,105,11,105,12,105,1601,1,106,1,106,3,106,1606,8,106,1,106,
        1,106,1,107,1,107,3,107,1612,8,107,1,107,1,107,3,107,1616,8,107,
        1,107,3,107,1619,8,107,1,107,3,107,1622,8,107,1,107,1,107,3,107,
        1626,8,107,1,107,1,107,1,107,1,107,3,107,1632,8,107,1,107,1,107,
        3,107,1636,8,107,1,107,3,107,1639,8,107,1,107,3,107,1642,8,107,1,
        107,1,107,1,107,1,107,3,107,1648,8,107,1,107,3,107,1651,8,107,1,
        107,3,107,1654,8,107,1,107,1,107,3,107,1658,8,107,1,107,1,107,1,
        107,1,107,3,107,1664,8,107,1,107,3,107,1667,8,107,1,107,3,107,1670,
        8,107,1,107,1,107,3,107,1674,8,107,1,108,1,108,3,108,1678,8,108,
        1,109,1,109,3,109,1682,8,109,1,109,1,109,3,109,1686,8,109,1,109,
        1,109,3,109,1690,8,109,1,109,3,109,1693,8,109,1,109,5,109,1696,8,
        109,10,109,12,109,1699,9,109,1,110,1,110,3,110,1703,8,110,1,110,
        5,110,1706,8,110,10,110,12,110,1709,9,110,1,111,1,111,3,111,1713,
        8,111,1,111,1,111,1,112,1,112,3,112,1719,8,112,1,112,1,112,3,112,
        1723,8,112,3,112,1725,8,112,1,112,1,112,3,112,1729,8,112,1,112,1,
        112,3,112,1733,8,112,3,112,1735,8,112,3,112,1737,8,112,1,113,1,113,
        1,114,1,114,1,115,1,115,3,115,1745,8,115,1,115,4,115,1748,8,115,
        11,115,12,115,1749,1,116,1,116,1,117,1,117,1,117,1,117,1,117,5,117,
        1759,8,117,10,117,12,117,1762,9,117,1,118,1,118,1,118,1,118,1,118,
        5,118,1769,8,118,10,118,12,118,1772,9,118,1,119,1,119,1,119,1,119,
        1,119,5,119,1779,8,119,10,119,12,119,1782,9,119,1,120,1,120,3,120,
        1786,8,120,5,120,1788,8,120,10,120,12,120,1791,9,120,1,120,1,120,
        1,121,1,121,3,121,1797,8,121,1,121,1,121,3,121,1801,8,121,1,121,
        1,121,5,121,1805,8,121,10,121,12,121,1808,9,121,1,122,1,122,1,122,
        1,122,1,122,1,122,1,122,1,122,1,122,1,122,3,122,1820,8,122,1,122,
        3,122,1823,8,122,1,122,1,122,1,123,1,123,1,123,3,123,1830,8,123,
        1,123,1,123,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
        1,124,3,124,1844,8,124,1,125,1,125,3,125,1848,8,125,1,125,1,125,
        3,125,1852,8,125,1,125,1,125,1,125,3,125,1857,8,125,1,125,1,125,
        3,125,1861,8,125,1,125,1,125,5,125,1865,8,125,10,125,12,125,1868,
        9,125,1,126,1,126,1,127,1,127,1,128,1,128,1,129,1,129,1,130,1,130,
        3,130,1880,8,130,1,130,1,130,3,130,1884,8,130,1,130,1,130,1,130,
        3,130,1889,8,130,1,130,1,130,3,130,1893,8,130,1,130,1,130,1,130,
        3,130,1898,8,130,1,130,1,130,3,130,1902,8,130,1,130,1,130,5,130,
        1906,8,130,10,130,12,130,1909,9,130,1,131,1,131,3,131,1913,8,131,
        1,131,1,131,3,131,1917,8,131,1,131,1,131,5,131,1921,8,131,10,131,
        12,131,1924,9,131,1,132,1,132,1,132,3,132,1929,8,132,1,132,3,132,
        1932,8,132,1,133,1,133,3,133,1936,8,133,1,133,5,133,1939,8,133,10,
        133,12,133,1942,9,133,1,133,3,133,1945,8,133,1,133,3,133,1948,8,
        133,1,134,1,134,3,134,1952,8,134,1,134,1,134,1,135,1,135,1,135,1,
        135,1,135,3,135,1961,8,135,1,135,1,135,3,135,1965,8,135,1,135,1,
        135,3,135,1969,8,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,
        135,1,135,3,135,1980,8,135,1,136,1,136,3,136,1984,8,136,1,136,4,
        136,1987,8,136,11,136,12,136,1988,1,136,1,136,3,136,1993,8,136,1,
        136,1,136,3,136,1997,8,136,1,136,4,136,2000,8,136,11,136,12,136,
        2001,3,136,2004,8,136,1,136,3,136,2007,8,136,1,136,1,136,3,136,2011,
        8,136,1,136,3,136,2014,8,136,1,136,3,136,2017,8,136,1,136,1,136,
        1,137,1,137,3,137,2023,8,137,1,137,1,137,3,137,2027,8,137,1,137,
        1,137,3,137,2031,8,137,1,137,1,137,1,138,1,138,3,138,2037,8,138,
        1,138,1,138,3,138,2041,8,138,1,138,1,138,3,138,2045,8,138,1,138,
        3,138,2048,8,138,1,138,3,138,2051,8,138,1,138,1,138,1,139,1,139,
        3,139,2057,8,139,1,139,1,139,3,139,2061,8,139,1,139,1,139,3,139,
        2065,8,139,3,139,2067,8,139,1,139,1,139,3,139,2071,8,139,1,139,1,
        139,3,139,2075,8,139,3,139,2077,8,139,1,139,1,139,3,139,2081,8,139,
        1,139,1,139,3,139,2085,8,139,1,139,1,139,1,140,1,140,3,140,2091,
        8,140,1,140,1,140,3,140,2095,8,140,1,140,1,140,3,140,2099,8,140,
        1,140,1,140,1,140,1,140,3,140,2105,8,140,1,140,1,140,3,140,2109,
        8,140,1,140,1,140,3,140,2113,8,140,1,140,1,140,1,140,1,140,3,140,
        2119,8,140,1,140,1,140,3,140,2123,8,140,1,140,1,140,3,140,2127,8,
        140,1,140,1,140,1,140,1,140,3,140,2133,8,140,1,140,1,140,3,140,2137,
        8,140,1,140,1,140,3,140,2141,8,140,1,140,1,140,3,140,2145,8,140,
        1,141,1,141,1,142,1,142,3,142,2151,8,142,1,142,1,142,3,142,2155,
        8,142,1,142,1,142,1,143,1,143,1,143,1,143,1,143,1,143,1,144,1,144,
        3,144,2167,8,144,1,144,1,144,3,144,2171,8,144,1,144,1,144,3,144,
        2175,8,144,3,144,2177,8,144,1,144,1,144,3,144,2181,8,144,1,144,1,
        144,3,144,2185,8,144,1,144,1,144,3,144,2189,8,144,5,144,2191,8,144,
        10,144,12,144,2194,9,144,3,144,2196,8,144,1,144,1,144,1,145,1,145,
        1,146,1,146,1,146,1,147,1,147,3,147,2207,8,147,1,147,1,147,3,147,
        2211,8,147,1,147,1,147,3,147,2215,8,147,1,147,1,147,3,147,2219,8,
        147,1,147,1,147,3,147,2223,8,147,5,147,2225,8,147,10,147,12,147,
        2228,9,147,3,147,2230,8,147,1,147,1,147,1,148,1,148,1,149,1,149,
        1,150,1,150,1,150,1,151,1,151,1,151,5,151,2244,8,151,10,151,12,151,
        2247,9,151,1,152,1,152,1,153,1,153,1,153,1,153,1,153,1,153,3,153,
        2257,8,153,1,154,1,154,1,155,1,155,3,155,2263,8,155,1,156,1,156,
        1,157,1,157,1,158,1,158,3,158,2271,8,158,1,158,1,158,3,158,2275,
        8,158,1,158,1,158,3,158,2279,8,158,1,158,1,158,3,158,2283,8,158,
        5,158,2285,8,158,10,158,12,158,2288,9,158,3,158,2290,8,158,1,158,
        1,158,1,159,1,159,1,160,1,160,3,160,2298,8,160,1,160,1,160,1,160,
        3,160,2303,8,160,1,160,5,160,2306,8,160,10,160,12,160,2309,9,160,
        3,160,2311,8,160,1,160,1,160,1,161,1,161,3,161,2317,8,161,1,161,
        1,161,3,161,2321,8,161,1,161,1,161,3,161,2325,8,161,1,162,1,162,
        1,163,1,163,1,163,3,163,2332,8,163,1,164,1,164,3,164,2336,8,164,
        1,165,1,165,1,166,1,166,1,167,1,167,1,167,0,0,168,0,2,4,6,8,10,12,
        14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
        58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
        166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
        198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,
        230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,
        262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,
        294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,
        326,328,330,332,334,0,13,1,0,54,55,2,0,5,5,14,15,1,0,17,18,2,0,2,
        2,19,23,6,0,48,48,93,93,99,101,108,108,129,131,134,134,5,0,48,68,
        71,92,94,98,102,104,119,128,1,0,78,81,1,0,103,104,1,0,105,107,1,
        0,115,116,2,0,20,20,27,30,2,0,22,22,31,34,2,0,18,18,35,45,2632,0,
        339,1,0,0,0,2,343,1,0,0,0,4,388,1,0,0,0,6,474,1,0,0,0,8,476,1,0,
        0,0,10,482,1,0,0,0,12,489,1,0,0,0,14,495,1,0,0,0,16,502,1,0,0,0,
        18,529,1,0,0,0,20,533,1,0,0,0,22,562,1,0,0,0,24,564,1,0,0,0,26,570,
        1,0,0,0,28,578,1,0,0,0,30,580,1,0,0,0,32,591,1,0,0,0,34,608,1,0,
        0,0,36,628,1,0,0,0,38,641,1,0,0,0,40,657,1,0,0,0,42,665,1,0,0,0,
        44,688,1,0,0,0,46,695,1,0,0,0,48,701,1,0,0,0,50,728,1,0,0,0,52,730,
        1,0,0,0,54,744,1,0,0,0,56,754,1,0,0,0,58,786,1,0,0,0,60,788,1,0,
        0,0,62,812,1,0,0,0,64,823,1,0,0,0,66,835,1,0,0,0,68,868,1,0,0,0,
        70,877,1,0,0,0,72,887,1,0,0,0,74,894,1,0,0,0,76,906,1,0,0,0,78,908,
        1,0,0,0,80,910,1,0,0,0,82,932,1,0,0,0,84,942,1,0,0,0,86,948,1,0,
        0,0,88,953,1,0,0,0,90,978,1,0,0,0,92,982,1,0,0,0,94,984,1,0,0,0,
        96,994,1,0,0,0,98,1004,1,0,0,0,100,1020,1,0,0,0,102,1025,1,0,0,0,
        104,1040,1,0,0,0,106,1042,1,0,0,0,108,1044,1,0,0,0,110,1046,1,0,
        0,0,112,1048,1,0,0,0,114,1055,1,0,0,0,116,1079,1,0,0,0,118,1094,
        1,0,0,0,120,1101,1,0,0,0,122,1118,1,0,0,0,124,1120,1,0,0,0,126,1153,
        1,0,0,0,128,1174,1,0,0,0,130,1178,1,0,0,0,132,1187,1,0,0,0,134,1203,
        1,0,0,0,136,1226,1,0,0,0,138,1233,1,0,0,0,140,1245,1,0,0,0,142,1247,
        1,0,0,0,144,1251,1,0,0,0,146,1253,1,0,0,0,148,1255,1,0,0,0,150,1258,
        1,0,0,0,152,1272,1,0,0,0,154,1274,1,0,0,0,156,1296,1,0,0,0,158,1300,
        1,0,0,0,160,1337,1,0,0,0,162,1340,1,0,0,0,164,1349,1,0,0,0,166,1351,
        1,0,0,0,168,1361,1,0,0,0,170,1383,1,0,0,0,172,1385,1,0,0,0,174,1391,
        1,0,0,0,176,1409,1,0,0,0,178,1429,1,0,0,0,180,1431,1,0,0,0,182,1451,
        1,0,0,0,184,1458,1,0,0,0,186,1466,1,0,0,0,188,1473,1,0,0,0,190,1517,
        1,0,0,0,192,1526,1,0,0,0,194,1528,1,0,0,0,196,1543,1,0,0,0,198,1547,
        1,0,0,0,200,1551,1,0,0,0,202,1558,1,0,0,0,204,1562,1,0,0,0,206,1576,
        1,0,0,0,208,1592,1,0,0,0,210,1594,1,0,0,0,212,1603,1,0,0,0,214,1673,
        1,0,0,0,216,1677,1,0,0,0,218,1679,1,0,0,0,220,1700,1,0,0,0,222,1710,
        1,0,0,0,224,1716,1,0,0,0,226,1738,1,0,0,0,228,1740,1,0,0,0,230,1742,
        1,0,0,0,232,1751,1,0,0,0,234,1753,1,0,0,0,236,1763,1,0,0,0,238,1773,
        1,0,0,0,240,1789,1,0,0,0,242,1794,1,0,0,0,244,1819,1,0,0,0,246,1826,
        1,0,0,0,248,1843,1,0,0,0,250,1845,1,0,0,0,252,1869,1,0,0,0,254,1871,
        1,0,0,0,256,1873,1,0,0,0,258,1875,1,0,0,0,260,1877,1,0,0,0,262,1910,
        1,0,0,0,264,1931,1,0,0,0,266,1933,1,0,0,0,268,1949,1,0,0,0,270,1979,
        1,0,0,0,272,2003,1,0,0,0,274,2020,1,0,0,0,276,2034,1,0,0,0,278,2054,
        1,0,0,0,280,2144,1,0,0,0,282,2146,1,0,0,0,284,2148,1,0,0,0,286,2158,
        1,0,0,0,288,2164,1,0,0,0,290,2199,1,0,0,0,292,2201,1,0,0,0,294,2204,
        1,0,0,0,296,2233,1,0,0,0,298,2235,1,0,0,0,300,2237,1,0,0,0,302,2245,
        1,0,0,0,304,2248,1,0,0,0,306,2256,1,0,0,0,308,2258,1,0,0,0,310,2262,
        1,0,0,0,312,2264,1,0,0,0,314,2266,1,0,0,0,316,2268,1,0,0,0,318,2293,
        1,0,0,0,320,2295,1,0,0,0,322,2314,1,0,0,0,324,2326,1,0,0,0,326,2328,
        1,0,0,0,328,2335,1,0,0,0,330,2337,1,0,0,0,332,2339,1,0,0,0,334,2341,
        1,0,0,0,336,340,3,154,77,0,337,340,3,32,16,0,338,340,3,28,14,0,339,
        336,1,0,0,0,339,337,1,0,0,0,339,338,1,0,0,0,340,1,1,0,0,0,341,342,
        5,58,0,0,342,344,5,135,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,345,
        1,0,0,0,345,347,5,59,0,0,346,348,5,135,0,0,347,346,1,0,0,0,347,348,
        1,0,0,0,348,349,1,0,0,0,349,357,3,204,102,0,350,352,5,135,0,0,351,
        350,1,0,0,0,351,352,1,0,0,0,352,355,1,0,0,0,353,356,3,24,12,0,354,
        356,3,26,13,0,355,353,1,0,0,0,355,354,1,0,0,0,356,358,1,0,0,0,357,
        351,1,0,0,0,357,358,1,0,0,0,358,363,1,0,0,0,359,361,5,135,0,0,360,
        359,1,0,0,0,360,361,1,0,0,0,361,362,1,0,0,0,362,364,3,90,45,0,363,
        360,1,0,0,0,363,364,1,0,0,0,364,3,1,0,0,0,365,371,3,172,86,0,366,
        371,3,168,84,0,367,371,3,174,87,0,368,371,3,176,88,0,369,371,3,16,
        8,0,370,365,1,0,0,0,370,366,1,0,0,0,370,367,1,0,0,0,370,368,1,0,
        0,0,370,369,1,0,0,0,371,376,1,0,0,0,372,374,5,135,0,0,373,372,1,
        0,0,0,373,374,1,0,0,0,374,375,1,0,0,0,375,377,3,24,12,0,376,373,
        1,0,0,0,376,377,1,0,0,0,377,389,1,0,0,0,378,386,3,20,10,0,379,381,
        5,135,0,0,380,379,1,0,0,0,380,381,1,0,0,0,381,384,1,0,0,0,382,385,
        3,24,12,0,383,385,3,26,13,0,384,382,1,0,0,0,384,383,1,0,0,0,385,
        387,1,0,0,0,386,380,1,0,0,0,386,387,1,0,0,0,387,389,1,0,0,0,388,
        370,1,0,0,0,388,378,1,0,0,0,389,5,1,0,0,0,390,392,3,304,152,0,391,
        393,5,135,0,0,392,391,1,0,0,0,392,393,1,0,0,0,393,394,1,0,0,0,394,
        395,3,88,44,0,395,475,1,0,0,0,396,401,3,304,152,0,397,399,5,135,
        0,0,398,397,1,0,0,0,398,399,1,0,0,0,399,400,1,0,0,0,400,402,3,88,
        44,0,401,398,1,0,0,0,401,402,1,0,0,0,402,403,1,0,0,0,403,404,5,1,
        0,0,404,405,3,8,4,0,405,475,1,0,0,0,406,411,3,304,152,0,407,409,
        5,135,0,0,408,407,1,0,0,0,408,409,1,0,0,0,409,410,1,0,0,0,410,412,
        3,88,44,0,411,408,1,0,0,0,411,412,1,0,0,0,412,413,1,0,0,0,413,414,
        5,1,0,0,414,416,3,10,5,0,415,417,5,135,0,0,416,415,1,0,0,0,416,417,
        1,0,0,0,417,418,1,0,0,0,418,419,3,12,6,0,419,475,1,0,0,0,420,425,
        3,304,152,0,421,423,5,135,0,0,422,421,1,0,0,0,422,423,1,0,0,0,423,
        424,1,0,0,0,424,426,3,88,44,0,425,422,1,0,0,0,425,426,1,0,0,0,426,
        427,1,0,0,0,427,428,5,1,0,0,428,430,3,10,5,0,429,431,5,135,0,0,430,
        429,1,0,0,0,430,431,1,0,0,0,431,432,1,0,0,0,432,434,5,2,0,0,433,
        435,5,135,0,0,434,433,1,0,0,0,434,435,1,0,0,0,435,436,1,0,0,0,436,
        437,3,14,7,0,437,475,1,0,0,0,438,440,3,230,115,0,439,441,5,135,0,
        0,440,439,1,0,0,0,440,441,1,0,0,0,441,442,1,0,0,0,442,444,5,2,0,
        0,443,445,5,135,0,0,444,443,1,0,0,0,444,445,1,0,0,0,445,446,1,0,
        0,0,446,447,3,232,116,0,447,475,1,0,0,0,448,450,3,304,152,0,449,
        451,5,135,0,0,450,449,1,0,0,0,450,451,1,0,0,0,451,452,1,0,0,0,452,
        454,5,2,0,0,453,455,5,135,0,0,454,453,1,0,0,0,454,455,1,0,0,0,455,
        456,1,0,0,0,456,457,3,232,116,0,457,475,1,0,0,0,458,460,3,304,152,
        0,459,461,5,135,0,0,460,459,1,0,0,0,460,461,1,0,0,0,461,462,1,0,
        0,0,462,464,5,3,0,0,463,465,5,135,0,0,464,463,1,0,0,0,464,465,1,
        0,0,0,465,466,1,0,0,0,466,467,3,232,116,0,467,475,1,0,0,0,468,470,
        3,304,152,0,469,471,5,135,0,0,470,469,1,0,0,0,470,471,1,0,0,0,471,
        472,1,0,0,0,472,473,3,220,110,0,473,475,1,0,0,0,474,390,1,0,0,0,
        474,396,1,0,0,0,474,406,1,0,0,0,474,420,1,0,0,0,474,438,1,0,0,0,
        474,448,1,0,0,0,474,458,1,0,0,0,474,468,1,0,0,0,475,7,1,0,0,0,476,
        478,3,324,162,0,477,479,5,135,0,0,478,477,1,0,0,0,478,479,1,0,0,
        0,479,480,1,0,0,0,480,481,3,88,44,0,481,9,1,0,0,0,482,487,3,324,
        162,0,483,485,5,135,0,0,484,483,1,0,0,0,484,485,1,0,0,0,485,486,
        1,0,0,0,486,488,3,88,44,0,487,484,1,0,0,0,487,488,1,0,0,0,488,11,
        1,0,0,0,489,491,5,47,0,0,490,492,5,135,0,0,491,490,1,0,0,0,491,492,
        1,0,0,0,492,493,1,0,0,0,493,494,3,88,44,0,494,13,1,0,0,0,495,500,
        3,232,116,0,496,498,5,135,0,0,497,496,1,0,0,0,497,498,1,0,0,0,498,
        499,1,0,0,0,499,501,3,88,44,0,500,497,1,0,0,0,500,501,1,0,0,0,501,
        15,1,0,0,0,502,504,5,53,0,0,503,505,5,135,0,0,504,503,1,0,0,0,504,
        505,1,0,0,0,505,506,1,0,0,0,506,517,3,18,9,0,507,509,5,135,0,0,508,
        507,1,0,0,0,508,509,1,0,0,0,509,510,1,0,0,0,510,512,5,4,0,0,511,
        513,5,135,0,0,512,511,1,0,0,0,512,513,1,0,0,0,513,514,1,0,0,0,514,
        516,3,18,9,0,515,508,1,0,0,0,516,519,1,0,0,0,517,515,1,0,0,0,517,
        518,1,0,0,0,518,17,1,0,0,0,519,517,1,0,0,0,520,521,3,232,116,0,521,
        522,5,1,0,0,522,524,3,324,162,0,523,525,5,135,0,0,524,523,1,0,0,
        0,524,525,1,0,0,0,525,526,1,0,0,0,526,527,5,47,0,0,527,530,1,0,0,
        0,528,530,3,232,116,0,529,520,1,0,0,0,529,528,1,0,0,0,530,19,1,0,
        0,0,531,532,5,66,0,0,532,534,5,135,0,0,533,531,1,0,0,0,533,534,1,
        0,0,0,534,535,1,0,0,0,535,537,5,67,0,0,536,538,5,135,0,0,537,536,
        1,0,0,0,537,538,1,0,0,0,538,539,1,0,0,0,539,550,3,22,11,0,540,542,
        5,135,0,0,541,540,1,0,0,0,541,542,1,0,0,0,542,543,1,0,0,0,543,545,
        5,4,0,0,544,546,5,135,0,0,545,544,1,0,0,0,545,546,1,0,0,0,546,547,
        1,0,0,0,547,549,3,22,11,0,548,541,1,0,0,0,549,552,1,0,0,0,550,548,
        1,0,0,0,550,551,1,0,0,0,551,21,1,0,0,0,552,550,1,0,0,0,553,554,3,
        232,116,0,554,555,5,1,0,0,555,557,3,324,162,0,556,558,5,135,0,0,
        557,556,1,0,0,0,557,558,1,0,0,0,558,559,1,0,0,0,559,560,5,47,0,0,
        560,563,1,0,0,0,561,563,3,232,116,0,562,553,1,0,0,0,562,561,1,0,
        0,0,563,23,1,0,0,0,564,566,5,49,0,0,565,567,5,135,0,0,566,565,1,
        0,0,0,566,567,1,0,0,0,567,568,1,0,0,0,568,569,3,232,116,0,569,25,
        1,0,0,0,570,572,5,51,0,0,571,573,5,135,0,0,572,571,1,0,0,0,572,573,
        1,0,0,0,573,574,1,0,0,0,574,575,3,232,116,0,575,27,1,0,0,0,576,579,
        3,46,23,0,577,579,3,48,24,0,578,576,1,0,0,0,578,577,1,0,0,0,579,
        29,1,0,0,0,580,581,5,69,0,0,581,582,5,135,0,0,582,589,3,294,147,
        0,583,585,5,135,0,0,584,583,1,0,0,0,584,585,1,0,0,0,585,586,1,0,
        0,0,586,587,5,70,0,0,587,588,5,135,0,0,588,590,3,34,17,0,589,584,
        1,0,0,0,589,590,1,0,0,0,590,31,1,0,0,0,591,592,5,69,0,0,592,595,
        5,135,0,0,593,596,3,294,147,0,594,596,3,296,148,0,595,593,1,0,0,
        0,595,594,1,0,0,0,596,606,1,0,0,0,597,599,5,135,0,0,598,597,1,0,
        0,0,598,599,1,0,0,0,599,600,1,0,0,0,600,601,5,70,0,0,601,604,5,135,
        0,0,602,605,5,5,0,0,603,605,3,34,17,0,604,602,1,0,0,0,604,603,1,
        0,0,0,605,607,1,0,0,0,606,598,1,0,0,0,606,607,1,0,0,0,607,33,1,0,
        0,0,608,619,3,36,18,0,609,611,5,135,0,0,610,609,1,0,0,0,610,611,
        1,0,0,0,611,612,1,0,0,0,612,614,5,4,0,0,613,615,5,135,0,0,614,613,
        1,0,0,0,614,615,1,0,0,0,615,616,1,0,0,0,616,618,3,36,18,0,617,610,
        1,0,0,0,618,621,1,0,0,0,619,617,1,0,0,0,619,620,1,0,0,0,620,626,
        1,0,0,0,621,619,1,0,0,0,622,624,5,135,0,0,623,622,1,0,0,0,623,624,
        1,0,0,0,624,625,1,0,0,0,625,627,3,90,45,0,626,623,1,0,0,0,626,627,
        1,0,0,0,627,35,1,0,0,0,628,633,3,298,149,0,629,630,5,135,0,0,630,
        631,5,61,0,0,631,632,5,135,0,0,632,634,3,304,152,0,633,629,1,0,0,
        0,633,634,1,0,0,0,634,37,1,0,0,0,635,637,3,164,82,0,636,638,5,135,
        0,0,637,636,1,0,0,0,637,638,1,0,0,0,638,640,1,0,0,0,639,635,1,0,
        0,0,640,643,1,0,0,0,641,639,1,0,0,0,641,642,1,0,0,0,642,650,1,0,
        0,0,643,641,1,0,0,0,644,646,3,4,2,0,645,647,5,135,0,0,646,645,1,
        0,0,0,646,647,1,0,0,0,647,649,1,0,0,0,648,644,1,0,0,0,649,652,1,
        0,0,0,650,648,1,0,0,0,650,651,1,0,0,0,651,653,1,0,0,0,652,650,1,
        0,0,0,653,655,3,40,20,0,654,656,5,135,0,0,655,654,1,0,0,0,655,656,
        1,0,0,0,656,39,1,0,0,0,657,658,5,71,0,0,658,663,3,188,94,0,659,661,
        5,135,0,0,660,659,1,0,0,0,660,661,1,0,0,0,661,662,1,0,0,0,662,664,
        3,90,45,0,663,660,1,0,0,0,663,664,1,0,0,0,664,41,1,0,0,0,665,667,
        5,102,0,0,666,668,5,135,0,0,667,666,1,0,0,0,667,668,1,0,0,0,668,
        669,1,0,0,0,669,671,5,6,0,0,670,672,5,135,0,0,671,670,1,0,0,0,671,
        672,1,0,0,0,672,681,1,0,0,0,673,682,3,154,77,0,674,679,3,204,102,
        0,675,677,5,135,0,0,676,675,1,0,0,0,676,677,1,0,0,0,677,678,1,0,
        0,0,678,680,3,90,45,0,679,676,1,0,0,0,679,680,1,0,0,0,680,682,1,
        0,0,0,681,673,1,0,0,0,681,674,1,0,0,0,682,684,1,0,0,0,683,685,5,
        135,0,0,684,683,1,0,0,0,684,685,1,0,0,0,685,686,1,0,0,0,686,687,
        5,7,0,0,687,43,1,0,0,0,688,693,3,286,143,0,689,691,5,135,0,0,690,
        689,1,0,0,0,690,691,1,0,0,0,691,692,1,0,0,0,692,694,3,90,45,0,693,
        690,1,0,0,0,693,694,1,0,0,0,694,45,1,0,0,0,695,697,5,50,0,0,696,
        698,5,135,0,0,697,696,1,0,0,0,697,698,1,0,0,0,698,699,1,0,0,0,699,
        700,3,232,116,0,700,47,1,0,0,0,701,703,5,52,0,0,702,704,5,135,0,
        0,703,702,1,0,0,0,703,704,1,0,0,0,704,705,1,0,0,0,705,706,3,232,
        116,0,706,49,1,0,0,0,707,709,3,304,152,0,708,710,5,135,0,0,709,708,
        1,0,0,0,709,710,1,0,0,0,710,711,1,0,0,0,711,713,5,2,0,0,712,714,
        5,135,0,0,713,712,1,0,0,0,713,714,1,0,0,0,714,715,1,0,0,0,715,716,
        3,52,26,0,716,729,1,0,0,0,717,719,3,304,152,0,718,720,5,135,0,0,
        719,718,1,0,0,0,719,720,1,0,0,0,720,721,1,0,0,0,721,723,5,2,0,0,
        722,724,5,135,0,0,723,722,1,0,0,0,723,724,1,0,0,0,724,725,1,0,0,
        0,725,726,3,206,103,0,726,729,1,0,0,0,727,729,3,206,103,0,728,707,
        1,0,0,0,728,717,1,0,0,0,728,727,1,0,0,0,729,51,1,0,0,0,730,732,3,
        292,146,0,731,733,5,135,0,0,732,731,1,0,0,0,732,733,1,0,0,0,733,
        734,1,0,0,0,734,736,5,8,0,0,735,737,5,135,0,0,736,735,1,0,0,0,736,
        737,1,0,0,0,737,738,1,0,0,0,738,740,3,54,27,0,739,741,5,135,0,0,
        740,739,1,0,0,0,740,741,1,0,0,0,741,742,1,0,0,0,742,743,5,9,0,0,
        743,53,1,0,0,0,744,746,3,56,28,0,745,747,5,135,0,0,746,745,1,0,0,
        0,746,747,1,0,0,0,747,748,1,0,0,0,748,750,3,214,107,0,749,751,5,
        135,0,0,750,749,1,0,0,0,750,751,1,0,0,0,751,752,1,0,0,0,752,753,
        3,56,28,0,753,55,1,0,0,0,754,756,5,8,0,0,755,757,5,135,0,0,756,755,
        1,0,0,0,756,757,1,0,0,0,757,762,1,0,0,0,758,760,3,304,152,0,759,
        761,5,135,0,0,760,759,1,0,0,0,760,761,1,0,0,0,761,763,1,0,0,0,762,
        758,1,0,0,0,762,763,1,0,0,0,763,768,1,0,0,0,764,766,3,220,110,0,
        765,767,5,135,0,0,766,765,1,0,0,0,766,767,1,0,0,0,767,769,1,0,0,
        0,768,764,1,0,0,0,768,769,1,0,0,0,769,774,1,0,0,0,770,772,3,88,44,
        0,771,773,5,135,0,0,772,771,1,0,0,0,772,773,1,0,0,0,773,775,1,0,
        0,0,774,770,1,0,0,0,774,775,1,0,0,0,775,780,1,0,0,0,776,778,3,58,
        29,0,777,779,5,135,0,0,778,777,1,0,0,0,778,779,1,0,0,0,779,781,1,
        0,0,0,780,776,1,0,0,0,780,781,1,0,0,0,781,782,1,0,0,0,782,783,5,
        9,0,0,783,57,1,0,0,0,784,787,3,60,30,0,785,787,3,326,163,0,786,784,
        1,0,0,0,786,785,1,0,0,0,787,59,1,0,0,0,788,790,5,6,0,0,789,791,5,
        135,0,0,790,789,1,0,0,0,790,791,1,0,0,0,791,808,1,0,0,0,792,793,
        3,62,31,0,793,794,5,10,0,0,794,805,3,64,32,0,795,797,5,4,0,0,796,
        798,5,135,0,0,797,796,1,0,0,0,797,798,1,0,0,0,798,799,1,0,0,0,799,
        800,3,62,31,0,800,801,5,10,0,0,801,802,3,64,32,0,802,804,1,0,0,0,
        803,795,1,0,0,0,804,807,1,0,0,0,805,803,1,0,0,0,805,806,1,0,0,0,
        806,809,1,0,0,0,807,805,1,0,0,0,808,792,1,0,0,0,808,809,1,0,0,0,
        809,810,1,0,0,0,810,811,5,7,0,0,811,61,1,0,0,0,812,814,3,324,162,
        0,813,815,5,135,0,0,814,813,1,0,0,0,814,815,1,0,0,0,815,820,1,0,
        0,0,816,818,3,88,44,0,817,819,5,135,0,0,818,817,1,0,0,0,818,819,
        1,0,0,0,819,821,1,0,0,0,820,816,1,0,0,0,820,821,1,0,0,0,821,63,1,
        0,0,0,822,824,5,135,0,0,823,822,1,0,0,0,823,824,1,0,0,0,824,825,
        1,0,0,0,825,827,3,232,116,0,826,828,5,135,0,0,827,826,1,0,0,0,827,
        828,1,0,0,0,828,833,1,0,0,0,829,831,3,88,44,0,830,832,5,135,0,0,
        831,830,1,0,0,0,831,832,1,0,0,0,832,834,1,0,0,0,833,829,1,0,0,0,
        833,834,1,0,0,0,834,65,1,0,0,0,835,837,5,11,0,0,836,838,5,135,0,
        0,837,836,1,0,0,0,837,838,1,0,0,0,838,843,1,0,0,0,839,841,3,304,
        152,0,840,842,5,135,0,0,841,840,1,0,0,0,841,842,1,0,0,0,842,844,
        1,0,0,0,843,839,1,0,0,0,843,844,1,0,0,0,844,849,1,0,0,0,845,847,
        3,218,109,0,846,848,5,135,0,0,847,846,1,0,0,0,847,848,1,0,0,0,848,
        850,1,0,0,0,849,845,1,0,0,0,849,850,1,0,0,0,850,852,1,0,0,0,851,
        853,3,224,112,0,852,851,1,0,0,0,852,853,1,0,0,0,853,858,1,0,0,0,
        854,856,3,88,44,0,855,857,5,135,0,0,856,855,1,0,0,0,856,857,1,0,
        0,0,857,859,1,0,0,0,858,854,1,0,0,0,858,859,1,0,0,0,859,864,1,0,
        0,0,860,862,3,216,108,0,861,863,5,135,0,0,862,861,1,0,0,0,862,863,
        1,0,0,0,863,865,1,0,0,0,864,860,1,0,0,0,864,865,1,0,0,0,865,866,
        1,0,0,0,866,867,5,12,0,0,867,67,1,0,0,0,868,873,3,250,125,0,869,
        874,3,86,43,0,870,874,3,244,122,0,871,874,3,246,123,0,872,874,3,
        248,124,0,873,869,1,0,0,0,873,870,1,0,0,0,873,871,1,0,0,0,873,872,
        1,0,0,0,873,874,1,0,0,0,874,69,1,0,0,0,875,878,3,266,133,0,876,878,
        3,80,40,0,877,875,1,0,0,0,877,876,1,0,0,0,878,883,1,0,0,0,879,882,
        3,72,36,0,880,882,3,74,37,0,881,879,1,0,0,0,881,880,1,0,0,0,882,
        885,1,0,0,0,883,881,1,0,0,0,883,884,1,0,0,0,884,71,1,0,0,0,885,883,
        1,0,0,0,886,888,5,135,0,0,887,886,1,0,0,0,887,888,1,0,0,0,888,889,
        1,0,0,0,889,890,5,11,0,0,890,891,3,76,38,0,891,892,5,12,0,0,892,
        73,1,0,0,0,893,895,5,135,0,0,894,893,1,0,0,0,894,895,1,0,0,0,895,
        896,1,0,0,0,896,898,5,11,0,0,897,899,3,76,38,0,898,897,1,0,0,0,898,
        899,1,0,0,0,899,900,1,0,0,0,900,902,5,13,0,0,901,903,3,78,39,0,902,
        901,1,0,0,0,902,903,1,0,0,0,903,904,1,0,0,0,904,905,5,12,0,0,905,
        75,1,0,0,0,906,907,3,232,116,0,907,77,1,0,0,0,908,909,3,232,116,
        0,909,79,1,0,0,0,910,925,3,270,135,0,911,913,5,135,0,0,912,911,1,
        0,0,0,912,913,1,0,0,0,913,914,1,0,0,0,914,916,3,268,134,0,915,912,
        1,0,0,0,916,917,1,0,0,0,917,915,1,0,0,0,917,918,1,0,0,0,918,923,
        1,0,0,0,919,921,5,135,0,0,920,919,1,0,0,0,920,921,1,0,0,0,921,922,
        1,0,0,0,922,924,5,47,0,0,923,920,1,0,0,0,923,924,1,0,0,0,924,926,
        1,0,0,0,925,915,1,0,0,0,925,926,1,0,0,0,926,928,1,0,0,0,927,929,
        5,135,0,0,928,927,1,0,0,0,928,929,1,0,0,0,929,930,1,0,0,0,930,931,
        3,82,41,0,931,81,1,0,0,0,932,939,5,46,0,0,933,935,5,135,0,0,934,
        933,1,0,0,0,934,935,1,0,0,0,935,936,1,0,0,0,936,938,3,84,42,0,937,
        934,1,0,0,0,938,941,1,0,0,0,939,937,1,0,0,0,939,940,1,0,0,0,940,
        83,1,0,0,0,941,939,1,0,0,0,942,944,5,1,0,0,943,945,5,135,0,0,944,
        943,1,0,0,0,944,945,1,0,0,0,945,946,1,0,0,0,946,947,3,324,162,0,
        947,85,1,0,0,0,948,949,5,135,0,0,949,950,7,0,0,0,950,951,5,135,0,
        0,951,952,3,250,125,0,952,87,1,0,0,0,953,955,5,46,0,0,954,956,5,
        135,0,0,955,954,1,0,0,0,955,956,1,0,0,0,956,957,1,0,0,0,957,959,
        5,8,0,0,958,960,5,135,0,0,959,958,1,0,0,0,959,960,1,0,0,0,960,961,
        1,0,0,0,961,963,3,144,72,0,962,964,5,135,0,0,963,962,1,0,0,0,963,
        964,1,0,0,0,964,965,1,0,0,0,965,967,5,4,0,0,966,968,5,135,0,0,967,
        966,1,0,0,0,967,968,1,0,0,0,968,971,1,0,0,0,969,972,3,144,72,0,970,
        972,5,48,0,0,971,969,1,0,0,0,971,970,1,0,0,0,972,974,1,0,0,0,973,
        975,5,135,0,0,974,973,1,0,0,0,974,975,1,0,0,0,975,976,1,0,0,0,976,
        977,5,9,0,0,977,89,1,0,0,0,978,979,5,82,0,0,979,980,5,135,0,0,980,
        981,3,92,46,0,981,91,1,0,0,0,982,983,3,94,47,0,983,93,1,0,0,0,984,
        991,3,96,48,0,985,986,5,135,0,0,986,987,5,83,0,0,987,988,5,135,0,
        0,988,990,3,96,48,0,989,985,1,0,0,0,990,993,1,0,0,0,991,989,1,0,
        0,0,991,992,1,0,0,0,992,95,1,0,0,0,993,991,1,0,0,0,994,1001,3,98,
        49,0,995,996,5,135,0,0,996,997,5,84,0,0,997,998,5,135,0,0,998,1000,
        3,98,49,0,999,995,1,0,0,0,1000,1003,1,0,0,0,1001,999,1,0,0,0,1001,
        1002,1,0,0,0,1002,97,1,0,0,0,1003,1001,1,0,0,0,1004,1011,3,100,50,
        0,1005,1006,5,135,0,0,1006,1007,5,85,0,0,1007,1008,5,135,0,0,1008,
        1010,3,100,50,0,1009,1005,1,0,0,0,1010,1013,1,0,0,0,1011,1009,1,
        0,0,0,1011,1012,1,0,0,0,1012,99,1,0,0,0,1013,1011,1,0,0,0,1014,1016,
        5,86,0,0,1015,1017,5,135,0,0,1016,1015,1,0,0,0,1016,1017,1,0,0,0,
        1017,1019,1,0,0,0,1018,1014,1,0,0,0,1019,1022,1,0,0,0,1020,1018,
        1,0,0,0,1020,1021,1,0,0,0,1021,1023,1,0,0,0,1022,1020,1,0,0,0,1023,
        1024,3,102,51,0,1024,101,1,0,0,0,1025,1037,3,112,56,0,1026,1028,
        5,135,0,0,1027,1026,1,0,0,0,1027,1028,1,0,0,0,1028,1029,1,0,0,0,
        1029,1031,3,110,55,0,1030,1032,5,135,0,0,1031,1030,1,0,0,0,1031,
        1032,1,0,0,0,1032,1033,1,0,0,0,1033,1034,3,112,56,0,1034,1036,1,
        0,0,0,1035,1027,1,0,0,0,1036,1039,1,0,0,0,1037,1035,1,0,0,0,1037,
        1038,1,0,0,0,1038,103,1,0,0,0,1039,1037,1,0,0,0,1040,1041,7,1,0,
        0,1041,105,1,0,0,0,1042,1043,5,16,0,0,1043,107,1,0,0,0,1044,1045,
        7,2,0,0,1045,109,1,0,0,0,1046,1047,7,3,0,0,1047,111,1,0,0,0,1048,
        1053,3,114,57,0,1049,1054,3,116,58,0,1050,1054,3,118,59,0,1051,1054,
        3,120,60,0,1052,1054,3,122,61,0,1053,1049,1,0,0,0,1053,1050,1,0,
        0,0,1053,1051,1,0,0,0,1053,1052,1,0,0,0,1053,1054,1,0,0,0,1054,113,
        1,0,0,0,1055,1076,3,124,62,0,1056,1058,5,135,0,0,1057,1056,1,0,0,
        0,1057,1058,1,0,0,0,1058,1059,1,0,0,0,1059,1061,3,108,54,0,1060,
        1062,5,135,0,0,1061,1060,1,0,0,0,1061,1062,1,0,0,0,1062,1063,1,0,
        0,0,1063,1064,3,124,62,0,1064,1075,1,0,0,0,1065,1067,5,135,0,0,1066,
        1065,1,0,0,0,1066,1067,1,0,0,0,1067,1068,1,0,0,0,1068,1070,3,108,
        54,0,1069,1071,5,135,0,0,1070,1069,1,0,0,0,1070,1071,1,0,0,0,1071,
        1072,1,0,0,0,1072,1073,3,124,62,0,1073,1075,1,0,0,0,1074,1057,1,
        0,0,0,1074,1066,1,0,0,0,1075,1078,1,0,0,0,1076,1074,1,0,0,0,1076,
        1077,1,0,0,0,1077,115,1,0,0,0,1078,1076,1,0,0,0,1079,1080,5,135,
        0,0,1080,1081,7,0,0,0,1081,1082,5,135,0,0,1082,1083,3,114,57,0,1083,
        117,1,0,0,0,1084,1085,5,135,0,0,1085,1086,5,87,0,0,1086,1087,5,135,
        0,0,1087,1095,5,71,0,0,1088,1089,5,135,0,0,1089,1090,5,88,0,0,1090,
        1091,5,135,0,0,1091,1095,5,71,0,0,1092,1093,5,135,0,0,1093,1095,
        5,89,0,0,1094,1084,1,0,0,0,1094,1088,1,0,0,0,1094,1092,1,0,0,0,1095,
        1097,1,0,0,0,1096,1098,5,135,0,0,1097,1096,1,0,0,0,1097,1098,1,0,
        0,0,1098,1099,1,0,0,0,1099,1100,3,114,57,0,1100,119,1,0,0,0,1101,
        1102,5,135,0,0,1102,1104,5,90,0,0,1103,1105,5,135,0,0,1104,1103,
        1,0,0,0,1104,1105,1,0,0,0,1105,1106,1,0,0,0,1106,1107,3,114,57,0,
        1107,121,1,0,0,0,1108,1109,5,135,0,0,1109,1110,5,91,0,0,1110,1111,
        5,135,0,0,1111,1119,5,92,0,0,1112,1113,5,135,0,0,1113,1114,5,91,
        0,0,1114,1115,5,135,0,0,1115,1116,5,86,0,0,1116,1117,5,135,0,0,1117,
        1119,5,92,0,0,1118,1108,1,0,0,0,1118,1112,1,0,0,0,1119,123,1,0,0,
        0,1120,1150,3,126,63,0,1121,1123,5,135,0,0,1122,1121,1,0,0,0,1122,
        1123,1,0,0,0,1123,1124,1,0,0,0,1124,1126,3,104,52,0,1125,1127,5,
        135,0,0,1126,1125,1,0,0,0,1126,1127,1,0,0,0,1127,1128,1,0,0,0,1128,
        1129,3,126,63,0,1129,1149,1,0,0,0,1130,1132,5,135,0,0,1131,1130,
        1,0,0,0,1131,1132,1,0,0,0,1132,1133,1,0,0,0,1133,1135,3,104,52,0,
        1134,1136,5,135,0,0,1135,1134,1,0,0,0,1135,1136,1,0,0,0,1136,1137,
        1,0,0,0,1137,1138,3,126,63,0,1138,1149,1,0,0,0,1139,1141,5,135,0,
        0,1140,1139,1,0,0,0,1140,1141,1,0,0,0,1141,1142,1,0,0,0,1142,1144,
        3,104,52,0,1143,1145,5,135,0,0,1144,1143,1,0,0,0,1144,1145,1,0,0,
        0,1145,1146,1,0,0,0,1146,1147,3,126,63,0,1147,1149,1,0,0,0,1148,
        1122,1,0,0,0,1148,1131,1,0,0,0,1148,1140,1,0,0,0,1149,1152,1,0,0,
        0,1150,1148,1,0,0,0,1150,1151,1,0,0,0,1151,125,1,0,0,0,1152,1150,
        1,0,0,0,1153,1165,3,128,64,0,1154,1156,5,135,0,0,1155,1154,1,0,0,
        0,1155,1156,1,0,0,0,1156,1157,1,0,0,0,1157,1159,3,106,53,0,1158,
        1160,5,135,0,0,1159,1158,1,0,0,0,1159,1160,1,0,0,0,1160,1161,1,0,
        0,0,1161,1162,3,128,64,0,1162,1164,1,0,0,0,1163,1155,1,0,0,0,1164,
        1167,1,0,0,0,1165,1163,1,0,0,0,1165,1166,1,0,0,0,1166,127,1,0,0,
        0,1167,1165,1,0,0,0,1168,1175,3,130,65,0,1169,1171,7,2,0,0,1170,
        1172,5,135,0,0,1171,1170,1,0,0,0,1171,1172,1,0,0,0,1172,1173,1,0,
        0,0,1173,1175,3,130,65,0,1174,1168,1,0,0,0,1174,1169,1,0,0,0,1175,
        129,1,0,0,0,1176,1179,3,132,66,0,1177,1179,3,134,67,0,1178,1176,
        1,0,0,0,1178,1177,1,0,0,0,1179,1184,1,0,0,0,1180,1183,3,136,68,0,
        1181,1183,3,138,69,0,1182,1180,1,0,0,0,1182,1181,1,0,0,0,1183,1186,
        1,0,0,0,1184,1182,1,0,0,0,1184,1185,1,0,0,0,1185,131,1,0,0,0,1186,
        1184,1,0,0,0,1187,1194,3,270,135,0,1188,1190,5,135,0,0,1189,1188,
        1,0,0,0,1189,1190,1,0,0,0,1190,1191,1,0,0,0,1191,1193,3,268,134,
        0,1192,1189,1,0,0,0,1193,1196,1,0,0,0,1194,1192,1,0,0,0,1194,1195,
        1,0,0,0,1195,1201,1,0,0,0,1196,1194,1,0,0,0,1197,1199,5,135,0,0,
        1198,1197,1,0,0,0,1198,1199,1,0,0,0,1199,1200,1,0,0,0,1200,1202,
        3,220,110,0,1201,1198,1,0,0,0,1201,1202,1,0,0,0,1202,133,1,0,0,0,
        1203,1218,3,270,135,0,1204,1206,5,135,0,0,1205,1204,1,0,0,0,1205,
        1206,1,0,0,0,1206,1207,1,0,0,0,1207,1209,3,268,134,0,1208,1205,1,
        0,0,0,1209,1210,1,0,0,0,1210,1208,1,0,0,0,1210,1211,1,0,0,0,1211,
        1216,1,0,0,0,1212,1214,5,135,0,0,1213,1212,1,0,0,0,1213,1214,1,0,
        0,0,1214,1215,1,0,0,0,1215,1217,5,47,0,0,1216,1213,1,0,0,0,1216,
        1217,1,0,0,0,1217,1219,1,0,0,0,1218,1208,1,0,0,0,1218,1219,1,0,0,
        0,1219,1221,1,0,0,0,1220,1222,5,135,0,0,1221,1220,1,0,0,0,1221,1222,
        1,0,0,0,1222,1223,1,0,0,0,1223,1224,3,82,41,0,1224,135,1,0,0,0,1225,
        1227,5,135,0,0,1226,1225,1,0,0,0,1226,1227,1,0,0,0,1227,1228,1,0,
        0,0,1228,1229,5,11,0,0,1229,1230,3,140,70,0,1230,1231,5,12,0,0,1231,
        137,1,0,0,0,1232,1234,5,135,0,0,1233,1232,1,0,0,0,1233,1234,1,0,
        0,0,1234,1235,1,0,0,0,1235,1237,5,11,0,0,1236,1238,3,140,70,0,1237,
        1236,1,0,0,0,1237,1238,1,0,0,0,1238,1239,1,0,0,0,1239,1241,5,13,
        0,0,1240,1242,3,142,71,0,1241,1240,1,0,0,0,1241,1242,1,0,0,0,1242,
        1243,1,0,0,0,1243,1244,5,12,0,0,1244,139,1,0,0,0,1245,1246,3,232,
        116,0,1246,141,1,0,0,0,1247,1248,3,232,116,0,1248,143,1,0,0,0,1249,
        1252,5,117,0,0,1250,1252,3,320,160,0,1251,1249,1,0,0,0,1251,1250,
        1,0,0,0,1252,145,1,0,0,0,1253,1254,7,4,0,0,1254,147,1,0,0,0,1255,
        1256,7,5,0,0,1256,149,1,0,0,0,1257,1259,5,135,0,0,1258,1257,1,0,
        0,0,1258,1259,1,0,0,0,1259,1260,1,0,0,0,1260,1265,3,152,76,0,1261,
        1263,5,135,0,0,1262,1261,1,0,0,0,1262,1263,1,0,0,0,1263,1264,1,0,
        0,0,1264,1266,5,24,0,0,1265,1262,1,0,0,0,1265,1266,1,0,0,0,1266,
        1268,1,0,0,0,1267,1269,5,135,0,0,1268,1267,1,0,0,0,1268,1269,1,0,
        0,0,1269,1270,1,0,0,0,1270,1271,5,0,0,1,1271,151,1,0,0,0,1272,1273,
        3,0,0,0,1273,153,1,0,0,0,1274,1281,3,158,79,0,1275,1277,5,135,0,
        0,1276,1275,1,0,0,0,1276,1277,1,0,0,0,1277,1278,1,0,0,0,1278,1280,
        3,156,78,0,1279,1276,1,0,0,0,1280,1283,1,0,0,0,1281,1279,1,0,0,0,
        1281,1282,1,0,0,0,1282,155,1,0,0,0,1283,1281,1,0,0,0,1284,1285,5,
        56,0,0,1285,1286,5,135,0,0,1286,1288,5,57,0,0,1287,1289,5,135,0,
        0,1288,1287,1,0,0,0,1288,1289,1,0,0,0,1289,1290,1,0,0,0,1290,1297,
        3,158,79,0,1291,1293,5,56,0,0,1292,1294,5,135,0,0,1293,1292,1,0,
        0,0,1293,1294,1,0,0,0,1294,1295,1,0,0,0,1295,1297,3,158,79,0,1296,
        1284,1,0,0,0,1296,1291,1,0,0,0,1297,157,1,0,0,0,1298,1301,3,160,
        80,0,1299,1301,3,162,81,0,1300,1298,1,0,0,0,1300,1299,1,0,0,0,1301,
        159,1,0,0,0,1302,1304,3,164,82,0,1303,1305,5,135,0,0,1304,1303,1,
        0,0,0,1304,1305,1,0,0,0,1305,1307,1,0,0,0,1306,1302,1,0,0,0,1307,
        1310,1,0,0,0,1308,1306,1,0,0,0,1308,1309,1,0,0,0,1309,1311,1,0,0,
        0,1310,1308,1,0,0,0,1311,1338,3,186,93,0,1312,1314,3,164,82,0,1313,
        1315,5,135,0,0,1314,1313,1,0,0,0,1314,1315,1,0,0,0,1315,1317,1,0,
        0,0,1316,1312,1,0,0,0,1317,1320,1,0,0,0,1318,1316,1,0,0,0,1318,1319,
        1,0,0,0,1319,1321,1,0,0,0,1320,1318,1,0,0,0,1321,1328,3,4,2,0,1322,
        1324,5,135,0,0,1323,1322,1,0,0,0,1323,1324,1,0,0,0,1324,1325,1,0,
        0,0,1325,1327,3,4,2,0,1326,1323,1,0,0,0,1327,1330,1,0,0,0,1328,1326,
        1,0,0,0,1328,1329,1,0,0,0,1329,1335,1,0,0,0,1330,1328,1,0,0,0,1331,
        1333,5,135,0,0,1332,1331,1,0,0,0,1332,1333,1,0,0,0,1333,1334,1,0,
        0,0,1334,1336,3,186,93,0,1335,1332,1,0,0,0,1335,1336,1,0,0,0,1336,
        1338,1,0,0,0,1337,1308,1,0,0,0,1337,1318,1,0,0,0,1338,161,1,0,0,
        0,1339,1341,3,38,19,0,1340,1339,1,0,0,0,1341,1342,1,0,0,0,1342,1340,
        1,0,0,0,1342,1343,1,0,0,0,1343,1344,1,0,0,0,1344,1345,3,160,80,0,
        1345,163,1,0,0,0,1346,1350,3,2,1,0,1347,1350,3,166,83,0,1348,1350,
        3,30,15,0,1349,1346,1,0,0,0,1349,1347,1,0,0,0,1349,1348,1,0,0,0,
        1350,165,1,0,0,0,1351,1353,5,60,0,0,1352,1354,5,135,0,0,1353,1352,
        1,0,0,0,1353,1354,1,0,0,0,1354,1355,1,0,0,0,1355,1356,3,232,116,
        0,1356,1357,5,135,0,0,1357,1358,5,61,0,0,1358,1359,5,135,0,0,1359,
        1360,3,304,152,0,1360,167,1,0,0,0,1361,1363,5,62,0,0,1362,1364,5,
        135,0,0,1363,1362,1,0,0,0,1363,1364,1,0,0,0,1364,1365,1,0,0,0,1365,
        1370,3,50,25,0,1366,1367,5,135,0,0,1367,1369,3,170,85,0,1368,1366,
        1,0,0,0,1369,1372,1,0,0,0,1370,1368,1,0,0,0,1370,1371,1,0,0,0,1371,
        169,1,0,0,0,1372,1370,1,0,0,0,1373,1374,5,63,0,0,1374,1375,5,135,
        0,0,1375,1376,5,59,0,0,1376,1377,5,135,0,0,1377,1384,3,174,87,0,
        1378,1379,5,63,0,0,1379,1380,5,135,0,0,1380,1381,5,64,0,0,1381,1382,
        5,135,0,0,1382,1384,3,174,87,0,1383,1373,1,0,0,0,1383,1378,1,0,0,
        0,1384,171,1,0,0,0,1385,1387,5,64,0,0,1386,1388,5,135,0,0,1387,1386,
        1,0,0,0,1387,1388,1,0,0,0,1388,1389,1,0,0,0,1389,1390,3,204,102,
        0,1390,173,1,0,0,0,1391,1393,5,65,0,0,1392,1394,5,135,0,0,1393,1392,
        1,0,0,0,1393,1394,1,0,0,0,1394,1395,1,0,0,0,1395,1406,3,6,3,0,1396,
        1398,5,135,0,0,1397,1396,1,0,0,0,1397,1398,1,0,0,0,1398,1399,1,0,
        0,0,1399,1401,5,4,0,0,1400,1402,5,135,0,0,1401,1400,1,0,0,0,1401,
        1402,1,0,0,0,1402,1403,1,0,0,0,1403,1405,3,6,3,0,1404,1397,1,0,0,
        0,1405,1408,1,0,0,0,1406,1404,1,0,0,0,1406,1407,1,0,0,0,1407,175,
        1,0,0,0,1408,1406,1,0,0,0,1409,1410,5,68,0,0,1410,1411,5,135,0,0,
        1411,1422,3,178,89,0,1412,1414,5,135,0,0,1413,1412,1,0,0,0,1413,
        1414,1,0,0,0,1414,1415,1,0,0,0,1415,1417,5,4,0,0,1416,1418,5,135,
        0,0,1417,1416,1,0,0,0,1417,1418,1,0,0,0,1418,1419,1,0,0,0,1419,1421,
        3,178,89,0,1420,1413,1,0,0,0,1421,1424,1,0,0,0,1422,1420,1,0,0,0,
        1422,1423,1,0,0,0,1423,177,1,0,0,0,1424,1422,1,0,0,0,1425,1426,3,
        304,152,0,1426,1427,3,220,110,0,1427,1430,1,0,0,0,1428,1430,3,230,
        115,0,1429,1425,1,0,0,0,1429,1428,1,0,0,0,1430,179,1,0,0,0,1431,
        1442,3,182,91,0,1432,1434,5,135,0,0,1433,1432,1,0,0,0,1433,1434,
        1,0,0,0,1434,1435,1,0,0,0,1435,1437,5,4,0,0,1436,1438,5,135,0,0,
        1437,1436,1,0,0,0,1437,1438,1,0,0,0,1438,1439,1,0,0,0,1439,1441,
        3,182,91,0,1440,1433,1,0,0,0,1441,1444,1,0,0,0,1442,1440,1,0,0,0,
        1442,1443,1,0,0,0,1443,1449,1,0,0,0,1444,1442,1,0,0,0,1445,1447,
        5,135,0,0,1446,1445,1,0,0,0,1446,1447,1,0,0,0,1447,1448,1,0,0,0,
        1448,1450,3,202,101,0,1449,1446,1,0,0,0,1449,1450,1,0,0,0,1450,181,
        1,0,0,0,1451,1456,3,298,149,0,1452,1453,5,135,0,0,1453,1454,5,61,
        0,0,1454,1455,5,135,0,0,1455,1457,3,304,152,0,1456,1452,1,0,0,0,
        1456,1457,1,0,0,0,1457,183,1,0,0,0,1458,1459,5,71,0,0,1459,1464,
        3,188,94,0,1460,1462,5,135,0,0,1461,1460,1,0,0,0,1461,1462,1,0,0,
        0,1462,1463,1,0,0,0,1463,1465,3,202,101,0,1464,1461,1,0,0,0,1464,
        1465,1,0,0,0,1465,185,1,0,0,0,1466,1467,5,72,0,0,1467,1468,3,188,
        94,0,1468,187,1,0,0,0,1469,1471,5,135,0,0,1470,1469,1,0,0,0,1470,
        1471,1,0,0,0,1471,1472,1,0,0,0,1472,1474,5,73,0,0,1473,1470,1,0,
        0,0,1473,1474,1,0,0,0,1474,1475,1,0,0,0,1475,1476,5,135,0,0,1476,
        1479,3,190,95,0,1477,1478,5,135,0,0,1478,1480,3,194,97,0,1479,1477,
        1,0,0,0,1479,1480,1,0,0,0,1480,1483,1,0,0,0,1481,1482,5,135,0,0,
        1482,1484,3,196,98,0,1483,1481,1,0,0,0,1483,1484,1,0,0,0,1484,1487,
        1,0,0,0,1485,1486,5,135,0,0,1486,1488,3,198,99,0,1487,1485,1,0,0,
        0,1487,1488,1,0,0,0,1488,189,1,0,0,0,1489,1500,5,5,0,0,1490,1492,
        5,135,0,0,1491,1490,1,0,0,0,1491,1492,1,0,0,0,1492,1493,1,0,0,0,
        1493,1495,5,4,0,0,1494,1496,5,135,0,0,1495,1494,1,0,0,0,1495,1496,
        1,0,0,0,1496,1497,1,0,0,0,1497,1499,3,192,96,0,1498,1491,1,0,0,0,
        1499,1502,1,0,0,0,1500,1498,1,0,0,0,1500,1501,1,0,0,0,1501,1518,
        1,0,0,0,1502,1500,1,0,0,0,1503,1514,3,192,96,0,1504,1506,5,135,0,
        0,1505,1504,1,0,0,0,1505,1506,1,0,0,0,1506,1507,1,0,0,0,1507,1509,
        5,4,0,0,1508,1510,5,135,0,0,1509,1508,1,0,0,0,1509,1510,1,0,0,0,
        1510,1511,1,0,0,0,1511,1513,3,192,96,0,1512,1505,1,0,0,0,1513,1516,
        1,0,0,0,1514,1512,1,0,0,0,1514,1515,1,0,0,0,1515,1518,1,0,0,0,1516,
        1514,1,0,0,0,1517,1489,1,0,0,0,1517,1503,1,0,0,0,1518,191,1,0,0,
        0,1519,1520,3,232,116,0,1520,1521,5,135,0,0,1521,1522,5,61,0,0,1522,
        1523,5,135,0,0,1523,1524,3,304,152,0,1524,1527,1,0,0,0,1525,1527,
        3,232,116,0,1526,1519,1,0,0,0,1526,1525,1,0,0,0,1527,193,1,0,0,0,
        1528,1529,5,74,0,0,1529,1530,5,135,0,0,1530,1531,5,75,0,0,1531,1532,
        5,135,0,0,1532,1540,3,200,100,0,1533,1535,5,4,0,0,1534,1536,5,135,
        0,0,1535,1534,1,0,0,0,1535,1536,1,0,0,0,1536,1537,1,0,0,0,1537,1539,
        3,200,100,0,1538,1533,1,0,0,0,1539,1542,1,0,0,0,1540,1538,1,0,0,
        0,1540,1541,1,0,0,0,1541,195,1,0,0,0,1542,1540,1,0,0,0,1543,1544,
        5,76,0,0,1544,1545,5,135,0,0,1545,1546,3,232,116,0,1546,197,1,0,
        0,0,1547,1548,5,77,0,0,1548,1549,5,135,0,0,1549,1550,3,232,116,0,
        1550,199,1,0,0,0,1551,1556,3,232,116,0,1552,1554,5,135,0,0,1553,
        1552,1,0,0,0,1553,1554,1,0,0,0,1554,1555,1,0,0,0,1555,1557,7,6,0,
        0,1556,1553,1,0,0,0,1556,1557,1,0,0,0,1557,201,1,0,0,0,1558,1559,
        5,82,0,0,1559,1560,5,135,0,0,1560,1561,3,232,116,0,1561,203,1,0,
        0,0,1562,1573,3,50,25,0,1563,1565,5,135,0,0,1564,1563,1,0,0,0,1564,
        1565,1,0,0,0,1565,1566,1,0,0,0,1566,1568,5,4,0,0,1567,1569,5,135,
        0,0,1568,1567,1,0,0,0,1568,1569,1,0,0,0,1569,1570,1,0,0,0,1570,1572,
        3,50,25,0,1571,1564,1,0,0,0,1572,1575,1,0,0,0,1573,1571,1,0,0,0,
        1573,1574,1,0,0,0,1574,205,1,0,0,0,1575,1573,1,0,0,0,1576,1577,3,
        208,104,0,1577,207,1,0,0,0,1578,1585,3,56,28,0,1579,1581,5,135,0,
        0,1580,1579,1,0,0,0,1580,1581,1,0,0,0,1581,1582,1,0,0,0,1582,1584,
        3,212,106,0,1583,1580,1,0,0,0,1584,1587,1,0,0,0,1585,1583,1,0,0,
        0,1585,1586,1,0,0,0,1586,1593,1,0,0,0,1587,1585,1,0,0,0,1588,1589,
        5,8,0,0,1589,1590,3,208,104,0,1590,1591,5,9,0,0,1591,1593,1,0,0,
        0,1592,1578,1,0,0,0,1592,1588,1,0,0,0,1593,209,1,0,0,0,1594,1599,
        3,56,28,0,1595,1597,5,135,0,0,1596,1595,1,0,0,0,1596,1597,1,0,0,
        0,1597,1598,1,0,0,0,1598,1600,3,212,106,0,1599,1596,1,0,0,0,1600,
        1601,1,0,0,0,1601,1599,1,0,0,0,1601,1602,1,0,0,0,1602,211,1,0,0,
        0,1603,1605,3,214,107,0,1604,1606,5,135,0,0,1605,1604,1,0,0,0,1605,
        1606,1,0,0,0,1606,1607,1,0,0,0,1607,1608,3,56,28,0,1608,213,1,0,
        0,0,1609,1611,3,330,165,0,1610,1612,5,135,0,0,1611,1610,1,0,0,0,
        1611,1612,1,0,0,0,1612,1613,1,0,0,0,1613,1615,3,334,167,0,1614,1616,
        5,135,0,0,1615,1614,1,0,0,0,1615,1616,1,0,0,0,1616,1618,1,0,0,0,
        1617,1619,3,66,33,0,1618,1617,1,0,0,0,1618,1619,1,0,0,0,1619,1621,
        1,0,0,0,1620,1622,5,135,0,0,1621,1620,1,0,0,0,1621,1622,1,0,0,0,
        1622,1623,1,0,0,0,1623,1625,3,334,167,0,1624,1626,5,135,0,0,1625,
        1624,1,0,0,0,1625,1626,1,0,0,0,1626,1627,1,0,0,0,1627,1628,3,332,
        166,0,1628,1674,1,0,0,0,1629,1631,3,330,165,0,1630,1632,5,135,0,
        0,1631,1630,1,0,0,0,1631,1632,1,0,0,0,1632,1633,1,0,0,0,1633,1635,
        3,334,167,0,1634,1636,5,135,0,0,1635,1634,1,0,0,0,1635,1636,1,0,
        0,0,1636,1638,1,0,0,0,1637,1639,3,66,33,0,1638,1637,1,0,0,0,1638,
        1639,1,0,0,0,1639,1641,1,0,0,0,1640,1642,5,135,0,0,1641,1640,1,0,
        0,0,1641,1642,1,0,0,0,1642,1643,1,0,0,0,1643,1644,3,334,167,0,1644,
        1674,1,0,0,0,1645,1647,3,334,167,0,1646,1648,5,135,0,0,1647,1646,
        1,0,0,0,1647,1648,1,0,0,0,1648,1650,1,0,0,0,1649,1651,3,66,33,0,
        1650,1649,1,0,0,0,1650,1651,1,0,0,0,1651,1653,1,0,0,0,1652,1654,
        5,135,0,0,1653,1652,1,0,0,0,1653,1654,1,0,0,0,1654,1655,1,0,0,0,
        1655,1657,3,334,167,0,1656,1658,5,135,0,0,1657,1656,1,0,0,0,1657,
        1658,1,0,0,0,1658,1659,1,0,0,0,1659,1660,3,332,166,0,1660,1674,1,
        0,0,0,1661,1663,3,334,167,0,1662,1664,5,135,0,0,1663,1662,1,0,0,
        0,1663,1664,1,0,0,0,1664,1666,1,0,0,0,1665,1667,3,66,33,0,1666,1665,
        1,0,0,0,1666,1667,1,0,0,0,1667,1669,1,0,0,0,1668,1670,5,135,0,0,
        1669,1668,1,0,0,0,1669,1670,1,0,0,0,1670,1671,1,0,0,0,1671,1672,
        3,334,167,0,1672,1674,1,0,0,0,1673,1609,1,0,0,0,1673,1629,1,0,0,
        0,1673,1645,1,0,0,0,1673,1661,1,0,0,0,1674,215,1,0,0,0,1675,1678,
        3,320,160,0,1676,1678,3,326,163,0,1677,1675,1,0,0,0,1677,1676,1,
        0,0,0,1678,217,1,0,0,0,1679,1681,5,10,0,0,1680,1682,5,135,0,0,1681,
        1680,1,0,0,0,1681,1682,1,0,0,0,1682,1683,1,0,0,0,1683,1697,3,228,
        114,0,1684,1686,5,135,0,0,1685,1684,1,0,0,0,1685,1686,1,0,0,0,1686,
        1687,1,0,0,0,1687,1689,5,25,0,0,1688,1690,5,10,0,0,1689,1688,1,0,
        0,0,1689,1690,1,0,0,0,1690,1692,1,0,0,0,1691,1693,5,135,0,0,1692,
        1691,1,0,0,0,1692,1693,1,0,0,0,1693,1694,1,0,0,0,1694,1696,3,228,
        114,0,1695,1685,1,0,0,0,1696,1699,1,0,0,0,1697,1695,1,0,0,0,1697,
        1698,1,0,0,0,1698,219,1,0,0,0,1699,1697,1,0,0,0,1700,1707,3,222,
        111,0,1701,1703,5,135,0,0,1702,1701,1,0,0,0,1702,1703,1,0,0,0,1703,
        1704,1,0,0,0,1704,1706,3,222,111,0,1705,1702,1,0,0,0,1706,1709,1,
        0,0,0,1707,1705,1,0,0,0,1707,1708,1,0,0,0,1708,221,1,0,0,0,1709,
        1707,1,0,0,0,1710,1712,5,10,0,0,1711,1713,5,135,0,0,1712,1711,1,
        0,0,0,1712,1713,1,0,0,0,1713,1714,1,0,0,0,1714,1715,3,226,113,0,
        1715,223,1,0,0,0,1716,1718,5,5,0,0,1717,1719,5,135,0,0,1718,1717,
        1,0,0,0,1718,1719,1,0,0,0,1719,1724,1,0,0,0,1720,1722,3,312,156,
        0,1721,1723,5,135,0,0,1722,1721,1,0,0,0,1722,1723,1,0,0,0,1723,1725,
        1,0,0,0,1724,1720,1,0,0,0,1724,1725,1,0,0,0,1725,1736,1,0,0,0,1726,
        1728,5,13,0,0,1727,1729,5,135,0,0,1728,1727,1,0,0,0,1728,1729,1,
        0,0,0,1729,1734,1,0,0,0,1730,1732,3,312,156,0,1731,1733,5,135,0,
        0,1732,1731,1,0,0,0,1732,1733,1,0,0,0,1733,1735,1,0,0,0,1734,1730,
        1,0,0,0,1734,1735,1,0,0,0,1735,1737,1,0,0,0,1736,1726,1,0,0,0,1736,
        1737,1,0,0,0,1737,225,1,0,0,0,1738,1739,3,328,164,0,1739,227,1,0,
        0,0,1740,1741,3,328,164,0,1741,229,1,0,0,0,1742,1747,3,270,135,0,
        1743,1745,5,135,0,0,1744,1743,1,0,0,0,1744,1745,1,0,0,0,1745,1746,
        1,0,0,0,1746,1748,3,268,134,0,1747,1744,1,0,0,0,1748,1749,1,0,0,
        0,1749,1747,1,0,0,0,1749,1750,1,0,0,0,1750,231,1,0,0,0,1751,1752,
        3,234,117,0,1752,233,1,0,0,0,1753,1760,3,236,118,0,1754,1755,5,135,
        0,0,1755,1756,5,83,0,0,1756,1757,5,135,0,0,1757,1759,3,236,118,0,
        1758,1754,1,0,0,0,1759,1762,1,0,0,0,1760,1758,1,0,0,0,1760,1761,
        1,0,0,0,1761,235,1,0,0,0,1762,1760,1,0,0,0,1763,1770,3,238,119,0,
        1764,1765,5,135,0,0,1765,1766,5,84,0,0,1766,1767,5,135,0,0,1767,
        1769,3,238,119,0,1768,1764,1,0,0,0,1769,1772,1,0,0,0,1770,1768,1,
        0,0,0,1770,1771,1,0,0,0,1771,237,1,0,0,0,1772,1770,1,0,0,0,1773,
        1780,3,240,120,0,1774,1775,5,135,0,0,1775,1776,5,85,0,0,1776,1777,
        5,135,0,0,1777,1779,3,240,120,0,1778,1774,1,0,0,0,1779,1782,1,0,
        0,0,1780,1778,1,0,0,0,1780,1781,1,0,0,0,1781,239,1,0,0,0,1782,1780,
        1,0,0,0,1783,1785,5,86,0,0,1784,1786,5,135,0,0,1785,1784,1,0,0,0,
        1785,1786,1,0,0,0,1786,1788,1,0,0,0,1787,1783,1,0,0,0,1788,1791,
        1,0,0,0,1789,1787,1,0,0,0,1789,1790,1,0,0,0,1790,1792,1,0,0,0,1791,
        1789,1,0,0,0,1792,1793,3,242,121,0,1793,241,1,0,0,0,1794,1806,3,
        68,34,0,1795,1797,5,135,0,0,1796,1795,1,0,0,0,1796,1797,1,0,0,0,
        1797,1798,1,0,0,0,1798,1800,3,258,129,0,1799,1801,5,135,0,0,1800,
        1799,1,0,0,0,1800,1801,1,0,0,0,1801,1802,1,0,0,0,1802,1803,3,68,
        34,0,1803,1805,1,0,0,0,1804,1796,1,0,0,0,1805,1808,1,0,0,0,1806,
        1804,1,0,0,0,1806,1807,1,0,0,0,1807,243,1,0,0,0,1808,1806,1,0,0,
        0,1809,1810,5,135,0,0,1810,1811,5,87,0,0,1811,1812,5,135,0,0,1812,
        1820,5,71,0,0,1813,1814,5,135,0,0,1814,1815,5,88,0,0,1815,1816,5,
        135,0,0,1816,1820,5,71,0,0,1817,1818,5,135,0,0,1818,1820,5,89,0,
        0,1819,1809,1,0,0,0,1819,1813,1,0,0,0,1819,1817,1,0,0,0,1820,1822,
        1,0,0,0,1821,1823,5,135,0,0,1822,1821,1,0,0,0,1822,1823,1,0,0,0,
        1823,1824,1,0,0,0,1824,1825,3,250,125,0,1825,245,1,0,0,0,1826,1827,
        5,135,0,0,1827,1829,5,90,0,0,1828,1830,5,135,0,0,1829,1828,1,0,0,
        0,1829,1830,1,0,0,0,1830,1831,1,0,0,0,1831,1832,3,250,125,0,1832,
        247,1,0,0,0,1833,1834,5,135,0,0,1834,1835,5,91,0,0,1835,1836,5,135,
        0,0,1836,1844,5,92,0,0,1837,1838,5,135,0,0,1838,1839,5,91,0,0,1839,
        1840,5,135,0,0,1840,1841,5,86,0,0,1841,1842,5,135,0,0,1842,1844,
        5,92,0,0,1843,1833,1,0,0,0,1843,1837,1,0,0,0,1844,249,1,0,0,0,1845,
        1866,3,260,130,0,1846,1848,5,135,0,0,1847,1846,1,0,0,0,1847,1848,
        1,0,0,0,1848,1849,1,0,0,0,1849,1851,3,256,128,0,1850,1852,5,135,
        0,0,1851,1850,1,0,0,0,1851,1852,1,0,0,0,1852,1853,1,0,0,0,1853,1854,
        3,260,130,0,1854,1865,1,0,0,0,1855,1857,5,135,0,0,1856,1855,1,0,
        0,0,1856,1857,1,0,0,0,1857,1858,1,0,0,0,1858,1860,3,256,128,0,1859,
        1861,5,135,0,0,1860,1859,1,0,0,0,1860,1861,1,0,0,0,1861,1862,1,0,
        0,0,1862,1863,3,260,130,0,1863,1865,1,0,0,0,1864,1847,1,0,0,0,1864,
        1856,1,0,0,0,1865,1868,1,0,0,0,1866,1864,1,0,0,0,1866,1867,1,0,0,
        0,1867,251,1,0,0,0,1868,1866,1,0,0,0,1869,1870,7,1,0,0,1870,253,
        1,0,0,0,1871,1872,5,16,0,0,1872,255,1,0,0,0,1873,1874,7,2,0,0,1874,
        257,1,0,0,0,1875,1876,7,3,0,0,1876,259,1,0,0,0,1877,1907,3,262,131,
        0,1878,1880,5,135,0,0,1879,1878,1,0,0,0,1879,1880,1,0,0,0,1880,1881,
        1,0,0,0,1881,1883,3,252,126,0,1882,1884,5,135,0,0,1883,1882,1,0,
        0,0,1883,1884,1,0,0,0,1884,1885,1,0,0,0,1885,1886,3,262,131,0,1886,
        1906,1,0,0,0,1887,1889,5,135,0,0,1888,1887,1,0,0,0,1888,1889,1,0,
        0,0,1889,1890,1,0,0,0,1890,1892,3,252,126,0,1891,1893,5,135,0,0,
        1892,1891,1,0,0,0,1892,1893,1,0,0,0,1893,1894,1,0,0,0,1894,1895,
        3,262,131,0,1895,1906,1,0,0,0,1896,1898,5,135,0,0,1897,1896,1,0,
        0,0,1897,1898,1,0,0,0,1898,1899,1,0,0,0,1899,1901,3,252,126,0,1900,
        1902,5,135,0,0,1901,1900,1,0,0,0,1901,1902,1,0,0,0,1902,1903,1,0,
        0,0,1903,1904,3,262,131,0,1904,1906,1,0,0,0,1905,1879,1,0,0,0,1905,
        1888,1,0,0,0,1905,1897,1,0,0,0,1906,1909,1,0,0,0,1907,1905,1,0,0,
        0,1907,1908,1,0,0,0,1908,261,1,0,0,0,1909,1907,1,0,0,0,1910,1922,
        3,264,132,0,1911,1913,5,135,0,0,1912,1911,1,0,0,0,1912,1913,1,0,
        0,0,1913,1914,1,0,0,0,1914,1916,3,254,127,0,1915,1917,5,135,0,0,
        1916,1915,1,0,0,0,1916,1917,1,0,0,0,1917,1918,1,0,0,0,1918,1919,
        3,264,132,0,1919,1921,1,0,0,0,1920,1912,1,0,0,0,1921,1924,1,0,0,
        0,1922,1920,1,0,0,0,1922,1923,1,0,0,0,1923,263,1,0,0,0,1924,1922,
        1,0,0,0,1925,1932,3,70,35,0,1926,1928,7,2,0,0,1927,1929,5,135,0,
        0,1928,1927,1,0,0,0,1928,1929,1,0,0,0,1929,1930,1,0,0,0,1930,1932,
        3,70,35,0,1931,1925,1,0,0,0,1931,1926,1,0,0,0,1932,265,1,0,0,0,1933,
        1940,3,270,135,0,1934,1936,5,135,0,0,1935,1934,1,0,0,0,1935,1936,
        1,0,0,0,1936,1937,1,0,0,0,1937,1939,3,268,134,0,1938,1935,1,0,0,
        0,1939,1942,1,0,0,0,1940,1938,1,0,0,0,1940,1941,1,0,0,0,1941,1947,
        1,0,0,0,1942,1940,1,0,0,0,1943,1945,5,135,0,0,1944,1943,1,0,0,0,
        1944,1945,1,0,0,0,1945,1946,1,0,0,0,1946,1948,3,220,110,0,1947,1944,
        1,0,0,0,1947,1948,1,0,0,0,1948,267,1,0,0,0,1949,1951,5,1,0,0,1950,
        1952,5,135,0,0,1951,1950,1,0,0,0,1951,1952,1,0,0,0,1952,1953,1,0,
        0,0,1953,1954,3,324,162,0,1954,269,1,0,0,0,1955,1980,3,306,153,0,
        1956,1980,3,326,163,0,1957,1980,3,272,136,0,1958,1960,5,93,0,0,1959,
        1961,5,135,0,0,1960,1959,1,0,0,0,1960,1961,1,0,0,0,1961,1962,1,0,
        0,0,1962,1964,5,8,0,0,1963,1965,5,135,0,0,1964,1963,1,0,0,0,1964,
        1965,1,0,0,0,1965,1966,1,0,0,0,1966,1968,5,5,0,0,1967,1969,5,135,
        0,0,1968,1967,1,0,0,0,1968,1969,1,0,0,0,1969,1970,1,0,0,0,1970,1980,
        5,9,0,0,1971,1980,3,276,138,0,1972,1980,3,278,139,0,1973,1980,3,
        280,140,0,1974,1980,3,282,141,0,1975,1980,3,284,142,0,1976,1980,
        3,288,144,0,1977,1980,3,42,21,0,1978,1980,3,304,152,0,1979,1955,
        1,0,0,0,1979,1956,1,0,0,0,1979,1957,1,0,0,0,1979,1958,1,0,0,0,1979,
        1971,1,0,0,0,1979,1972,1,0,0,0,1979,1973,1,0,0,0,1979,1974,1,0,0,
        0,1979,1975,1,0,0,0,1979,1976,1,0,0,0,1979,1977,1,0,0,0,1979,1978,
        1,0,0,0,1980,271,1,0,0,0,1981,1986,5,94,0,0,1982,1984,5,135,0,0,
        1983,1982,1,0,0,0,1983,1984,1,0,0,0,1984,1985,1,0,0,0,1985,1987,
        3,274,137,0,1986,1983,1,0,0,0,1987,1988,1,0,0,0,1988,1986,1,0,0,
        0,1988,1989,1,0,0,0,1989,2004,1,0,0,0,1990,1992,5,94,0,0,1991,1993,
        5,135,0,0,1992,1991,1,0,0,0,1992,1993,1,0,0,0,1993,1994,1,0,0,0,
        1994,1999,3,232,116,0,1995,1997,5,135,0,0,1996,1995,1,0,0,0,1996,
        1997,1,0,0,0,1997,1998,1,0,0,0,1998,2000,3,274,137,0,1999,1996,1,
        0,0,0,2000,2001,1,0,0,0,2001,1999,1,0,0,0,2001,2002,1,0,0,0,2002,
        2004,1,0,0,0,2003,1981,1,0,0,0,2003,1990,1,0,0,0,2004,2013,1,0,0,
        0,2005,2007,5,135,0,0,2006,2005,1,0,0,0,2006,2007,1,0,0,0,2007,2008,
        1,0,0,0,2008,2010,5,95,0,0,2009,2011,5,135,0,0,2010,2009,1,0,0,0,
        2010,2011,1,0,0,0,2011,2012,1,0,0,0,2012,2014,3,232,116,0,2013,2006,
        1,0,0,0,2013,2014,1,0,0,0,2014,2016,1,0,0,0,2015,2017,5,135,0,0,
        2016,2015,1,0,0,0,2016,2017,1,0,0,0,2017,2018,1,0,0,0,2018,2019,
        5,96,0,0,2019,273,1,0,0,0,2020,2022,5,97,0,0,2021,2023,5,135,0,0,
        2022,2021,1,0,0,0,2022,2023,1,0,0,0,2023,2024,1,0,0,0,2024,2026,
        3,232,116,0,2025,2027,5,135,0,0,2026,2025,1,0,0,0,2026,2027,1,0,
        0,0,2027,2028,1,0,0,0,2028,2030,5,98,0,0,2029,2031,5,135,0,0,2030,
        2029,1,0,0,0,2030,2031,1,0,0,0,2031,2032,1,0,0,0,2032,2033,3,232,
        116,0,2033,275,1,0,0,0,2034,2036,5,11,0,0,2035,2037,5,135,0,0,2036,
        2035,1,0,0,0,2036,2037,1,0,0,0,2037,2038,1,0,0,0,2038,2047,3,44,
        22,0,2039,2041,5,135,0,0,2040,2039,1,0,0,0,2040,2041,1,0,0,0,2041,
        2042,1,0,0,0,2042,2044,5,25,0,0,2043,2045,5,135,0,0,2044,2043,1,
        0,0,0,2044,2045,1,0,0,0,2045,2046,1,0,0,0,2046,2048,3,232,116,0,
        2047,2040,1,0,0,0,2047,2048,1,0,0,0,2048,2050,1,0,0,0,2049,2051,
        5,135,0,0,2050,2049,1,0,0,0,2050,2051,1,0,0,0,2051,2052,1,0,0,0,
        2052,2053,5,12,0,0,2053,277,1,0,0,0,2054,2056,5,11,0,0,2055,2057,
        5,135,0,0,2056,2055,1,0,0,0,2056,2057,1,0,0,0,2057,2066,1,0,0,0,
        2058,2060,3,304,152,0,2059,2061,5,135,0,0,2060,2059,1,0,0,0,2060,
        2061,1,0,0,0,2061,2062,1,0,0,0,2062,2064,5,2,0,0,2063,2065,5,135,
        0,0,2064,2063,1,0,0,0,2064,2065,1,0,0,0,2065,2067,1,0,0,0,2066,2058,
        1,0,0,0,2066,2067,1,0,0,0,2067,2068,1,0,0,0,2068,2070,3,210,105,
        0,2069,2071,5,135,0,0,2070,2069,1,0,0,0,2070,2071,1,0,0,0,2071,2076,
        1,0,0,0,2072,2074,3,202,101,0,2073,2075,5,135,0,0,2074,2073,1,0,
        0,0,2074,2075,1,0,0,0,2075,2077,1,0,0,0,2076,2072,1,0,0,0,2076,2077,
        1,0,0,0,2077,2078,1,0,0,0,2078,2080,5,25,0,0,2079,2081,5,135,0,0,
        2080,2079,1,0,0,0,2080,2081,1,0,0,0,2081,2082,1,0,0,0,2082,2084,
        3,232,116,0,2083,2085,5,135,0,0,2084,2083,1,0,0,0,2084,2085,1,0,
        0,0,2085,2086,1,0,0,0,2086,2087,5,12,0,0,2087,279,1,0,0,0,2088,2090,
        5,57,0,0,2089,2091,5,135,0,0,2090,2089,1,0,0,0,2090,2091,1,0,0,0,
        2091,2092,1,0,0,0,2092,2094,5,8,0,0,2093,2095,5,135,0,0,2094,2093,
        1,0,0,0,2094,2095,1,0,0,0,2095,2096,1,0,0,0,2096,2098,3,44,22,0,
        2097,2099,5,135,0,0,2098,2097,1,0,0,0,2098,2099,1,0,0,0,2099,2100,
        1,0,0,0,2100,2101,5,9,0,0,2101,2145,1,0,0,0,2102,2104,5,99,0,0,2103,
        2105,5,135,0,0,2104,2103,1,0,0,0,2104,2105,1,0,0,0,2105,2106,1,0,
        0,0,2106,2108,5,8,0,0,2107,2109,5,135,0,0,2108,2107,1,0,0,0,2108,
        2109,1,0,0,0,2109,2110,1,0,0,0,2110,2112,3,44,22,0,2111,2113,5,135,
        0,0,2112,2111,1,0,0,0,2112,2113,1,0,0,0,2113,2114,1,0,0,0,2114,2115,
        5,9,0,0,2115,2145,1,0,0,0,2116,2118,5,100,0,0,2117,2119,5,135,0,
        0,2118,2117,1,0,0,0,2118,2119,1,0,0,0,2119,2120,1,0,0,0,2120,2122,
        5,8,0,0,2121,2123,5,135,0,0,2122,2121,1,0,0,0,2122,2123,1,0,0,0,
        2123,2124,1,0,0,0,2124,2126,3,44,22,0,2125,2127,5,135,0,0,2126,2125,
        1,0,0,0,2126,2127,1,0,0,0,2127,2128,1,0,0,0,2128,2129,5,9,0,0,2129,
        2145,1,0,0,0,2130,2132,5,101,0,0,2131,2133,5,135,0,0,2132,2131,1,
        0,0,0,2132,2133,1,0,0,0,2133,2134,1,0,0,0,2134,2136,5,8,0,0,2135,
        2137,5,135,0,0,2136,2135,1,0,0,0,2136,2137,1,0,0,0,2137,2138,1,0,
        0,0,2138,2140,3,44,22,0,2139,2141,5,135,0,0,2140,2139,1,0,0,0,2140,
        2141,1,0,0,0,2141,2142,1,0,0,0,2142,2143,5,9,0,0,2143,2145,1,0,0,
        0,2144,2088,1,0,0,0,2144,2102,1,0,0,0,2144,2116,1,0,0,0,2144,2130,
        1,0,0,0,2145,281,1,0,0,0,2146,2147,3,210,105,0,2147,283,1,0,0,0,
        2148,2150,5,8,0,0,2149,2151,5,135,0,0,2150,2149,1,0,0,0,2150,2151,
        1,0,0,0,2151,2152,1,0,0,0,2152,2154,3,232,116,0,2153,2155,5,135,
        0,0,2154,2153,1,0,0,0,2154,2155,1,0,0,0,2155,2156,1,0,0,0,2156,2157,
        5,9,0,0,2157,285,1,0,0,0,2158,2159,3,304,152,0,2159,2160,5,135,0,
        0,2160,2161,5,90,0,0,2161,2162,5,135,0,0,2162,2163,3,232,116,0,2163,
        287,1,0,0,0,2164,2166,3,292,146,0,2165,2167,5,135,0,0,2166,2165,
        1,0,0,0,2166,2167,1,0,0,0,2167,2168,1,0,0,0,2168,2170,5,8,0,0,2169,
        2171,5,135,0,0,2170,2169,1,0,0,0,2170,2171,1,0,0,0,2171,2176,1,0,
        0,0,2172,2174,5,73,0,0,2173,2175,5,135,0,0,2174,2173,1,0,0,0,2174,
        2175,1,0,0,0,2175,2177,1,0,0,0,2176,2172,1,0,0,0,2176,2177,1,0,0,
        0,2177,2195,1,0,0,0,2178,2180,3,290,145,0,2179,2181,5,135,0,0,2180,
        2179,1,0,0,0,2180,2181,1,0,0,0,2181,2192,1,0,0,0,2182,2184,5,4,0,
        0,2183,2185,5,135,0,0,2184,2183,1,0,0,0,2184,2185,1,0,0,0,2185,2186,
        1,0,0,0,2186,2188,3,290,145,0,2187,2189,5,135,0,0,2188,2187,1,0,
        0,0,2188,2189,1,0,0,0,2189,2191,1,0,0,0,2190,2182,1,0,0,0,2191,2194,
        1,0,0,0,2192,2190,1,0,0,0,2192,2193,1,0,0,0,2193,2196,1,0,0,0,2194,
        2192,1,0,0,0,2195,2178,1,0,0,0,2195,2196,1,0,0,0,2196,2197,1,0,0,
        0,2197,2198,5,9,0,0,2198,289,1,0,0,0,2199,2200,3,232,116,0,2200,
        291,1,0,0,0,2201,2202,3,302,151,0,2202,2203,3,146,73,0,2203,293,
        1,0,0,0,2204,2206,3,300,150,0,2205,2207,5,135,0,0,2206,2205,1,0,
        0,0,2206,2207,1,0,0,0,2207,2208,1,0,0,0,2208,2210,5,8,0,0,2209,2211,
        5,135,0,0,2210,2209,1,0,0,0,2210,2211,1,0,0,0,2211,2229,1,0,0,0,
        2212,2214,3,232,116,0,2213,2215,5,135,0,0,2214,2213,1,0,0,0,2214,
        2215,1,0,0,0,2215,2226,1,0,0,0,2216,2218,5,4,0,0,2217,2219,5,135,
        0,0,2218,2217,1,0,0,0,2218,2219,1,0,0,0,2219,2220,1,0,0,0,2220,2222,
        3,232,116,0,2221,2223,5,135,0,0,2222,2221,1,0,0,0,2222,2223,1,0,
        0,0,2223,2225,1,0,0,0,2224,2216,1,0,0,0,2225,2228,1,0,0,0,2226,2224,
        1,0,0,0,2226,2227,1,0,0,0,2227,2230,1,0,0,0,2228,2226,1,0,0,0,2229,
        2212,1,0,0,0,2229,2230,1,0,0,0,2230,2231,1,0,0,0,2231,2232,5,9,0,
        0,2232,295,1,0,0,0,2233,2234,3,300,150,0,2234,297,1,0,0,0,2235,2236,
        3,146,73,0,2236,299,1,0,0,0,2237,2238,3,302,151,0,2238,2239,3,146,
        73,0,2239,301,1,0,0,0,2240,2241,3,146,73,0,2241,2242,5,1,0,0,2242,
        2244,1,0,0,0,2243,2240,1,0,0,0,2244,2247,1,0,0,0,2245,2243,1,0,0,
        0,2245,2246,1,0,0,0,2246,303,1,0,0,0,2247,2245,1,0,0,0,2248,2249,
        3,146,73,0,2249,305,1,0,0,0,2250,2257,3,308,154,0,2251,2257,5,92,
        0,0,2252,2257,3,310,155,0,2253,2257,5,117,0,0,2254,2257,3,316,158,
        0,2255,2257,3,320,160,0,2256,2250,1,0,0,0,2256,2251,1,0,0,0,2256,
        2252,1,0,0,0,2256,2253,1,0,0,0,2256,2254,1,0,0,0,2256,2255,1,0,0,
        0,2257,307,1,0,0,0,2258,2259,7,7,0,0,2259,309,1,0,0,0,2260,2263,
        3,314,157,0,2261,2263,3,312,156,0,2262,2260,1,0,0,0,2262,2261,1,
        0,0,0,2263,311,1,0,0,0,2264,2265,7,8,0,0,2265,313,1,0,0,0,2266,2267,
        7,9,0,0,2267,315,1,0,0,0,2268,2270,5,11,0,0,2269,2271,5,135,0,0,
        2270,2269,1,0,0,0,2270,2271,1,0,0,0,2271,2289,1,0,0,0,2272,2274,
        3,318,159,0,2273,2275,5,135,0,0,2274,2273,1,0,0,0,2274,2275,1,0,
        0,0,2275,2286,1,0,0,0,2276,2278,5,4,0,0,2277,2279,5,135,0,0,2278,
        2277,1,0,0,0,2278,2279,1,0,0,0,2279,2280,1,0,0,0,2280,2282,3,318,
        159,0,2281,2283,5,135,0,0,2282,2281,1,0,0,0,2282,2283,1,0,0,0,2283,
        2285,1,0,0,0,2284,2276,1,0,0,0,2285,2288,1,0,0,0,2286,2284,1,0,0,
        0,2286,2287,1,0,0,0,2287,2290,1,0,0,0,2288,2286,1,0,0,0,2289,2272,
        1,0,0,0,2289,2290,1,0,0,0,2290,2291,1,0,0,0,2291,2292,5,12,0,0,2292,
        317,1,0,0,0,2293,2294,3,232,116,0,2294,319,1,0,0,0,2295,2297,5,6,
        0,0,2296,2298,5,135,0,0,2297,2296,1,0,0,0,2297,2298,1,0,0,0,2298,
        2310,1,0,0,0,2299,2307,3,322,161,0,2300,2302,5,4,0,0,2301,2303,5,
        135,0,0,2302,2301,1,0,0,0,2302,2303,1,0,0,0,2303,2304,1,0,0,0,2304,
        2306,3,322,161,0,2305,2300,1,0,0,0,2306,2309,1,0,0,0,2307,2305,1,
        0,0,0,2307,2308,1,0,0,0,2308,2311,1,0,0,0,2309,2307,1,0,0,0,2310,
        2299,1,0,0,0,2310,2311,1,0,0,0,2311,2312,1,0,0,0,2312,2313,5,7,0,
        0,2313,321,1,0,0,0,2314,2316,3,324,162,0,2315,2317,5,135,0,0,2316,
        2315,1,0,0,0,2316,2317,1,0,0,0,2317,2318,1,0,0,0,2318,2320,5,10,
        0,0,2319,2321,5,135,0,0,2320,2319,1,0,0,0,2320,2321,1,0,0,0,2321,
        2322,1,0,0,0,2322,2324,3,232,116,0,2323,2325,5,135,0,0,2324,2323,
        1,0,0,0,2324,2325,1,0,0,0,2325,323,1,0,0,0,2326,2327,3,328,164,0,
        2327,325,1,0,0,0,2328,2331,5,26,0,0,2329,2332,3,146,73,0,2330,2332,
        5,106,0,0,2331,2329,1,0,0,0,2331,2330,1,0,0,0,2332,327,1,0,0,0,2333,
        2336,3,146,73,0,2334,2336,3,148,74,0,2335,2333,1,0,0,0,2335,2334,
        1,0,0,0,2336,329,1,0,0,0,2337,2338,7,10,0,0,2338,331,1,0,0,0,2339,
        2340,7,11,0,0,2340,333,1,0,0,0,2341,2342,7,12,0,0,2342,335,1,0,0,
        0,417,339,343,347,351,355,357,360,363,370,373,376,380,384,386,388,
        392,398,401,408,411,416,422,425,430,434,440,444,450,454,460,464,
        470,474,478,484,487,491,497,500,504,508,512,517,524,529,533,537,
        541,545,550,557,562,566,572,578,584,589,595,598,604,606,610,614,
        619,623,626,633,637,641,646,650,655,660,663,667,671,676,679,681,
        684,690,693,697,703,709,713,719,723,728,732,736,740,746,750,756,
        760,762,766,768,772,774,778,780,786,790,797,805,808,814,818,820,
        823,827,831,833,837,841,843,847,849,852,856,858,862,864,873,877,
        881,883,887,894,898,902,912,917,920,923,925,928,934,939,944,955,
        959,963,967,971,974,991,1001,1011,1016,1020,1027,1031,1037,1053,
        1057,1061,1066,1070,1074,1076,1094,1097,1104,1118,1122,1126,1131,
        1135,1140,1144,1148,1150,1155,1159,1165,1171,1174,1178,1182,1184,
        1189,1194,1198,1201,1205,1210,1213,1216,1218,1221,1226,1233,1237,
        1241,1251,1258,1262,1265,1268,1276,1281,1288,1293,1296,1300,1304,
        1308,1314,1318,1323,1328,1332,1335,1337,1342,1349,1353,1363,1370,
        1383,1387,1393,1397,1401,1406,1413,1417,1422,1429,1433,1437,1442,
        1446,1449,1456,1461,1464,1470,1473,1479,1483,1487,1491,1495,1500,
        1505,1509,1514,1517,1526,1535,1540,1553,1556,1564,1568,1573,1580,
        1585,1592,1596,1601,1605,1611,1615,1618,1621,1625,1631,1635,1638,
        1641,1647,1650,1653,1657,1663,1666,1669,1673,1677,1681,1685,1689,
        1692,1697,1702,1707,1712,1718,1722,1724,1728,1732,1734,1736,1744,
        1749,1760,1770,1780,1785,1789,1796,1800,1806,1819,1822,1829,1843,
        1847,1851,1856,1860,1864,1866,1879,1883,1888,1892,1897,1901,1905,
        1907,1912,1916,1922,1928,1931,1935,1940,1944,1947,1951,1960,1964,
        1968,1979,1983,1988,1992,1996,2001,2003,2006,2010,2013,2016,2022,
        2026,2030,2036,2040,2044,2047,2050,2056,2060,2064,2066,2070,2074,
        2076,2080,2084,2090,2094,2098,2104,2108,2112,2118,2122,2126,2132,
        2136,2140,2144,2150,2154,2166,2170,2174,2176,2180,2184,2188,2192,
        2195,2206,2210,2214,2218,2222,2226,2229,2245,2256,2262,2270,2274,
        2278,2282,2286,2289,2297,2302,2307,2310,2316,2320,2324,2331,2335
    ]

class s_cypherParser ( Parser ):

    grammarFileName = "s_cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "'='", "'+='", "','", "'*'", "'{'", 
                     "'}'", "'('", "')'", "':'", "'['", "']'", "'..'", "'/'", 
                     "'%'", "'^'", "'+'", "'-'", "'<>'", "'<'", "'<='", 
                     "'>'", "'>='", "';'", "'|'", "'$'", "'\\u27E8'", "'\\u3008'", 
                     "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
                     "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", 
                     "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", 
                     "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
                     "'\\uFF0D'", "<INVALID>", "<INVALID>", "'NOW'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "AtT", "PoundValue", "NOW", 
                      "AT_TIME", "SNAPSHOT", "BETWEEN", "SCOPE", "STALE", 
                      "DURING", "OVERLAPS", "UNION", "ALL", "OPTIONAL", 
                      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", 
                      "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", 
                      "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", 
                      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
                      "WHERE", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", 
                      "CONTAINS", "IN", "IS", "NULL", "COUNT", "CASE", "ELSE", 
                      "END", "WHEN", "THEN", "ANY", "NONE", "SINGLE", "EXISTS", 
                      "TRUE", "FALSE", "HexInteger", "DecimalInteger", "OctalInteger", 
                      "HexLetter", "HexDigit", "Digit", "NonZeroDigit", 
                      "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", 
                      "RegularDecimalReal", "StringLiteral", "EscapedChar", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Query = 0
    RULE_oC_Match = 1
    RULE_oC_UpdatingClause = 2
    RULE_oC_SetItem = 3
    RULE_s_SetPropertyItemOne = 4
    RULE_s_SetPropertyItemTwo = 5
    RULE_s_SetValueItem = 6
    RULE_s_SetValueItemExpression = 7
    RULE_s_Stale = 8
    RULE_s_StaleItem = 9
    RULE_oC_Delete = 10
    RULE_s_DeleteItem = 11
    RULE_s_AtTime = 12
    RULE_s_Between = 13
    RULE_s_TimeWindowLimit = 14
    RULE_oC_InQueryCall = 15
    RULE_oC_StandaloneCall = 16
    RULE_s_YieldItems = 17
    RULE_s_YieldItem = 18
    RULE_s_WithPartQuery = 19
    RULE_s_With = 20
    RULE_oC_ExistentialSubquery = 21
    RULE_oC_FilterExpression = 22
    RULE_s_Snapshot = 23
    RULE_s_Scope = 24
    RULE_oC_PatternPart = 25
    RULE_s_PathFunctionPattern = 26
    RULE_s_SinglePathPattern = 27
    RULE_oC_NodePattern = 28
    RULE_s_Properties = 29
    RULE_s_PropertiesPattern = 30
    RULE_s_PropertyNode = 31
    RULE_s_ValueNode = 32
    RULE_oC_RelationshipDetail = 33
    RULE_oC_StringListNullPredicateExpression = 34
    RULE_oC_ListOperatorExpression = 35
    RULE_s_SingleIndexExpression = 36
    RULE_s_DoubleIndexExpression = 37
    RULE_s_LeftExpression = 38
    RULE_s_RightExpression = 39
    RULE_s_AtTExpression = 40
    RULE_s_PropertyLookupTime = 41
    RULE_s_PropertyLookup = 42
    RULE_s_TimePredicateExpression = 43
    RULE_s_AtTElement = 44
    RULE_s_Where = 45
    RULE_s_WhereExpression = 46
    RULE_s_OrWhereExpression = 47
    RULE_s_XorWhereExpression = 48
    RULE_s_AndWhereExpression = 49
    RULE_s_NotWhereExpression = 50
    RULE_s_ComparisonWhereExpression = 51
    RULE_s_MultiplyDivideModuloWhereOperator = 52
    RULE_s_PowerOfWhereOperator = 53
    RULE_s_AddOrSubtractWhereOperator = 54
    RULE_s_ComparisonWhereOperator = 55
    RULE_s_StringListNullPredicateWhereExpression = 56
    RULE_s_AddOrSubtractWhereExpression = 57
    RULE_s_TimePredicateWhereExpression = 58
    RULE_s_StringPredicateWhereExpression = 59
    RULE_s_ListPredicateWhereExpression = 60
    RULE_s_NullPredicateWhereExpression = 61
    RULE_s_MultiplyDivideModuloWhereExpression = 62
    RULE_s_PowerOfWhereExpression = 63
    RULE_s_UnaryAddOrSubtractWhereExpression = 64
    RULE_s_ListOperatorWhereExpression = 65
    RULE_s_PropertyOrLabelsWhereExpression = 66
    RULE_s_AtTWhereExpression = 67
    RULE_s_SingleIndexWhereExpression = 68
    RULE_s_DoubleIndexWhereExpression = 69
    RULE_s_LeftWhereExpression = 70
    RULE_s_RightWhereExpression = 71
    RULE_s_TimePointLiteral = 72
    RULE_oC_SymbolicName = 73
    RULE_oC_ReservedWord = 74
    RULE_oC_Cypher = 75
    RULE_oC_Statement = 76
    RULE_oC_RegularQuery = 77
    RULE_oC_Union = 78
    RULE_oC_SingleQuery = 79
    RULE_oC_SinglePartQuery = 80
    RULE_oC_MultiPartQuery = 81
    RULE_oC_ReadingClause = 82
    RULE_oC_Unwind = 83
    RULE_oC_Merge = 84
    RULE_oC_MergeAction = 85
    RULE_oC_Create = 86
    RULE_oC_Set = 87
    RULE_oC_Remove = 88
    RULE_oC_RemoveItem = 89
    RULE_oC_YieldItems = 90
    RULE_oC_YieldItem = 91
    RULE_oC_With = 92
    RULE_oC_Return = 93
    RULE_oC_ProjectionBody = 94
    RULE_oC_ProjectionItems = 95
    RULE_oC_ProjectionItem = 96
    RULE_oC_Order = 97
    RULE_oC_Skip = 98
    RULE_oC_Limit = 99
    RULE_oC_SortItem = 100
    RULE_oC_Where = 101
    RULE_oC_Pattern = 102
    RULE_oC_AnonymousPatternPart = 103
    RULE_oC_PatternElement = 104
    RULE_oC_RelationshipsPattern = 105
    RULE_oC_PatternElementChain = 106
    RULE_oC_RelationshipPattern = 107
    RULE_oC_Properties = 108
    RULE_oC_RelationshipTypes = 109
    RULE_oC_NodeLabels = 110
    RULE_oC_NodeLabel = 111
    RULE_oC_RangeLiteral = 112
    RULE_oC_LabelName = 113
    RULE_oC_RelTypeName = 114
    RULE_oC_PropertyExpression = 115
    RULE_oC_Expression = 116
    RULE_oC_OrExpression = 117
    RULE_oC_XorExpression = 118
    RULE_oC_AndExpression = 119
    RULE_oC_NotExpression = 120
    RULE_oC_ComparisonExpression = 121
    RULE_oC_StringPredicateExpression = 122
    RULE_oC_ListPredicateExpression = 123
    RULE_oC_NullPredicateExpression = 124
    RULE_oC_AddOrSubtractExpression = 125
    RULE_s_MultiplyDivideModuloOperator = 126
    RULE_s_PowerOfOperator = 127
    RULE_s_AddOrSubtractOperator = 128
    RULE_s_ComparisonOperator = 129
    RULE_oC_MultiplyDivideModuloExpression = 130
    RULE_oC_PowerOfExpression = 131
    RULE_oC_UnaryAddOrSubtractExpression = 132
    RULE_oC_PropertyOrLabelsExpression = 133
    RULE_oC_PropertyLookup = 134
    RULE_oC_Atom = 135
    RULE_oC_CaseExpression = 136
    RULE_oC_CaseAlternative = 137
    RULE_oC_ListComprehension = 138
    RULE_oC_PatternComprehension = 139
    RULE_oC_Quantifier = 140
    RULE_oC_PatternPredicate = 141
    RULE_oC_ParenthesizedExpression = 142
    RULE_oC_IdInColl = 143
    RULE_oC_FunctionInvocation = 144
    RULE_s_FunctionInvocationExpression = 145
    RULE_oC_FunctionName = 146
    RULE_oC_ExplicitProcedureInvocation = 147
    RULE_oC_ImplicitProcedureInvocation = 148
    RULE_oC_ProcedureResultField = 149
    RULE_oC_ProcedureName = 150
    RULE_oC_Namespace = 151
    RULE_oC_Variable = 152
    RULE_oC_Literal = 153
    RULE_oC_BooleanLiteral = 154
    RULE_oC_NumberLiteral = 155
    RULE_oC_IntegerLiteral = 156
    RULE_oC_DoubleLiteral = 157
    RULE_oC_ListLiteral = 158
    RULE_s_ListLiteralExpression = 159
    RULE_oC_MapLiteral = 160
    RULE_s_MapKeyValue = 161
    RULE_oC_PropertyKeyName = 162
    RULE_oC_Parameter = 163
    RULE_oC_SchemaName = 164
    RULE_oC_LeftArrowHead = 165
    RULE_oC_RightArrowHead = 166
    RULE_oC_Dash = 167

    ruleNames =  [ "oC_Query", "oC_Match", "oC_UpdatingClause", "oC_SetItem", 
                   "s_SetPropertyItemOne", "s_SetPropertyItemTwo", "s_SetValueItem", 
                   "s_SetValueItemExpression", "s_Stale", "s_StaleItem", 
                   "oC_Delete", "s_DeleteItem", "s_AtTime", "s_Between", 
                   "s_TimeWindowLimit", "oC_InQueryCall", "oC_StandaloneCall", 
                   "s_YieldItems", "s_YieldItem", "s_WithPartQuery", "s_With", 
                   "oC_ExistentialSubquery", "oC_FilterExpression", "s_Snapshot", 
                   "s_Scope", "oC_PatternPart", "s_PathFunctionPattern", 
                   "s_SinglePathPattern", "oC_NodePattern", "s_Properties", 
                   "s_PropertiesPattern", "s_PropertyNode", "s_ValueNode", 
                   "oC_RelationshipDetail", "oC_StringListNullPredicateExpression", 
                   "oC_ListOperatorExpression", "s_SingleIndexExpression", 
                   "s_DoubleIndexExpression", "s_LeftExpression", "s_RightExpression", 
                   "s_AtTExpression", "s_PropertyLookupTime", "s_PropertyLookup", 
                   "s_TimePredicateExpression", "s_AtTElement", "s_Where", 
                   "s_WhereExpression", "s_OrWhereExpression", "s_XorWhereExpression", 
                   "s_AndWhereExpression", "s_NotWhereExpression", "s_ComparisonWhereExpression", 
                   "s_MultiplyDivideModuloWhereOperator", "s_PowerOfWhereOperator", 
                   "s_AddOrSubtractWhereOperator", "s_ComparisonWhereOperator", 
                   "s_StringListNullPredicateWhereExpression", "s_AddOrSubtractWhereExpression", 
                   "s_TimePredicateWhereExpression", "s_StringPredicateWhereExpression", 
                   "s_ListPredicateWhereExpression", "s_NullPredicateWhereExpression", 
                   "s_MultiplyDivideModuloWhereExpression", "s_PowerOfWhereExpression", 
                   "s_UnaryAddOrSubtractWhereExpression", "s_ListOperatorWhereExpression", 
                   "s_PropertyOrLabelsWhereExpression", "s_AtTWhereExpression", 
                   "s_SingleIndexWhereExpression", "s_DoubleIndexWhereExpression", 
                   "s_LeftWhereExpression", "s_RightWhereExpression", "s_TimePointLiteral", 
                   "oC_SymbolicName", "oC_ReservedWord", "oC_Cypher", "oC_Statement", 
                   "oC_RegularQuery", "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", 
                   "oC_MultiPartQuery", "oC_ReadingClause", "oC_Unwind", 
                   "oC_Merge", "oC_MergeAction", "oC_Create", "oC_Set", 
                   "oC_Remove", "oC_RemoveItem", "oC_YieldItems", "oC_YieldItem", 
                   "oC_With", "oC_Return", "oC_ProjectionBody", "oC_ProjectionItems", 
                   "oC_ProjectionItem", "oC_Order", "oC_Skip", "oC_Limit", 
                   "oC_SortItem", "oC_Where", "oC_Pattern", "oC_AnonymousPatternPart", 
                   "oC_PatternElement", "oC_RelationshipsPattern", "oC_PatternElementChain", 
                   "oC_RelationshipPattern", "oC_Properties", "oC_RelationshipTypes", 
                   "oC_NodeLabels", "oC_NodeLabel", "oC_RangeLiteral", "oC_LabelName", 
                   "oC_RelTypeName", "oC_PropertyExpression", "oC_Expression", 
                   "oC_OrExpression", "oC_XorExpression", "oC_AndExpression", 
                   "oC_NotExpression", "oC_ComparisonExpression", "oC_StringPredicateExpression", 
                   "oC_ListPredicateExpression", "oC_NullPredicateExpression", 
                   "oC_AddOrSubtractExpression", "s_MultiplyDivideModuloOperator", 
                   "s_PowerOfOperator", "s_AddOrSubtractOperator", "s_ComparisonOperator", 
                   "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", 
                   "oC_UnaryAddOrSubtractExpression", "oC_PropertyOrLabelsExpression", 
                   "oC_PropertyLookup", "oC_Atom", "oC_CaseExpression", 
                   "oC_CaseAlternative", "oC_ListComprehension", "oC_PatternComprehension", 
                   "oC_Quantifier", "oC_PatternPredicate", "oC_ParenthesizedExpression", 
                   "oC_IdInColl", "oC_FunctionInvocation", "s_FunctionInvocationExpression", 
                   "oC_FunctionName", "oC_ExplicitProcedureInvocation", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_Variable", "oC_Literal", 
                   "oC_BooleanLiteral", "oC_NumberLiteral", "oC_IntegerLiteral", 
                   "oC_DoubleLiteral", "oC_ListLiteral", "s_ListLiteralExpression", 
                   "oC_MapLiteral", "s_MapKeyValue", "oC_PropertyKeyName", 
                   "oC_Parameter", "oC_SchemaName", "oC_LeftArrowHead", 
                   "oC_RightArrowHead", "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    AtT=46
    PoundValue=47
    NOW=48
    AT_TIME=49
    SNAPSHOT=50
    BETWEEN=51
    SCOPE=52
    STALE=53
    DURING=54
    OVERLAPS=55
    UNION=56
    ALL=57
    OPTIONAL=58
    MATCH=59
    UNWIND=60
    AS=61
    MERGE=62
    ON=63
    CREATE=64
    SET=65
    DETACH=66
    DELETE=67
    REMOVE=68
    CALL=69
    YIELD=70
    WITH=71
    RETURN=72
    DISTINCT=73
    ORDER=74
    BY=75
    L_SKIP=76
    LIMIT=77
    ASCENDING=78
    ASC=79
    DESCENDING=80
    DESC=81
    WHERE=82
    OR=83
    XOR=84
    AND=85
    NOT=86
    STARTS=87
    ENDS=88
    CONTAINS=89
    IN=90
    IS=91
    NULL=92
    COUNT=93
    CASE=94
    ELSE=95
    END=96
    WHEN=97
    THEN=98
    ANY=99
    NONE=100
    SINGLE=101
    EXISTS=102
    TRUE=103
    FALSE=104
    HexInteger=105
    DecimalInteger=106
    OctalInteger=107
    HexLetter=108
    HexDigit=109
    Digit=110
    NonZeroDigit=111
    NonZeroOctDigit=112
    OctDigit=113
    ZeroDigit=114
    ExponentDecimalReal=115
    RegularDecimalReal=116
    StringLiteral=117
    EscapedChar=118
    CONSTRAINT=119
    DO=120
    FOR=121
    REQUIRE=122
    UNIQUE=123
    MANDATORY=124
    SCALAR=125
    OF=126
    ADD=127
    DROP=128
    FILTER=129
    EXTRACT=130
    UnescapedSymbolicName=131
    IdentifierStart=132
    IdentifierPart=133
    EscapedSymbolicName=134
    SP=135
    WHITESPACE=136
    Comment=137

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StandaloneCallContext,0)


        def s_TimeWindowLimit(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimeWindowLimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = s_cypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Query)
        try:
            self.state = 339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 336
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 337
                self.oC_StandaloneCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 338
                self.s_TimeWindowLimit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_Where(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = s_cypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 341
                self.match(s_cypherParser.OPTIONAL)
                self.state = 342
                self.match(s_cypherParser.SP)


            self.state = 345
            self.match(s_cypherParser.MATCH)
            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 346
                self.match(s_cypherParser.SP)


            self.state = 349
            self.oC_Pattern()
            self.state = 357
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 350
                    self.match(s_cypherParser.SP)


                self.state = 355
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 353
                    self.s_AtTime()
                    pass
                elif token in [51]:
                    self.state = 354
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 363
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 359
                    self.match(s_cypherParser.SP)


                self.state = 362
                self.s_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Create(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CreateContext,0)


        def oC_Merge(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MergeContext,0)


        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RemoveContext,0)


        def s_Stale(self):
            return self.getTypedRuleContext(s_cypherParser.S_StaleContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Delete(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DeleteContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = s_cypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_UpdatingClause)
        self._la = 0 # Token type
        try:
            self.state = 388
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 62, 64, 65, 68]:
                self.enterOuterAlt(localctx, 1)
                self.state = 370
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [64]:
                    self.state = 365
                    self.oC_Create()
                    pass
                elif token in [62]:
                    self.state = 366
                    self.oC_Merge()
                    pass
                elif token in [65]:
                    self.state = 367
                    self.oC_Set()
                    pass
                elif token in [68]:
                    self.state = 368
                    self.oC_Remove()
                    pass
                elif token in [53]:
                    self.state = 369
                    self.s_Stale()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 376
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 373
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 372
                        self.match(s_cypherParser.SP)


                    self.state = 375
                    self.s_AtTime()


                pass
            elif token in [66, 67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 378
                self.oC_Delete()
                self.state = 386
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                if la_ == 1:
                    self.state = 380
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 379
                        self.match(s_cypherParser.SP)


                    self.state = 384
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [49]:
                        self.state = 382
                        self.s_AtTime()
                        pass
                    elif token in [51]:
                        self.state = 383
                        self.s_Between()
                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_SetPropertyItemOne(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemOneContext,0)


        def s_SetPropertyItemTwo(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemTwoContext,0)


        def s_SetValueItem(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetValueItemContext,0)


        def s_SetValueItemExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetValueItemExpressionContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = s_cypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 390
                self.oC_Variable()
                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 391
                    self.match(s_cypherParser.SP)


                self.state = 394
                self.s_AtTElement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 396
                self.oC_Variable()
                self.state = 401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 398
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 397
                        self.match(s_cypherParser.SP)


                    self.state = 400
                    self.s_AtTElement()


                self.state = 403
                self.match(s_cypherParser.T__0)
                self.state = 404
                self.s_SetPropertyItemOne()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 406
                self.oC_Variable()
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 408
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 407
                        self.match(s_cypherParser.SP)


                    self.state = 410
                    self.s_AtTElement()


                self.state = 413
                self.match(s_cypherParser.T__0)
                self.state = 414
                self.s_SetPropertyItemTwo()
                self.state = 416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 415
                    self.match(s_cypherParser.SP)


                self.state = 418
                self.s_SetValueItem()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 420
                self.oC_Variable()
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 422
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 421
                        self.match(s_cypherParser.SP)


                    self.state = 424
                    self.s_AtTElement()


                self.state = 427
                self.match(s_cypherParser.T__0)
                self.state = 428
                self.s_SetPropertyItemTwo()
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 429
                    self.match(s_cypherParser.SP)


                self.state = 432
                self.match(s_cypherParser.T__1)
                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 433
                    self.match(s_cypherParser.SP)


                self.state = 436
                self.s_SetValueItemExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 438
                self.oC_PropertyExpression()
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 439
                    self.match(s_cypherParser.SP)


                self.state = 442
                self.match(s_cypherParser.T__1)
                self.state = 444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 443
                    self.match(s_cypherParser.SP)


                self.state = 446
                self.oC_Expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 448
                self.oC_Variable()
                self.state = 450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 449
                    self.match(s_cypherParser.SP)


                self.state = 452
                self.match(s_cypherParser.T__1)
                self.state = 454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 453
                    self.match(s_cypherParser.SP)


                self.state = 456
                self.oC_Expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 458
                self.oC_Variable()
                self.state = 460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 459
                    self.match(s_cypherParser.SP)


                self.state = 462
                self.match(s_cypherParser.T__2)
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 463
                    self.match(s_cypherParser.SP)


                self.state = 466
                self.oC_Expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 468
                self.oC_Variable()
                self.state = 470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 469
                    self.match(s_cypherParser.SP)


                self.state = 472
                self.oC_NodeLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemOneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemOne

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemOne" ):
                listener.enterS_SetPropertyItemOne(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemOne" ):
                listener.exitS_SetPropertyItemOne(self)




    def s_SetPropertyItemOne(self):

        localctx = s_cypherParser.S_SetPropertyItemOneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_s_SetPropertyItemOne)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self.oC_PropertyKeyName()
            self.state = 478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 477
                self.match(s_cypherParser.SP)


            self.state = 480
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemTwoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemTwo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemTwo" ):
                listener.enterS_SetPropertyItemTwo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemTwo" ):
                listener.exitS_SetPropertyItemTwo(self)




    def s_SetPropertyItemTwo(self):

        localctx = s_cypherParser.S_SetPropertyItemTwoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_s_SetPropertyItemTwo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self.oC_PropertyKeyName()
            self.state = 487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 483
                    self.match(s_cypherParser.SP)


                self.state = 486
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetValueItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetValueItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetValueItem" ):
                listener.enterS_SetValueItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetValueItem" ):
                listener.exitS_SetValueItem(self)




    def s_SetValueItem(self):

        localctx = s_cypherParser.S_SetValueItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_s_SetValueItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.match(s_cypherParser.PoundValue)
            self.state = 491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 490
                self.match(s_cypherParser.SP)


            self.state = 493
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetValueItemExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetValueItemExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetValueItemExpression" ):
                listener.enterS_SetValueItemExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetValueItemExpression" ):
                listener.exitS_SetValueItemExpression(self)




    def s_SetValueItemExpression(self):

        localctx = s_cypherParser.S_SetValueItemExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_s_SetValueItemExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self.oC_Expression()
            self.state = 500
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 496
                    self.match(s_cypherParser.SP)


                self.state = 499
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def s_StaleItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StaleItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StaleItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Stale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Stale" ):
                listener.enterS_Stale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Stale" ):
                listener.exitS_Stale(self)




    def s_Stale(self):

        localctx = s_cypherParser.S_StaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_s_Stale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.match(s_cypherParser.STALE)
            self.state = 504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 503
                self.match(s_cypherParser.SP)


            self.state = 506
            self.s_StaleItem()
            self.state = 517
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 508
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 507
                        self.match(s_cypherParser.SP)


                    self.state = 510
                    self.match(s_cypherParser.T__3)
                    self.state = 512
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 511
                        self.match(s_cypherParser.SP)


                    self.state = 514
                    self.s_StaleItem() 
                self.state = 519
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StaleItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StaleItem" ):
                listener.enterS_StaleItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StaleItem" ):
                listener.exitS_StaleItem(self)




    def s_StaleItem(self):

        localctx = s_cypherParser.S_StaleItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_s_StaleItem)
        self._la = 0 # Token type
        try:
            self.state = 529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 520
                self.oC_Expression()
                self.state = 521
                self.match(s_cypherParser.T__0)
                self.state = 522
                self.oC_PropertyKeyName()
                self.state = 524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 523
                    self.match(s_cypherParser.SP)


                self.state = 526
                self.match(s_cypherParser.PoundValue)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 528
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def s_DeleteItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DeleteItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DeleteItemContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = s_cypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 531
                self.match(s_cypherParser.DETACH)
                self.state = 532
                self.match(s_cypherParser.SP)


            self.state = 535
            self.match(s_cypherParser.DELETE)
            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 536
                self.match(s_cypherParser.SP)


            self.state = 539
            self.s_DeleteItem()
            self.state = 550
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 541
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 540
                        self.match(s_cypherParser.SP)


                    self.state = 543
                    self.match(s_cypherParser.T__3)
                    self.state = 545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 544
                        self.match(s_cypherParser.SP)


                    self.state = 547
                    self.s_DeleteItem() 
                self.state = 552
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DeleteItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DeleteItem" ):
                listener.enterS_DeleteItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DeleteItem" ):
                listener.exitS_DeleteItem(self)




    def s_DeleteItem(self):

        localctx = s_cypherParser.S_DeleteItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_s_DeleteItem)
        self._la = 0 # Token type
        try:
            self.state = 562
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 553
                self.oC_Expression()
                self.state = 554
                self.match(s_cypherParser.T__0)
                self.state = 555
                self.oC_PropertyKeyName()
                self.state = 557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 556
                    self.match(s_cypherParser.SP)


                self.state = 559
                self.match(s_cypherParser.PoundValue)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 561
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTime" ):
                listener.enterS_AtTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTime" ):
                listener.exitS_AtTime(self)




    def s_AtTime(self):

        localctx = s_cypherParser.S_AtTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_s_AtTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.match(s_cypherParser.AT_TIME)
            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 565
                self.match(s_cypherParser.SP)


            self.state = 568
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_BetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Between

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Between" ):
                listener.enterS_Between(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Between" ):
                listener.exitS_Between(self)




    def s_Between(self):

        localctx = s_cypherParser.S_BetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_s_Between)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            self.match(s_cypherParser.BETWEEN)
            self.state = 572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 571
                self.match(s_cypherParser.SP)


            self.state = 574
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimeWindowLimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_Snapshot(self):
            return self.getTypedRuleContext(s_cypherParser.S_SnapshotContext,0)


        def s_Scope(self):
            return self.getTypedRuleContext(s_cypherParser.S_ScopeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimeWindowLimit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimeWindowLimit" ):
                listener.enterS_TimeWindowLimit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimeWindowLimit" ):
                listener.exitS_TimeWindowLimit(self)




    def s_TimeWindowLimit(self):

        localctx = s_cypherParser.S_TimeWindowLimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_s_TimeWindowLimit)
        try:
            self.state = 578
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 576
                self.s_Snapshot()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 577
                self.s_Scope()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def s_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.S_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = s_cypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self.match(s_cypherParser.CALL)
            self.state = 581
            self.match(s_cypherParser.SP)
            self.state = 582
            self.oC_ExplicitProcedureInvocation()
            self.state = 589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 583
                    self.match(s_cypherParser.SP)


                self.state = 586
                self.match(s_cypherParser.YIELD)
                self.state = 587
                self.match(s_cypherParser.SP)
                self.state = 588
                self.s_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def s_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.S_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = s_cypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_oC_StandaloneCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self.match(s_cypherParser.CALL)
            self.state = 592
            self.match(s_cypherParser.SP)
            self.state = 595
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 593
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 594
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 597
                    self.match(s_cypherParser.SP)


                self.state = 600
                self.match(s_cypherParser.YIELD)
                self.state = 601
                self.match(s_cypherParser.SP)
                self.state = 604
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [5]:
                    self.state = 602
                    self.match(s_cypherParser.T__4)
                    pass
                elif token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                    self.state = 603
                    self.s_YieldItems()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_YieldItemContext,i)


        def s_Where(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_YieldItems" ):
                listener.enterS_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_YieldItems" ):
                listener.exitS_YieldItems(self)




    def s_YieldItems(self):

        localctx = s_cypherParser.S_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_s_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.s_YieldItem()
            self.state = 619
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 610
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 609
                        self.match(s_cypherParser.SP)


                    self.state = 612
                    self.match(s_cypherParser.T__3)
                    self.state = 614
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 613
                        self.match(s_cypherParser.SP)


                    self.state = 616
                    self.s_YieldItem() 
                self.state = 621
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

            self.state = 626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 622
                    self.match(s_cypherParser.SP)


                self.state = 625
                self.s_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_YieldItem" ):
                listener.enterS_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_YieldItem" ):
                listener.exitS_YieldItem(self)




    def s_YieldItem(self):

        localctx = s_cypherParser.S_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_s_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.oC_ProcedureResultField()
            self.state = 633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 629
                self.match(s_cypherParser.SP)
                self.state = 630
                self.match(s_cypherParser.AS)
                self.state = 631
                self.match(s_cypherParser.SP)
                self.state = 632
                self.oC_Variable()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_With(self):
            return self.getTypedRuleContext(s_cypherParser.S_WithContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_WithPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_WithPartQuery" ):
                listener.enterS_WithPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_WithPartQuery" ):
                listener.exitS_WithPartQuery(self)




    def s_WithPartQuery(self):

        localctx = s_cypherParser.S_WithPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_s_WithPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                self.state = 635
                self.oC_ReadingClause()
                self.state = 637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 636
                    self.match(s_cypherParser.SP)


                self.state = 643
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64001) != 0):
                self.state = 644
                self.oC_UpdatingClause()
                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 645
                    self.match(s_cypherParser.SP)


                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 653
            self.s_With()
            self.state = 655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 654
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def s_Where(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_With" ):
                listener.enterS_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_With" ):
                listener.exitS_With(self)




    def s_With(self):

        localctx = s_cypherParser.S_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_s_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.match(s_cypherParser.WITH)
            self.state = 658
            self.oC_ProjectionBody()
            self.state = 663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 659
                    self.match(s_cypherParser.SP)


                self.state = 662
                self.s_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExistentialSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def s_Where(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExistentialSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExistentialSubquery" ):
                listener.enterOC_ExistentialSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExistentialSubquery" ):
                listener.exitOC_ExistentialSubquery(self)




    def oC_ExistentialSubquery(self):

        localctx = s_cypherParser.OC_ExistentialSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_oC_ExistentialSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.match(s_cypherParser.EXISTS)
            self.state = 667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 666
                self.match(s_cypherParser.SP)


            self.state = 669
            self.match(s_cypherParser.T__5)
            self.state = 671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 670
                self.match(s_cypherParser.SP)


            self.state = 681
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 71, 72]:
                self.state = 673
                self.oC_RegularQuery()
                pass
            elif token in [8, 48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 674
                self.oC_Pattern()
                self.state = 679
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 676
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 675
                        self.match(s_cypherParser.SP)


                    self.state = 678
                    self.s_Where()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 683
                self.match(s_cypherParser.SP)


            self.state = 686
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IdInCollContext,0)


        def s_Where(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = s_cypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.oC_IdInColl()
            self.state = 693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 689
                    self.match(s_cypherParser.SP)


                self.state = 692
                self.s_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SnapshotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Snapshot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Snapshot" ):
                listener.enterS_Snapshot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Snapshot" ):
                listener.exitS_Snapshot(self)




    def s_Snapshot(self):

        localctx = s_cypherParser.S_SnapshotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_s_Snapshot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(s_cypherParser.SNAPSHOT)
            self.state = 697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 696
                self.match(s_cypherParser.SP)


            self.state = 699
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Scope" ):
                listener.enterS_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Scope" ):
                listener.exitS_Scope(self)




    def s_Scope(self):

        localctx = s_cypherParser.S_ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_s_Scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self.match(s_cypherParser.SCOPE)
            self.state = 703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 702
                self.match(s_cypherParser.SP)


            self.state = 705
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_PathFunctionPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PathFunctionPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AnonymousPatternPartContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = s_cypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 728
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 707
                self.oC_Variable()
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 708
                    self.match(s_cypherParser.SP)


                self.state = 711
                self.match(s_cypherParser.T__1)
                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 712
                    self.match(s_cypherParser.SP)


                self.state = 715
                self.s_PathFunctionPattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 717
                self.oC_Variable()
                self.state = 719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 718
                    self.match(s_cypherParser.SP)


                self.state = 721
                self.match(s_cypherParser.T__1)
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 722
                    self.match(s_cypherParser.SP)


                self.state = 725
                self.oC_AnonymousPatternPart()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 727
                self.oC_AnonymousPatternPart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PathFunctionPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def s_SinglePathPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_SinglePathPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PathFunctionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PathFunctionPattern" ):
                listener.enterS_PathFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PathFunctionPattern" ):
                listener.exitS_PathFunctionPattern(self)




    def s_PathFunctionPattern(self):

        localctx = s_cypherParser.S_PathFunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_s_PathFunctionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.oC_FunctionName()
            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 731
                self.match(s_cypherParser.SP)


            self.state = 734
            self.match(s_cypherParser.T__7)
            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 735
                self.match(s_cypherParser.SP)


            self.state = 738
            self.s_SinglePathPattern()
            self.state = 740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 739
                self.match(s_cypherParser.SP)


            self.state = 742
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SinglePathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodePatternContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,i)


        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SinglePathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SinglePathPattern" ):
                listener.enterS_SinglePathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SinglePathPattern" ):
                listener.exitS_SinglePathPattern(self)




    def s_SinglePathPattern(self):

        localctx = s_cypherParser.S_SinglePathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_s_SinglePathPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self.oC_NodePattern()
            self.state = 746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 745
                self.match(s_cypherParser.SP)


            self.state = 748
            self.oC_RelationshipPattern()
            self.state = 750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 749
                self.match(s_cypherParser.SP)


            self.state = 752
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def s_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = s_cypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.match(s_cypherParser.T__7)
            self.state = 756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 755
                self.match(s_cypherParser.SP)


            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 758
                self.oC_Variable()
                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 759
                    self.match(s_cypherParser.SP)




            self.state = 768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 764
                self.oC_NodeLabels()
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 765
                    self.match(s_cypherParser.SP)




            self.state = 774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 770
                self.s_AtTElement()
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 771
                    self.match(s_cypherParser.SP)




            self.state = 780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6 or _la==26:
                self.state = 776
                self.s_Properties()
                self.state = 778
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 777
                    self.match(s_cypherParser.SP)




            self.state = 782
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertiesPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesPatternContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Properties" ):
                listener.enterS_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Properties" ):
                listener.exitS_Properties(self)




    def s_Properties(self):

        localctx = s_cypherParser.S_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_s_Properties)
        try:
            self.state = 786
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 784
                self.s_PropertiesPattern()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 785
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_PropertyNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PropertyNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PropertyNodeContext,i)


        def s_ValueNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ValueNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ValueNodeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertiesPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertiesPattern" ):
                listener.enterS_PropertiesPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertiesPattern" ):
                listener.exitS_PropertiesPattern(self)




    def s_PropertiesPattern(self):

        localctx = s_cypherParser.S_PropertiesPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_s_PropertiesPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.match(s_cypherParser.T__5)
            self.state = 790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 789
                self.match(s_cypherParser.SP)


            self.state = 808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 792
                self.s_PropertyNode()
                self.state = 793
                self.match(s_cypherParser.T__9)
                self.state = 794
                self.s_ValueNode()
                self.state = 805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 795
                    self.match(s_cypherParser.T__3)
                    self.state = 797
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 796
                        self.match(s_cypherParser.SP)


                    self.state = 799
                    self.s_PropertyNode()
                    self.state = 800
                    self.match(s_cypherParser.T__9)
                    self.state = 801
                    self.s_ValueNode()
                    self.state = 807
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 810
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyNode" ):
                listener.enterS_PropertyNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyNode" ):
                listener.exitS_PropertyNode(self)




    def s_PropertyNode(self):

        localctx = s_cypherParser.S_PropertyNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_s_PropertyNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.oC_PropertyKeyName()
            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 813
                self.match(s_cypherParser.SP)


            self.state = 820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 816
                self.s_AtTElement()
                self.state = 818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 817
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ValueNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ValueNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ValueNode" ):
                listener.enterS_ValueNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ValueNode" ):
                listener.exitS_ValueNode(self)




    def s_ValueNode(self):

        localctx = s_cypherParser.S_ValueNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_s_ValueNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 822
                self.match(s_cypherParser.SP)


            self.state = 825
            self.oC_Expression()
            self.state = 827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 826
                self.match(s_cypherParser.SP)


            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 829
                self.s_AtTElement()
                self.state = 831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 830
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RangeLiteralContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = s_cypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(s_cypherParser.T__10)
            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 836
                self.match(s_cypherParser.SP)


            self.state = 843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 839
                self.oC_Variable()
                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 840
                    self.match(s_cypherParser.SP)




            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 845
                self.oC_RelationshipTypes()
                self.state = 847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 846
                    self.match(s_cypherParser.SP)




            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 851
                self.oC_RangeLiteral()


            self.state = 858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 854
                self.s_AtTElement()
                self.state = 856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 855
                    self.match(s_cypherParser.SP)




            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6 or _la==26:
                self.state = 860
                self.oC_Properties()
                self.state = 862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 861
                    self.match(s_cypherParser.SP)




            self.state = 866
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def s_TimePredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateExpressionContext,0)


        def oC_StringPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringPredicateExpressionContext,0)


        def oC_ListPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListPredicateExpressionContext,0)


        def oC_NullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NullPredicateExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringListNullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullPredicateExpression" ):
                listener.enterOC_StringListNullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullPredicateExpression" ):
                listener.exitOC_StringListNullPredicateExpression(self)




    def oC_StringListNullPredicateExpression(self):

        localctx = s_cypherParser.OC_StringListNullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_oC_StringListNullPredicateExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.oC_AddOrSubtractExpression()
            self.state = 873
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 869
                self.s_TimePredicateExpression()

            elif la_ == 2:
                self.state = 870
                self.oC_StringPredicateExpression()

            elif la_ == 3:
                self.state = 871
                self.oC_ListPredicateExpression()

            elif la_ == 4:
                self.state = 872
                self.oC_NullPredicateExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def s_AtTExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTExpressionContext,0)


        def s_SingleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_SingleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_SingleIndexExpressionContext,i)


        def s_DoubleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DoubleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DoubleIndexExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = s_cypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_oC_ListOperatorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 875
                self.oC_PropertyOrLabelsExpression()
                pass

            elif la_ == 2:
                self.state = 876
                self.s_AtTExpression()
                pass


            self.state = 883
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 881
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                    if la_ == 1:
                        self.state = 879
                        self.s_SingleIndexExpression()
                        pass

                    elif la_ == 2:
                        self.state = 880
                        self.s_DoubleIndexExpression()
                        pass

             
                self.state = 885
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SingleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SingleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SingleIndexExpression" ):
                listener.enterS_SingleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SingleIndexExpression" ):
                listener.exitS_SingleIndexExpression(self)




    def s_SingleIndexExpression(self):

        localctx = s_cypherParser.S_SingleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_s_SingleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 886
                self.match(s_cypherParser.SP)


            self.state = 889
            self.match(s_cypherParser.T__10)
            self.state = 890
            self.s_LeftExpression()
            self.state = 891
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DoubleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def s_RightExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_RightExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DoubleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DoubleIndexExpression" ):
                listener.enterS_DoubleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DoubleIndexExpression" ):
                listener.exitS_DoubleIndexExpression(self)




    def s_DoubleIndexExpression(self):

        localctx = s_cypherParser.S_DoubleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_s_DoubleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 893
                self.match(s_cypherParser.SP)


            self.state = 896
            self.match(s_cypherParser.T__10)
            self.state = 898
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070976) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 897
                self.s_LeftExpression()


            self.state = 900
            self.match(s_cypherParser.T__12)
            self.state = 902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070976) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 901
                self.s_RightExpression()


            self.state = 904
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_LeftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_LeftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_LeftExpression" ):
                listener.enterS_LeftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_LeftExpression" ):
                listener.exitS_LeftExpression(self)




    def s_LeftExpression(self):

        localctx = s_cypherParser.S_LeftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_s_LeftExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_RightExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_RightExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_RightExpression" ):
                listener.enterS_RightExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_RightExpression" ):
                listener.exitS_RightExpression(self)




    def s_RightExpression(self):

        localctx = s_cypherParser.S_RightExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_s_RightExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def s_PropertyLookupTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupTimeContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTExpression" ):
                listener.enterS_AtTExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTExpression" ):
                listener.exitS_AtTExpression(self)




    def s_AtTExpression(self):

        localctx = s_cypherParser.S_AtTExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_s_AtTExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.oC_Atom()
            self.state = 925
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 915 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 912
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 911
                            self.match(s_cypherParser.SP)


                        self.state = 914
                        self.oC_PropertyLookup()

                    else:
                        raise NoViableAltException(self)
                    self.state = 917 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

                self.state = 923
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 920
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 919
                        self.match(s_cypherParser.SP)


                    self.state = 922
                    self.match(s_cypherParser.PoundValue)




            self.state = 928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 927
                self.match(s_cypherParser.SP)


            self.state = 930
            self.s_PropertyLookupTime()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyLookupTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyLookupTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyLookupTime" ):
                listener.enterS_PropertyLookupTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyLookupTime" ):
                listener.exitS_PropertyLookupTime(self)




    def s_PropertyLookupTime(self):

        localctx = s_cypherParser.S_PropertyLookupTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_s_PropertyLookupTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self.match(s_cypherParser.AtT)
            self.state = 939
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 934
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 933
                        self.match(s_cypherParser.SP)


                    self.state = 936
                    self.s_PropertyLookup() 
                self.state = 941
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyLookup" ):
                listener.enterS_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyLookup" ):
                listener.exitS_PropertyLookup(self)




    def s_PropertyLookup(self):

        localctx = s_cypherParser.S_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_s_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.match(s_cypherParser.T__0)
            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 943
                self.match(s_cypherParser.SP)


            self.state = 946
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateExpression" ):
                listener.enterS_TimePredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateExpression" ):
                listener.exitS_TimePredicateExpression(self)




    def s_TimePredicateExpression(self):

        localctx = s_cypherParser.S_TimePredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_s_TimePredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.match(s_cypherParser.SP)
            self.state = 949
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 950
            self.match(s_cypherParser.SP)
            self.state = 951
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_TimePointLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_TimePointLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_TimePointLiteralContext,i)


        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTElement" ):
                listener.enterS_AtTElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTElement" ):
                listener.exitS_AtTElement(self)




    def s_AtTElement(self):

        localctx = s_cypherParser.S_AtTElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_s_AtTElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.match(s_cypherParser.AtT)
            self.state = 955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 954
                self.match(s_cypherParser.SP)


            self.state = 957
            self.match(s_cypherParser.T__7)
            self.state = 959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 958
                self.match(s_cypherParser.SP)


            self.state = 961
            self.s_TimePointLiteral()
            self.state = 963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 962
                self.match(s_cypherParser.SP)


            self.state = 965
            self.match(s_cypherParser.T__3)
            self.state = 967
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 966
                self.match(s_cypherParser.SP)


            self.state = 971
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 117]:
                self.state = 969
                self.s_TimePointLiteral()
                pass
            elif token in [48]:
                self.state = 970
                self.match(s_cypherParser.NOW)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 973
                self.match(s_cypherParser.SP)


            self.state = 976
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def s_WhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Where" ):
                listener.enterS_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Where" ):
                listener.exitS_Where(self)




    def s_Where(self):

        localctx = s_cypherParser.S_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_s_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self.match(s_cypherParser.WHERE)
            self.state = 979
            self.match(s_cypherParser.SP)
            self.state = 980
            self.s_WhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_OrWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_OrWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_WhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_WhereExpression" ):
                listener.enterS_WhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_WhereExpression" ):
                listener.exitS_WhereExpression(self)




    def s_WhereExpression(self):

        localctx = s_cypherParser.S_WhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_s_WhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self.s_OrWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_OrWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_XorWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_XorWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_XorWhereExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_OrWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_OrWhereExpression" ):
                listener.enterS_OrWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_OrWhereExpression" ):
                listener.exitS_OrWhereExpression(self)




    def s_OrWhereExpression(self):

        localctx = s_cypherParser.S_OrWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_s_OrWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            self.s_XorWhereExpression()
            self.state = 991
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,148,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 985
                    self.match(s_cypherParser.SP)
                    self.state = 986
                    self.match(s_cypherParser.OR)
                    self.state = 987
                    self.match(s_cypherParser.SP)
                    self.state = 988
                    self.s_XorWhereExpression() 
                self.state = 993
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_XorWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_AndWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AndWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AndWhereExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_XorWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_XorWhereExpression" ):
                listener.enterS_XorWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_XorWhereExpression" ):
                listener.exitS_XorWhereExpression(self)




    def s_XorWhereExpression(self):

        localctx = s_cypherParser.S_XorWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_s_XorWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            self.s_AndWhereExpression()
            self.state = 1001
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,149,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 995
                    self.match(s_cypherParser.SP)
                    self.state = 996
                    self.match(s_cypherParser.XOR)
                    self.state = 997
                    self.match(s_cypherParser.SP)
                    self.state = 998
                    self.s_AndWhereExpression() 
                self.state = 1003
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,149,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AndWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_NotWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_NotWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_NotWhereExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AndWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AndWhereExpression" ):
                listener.enterS_AndWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AndWhereExpression" ):
                listener.exitS_AndWhereExpression(self)




    def s_AndWhereExpression(self):

        localctx = s_cypherParser.S_AndWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_s_AndWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.s_NotWhereExpression()
            self.state = 1011
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1005
                    self.match(s_cypherParser.SP)
                    self.state = 1006
                    self.match(s_cypherParser.AND)
                    self.state = 1007
                    self.match(s_cypherParser.SP)
                    self.state = 1008
                    self.s_NotWhereExpression() 
                self.state = 1013
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_NotWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_ComparisonWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_ComparisonWhereExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_NotWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_NotWhereExpression" ):
                listener.enterS_NotWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_NotWhereExpression" ):
                listener.exitS_NotWhereExpression(self)




    def s_NotWhereExpression(self):

        localctx = s_cypherParser.S_NotWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_s_NotWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1014
                self.match(s_cypherParser.NOT)
                self.state = 1016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1015
                    self.match(s_cypherParser.SP)


                self.state = 1022
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1023
            self.s_ComparisonWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ComparisonWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_StringListNullPredicateWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StringListNullPredicateWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StringListNullPredicateWhereExpressionContext,i)


        def s_ComparisonWhereOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ComparisonWhereOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ComparisonWhereOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ComparisonWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ComparisonWhereExpression" ):
                listener.enterS_ComparisonWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ComparisonWhereExpression" ):
                listener.exitS_ComparisonWhereExpression(self)




    def s_ComparisonWhereExpression(self):

        localctx = s_cypherParser.S_ComparisonWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_s_ComparisonWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.s_StringListNullPredicateWhereExpression()
            self.state = 1037
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1027
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1026
                        self.match(s_cypherParser.SP)


                    self.state = 1029
                    self.s_ComparisonWhereOperator()
                    self.state = 1031
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1030
                        self.match(s_cypherParser.SP)


                    self.state = 1033
                    self.s_StringListNullPredicateWhereExpression() 
                self.state = 1039
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MultiplyDivideModuloWhereOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MultiplyDivideModuloWhereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MultiplyDivideModuloWhereOperator" ):
                listener.enterS_MultiplyDivideModuloWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MultiplyDivideModuloWhereOperator" ):
                listener.exitS_MultiplyDivideModuloWhereOperator(self)




    def s_MultiplyDivideModuloWhereOperator(self):

        localctx = s_cypherParser.S_MultiplyDivideModuloWhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_s_MultiplyDivideModuloWhereOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 49184) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PowerOfWhereOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PowerOfWhereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PowerOfWhereOperator" ):
                listener.enterS_PowerOfWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PowerOfWhereOperator" ):
                listener.exitS_PowerOfWhereOperator(self)




    def s_PowerOfWhereOperator(self):

        localctx = s_cypherParser.S_PowerOfWhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_s_PowerOfWhereOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            self.match(s_cypherParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AddOrSubtractWhereOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AddOrSubtractWhereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AddOrSubtractWhereOperator" ):
                listener.enterS_AddOrSubtractWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AddOrSubtractWhereOperator" ):
                listener.exitS_AddOrSubtractWhereOperator(self)




    def s_AddOrSubtractWhereOperator(self):

        localctx = s_cypherParser.S_AddOrSubtractWhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_s_AddOrSubtractWhereOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            _la = self._input.LA(1)
            if not(_la==17 or _la==18):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ComparisonWhereOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ComparisonWhereOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ComparisonWhereOperator" ):
                listener.enterS_ComparisonWhereOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ComparisonWhereOperator" ):
                listener.exitS_ComparisonWhereOperator(self)




    def s_ComparisonWhereOperator(self):

        localctx = s_cypherParser.S_ComparisonWhereOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_s_ComparisonWhereOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 16252932) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StringListNullPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def s_TimePredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateWhereExpressionContext,0)


        def s_StringPredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_StringPredicateWhereExpressionContext,0)


        def s_ListPredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_ListPredicateWhereExpressionContext,0)


        def s_NullPredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_NullPredicateWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StringListNullPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StringListNullPredicateWhereExpression" ):
                listener.enterS_StringListNullPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StringListNullPredicateWhereExpression" ):
                listener.exitS_StringListNullPredicateWhereExpression(self)




    def s_StringListNullPredicateWhereExpression(self):

        localctx = s_cypherParser.S_StringListNullPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_s_StringListNullPredicateWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.s_AddOrSubtractWhereExpression()
            self.state = 1053
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 1049
                self.s_TimePredicateWhereExpression()

            elif la_ == 2:
                self.state = 1050
                self.s_StringPredicateWhereExpression()

            elif la_ == 3:
                self.state = 1051
                self.s_ListPredicateWhereExpression()

            elif la_ == 4:
                self.state = 1052
                self.s_NullPredicateWhereExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AddOrSubtractWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_MultiplyDivideModuloWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MultiplyDivideModuloWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MultiplyDivideModuloWhereExpressionContext,i)


        def s_AddOrSubtractWhereOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AddOrSubtractWhereOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AddOrSubtractWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AddOrSubtractWhereExpression" ):
                listener.enterS_AddOrSubtractWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AddOrSubtractWhereExpression" ):
                listener.exitS_AddOrSubtractWhereExpression(self)




    def s_AddOrSubtractWhereExpression(self):

        localctx = s_cypherParser.S_AddOrSubtractWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_s_AddOrSubtractWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.s_MultiplyDivideModuloWhereExpression()
            self.state = 1076
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,162,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1074
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                    if la_ == 1:
                        self.state = 1057
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1056
                            self.match(s_cypherParser.SP)


                        self.state = 1059
                        self.s_AddOrSubtractWhereOperator()
                        self.state = 1061
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1060
                            self.match(s_cypherParser.SP)


                        self.state = 1063
                        self.s_MultiplyDivideModuloWhereExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1066
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1065
                            self.match(s_cypherParser.SP)


                        self.state = 1068
                        self.s_AddOrSubtractWhereOperator()
                        self.state = 1070
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1069
                            self.match(s_cypherParser.SP)


                        self.state = 1072
                        self.s_MultiplyDivideModuloWhereExpression()
                        pass

             
                self.state = 1078
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateWhereExpression" ):
                listener.enterS_TimePredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateWhereExpression" ):
                listener.exitS_TimePredicateWhereExpression(self)




    def s_TimePredicateWhereExpression(self):

        localctx = s_cypherParser.S_TimePredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_s_TimePredicateWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1079
            self.match(s_cypherParser.SP)
            self.state = 1080
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1081
            self.match(s_cypherParser.SP)
            self.state = 1082
            self.s_AddOrSubtractWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StringPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StringPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StringPredicateWhereExpression" ):
                listener.enterS_StringPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StringPredicateWhereExpression" ):
                listener.exitS_StringPredicateWhereExpression(self)




    def s_StringPredicateWhereExpression(self):

        localctx = s_cypherParser.S_StringPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_s_StringPredicateWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.state = 1084
                self.match(s_cypherParser.SP)
                self.state = 1085
                self.match(s_cypherParser.STARTS)
                self.state = 1086
                self.match(s_cypherParser.SP)
                self.state = 1087
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1088
                self.match(s_cypherParser.SP)
                self.state = 1089
                self.match(s_cypherParser.ENDS)
                self.state = 1090
                self.match(s_cypherParser.SP)
                self.state = 1091
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1092
                self.match(s_cypherParser.SP)
                self.state = 1093
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 1097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1096
                self.match(s_cypherParser.SP)


            self.state = 1099
            self.s_AddOrSubtractWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ListPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ListPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ListPredicateWhereExpression" ):
                listener.enterS_ListPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ListPredicateWhereExpression" ):
                listener.exitS_ListPredicateWhereExpression(self)




    def s_ListPredicateWhereExpression(self):

        localctx = s_cypherParser.S_ListPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_s_ListPredicateWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            self.match(s_cypherParser.SP)
            self.state = 1102
            self.match(s_cypherParser.IN)
            self.state = 1104
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1103
                self.match(s_cypherParser.SP)


            self.state = 1106
            self.s_AddOrSubtractWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_NullPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_NullPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_NullPredicateWhereExpression" ):
                listener.enterS_NullPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_NullPredicateWhereExpression" ):
                listener.exitS_NullPredicateWhereExpression(self)




    def s_NullPredicateWhereExpression(self):

        localctx = s_cypherParser.S_NullPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_s_NullPredicateWhereExpression)
        try:
            self.state = 1118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1108
                self.match(s_cypherParser.SP)
                self.state = 1109
                self.match(s_cypherParser.IS)
                self.state = 1110
                self.match(s_cypherParser.SP)
                self.state = 1111
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1112
                self.match(s_cypherParser.SP)
                self.state = 1113
                self.match(s_cypherParser.IS)
                self.state = 1114
                self.match(s_cypherParser.SP)
                self.state = 1115
                self.match(s_cypherParser.NOT)
                self.state = 1116
                self.match(s_cypherParser.SP)
                self.state = 1117
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MultiplyDivideModuloWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PowerOfWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PowerOfWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PowerOfWhereExpressionContext,i)


        def s_MultiplyDivideModuloWhereOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MultiplyDivideModuloWhereOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MultiplyDivideModuloWhereOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MultiplyDivideModuloWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MultiplyDivideModuloWhereExpression" ):
                listener.enterS_MultiplyDivideModuloWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MultiplyDivideModuloWhereExpression" ):
                listener.exitS_MultiplyDivideModuloWhereExpression(self)




    def s_MultiplyDivideModuloWhereExpression(self):

        localctx = s_cypherParser.S_MultiplyDivideModuloWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_s_MultiplyDivideModuloWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            self.s_PowerOfWhereExpression()
            self.state = 1150
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,174,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1148
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
                    if la_ == 1:
                        self.state = 1122
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1121
                            self.match(s_cypherParser.SP)


                        self.state = 1124
                        self.s_MultiplyDivideModuloWhereOperator()
                        self.state = 1126
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1125
                            self.match(s_cypherParser.SP)


                        self.state = 1128
                        self.s_PowerOfWhereExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1131
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1130
                            self.match(s_cypherParser.SP)


                        self.state = 1133
                        self.s_MultiplyDivideModuloWhereOperator()
                        self.state = 1135
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1134
                            self.match(s_cypherParser.SP)


                        self.state = 1137
                        self.s_PowerOfWhereExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1140
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1139
                            self.match(s_cypherParser.SP)


                        self.state = 1142
                        self.s_MultiplyDivideModuloWhereOperator()
                        self.state = 1144
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1143
                            self.match(s_cypherParser.SP)


                        self.state = 1146
                        self.s_PowerOfWhereExpression()
                        pass

             
                self.state = 1152
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,174,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PowerOfWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_UnaryAddOrSubtractWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_UnaryAddOrSubtractWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_UnaryAddOrSubtractWhereExpressionContext,i)


        def s_PowerOfWhereOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PowerOfWhereOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PowerOfWhereOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PowerOfWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PowerOfWhereExpression" ):
                listener.enterS_PowerOfWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PowerOfWhereExpression" ):
                listener.exitS_PowerOfWhereExpression(self)




    def s_PowerOfWhereExpression(self):

        localctx = s_cypherParser.S_PowerOfWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_s_PowerOfWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            self.s_UnaryAddOrSubtractWhereExpression()
            self.state = 1165
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,177,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1155
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1154
                        self.match(s_cypherParser.SP)


                    self.state = 1157
                    self.s_PowerOfWhereOperator()
                    self.state = 1159
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1158
                        self.match(s_cypherParser.SP)


                    self.state = 1161
                    self.s_UnaryAddOrSubtractWhereExpression() 
                self.state = 1167
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,177,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_UnaryAddOrSubtractWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_ListOperatorWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_ListOperatorWhereExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_UnaryAddOrSubtractWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_UnaryAddOrSubtractWhereExpression" ):
                listener.enterS_UnaryAddOrSubtractWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_UnaryAddOrSubtractWhereExpression" ):
                listener.exitS_UnaryAddOrSubtractWhereExpression(self)




    def s_UnaryAddOrSubtractWhereExpression(self):

        localctx = s_cypherParser.S_UnaryAddOrSubtractWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_s_UnaryAddOrSubtractWhereExpression)
        self._la = 0 # Token type
        try:
            self.state = 1174
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 8, 11, 26, 48, 57, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1168
                self.s_ListOperatorWhereExpression()
                pass
            elif token in [17, 18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1169
                _la = self._input.LA(1)
                if not(_la==17 or _la==18):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1170
                    self.match(s_cypherParser.SP)


                self.state = 1173
                self.s_ListOperatorWhereExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ListOperatorWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertyOrLabelsWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyOrLabelsWhereExpressionContext,0)


        def s_AtTWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTWhereExpressionContext,0)


        def s_SingleIndexWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_SingleIndexWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_SingleIndexWhereExpressionContext,i)


        def s_DoubleIndexWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DoubleIndexWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DoubleIndexWhereExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ListOperatorWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ListOperatorWhereExpression" ):
                listener.enterS_ListOperatorWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ListOperatorWhereExpression" ):
                listener.exitS_ListOperatorWhereExpression(self)




    def s_ListOperatorWhereExpression(self):

        localctx = s_cypherParser.S_ListOperatorWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_s_ListOperatorWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1178
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.state = 1176
                self.s_PropertyOrLabelsWhereExpression()
                pass

            elif la_ == 2:
                self.state = 1177
                self.s_AtTWhereExpression()
                pass


            self.state = 1184
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,182,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1182
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                    if la_ == 1:
                        self.state = 1180
                        self.s_SingleIndexWhereExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1181
                        self.s_DoubleIndexWhereExpression()
                        pass

             
                self.state = 1186
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyOrLabelsWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyOrLabelsWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyOrLabelsWhereExpression" ):
                listener.enterS_PropertyOrLabelsWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyOrLabelsWhereExpression" ):
                listener.exitS_PropertyOrLabelsWhereExpression(self)




    def s_PropertyOrLabelsWhereExpression(self):

        localctx = s_cypherParser.S_PropertyOrLabelsWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_s_PropertyOrLabelsWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1187
            self.oC_Atom()
            self.state = 1194
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1189
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1188
                        self.match(s_cypherParser.SP)


                    self.state = 1191
                    self.oC_PropertyLookup() 
                self.state = 1196
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

            self.state = 1201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 1198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1197
                    self.match(s_cypherParser.SP)


                self.state = 1200
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def s_PropertyLookupTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupTimeContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTWhereExpression" ):
                listener.enterS_AtTWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTWhereExpression" ):
                listener.exitS_AtTWhereExpression(self)




    def s_AtTWhereExpression(self):

        localctx = s_cypherParser.S_AtTWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_s_AtTWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            self.oC_Atom()
            self.state = 1218
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.state = 1208 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1205
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1204
                            self.match(s_cypherParser.SP)


                        self.state = 1207
                        self.oC_PropertyLookup()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1210 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,188,self._ctx)

                self.state = 1216
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
                if la_ == 1:
                    self.state = 1213
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1212
                        self.match(s_cypherParser.SP)


                    self.state = 1215
                    self.match(s_cypherParser.PoundValue)




            self.state = 1221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1220
                self.match(s_cypherParser.SP)


            self.state = 1223
            self.s_PropertyLookupTime()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SingleIndexWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_LeftWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftWhereExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SingleIndexWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SingleIndexWhereExpression" ):
                listener.enterS_SingleIndexWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SingleIndexWhereExpression" ):
                listener.exitS_SingleIndexWhereExpression(self)




    def s_SingleIndexWhereExpression(self):

        localctx = s_cypherParser.S_SingleIndexWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_s_SingleIndexWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1225
                self.match(s_cypherParser.SP)


            self.state = 1228
            self.match(s_cypherParser.T__10)
            self.state = 1229
            self.s_LeftWhereExpression()
            self.state = 1230
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DoubleIndexWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def s_LeftWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftWhereExpressionContext,0)


        def s_RightWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_RightWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DoubleIndexWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DoubleIndexWhereExpression" ):
                listener.enterS_DoubleIndexWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DoubleIndexWhereExpression" ):
                listener.exitS_DoubleIndexWhereExpression(self)




    def s_DoubleIndexWhereExpression(self):

        localctx = s_cypherParser.S_DoubleIndexWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_s_DoubleIndexWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1232
                self.match(s_cypherParser.SP)


            self.state = 1235
            self.match(s_cypherParser.T__10)
            self.state = 1237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070976) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1236
                self.s_LeftWhereExpression()


            self.state = 1239
            self.match(s_cypherParser.T__12)
            self.state = 1241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070976) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1240
                self.s_RightWhereExpression()


            self.state = 1243
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_LeftWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_LeftWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_LeftWhereExpression" ):
                listener.enterS_LeftWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_LeftWhereExpression" ):
                listener.exitS_LeftWhereExpression(self)




    def s_LeftWhereExpression(self):

        localctx = s_cypherParser.S_LeftWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_s_LeftWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1245
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_RightWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_RightWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_RightWhereExpression" ):
                listener.enterS_RightWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_RightWhereExpression" ):
                listener.exitS_RightWhereExpression(self)




    def s_RightWhereExpression(self):

        localctx = s_cypherParser.S_RightWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_s_RightWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1247
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePointLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePointLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePointLiteral" ):
                listener.enterS_TimePointLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePointLiteral" ):
                listener.exitS_TimePointLiteral(self)




    def s_TimePointLiteral(self):

        localctx = s_cypherParser.S_TimePointLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_s_TimePointLiteral)
        try:
            self.state = 1251
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1249
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1250
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(s_cypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(s_cypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(s_cypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(s_cypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(s_cypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = s_cypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1253
            _la = self._input.LA(1)
            if not(_la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(s_cypherParser.AND, 0)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def OR(self):
            return self.getToken(s_cypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(s_cypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(s_cypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(s_cypherParser.DO, 0)

        def FOR(self):
            return self.getToken(s_cypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(s_cypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(s_cypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(s_cypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(s_cypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(s_cypherParser.OF, 0)

        def ADD(self):
            return self.getToken(s_cypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(s_cypherParser.DROP, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = s_cypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1255
            _la = self._input.LA(1)
            if not(((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 128317405001678847) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(s_cypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = s_cypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1257
                self.match(s_cypherParser.SP)


            self.state = 1260
            self.oC_Statement()
            self.state = 1265
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.state = 1262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1261
                    self.match(s_cypherParser.SP)


                self.state = 1264
                self.match(s_cypherParser.T__23)


            self.state = 1268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1267
                self.match(s_cypherParser.SP)


            self.state = 1270
            self.match(s_cypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = s_cypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1272
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = s_cypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1274
            self.oC_SingleQuery()
            self.state = 1281
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,203,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1276
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1275
                        self.match(s_cypherParser.SP)


                    self.state = 1278
                    self.oC_Union() 
                self.state = 1283
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,203,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = s_cypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 1296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1284
                self.match(s_cypherParser.UNION)
                self.state = 1285
                self.match(s_cypherParser.SP)
                self.state = 1286
                self.match(s_cypherParser.ALL)
                self.state = 1288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1287
                    self.match(s_cypherParser.SP)


                self.state = 1290
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1291
                self.match(s_cypherParser.UNION)
                self.state = 1293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1292
                    self.match(s_cypherParser.SP)


                self.state = 1295
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = s_cypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_SingleQuery)
        try:
            self.state = 1300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1298
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1299
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = s_cypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 1337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 1302
                    self.oC_ReadingClause()
                    self.state = 1304
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1303
                        self.match(s_cypherParser.SP)


                    self.state = 1310
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1311
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 1312
                    self.oC_ReadingClause()
                    self.state = 1314
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1313
                        self.match(s_cypherParser.SP)


                    self.state = 1320
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1321
                self.oC_UpdatingClause()
                self.state = 1328
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,213,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1323
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1322
                            self.match(s_cypherParser.SP)


                        self.state = 1325
                        self.oC_UpdatingClause() 
                    self.state = 1330
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,213,self._ctx)

                self.state = 1335
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                if la_ == 1:
                    self.state = 1332
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1331
                        self.match(s_cypherParser.SP)


                    self.state = 1334
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def s_WithPartQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_WithPartQueryContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_WithPartQueryContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = s_cypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_MultiPartQuery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1340 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1339
                    self.s_WithPartQuery()

                else:
                    raise NoViableAltException(self)
                self.state = 1342 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,217,self._ctx)

            self.state = 1344
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(s_cypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = s_cypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_ReadingClause)
        try:
            self.state = 1349
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1346
                self.oC_Match()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1347
                self.oC_Unwind()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1348
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = s_cypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1351
            self.match(s_cypherParser.UNWIND)
            self.state = 1353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1352
                self.match(s_cypherParser.SP)


            self.state = 1355
            self.oC_Expression()
            self.state = 1356
            self.match(s_cypherParser.SP)
            self.state = 1357
            self.match(s_cypherParser.AS)
            self.state = 1358
            self.match(s_cypherParser.SP)
            self.state = 1359
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = s_cypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1361
            self.match(s_cypherParser.MERGE)
            self.state = 1363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1362
                self.match(s_cypherParser.SP)


            self.state = 1365
            self.oC_PatternPart()
            self.state = 1370
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,221,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1366
                    self.match(s_cypherParser.SP)
                    self.state = 1367
                    self.oC_MergeAction() 
                self.state = 1372
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,221,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = s_cypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_MergeAction)
        try:
            self.state = 1383
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1373
                self.match(s_cypherParser.ON)
                self.state = 1374
                self.match(s_cypherParser.SP)
                self.state = 1375
                self.match(s_cypherParser.MATCH)
                self.state = 1376
                self.match(s_cypherParser.SP)
                self.state = 1377
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1378
                self.match(s_cypherParser.ON)
                self.state = 1379
                self.match(s_cypherParser.SP)
                self.state = 1380
                self.match(s_cypherParser.CREATE)
                self.state = 1381
                self.match(s_cypherParser.SP)
                self.state = 1382
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = s_cypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1385
            self.match(s_cypherParser.CREATE)
            self.state = 1387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1386
                self.match(s_cypherParser.SP)


            self.state = 1389
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = s_cypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1391
            self.match(s_cypherParser.SET)
            self.state = 1393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1392
                self.match(s_cypherParser.SP)


            self.state = 1395
            self.oC_SetItem()
            self.state = 1406
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,227,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1397
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1396
                        self.match(s_cypherParser.SP)


                    self.state = 1399
                    self.match(s_cypherParser.T__3)
                    self.state = 1401
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1400
                        self.match(s_cypherParser.SP)


                    self.state = 1403
                    self.oC_SetItem() 
                self.state = 1408
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,227,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = s_cypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1409
            self.match(s_cypherParser.REMOVE)
            self.state = 1410
            self.match(s_cypherParser.SP)
            self.state = 1411
            self.oC_RemoveItem()
            self.state = 1422
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,230,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1413
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1412
                        self.match(s_cypherParser.SP)


                    self.state = 1415
                    self.match(s_cypherParser.T__3)
                    self.state = 1417
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1416
                        self.match(s_cypherParser.SP)


                    self.state = 1419
                    self.oC_RemoveItem() 
                self.state = 1424
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,230,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = s_cypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_RemoveItem)
        try:
            self.state = 1429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1425
                self.oC_Variable()
                self.state = 1426
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1428
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = s_cypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1431
            self.oC_YieldItem()
            self.state = 1442
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,234,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1433
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1432
                        self.match(s_cypherParser.SP)


                    self.state = 1435
                    self.match(s_cypherParser.T__3)
                    self.state = 1437
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1436
                        self.match(s_cypherParser.SP)


                    self.state = 1439
                    self.oC_YieldItem() 
                self.state = 1444
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,234,self._ctx)

            self.state = 1449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82 or _la==135:
                self.state = 1446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1445
                    self.match(s_cypherParser.SP)


                self.state = 1448
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = s_cypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1451
            self.oC_ProcedureResultField()
            self.state = 1456
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.state = 1452
                self.match(s_cypherParser.SP)
                self.state = 1453
                self.match(s_cypherParser.AS)
                self.state = 1454
                self.match(s_cypherParser.SP)
                self.state = 1455
                self.oC_Variable()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = s_cypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1458
            self.match(s_cypherParser.WITH)
            self.state = 1459
            self.oC_ProjectionBody()
            self.state = 1464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82 or _la==135:
                self.state = 1461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1460
                    self.match(s_cypherParser.SP)


                self.state = 1463
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = s_cypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1466
            self.match(s_cypherParser.RETURN)
            self.state = 1467
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)




    def oC_ProjectionBody(self):

        localctx = s_cypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1473
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.state = 1470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1469
                    self.match(s_cypherParser.SP)


                self.state = 1472
                self.match(s_cypherParser.DISTINCT)


            self.state = 1475
            self.match(s_cypherParser.SP)
            self.state = 1476
            self.oC_ProjectionItems()
            self.state = 1479
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.state = 1477
                self.match(s_cypherParser.SP)
                self.state = 1478
                self.oC_Order()


            self.state = 1483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.state = 1481
                self.match(s_cypherParser.SP)
                self.state = 1482
                self.oC_Skip()


            self.state = 1487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.state = 1485
                self.match(s_cypherParser.SP)
                self.state = 1486
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)




    def oC_ProjectionItems(self):

        localctx = s_cypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 1517
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1489
                self.match(s_cypherParser.T__4)
                self.state = 1500
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,247,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1491
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1490
                            self.match(s_cypherParser.SP)


                        self.state = 1493
                        self.match(s_cypherParser.T__3)
                        self.state = 1495
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1494
                            self.match(s_cypherParser.SP)


                        self.state = 1497
                        self.oC_ProjectionItem() 
                    self.state = 1502
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,247,self._ctx)

                pass
            elif token in [6, 8, 11, 17, 18, 26, 48, 57, 86, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1503
                self.oC_ProjectionItem()
                self.state = 1514
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,250,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1505
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1504
                            self.match(s_cypherParser.SP)


                        self.state = 1507
                        self.match(s_cypherParser.T__3)
                        self.state = 1509
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1508
                            self.match(s_cypherParser.SP)


                        self.state = 1511
                        self.oC_ProjectionItem() 
                    self.state = 1516
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,250,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)




    def oC_ProjectionItem(self):

        localctx = s_cypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_ProjectionItem)
        try:
            self.state = 1526
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1519
                self.oC_Expression()
                self.state = 1520
                self.match(s_cypherParser.SP)
                self.state = 1521
                self.match(s_cypherParser.AS)
                self.state = 1522
                self.match(s_cypherParser.SP)
                self.state = 1523
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1525
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = s_cypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1528
            self.match(s_cypherParser.ORDER)
            self.state = 1529
            self.match(s_cypherParser.SP)
            self.state = 1530
            self.match(s_cypherParser.BY)
            self.state = 1531
            self.match(s_cypherParser.SP)
            self.state = 1532
            self.oC_SortItem()
            self.state = 1540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1533
                self.match(s_cypherParser.T__3)
                self.state = 1535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1534
                    self.match(s_cypherParser.SP)


                self.state = 1537
                self.oC_SortItem()
                self.state = 1542
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = s_cypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1543
            self.match(s_cypherParser.L_SKIP)
            self.state = 1544
            self.match(s_cypherParser.SP)
            self.state = 1545
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = s_cypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1547
            self.match(s_cypherParser.LIMIT)
            self.state = 1548
            self.match(s_cypherParser.SP)
            self.state = 1549
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = s_cypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1551
            self.oC_Expression()
            self.state = 1556
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.state = 1553
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1552
                    self.match(s_cypherParser.SP)


                self.state = 1555
                _la = self._input.LA(1)
                if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = s_cypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1558
            self.match(s_cypherParser.WHERE)
            self.state = 1559
            self.match(s_cypherParser.SP)
            self.state = 1560
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = s_cypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1562
            self.oC_PatternPart()
            self.state = 1573
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,259,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1564
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1563
                        self.match(s_cypherParser.SP)


                    self.state = 1566
                    self.match(s_cypherParser.T__3)
                    self.state = 1568
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1567
                        self.match(s_cypherParser.SP)


                    self.state = 1570
                    self.oC_PatternPart() 
                self.state = 1575
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,259,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = s_cypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1576
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = s_cypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 1592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1578
                self.oC_NodePattern()
                self.state = 1585
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,261,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1580
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1579
                            self.match(s_cypherParser.SP)


                        self.state = 1582
                        self.oC_PatternElementChain() 
                    self.state = 1587
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,261,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1588
                self.match(s_cypherParser.T__7)
                self.state = 1589
                self.oC_PatternElement()
                self.state = 1590
                self.match(s_cypherParser.T__8)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = s_cypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1594
            self.oC_NodePattern()
            self.state = 1599 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1596
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1595
                        self.match(s_cypherParser.SP)


                    self.state = 1598
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 1601 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,264,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = s_cypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1603
            self.oC_RelationshipPattern()
            self.state = 1605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1604
                self.match(s_cypherParser.SP)


            self.state = 1607
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = s_cypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 1673
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1609
                self.oC_LeftArrowHead()
                self.state = 1611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1610
                    self.match(s_cypherParser.SP)


                self.state = 1613
                self.oC_Dash()
                self.state = 1615
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
                if la_ == 1:
                    self.state = 1614
                    self.match(s_cypherParser.SP)


                self.state = 1618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1617
                    self.oC_RelationshipDetail()


                self.state = 1621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1620
                    self.match(s_cypherParser.SP)


                self.state = 1623
                self.oC_Dash()
                self.state = 1625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1624
                    self.match(s_cypherParser.SP)


                self.state = 1627
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1629
                self.oC_LeftArrowHead()
                self.state = 1631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1630
                    self.match(s_cypherParser.SP)


                self.state = 1633
                self.oC_Dash()
                self.state = 1635
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
                if la_ == 1:
                    self.state = 1634
                    self.match(s_cypherParser.SP)


                self.state = 1638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1637
                    self.oC_RelationshipDetail()


                self.state = 1641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1640
                    self.match(s_cypherParser.SP)


                self.state = 1643
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1645
                self.oC_Dash()
                self.state = 1647
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
                if la_ == 1:
                    self.state = 1646
                    self.match(s_cypherParser.SP)


                self.state = 1650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1649
                    self.oC_RelationshipDetail()


                self.state = 1653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1652
                    self.match(s_cypherParser.SP)


                self.state = 1655
                self.oC_Dash()
                self.state = 1657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1656
                    self.match(s_cypherParser.SP)


                self.state = 1659
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1661
                self.oC_Dash()
                self.state = 1663
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
                if la_ == 1:
                    self.state = 1662
                    self.match(s_cypherParser.SP)


                self.state = 1666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1665
                    self.oC_RelationshipDetail()


                self.state = 1669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1668
                    self.match(s_cypherParser.SP)


                self.state = 1671
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = s_cypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_oC_Properties)
        try:
            self.state = 1677
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1675
                self.oC_MapLiteral()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1676
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = s_cypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1679
            self.match(s_cypherParser.T__9)
            self.state = 1681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1680
                self.match(s_cypherParser.SP)


            self.state = 1683
            self.oC_RelTypeName()
            self.state = 1697
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,288,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1685
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1684
                        self.match(s_cypherParser.SP)


                    self.state = 1687
                    self.match(s_cypherParser.T__24)
                    self.state = 1689
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==10:
                        self.state = 1688
                        self.match(s_cypherParser.T__9)


                    self.state = 1692
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1691
                        self.match(s_cypherParser.SP)


                    self.state = 1694
                    self.oC_RelTypeName() 
                self.state = 1699
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,288,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = s_cypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1700
            self.oC_NodeLabel()
            self.state = 1707
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,290,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1702
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1701
                        self.match(s_cypherParser.SP)


                    self.state = 1704
                    self.oC_NodeLabel() 
                self.state = 1709
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,290,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = s_cypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1710
            self.match(s_cypherParser.T__9)
            self.state = 1712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1711
                self.match(s_cypherParser.SP)


            self.state = 1714
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = s_cypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1716
            self.match(s_cypherParser.T__4)
            self.state = 1718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1717
                self.match(s_cypherParser.SP)


            self.state = 1724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                self.state = 1720
                self.oC_IntegerLiteral()
                self.state = 1722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1721
                    self.match(s_cypherParser.SP)




            self.state = 1736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 1726
                self.match(s_cypherParser.T__12)
                self.state = 1728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1727
                    self.match(s_cypherParser.SP)


                self.state = 1734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                    self.state = 1730
                    self.oC_IntegerLiteral()
                    self.state = 1732
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1731
                        self.match(s_cypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = s_cypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1738
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = s_cypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1740
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = s_cypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1742
            self.oC_Atom()
            self.state = 1747 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1744
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1743
                        self.match(s_cypherParser.SP)


                    self.state = 1746
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 1749 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,300,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = s_cypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1751
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = s_cypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1753
            self.oC_XorExpression()
            self.state = 1760
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,301,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1754
                    self.match(s_cypherParser.SP)
                    self.state = 1755
                    self.match(s_cypherParser.OR)
                    self.state = 1756
                    self.match(s_cypherParser.SP)
                    self.state = 1757
                    self.oC_XorExpression() 
                self.state = 1762
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,301,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = s_cypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1763
            self.oC_AndExpression()
            self.state = 1770
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,302,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1764
                    self.match(s_cypherParser.SP)
                    self.state = 1765
                    self.match(s_cypherParser.XOR)
                    self.state = 1766
                    self.match(s_cypherParser.SP)
                    self.state = 1767
                    self.oC_AndExpression() 
                self.state = 1772
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,302,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = s_cypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1773
            self.oC_NotExpression()
            self.state = 1780
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,303,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1774
                    self.match(s_cypherParser.SP)
                    self.state = 1775
                    self.match(s_cypherParser.AND)
                    self.state = 1776
                    self.match(s_cypherParser.SP)
                    self.state = 1777
                    self.oC_NotExpression() 
                self.state = 1782
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,303,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = s_cypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1783
                self.match(s_cypherParser.NOT)
                self.state = 1785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1784
                    self.match(s_cypherParser.SP)


                self.state = 1791
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1792
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_StringListNullPredicateExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,i)


        def s_ComparisonOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ComparisonOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ComparisonOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = s_cypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1794
            self.oC_StringListNullPredicateExpression()
            self.state = 1806
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,308,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1796
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1795
                        self.match(s_cypherParser.SP)


                    self.state = 1798
                    self.s_ComparisonOperator()
                    self.state = 1800
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1799
                        self.match(s_cypherParser.SP)


                    self.state = 1802
                    self.oC_StringListNullPredicateExpression() 
                self.state = 1808
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,308,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringPredicateExpression" ):
                listener.enterOC_StringPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringPredicateExpression" ):
                listener.exitOC_StringPredicateExpression(self)




    def oC_StringPredicateExpression(self):

        localctx = s_cypherParser.OC_StringPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_oC_StringPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1819
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.state = 1809
                self.match(s_cypherParser.SP)
                self.state = 1810
                self.match(s_cypherParser.STARTS)
                self.state = 1811
                self.match(s_cypherParser.SP)
                self.state = 1812
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1813
                self.match(s_cypherParser.SP)
                self.state = 1814
                self.match(s_cypherParser.ENDS)
                self.state = 1815
                self.match(s_cypherParser.SP)
                self.state = 1816
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1817
                self.match(s_cypherParser.SP)
                self.state = 1818
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 1822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1821
                self.match(s_cypherParser.SP)


            self.state = 1824
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListPredicateExpression" ):
                listener.enterOC_ListPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListPredicateExpression" ):
                listener.exitOC_ListPredicateExpression(self)




    def oC_ListPredicateExpression(self):

        localctx = s_cypherParser.OC_ListPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_oC_ListPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1826
            self.match(s_cypherParser.SP)
            self.state = 1827
            self.match(s_cypherParser.IN)
            self.state = 1829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1828
                self.match(s_cypherParser.SP)


            self.state = 1831
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullPredicateExpression" ):
                listener.enterOC_NullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullPredicateExpression" ):
                listener.exitOC_NullPredicateExpression(self)




    def oC_NullPredicateExpression(self):

        localctx = s_cypherParser.OC_NullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_oC_NullPredicateExpression)
        try:
            self.state = 1843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1833
                self.match(s_cypherParser.SP)
                self.state = 1834
                self.match(s_cypherParser.IS)
                self.state = 1835
                self.match(s_cypherParser.SP)
                self.state = 1836
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1837
                self.match(s_cypherParser.SP)
                self.state = 1838
                self.match(s_cypherParser.IS)
                self.state = 1839
                self.match(s_cypherParser.SP)
                self.state = 1840
                self.match(s_cypherParser.NOT)
                self.state = 1841
                self.match(s_cypherParser.SP)
                self.state = 1842
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def s_AddOrSubtractOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AddOrSubtractOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1845
            self.oC_MultiplyDivideModuloExpression()
            self.state = 1866
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,318,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1864
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
                    if la_ == 1:
                        self.state = 1847
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1846
                            self.match(s_cypherParser.SP)


                        self.state = 1849
                        self.s_AddOrSubtractOperator()
                        self.state = 1851
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1850
                            self.match(s_cypherParser.SP)


                        self.state = 1853
                        self.oC_MultiplyDivideModuloExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1856
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1855
                            self.match(s_cypherParser.SP)


                        self.state = 1858
                        self.s_AddOrSubtractOperator()
                        self.state = 1860
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1859
                            self.match(s_cypherParser.SP)


                        self.state = 1862
                        self.oC_MultiplyDivideModuloExpression()
                        pass

             
                self.state = 1868
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,318,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MultiplyDivideModuloOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MultiplyDivideModuloOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MultiplyDivideModuloOperator" ):
                listener.enterS_MultiplyDivideModuloOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MultiplyDivideModuloOperator" ):
                listener.exitS_MultiplyDivideModuloOperator(self)




    def s_MultiplyDivideModuloOperator(self):

        localctx = s_cypherParser.S_MultiplyDivideModuloOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_s_MultiplyDivideModuloOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1869
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 49184) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PowerOfOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PowerOfOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PowerOfOperator" ):
                listener.enterS_PowerOfOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PowerOfOperator" ):
                listener.exitS_PowerOfOperator(self)




    def s_PowerOfOperator(self):

        localctx = s_cypherParser.S_PowerOfOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_s_PowerOfOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1871
            self.match(s_cypherParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AddOrSubtractOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AddOrSubtractOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AddOrSubtractOperator" ):
                listener.enterS_AddOrSubtractOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AddOrSubtractOperator" ):
                listener.exitS_AddOrSubtractOperator(self)




    def s_AddOrSubtractOperator(self):

        localctx = s_cypherParser.S_AddOrSubtractOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_s_AddOrSubtractOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1873
            _la = self._input.LA(1)
            if not(_la==17 or _la==18):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ComparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ComparisonOperator" ):
                listener.enterS_ComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ComparisonOperator" ):
                listener.exitS_ComparisonOperator(self)




    def s_ComparisonOperator(self):

        localctx = s_cypherParser.S_ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_s_ComparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1875
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 16252932) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PowerOfExpressionContext,i)


        def s_MultiplyDivideModuloOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MultiplyDivideModuloOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MultiplyDivideModuloOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = s_cypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1877
            self.oC_PowerOfExpression()
            self.state = 1907
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,326,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1905
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,325,self._ctx)
                    if la_ == 1:
                        self.state = 1879
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1878
                            self.match(s_cypherParser.SP)


                        self.state = 1881
                        self.s_MultiplyDivideModuloOperator()
                        self.state = 1883
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1882
                            self.match(s_cypherParser.SP)


                        self.state = 1885
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1888
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1887
                            self.match(s_cypherParser.SP)


                        self.state = 1890
                        self.s_MultiplyDivideModuloOperator()
                        self.state = 1892
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1891
                            self.match(s_cypherParser.SP)


                        self.state = 1894
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1897
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1896
                            self.match(s_cypherParser.SP)


                        self.state = 1899
                        self.s_MultiplyDivideModuloOperator()
                        self.state = 1901
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1900
                            self.match(s_cypherParser.SP)


                        self.state = 1903
                        self.oC_PowerOfExpression()
                        pass

             
                self.state = 1909
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,326,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def s_PowerOfOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PowerOfOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PowerOfOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = s_cypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1910
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 1922
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,329,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1912
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1911
                        self.match(s_cypherParser.SP)


                    self.state = 1914
                    self.s_PowerOfOperator()
                    self.state = 1916
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1915
                        self.match(s_cypherParser.SP)


                    self.state = 1918
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 1924
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,329,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ListOperatorExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListOperatorExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.state = 1931
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 8, 11, 26, 48, 57, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1925
                self.oC_ListOperatorExpression()
                pass
            elif token in [17, 18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1926
                _la = self._input.LA(1)
                if not(_la==17 or _la==18):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1927
                    self.match(s_cypherParser.SP)


                self.state = 1930
                self.oC_ListOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyOrLabelsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyOrLabelsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyOrLabelsExpression" ):
                listener.enterOC_PropertyOrLabelsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyOrLabelsExpression" ):
                listener.exitOC_PropertyOrLabelsExpression(self)




    def oC_PropertyOrLabelsExpression(self):

        localctx = s_cypherParser.OC_PropertyOrLabelsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_oC_PropertyOrLabelsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1933
            self.oC_Atom()
            self.state = 1940
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,333,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1935
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1934
                        self.match(s_cypherParser.SP)


                    self.state = 1937
                    self.oC_PropertyLookup() 
                self.state = 1942
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,333,self._ctx)

            self.state = 1947
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
            if la_ == 1:
                self.state = 1944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1943
                    self.match(s_cypherParser.SP)


                self.state = 1946
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = s_cypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1949
            self.match(s_cypherParser.T__0)
            self.state = 1951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1950
                self.match(s_cypherParser.SP)


            self.state = 1953
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternComprehensionContext,0)


        def oC_Quantifier(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QuantifierContext,0)


        def oC_PatternPredicate(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPredicateContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionInvocationContext,0)


        def oC_ExistentialSubquery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExistentialSubqueryContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = s_cypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 1979
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1955
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1956
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1957
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1958
                self.match(s_cypherParser.COUNT)
                self.state = 1960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1959
                    self.match(s_cypherParser.SP)


                self.state = 1962
                self.match(s_cypherParser.T__7)
                self.state = 1964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1963
                    self.match(s_cypherParser.SP)


                self.state = 1966
                self.match(s_cypherParser.T__4)
                self.state = 1968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1967
                    self.match(s_cypherParser.SP)


                self.state = 1970
                self.match(s_cypherParser.T__8)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1971
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1972
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1973
                self.oC_Quantifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1974
                self.oC_PatternPredicate()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1975
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1976
                self.oC_FunctionInvocation()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1977
                self.oC_ExistentialSubquery()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1978
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def oC_CaseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_CaseAlternativeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = s_cypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2003
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
            if la_ == 1:
                self.state = 1981
                self.match(s_cypherParser.CASE)
                self.state = 1986 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1983
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1982
                            self.match(s_cypherParser.SP)


                        self.state = 1985
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1988 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,342,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1990
                self.match(s_cypherParser.CASE)
                self.state = 1992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1991
                    self.match(s_cypherParser.SP)


                self.state = 1994
                self.oC_Expression()
                self.state = 1999 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1996
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1995
                            self.match(s_cypherParser.SP)


                        self.state = 1998
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2001 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,345,self._ctx)

                pass


            self.state = 2013
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
            if la_ == 1:
                self.state = 2006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2005
                    self.match(s_cypherParser.SP)


                self.state = 2008
                self.match(s_cypherParser.ELSE)
                self.state = 2010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2009
                    self.match(s_cypherParser.SP)


                self.state = 2012
                self.oC_Expression()


            self.state = 2016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2015
                self.match(s_cypherParser.SP)


            self.state = 2018
            self.match(s_cypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternative" ):
                listener.enterOC_CaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternative" ):
                listener.exitOC_CaseAlternative(self)




    def oC_CaseAlternative(self):

        localctx = s_cypherParser.OC_CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_oC_CaseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2020
            self.match(s_cypherParser.WHEN)
            self.state = 2022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2021
                self.match(s_cypherParser.SP)


            self.state = 2024
            self.oC_Expression()
            self.state = 2026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2025
                self.match(s_cypherParser.SP)


            self.state = 2028
            self.match(s_cypherParser.THEN)
            self.state = 2030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2029
                self.match(s_cypherParser.SP)


            self.state = 2032
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = s_cypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2034
            self.match(s_cypherParser.T__10)
            self.state = 2036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2035
                self.match(s_cypherParser.SP)


            self.state = 2038
            self.oC_FilterExpression()
            self.state = 2047
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
            if la_ == 1:
                self.state = 2040
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2039
                    self.match(s_cypherParser.SP)


                self.state = 2042
                self.match(s_cypherParser.T__24)
                self.state = 2044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2043
                    self.match(s_cypherParser.SP)


                self.state = 2046
                self.oC_Expression()


            self.state = 2050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2049
                self.match(s_cypherParser.SP)


            self.state = 2052
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = s_cypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2054
            self.match(s_cypherParser.T__10)
            self.state = 2056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2055
                self.match(s_cypherParser.SP)


            self.state = 2066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 2058
                self.oC_Variable()
                self.state = 2060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2059
                    self.match(s_cypherParser.SP)


                self.state = 2062
                self.match(s_cypherParser.T__1)
                self.state = 2064
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2063
                    self.match(s_cypherParser.SP)




            self.state = 2068
            self.oC_RelationshipsPattern()
            self.state = 2070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2069
                self.match(s_cypherParser.SP)


            self.state = 2076
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 2072
                self.oC_Where()
                self.state = 2074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2073
                    self.match(s_cypherParser.SP)




            self.state = 2078
            self.match(s_cypherParser.T__24)
            self.state = 2080
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2079
                self.match(s_cypherParser.SP)


            self.state = 2082
            self.oC_Expression()
            self.state = 2084
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2083
                self.match(s_cypherParser.SP)


            self.state = 2086
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Quantifier" ):
                listener.enterOC_Quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Quantifier" ):
                listener.exitOC_Quantifier(self)




    def oC_Quantifier(self):

        localctx = s_cypherParser.OC_QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_oC_Quantifier)
        self._la = 0 # Token type
        try:
            self.state = 2144
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2088
                self.match(s_cypherParser.ALL)
                self.state = 2090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2089
                    self.match(s_cypherParser.SP)


                self.state = 2092
                self.match(s_cypherParser.T__7)
                self.state = 2094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2093
                    self.match(s_cypherParser.SP)


                self.state = 2096
                self.oC_FilterExpression()
                self.state = 2098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2097
                    self.match(s_cypherParser.SP)


                self.state = 2100
                self.match(s_cypherParser.T__8)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2102
                self.match(s_cypherParser.ANY)
                self.state = 2104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2103
                    self.match(s_cypherParser.SP)


                self.state = 2106
                self.match(s_cypherParser.T__7)
                self.state = 2108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2107
                    self.match(s_cypherParser.SP)


                self.state = 2110
                self.oC_FilterExpression()
                self.state = 2112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2111
                    self.match(s_cypherParser.SP)


                self.state = 2114
                self.match(s_cypherParser.T__8)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2116
                self.match(s_cypherParser.NONE)
                self.state = 2118
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2117
                    self.match(s_cypherParser.SP)


                self.state = 2120
                self.match(s_cypherParser.T__7)
                self.state = 2122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2121
                    self.match(s_cypherParser.SP)


                self.state = 2124
                self.oC_FilterExpression()
                self.state = 2126
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2125
                    self.match(s_cypherParser.SP)


                self.state = 2128
                self.match(s_cypherParser.T__8)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2130
                self.match(s_cypherParser.SINGLE)
                self.state = 2132
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2131
                    self.match(s_cypherParser.SP)


                self.state = 2134
                self.match(s_cypherParser.T__7)
                self.state = 2136
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2135
                    self.match(s_cypherParser.SP)


                self.state = 2138
                self.oC_FilterExpression()
                self.state = 2140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2139
                    self.match(s_cypherParser.SP)


                self.state = 2142
                self.match(s_cypherParser.T__8)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPredicate" ):
                listener.enterOC_PatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPredicate" ):
                listener.exitOC_PatternPredicate(self)




    def oC_PatternPredicate(self):

        localctx = s_cypherParser.OC_PatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_oC_PatternPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2146
            self.oC_RelationshipsPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = s_cypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2148
            self.match(s_cypherParser.T__7)
            self.state = 2150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2149
                self.match(s_cypherParser.SP)


            self.state = 2152
            self.oC_Expression()
            self.state = 2154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2153
                self.match(s_cypherParser.SP)


            self.state = 2156
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = s_cypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2158
            self.oC_Variable()
            self.state = 2159
            self.match(s_cypherParser.SP)
            self.state = 2160
            self.match(s_cypherParser.IN)
            self.state = 2161
            self.match(s_cypherParser.SP)
            self.state = 2162
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def s_FunctionInvocationExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_FunctionInvocationExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_FunctionInvocationExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = s_cypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2164
            self.oC_FunctionName()
            self.state = 2166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2165
                self.match(s_cypherParser.SP)


            self.state = 2168
            self.match(s_cypherParser.T__7)
            self.state = 2170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2169
                self.match(s_cypherParser.SP)


            self.state = 2176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 2172
                self.match(s_cypherParser.DISTINCT)
                self.state = 2174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2173
                    self.match(s_cypherParser.SP)




            self.state = 2195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070976) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 2178
                self.s_FunctionInvocationExpression()
                self.state = 2180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2179
                    self.match(s_cypherParser.SP)


                self.state = 2192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2182
                    self.match(s_cypherParser.T__3)
                    self.state = 2184
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2183
                        self.match(s_cypherParser.SP)


                    self.state = 2186
                    self.s_FunctionInvocationExpression()
                    self.state = 2188
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2187
                        self.match(s_cypherParser.SP)


                    self.state = 2194
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2197
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_FunctionInvocationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_FunctionInvocationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_FunctionInvocationExpression" ):
                listener.enterS_FunctionInvocationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_FunctionInvocationExpression" ):
                listener.exitS_FunctionInvocationExpression(self)




    def s_FunctionInvocationExpression(self):

        localctx = s_cypherParser.S_FunctionInvocationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_s_FunctionInvocationExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2199
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = s_cypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_oC_FunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2201
            self.oC_Namespace()
            self.state = 2202
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2204
            self.oC_ProcedureName()
            self.state = 2206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2205
                self.match(s_cypherParser.SP)


            self.state = 2208
            self.match(s_cypherParser.T__7)
            self.state = 2210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2209
                self.match(s_cypherParser.SP)


            self.state = 2229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070976) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 2212
                self.oC_Expression()
                self.state = 2214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2213
                    self.match(s_cypherParser.SP)


                self.state = 2226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2216
                    self.match(s_cypherParser.T__3)
                    self.state = 2218
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2217
                        self.match(s_cypherParser.SP)


                    self.state = 2220
                    self.oC_Expression()
                    self.state = 2222
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2221
                        self.match(s_cypherParser.SP)


                    self.state = 2228
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2231
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2233
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = s_cypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2235
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = s_cypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2237
            self.oC_Namespace()
            self.state = 2238
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = s_cypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2245
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,399,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2240
                    self.oC_SymbolicName()
                    self.state = 2241
                    self.match(s_cypherParser.T__0) 
                self.state = 2247
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,399,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = s_cypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2248
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_ListLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListLiteralContext,0)


        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = s_cypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_oC_Literal)
        try:
            self.state = 2256
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2250
                self.oC_BooleanLiteral()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2251
                self.match(s_cypherParser.NULL)
                pass
            elif token in [105, 106, 107, 115, 116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2252
                self.oC_NumberLiteral()
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2253
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2254
                self.oC_ListLiteral()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2255
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = s_cypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2258
            _la = self._input.LA(1)
            if not(_la==103 or _la==104):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = s_cypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_oC_NumberLiteral)
        try:
            self.state = 2262
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115, 116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2260
                self.oC_DoubleLiteral()
                pass
            elif token in [105, 106, 107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2261
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(s_cypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(s_cypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = s_cypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2264
            _la = self._input.LA(1)
            if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(s_cypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(s_cypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = s_cypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2266
            _la = self._input.LA(1)
            if not(_la==115 or _la==116):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_ListLiteralExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ListLiteralExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ListLiteralExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = s_cypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2268
            self.match(s_cypherParser.T__10)
            self.state = 2270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2269
                self.match(s_cypherParser.SP)


            self.state = 2289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663120070976) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 2272
                self.s_ListLiteralExpression()
                self.state = 2274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2273
                    self.match(s_cypherParser.SP)


                self.state = 2286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2276
                    self.match(s_cypherParser.T__3)
                    self.state = 2278
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2277
                        self.match(s_cypherParser.SP)


                    self.state = 2280
                    self.s_ListLiteralExpression()
                    self.state = 2282
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2281
                        self.match(s_cypherParser.SP)


                    self.state = 2288
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2291
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ListLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ListLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ListLiteralExpression" ):
                listener.enterS_ListLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ListLiteralExpression" ):
                listener.exitS_ListLiteralExpression(self)




    def s_ListLiteralExpression(self):

        localctx = s_cypherParser.S_ListLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_s_ListLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2293
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_MapKeyValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MapKeyValueContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MapKeyValueContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = s_cypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2295
            self.match(s_cypherParser.T__5)
            self.state = 2297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2296
                self.match(s_cypherParser.SP)


            self.state = 2310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 2299
                self.s_MapKeyValue()
                self.state = 2307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2300
                    self.match(s_cypherParser.T__3)
                    self.state = 2302
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2301
                        self.match(s_cypherParser.SP)


                    self.state = 2304
                    self.s_MapKeyValue()
                    self.state = 2309
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2312
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MapKeyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MapKeyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MapKeyValue" ):
                listener.enterS_MapKeyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MapKeyValue" ):
                listener.exitS_MapKeyValue(self)




    def s_MapKeyValue(self):

        localctx = s_cypherParser.S_MapKeyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_s_MapKeyValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2314
            self.oC_PropertyKeyName()
            self.state = 2316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2315
                self.match(s_cypherParser.SP)


            self.state = 2318
            self.match(s_cypherParser.T__9)
            self.state = 2320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2319
                self.match(s_cypherParser.SP)


            self.state = 2322
            self.oC_Expression()
            self.state = 2324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2323
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = s_cypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2326
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = s_cypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2328
            self.match(s_cypherParser.T__25)
            self.state = 2331
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 2329
                self.oC_SymbolicName()
                pass
            elif token in [106]:
                self.state = 2330
                self.match(s_cypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = s_cypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_oC_SchemaName)
        try:
            self.state = 2335
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2333
                self.oC_SymbolicName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2334
                self.oC_ReservedWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = s_cypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2337
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2014314496) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = s_cypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2339
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32216449024) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = s_cypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2341
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70334384701440) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





