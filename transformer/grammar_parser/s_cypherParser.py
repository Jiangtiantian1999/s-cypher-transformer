# Generated from .\s_cypher.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,137,1960,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,1,0,1,0,1,0,3,0,262,8,0,1,1,
        1,1,3,1,266,8,1,1,1,1,1,3,1,270,8,1,1,1,1,1,3,1,274,8,1,1,1,1,1,
        3,1,278,8,1,3,1,280,8,1,1,1,3,1,283,8,1,1,1,3,1,286,8,1,1,2,1,2,
        1,2,1,2,1,2,1,2,3,2,294,8,2,1,2,3,2,297,8,2,1,2,3,2,300,8,2,1,3,
        1,3,3,3,304,8,3,1,3,1,3,1,3,1,3,3,3,310,8,3,1,3,3,3,313,8,3,1,3,
        1,3,1,3,1,3,1,3,3,3,320,8,3,1,3,3,3,323,8,3,1,3,1,3,1,3,3,3,328,
        8,3,1,3,1,3,1,3,1,3,3,3,334,8,3,1,3,3,3,337,8,3,1,3,1,3,1,3,3,3,
        342,8,3,1,3,1,3,3,3,346,8,3,1,3,1,3,1,3,1,3,3,3,352,8,3,1,3,1,3,
        3,3,356,8,3,1,3,1,3,1,3,1,3,3,3,362,8,3,1,3,1,3,3,3,366,8,3,1,3,
        1,3,1,3,1,3,3,3,372,8,3,1,3,1,3,3,3,376,8,3,1,3,1,3,1,3,1,3,3,3,
        382,8,3,1,3,1,3,3,3,386,8,3,1,4,1,4,3,4,390,8,4,1,4,1,4,1,5,1,5,
        3,5,396,8,5,1,5,3,5,399,8,5,1,6,1,6,3,6,403,8,6,1,6,1,6,1,7,1,7,
        3,7,409,8,7,1,7,3,7,412,8,7,1,8,1,8,3,8,416,8,8,1,8,1,8,3,8,420,
        8,8,1,8,1,8,3,8,424,8,8,1,8,5,8,427,8,8,10,8,12,8,430,9,8,1,9,1,
        9,1,9,1,9,3,9,436,8,9,1,9,1,9,1,9,3,9,441,8,9,1,10,1,10,3,10,445,
        8,10,1,10,1,10,3,10,449,8,10,1,10,1,10,3,10,453,8,10,1,10,1,10,3,
        10,457,8,10,1,10,5,10,460,8,10,10,10,12,10,463,9,10,1,11,1,11,1,
        11,1,11,3,11,469,8,11,1,11,1,11,1,11,3,11,474,8,11,1,12,1,12,3,12,
        478,8,12,1,12,1,12,1,13,1,13,3,13,484,8,13,1,13,1,13,1,14,1,14,3,
        14,490,8,14,1,15,1,15,3,15,494,8,15,1,15,1,15,1,16,1,16,3,16,500,
        8,16,1,16,1,16,1,17,1,17,3,17,506,8,17,1,17,1,17,3,17,510,8,17,1,
        17,1,17,1,17,1,17,3,17,516,8,17,1,17,1,17,3,17,520,8,17,1,17,1,17,
        1,17,3,17,525,8,17,1,18,1,18,3,18,529,8,18,1,18,1,18,3,18,533,8,
        18,1,18,1,18,3,18,537,8,18,1,18,1,18,1,19,1,19,3,19,543,8,19,1,19,
        1,19,3,19,547,8,19,1,19,1,19,1,20,1,20,3,20,553,8,20,1,20,1,20,3,
        20,557,8,20,3,20,559,8,20,1,20,1,20,3,20,563,8,20,3,20,565,8,20,
        1,20,1,20,3,20,569,8,20,3,20,571,8,20,1,20,1,20,3,20,575,8,20,3,
        20,577,8,20,1,20,1,20,1,21,1,21,3,21,583,8,21,1,22,1,22,3,22,587,
        8,22,1,22,1,22,1,22,1,22,1,22,3,22,594,8,22,1,22,1,22,1,22,1,22,
        5,22,600,8,22,10,22,12,22,603,9,22,3,22,605,8,22,1,22,1,22,1,23,
        1,23,3,23,611,8,23,1,23,1,23,3,23,615,8,23,3,23,617,8,23,1,24,3,
        24,620,8,24,1,24,1,24,3,24,624,8,24,1,24,1,24,3,24,628,8,24,3,24,
        630,8,24,1,25,1,25,3,25,634,8,25,1,25,1,25,3,25,638,8,25,3,25,640,
        8,25,1,25,1,25,3,25,644,8,25,3,25,646,8,25,1,25,3,25,649,8,25,1,
        25,1,25,3,25,653,8,25,3,25,655,8,25,1,25,1,25,3,25,659,8,25,3,25,
        661,8,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,3,26,670,8,26,1,27,1,
        27,3,27,674,8,27,1,27,1,27,5,27,678,8,27,10,27,12,27,681,9,27,1,
        28,3,28,684,8,28,1,28,1,28,1,28,1,28,1,29,3,29,691,8,29,1,29,1,29,
        3,29,695,8,29,1,29,1,29,3,29,699,8,29,1,29,1,29,1,30,1,30,3,30,705,
        8,30,1,30,4,30,708,8,30,11,30,12,30,709,1,30,3,30,713,8,30,1,30,
        3,30,716,8,30,3,30,718,8,30,1,30,3,30,721,8,30,1,30,1,30,1,31,1,
        31,3,31,727,8,31,1,31,5,31,730,8,31,10,31,12,31,733,9,31,1,32,1,
        32,1,32,1,32,1,32,1,33,1,33,3,33,742,8,33,1,33,1,33,3,33,746,8,33,
        1,33,1,33,3,33,750,8,33,1,33,1,33,3,33,754,8,33,1,33,1,33,3,33,758,
        8,33,1,33,3,33,761,8,33,1,33,1,33,1,34,1,34,3,34,767,8,34,1,35,1,
        35,1,36,1,36,1,37,3,37,774,8,37,1,37,1,37,3,37,778,8,37,1,37,3,37,
        781,8,37,1,37,3,37,784,8,37,1,37,1,37,1,38,1,38,1,39,1,39,3,39,792,
        8,39,1,39,5,39,795,8,39,10,39,12,39,798,9,39,1,40,1,40,1,40,1,40,
        3,40,804,8,40,1,40,1,40,1,40,3,40,809,8,40,1,40,3,40,812,8,40,1,
        41,1,41,3,41,816,8,41,1,42,1,42,3,42,820,8,42,5,42,822,8,42,10,42,
        12,42,825,9,42,1,42,1,42,1,42,3,42,830,8,42,5,42,832,8,42,10,42,
        12,42,835,9,42,1,42,1,42,3,42,839,8,42,1,42,5,42,842,8,42,10,42,
        12,42,845,9,42,1,42,3,42,848,8,42,1,42,3,42,851,8,42,3,42,853,8,
        42,1,43,4,43,856,8,43,11,43,12,43,857,1,43,1,43,1,44,1,44,3,44,864,
        8,44,5,44,866,8,44,10,44,12,44,869,9,44,1,44,1,44,3,44,873,8,44,
        5,44,875,8,44,10,44,12,44,878,9,44,1,44,1,44,3,44,882,8,44,1,45,
        1,45,1,45,3,45,887,8,45,1,46,1,46,3,46,891,8,46,1,46,1,46,1,46,1,
        46,1,46,1,46,1,47,1,47,3,47,901,8,47,1,47,1,47,1,47,5,47,906,8,47,
        10,47,12,47,909,9,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
        1,48,3,48,921,8,48,1,49,1,49,3,49,925,8,49,1,49,1,49,1,50,1,50,3,
        50,931,8,50,1,50,1,50,3,50,935,8,50,1,50,1,50,3,50,939,8,50,1,50,
        5,50,942,8,50,10,50,12,50,945,9,50,1,51,1,51,1,51,1,51,3,51,951,
        8,51,1,51,1,51,3,51,955,8,51,1,51,5,51,958,8,51,10,51,12,51,961,
        9,51,1,52,1,52,1,52,1,52,3,52,967,8,52,1,53,1,53,1,53,1,53,3,53,
        973,8,53,1,53,1,53,1,53,3,53,978,8,53,1,54,1,54,1,54,1,54,3,54,984,
        8,54,1,54,3,54,987,8,54,1,54,1,54,1,54,1,54,3,54,993,8,54,3,54,995,
        8,54,1,55,1,55,3,55,999,8,55,1,55,1,55,3,55,1003,8,55,1,55,5,55,
        1006,8,55,10,55,12,55,1009,9,55,1,55,3,55,1012,8,55,1,55,3,55,1015,
        8,55,1,56,1,56,1,56,1,56,1,56,3,56,1022,8,56,1,56,1,56,1,57,1,57,
        1,57,3,57,1029,8,57,1,57,3,57,1032,8,57,1,58,1,58,1,58,1,59,3,59,
        1038,8,59,1,59,3,59,1041,8,59,1,59,1,59,1,59,1,59,3,59,1047,8,59,
        1,59,1,59,3,59,1051,8,59,1,59,1,59,3,59,1055,8,59,1,60,1,60,3,60,
        1059,8,60,1,60,1,60,3,60,1063,8,60,1,60,5,60,1066,8,60,10,60,12,
        60,1069,9,60,1,60,1,60,3,60,1073,8,60,1,60,1,60,3,60,1077,8,60,1,
        60,5,60,1080,8,60,10,60,12,60,1083,9,60,3,60,1085,8,60,1,61,1,61,
        1,61,1,61,1,61,1,61,1,61,3,61,1094,8,61,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,3,62,1103,8,62,1,62,5,62,1106,8,62,10,62,12,62,1109,9,
        62,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,65,1,65,3,65,1121,8,
        65,1,65,3,65,1124,8,65,1,66,1,66,1,66,1,66,1,67,1,67,3,67,1132,8,
        67,1,67,1,67,3,67,1136,8,67,1,67,5,67,1139,8,67,10,67,12,67,1142,
        9,67,1,68,1,68,1,69,1,69,3,69,1148,8,69,1,69,5,69,1151,8,69,10,69,
        12,69,1154,9,69,1,69,1,69,1,69,1,69,3,69,1160,8,69,1,70,1,70,3,70,
        1164,8,70,1,70,4,70,1167,8,70,11,70,12,70,1168,1,71,1,71,3,71,1173,
        8,71,1,71,1,71,1,72,1,72,3,72,1179,8,72,1,72,1,72,3,72,1183,8,72,
        1,72,3,72,1186,8,72,1,72,3,72,1189,8,72,1,72,1,72,3,72,1193,8,72,
        1,72,1,72,1,72,1,72,3,72,1199,8,72,1,72,1,72,3,72,1203,8,72,1,72,
        3,72,1206,8,72,1,72,3,72,1209,8,72,1,72,1,72,1,72,1,72,3,72,1215,
        8,72,1,72,3,72,1218,8,72,1,72,3,72,1221,8,72,1,72,1,72,3,72,1225,
        8,72,1,72,1,72,1,72,1,72,3,72,1231,8,72,1,72,3,72,1234,8,72,1,72,
        3,72,1237,8,72,1,72,1,72,3,72,1241,8,72,1,73,1,73,3,73,1245,8,73,
        1,74,1,74,3,74,1249,8,74,1,74,1,74,3,74,1253,8,74,1,74,1,74,3,74,
        1257,8,74,1,74,3,74,1260,8,74,1,74,5,74,1263,8,74,10,74,12,74,1266,
        9,74,1,75,1,75,3,75,1270,8,75,1,75,5,75,1273,8,75,10,75,12,75,1276,
        9,75,1,76,1,76,3,76,1280,8,76,1,76,1,76,1,77,1,77,3,77,1286,8,77,
        1,77,1,77,3,77,1290,8,77,3,77,1292,8,77,1,77,1,77,3,77,1296,8,77,
        1,77,1,77,3,77,1300,8,77,3,77,1302,8,77,3,77,1304,8,77,1,78,1,78,
        1,79,1,79,1,80,1,80,3,80,1312,8,80,1,80,4,80,1315,8,80,11,80,12,
        80,1316,1,81,1,81,1,82,1,82,1,82,1,82,1,82,5,82,1326,8,82,10,82,
        12,82,1329,9,82,1,83,1,83,1,83,1,83,1,83,5,83,1336,8,83,10,83,12,
        83,1339,9,83,1,84,1,84,1,84,1,84,1,84,5,84,1346,8,84,10,84,12,84,
        1349,9,84,1,85,1,85,3,85,1353,8,85,5,85,1355,8,85,10,85,12,85,1358,
        9,85,1,85,1,85,1,86,1,86,3,86,1364,8,86,1,86,5,86,1367,8,86,10,86,
        12,86,1370,9,86,1,87,1,87,3,87,1374,8,87,1,87,1,87,1,87,3,87,1379,
        8,87,1,87,1,87,1,87,3,87,1384,8,87,1,87,1,87,1,87,3,87,1389,8,87,
        1,87,1,87,1,87,3,87,1394,8,87,1,87,1,87,1,87,3,87,1399,8,87,1,87,
        3,87,1402,8,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
        3,88,1414,8,88,1,88,3,88,1417,8,88,1,88,1,88,1,89,1,89,1,89,3,89,
        1424,8,89,1,89,1,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
        1,90,3,90,1438,8,90,1,91,1,91,3,91,1442,8,91,1,91,1,91,3,91,1446,
        8,91,1,91,1,91,3,91,1450,8,91,1,91,1,91,3,91,1454,8,91,1,91,5,91,
        1457,8,91,10,91,12,91,1460,9,91,1,92,1,92,3,92,1464,8,92,1,92,1,
        92,3,92,1468,8,92,1,92,1,92,3,92,1472,8,92,1,92,1,92,3,92,1476,8,
        92,1,92,1,92,3,92,1480,8,92,1,92,1,92,3,92,1484,8,92,1,92,5,92,1487,
        8,92,10,92,12,92,1490,9,92,1,93,1,93,3,93,1494,8,93,1,93,1,93,3,
        93,1498,8,93,1,93,5,93,1501,8,93,10,93,12,93,1504,9,93,1,94,1,94,
        1,94,3,94,1509,8,94,1,94,3,94,1512,8,94,1,95,1,95,3,95,1516,8,95,
        1,95,5,95,1519,8,95,10,95,12,95,1522,9,95,1,95,3,95,1525,8,95,1,
        95,3,95,1528,8,95,1,96,1,96,3,96,1532,8,96,1,96,1,96,1,97,1,97,1,
        97,1,97,1,97,3,97,1541,8,97,1,97,1,97,3,97,1545,8,97,1,97,1,97,3,
        97,1549,8,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,1560,
        8,97,1,98,1,98,3,98,1564,8,98,1,98,4,98,1567,8,98,11,98,12,98,1568,
        1,98,1,98,3,98,1573,8,98,1,98,1,98,3,98,1577,8,98,1,98,4,98,1580,
        8,98,11,98,12,98,1581,3,98,1584,8,98,1,98,3,98,1587,8,98,1,98,1,
        98,3,98,1591,8,98,1,98,3,98,1594,8,98,1,98,3,98,1597,8,98,1,98,1,
        98,1,99,1,99,3,99,1603,8,99,1,99,1,99,3,99,1607,8,99,1,99,1,99,3,
        99,1611,8,99,1,99,1,99,1,100,1,100,3,100,1617,8,100,1,100,1,100,
        3,100,1621,8,100,1,100,1,100,3,100,1625,8,100,1,100,3,100,1628,8,
        100,1,100,3,100,1631,8,100,1,100,1,100,1,101,1,101,3,101,1637,8,
        101,1,101,1,101,3,101,1641,8,101,1,101,1,101,3,101,1645,8,101,3,
        101,1647,8,101,1,101,1,101,3,101,1651,8,101,1,101,1,101,3,101,1655,
        8,101,3,101,1657,8,101,1,101,1,101,3,101,1661,8,101,1,101,1,101,
        3,101,1665,8,101,1,101,1,101,1,102,1,102,3,102,1671,8,102,1,102,
        1,102,3,102,1675,8,102,1,102,1,102,3,102,1679,8,102,1,102,1,102,
        1,102,1,102,3,102,1685,8,102,1,102,1,102,3,102,1689,8,102,1,102,
        1,102,3,102,1693,8,102,1,102,1,102,1,102,1,102,3,102,1699,8,102,
        1,102,1,102,3,102,1703,8,102,1,102,1,102,3,102,1707,8,102,1,102,
        1,102,1,102,1,102,3,102,1713,8,102,1,102,1,102,3,102,1717,8,102,
        1,102,1,102,3,102,1721,8,102,1,102,1,102,3,102,1725,8,102,1,103,
        1,103,3,103,1729,8,103,1,103,3,103,1732,8,103,1,104,1,104,1,105,
        1,105,3,105,1738,8,105,1,105,1,105,3,105,1742,8,105,1,105,1,105,
        1,106,1,106,1,106,1,106,1,106,1,106,1,107,1,107,3,107,1754,8,107,
        1,107,1,107,3,107,1758,8,107,1,107,1,107,3,107,1762,8,107,3,107,
        1764,8,107,1,107,1,107,3,107,1768,8,107,1,107,1,107,3,107,1772,8,
        107,1,107,1,107,3,107,1776,8,107,5,107,1778,8,107,10,107,12,107,
        1781,9,107,3,107,1783,8,107,1,107,1,107,1,108,1,108,1,108,1,109,
        1,109,3,109,1792,8,109,1,109,1,109,3,109,1796,8,109,1,109,1,109,
        1,109,3,109,1801,8,109,1,109,3,109,1804,8,109,3,109,1806,8,109,1,
        109,3,109,1809,8,109,1,109,1,109,1,110,1,110,3,110,1815,8,110,1,
        110,1,110,3,110,1819,8,110,1,110,1,110,3,110,1823,8,110,1,110,1,
        110,3,110,1827,8,110,1,110,1,110,3,110,1831,8,110,5,110,1833,8,110,
        10,110,12,110,1836,9,110,3,110,1838,8,110,1,110,1,110,1,111,1,111,
        1,112,1,112,1,113,1,113,1,113,1,114,1,114,1,114,5,114,1852,8,114,
        10,114,12,114,1855,9,114,1,115,1,115,1,116,1,116,1,116,1,116,1,116,
        1,116,3,116,1865,8,116,1,117,1,117,1,118,1,118,3,118,1871,8,118,
        1,119,1,119,1,120,1,120,1,121,1,121,3,121,1879,8,121,1,121,1,121,
        3,121,1883,8,121,1,121,1,121,3,121,1887,8,121,1,121,1,121,3,121,
        1891,8,121,5,121,1893,8,121,10,121,12,121,1896,9,121,3,121,1898,
        8,121,1,121,1,121,1,122,1,122,3,122,1904,8,122,1,122,1,122,3,122,
        1908,8,122,1,122,1,122,3,122,1912,8,122,1,122,1,122,3,122,1916,8,
        122,1,122,1,122,3,122,1920,8,122,1,122,1,122,3,122,1924,8,122,1,
        122,1,122,3,122,1928,8,122,1,122,1,122,3,122,1932,8,122,5,122,1934,
        8,122,10,122,12,122,1937,9,122,3,122,1939,8,122,1,122,1,122,1,123,
        1,123,1,124,1,124,1,124,3,124,1948,8,124,1,125,1,125,3,125,1952,
        8,125,1,126,1,126,1,127,1,127,1,128,1,128,1,128,0,0,129,0,2,4,6,
        8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
        52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,
        96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,
        130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
        162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,
        194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,
        226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,
        0,11,1,0,54,55,6,0,48,48,93,93,99,101,108,108,129,131,134,134,5,
        0,48,68,71,92,94,98,102,104,119,128,1,0,78,81,1,0,21,22,1,0,103,
        104,1,0,105,107,1,0,115,116,2,0,17,17,27,30,2,0,18,18,31,34,2,0,
        22,22,35,45,2234,0,261,1,0,0,0,2,265,1,0,0,0,4,293,1,0,0,0,6,385,
        1,0,0,0,8,387,1,0,0,0,10,393,1,0,0,0,12,400,1,0,0,0,14,406,1,0,0,
        0,16,413,1,0,0,0,18,440,1,0,0,0,20,444,1,0,0,0,22,473,1,0,0,0,24,
        475,1,0,0,0,26,481,1,0,0,0,28,489,1,0,0,0,30,491,1,0,0,0,32,497,
        1,0,0,0,34,524,1,0,0,0,36,526,1,0,0,0,38,540,1,0,0,0,40,550,1,0,
        0,0,42,582,1,0,0,0,44,584,1,0,0,0,46,608,1,0,0,0,48,619,1,0,0,0,
        50,631,1,0,0,0,52,664,1,0,0,0,54,673,1,0,0,0,56,683,1,0,0,0,58,690,
        1,0,0,0,60,702,1,0,0,0,62,724,1,0,0,0,64,734,1,0,0,0,66,739,1,0,
        0,0,68,766,1,0,0,0,70,768,1,0,0,0,72,770,1,0,0,0,74,773,1,0,0,0,
        76,787,1,0,0,0,78,789,1,0,0,0,80,811,1,0,0,0,82,815,1,0,0,0,84,852,
        1,0,0,0,86,855,1,0,0,0,88,867,1,0,0,0,90,886,1,0,0,0,92,888,1,0,
        0,0,94,898,1,0,0,0,96,920,1,0,0,0,98,922,1,0,0,0,100,928,1,0,0,0,
        102,946,1,0,0,0,104,966,1,0,0,0,106,968,1,0,0,0,108,979,1,0,0,0,
        110,996,1,0,0,0,112,1021,1,0,0,0,114,1025,1,0,0,0,116,1033,1,0,0,
        0,118,1040,1,0,0,0,120,1084,1,0,0,0,122,1093,1,0,0,0,124,1095,1,
        0,0,0,126,1110,1,0,0,0,128,1114,1,0,0,0,130,1118,1,0,0,0,132,1125,
        1,0,0,0,134,1129,1,0,0,0,136,1143,1,0,0,0,138,1159,1,0,0,0,140,1161,
        1,0,0,0,142,1170,1,0,0,0,144,1240,1,0,0,0,146,1244,1,0,0,0,148,1246,
        1,0,0,0,150,1267,1,0,0,0,152,1277,1,0,0,0,154,1283,1,0,0,0,156,1305,
        1,0,0,0,158,1307,1,0,0,0,160,1309,1,0,0,0,162,1318,1,0,0,0,164,1320,
        1,0,0,0,166,1330,1,0,0,0,168,1340,1,0,0,0,170,1356,1,0,0,0,172,1361,
        1,0,0,0,174,1401,1,0,0,0,176,1413,1,0,0,0,178,1420,1,0,0,0,180,1437,
        1,0,0,0,182,1439,1,0,0,0,184,1461,1,0,0,0,186,1491,1,0,0,0,188,1511,
        1,0,0,0,190,1513,1,0,0,0,192,1529,1,0,0,0,194,1559,1,0,0,0,196,1583,
        1,0,0,0,198,1600,1,0,0,0,200,1614,1,0,0,0,202,1634,1,0,0,0,204,1724,
        1,0,0,0,206,1726,1,0,0,0,208,1733,1,0,0,0,210,1735,1,0,0,0,212,1745,
        1,0,0,0,214,1751,1,0,0,0,216,1786,1,0,0,0,218,1789,1,0,0,0,220,1812,
        1,0,0,0,222,1841,1,0,0,0,224,1843,1,0,0,0,226,1845,1,0,0,0,228,1853,
        1,0,0,0,230,1856,1,0,0,0,232,1864,1,0,0,0,234,1866,1,0,0,0,236,1870,
        1,0,0,0,238,1872,1,0,0,0,240,1874,1,0,0,0,242,1876,1,0,0,0,244,1901,
        1,0,0,0,246,1942,1,0,0,0,248,1944,1,0,0,0,250,1951,1,0,0,0,252,1953,
        1,0,0,0,254,1955,1,0,0,0,256,1957,1,0,0,0,258,262,3,78,39,0,259,
        262,3,108,54,0,260,262,3,28,14,0,261,258,1,0,0,0,261,259,1,0,0,0,
        261,260,1,0,0,0,262,1,1,0,0,0,263,264,5,58,0,0,264,266,5,135,0,0,
        265,263,1,0,0,0,265,266,1,0,0,0,266,267,1,0,0,0,267,269,5,59,0,0,
        268,270,5,135,0,0,269,268,1,0,0,0,269,270,1,0,0,0,270,271,1,0,0,
        0,271,279,3,134,67,0,272,274,5,135,0,0,273,272,1,0,0,0,273,274,1,
        0,0,0,274,277,1,0,0,0,275,278,3,24,12,0,276,278,3,26,13,0,277,275,
        1,0,0,0,277,276,1,0,0,0,278,280,1,0,0,0,279,273,1,0,0,0,279,280,
        1,0,0,0,280,285,1,0,0,0,281,283,5,135,0,0,282,281,1,0,0,0,282,283,
        1,0,0,0,283,284,1,0,0,0,284,286,3,132,66,0,285,282,1,0,0,0,285,286,
        1,0,0,0,286,3,1,0,0,0,287,294,3,98,49,0,288,294,3,94,47,0,289,294,
        3,20,10,0,290,294,3,100,50,0,291,294,3,102,51,0,292,294,3,16,8,0,
        293,287,1,0,0,0,293,288,1,0,0,0,293,289,1,0,0,0,293,290,1,0,0,0,
        293,291,1,0,0,0,293,292,1,0,0,0,294,299,1,0,0,0,295,297,5,135,0,
        0,296,295,1,0,0,0,296,297,1,0,0,0,297,298,1,0,0,0,298,300,3,24,12,
        0,299,296,1,0,0,0,299,300,1,0,0,0,300,5,1,0,0,0,301,303,3,230,115,
        0,302,304,5,135,0,0,303,302,1,0,0,0,303,304,1,0,0,0,304,305,1,0,
        0,0,305,306,3,66,33,0,306,386,1,0,0,0,307,312,3,230,115,0,308,310,
        5,135,0,0,309,308,1,0,0,0,309,310,1,0,0,0,310,311,1,0,0,0,311,313,
        3,66,33,0,312,309,1,0,0,0,312,313,1,0,0,0,313,314,1,0,0,0,314,315,
        5,1,0,0,315,316,3,8,4,0,316,386,1,0,0,0,317,322,3,230,115,0,318,
        320,5,135,0,0,319,318,1,0,0,0,319,320,1,0,0,0,320,321,1,0,0,0,321,
        323,3,66,33,0,322,319,1,0,0,0,322,323,1,0,0,0,323,324,1,0,0,0,324,
        325,5,1,0,0,325,327,3,10,5,0,326,328,5,135,0,0,327,326,1,0,0,0,327,
        328,1,0,0,0,328,329,1,0,0,0,329,330,3,12,6,0,330,386,1,0,0,0,331,
        336,3,230,115,0,332,334,5,135,0,0,333,332,1,0,0,0,333,334,1,0,0,
        0,334,335,1,0,0,0,335,337,3,66,33,0,336,333,1,0,0,0,336,337,1,0,
        0,0,337,338,1,0,0,0,338,339,5,1,0,0,339,341,3,10,5,0,340,342,5,135,
        0,0,341,340,1,0,0,0,341,342,1,0,0,0,342,343,1,0,0,0,343,345,5,2,
        0,0,344,346,5,135,0,0,345,344,1,0,0,0,345,346,1,0,0,0,346,347,1,
        0,0,0,347,348,3,14,7,0,348,386,1,0,0,0,349,351,3,160,80,0,350,352,
        5,135,0,0,351,350,1,0,0,0,351,352,1,0,0,0,352,353,1,0,0,0,353,355,
        5,2,0,0,354,356,5,135,0,0,355,354,1,0,0,0,355,356,1,0,0,0,356,357,
        1,0,0,0,357,358,3,162,81,0,358,386,1,0,0,0,359,361,3,230,115,0,360,
        362,5,135,0,0,361,360,1,0,0,0,361,362,1,0,0,0,362,363,1,0,0,0,363,
        365,5,2,0,0,364,366,5,135,0,0,365,364,1,0,0,0,365,366,1,0,0,0,366,
        367,1,0,0,0,367,368,3,162,81,0,368,386,1,0,0,0,369,371,3,230,115,
        0,370,372,5,135,0,0,371,370,1,0,0,0,371,372,1,0,0,0,372,373,1,0,
        0,0,373,375,5,3,0,0,374,376,5,135,0,0,375,374,1,0,0,0,375,376,1,
        0,0,0,376,377,1,0,0,0,377,378,3,162,81,0,378,386,1,0,0,0,379,381,
        3,230,115,0,380,382,5,135,0,0,381,380,1,0,0,0,381,382,1,0,0,0,382,
        383,1,0,0,0,383,384,3,150,75,0,384,386,1,0,0,0,385,301,1,0,0,0,385,
        307,1,0,0,0,385,317,1,0,0,0,385,331,1,0,0,0,385,349,1,0,0,0,385,
        359,1,0,0,0,385,369,1,0,0,0,385,379,1,0,0,0,386,7,1,0,0,0,387,389,
        3,246,123,0,388,390,5,135,0,0,389,388,1,0,0,0,389,390,1,0,0,0,390,
        391,1,0,0,0,391,392,3,66,33,0,392,9,1,0,0,0,393,398,3,246,123,0,
        394,396,5,135,0,0,395,394,1,0,0,0,395,396,1,0,0,0,396,397,1,0,0,
        0,397,399,3,66,33,0,398,395,1,0,0,0,398,399,1,0,0,0,399,11,1,0,0,
        0,400,402,5,47,0,0,401,403,5,135,0,0,402,401,1,0,0,0,402,403,1,0,
        0,0,403,404,1,0,0,0,404,405,3,66,33,0,405,13,1,0,0,0,406,411,3,162,
        81,0,407,409,5,135,0,0,408,407,1,0,0,0,408,409,1,0,0,0,409,410,1,
        0,0,0,410,412,3,66,33,0,411,408,1,0,0,0,411,412,1,0,0,0,412,15,1,
        0,0,0,413,415,5,53,0,0,414,416,5,135,0,0,415,414,1,0,0,0,415,416,
        1,0,0,0,416,417,1,0,0,0,417,428,3,18,9,0,418,420,5,135,0,0,419,418,
        1,0,0,0,419,420,1,0,0,0,420,421,1,0,0,0,421,423,5,4,0,0,422,424,
        5,135,0,0,423,422,1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,427,
        3,18,9,0,426,419,1,0,0,0,427,430,1,0,0,0,428,426,1,0,0,0,428,429,
        1,0,0,0,429,17,1,0,0,0,430,428,1,0,0,0,431,432,3,162,81,0,432,433,
        5,1,0,0,433,435,3,246,123,0,434,436,5,135,0,0,435,434,1,0,0,0,435,
        436,1,0,0,0,436,437,1,0,0,0,437,438,5,47,0,0,438,441,1,0,0,0,439,
        441,3,162,81,0,440,431,1,0,0,0,440,439,1,0,0,0,441,19,1,0,0,0,442,
        443,5,66,0,0,443,445,5,135,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,
        446,1,0,0,0,446,448,5,67,0,0,447,449,5,135,0,0,448,447,1,0,0,0,448,
        449,1,0,0,0,449,450,1,0,0,0,450,461,3,22,11,0,451,453,5,135,0,0,
        452,451,1,0,0,0,452,453,1,0,0,0,453,454,1,0,0,0,454,456,5,4,0,0,
        455,457,5,135,0,0,456,455,1,0,0,0,456,457,1,0,0,0,457,458,1,0,0,
        0,458,460,3,22,11,0,459,452,1,0,0,0,460,463,1,0,0,0,461,459,1,0,
        0,0,461,462,1,0,0,0,462,21,1,0,0,0,463,461,1,0,0,0,464,465,3,162,
        81,0,465,466,5,1,0,0,466,468,3,246,123,0,467,469,5,135,0,0,468,467,
        1,0,0,0,468,469,1,0,0,0,469,470,1,0,0,0,470,471,5,47,0,0,471,474,
        1,0,0,0,472,474,3,162,81,0,473,464,1,0,0,0,473,472,1,0,0,0,474,23,
        1,0,0,0,475,477,5,49,0,0,476,478,5,135,0,0,477,476,1,0,0,0,477,478,
        1,0,0,0,478,479,1,0,0,0,479,480,3,162,81,0,480,25,1,0,0,0,481,483,
        5,51,0,0,482,484,5,135,0,0,483,482,1,0,0,0,483,484,1,0,0,0,484,485,
        1,0,0,0,485,486,3,162,81,0,486,27,1,0,0,0,487,490,3,30,15,0,488,
        490,3,32,16,0,489,487,1,0,0,0,489,488,1,0,0,0,490,29,1,0,0,0,491,
        493,5,50,0,0,492,494,5,135,0,0,493,492,1,0,0,0,493,494,1,0,0,0,494,
        495,1,0,0,0,495,496,3,162,81,0,496,31,1,0,0,0,497,499,5,52,0,0,498,
        500,5,135,0,0,499,498,1,0,0,0,499,500,1,0,0,0,500,501,1,0,0,0,501,
        502,3,162,81,0,502,33,1,0,0,0,503,505,3,230,115,0,504,506,5,135,
        0,0,505,504,1,0,0,0,505,506,1,0,0,0,506,507,1,0,0,0,507,509,5,2,
        0,0,508,510,5,135,0,0,509,508,1,0,0,0,509,510,1,0,0,0,510,511,1,
        0,0,0,511,512,3,36,18,0,512,525,1,0,0,0,513,515,3,230,115,0,514,
        516,5,135,0,0,515,514,1,0,0,0,515,516,1,0,0,0,516,517,1,0,0,0,517,
        519,5,2,0,0,518,520,5,135,0,0,519,518,1,0,0,0,519,520,1,0,0,0,520,
        521,1,0,0,0,521,522,3,136,68,0,522,525,1,0,0,0,523,525,3,136,68,
        0,524,503,1,0,0,0,524,513,1,0,0,0,524,523,1,0,0,0,525,35,1,0,0,0,
        526,528,3,216,108,0,527,529,5,135,0,0,528,527,1,0,0,0,528,529,1,
        0,0,0,529,530,1,0,0,0,530,532,5,5,0,0,531,533,5,135,0,0,532,531,
        1,0,0,0,532,533,1,0,0,0,533,534,1,0,0,0,534,536,3,38,19,0,535,537,
        5,135,0,0,536,535,1,0,0,0,536,537,1,0,0,0,537,538,1,0,0,0,538,539,
        5,6,0,0,539,37,1,0,0,0,540,542,3,40,20,0,541,543,5,135,0,0,542,541,
        1,0,0,0,542,543,1,0,0,0,543,544,1,0,0,0,544,546,3,144,72,0,545,547,
        5,135,0,0,546,545,1,0,0,0,546,547,1,0,0,0,547,548,1,0,0,0,548,549,
        3,40,20,0,549,39,1,0,0,0,550,552,5,5,0,0,551,553,5,135,0,0,552,551,
        1,0,0,0,552,553,1,0,0,0,553,558,1,0,0,0,554,556,3,230,115,0,555,
        557,5,135,0,0,556,555,1,0,0,0,556,557,1,0,0,0,557,559,1,0,0,0,558,
        554,1,0,0,0,558,559,1,0,0,0,559,564,1,0,0,0,560,562,3,150,75,0,561,
        563,5,135,0,0,562,561,1,0,0,0,562,563,1,0,0,0,563,565,1,0,0,0,564,
        560,1,0,0,0,564,565,1,0,0,0,565,570,1,0,0,0,566,568,3,66,33,0,567,
        569,5,135,0,0,568,567,1,0,0,0,568,569,1,0,0,0,569,571,1,0,0,0,570,
        566,1,0,0,0,570,571,1,0,0,0,571,576,1,0,0,0,572,574,3,42,21,0,573,
        575,5,135,0,0,574,573,1,0,0,0,574,575,1,0,0,0,575,577,1,0,0,0,576,
        572,1,0,0,0,576,577,1,0,0,0,577,578,1,0,0,0,578,579,5,6,0,0,579,
        41,1,0,0,0,580,583,3,44,22,0,581,583,3,248,124,0,582,580,1,0,0,0,
        582,581,1,0,0,0,583,43,1,0,0,0,584,586,5,7,0,0,585,587,5,135,0,0,
        586,585,1,0,0,0,586,587,1,0,0,0,587,604,1,0,0,0,588,589,3,46,23,
        0,589,590,5,8,0,0,590,601,3,48,24,0,591,593,5,4,0,0,592,594,5,135,
        0,0,593,592,1,0,0,0,593,594,1,0,0,0,594,595,1,0,0,0,595,596,3,46,
        23,0,596,597,5,8,0,0,597,598,3,48,24,0,598,600,1,0,0,0,599,591,1,
        0,0,0,600,603,1,0,0,0,601,599,1,0,0,0,601,602,1,0,0,0,602,605,1,
        0,0,0,603,601,1,0,0,0,604,588,1,0,0,0,604,605,1,0,0,0,605,606,1,
        0,0,0,606,607,5,9,0,0,607,45,1,0,0,0,608,610,3,246,123,0,609,611,
        5,135,0,0,610,609,1,0,0,0,610,611,1,0,0,0,611,616,1,0,0,0,612,614,
        3,66,33,0,613,615,5,135,0,0,614,613,1,0,0,0,614,615,1,0,0,0,615,
        617,1,0,0,0,616,612,1,0,0,0,616,617,1,0,0,0,617,47,1,0,0,0,618,620,
        5,135,0,0,619,618,1,0,0,0,619,620,1,0,0,0,620,621,1,0,0,0,621,623,
        3,162,81,0,622,624,5,135,0,0,623,622,1,0,0,0,623,624,1,0,0,0,624,
        629,1,0,0,0,625,627,3,66,33,0,626,628,5,135,0,0,627,626,1,0,0,0,
        627,628,1,0,0,0,628,630,1,0,0,0,629,625,1,0,0,0,629,630,1,0,0,0,
        630,49,1,0,0,0,631,633,5,10,0,0,632,634,5,135,0,0,633,632,1,0,0,
        0,633,634,1,0,0,0,634,639,1,0,0,0,635,637,3,230,115,0,636,638,5,
        135,0,0,637,636,1,0,0,0,637,638,1,0,0,0,638,640,1,0,0,0,639,635,
        1,0,0,0,639,640,1,0,0,0,640,645,1,0,0,0,641,643,3,148,74,0,642,644,
        5,135,0,0,643,642,1,0,0,0,643,644,1,0,0,0,644,646,1,0,0,0,645,641,
        1,0,0,0,645,646,1,0,0,0,646,648,1,0,0,0,647,649,3,154,77,0,648,647,
        1,0,0,0,648,649,1,0,0,0,649,654,1,0,0,0,650,652,3,66,33,0,651,653,
        5,135,0,0,652,651,1,0,0,0,652,653,1,0,0,0,653,655,1,0,0,0,654,650,
        1,0,0,0,654,655,1,0,0,0,655,660,1,0,0,0,656,658,3,146,73,0,657,659,
        5,135,0,0,658,657,1,0,0,0,658,659,1,0,0,0,659,661,1,0,0,0,660,656,
        1,0,0,0,660,661,1,0,0,0,661,662,1,0,0,0,662,663,5,11,0,0,663,51,
        1,0,0,0,664,669,3,182,91,0,665,670,3,64,32,0,666,670,3,176,88,0,
        667,670,3,178,89,0,668,670,3,180,90,0,669,665,1,0,0,0,669,666,1,
        0,0,0,669,667,1,0,0,0,669,668,1,0,0,0,669,670,1,0,0,0,670,53,1,0,
        0,0,671,674,3,190,95,0,672,674,3,60,30,0,673,671,1,0,0,0,673,672,
        1,0,0,0,674,679,1,0,0,0,675,678,3,56,28,0,676,678,3,58,29,0,677,
        675,1,0,0,0,677,676,1,0,0,0,678,681,1,0,0,0,679,677,1,0,0,0,679,
        680,1,0,0,0,680,55,1,0,0,0,681,679,1,0,0,0,682,684,5,135,0,0,683,
        682,1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,685,686,5,10,0,0,686,
        687,3,162,81,0,687,688,5,11,0,0,688,57,1,0,0,0,689,691,5,135,0,0,
        690,689,1,0,0,0,690,691,1,0,0,0,691,692,1,0,0,0,692,694,5,10,0,0,
        693,695,3,162,81,0,694,693,1,0,0,0,694,695,1,0,0,0,695,696,1,0,0,
        0,696,698,5,12,0,0,697,699,3,162,81,0,698,697,1,0,0,0,698,699,1,
        0,0,0,699,700,1,0,0,0,700,701,5,11,0,0,701,59,1,0,0,0,702,717,3,
        194,97,0,703,705,5,135,0,0,704,703,1,0,0,0,704,705,1,0,0,0,705,706,
        1,0,0,0,706,708,3,192,96,0,707,704,1,0,0,0,708,709,1,0,0,0,709,707,
        1,0,0,0,709,710,1,0,0,0,710,715,1,0,0,0,711,713,5,135,0,0,712,711,
        1,0,0,0,712,713,1,0,0,0,713,714,1,0,0,0,714,716,5,47,0,0,715,712,
        1,0,0,0,715,716,1,0,0,0,716,718,1,0,0,0,717,707,1,0,0,0,717,718,
        1,0,0,0,718,720,1,0,0,0,719,721,5,135,0,0,720,719,1,0,0,0,720,721,
        1,0,0,0,721,722,1,0,0,0,722,723,3,62,31,0,723,61,1,0,0,0,724,731,
        5,46,0,0,725,727,5,135,0,0,726,725,1,0,0,0,726,727,1,0,0,0,727,728,
        1,0,0,0,728,730,3,192,96,0,729,726,1,0,0,0,730,733,1,0,0,0,731,729,
        1,0,0,0,731,732,1,0,0,0,732,63,1,0,0,0,733,731,1,0,0,0,734,735,5,
        135,0,0,735,736,7,0,0,0,736,737,5,135,0,0,737,738,3,182,91,0,738,
        65,1,0,0,0,739,741,5,46,0,0,740,742,5,135,0,0,741,740,1,0,0,0,741,
        742,1,0,0,0,742,743,1,0,0,0,743,745,5,5,0,0,744,746,5,135,0,0,745,
        744,1,0,0,0,745,746,1,0,0,0,746,747,1,0,0,0,747,749,3,68,34,0,748,
        750,5,135,0,0,749,748,1,0,0,0,749,750,1,0,0,0,750,751,1,0,0,0,751,
        753,5,4,0,0,752,754,5,135,0,0,753,752,1,0,0,0,753,754,1,0,0,0,754,
        757,1,0,0,0,755,758,3,68,34,0,756,758,5,48,0,0,757,755,1,0,0,0,757,
        756,1,0,0,0,758,760,1,0,0,0,759,761,5,135,0,0,760,759,1,0,0,0,760,
        761,1,0,0,0,761,762,1,0,0,0,762,763,5,6,0,0,763,67,1,0,0,0,764,767,
        5,117,0,0,765,767,3,244,122,0,766,764,1,0,0,0,766,765,1,0,0,0,767,
        69,1,0,0,0,768,769,7,1,0,0,769,71,1,0,0,0,770,771,7,2,0,0,771,73,
        1,0,0,0,772,774,5,135,0,0,773,772,1,0,0,0,773,774,1,0,0,0,774,775,
        1,0,0,0,775,780,3,76,38,0,776,778,5,135,0,0,777,776,1,0,0,0,777,
        778,1,0,0,0,778,779,1,0,0,0,779,781,5,13,0,0,780,777,1,0,0,0,780,
        781,1,0,0,0,781,783,1,0,0,0,782,784,5,135,0,0,783,782,1,0,0,0,783,
        784,1,0,0,0,784,785,1,0,0,0,785,786,5,0,0,1,786,75,1,0,0,0,787,788,
        3,0,0,0,788,77,1,0,0,0,789,796,3,82,41,0,790,792,5,135,0,0,791,790,
        1,0,0,0,791,792,1,0,0,0,792,793,1,0,0,0,793,795,3,80,40,0,794,791,
        1,0,0,0,795,798,1,0,0,0,796,794,1,0,0,0,796,797,1,0,0,0,797,79,1,
        0,0,0,798,796,1,0,0,0,799,800,5,56,0,0,800,801,5,135,0,0,801,803,
        5,57,0,0,802,804,5,135,0,0,803,802,1,0,0,0,803,804,1,0,0,0,804,805,
        1,0,0,0,805,812,3,82,41,0,806,808,5,56,0,0,807,809,5,135,0,0,808,
        807,1,0,0,0,808,809,1,0,0,0,809,810,1,0,0,0,810,812,3,82,41,0,811,
        799,1,0,0,0,811,806,1,0,0,0,812,81,1,0,0,0,813,816,3,84,42,0,814,
        816,3,86,43,0,815,813,1,0,0,0,815,814,1,0,0,0,816,83,1,0,0,0,817,
        819,3,90,45,0,818,820,5,135,0,0,819,818,1,0,0,0,819,820,1,0,0,0,
        820,822,1,0,0,0,821,817,1,0,0,0,822,825,1,0,0,0,823,821,1,0,0,0,
        823,824,1,0,0,0,824,826,1,0,0,0,825,823,1,0,0,0,826,853,3,116,58,
        0,827,829,3,90,45,0,828,830,5,135,0,0,829,828,1,0,0,0,829,830,1,
        0,0,0,830,832,1,0,0,0,831,827,1,0,0,0,832,835,1,0,0,0,833,831,1,
        0,0,0,833,834,1,0,0,0,834,836,1,0,0,0,835,833,1,0,0,0,836,843,3,
        4,2,0,837,839,5,135,0,0,838,837,1,0,0,0,838,839,1,0,0,0,839,840,
        1,0,0,0,840,842,3,4,2,0,841,838,1,0,0,0,842,845,1,0,0,0,843,841,
        1,0,0,0,843,844,1,0,0,0,844,850,1,0,0,0,845,843,1,0,0,0,846,848,
        5,135,0,0,847,846,1,0,0,0,847,848,1,0,0,0,848,849,1,0,0,0,849,851,
        3,116,58,0,850,847,1,0,0,0,850,851,1,0,0,0,851,853,1,0,0,0,852,823,
        1,0,0,0,852,833,1,0,0,0,853,85,1,0,0,0,854,856,3,88,44,0,855,854,
        1,0,0,0,856,857,1,0,0,0,857,855,1,0,0,0,857,858,1,0,0,0,858,859,
        1,0,0,0,859,860,3,84,42,0,860,87,1,0,0,0,861,863,3,90,45,0,862,864,
        5,135,0,0,863,862,1,0,0,0,863,864,1,0,0,0,864,866,1,0,0,0,865,861,
        1,0,0,0,866,869,1,0,0,0,867,865,1,0,0,0,867,868,1,0,0,0,868,876,
        1,0,0,0,869,867,1,0,0,0,870,872,3,4,2,0,871,873,5,135,0,0,872,871,
        1,0,0,0,872,873,1,0,0,0,873,875,1,0,0,0,874,870,1,0,0,0,875,878,
        1,0,0,0,876,874,1,0,0,0,876,877,1,0,0,0,877,879,1,0,0,0,878,876,
        1,0,0,0,879,881,3,114,57,0,880,882,5,135,0,0,881,880,1,0,0,0,881,
        882,1,0,0,0,882,89,1,0,0,0,883,887,3,2,1,0,884,887,3,92,46,0,885,
        887,3,106,53,0,886,883,1,0,0,0,886,884,1,0,0,0,886,885,1,0,0,0,887,
        91,1,0,0,0,888,890,5,60,0,0,889,891,5,135,0,0,890,889,1,0,0,0,890,
        891,1,0,0,0,891,892,1,0,0,0,892,893,3,162,81,0,893,894,5,135,0,0,
        894,895,5,61,0,0,895,896,5,135,0,0,896,897,3,230,115,0,897,93,1,
        0,0,0,898,900,5,62,0,0,899,901,5,135,0,0,900,899,1,0,0,0,900,901,
        1,0,0,0,901,902,1,0,0,0,902,907,3,34,17,0,903,904,5,135,0,0,904,
        906,3,96,48,0,905,903,1,0,0,0,906,909,1,0,0,0,907,905,1,0,0,0,907,
        908,1,0,0,0,908,95,1,0,0,0,909,907,1,0,0,0,910,911,5,63,0,0,911,
        912,5,135,0,0,912,913,5,59,0,0,913,914,5,135,0,0,914,921,3,100,50,
        0,915,916,5,63,0,0,916,917,5,135,0,0,917,918,5,64,0,0,918,919,5,
        135,0,0,919,921,3,100,50,0,920,910,1,0,0,0,920,915,1,0,0,0,921,97,
        1,0,0,0,922,924,5,64,0,0,923,925,5,135,0,0,924,923,1,0,0,0,924,925,
        1,0,0,0,925,926,1,0,0,0,926,927,3,134,67,0,927,99,1,0,0,0,928,930,
        5,65,0,0,929,931,5,135,0,0,930,929,1,0,0,0,930,931,1,0,0,0,931,932,
        1,0,0,0,932,943,3,6,3,0,933,935,5,135,0,0,934,933,1,0,0,0,934,935,
        1,0,0,0,935,936,1,0,0,0,936,938,5,4,0,0,937,939,5,135,0,0,938,937,
        1,0,0,0,938,939,1,0,0,0,939,940,1,0,0,0,940,942,3,6,3,0,941,934,
        1,0,0,0,942,945,1,0,0,0,943,941,1,0,0,0,943,944,1,0,0,0,944,101,
        1,0,0,0,945,943,1,0,0,0,946,947,5,68,0,0,947,948,5,135,0,0,948,959,
        3,104,52,0,949,951,5,135,0,0,950,949,1,0,0,0,950,951,1,0,0,0,951,
        952,1,0,0,0,952,954,5,4,0,0,953,955,5,135,0,0,954,953,1,0,0,0,954,
        955,1,0,0,0,955,956,1,0,0,0,956,958,3,104,52,0,957,950,1,0,0,0,958,
        961,1,0,0,0,959,957,1,0,0,0,959,960,1,0,0,0,960,103,1,0,0,0,961,
        959,1,0,0,0,962,963,3,230,115,0,963,964,3,150,75,0,964,967,1,0,0,
        0,965,967,3,160,80,0,966,962,1,0,0,0,966,965,1,0,0,0,967,105,1,0,
        0,0,968,969,5,69,0,0,969,970,5,135,0,0,970,977,3,220,110,0,971,973,
        5,135,0,0,972,971,1,0,0,0,972,973,1,0,0,0,973,974,1,0,0,0,974,975,
        5,70,0,0,975,976,5,135,0,0,976,978,3,110,55,0,977,972,1,0,0,0,977,
        978,1,0,0,0,978,107,1,0,0,0,979,980,5,69,0,0,980,983,5,135,0,0,981,
        984,3,220,110,0,982,984,3,222,111,0,983,981,1,0,0,0,983,982,1,0,
        0,0,984,994,1,0,0,0,985,987,5,135,0,0,986,985,1,0,0,0,986,987,1,
        0,0,0,987,988,1,0,0,0,988,989,5,70,0,0,989,992,5,135,0,0,990,993,
        5,14,0,0,991,993,3,110,55,0,992,990,1,0,0,0,992,991,1,0,0,0,993,
        995,1,0,0,0,994,986,1,0,0,0,994,995,1,0,0,0,995,109,1,0,0,0,996,
        1007,3,112,56,0,997,999,5,135,0,0,998,997,1,0,0,0,998,999,1,0,0,
        0,999,1000,1,0,0,0,1000,1002,5,4,0,0,1001,1003,5,135,0,0,1002,1001,
        1,0,0,0,1002,1003,1,0,0,0,1003,1004,1,0,0,0,1004,1006,3,112,56,0,
        1005,998,1,0,0,0,1006,1009,1,0,0,0,1007,1005,1,0,0,0,1007,1008,1,
        0,0,0,1008,1014,1,0,0,0,1009,1007,1,0,0,0,1010,1012,5,135,0,0,1011,
        1010,1,0,0,0,1011,1012,1,0,0,0,1012,1013,1,0,0,0,1013,1015,3,132,
        66,0,1014,1011,1,0,0,0,1014,1015,1,0,0,0,1015,111,1,0,0,0,1016,1017,
        3,224,112,0,1017,1018,5,135,0,0,1018,1019,5,61,0,0,1019,1020,5,135,
        0,0,1020,1022,1,0,0,0,1021,1016,1,0,0,0,1021,1022,1,0,0,0,1022,1023,
        1,0,0,0,1023,1024,3,230,115,0,1024,113,1,0,0,0,1025,1026,5,71,0,
        0,1026,1031,3,118,59,0,1027,1029,5,135,0,0,1028,1027,1,0,0,0,1028,
        1029,1,0,0,0,1029,1030,1,0,0,0,1030,1032,3,132,66,0,1031,1028,1,
        0,0,0,1031,1032,1,0,0,0,1032,115,1,0,0,0,1033,1034,5,72,0,0,1034,
        1035,3,118,59,0,1035,117,1,0,0,0,1036,1038,5,135,0,0,1037,1036,1,
        0,0,0,1037,1038,1,0,0,0,1038,1039,1,0,0,0,1039,1041,5,73,0,0,1040,
        1037,1,0,0,0,1040,1041,1,0,0,0,1041,1042,1,0,0,0,1042,1043,5,135,
        0,0,1043,1046,3,120,60,0,1044,1045,5,135,0,0,1045,1047,3,124,62,
        0,1046,1044,1,0,0,0,1046,1047,1,0,0,0,1047,1050,1,0,0,0,1048,1049,
        5,135,0,0,1049,1051,3,126,63,0,1050,1048,1,0,0,0,1050,1051,1,0,0,
        0,1051,1054,1,0,0,0,1052,1053,5,135,0,0,1053,1055,3,128,64,0,1054,
        1052,1,0,0,0,1054,1055,1,0,0,0,1055,119,1,0,0,0,1056,1067,5,14,0,
        0,1057,1059,5,135,0,0,1058,1057,1,0,0,0,1058,1059,1,0,0,0,1059,1060,
        1,0,0,0,1060,1062,5,4,0,0,1061,1063,5,135,0,0,1062,1061,1,0,0,0,
        1062,1063,1,0,0,0,1063,1064,1,0,0,0,1064,1066,3,122,61,0,1065,1058,
        1,0,0,0,1066,1069,1,0,0,0,1067,1065,1,0,0,0,1067,1068,1,0,0,0,1068,
        1085,1,0,0,0,1069,1067,1,0,0,0,1070,1081,3,122,61,0,1071,1073,5,
        135,0,0,1072,1071,1,0,0,0,1072,1073,1,0,0,0,1073,1074,1,0,0,0,1074,
        1076,5,4,0,0,1075,1077,5,135,0,0,1076,1075,1,0,0,0,1076,1077,1,0,
        0,0,1077,1078,1,0,0,0,1078,1080,3,122,61,0,1079,1072,1,0,0,0,1080,
        1083,1,0,0,0,1081,1079,1,0,0,0,1081,1082,1,0,0,0,1082,1085,1,0,0,
        0,1083,1081,1,0,0,0,1084,1056,1,0,0,0,1084,1070,1,0,0,0,1085,121,
        1,0,0,0,1086,1087,3,162,81,0,1087,1088,5,135,0,0,1088,1089,5,61,
        0,0,1089,1090,5,135,0,0,1090,1091,3,230,115,0,1091,1094,1,0,0,0,
        1092,1094,3,162,81,0,1093,1086,1,0,0,0,1093,1092,1,0,0,0,1094,123,
        1,0,0,0,1095,1096,5,74,0,0,1096,1097,5,135,0,0,1097,1098,5,75,0,
        0,1098,1099,5,135,0,0,1099,1107,3,130,65,0,1100,1102,5,4,0,0,1101,
        1103,5,135,0,0,1102,1101,1,0,0,0,1102,1103,1,0,0,0,1103,1104,1,0,
        0,0,1104,1106,3,130,65,0,1105,1100,1,0,0,0,1106,1109,1,0,0,0,1107,
        1105,1,0,0,0,1107,1108,1,0,0,0,1108,125,1,0,0,0,1109,1107,1,0,0,
        0,1110,1111,5,76,0,0,1111,1112,5,135,0,0,1112,1113,3,162,81,0,1113,
        127,1,0,0,0,1114,1115,5,77,0,0,1115,1116,5,135,0,0,1116,1117,3,162,
        81,0,1117,129,1,0,0,0,1118,1123,3,162,81,0,1119,1121,5,135,0,0,1120,
        1119,1,0,0,0,1120,1121,1,0,0,0,1121,1122,1,0,0,0,1122,1124,7,3,0,
        0,1123,1120,1,0,0,0,1123,1124,1,0,0,0,1124,131,1,0,0,0,1125,1126,
        5,82,0,0,1126,1127,5,135,0,0,1127,1128,3,162,81,0,1128,133,1,0,0,
        0,1129,1140,3,34,17,0,1130,1132,5,135,0,0,1131,1130,1,0,0,0,1131,
        1132,1,0,0,0,1132,1133,1,0,0,0,1133,1135,5,4,0,0,1134,1136,5,135,
        0,0,1135,1134,1,0,0,0,1135,1136,1,0,0,0,1136,1137,1,0,0,0,1137,1139,
        3,34,17,0,1138,1131,1,0,0,0,1139,1142,1,0,0,0,1140,1138,1,0,0,0,
        1140,1141,1,0,0,0,1141,135,1,0,0,0,1142,1140,1,0,0,0,1143,1144,3,
        138,69,0,1144,137,1,0,0,0,1145,1152,3,40,20,0,1146,1148,5,135,0,
        0,1147,1146,1,0,0,0,1147,1148,1,0,0,0,1148,1149,1,0,0,0,1149,1151,
        3,142,71,0,1150,1147,1,0,0,0,1151,1154,1,0,0,0,1152,1150,1,0,0,0,
        1152,1153,1,0,0,0,1153,1160,1,0,0,0,1154,1152,1,0,0,0,1155,1156,
        5,5,0,0,1156,1157,3,138,69,0,1157,1158,5,6,0,0,1158,1160,1,0,0,0,
        1159,1145,1,0,0,0,1159,1155,1,0,0,0,1160,139,1,0,0,0,1161,1166,3,
        40,20,0,1162,1164,5,135,0,0,1163,1162,1,0,0,0,1163,1164,1,0,0,0,
        1164,1165,1,0,0,0,1165,1167,3,142,71,0,1166,1163,1,0,0,0,1167,1168,
        1,0,0,0,1168,1166,1,0,0,0,1168,1169,1,0,0,0,1169,141,1,0,0,0,1170,
        1172,3,144,72,0,1171,1173,5,135,0,0,1172,1171,1,0,0,0,1172,1173,
        1,0,0,0,1173,1174,1,0,0,0,1174,1175,3,40,20,0,1175,143,1,0,0,0,1176,
        1178,3,252,126,0,1177,1179,5,135,0,0,1178,1177,1,0,0,0,1178,1179,
        1,0,0,0,1179,1180,1,0,0,0,1180,1182,3,256,128,0,1181,1183,5,135,
        0,0,1182,1181,1,0,0,0,1182,1183,1,0,0,0,1183,1185,1,0,0,0,1184,1186,
        3,50,25,0,1185,1184,1,0,0,0,1185,1186,1,0,0,0,1186,1188,1,0,0,0,
        1187,1189,5,135,0,0,1188,1187,1,0,0,0,1188,1189,1,0,0,0,1189,1190,
        1,0,0,0,1190,1192,3,256,128,0,1191,1193,5,135,0,0,1192,1191,1,0,
        0,0,1192,1193,1,0,0,0,1193,1194,1,0,0,0,1194,1195,3,254,127,0,1195,
        1241,1,0,0,0,1196,1198,3,252,126,0,1197,1199,5,135,0,0,1198,1197,
        1,0,0,0,1198,1199,1,0,0,0,1199,1200,1,0,0,0,1200,1202,3,256,128,
        0,1201,1203,5,135,0,0,1202,1201,1,0,0,0,1202,1203,1,0,0,0,1203,1205,
        1,0,0,0,1204,1206,3,50,25,0,1205,1204,1,0,0,0,1205,1206,1,0,0,0,
        1206,1208,1,0,0,0,1207,1209,5,135,0,0,1208,1207,1,0,0,0,1208,1209,
        1,0,0,0,1209,1210,1,0,0,0,1210,1211,3,256,128,0,1211,1241,1,0,0,
        0,1212,1214,3,256,128,0,1213,1215,5,135,0,0,1214,1213,1,0,0,0,1214,
        1215,1,0,0,0,1215,1217,1,0,0,0,1216,1218,3,50,25,0,1217,1216,1,0,
        0,0,1217,1218,1,0,0,0,1218,1220,1,0,0,0,1219,1221,5,135,0,0,1220,
        1219,1,0,0,0,1220,1221,1,0,0,0,1221,1222,1,0,0,0,1222,1224,3,256,
        128,0,1223,1225,5,135,0,0,1224,1223,1,0,0,0,1224,1225,1,0,0,0,1225,
        1226,1,0,0,0,1226,1227,3,254,127,0,1227,1241,1,0,0,0,1228,1230,3,
        256,128,0,1229,1231,5,135,0,0,1230,1229,1,0,0,0,1230,1231,1,0,0,
        0,1231,1233,1,0,0,0,1232,1234,3,50,25,0,1233,1232,1,0,0,0,1233,1234,
        1,0,0,0,1234,1236,1,0,0,0,1235,1237,5,135,0,0,1236,1235,1,0,0,0,
        1236,1237,1,0,0,0,1237,1238,1,0,0,0,1238,1239,3,256,128,0,1239,1241,
        1,0,0,0,1240,1176,1,0,0,0,1240,1196,1,0,0,0,1240,1212,1,0,0,0,1240,
        1228,1,0,0,0,1241,145,1,0,0,0,1242,1245,3,244,122,0,1243,1245,3,
        248,124,0,1244,1242,1,0,0,0,1244,1243,1,0,0,0,1245,147,1,0,0,0,1246,
        1248,5,8,0,0,1247,1249,5,135,0,0,1248,1247,1,0,0,0,1248,1249,1,0,
        0,0,1249,1250,1,0,0,0,1250,1264,3,158,79,0,1251,1253,5,135,0,0,1252,
        1251,1,0,0,0,1252,1253,1,0,0,0,1253,1254,1,0,0,0,1254,1256,5,15,
        0,0,1255,1257,5,8,0,0,1256,1255,1,0,0,0,1256,1257,1,0,0,0,1257,1259,
        1,0,0,0,1258,1260,5,135,0,0,1259,1258,1,0,0,0,1259,1260,1,0,0,0,
        1260,1261,1,0,0,0,1261,1263,3,158,79,0,1262,1252,1,0,0,0,1263,1266,
        1,0,0,0,1264,1262,1,0,0,0,1264,1265,1,0,0,0,1265,149,1,0,0,0,1266,
        1264,1,0,0,0,1267,1274,3,152,76,0,1268,1270,5,135,0,0,1269,1268,
        1,0,0,0,1269,1270,1,0,0,0,1270,1271,1,0,0,0,1271,1273,3,152,76,0,
        1272,1269,1,0,0,0,1273,1276,1,0,0,0,1274,1272,1,0,0,0,1274,1275,
        1,0,0,0,1275,151,1,0,0,0,1276,1274,1,0,0,0,1277,1279,5,8,0,0,1278,
        1280,5,135,0,0,1279,1278,1,0,0,0,1279,1280,1,0,0,0,1280,1281,1,0,
        0,0,1281,1282,3,156,78,0,1282,153,1,0,0,0,1283,1285,5,14,0,0,1284,
        1286,5,135,0,0,1285,1284,1,0,0,0,1285,1286,1,0,0,0,1286,1291,1,0,
        0,0,1287,1289,3,238,119,0,1288,1290,5,135,0,0,1289,1288,1,0,0,0,
        1289,1290,1,0,0,0,1290,1292,1,0,0,0,1291,1287,1,0,0,0,1291,1292,
        1,0,0,0,1292,1303,1,0,0,0,1293,1295,5,12,0,0,1294,1296,5,135,0,0,
        1295,1294,1,0,0,0,1295,1296,1,0,0,0,1296,1301,1,0,0,0,1297,1299,
        3,238,119,0,1298,1300,5,135,0,0,1299,1298,1,0,0,0,1299,1300,1,0,
        0,0,1300,1302,1,0,0,0,1301,1297,1,0,0,0,1301,1302,1,0,0,0,1302,1304,
        1,0,0,0,1303,1293,1,0,0,0,1303,1304,1,0,0,0,1304,155,1,0,0,0,1305,
        1306,3,250,125,0,1306,157,1,0,0,0,1307,1308,3,250,125,0,1308,159,
        1,0,0,0,1309,1314,3,194,97,0,1310,1312,5,135,0,0,1311,1310,1,0,0,
        0,1311,1312,1,0,0,0,1312,1313,1,0,0,0,1313,1315,3,192,96,0,1314,
        1311,1,0,0,0,1315,1316,1,0,0,0,1316,1314,1,0,0,0,1316,1317,1,0,0,
        0,1317,161,1,0,0,0,1318,1319,3,164,82,0,1319,163,1,0,0,0,1320,1327,
        3,166,83,0,1321,1322,5,135,0,0,1322,1323,5,83,0,0,1323,1324,5,135,
        0,0,1324,1326,3,166,83,0,1325,1321,1,0,0,0,1326,1329,1,0,0,0,1327,
        1325,1,0,0,0,1327,1328,1,0,0,0,1328,165,1,0,0,0,1329,1327,1,0,0,
        0,1330,1337,3,168,84,0,1331,1332,5,135,0,0,1332,1333,5,84,0,0,1333,
        1334,5,135,0,0,1334,1336,3,168,84,0,1335,1331,1,0,0,0,1336,1339,
        1,0,0,0,1337,1335,1,0,0,0,1337,1338,1,0,0,0,1338,167,1,0,0,0,1339,
        1337,1,0,0,0,1340,1347,3,170,85,0,1341,1342,5,135,0,0,1342,1343,
        5,85,0,0,1343,1344,5,135,0,0,1344,1346,3,170,85,0,1345,1341,1,0,
        0,0,1346,1349,1,0,0,0,1347,1345,1,0,0,0,1347,1348,1,0,0,0,1348,169,
        1,0,0,0,1349,1347,1,0,0,0,1350,1352,5,86,0,0,1351,1353,5,135,0,0,
        1352,1351,1,0,0,0,1352,1353,1,0,0,0,1353,1355,1,0,0,0,1354,1350,
        1,0,0,0,1355,1358,1,0,0,0,1356,1354,1,0,0,0,1356,1357,1,0,0,0,1357,
        1359,1,0,0,0,1358,1356,1,0,0,0,1359,1360,3,172,86,0,1360,171,1,0,
        0,0,1361,1368,3,52,26,0,1362,1364,5,135,0,0,1363,1362,1,0,0,0,1363,
        1364,1,0,0,0,1364,1365,1,0,0,0,1365,1367,3,174,87,0,1366,1363,1,
        0,0,0,1367,1370,1,0,0,0,1368,1366,1,0,0,0,1368,1369,1,0,0,0,1369,
        173,1,0,0,0,1370,1368,1,0,0,0,1371,1373,5,2,0,0,1372,1374,5,135,
        0,0,1373,1372,1,0,0,0,1373,1374,1,0,0,0,1374,1375,1,0,0,0,1375,1402,
        3,52,26,0,1376,1378,5,16,0,0,1377,1379,5,135,0,0,1378,1377,1,0,0,
        0,1378,1379,1,0,0,0,1379,1380,1,0,0,0,1380,1402,3,52,26,0,1381,1383,
        5,17,0,0,1382,1384,5,135,0,0,1383,1382,1,0,0,0,1383,1384,1,0,0,0,
        1384,1385,1,0,0,0,1385,1402,3,52,26,0,1386,1388,5,18,0,0,1387,1389,
        5,135,0,0,1388,1387,1,0,0,0,1388,1389,1,0,0,0,1389,1390,1,0,0,0,
        1390,1402,3,52,26,0,1391,1393,5,19,0,0,1392,1394,5,135,0,0,1393,
        1392,1,0,0,0,1393,1394,1,0,0,0,1394,1395,1,0,0,0,1395,1402,3,52,
        26,0,1396,1398,5,20,0,0,1397,1399,5,135,0,0,1398,1397,1,0,0,0,1398,
        1399,1,0,0,0,1399,1400,1,0,0,0,1400,1402,3,52,26,0,1401,1371,1,0,
        0,0,1401,1376,1,0,0,0,1401,1381,1,0,0,0,1401,1386,1,0,0,0,1401,1391,
        1,0,0,0,1401,1396,1,0,0,0,1402,175,1,0,0,0,1403,1404,5,135,0,0,1404,
        1405,5,87,0,0,1405,1406,5,135,0,0,1406,1414,5,71,0,0,1407,1408,5,
        135,0,0,1408,1409,5,88,0,0,1409,1410,5,135,0,0,1410,1414,5,71,0,
        0,1411,1412,5,135,0,0,1412,1414,5,89,0,0,1413,1403,1,0,0,0,1413,
        1407,1,0,0,0,1413,1411,1,0,0,0,1414,1416,1,0,0,0,1415,1417,5,135,
        0,0,1416,1415,1,0,0,0,1416,1417,1,0,0,0,1417,1418,1,0,0,0,1418,1419,
        3,182,91,0,1419,177,1,0,0,0,1420,1421,5,135,0,0,1421,1423,5,90,0,
        0,1422,1424,5,135,0,0,1423,1422,1,0,0,0,1423,1424,1,0,0,0,1424,1425,
        1,0,0,0,1425,1426,3,182,91,0,1426,179,1,0,0,0,1427,1428,5,135,0,
        0,1428,1429,5,91,0,0,1429,1430,5,135,0,0,1430,1438,5,92,0,0,1431,
        1432,5,135,0,0,1432,1433,5,91,0,0,1433,1434,5,135,0,0,1434,1435,
        5,86,0,0,1435,1436,5,135,0,0,1436,1438,5,92,0,0,1437,1427,1,0,0,
        0,1437,1431,1,0,0,0,1438,181,1,0,0,0,1439,1458,3,184,92,0,1440,1442,
        5,135,0,0,1441,1440,1,0,0,0,1441,1442,1,0,0,0,1442,1443,1,0,0,0,
        1443,1445,5,21,0,0,1444,1446,5,135,0,0,1445,1444,1,0,0,0,1445,1446,
        1,0,0,0,1446,1447,1,0,0,0,1447,1457,3,184,92,0,1448,1450,5,135,0,
        0,1449,1448,1,0,0,0,1449,1450,1,0,0,0,1450,1451,1,0,0,0,1451,1453,
        5,22,0,0,1452,1454,5,135,0,0,1453,1452,1,0,0,0,1453,1454,1,0,0,0,
        1454,1455,1,0,0,0,1455,1457,3,184,92,0,1456,1441,1,0,0,0,1456,1449,
        1,0,0,0,1457,1460,1,0,0,0,1458,1456,1,0,0,0,1458,1459,1,0,0,0,1459,
        183,1,0,0,0,1460,1458,1,0,0,0,1461,1488,3,186,93,0,1462,1464,5,135,
        0,0,1463,1462,1,0,0,0,1463,1464,1,0,0,0,1464,1465,1,0,0,0,1465,1467,
        5,14,0,0,1466,1468,5,135,0,0,1467,1466,1,0,0,0,1467,1468,1,0,0,0,
        1468,1469,1,0,0,0,1469,1487,3,186,93,0,1470,1472,5,135,0,0,1471,
        1470,1,0,0,0,1471,1472,1,0,0,0,1472,1473,1,0,0,0,1473,1475,5,23,
        0,0,1474,1476,5,135,0,0,1475,1474,1,0,0,0,1475,1476,1,0,0,0,1476,
        1477,1,0,0,0,1477,1487,3,186,93,0,1478,1480,5,135,0,0,1479,1478,
        1,0,0,0,1479,1480,1,0,0,0,1480,1481,1,0,0,0,1481,1483,5,24,0,0,1482,
        1484,5,135,0,0,1483,1482,1,0,0,0,1483,1484,1,0,0,0,1484,1485,1,0,
        0,0,1485,1487,3,186,93,0,1486,1463,1,0,0,0,1486,1471,1,0,0,0,1486,
        1479,1,0,0,0,1487,1490,1,0,0,0,1488,1486,1,0,0,0,1488,1489,1,0,0,
        0,1489,185,1,0,0,0,1490,1488,1,0,0,0,1491,1502,3,188,94,0,1492,1494,
        5,135,0,0,1493,1492,1,0,0,0,1493,1494,1,0,0,0,1494,1495,1,0,0,0,
        1495,1497,5,25,0,0,1496,1498,5,135,0,0,1497,1496,1,0,0,0,1497,1498,
        1,0,0,0,1498,1499,1,0,0,0,1499,1501,3,188,94,0,1500,1493,1,0,0,0,
        1501,1504,1,0,0,0,1502,1500,1,0,0,0,1502,1503,1,0,0,0,1503,187,1,
        0,0,0,1504,1502,1,0,0,0,1505,1512,3,54,27,0,1506,1508,7,4,0,0,1507,
        1509,5,135,0,0,1508,1507,1,0,0,0,1508,1509,1,0,0,0,1509,1510,1,0,
        0,0,1510,1512,3,54,27,0,1511,1505,1,0,0,0,1511,1506,1,0,0,0,1512,
        189,1,0,0,0,1513,1520,3,194,97,0,1514,1516,5,135,0,0,1515,1514,1,
        0,0,0,1515,1516,1,0,0,0,1516,1517,1,0,0,0,1517,1519,3,192,96,0,1518,
        1515,1,0,0,0,1519,1522,1,0,0,0,1520,1518,1,0,0,0,1520,1521,1,0,0,
        0,1521,1527,1,0,0,0,1522,1520,1,0,0,0,1523,1525,5,135,0,0,1524,1523,
        1,0,0,0,1524,1525,1,0,0,0,1525,1526,1,0,0,0,1526,1528,3,150,75,0,
        1527,1524,1,0,0,0,1527,1528,1,0,0,0,1528,191,1,0,0,0,1529,1531,5,
        1,0,0,1530,1532,5,135,0,0,1531,1530,1,0,0,0,1531,1532,1,0,0,0,1532,
        1533,1,0,0,0,1533,1534,3,246,123,0,1534,193,1,0,0,0,1535,1560,3,
        232,116,0,1536,1560,3,248,124,0,1537,1560,3,196,98,0,1538,1540,5,
        93,0,0,1539,1541,5,135,0,0,1540,1539,1,0,0,0,1540,1541,1,0,0,0,1541,
        1542,1,0,0,0,1542,1544,5,5,0,0,1543,1545,5,135,0,0,1544,1543,1,0,
        0,0,1544,1545,1,0,0,0,1545,1546,1,0,0,0,1546,1548,5,14,0,0,1547,
        1549,5,135,0,0,1548,1547,1,0,0,0,1548,1549,1,0,0,0,1549,1550,1,0,
        0,0,1550,1560,5,6,0,0,1551,1560,3,200,100,0,1552,1560,3,202,101,
        0,1553,1560,3,204,102,0,1554,1560,3,208,104,0,1555,1560,3,210,105,
        0,1556,1560,3,214,107,0,1557,1560,3,218,109,0,1558,1560,3,230,115,
        0,1559,1535,1,0,0,0,1559,1536,1,0,0,0,1559,1537,1,0,0,0,1559,1538,
        1,0,0,0,1559,1551,1,0,0,0,1559,1552,1,0,0,0,1559,1553,1,0,0,0,1559,
        1554,1,0,0,0,1559,1555,1,0,0,0,1559,1556,1,0,0,0,1559,1557,1,0,0,
        0,1559,1558,1,0,0,0,1560,195,1,0,0,0,1561,1566,5,94,0,0,1562,1564,
        5,135,0,0,1563,1562,1,0,0,0,1563,1564,1,0,0,0,1564,1565,1,0,0,0,
        1565,1567,3,198,99,0,1566,1563,1,0,0,0,1567,1568,1,0,0,0,1568,1566,
        1,0,0,0,1568,1569,1,0,0,0,1569,1584,1,0,0,0,1570,1572,5,94,0,0,1571,
        1573,5,135,0,0,1572,1571,1,0,0,0,1572,1573,1,0,0,0,1573,1574,1,0,
        0,0,1574,1579,3,162,81,0,1575,1577,5,135,0,0,1576,1575,1,0,0,0,1576,
        1577,1,0,0,0,1577,1578,1,0,0,0,1578,1580,3,198,99,0,1579,1576,1,
        0,0,0,1580,1581,1,0,0,0,1581,1579,1,0,0,0,1581,1582,1,0,0,0,1582,
        1584,1,0,0,0,1583,1561,1,0,0,0,1583,1570,1,0,0,0,1584,1593,1,0,0,
        0,1585,1587,5,135,0,0,1586,1585,1,0,0,0,1586,1587,1,0,0,0,1587,1588,
        1,0,0,0,1588,1590,5,95,0,0,1589,1591,5,135,0,0,1590,1589,1,0,0,0,
        1590,1591,1,0,0,0,1591,1592,1,0,0,0,1592,1594,3,162,81,0,1593,1586,
        1,0,0,0,1593,1594,1,0,0,0,1594,1596,1,0,0,0,1595,1597,5,135,0,0,
        1596,1595,1,0,0,0,1596,1597,1,0,0,0,1597,1598,1,0,0,0,1598,1599,
        5,96,0,0,1599,197,1,0,0,0,1600,1602,5,97,0,0,1601,1603,5,135,0,0,
        1602,1601,1,0,0,0,1602,1603,1,0,0,0,1603,1604,1,0,0,0,1604,1606,
        3,162,81,0,1605,1607,5,135,0,0,1606,1605,1,0,0,0,1606,1607,1,0,0,
        0,1607,1608,1,0,0,0,1608,1610,5,98,0,0,1609,1611,5,135,0,0,1610,
        1609,1,0,0,0,1610,1611,1,0,0,0,1611,1612,1,0,0,0,1612,1613,3,162,
        81,0,1613,199,1,0,0,0,1614,1616,5,10,0,0,1615,1617,5,135,0,0,1616,
        1615,1,0,0,0,1616,1617,1,0,0,0,1617,1618,1,0,0,0,1618,1627,3,206,
        103,0,1619,1621,5,135,0,0,1620,1619,1,0,0,0,1620,1621,1,0,0,0,1621,
        1622,1,0,0,0,1622,1624,5,15,0,0,1623,1625,5,135,0,0,1624,1623,1,
        0,0,0,1624,1625,1,0,0,0,1625,1626,1,0,0,0,1626,1628,3,162,81,0,1627,
        1620,1,0,0,0,1627,1628,1,0,0,0,1628,1630,1,0,0,0,1629,1631,5,135,
        0,0,1630,1629,1,0,0,0,1630,1631,1,0,0,0,1631,1632,1,0,0,0,1632,1633,
        5,11,0,0,1633,201,1,0,0,0,1634,1636,5,10,0,0,1635,1637,5,135,0,0,
        1636,1635,1,0,0,0,1636,1637,1,0,0,0,1637,1646,1,0,0,0,1638,1640,
        3,230,115,0,1639,1641,5,135,0,0,1640,1639,1,0,0,0,1640,1641,1,0,
        0,0,1641,1642,1,0,0,0,1642,1644,5,2,0,0,1643,1645,5,135,0,0,1644,
        1643,1,0,0,0,1644,1645,1,0,0,0,1645,1647,1,0,0,0,1646,1638,1,0,0,
        0,1646,1647,1,0,0,0,1647,1648,1,0,0,0,1648,1650,3,140,70,0,1649,
        1651,5,135,0,0,1650,1649,1,0,0,0,1650,1651,1,0,0,0,1651,1656,1,0,
        0,0,1652,1654,3,132,66,0,1653,1655,5,135,0,0,1654,1653,1,0,0,0,1654,
        1655,1,0,0,0,1655,1657,1,0,0,0,1656,1652,1,0,0,0,1656,1657,1,0,0,
        0,1657,1658,1,0,0,0,1658,1660,5,15,0,0,1659,1661,5,135,0,0,1660,
        1659,1,0,0,0,1660,1661,1,0,0,0,1661,1662,1,0,0,0,1662,1664,3,162,
        81,0,1663,1665,5,135,0,0,1664,1663,1,0,0,0,1664,1665,1,0,0,0,1665,
        1666,1,0,0,0,1666,1667,5,11,0,0,1667,203,1,0,0,0,1668,1670,5,57,
        0,0,1669,1671,5,135,0,0,1670,1669,1,0,0,0,1670,1671,1,0,0,0,1671,
        1672,1,0,0,0,1672,1674,5,5,0,0,1673,1675,5,135,0,0,1674,1673,1,0,
        0,0,1674,1675,1,0,0,0,1675,1676,1,0,0,0,1676,1678,3,206,103,0,1677,
        1679,5,135,0,0,1678,1677,1,0,0,0,1678,1679,1,0,0,0,1679,1680,1,0,
        0,0,1680,1681,5,6,0,0,1681,1725,1,0,0,0,1682,1684,5,99,0,0,1683,
        1685,5,135,0,0,1684,1683,1,0,0,0,1684,1685,1,0,0,0,1685,1686,1,0,
        0,0,1686,1688,5,5,0,0,1687,1689,5,135,0,0,1688,1687,1,0,0,0,1688,
        1689,1,0,0,0,1689,1690,1,0,0,0,1690,1692,3,206,103,0,1691,1693,5,
        135,0,0,1692,1691,1,0,0,0,1692,1693,1,0,0,0,1693,1694,1,0,0,0,1694,
        1695,5,6,0,0,1695,1725,1,0,0,0,1696,1698,5,100,0,0,1697,1699,5,135,
        0,0,1698,1697,1,0,0,0,1698,1699,1,0,0,0,1699,1700,1,0,0,0,1700,1702,
        5,5,0,0,1701,1703,5,135,0,0,1702,1701,1,0,0,0,1702,1703,1,0,0,0,
        1703,1704,1,0,0,0,1704,1706,3,206,103,0,1705,1707,5,135,0,0,1706,
        1705,1,0,0,0,1706,1707,1,0,0,0,1707,1708,1,0,0,0,1708,1709,5,6,0,
        0,1709,1725,1,0,0,0,1710,1712,5,101,0,0,1711,1713,5,135,0,0,1712,
        1711,1,0,0,0,1712,1713,1,0,0,0,1713,1714,1,0,0,0,1714,1716,5,5,0,
        0,1715,1717,5,135,0,0,1716,1715,1,0,0,0,1716,1717,1,0,0,0,1717,1718,
        1,0,0,0,1718,1720,3,206,103,0,1719,1721,5,135,0,0,1720,1719,1,0,
        0,0,1720,1721,1,0,0,0,1721,1722,1,0,0,0,1722,1723,5,6,0,0,1723,1725,
        1,0,0,0,1724,1668,1,0,0,0,1724,1682,1,0,0,0,1724,1696,1,0,0,0,1724,
        1710,1,0,0,0,1725,205,1,0,0,0,1726,1731,3,212,106,0,1727,1729,5,
        135,0,0,1728,1727,1,0,0,0,1728,1729,1,0,0,0,1729,1730,1,0,0,0,1730,
        1732,3,132,66,0,1731,1728,1,0,0,0,1731,1732,1,0,0,0,1732,207,1,0,
        0,0,1733,1734,3,140,70,0,1734,209,1,0,0,0,1735,1737,5,5,0,0,1736,
        1738,5,135,0,0,1737,1736,1,0,0,0,1737,1738,1,0,0,0,1738,1739,1,0,
        0,0,1739,1741,3,162,81,0,1740,1742,5,135,0,0,1741,1740,1,0,0,0,1741,
        1742,1,0,0,0,1742,1743,1,0,0,0,1743,1744,5,6,0,0,1744,211,1,0,0,
        0,1745,1746,3,230,115,0,1746,1747,5,135,0,0,1747,1748,5,90,0,0,1748,
        1749,5,135,0,0,1749,1750,3,162,81,0,1750,213,1,0,0,0,1751,1753,3,
        216,108,0,1752,1754,5,135,0,0,1753,1752,1,0,0,0,1753,1754,1,0,0,
        0,1754,1755,1,0,0,0,1755,1757,5,5,0,0,1756,1758,5,135,0,0,1757,1756,
        1,0,0,0,1757,1758,1,0,0,0,1758,1763,1,0,0,0,1759,1761,5,73,0,0,1760,
        1762,5,135,0,0,1761,1760,1,0,0,0,1761,1762,1,0,0,0,1762,1764,1,0,
        0,0,1763,1759,1,0,0,0,1763,1764,1,0,0,0,1764,1782,1,0,0,0,1765,1767,
        3,162,81,0,1766,1768,5,135,0,0,1767,1766,1,0,0,0,1767,1768,1,0,0,
        0,1768,1779,1,0,0,0,1769,1771,5,4,0,0,1770,1772,5,135,0,0,1771,1770,
        1,0,0,0,1771,1772,1,0,0,0,1772,1773,1,0,0,0,1773,1775,3,162,81,0,
        1774,1776,5,135,0,0,1775,1774,1,0,0,0,1775,1776,1,0,0,0,1776,1778,
        1,0,0,0,1777,1769,1,0,0,0,1778,1781,1,0,0,0,1779,1777,1,0,0,0,1779,
        1780,1,0,0,0,1780,1783,1,0,0,0,1781,1779,1,0,0,0,1782,1765,1,0,0,
        0,1782,1783,1,0,0,0,1783,1784,1,0,0,0,1784,1785,5,6,0,0,1785,215,
        1,0,0,0,1786,1787,3,228,114,0,1787,1788,3,70,35,0,1788,217,1,0,0,
        0,1789,1791,5,102,0,0,1790,1792,5,135,0,0,1791,1790,1,0,0,0,1791,
        1792,1,0,0,0,1792,1793,1,0,0,0,1793,1795,5,7,0,0,1794,1796,5,135,
        0,0,1795,1794,1,0,0,0,1795,1796,1,0,0,0,1796,1805,1,0,0,0,1797,1806,
        3,78,39,0,1798,1803,3,134,67,0,1799,1801,5,135,0,0,1800,1799,1,0,
        0,0,1800,1801,1,0,0,0,1801,1802,1,0,0,0,1802,1804,3,132,66,0,1803,
        1800,1,0,0,0,1803,1804,1,0,0,0,1804,1806,1,0,0,0,1805,1797,1,0,0,
        0,1805,1798,1,0,0,0,1806,1808,1,0,0,0,1807,1809,5,135,0,0,1808,1807,
        1,0,0,0,1808,1809,1,0,0,0,1809,1810,1,0,0,0,1810,1811,5,9,0,0,1811,
        219,1,0,0,0,1812,1814,3,226,113,0,1813,1815,5,135,0,0,1814,1813,
        1,0,0,0,1814,1815,1,0,0,0,1815,1816,1,0,0,0,1816,1818,5,5,0,0,1817,
        1819,5,135,0,0,1818,1817,1,0,0,0,1818,1819,1,0,0,0,1819,1837,1,0,
        0,0,1820,1822,3,162,81,0,1821,1823,5,135,0,0,1822,1821,1,0,0,0,1822,
        1823,1,0,0,0,1823,1834,1,0,0,0,1824,1826,5,4,0,0,1825,1827,5,135,
        0,0,1826,1825,1,0,0,0,1826,1827,1,0,0,0,1827,1828,1,0,0,0,1828,1830,
        3,162,81,0,1829,1831,5,135,0,0,1830,1829,1,0,0,0,1830,1831,1,0,0,
        0,1831,1833,1,0,0,0,1832,1824,1,0,0,0,1833,1836,1,0,0,0,1834,1832,
        1,0,0,0,1834,1835,1,0,0,0,1835,1838,1,0,0,0,1836,1834,1,0,0,0,1837,
        1820,1,0,0,0,1837,1838,1,0,0,0,1838,1839,1,0,0,0,1839,1840,5,6,0,
        0,1840,221,1,0,0,0,1841,1842,3,226,113,0,1842,223,1,0,0,0,1843,1844,
        3,70,35,0,1844,225,1,0,0,0,1845,1846,3,228,114,0,1846,1847,3,70,
        35,0,1847,227,1,0,0,0,1848,1849,3,70,35,0,1849,1850,5,1,0,0,1850,
        1852,1,0,0,0,1851,1848,1,0,0,0,1852,1855,1,0,0,0,1853,1851,1,0,0,
        0,1853,1854,1,0,0,0,1854,229,1,0,0,0,1855,1853,1,0,0,0,1856,1857,
        3,70,35,0,1857,231,1,0,0,0,1858,1865,3,234,117,0,1859,1865,5,92,
        0,0,1860,1865,3,236,118,0,1861,1865,5,117,0,0,1862,1865,3,242,121,
        0,1863,1865,3,244,122,0,1864,1858,1,0,0,0,1864,1859,1,0,0,0,1864,
        1860,1,0,0,0,1864,1861,1,0,0,0,1864,1862,1,0,0,0,1864,1863,1,0,0,
        0,1865,233,1,0,0,0,1866,1867,7,5,0,0,1867,235,1,0,0,0,1868,1871,
        3,240,120,0,1869,1871,3,238,119,0,1870,1868,1,0,0,0,1870,1869,1,
        0,0,0,1871,237,1,0,0,0,1872,1873,7,6,0,0,1873,239,1,0,0,0,1874,1875,
        7,7,0,0,1875,241,1,0,0,0,1876,1878,5,10,0,0,1877,1879,5,135,0,0,
        1878,1877,1,0,0,0,1878,1879,1,0,0,0,1879,1897,1,0,0,0,1880,1882,
        3,162,81,0,1881,1883,5,135,0,0,1882,1881,1,0,0,0,1882,1883,1,0,0,
        0,1883,1894,1,0,0,0,1884,1886,5,4,0,0,1885,1887,5,135,0,0,1886,1885,
        1,0,0,0,1886,1887,1,0,0,0,1887,1888,1,0,0,0,1888,1890,3,162,81,0,
        1889,1891,5,135,0,0,1890,1889,1,0,0,0,1890,1891,1,0,0,0,1891,1893,
        1,0,0,0,1892,1884,1,0,0,0,1893,1896,1,0,0,0,1894,1892,1,0,0,0,1894,
        1895,1,0,0,0,1895,1898,1,0,0,0,1896,1894,1,0,0,0,1897,1880,1,0,0,
        0,1897,1898,1,0,0,0,1898,1899,1,0,0,0,1899,1900,5,11,0,0,1900,243,
        1,0,0,0,1901,1903,5,7,0,0,1902,1904,5,135,0,0,1903,1902,1,0,0,0,
        1903,1904,1,0,0,0,1904,1938,1,0,0,0,1905,1907,3,246,123,0,1906,1908,
        5,135,0,0,1907,1906,1,0,0,0,1907,1908,1,0,0,0,1908,1909,1,0,0,0,
        1909,1911,5,8,0,0,1910,1912,5,135,0,0,1911,1910,1,0,0,0,1911,1912,
        1,0,0,0,1912,1913,1,0,0,0,1913,1915,3,162,81,0,1914,1916,5,135,0,
        0,1915,1914,1,0,0,0,1915,1916,1,0,0,0,1916,1935,1,0,0,0,1917,1919,
        5,4,0,0,1918,1920,5,135,0,0,1919,1918,1,0,0,0,1919,1920,1,0,0,0,
        1920,1921,1,0,0,0,1921,1923,3,246,123,0,1922,1924,5,135,0,0,1923,
        1922,1,0,0,0,1923,1924,1,0,0,0,1924,1925,1,0,0,0,1925,1927,5,8,0,
        0,1926,1928,5,135,0,0,1927,1926,1,0,0,0,1927,1928,1,0,0,0,1928,1929,
        1,0,0,0,1929,1931,3,162,81,0,1930,1932,5,135,0,0,1931,1930,1,0,0,
        0,1931,1932,1,0,0,0,1932,1934,1,0,0,0,1933,1917,1,0,0,0,1934,1937,
        1,0,0,0,1935,1933,1,0,0,0,1935,1936,1,0,0,0,1936,1939,1,0,0,0,1937,
        1935,1,0,0,0,1938,1905,1,0,0,0,1938,1939,1,0,0,0,1939,1940,1,0,0,
        0,1940,1941,5,9,0,0,1941,245,1,0,0,0,1942,1943,3,250,125,0,1943,
        247,1,0,0,0,1944,1947,5,26,0,0,1945,1948,3,70,35,0,1946,1948,5,106,
        0,0,1947,1945,1,0,0,0,1947,1946,1,0,0,0,1948,249,1,0,0,0,1949,1952,
        3,70,35,0,1950,1952,3,72,36,0,1951,1949,1,0,0,0,1951,1950,1,0,0,
        0,1952,251,1,0,0,0,1953,1954,7,8,0,0,1954,253,1,0,0,0,1955,1956,
        7,9,0,0,1956,255,1,0,0,0,1957,1958,7,10,0,0,1958,257,1,0,0,0,364,
        261,265,269,273,277,279,282,285,293,296,299,303,309,312,319,322,
        327,333,336,341,345,351,355,361,365,371,375,381,385,389,395,398,
        402,408,411,415,419,423,428,435,440,444,448,452,456,461,468,473,
        477,483,489,493,499,505,509,515,519,524,528,532,536,542,546,552,
        556,558,562,564,568,570,574,576,582,586,593,601,604,610,614,616,
        619,623,627,629,633,637,639,643,645,648,652,654,658,660,669,673,
        677,679,683,690,694,698,704,709,712,715,717,720,726,731,741,745,
        749,753,757,760,766,773,777,780,783,791,796,803,808,811,815,819,
        823,829,833,838,843,847,850,852,857,863,867,872,876,881,886,890,
        900,907,920,924,930,934,938,943,950,954,959,966,972,977,983,986,
        992,994,998,1002,1007,1011,1014,1021,1028,1031,1037,1040,1046,1050,
        1054,1058,1062,1067,1072,1076,1081,1084,1093,1102,1107,1120,1123,
        1131,1135,1140,1147,1152,1159,1163,1168,1172,1178,1182,1185,1188,
        1192,1198,1202,1205,1208,1214,1217,1220,1224,1230,1233,1236,1240,
        1244,1248,1252,1256,1259,1264,1269,1274,1279,1285,1289,1291,1295,
        1299,1301,1303,1311,1316,1327,1337,1347,1352,1356,1363,1368,1373,
        1378,1383,1388,1393,1398,1401,1413,1416,1423,1437,1441,1445,1449,
        1453,1456,1458,1463,1467,1471,1475,1479,1483,1486,1488,1493,1497,
        1502,1508,1511,1515,1520,1524,1527,1531,1540,1544,1548,1559,1563,
        1568,1572,1576,1581,1583,1586,1590,1593,1596,1602,1606,1610,1616,
        1620,1624,1627,1630,1636,1640,1644,1646,1650,1654,1656,1660,1664,
        1670,1674,1678,1684,1688,1692,1698,1702,1706,1712,1716,1720,1724,
        1728,1731,1737,1741,1753,1757,1761,1763,1767,1771,1775,1779,1782,
        1791,1795,1800,1803,1805,1808,1814,1818,1822,1826,1830,1834,1837,
        1853,1864,1870,1878,1882,1886,1890,1894,1897,1903,1907,1911,1915,
        1919,1923,1927,1931,1935,1938,1947,1951
    ]

class s_cypherParser ( Parser ):

    grammarFileName = "s_cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "'='", "'+='", "','", "'('", "')'", 
                     "'{'", "':'", "'}'", "'['", "']'", "'..'", "';'", "'*'", 
                     "'|'", "'<>'", "'<'", "'>'", "'<='", "'>='", "'+'", 
                     "'-'", "'/'", "'%'", "'^'", "'$'", "'\\u27E8'", "'\\u3008'", 
                     "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
                     "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", 
                     "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", 
                     "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
                     "'\\uFF0D'", "<INVALID>", "<INVALID>", "'NOW'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "AtT", "PoundValue", "NOW", 
                      "AT_TIME", "SNAPSHOT", "BETWEEN", "SCOPE", "STALE", 
                      "DURING", "OVERLAPS", "UNION", "ALL", "OPTIONAL", 
                      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", 
                      "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", 
                      "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", 
                      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
                      "WHERE", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", 
                      "CONTAINS", "IN", "IS", "NULL", "COUNT", "CASE", "ELSE", 
                      "END", "WHEN", "THEN", "ANY", "NONE", "SINGLE", "EXISTS", 
                      "TRUE", "FALSE", "HexInteger", "DecimalInteger", "OctalInteger", 
                      "HexLetter", "HexDigit", "Digit", "NonZeroDigit", 
                      "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", 
                      "RegularDecimalReal", "StringLiteral", "EscapedChar", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Query = 0
    RULE_oC_Match = 1
    RULE_oC_UpdatingClause = 2
    RULE_oC_SetItem = 3
    RULE_s_SetPropertyItemOne = 4
    RULE_s_SetPropertyItemTwo = 5
    RULE_s_SetValueItem = 6
    RULE_s_SetValueItemExpression = 7
    RULE_s_Stale = 8
    RULE_s_StaleItem = 9
    RULE_oC_Delete = 10
    RULE_s_DeleteItem = 11
    RULE_s_AtTime = 12
    RULE_s_Between = 13
    RULE_s_TimeWindowLimit = 14
    RULE_s_Snapshot = 15
    RULE_s_Scope = 16
    RULE_oC_PatternPart = 17
    RULE_s_PathFunctionPattern = 18
    RULE_s_SinglePathPattern = 19
    RULE_oC_NodePattern = 20
    RULE_s_Properties = 21
    RULE_s_PropertiesPattern = 22
    RULE_s_PropertyNode = 23
    RULE_s_ValueNode = 24
    RULE_oC_RelationshipDetail = 25
    RULE_oC_StringListNullPredicateExpression = 26
    RULE_oC_ListOperatorExpression = 27
    RULE_oC_SingleIndexExpression = 28
    RULE_oC_DoubleIndexExpression = 29
    RULE_s_AtTExpression = 30
    RULE_oC_PropertyLookupTime = 31
    RULE_s_TimePredicateExpression = 32
    RULE_s_AtTElement = 33
    RULE_s_TimePointLiteral = 34
    RULE_oC_SymbolicName = 35
    RULE_oC_ReservedWord = 36
    RULE_oC_Cypher = 37
    RULE_oC_Statement = 38
    RULE_oC_RegularQuery = 39
    RULE_oC_Union = 40
    RULE_oC_SingleQuery = 41
    RULE_oC_SinglePartQuery = 42
    RULE_oC_MultiPartQuery = 43
    RULE_s_WithPartQuery = 44
    RULE_oC_ReadingClause = 45
    RULE_oC_Unwind = 46
    RULE_oC_Merge = 47
    RULE_oC_MergeAction = 48
    RULE_oC_Create = 49
    RULE_oC_Set = 50
    RULE_oC_Remove = 51
    RULE_oC_RemoveItem = 52
    RULE_oC_InQueryCall = 53
    RULE_oC_StandaloneCall = 54
    RULE_oC_YieldItems = 55
    RULE_oC_YieldItem = 56
    RULE_oC_With = 57
    RULE_oC_Return = 58
    RULE_oC_ProjectionBody = 59
    RULE_oC_ProjectionItems = 60
    RULE_oC_ProjectionItem = 61
    RULE_oC_Order = 62
    RULE_oC_Skip = 63
    RULE_oC_Limit = 64
    RULE_oC_SortItem = 65
    RULE_oC_Where = 66
    RULE_oC_Pattern = 67
    RULE_oC_AnonymousPatternPart = 68
    RULE_oC_PatternElement = 69
    RULE_oC_RelationshipsPattern = 70
    RULE_oC_PatternElementChain = 71
    RULE_oC_RelationshipPattern = 72
    RULE_oC_Properties = 73
    RULE_oC_RelationshipTypes = 74
    RULE_oC_NodeLabels = 75
    RULE_oC_NodeLabel = 76
    RULE_oC_RangeLiteral = 77
    RULE_oC_LabelName = 78
    RULE_oC_RelTypeName = 79
    RULE_oC_PropertyExpression = 80
    RULE_oC_Expression = 81
    RULE_oC_OrExpression = 82
    RULE_oC_XorExpression = 83
    RULE_oC_AndExpression = 84
    RULE_oC_NotExpression = 85
    RULE_oC_ComparisonExpression = 86
    RULE_oC_PartialComparisonExpression = 87
    RULE_oC_StringPredicateExpression = 88
    RULE_oC_ListPredicateExpression = 89
    RULE_oC_NullPredicateExpression = 90
    RULE_oC_AddOrSubtractExpression = 91
    RULE_oC_MultiplyDivideModuloExpression = 92
    RULE_oC_PowerOfExpression = 93
    RULE_oC_UnaryAddOrSubtractExpression = 94
    RULE_oC_PropertyOrLabelsExpression = 95
    RULE_oC_PropertyLookup = 96
    RULE_oC_Atom = 97
    RULE_oC_CaseExpression = 98
    RULE_oC_CaseAlternative = 99
    RULE_oC_ListComprehension = 100
    RULE_oC_PatternComprehension = 101
    RULE_oC_Quantifier = 102
    RULE_oC_FilterExpression = 103
    RULE_oC_PatternPredicate = 104
    RULE_oC_ParenthesizedExpression = 105
    RULE_oC_IdInColl = 106
    RULE_oC_FunctionInvocation = 107
    RULE_oC_FunctionName = 108
    RULE_oC_ExistentialSubquery = 109
    RULE_oC_ExplicitProcedureInvocation = 110
    RULE_oC_ImplicitProcedureInvocation = 111
    RULE_oC_ProcedureResultField = 112
    RULE_oC_ProcedureName = 113
    RULE_oC_Namespace = 114
    RULE_oC_Variable = 115
    RULE_oC_Literal = 116
    RULE_oC_BooleanLiteral = 117
    RULE_oC_NumberLiteral = 118
    RULE_oC_IntegerLiteral = 119
    RULE_oC_DoubleLiteral = 120
    RULE_oC_ListLiteral = 121
    RULE_oC_MapLiteral = 122
    RULE_oC_PropertyKeyName = 123
    RULE_oC_Parameter = 124
    RULE_oC_SchemaName = 125
    RULE_oC_LeftArrowHead = 126
    RULE_oC_RightArrowHead = 127
    RULE_oC_Dash = 128

    ruleNames =  [ "oC_Query", "oC_Match", "oC_UpdatingClause", "oC_SetItem", 
                   "s_SetPropertyItemOne", "s_SetPropertyItemTwo", "s_SetValueItem", 
                   "s_SetValueItemExpression", "s_Stale", "s_StaleItem", 
                   "oC_Delete", "s_DeleteItem", "s_AtTime", "s_Between", 
                   "s_TimeWindowLimit", "s_Snapshot", "s_Scope", "oC_PatternPart", 
                   "s_PathFunctionPattern", "s_SinglePathPattern", "oC_NodePattern", 
                   "s_Properties", "s_PropertiesPattern", "s_PropertyNode", 
                   "s_ValueNode", "oC_RelationshipDetail", "oC_StringListNullPredicateExpression", 
                   "oC_ListOperatorExpression", "oC_SingleIndexExpression", 
                   "oC_DoubleIndexExpression", "s_AtTExpression", "oC_PropertyLookupTime", 
                   "s_TimePredicateExpression", "s_AtTElement", "s_TimePointLiteral", 
                   "oC_SymbolicName", "oC_ReservedWord", "oC_Cypher", "oC_Statement", 
                   "oC_RegularQuery", "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", 
                   "oC_MultiPartQuery", "s_WithPartQuery", "oC_ReadingClause", 
                   "oC_Unwind", "oC_Merge", "oC_MergeAction", "oC_Create", 
                   "oC_Set", "oC_Remove", "oC_RemoveItem", "oC_InQueryCall", 
                   "oC_StandaloneCall", "oC_YieldItems", "oC_YieldItem", 
                   "oC_With", "oC_Return", "oC_ProjectionBody", "oC_ProjectionItems", 
                   "oC_ProjectionItem", "oC_Order", "oC_Skip", "oC_Limit", 
                   "oC_SortItem", "oC_Where", "oC_Pattern", "oC_AnonymousPatternPart", 
                   "oC_PatternElement", "oC_RelationshipsPattern", "oC_PatternElementChain", 
                   "oC_RelationshipPattern", "oC_Properties", "oC_RelationshipTypes", 
                   "oC_NodeLabels", "oC_NodeLabel", "oC_RangeLiteral", "oC_LabelName", 
                   "oC_RelTypeName", "oC_PropertyExpression", "oC_Expression", 
                   "oC_OrExpression", "oC_XorExpression", "oC_AndExpression", 
                   "oC_NotExpression", "oC_ComparisonExpression", "oC_PartialComparisonExpression", 
                   "oC_StringPredicateExpression", "oC_ListPredicateExpression", 
                   "oC_NullPredicateExpression", "oC_AddOrSubtractExpression", 
                   "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", 
                   "oC_UnaryAddOrSubtractExpression", "oC_PropertyOrLabelsExpression", 
                   "oC_PropertyLookup", "oC_Atom", "oC_CaseExpression", 
                   "oC_CaseAlternative", "oC_ListComprehension", "oC_PatternComprehension", 
                   "oC_Quantifier", "oC_FilterExpression", "oC_PatternPredicate", 
                   "oC_ParenthesizedExpression", "oC_IdInColl", "oC_FunctionInvocation", 
                   "oC_FunctionName", "oC_ExistentialSubquery", "oC_ExplicitProcedureInvocation", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_Variable", "oC_Literal", 
                   "oC_BooleanLiteral", "oC_NumberLiteral", "oC_IntegerLiteral", 
                   "oC_DoubleLiteral", "oC_ListLiteral", "oC_MapLiteral", 
                   "oC_PropertyKeyName", "oC_Parameter", "oC_SchemaName", 
                   "oC_LeftArrowHead", "oC_RightArrowHead", "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    AtT=46
    PoundValue=47
    NOW=48
    AT_TIME=49
    SNAPSHOT=50
    BETWEEN=51
    SCOPE=52
    STALE=53
    DURING=54
    OVERLAPS=55
    UNION=56
    ALL=57
    OPTIONAL=58
    MATCH=59
    UNWIND=60
    AS=61
    MERGE=62
    ON=63
    CREATE=64
    SET=65
    DETACH=66
    DELETE=67
    REMOVE=68
    CALL=69
    YIELD=70
    WITH=71
    RETURN=72
    DISTINCT=73
    ORDER=74
    BY=75
    L_SKIP=76
    LIMIT=77
    ASCENDING=78
    ASC=79
    DESCENDING=80
    DESC=81
    WHERE=82
    OR=83
    XOR=84
    AND=85
    NOT=86
    STARTS=87
    ENDS=88
    CONTAINS=89
    IN=90
    IS=91
    NULL=92
    COUNT=93
    CASE=94
    ELSE=95
    END=96
    WHEN=97
    THEN=98
    ANY=99
    NONE=100
    SINGLE=101
    EXISTS=102
    TRUE=103
    FALSE=104
    HexInteger=105
    DecimalInteger=106
    OctalInteger=107
    HexLetter=108
    HexDigit=109
    Digit=110
    NonZeroDigit=111
    NonZeroOctDigit=112
    OctDigit=113
    ZeroDigit=114
    ExponentDecimalReal=115
    RegularDecimalReal=116
    StringLiteral=117
    EscapedChar=118
    CONSTRAINT=119
    DO=120
    FOR=121
    REQUIRE=122
    UNIQUE=123
    MANDATORY=124
    SCALAR=125
    OF=126
    ADD=127
    DROP=128
    FILTER=129
    EXTRACT=130
    UnescapedSymbolicName=131
    IdentifierStart=132
    IdentifierPart=133
    EscapedSymbolicName=134
    SP=135
    WHITESPACE=136
    Comment=137

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StandaloneCallContext,0)


        def s_TimeWindowLimit(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimeWindowLimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = s_cypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Query)
        try:
            self.state = 261
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 258
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 259
                self.oC_StandaloneCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 260
                self.s_TimeWindowLimit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = s_cypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 263
                self.match(s_cypherParser.OPTIONAL)
                self.state = 264
                self.match(s_cypherParser.SP)


            self.state = 267
            self.match(s_cypherParser.MATCH)
            self.state = 269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 268
                self.match(s_cypherParser.SP)


            self.state = 271
            self.oC_Pattern()
            self.state = 279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 272
                    self.match(s_cypherParser.SP)


                self.state = 277
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 275
                    self.s_AtTime()
                    pass
                elif token in [51]:
                    self.state = 276
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 285
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 281
                    self.match(s_cypherParser.SP)


                self.state = 284
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Create(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CreateContext,0)


        def oC_Merge(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MergeContext,0)


        def oC_Delete(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DeleteContext,0)


        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RemoveContext,0)


        def s_Stale(self):
            return self.getTypedRuleContext(s_cypherParser.S_StaleContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = s_cypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_UpdatingClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.state = 287
                self.oC_Create()
                pass
            elif token in [62]:
                self.state = 288
                self.oC_Merge()
                pass
            elif token in [66, 67]:
                self.state = 289
                self.oC_Delete()
                pass
            elif token in [65]:
                self.state = 290
                self.oC_Set()
                pass
            elif token in [68]:
                self.state = 291
                self.oC_Remove()
                pass
            elif token in [53]:
                self.state = 292
                self.s_Stale()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 295
                    self.match(s_cypherParser.SP)


                self.state = 298
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_SetPropertyItemOne(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemOneContext,0)


        def s_SetPropertyItemTwo(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemTwoContext,0)


        def s_SetValueItem(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetValueItemContext,0)


        def s_SetValueItemExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetValueItemExpressionContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = s_cypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 301
                self.oC_Variable()
                self.state = 303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 302
                    self.match(s_cypherParser.SP)


                self.state = 305
                self.s_AtTElement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 307
                self.oC_Variable()
                self.state = 312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 309
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 308
                        self.match(s_cypherParser.SP)


                    self.state = 311
                    self.s_AtTElement()


                self.state = 314
                self.match(s_cypherParser.T__0)
                self.state = 315
                self.s_SetPropertyItemOne()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 317
                self.oC_Variable()
                self.state = 322
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 319
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 318
                        self.match(s_cypherParser.SP)


                    self.state = 321
                    self.s_AtTElement()


                self.state = 324
                self.match(s_cypherParser.T__0)
                self.state = 325
                self.s_SetPropertyItemTwo()
                self.state = 327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 326
                    self.match(s_cypherParser.SP)


                self.state = 329
                self.s_SetValueItem()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 331
                self.oC_Variable()
                self.state = 336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 333
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 332
                        self.match(s_cypherParser.SP)


                    self.state = 335
                    self.s_AtTElement()


                self.state = 338
                self.match(s_cypherParser.T__0)
                self.state = 339
                self.s_SetPropertyItemTwo()
                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 340
                    self.match(s_cypherParser.SP)


                self.state = 343
                self.match(s_cypherParser.T__1)
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 344
                    self.match(s_cypherParser.SP)


                self.state = 347
                self.s_SetValueItemExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 349
                self.oC_PropertyExpression()
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 350
                    self.match(s_cypherParser.SP)


                self.state = 353
                self.match(s_cypherParser.T__1)
                self.state = 355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 354
                    self.match(s_cypherParser.SP)


                self.state = 357
                self.oC_Expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 359
                self.oC_Variable()
                self.state = 361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 360
                    self.match(s_cypherParser.SP)


                self.state = 363
                self.match(s_cypherParser.T__1)
                self.state = 365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 364
                    self.match(s_cypherParser.SP)


                self.state = 367
                self.oC_Expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 369
                self.oC_Variable()
                self.state = 371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 370
                    self.match(s_cypherParser.SP)


                self.state = 373
                self.match(s_cypherParser.T__2)
                self.state = 375
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 374
                    self.match(s_cypherParser.SP)


                self.state = 377
                self.oC_Expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 379
                self.oC_Variable()
                self.state = 381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 380
                    self.match(s_cypherParser.SP)


                self.state = 383
                self.oC_NodeLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemOneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemOne

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemOne" ):
                listener.enterS_SetPropertyItemOne(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemOne" ):
                listener.exitS_SetPropertyItemOne(self)




    def s_SetPropertyItemOne(self):

        localctx = s_cypherParser.S_SetPropertyItemOneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_s_SetPropertyItemOne)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.oC_PropertyKeyName()
            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 388
                self.match(s_cypherParser.SP)


            self.state = 391
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemTwoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemTwo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemTwo" ):
                listener.enterS_SetPropertyItemTwo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemTwo" ):
                listener.exitS_SetPropertyItemTwo(self)




    def s_SetPropertyItemTwo(self):

        localctx = s_cypherParser.S_SetPropertyItemTwoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_s_SetPropertyItemTwo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.oC_PropertyKeyName()
            self.state = 398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 394
                    self.match(s_cypherParser.SP)


                self.state = 397
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetValueItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetValueItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetValueItem" ):
                listener.enterS_SetValueItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetValueItem" ):
                listener.exitS_SetValueItem(self)




    def s_SetValueItem(self):

        localctx = s_cypherParser.S_SetValueItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_s_SetValueItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.match(s_cypherParser.PoundValue)
            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 401
                self.match(s_cypherParser.SP)


            self.state = 404
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetValueItemExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetValueItemExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetValueItemExpression" ):
                listener.enterS_SetValueItemExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetValueItemExpression" ):
                listener.exitS_SetValueItemExpression(self)




    def s_SetValueItemExpression(self):

        localctx = s_cypherParser.S_SetValueItemExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_s_SetValueItemExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.oC_Expression()
            self.state = 411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 407
                    self.match(s_cypherParser.SP)


                self.state = 410
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def s_StaleItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StaleItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StaleItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Stale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Stale" ):
                listener.enterS_Stale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Stale" ):
                listener.exitS_Stale(self)




    def s_Stale(self):

        localctx = s_cypherParser.S_StaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_s_Stale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.match(s_cypherParser.STALE)
            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 414
                self.match(s_cypherParser.SP)


            self.state = 417
            self.s_StaleItem()
            self.state = 428
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 419
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 418
                        self.match(s_cypherParser.SP)


                    self.state = 421
                    self.match(s_cypherParser.T__3)
                    self.state = 423
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 422
                        self.match(s_cypherParser.SP)


                    self.state = 425
                    self.s_StaleItem() 
                self.state = 430
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StaleItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StaleItem" ):
                listener.enterS_StaleItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StaleItem" ):
                listener.exitS_StaleItem(self)




    def s_StaleItem(self):

        localctx = s_cypherParser.S_StaleItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_s_StaleItem)
        self._la = 0 # Token type
        try:
            self.state = 440
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 431
                self.oC_Expression()
                self.state = 432
                self.match(s_cypherParser.T__0)
                self.state = 433
                self.oC_PropertyKeyName()
                self.state = 435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 434
                    self.match(s_cypherParser.SP)


                self.state = 437
                self.match(s_cypherParser.PoundValue)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 439
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def s_DeleteItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DeleteItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DeleteItemContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = s_cypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 442
                self.match(s_cypherParser.DETACH)
                self.state = 443
                self.match(s_cypherParser.SP)


            self.state = 446
            self.match(s_cypherParser.DELETE)
            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 447
                self.match(s_cypherParser.SP)


            self.state = 450
            self.s_DeleteItem()
            self.state = 461
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 452
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 451
                        self.match(s_cypherParser.SP)


                    self.state = 454
                    self.match(s_cypherParser.T__3)
                    self.state = 456
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 455
                        self.match(s_cypherParser.SP)


                    self.state = 458
                    self.s_DeleteItem() 
                self.state = 463
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DeleteItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DeleteItem" ):
                listener.enterS_DeleteItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DeleteItem" ):
                listener.exitS_DeleteItem(self)




    def s_DeleteItem(self):

        localctx = s_cypherParser.S_DeleteItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_s_DeleteItem)
        self._la = 0 # Token type
        try:
            self.state = 473
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 464
                self.oC_Expression()
                self.state = 465
                self.match(s_cypherParser.T__0)
                self.state = 466
                self.oC_PropertyKeyName()
                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 467
                    self.match(s_cypherParser.SP)


                self.state = 470
                self.match(s_cypherParser.PoundValue)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 472
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTime" ):
                listener.enterS_AtTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTime" ):
                listener.exitS_AtTime(self)




    def s_AtTime(self):

        localctx = s_cypherParser.S_AtTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_s_AtTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.match(s_cypherParser.AT_TIME)
            self.state = 477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 476
                self.match(s_cypherParser.SP)


            self.state = 479
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_BetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Between

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Between" ):
                listener.enterS_Between(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Between" ):
                listener.exitS_Between(self)




    def s_Between(self):

        localctx = s_cypherParser.S_BetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_s_Between)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            self.match(s_cypherParser.BETWEEN)
            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 482
                self.match(s_cypherParser.SP)


            self.state = 485
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimeWindowLimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_Snapshot(self):
            return self.getTypedRuleContext(s_cypherParser.S_SnapshotContext,0)


        def s_Scope(self):
            return self.getTypedRuleContext(s_cypherParser.S_ScopeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimeWindowLimit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimeWindowLimit" ):
                listener.enterS_TimeWindowLimit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimeWindowLimit" ):
                listener.exitS_TimeWindowLimit(self)




    def s_TimeWindowLimit(self):

        localctx = s_cypherParser.S_TimeWindowLimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_s_TimeWindowLimit)
        try:
            self.state = 489
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 487
                self.s_Snapshot()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 488
                self.s_Scope()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SnapshotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Snapshot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Snapshot" ):
                listener.enterS_Snapshot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Snapshot" ):
                listener.exitS_Snapshot(self)




    def s_Snapshot(self):

        localctx = s_cypherParser.S_SnapshotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_s_Snapshot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self.match(s_cypherParser.SNAPSHOT)
            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 492
                self.match(s_cypherParser.SP)


            self.state = 495
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Scope" ):
                listener.enterS_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Scope" ):
                listener.exitS_Scope(self)




    def s_Scope(self):

        localctx = s_cypherParser.S_ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_s_Scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.match(s_cypherParser.SCOPE)
            self.state = 499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 498
                self.match(s_cypherParser.SP)


            self.state = 501
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_PathFunctionPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PathFunctionPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AnonymousPatternPartContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = s_cypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 503
                self.oC_Variable()
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 504
                    self.match(s_cypherParser.SP)


                self.state = 507
                self.match(s_cypherParser.T__1)
                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 508
                    self.match(s_cypherParser.SP)


                self.state = 511
                self.s_PathFunctionPattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 513
                self.oC_Variable()
                self.state = 515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 514
                    self.match(s_cypherParser.SP)


                self.state = 517
                self.match(s_cypherParser.T__1)
                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 518
                    self.match(s_cypherParser.SP)


                self.state = 521
                self.oC_AnonymousPatternPart()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 523
                self.oC_AnonymousPatternPart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PathFunctionPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def s_SinglePathPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_SinglePathPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PathFunctionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PathFunctionPattern" ):
                listener.enterS_PathFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PathFunctionPattern" ):
                listener.exitS_PathFunctionPattern(self)




    def s_PathFunctionPattern(self):

        localctx = s_cypherParser.S_PathFunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_s_PathFunctionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self.oC_FunctionName()
            self.state = 528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 527
                self.match(s_cypherParser.SP)


            self.state = 530
            self.match(s_cypherParser.T__4)
            self.state = 532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 531
                self.match(s_cypherParser.SP)


            self.state = 534
            self.s_SinglePathPattern()
            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 535
                self.match(s_cypherParser.SP)


            self.state = 538
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SinglePathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodePatternContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,i)


        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SinglePathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SinglePathPattern" ):
                listener.enterS_SinglePathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SinglePathPattern" ):
                listener.exitS_SinglePathPattern(self)




    def s_SinglePathPattern(self):

        localctx = s_cypherParser.S_SinglePathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_s_SinglePathPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self.oC_NodePattern()
            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 541
                self.match(s_cypherParser.SP)


            self.state = 544
            self.oC_RelationshipPattern()
            self.state = 546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 545
                self.match(s_cypherParser.SP)


            self.state = 548
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def s_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = s_cypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 550
            self.match(s_cypherParser.T__4)
            self.state = 552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 551
                self.match(s_cypherParser.SP)


            self.state = 558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 554
                self.oC_Variable()
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 555
                    self.match(s_cypherParser.SP)




            self.state = 564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 560
                self.oC_NodeLabels()
                self.state = 562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 561
                    self.match(s_cypherParser.SP)




            self.state = 570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 566
                self.s_AtTElement()
                self.state = 568
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 567
                    self.match(s_cypherParser.SP)




            self.state = 576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==26:
                self.state = 572
                self.s_Properties()
                self.state = 574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 573
                    self.match(s_cypherParser.SP)




            self.state = 578
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertiesPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesPatternContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Properties" ):
                listener.enterS_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Properties" ):
                listener.exitS_Properties(self)




    def s_Properties(self):

        localctx = s_cypherParser.S_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_s_Properties)
        try:
            self.state = 582
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 580
                self.s_PropertiesPattern()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 581
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_PropertyNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PropertyNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PropertyNodeContext,i)


        def s_ValueNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ValueNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ValueNodeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertiesPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertiesPattern" ):
                listener.enterS_PropertiesPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertiesPattern" ):
                listener.exitS_PropertiesPattern(self)




    def s_PropertiesPattern(self):

        localctx = s_cypherParser.S_PropertiesPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_s_PropertiesPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.match(s_cypherParser.T__6)
            self.state = 586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 585
                self.match(s_cypherParser.SP)


            self.state = 604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 588
                self.s_PropertyNode()
                self.state = 589
                self.match(s_cypherParser.T__7)
                self.state = 590
                self.s_ValueNode()
                self.state = 601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 591
                    self.match(s_cypherParser.T__3)
                    self.state = 593
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 592
                        self.match(s_cypherParser.SP)


                    self.state = 595
                    self.s_PropertyNode()
                    self.state = 596
                    self.match(s_cypherParser.T__7)
                    self.state = 597
                    self.s_ValueNode()
                    self.state = 603
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 606
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyNode" ):
                listener.enterS_PropertyNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyNode" ):
                listener.exitS_PropertyNode(self)




    def s_PropertyNode(self):

        localctx = s_cypherParser.S_PropertyNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_s_PropertyNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.oC_PropertyKeyName()
            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 609
                self.match(s_cypherParser.SP)


            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 612
                self.s_AtTElement()
                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 613
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ValueNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ValueNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ValueNode" ):
                listener.enterS_ValueNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ValueNode" ):
                listener.exitS_ValueNode(self)




    def s_ValueNode(self):

        localctx = s_cypherParser.S_ValueNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_s_ValueNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 618
                self.match(s_cypherParser.SP)


            self.state = 621
            self.oC_Expression()
            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 622
                self.match(s_cypherParser.SP)


            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 625
                self.s_AtTElement()
                self.state = 627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 626
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RangeLiteralContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = s_cypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.match(s_cypherParser.T__9)
            self.state = 633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 632
                self.match(s_cypherParser.SP)


            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 635
                self.oC_Variable()
                self.state = 637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 636
                    self.match(s_cypherParser.SP)




            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 641
                self.oC_RelationshipTypes()
                self.state = 643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 642
                    self.match(s_cypherParser.SP)




            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 647
                self.oC_RangeLiteral()


            self.state = 654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 650
                self.s_AtTElement()
                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 651
                    self.match(s_cypherParser.SP)




            self.state = 660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==26:
                self.state = 656
                self.oC_Properties()
                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 657
                    self.match(s_cypherParser.SP)




            self.state = 662
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def s_TimePredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateExpressionContext,0)


        def oC_StringPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringPredicateExpressionContext,0)


        def oC_ListPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListPredicateExpressionContext,0)


        def oC_NullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NullPredicateExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringListNullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullPredicateExpression" ):
                listener.enterOC_StringListNullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullPredicateExpression" ):
                listener.exitOC_StringListNullPredicateExpression(self)




    def oC_StringListNullPredicateExpression(self):

        localctx = s_cypherParser.OC_StringListNullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_oC_StringListNullPredicateExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664
            self.oC_AddOrSubtractExpression()
            self.state = 669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 665
                self.s_TimePredicateExpression()

            elif la_ == 2:
                self.state = 666
                self.oC_StringPredicateExpression()

            elif la_ == 3:
                self.state = 667
                self.oC_ListPredicateExpression()

            elif la_ == 4:
                self.state = 668
                self.oC_NullPredicateExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def s_AtTExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTExpressionContext,0)


        def oC_SingleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SingleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SingleIndexExpressionContext,i)


        def oC_DoubleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_DoubleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_DoubleIndexExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = s_cypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_oC_ListOperatorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 671
                self.oC_PropertyOrLabelsExpression()
                pass

            elif la_ == 2:
                self.state = 672
                self.s_AtTExpression()
                pass


            self.state = 679
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 677
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                    if la_ == 1:
                        self.state = 675
                        self.oC_SingleIndexExpression()
                        pass

                    elif la_ == 2:
                        self.state = 676
                        self.oC_DoubleIndexExpression()
                        pass

             
                self.state = 681
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SingleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleIndexExpression" ):
                listener.enterOC_SingleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleIndexExpression" ):
                listener.exitOC_SingleIndexExpression(self)




    def oC_SingleIndexExpression(self):

        localctx = s_cypherParser.OC_SingleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_oC_SingleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 682
                self.match(s_cypherParser.SP)


            self.state = 685
            self.match(s_cypherParser.T__9)
            self.state = 686
            self.oC_Expression()
            self.state = 687
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_DoubleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleIndexExpression" ):
                listener.enterOC_DoubleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleIndexExpression" ):
                listener.exitOC_DoubleIndexExpression(self)




    def oC_DoubleIndexExpression(self):

        localctx = s_cypherParser.OC_DoubleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_oC_DoubleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 689
                self.match(s_cypherParser.SP)


            self.state = 692
            self.match(s_cypherParser.T__9)
            self.state = 694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 693
                self.oC_Expression()


            self.state = 696
            self.match(s_cypherParser.T__11)
            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 697
                self.oC_Expression()


            self.state = 700
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookupTime(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupTimeContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTExpression" ):
                listener.enterS_AtTExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTExpression" ):
                listener.exitS_AtTExpression(self)




    def s_AtTExpression(self):

        localctx = s_cypherParser.S_AtTExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_s_AtTExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.oC_Atom()
            self.state = 717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 707 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 704
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 703
                            self.match(s_cypherParser.SP)


                        self.state = 706
                        self.oC_PropertyLookup()

                    else:
                        raise NoViableAltException(self)
                    self.state = 709 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

                self.state = 715
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 712
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 711
                        self.match(s_cypherParser.SP)


                    self.state = 714
                    self.match(s_cypherParser.PoundValue)




            self.state = 720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 719
                self.match(s_cypherParser.SP)


            self.state = 722
            self.oC_PropertyLookupTime()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookupTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookupTime" ):
                listener.enterOC_PropertyLookupTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookupTime" ):
                listener.exitOC_PropertyLookupTime(self)




    def oC_PropertyLookupTime(self):

        localctx = s_cypherParser.OC_PropertyLookupTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_oC_PropertyLookupTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.match(s_cypherParser.AtT)
            self.state = 731
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 726
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 725
                        self.match(s_cypherParser.SP)


                    self.state = 728
                    self.oC_PropertyLookup() 
                self.state = 733
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateExpression" ):
                listener.enterS_TimePredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateExpression" ):
                listener.exitS_TimePredicateExpression(self)




    def s_TimePredicateExpression(self):

        localctx = s_cypherParser.S_TimePredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_s_TimePredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(s_cypherParser.SP)
            self.state = 735
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 736
            self.match(s_cypherParser.SP)
            self.state = 737
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_TimePointLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_TimePointLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_TimePointLiteralContext,i)


        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTElement" ):
                listener.enterS_AtTElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTElement" ):
                listener.exitS_AtTElement(self)




    def s_AtTElement(self):

        localctx = s_cypherParser.S_AtTElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_s_AtTElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self.match(s_cypherParser.AtT)
            self.state = 741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 740
                self.match(s_cypherParser.SP)


            self.state = 743
            self.match(s_cypherParser.T__4)
            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 744
                self.match(s_cypherParser.SP)


            self.state = 747
            self.s_TimePointLiteral()
            self.state = 749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 748
                self.match(s_cypherParser.SP)


            self.state = 751
            self.match(s_cypherParser.T__3)
            self.state = 753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 752
                self.match(s_cypherParser.SP)


            self.state = 757
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 117]:
                self.state = 755
                self.s_TimePointLiteral()
                pass
            elif token in [48]:
                self.state = 756
                self.match(s_cypherParser.NOW)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 759
                self.match(s_cypherParser.SP)


            self.state = 762
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePointLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePointLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePointLiteral" ):
                listener.enterS_TimePointLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePointLiteral" ):
                listener.exitS_TimePointLiteral(self)




    def s_TimePointLiteral(self):

        localctx = s_cypherParser.S_TimePointLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_s_TimePointLiteral)
        try:
            self.state = 766
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 764
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 765
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(s_cypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(s_cypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(s_cypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(s_cypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(s_cypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = s_cypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            _la = self._input.LA(1)
            if not(_la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(s_cypherParser.AND, 0)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def OR(self):
            return self.getToken(s_cypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(s_cypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(s_cypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(s_cypherParser.DO, 0)

        def FOR(self):
            return self.getToken(s_cypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(s_cypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(s_cypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(s_cypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(s_cypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(s_cypherParser.OF, 0)

        def ADD(self):
            return self.getToken(s_cypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(s_cypherParser.DROP, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = s_cypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            _la = self._input.LA(1)
            if not(((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 128317405001678847) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(s_cypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = s_cypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 772
                self.match(s_cypherParser.SP)


            self.state = 775
            self.oC_Statement()
            self.state = 780
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 776
                    self.match(s_cypherParser.SP)


                self.state = 779
                self.match(s_cypherParser.T__12)


            self.state = 783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 782
                self.match(s_cypherParser.SP)


            self.state = 785
            self.match(s_cypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = s_cypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = s_cypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.oC_SingleQuery()
            self.state = 796
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 791
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 790
                        self.match(s_cypherParser.SP)


                    self.state = 793
                    self.oC_Union() 
                self.state = 798
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = s_cypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 811
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 799
                self.match(s_cypherParser.UNION)
                self.state = 800
                self.match(s_cypherParser.SP)
                self.state = 801
                self.match(s_cypherParser.ALL)
                self.state = 803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 802
                    self.match(s_cypherParser.SP)


                self.state = 805
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 806
                self.match(s_cypherParser.UNION)
                self.state = 808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 807
                    self.match(s_cypherParser.SP)


                self.state = 810
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = s_cypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_oC_SingleQuery)
        try:
            self.state = 815
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 813
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 814
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = s_cypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 852
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 817
                    self.oC_ReadingClause()
                    self.state = 819
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 818
                        self.match(s_cypherParser.SP)


                    self.state = 825
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 826
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 827
                    self.oC_ReadingClause()
                    self.state = 829
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 828
                        self.match(s_cypherParser.SP)


                    self.state = 835
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 836
                self.oC_UpdatingClause()
                self.state = 843
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,132,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 838
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 837
                            self.match(s_cypherParser.SP)


                        self.state = 840
                        self.oC_UpdatingClause() 
                    self.state = 845
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,132,self._ctx)

                self.state = 850
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                if la_ == 1:
                    self.state = 847
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 846
                        self.match(s_cypherParser.SP)


                    self.state = 849
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def s_WithPartQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_WithPartQueryContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_WithPartQueryContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = s_cypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_oC_MultiPartQuery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 854
                    self.s_WithPartQuery()

                else:
                    raise NoViableAltException(self)
                self.state = 857 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

            self.state = 859
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_With(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WithContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_WithPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_WithPartQuery" ):
                listener.enterS_WithPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_WithPartQuery" ):
                listener.exitS_WithPartQuery(self)




    def s_WithPartQuery(self):

        localctx = s_cypherParser.S_WithPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_s_WithPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                self.state = 861
                self.oC_ReadingClause()
                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 862
                    self.match(s_cypherParser.SP)


                self.state = 869
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64001) != 0):
                self.state = 870
                self.oC_UpdatingClause()
                self.state = 872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 871
                    self.match(s_cypherParser.SP)


                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 879
            self.oC_With()
            self.state = 881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 880
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(s_cypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = s_cypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_oC_ReadingClause)
        try:
            self.state = 886
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 883
                self.oC_Match()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 884
                self.oC_Unwind()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 885
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = s_cypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.match(s_cypherParser.UNWIND)
            self.state = 890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 889
                self.match(s_cypherParser.SP)


            self.state = 892
            self.oC_Expression()
            self.state = 893
            self.match(s_cypherParser.SP)
            self.state = 894
            self.match(s_cypherParser.AS)
            self.state = 895
            self.match(s_cypherParser.SP)
            self.state = 896
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = s_cypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 898
            self.match(s_cypherParser.MERGE)
            self.state = 900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 899
                self.match(s_cypherParser.SP)


            self.state = 902
            self.oC_PatternPart()
            self.state = 907
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 903
                    self.match(s_cypherParser.SP)
                    self.state = 904
                    self.oC_MergeAction() 
                self.state = 909
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = s_cypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_oC_MergeAction)
        try:
            self.state = 920
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 910
                self.match(s_cypherParser.ON)
                self.state = 911
                self.match(s_cypherParser.SP)
                self.state = 912
                self.match(s_cypherParser.MATCH)
                self.state = 913
                self.match(s_cypherParser.SP)
                self.state = 914
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 915
                self.match(s_cypherParser.ON)
                self.state = 916
                self.match(s_cypherParser.SP)
                self.state = 917
                self.match(s_cypherParser.CREATE)
                self.state = 918
                self.match(s_cypherParser.SP)
                self.state = 919
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = s_cypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self.match(s_cypherParser.CREATE)
            self.state = 924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 923
                self.match(s_cypherParser.SP)


            self.state = 926
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = s_cypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            self.match(s_cypherParser.SET)
            self.state = 930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 929
                self.match(s_cypherParser.SP)


            self.state = 932
            self.oC_SetItem()
            self.state = 943
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 934
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 933
                        self.match(s_cypherParser.SP)


                    self.state = 936
                    self.match(s_cypherParser.T__3)
                    self.state = 938
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 937
                        self.match(s_cypherParser.SP)


                    self.state = 940
                    self.oC_SetItem() 
                self.state = 945
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = s_cypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.match(s_cypherParser.REMOVE)
            self.state = 947
            self.match(s_cypherParser.SP)
            self.state = 948
            self.oC_RemoveItem()
            self.state = 959
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 950
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 949
                        self.match(s_cypherParser.SP)


                    self.state = 952
                    self.match(s_cypherParser.T__3)
                    self.state = 954
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 953
                        self.match(s_cypherParser.SP)


                    self.state = 956
                    self.oC_RemoveItem() 
                self.state = 961
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = s_cypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_oC_RemoveItem)
        try:
            self.state = 966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 962
                self.oC_Variable()
                self.state = 963
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 965
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = s_cypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            self.match(s_cypherParser.CALL)
            self.state = 969
            self.match(s_cypherParser.SP)
            self.state = 970
            self.oC_ExplicitProcedureInvocation()
            self.state = 977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.state = 972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 971
                    self.match(s_cypherParser.SP)


                self.state = 974
                self.match(s_cypherParser.YIELD)
                self.state = 975
                self.match(s_cypherParser.SP)
                self.state = 976
                self.oC_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = s_cypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_oC_StandaloneCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.match(s_cypherParser.CALL)
            self.state = 980
            self.match(s_cypherParser.SP)
            self.state = 983
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 981
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 982
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 994
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 985
                    self.match(s_cypherParser.SP)


                self.state = 988
                self.match(s_cypherParser.YIELD)
                self.state = 989
                self.match(s_cypherParser.SP)
                self.state = 992
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14]:
                    self.state = 990
                    self.match(s_cypherParser.T__13)
                    pass
                elif token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                    self.state = 991
                    self.oC_YieldItems()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = s_cypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 996
            self.oC_YieldItem()
            self.state = 1007
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,164,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 998
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 997
                        self.match(s_cypherParser.SP)


                    self.state = 1000
                    self.match(s_cypherParser.T__3)
                    self.state = 1002
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1001
                        self.match(s_cypherParser.SP)


                    self.state = 1004
                    self.oC_YieldItem() 
                self.state = 1009
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

            self.state = 1014
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1010
                    self.match(s_cypherParser.SP)


                self.state = 1013
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = s_cypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.state = 1016
                self.oC_ProcedureResultField()
                self.state = 1017
                self.match(s_cypherParser.SP)
                self.state = 1018
                self.match(s_cypherParser.AS)
                self.state = 1019
                self.match(s_cypherParser.SP)


            self.state = 1023
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = s_cypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.match(s_cypherParser.WITH)
            self.state = 1026
            self.oC_ProjectionBody()
            self.state = 1031
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1027
                    self.match(s_cypherParser.SP)


                self.state = 1030
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = s_cypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            self.match(s_cypherParser.RETURN)
            self.state = 1034
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)




    def oC_ProjectionBody(self):

        localctx = s_cypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 1037
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1036
                    self.match(s_cypherParser.SP)


                self.state = 1039
                self.match(s_cypherParser.DISTINCT)


            self.state = 1042
            self.match(s_cypherParser.SP)
            self.state = 1043
            self.oC_ProjectionItems()
            self.state = 1046
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.state = 1044
                self.match(s_cypherParser.SP)
                self.state = 1045
                self.oC_Order()


            self.state = 1050
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1048
                self.match(s_cypherParser.SP)
                self.state = 1049
                self.oC_Skip()


            self.state = 1054
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1052
                self.match(s_cypherParser.SP)
                self.state = 1053
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)




    def oC_ProjectionItems(self):

        localctx = s_cypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 1084
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1056
                self.match(s_cypherParser.T__13)
                self.state = 1067
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,177,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1058
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1057
                            self.match(s_cypherParser.SP)


                        self.state = 1060
                        self.match(s_cypherParser.T__3)
                        self.state = 1062
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1061
                            self.match(s_cypherParser.SP)


                        self.state = 1064
                        self.oC_ProjectionItem() 
                    self.state = 1069
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,177,self._ctx)

                pass
            elif token in [5, 7, 10, 21, 22, 26, 48, 57, 86, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1070
                self.oC_ProjectionItem()
                self.state = 1081
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1072
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1071
                            self.match(s_cypherParser.SP)


                        self.state = 1074
                        self.match(s_cypherParser.T__3)
                        self.state = 1076
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1075
                            self.match(s_cypherParser.SP)


                        self.state = 1078
                        self.oC_ProjectionItem() 
                    self.state = 1083
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)




    def oC_ProjectionItem(self):

        localctx = s_cypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_oC_ProjectionItem)
        try:
            self.state = 1093
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1086
                self.oC_Expression()
                self.state = 1087
                self.match(s_cypherParser.SP)
                self.state = 1088
                self.match(s_cypherParser.AS)
                self.state = 1089
                self.match(s_cypherParser.SP)
                self.state = 1090
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1092
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = s_cypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self.match(s_cypherParser.ORDER)
            self.state = 1096
            self.match(s_cypherParser.SP)
            self.state = 1097
            self.match(s_cypherParser.BY)
            self.state = 1098
            self.match(s_cypherParser.SP)
            self.state = 1099
            self.oC_SortItem()
            self.state = 1107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1100
                self.match(s_cypherParser.T__3)
                self.state = 1102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1101
                    self.match(s_cypherParser.SP)


                self.state = 1104
                self.oC_SortItem()
                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = s_cypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            self.match(s_cypherParser.L_SKIP)
            self.state = 1111
            self.match(s_cypherParser.SP)
            self.state = 1112
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = s_cypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1114
            self.match(s_cypherParser.LIMIT)
            self.state = 1115
            self.match(s_cypherParser.SP)
            self.state = 1116
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = s_cypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1118
            self.oC_Expression()
            self.state = 1123
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 1120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1119
                    self.match(s_cypherParser.SP)


                self.state = 1122
                _la = self._input.LA(1)
                if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = s_cypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.match(s_cypherParser.WHERE)
            self.state = 1126
            self.match(s_cypherParser.SP)
            self.state = 1127
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = s_cypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            self.oC_PatternPart()
            self.state = 1140
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,189,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1131
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1130
                        self.match(s_cypherParser.SP)


                    self.state = 1133
                    self.match(s_cypherParser.T__3)
                    self.state = 1135
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1134
                        self.match(s_cypherParser.SP)


                    self.state = 1137
                    self.oC_PatternPart() 
                self.state = 1142
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,189,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = s_cypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = s_cypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 1159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1145
                self.oC_NodePattern()
                self.state = 1152
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,191,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1147
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1146
                            self.match(s_cypherParser.SP)


                        self.state = 1149
                        self.oC_PatternElementChain() 
                    self.state = 1154
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,191,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1155
                self.match(s_cypherParser.T__4)
                self.state = 1156
                self.oC_PatternElement()
                self.state = 1157
                self.match(s_cypherParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = s_cypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self.oC_NodePattern()
            self.state = 1166 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1163
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1162
                        self.match(s_cypherParser.SP)


                    self.state = 1165
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 1168 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = s_cypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1170
            self.oC_RelationshipPattern()
            self.state = 1172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1171
                self.match(s_cypherParser.SP)


            self.state = 1174
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = s_cypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 1240
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1176
                self.oC_LeftArrowHead()
                self.state = 1178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1177
                    self.match(s_cypherParser.SP)


                self.state = 1180
                self.oC_Dash()
                self.state = 1182
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
                if la_ == 1:
                    self.state = 1181
                    self.match(s_cypherParser.SP)


                self.state = 1185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1184
                    self.oC_RelationshipDetail()


                self.state = 1188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1187
                    self.match(s_cypherParser.SP)


                self.state = 1190
                self.oC_Dash()
                self.state = 1192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1191
                    self.match(s_cypherParser.SP)


                self.state = 1194
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1196
                self.oC_LeftArrowHead()
                self.state = 1198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1197
                    self.match(s_cypherParser.SP)


                self.state = 1200
                self.oC_Dash()
                self.state = 1202
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                if la_ == 1:
                    self.state = 1201
                    self.match(s_cypherParser.SP)


                self.state = 1205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1204
                    self.oC_RelationshipDetail()


                self.state = 1208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1207
                    self.match(s_cypherParser.SP)


                self.state = 1210
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1212
                self.oC_Dash()
                self.state = 1214
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                if la_ == 1:
                    self.state = 1213
                    self.match(s_cypherParser.SP)


                self.state = 1217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1216
                    self.oC_RelationshipDetail()


                self.state = 1220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1219
                    self.match(s_cypherParser.SP)


                self.state = 1222
                self.oC_Dash()
                self.state = 1224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1223
                    self.match(s_cypherParser.SP)


                self.state = 1226
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1228
                self.oC_Dash()
                self.state = 1230
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
                if la_ == 1:
                    self.state = 1229
                    self.match(s_cypherParser.SP)


                self.state = 1233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1232
                    self.oC_RelationshipDetail()


                self.state = 1236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1235
                    self.match(s_cypherParser.SP)


                self.state = 1238
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = s_cypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_oC_Properties)
        try:
            self.state = 1244
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1242
                self.oC_MapLiteral()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1243
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = s_cypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1246
            self.match(s_cypherParser.T__7)
            self.state = 1248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1247
                self.match(s_cypherParser.SP)


            self.state = 1250
            self.oC_RelTypeName()
            self.state = 1264
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,218,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1252
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1251
                        self.match(s_cypherParser.SP)


                    self.state = 1254
                    self.match(s_cypherParser.T__14)
                    self.state = 1256
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==8:
                        self.state = 1255
                        self.match(s_cypherParser.T__7)


                    self.state = 1259
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1258
                        self.match(s_cypherParser.SP)


                    self.state = 1261
                    self.oC_RelTypeName() 
                self.state = 1266
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,218,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = s_cypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            self.oC_NodeLabel()
            self.state = 1274
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,220,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1269
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1268
                        self.match(s_cypherParser.SP)


                    self.state = 1271
                    self.oC_NodeLabel() 
                self.state = 1276
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,220,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = s_cypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1277
            self.match(s_cypherParser.T__7)
            self.state = 1279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1278
                self.match(s_cypherParser.SP)


            self.state = 1281
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = s_cypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1283
            self.match(s_cypherParser.T__13)
            self.state = 1285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1284
                self.match(s_cypherParser.SP)


            self.state = 1291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                self.state = 1287
                self.oC_IntegerLiteral()
                self.state = 1289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1288
                    self.match(s_cypherParser.SP)




            self.state = 1303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 1293
                self.match(s_cypherParser.T__11)
                self.state = 1295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1294
                    self.match(s_cypherParser.SP)


                self.state = 1301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                    self.state = 1297
                    self.oC_IntegerLiteral()
                    self.state = 1299
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1298
                        self.match(s_cypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = s_cypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = s_cypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1307
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = s_cypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1309
            self.oC_Atom()
            self.state = 1314 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1311
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1310
                        self.match(s_cypherParser.SP)


                    self.state = 1313
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 1316 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,230,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = s_cypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1318
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = s_cypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1320
            self.oC_XorExpression()
            self.state = 1327
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,231,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1321
                    self.match(s_cypherParser.SP)
                    self.state = 1322
                    self.match(s_cypherParser.OR)
                    self.state = 1323
                    self.match(s_cypherParser.SP)
                    self.state = 1324
                    self.oC_XorExpression() 
                self.state = 1329
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,231,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = s_cypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1330
            self.oC_AndExpression()
            self.state = 1337
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,232,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1331
                    self.match(s_cypherParser.SP)
                    self.state = 1332
                    self.match(s_cypherParser.XOR)
                    self.state = 1333
                    self.match(s_cypherParser.SP)
                    self.state = 1334
                    self.oC_AndExpression() 
                self.state = 1339
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = s_cypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1340
            self.oC_NotExpression()
            self.state = 1347
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,233,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1341
                    self.match(s_cypherParser.SP)
                    self.state = 1342
                    self.match(s_cypherParser.AND)
                    self.state = 1343
                    self.match(s_cypherParser.SP)
                    self.state = 1344
                    self.oC_NotExpression() 
                self.state = 1349
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,233,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = s_cypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1350
                self.match(s_cypherParser.NOT)
                self.state = 1352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1351
                    self.match(s_cypherParser.SP)


                self.state = 1358
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1359
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def oC_PartialComparisonExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PartialComparisonExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PartialComparisonExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = s_cypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1361
            self.oC_StringListNullPredicateExpression()
            self.state = 1368
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,237,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1363
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1362
                        self.match(s_cypherParser.SP)


                    self.state = 1365
                    self.oC_PartialComparisonExpression() 
                self.state = 1370
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,237,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PartialComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PartialComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PartialComparisonExpression" ):
                listener.enterOC_PartialComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PartialComparisonExpression" ):
                listener.exitOC_PartialComparisonExpression(self)




    def oC_PartialComparisonExpression(self):

        localctx = s_cypherParser.OC_PartialComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_PartialComparisonExpression)
        self._la = 0 # Token type
        try:
            self.state = 1401
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1371
                self.match(s_cypherParser.T__1)
                self.state = 1373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1372
                    self.match(s_cypherParser.SP)


                self.state = 1375
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1376
                self.match(s_cypherParser.T__15)
                self.state = 1378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1377
                    self.match(s_cypherParser.SP)


                self.state = 1380
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1381
                self.match(s_cypherParser.T__16)
                self.state = 1383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1382
                    self.match(s_cypherParser.SP)


                self.state = 1385
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1386
                self.match(s_cypherParser.T__17)
                self.state = 1388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1387
                    self.match(s_cypherParser.SP)


                self.state = 1390
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1391
                self.match(s_cypherParser.T__18)
                self.state = 1393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1392
                    self.match(s_cypherParser.SP)


                self.state = 1395
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1396
                self.match(s_cypherParser.T__19)
                self.state = 1398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1397
                    self.match(s_cypherParser.SP)


                self.state = 1400
                self.oC_StringListNullPredicateExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringPredicateExpression" ):
                listener.enterOC_StringPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringPredicateExpression" ):
                listener.exitOC_StringPredicateExpression(self)




    def oC_StringPredicateExpression(self):

        localctx = s_cypherParser.OC_StringPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_StringPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1413
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
            if la_ == 1:
                self.state = 1403
                self.match(s_cypherParser.SP)
                self.state = 1404
                self.match(s_cypherParser.STARTS)
                self.state = 1405
                self.match(s_cypherParser.SP)
                self.state = 1406
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1407
                self.match(s_cypherParser.SP)
                self.state = 1408
                self.match(s_cypherParser.ENDS)
                self.state = 1409
                self.match(s_cypherParser.SP)
                self.state = 1410
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1411
                self.match(s_cypherParser.SP)
                self.state = 1412
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 1416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1415
                self.match(s_cypherParser.SP)


            self.state = 1418
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListPredicateExpression" ):
                listener.enterOC_ListPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListPredicateExpression" ):
                listener.exitOC_ListPredicateExpression(self)




    def oC_ListPredicateExpression(self):

        localctx = s_cypherParser.OC_ListPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_ListPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1420
            self.match(s_cypherParser.SP)
            self.state = 1421
            self.match(s_cypherParser.IN)
            self.state = 1423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1422
                self.match(s_cypherParser.SP)


            self.state = 1425
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullPredicateExpression" ):
                listener.enterOC_NullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullPredicateExpression" ):
                listener.exitOC_NullPredicateExpression(self)




    def oC_NullPredicateExpression(self):

        localctx = s_cypherParser.OC_NullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_NullPredicateExpression)
        try:
            self.state = 1437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1427
                self.match(s_cypherParser.SP)
                self.state = 1428
                self.match(s_cypherParser.IS)
                self.state = 1429
                self.match(s_cypherParser.SP)
                self.state = 1430
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1431
                self.match(s_cypherParser.SP)
                self.state = 1432
                self.match(s_cypherParser.IS)
                self.state = 1433
                self.match(s_cypherParser.SP)
                self.state = 1434
                self.match(s_cypherParser.NOT)
                self.state = 1435
                self.match(s_cypherParser.SP)
                self.state = 1436
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1439
            self.oC_MultiplyDivideModuloExpression()
            self.state = 1458
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,254,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1456
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
                    if la_ == 1:
                        self.state = 1441
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1440
                            self.match(s_cypherParser.SP)


                        self.state = 1443
                        self.match(s_cypherParser.T__20)
                        self.state = 1445
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1444
                            self.match(s_cypherParser.SP)


                        self.state = 1447
                        self.oC_MultiplyDivideModuloExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1449
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1448
                            self.match(s_cypherParser.SP)


                        self.state = 1451
                        self.match(s_cypherParser.T__21)
                        self.state = 1453
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1452
                            self.match(s_cypherParser.SP)


                        self.state = 1455
                        self.oC_MultiplyDivideModuloExpression()
                        pass

             
                self.state = 1460
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,254,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PowerOfExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = s_cypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1461
            self.oC_PowerOfExpression()
            self.state = 1488
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,262,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1486
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
                    if la_ == 1:
                        self.state = 1463
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1462
                            self.match(s_cypherParser.SP)


                        self.state = 1465
                        self.match(s_cypherParser.T__13)
                        self.state = 1467
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1466
                            self.match(s_cypherParser.SP)


                        self.state = 1469
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1471
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1470
                            self.match(s_cypherParser.SP)


                        self.state = 1473
                        self.match(s_cypherParser.T__22)
                        self.state = 1475
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1474
                            self.match(s_cypherParser.SP)


                        self.state = 1477
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1479
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1478
                            self.match(s_cypherParser.SP)


                        self.state = 1481
                        self.match(s_cypherParser.T__23)
                        self.state = 1483
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1482
                            self.match(s_cypherParser.SP)


                        self.state = 1485
                        self.oC_PowerOfExpression()
                        pass

             
                self.state = 1490
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,262,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = s_cypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1491
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 1502
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,265,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1493
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1492
                        self.match(s_cypherParser.SP)


                    self.state = 1495
                    self.match(s_cypherParser.T__24)
                    self.state = 1497
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1496
                        self.match(s_cypherParser.SP)


                    self.state = 1499
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 1504
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,265,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ListOperatorExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListOperatorExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.state = 1511
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 7, 10, 26, 48, 57, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1505
                self.oC_ListOperatorExpression()
                pass
            elif token in [21, 22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1506
                _la = self._input.LA(1)
                if not(_la==21 or _la==22):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1507
                    self.match(s_cypherParser.SP)


                self.state = 1510
                self.oC_ListOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyOrLabelsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyOrLabelsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyOrLabelsExpression" ):
                listener.enterOC_PropertyOrLabelsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyOrLabelsExpression" ):
                listener.exitOC_PropertyOrLabelsExpression(self)




    def oC_PropertyOrLabelsExpression(self):

        localctx = s_cypherParser.OC_PropertyOrLabelsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_PropertyOrLabelsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1513
            self.oC_Atom()
            self.state = 1520
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,269,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1515
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1514
                        self.match(s_cypherParser.SP)


                    self.state = 1517
                    self.oC_PropertyLookup() 
                self.state = 1522
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,269,self._ctx)

            self.state = 1527
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.state = 1524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1523
                    self.match(s_cypherParser.SP)


                self.state = 1526
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = s_cypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1529
            self.match(s_cypherParser.T__0)
            self.state = 1531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1530
                self.match(s_cypherParser.SP)


            self.state = 1533
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternComprehensionContext,0)


        def oC_Quantifier(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QuantifierContext,0)


        def oC_PatternPredicate(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPredicateContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionInvocationContext,0)


        def oC_ExistentialSubquery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExistentialSubqueryContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = s_cypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 1559
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1535
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1536
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1537
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1538
                self.match(s_cypherParser.COUNT)
                self.state = 1540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1539
                    self.match(s_cypherParser.SP)


                self.state = 1542
                self.match(s_cypherParser.T__4)
                self.state = 1544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1543
                    self.match(s_cypherParser.SP)


                self.state = 1546
                self.match(s_cypherParser.T__13)
                self.state = 1548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1547
                    self.match(s_cypherParser.SP)


                self.state = 1550
                self.match(s_cypherParser.T__5)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1551
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1552
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1553
                self.oC_Quantifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1554
                self.oC_PatternPredicate()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1555
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1556
                self.oC_FunctionInvocation()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1557
                self.oC_ExistentialSubquery()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1558
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def oC_CaseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_CaseAlternativeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = s_cypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                self.state = 1561
                self.match(s_cypherParser.CASE)
                self.state = 1566 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1563
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1562
                            self.match(s_cypherParser.SP)


                        self.state = 1565
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1568 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,278,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1570
                self.match(s_cypherParser.CASE)
                self.state = 1572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1571
                    self.match(s_cypherParser.SP)


                self.state = 1574
                self.oC_Expression()
                self.state = 1579 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1576
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1575
                            self.match(s_cypherParser.SP)


                        self.state = 1578
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1581 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,281,self._ctx)

                pass


            self.state = 1593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
            if la_ == 1:
                self.state = 1586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1585
                    self.match(s_cypherParser.SP)


                self.state = 1588
                self.match(s_cypherParser.ELSE)
                self.state = 1590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1589
                    self.match(s_cypherParser.SP)


                self.state = 1592
                self.oC_Expression()


            self.state = 1596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1595
                self.match(s_cypherParser.SP)


            self.state = 1598
            self.match(s_cypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternative" ):
                listener.enterOC_CaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternative" ):
                listener.exitOC_CaseAlternative(self)




    def oC_CaseAlternative(self):

        localctx = s_cypherParser.OC_CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_CaseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1600
            self.match(s_cypherParser.WHEN)
            self.state = 1602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1601
                self.match(s_cypherParser.SP)


            self.state = 1604
            self.oC_Expression()
            self.state = 1606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1605
                self.match(s_cypherParser.SP)


            self.state = 1608
            self.match(s_cypherParser.THEN)
            self.state = 1610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1609
                self.match(s_cypherParser.SP)


            self.state = 1612
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = s_cypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1614
            self.match(s_cypherParser.T__9)
            self.state = 1616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1615
                self.match(s_cypherParser.SP)


            self.state = 1618
            self.oC_FilterExpression()
            self.state = 1627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.state = 1620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1619
                    self.match(s_cypherParser.SP)


                self.state = 1622
                self.match(s_cypherParser.T__14)
                self.state = 1624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1623
                    self.match(s_cypherParser.SP)


                self.state = 1626
                self.oC_Expression()


            self.state = 1630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1629
                self.match(s_cypherParser.SP)


            self.state = 1632
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = s_cypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1634
            self.match(s_cypherParser.T__9)
            self.state = 1636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1635
                self.match(s_cypherParser.SP)


            self.state = 1646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 1638
                self.oC_Variable()
                self.state = 1640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1639
                    self.match(s_cypherParser.SP)


                self.state = 1642
                self.match(s_cypherParser.T__1)
                self.state = 1644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1643
                    self.match(s_cypherParser.SP)




            self.state = 1648
            self.oC_RelationshipsPattern()
            self.state = 1650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1649
                self.match(s_cypherParser.SP)


            self.state = 1656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 1652
                self.oC_Where()
                self.state = 1654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1653
                    self.match(s_cypherParser.SP)




            self.state = 1658
            self.match(s_cypherParser.T__14)
            self.state = 1660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1659
                self.match(s_cypherParser.SP)


            self.state = 1662
            self.oC_Expression()
            self.state = 1664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1663
                self.match(s_cypherParser.SP)


            self.state = 1666
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Quantifier" ):
                listener.enterOC_Quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Quantifier" ):
                listener.exitOC_Quantifier(self)




    def oC_Quantifier(self):

        localctx = s_cypherParser.OC_QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_Quantifier)
        self._la = 0 # Token type
        try:
            self.state = 1724
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1668
                self.match(s_cypherParser.ALL)
                self.state = 1670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1669
                    self.match(s_cypherParser.SP)


                self.state = 1672
                self.match(s_cypherParser.T__4)
                self.state = 1674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1673
                    self.match(s_cypherParser.SP)


                self.state = 1676
                self.oC_FilterExpression()
                self.state = 1678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1677
                    self.match(s_cypherParser.SP)


                self.state = 1680
                self.match(s_cypherParser.T__5)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1682
                self.match(s_cypherParser.ANY)
                self.state = 1684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1683
                    self.match(s_cypherParser.SP)


                self.state = 1686
                self.match(s_cypherParser.T__4)
                self.state = 1688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1687
                    self.match(s_cypherParser.SP)


                self.state = 1690
                self.oC_FilterExpression()
                self.state = 1692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1691
                    self.match(s_cypherParser.SP)


                self.state = 1694
                self.match(s_cypherParser.T__5)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1696
                self.match(s_cypherParser.NONE)
                self.state = 1698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1697
                    self.match(s_cypherParser.SP)


                self.state = 1700
                self.match(s_cypherParser.T__4)
                self.state = 1702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1701
                    self.match(s_cypherParser.SP)


                self.state = 1704
                self.oC_FilterExpression()
                self.state = 1706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1705
                    self.match(s_cypherParser.SP)


                self.state = 1708
                self.match(s_cypherParser.T__5)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1710
                self.match(s_cypherParser.SINGLE)
                self.state = 1712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1711
                    self.match(s_cypherParser.SP)


                self.state = 1714
                self.match(s_cypherParser.T__4)
                self.state = 1716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1715
                    self.match(s_cypherParser.SP)


                self.state = 1718
                self.oC_FilterExpression()
                self.state = 1720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1719
                    self.match(s_cypherParser.SP)


                self.state = 1722
                self.match(s_cypherParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IdInCollContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = s_cypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1726
            self.oC_IdInColl()
            self.state = 1731
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
            if la_ == 1:
                self.state = 1728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1727
                    self.match(s_cypherParser.SP)


                self.state = 1730
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPredicate" ):
                listener.enterOC_PatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPredicate" ):
                listener.exitOC_PatternPredicate(self)




    def oC_PatternPredicate(self):

        localctx = s_cypherParser.OC_PatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_oC_PatternPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1733
            self.oC_RelationshipsPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = s_cypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1735
            self.match(s_cypherParser.T__4)
            self.state = 1737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1736
                self.match(s_cypherParser.SP)


            self.state = 1739
            self.oC_Expression()
            self.state = 1741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1740
                self.match(s_cypherParser.SP)


            self.state = 1743
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = s_cypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1745
            self.oC_Variable()
            self.state = 1746
            self.match(s_cypherParser.SP)
            self.state = 1747
            self.match(s_cypherParser.IN)
            self.state = 1748
            self.match(s_cypherParser.SP)
            self.state = 1749
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = s_cypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1751
            self.oC_FunctionName()
            self.state = 1753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1752
                self.match(s_cypherParser.SP)


            self.state = 1755
            self.match(s_cypherParser.T__4)
            self.state = 1757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1756
                self.match(s_cypherParser.SP)


            self.state = 1763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 1759
                self.match(s_cypherParser.DISTINCT)
                self.state = 1761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1760
                    self.match(s_cypherParser.SP)




            self.state = 1782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1765
                self.oC_Expression()
                self.state = 1767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1766
                    self.match(s_cypherParser.SP)


                self.state = 1779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1769
                    self.match(s_cypherParser.T__3)
                    self.state = 1771
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1770
                        self.match(s_cypherParser.SP)


                    self.state = 1773
                    self.oC_Expression()
                    self.state = 1775
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1774
                        self.match(s_cypherParser.SP)


                    self.state = 1781
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1784
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = s_cypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_oC_FunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1786
            self.oC_Namespace()
            self.state = 1787
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExistentialSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExistentialSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExistentialSubquery" ):
                listener.enterOC_ExistentialSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExistentialSubquery" ):
                listener.exitOC_ExistentialSubquery(self)




    def oC_ExistentialSubquery(self):

        localctx = s_cypherParser.OC_ExistentialSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_oC_ExistentialSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1789
            self.match(s_cypherParser.EXISTS)
            self.state = 1791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1790
                self.match(s_cypherParser.SP)


            self.state = 1793
            self.match(s_cypherParser.T__6)
            self.state = 1795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1794
                self.match(s_cypherParser.SP)


            self.state = 1805
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 71, 72]:
                self.state = 1797
                self.oC_RegularQuery()
                pass
            elif token in [5, 48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 1798
                self.oC_Pattern()
                self.state = 1803
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
                if la_ == 1:
                    self.state = 1800
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1799
                        self.match(s_cypherParser.SP)


                    self.state = 1802
                    self.oC_Where()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1807
                self.match(s_cypherParser.SP)


            self.state = 1810
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1812
            self.oC_ProcedureName()
            self.state = 1814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1813
                self.match(s_cypherParser.SP)


            self.state = 1816
            self.match(s_cypherParser.T__4)
            self.state = 1818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1817
                self.match(s_cypherParser.SP)


            self.state = 1837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1820
                self.oC_Expression()
                self.state = 1822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1821
                    self.match(s_cypherParser.SP)


                self.state = 1834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1824
                    self.match(s_cypherParser.T__3)
                    self.state = 1826
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1825
                        self.match(s_cypherParser.SP)


                    self.state = 1828
                    self.oC_Expression()
                    self.state = 1830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1829
                        self.match(s_cypherParser.SP)


                    self.state = 1836
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1839
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1841
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = s_cypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1843
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = s_cypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1845
            self.oC_Namespace()
            self.state = 1846
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = s_cypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1853
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,343,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1848
                    self.oC_SymbolicName()
                    self.state = 1849
                    self.match(s_cypherParser.T__0) 
                self.state = 1855
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,343,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = s_cypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1856
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_ListLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListLiteralContext,0)


        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = s_cypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_oC_Literal)
        try:
            self.state = 1864
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1858
                self.oC_BooleanLiteral()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1859
                self.match(s_cypherParser.NULL)
                pass
            elif token in [105, 106, 107, 115, 116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1860
                self.oC_NumberLiteral()
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1861
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1862
                self.oC_ListLiteral()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1863
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = s_cypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1866
            _la = self._input.LA(1)
            if not(_la==103 or _la==104):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = s_cypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_oC_NumberLiteral)
        try:
            self.state = 1870
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115, 116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1868
                self.oC_DoubleLiteral()
                pass
            elif token in [105, 106, 107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1869
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(s_cypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(s_cypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = s_cypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1872
            _la = self._input.LA(1)
            if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(s_cypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(s_cypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = s_cypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1874
            _la = self._input.LA(1)
            if not(_la==115 or _la==116):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = s_cypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1876
            self.match(s_cypherParser.T__9)
            self.state = 1878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1877
                self.match(s_cypherParser.SP)


            self.state = 1897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1880
                self.oC_Expression()
                self.state = 1882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1881
                    self.match(s_cypherParser.SP)


                self.state = 1894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1884
                    self.match(s_cypherParser.T__3)
                    self.state = 1886
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1885
                        self.match(s_cypherParser.SP)


                    self.state = 1888
                    self.oC_Expression()
                    self.state = 1890
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1889
                        self.match(s_cypherParser.SP)


                    self.state = 1896
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1899
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyKeyName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyKeyNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,i)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = s_cypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1901
            self.match(s_cypherParser.T__6)
            self.state = 1903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1902
                self.match(s_cypherParser.SP)


            self.state = 1938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 1905
                self.oC_PropertyKeyName()
                self.state = 1907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1906
                    self.match(s_cypherParser.SP)


                self.state = 1909
                self.match(s_cypherParser.T__7)
                self.state = 1911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1910
                    self.match(s_cypherParser.SP)


                self.state = 1913
                self.oC_Expression()
                self.state = 1915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1914
                    self.match(s_cypherParser.SP)


                self.state = 1935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1917
                    self.match(s_cypherParser.T__3)
                    self.state = 1919
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1918
                        self.match(s_cypherParser.SP)


                    self.state = 1921
                    self.oC_PropertyKeyName()
                    self.state = 1923
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1922
                        self.match(s_cypherParser.SP)


                    self.state = 1925
                    self.match(s_cypherParser.T__7)
                    self.state = 1927
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1926
                        self.match(s_cypherParser.SP)


                    self.state = 1929
                    self.oC_Expression()
                    self.state = 1931
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1930
                        self.match(s_cypherParser.SP)


                    self.state = 1937
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1940
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = s_cypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1942
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = s_cypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1944
            self.match(s_cypherParser.T__25)
            self.state = 1947
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 1945
                self.oC_SymbolicName()
                pass
            elif token in [106]:
                self.state = 1946
                self.match(s_cypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = s_cypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_oC_SchemaName)
        try:
            self.state = 1951
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1949
                self.oC_SymbolicName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1950
                self.oC_ReservedWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = s_cypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1953
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2013396992) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = s_cypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1955
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32212516864) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = s_cypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1957
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70334388633600) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





