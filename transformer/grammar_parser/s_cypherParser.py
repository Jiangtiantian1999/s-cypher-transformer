# Generated from .\s_cypher.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u008b")
        buf.write("\u0799\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\3\2\3\2\3\2\5\2\u00fc\n\2\3\3\3\3\5\3")
        buf.write("\u0100\n\3\3\3\3\3\5\3\u0104\n\3\3\3\3\3\5\3\u0108\n\3")
        buf.write("\3\3\3\3\5\3\u010c\n\3\5\3\u010e\n\3\3\3\5\3\u0111\n\3")
        buf.write("\3\3\5\3\u0114\n\3\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u011c\n")
        buf.write("\4\3\4\5\4\u011f\n\4\3\4\5\4\u0122\n\4\3\5\3\5\5\5\u0126")
        buf.write("\n\5\3\5\3\5\3\5\3\5\5\5\u012c\n\5\3\5\5\5\u012f\n\5\3")
        buf.write("\5\3\5\3\5\5\5\u0134\n\5\3\5\3\5\3\5\3\5\5\5\u013a\n\5")
        buf.write("\3\5\5\5\u013d\n\5\3\5\3\5\3\5\5\5\u0142\n\5\3\5\5\5\u0145")
        buf.write("\n\5\3\5\5\5\u0148\n\5\3\5\3\5\5\5\u014c\n\5\3\5\3\5\3")
        buf.write("\5\3\5\5\5\u0152\n\5\3\5\5\5\u0155\n\5\3\5\3\5\3\5\5\5")
        buf.write("\u015a\n\5\3\5\5\5\u015d\n\5\3\5\5\5\u0160\n\5\3\5\3\5")
        buf.write("\5\5\u0164\n\5\3\5\3\5\5\5\u0168\n\5\3\5\5\5\u016b\n\5")
        buf.write("\3\5\3\5\5\5\u016f\n\5\3\5\3\5\5\5\u0173\n\5\3\5\3\5\3")
        buf.write("\5\3\5\5\5\u0179\n\5\3\5\3\5\5\5\u017d\n\5\3\5\3\5\3\5")
        buf.write("\3\5\5\5\u0183\n\5\3\5\3\5\5\5\u0187\n\5\3\5\3\5\3\5\3")
        buf.write("\5\5\5\u018d\n\5\3\5\3\5\5\5\u0191\n\5\3\6\3\6\5\6\u0195")
        buf.write("\n\6\3\6\3\6\5\6\u0199\n\6\3\6\3\6\5\6\u019d\n\6\3\6\7")
        buf.write("\6\u01a0\n\6\f\6\16\6\u01a3\13\6\3\7\3\7\3\7\3\7\5\7\u01a9")
        buf.write("\n\7\3\7\3\7\3\7\5\7\u01ae\n\7\3\b\3\b\5\b\u01b2\n\b\3")
        buf.write("\b\3\b\5\b\u01b6\n\b\3\b\3\b\5\b\u01ba\n\b\3\b\3\b\5\b")
        buf.write("\u01be\n\b\3\b\7\b\u01c1\n\b\f\b\16\b\u01c4\13\b\3\t\3")
        buf.write("\t\3\t\3\t\5\t\u01ca\n\t\3\t\3\t\3\t\5\t\u01cf\n\t\3\n")
        buf.write("\3\n\5\n\u01d3\n\n\3\n\3\n\3\13\3\13\5\13\u01d9\n\13\3")
        buf.write("\13\3\13\3\f\3\f\5\f\u01df\n\f\3\f\3\f\3\f\5\f\u01e4\n")
        buf.write("\f\3\f\5\f\u01e7\n\f\3\r\3\r\5\r\u01eb\n\r\3\r\3\r\5\r")
        buf.write("\u01ef\n\r\3\r\3\r\3\r\3\r\5\r\u01f5\n\r\3\r\3\r\5\r\u01f9")
        buf.write("\n\r\3\r\3\r\3\r\5\r\u01fe\n\r\3\16\3\16\5\16\u0202\n")
        buf.write("\16\3\16\3\16\5\16\u0206\n\16\3\16\3\16\5\16\u020a\n\16")
        buf.write("\3\16\3\16\3\17\3\17\5\17\u0210\n\17\3\17\3\17\5\17\u0214")
        buf.write("\n\17\3\17\3\17\3\20\3\20\5\20\u021a\n\20\3\20\3\20\5")
        buf.write("\20\u021e\n\20\5\20\u0220\n\20\3\20\3\20\5\20\u0224\n")
        buf.write("\20\5\20\u0226\n\20\3\20\3\20\5\20\u022a\n\20\5\20\u022c")
        buf.write("\n\20\3\20\3\20\5\20\u0230\n\20\5\20\u0232\n\20\3\20\3")
        buf.write("\20\3\21\3\21\5\21\u0238\n\21\3\22\3\22\5\22\u023c\n\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\5\22\u0243\n\22\3\22\3\22\3")
        buf.write("\22\3\22\7\22\u0249\n\22\f\22\16\22\u024c\13\22\5\22\u024e")
        buf.write("\n\22\3\22\3\22\3\23\3\23\5\23\u0254\n\23\3\23\3\23\5")
        buf.write("\23\u0258\n\23\5\23\u025a\n\23\3\24\5\24\u025d\n\24\3")
        buf.write("\24\3\24\5\24\u0261\n\24\3\24\3\24\5\24\u0265\n\24\5\24")
        buf.write("\u0267\n\24\3\25\3\25\5\25\u026b\n\25\3\25\3\25\5\25\u026f")
        buf.write("\n\25\5\25\u0271\n\25\3\25\3\25\5\25\u0275\n\25\5\25\u0277")
        buf.write("\n\25\3\25\5\25\u027a\n\25\3\25\3\25\5\25\u027e\n\25\5")
        buf.write("\25\u0280\n\25\3\25\3\25\5\25\u0284\n\25\5\25\u0286\n")
        buf.write("\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\5\26\u028f\n\26")
        buf.write("\3\27\3\27\5\27\u0293\n\27\3\27\3\27\7\27\u0297\n\27\f")
        buf.write("\27\16\27\u029a\13\27\3\30\5\30\u029d\n\30\3\30\3\30\3")
        buf.write("\30\3\30\3\31\5\31\u02a4\n\31\3\31\3\31\5\31\u02a8\n\31")
        buf.write("\3\31\3\31\5\31\u02ac\n\31\3\31\3\31\3\32\3\32\5\32\u02b2")
        buf.write("\n\32\3\32\6\32\u02b5\n\32\r\32\16\32\u02b6\3\32\5\32")
        buf.write("\u02ba\n\32\3\32\5\32\u02bd\n\32\5\32\u02bf\n\32\3\32")
        buf.write("\5\32\u02c2\n\32\3\32\3\32\3\33\3\33\5\33\u02c8\n\33\3")
        buf.write("\33\7\33\u02cb\n\33\f\33\16\33\u02ce\13\33\3\34\3\34\3")
        buf.write("\34\3\34\3\34\3\35\3\35\5\35\u02d7\n\35\3\35\3\35\5\35")
        buf.write("\u02db\n\35\3\35\3\35\5\35\u02df\n\35\3\35\3\35\5\35\u02e3")
        buf.write("\n\35\3\35\3\35\5\35\u02e7\n\35\3\35\5\35\u02ea\n\35\3")
        buf.write("\35\3\35\3\36\3\36\5\36\u02f0\n\36\3\37\3\37\3 \3 \3!")
        buf.write("\5!\u02f7\n!\3!\3!\5!\u02fb\n!\3!\5!\u02fe\n!\3!\5!\u0301")
        buf.write("\n!\3!\3!\3\"\3\"\3#\3#\5#\u0309\n#\3#\7#\u030c\n#\f#")
        buf.write("\16#\u030f\13#\3$\3$\3$\3$\5$\u0315\n$\3$\3$\3$\5$\u031a")
        buf.write("\n$\3$\5$\u031d\n$\3%\3%\5%\u0321\n%\3&\3&\5&\u0325\n")
        buf.write("&\7&\u0327\n&\f&\16&\u032a\13&\3&\3&\3&\5&\u032f\n&\7")
        buf.write("&\u0331\n&\f&\16&\u0334\13&\3&\3&\5&\u0338\n&\3&\7&\u033b")
        buf.write("\n&\f&\16&\u033e\13&\3&\5&\u0341\n&\3&\5&\u0344\n&\5&")
        buf.write("\u0346\n&\3\'\6\'\u0349\n\'\r\'\16\'\u034a\3\'\3\'\3(")
        buf.write("\3(\5(\u0351\n(\7(\u0353\n(\f(\16(\u0356\13(\3(\3(\5(")
        buf.write("\u035a\n(\7(\u035c\n(\f(\16(\u035f\13(\3(\3(\5(\u0363")
        buf.write("\n(\3)\3)\3)\5)\u0368\n)\3*\3*\5*\u036c\n*\3*\3*\3*\3")
        buf.write("*\3*\3*\3+\3+\5+\u0376\n+\3+\3+\3+\7+\u037b\n+\f+\16+")
        buf.write("\u037e\13+\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u038a\n,\3")
        buf.write("-\3-\5-\u038e\n-\3-\3-\3.\3.\5.\u0394\n.\3.\3.\5.\u0398")
        buf.write("\n.\3.\3.\5.\u039c\n.\3.\7.\u039f\n.\f.\16.\u03a2\13.")
        buf.write("\3/\3/\3/\3/\5/\u03a8\n/\3/\3/\5/\u03ac\n/\3/\7/\u03af")
        buf.write("\n/\f/\16/\u03b2\13/\3\60\3\60\3\60\3\60\5\60\u03b8\n")
        buf.write("\60\3\61\3\61\3\61\3\61\5\61\u03be\n\61\3\61\3\61\3\61")
        buf.write("\5\61\u03c3\n\61\3\62\3\62\3\62\3\62\5\62\u03c9\n\62\3")
        buf.write("\62\5\62\u03cc\n\62\3\62\3\62\3\62\3\62\5\62\u03d2\n\62")
        buf.write("\5\62\u03d4\n\62\3\63\3\63\5\63\u03d8\n\63\3\63\3\63\5")
        buf.write("\63\u03dc\n\63\3\63\7\63\u03df\n\63\f\63\16\63\u03e2\13")
        buf.write("\63\3\63\5\63\u03e5\n\63\3\63\5\63\u03e8\n\63\3\64\3\64")
        buf.write("\3\64\3\64\3\64\5\64\u03ef\n\64\3\64\3\64\3\65\3\65\3")
        buf.write("\65\5\65\u03f6\n\65\3\65\5\65\u03f9\n\65\3\66\3\66\3\66")
        buf.write("\3\67\5\67\u03ff\n\67\3\67\5\67\u0402\n\67\3\67\3\67\3")
        buf.write("\67\3\67\5\67\u0408\n\67\3\67\3\67\5\67\u040c\n\67\3\67")
        buf.write("\3\67\5\67\u0410\n\67\38\38\58\u0414\n8\38\38\58\u0418")
        buf.write("\n8\38\78\u041b\n8\f8\168\u041e\138\38\38\58\u0422\n8")
        buf.write("\38\38\58\u0426\n8\38\78\u0429\n8\f8\168\u042c\138\58")
        buf.write("\u042e\n8\39\39\39\39\39\39\39\59\u0437\n9\3:\3:\3:\3")
        buf.write(":\3:\3:\3:\5:\u0440\n:\3:\7:\u0443\n:\f:\16:\u0446\13")
        buf.write(":\3;\3;\3;\3;\3<\3<\3<\3<\3=\3=\5=\u0452\n=\3=\5=\u0455")
        buf.write("\n=\3>\3>\3>\3>\3?\3?\5?\u045d\n?\3?\3?\5?\u0461\n?\3")
        buf.write("?\7?\u0464\n?\f?\16?\u0467\13?\3@\3@\3A\3A\5A\u046d\n")
        buf.write("A\3A\7A\u0470\nA\fA\16A\u0473\13A\3A\3A\3A\3A\5A\u0479")
        buf.write("\nA\3B\3B\5B\u047d\nB\3B\6B\u0480\nB\rB\16B\u0481\3C\3")
        buf.write("C\5C\u0486\nC\3C\3C\3D\3D\5D\u048c\nD\3D\3D\5D\u0490\n")
        buf.write("D\3D\5D\u0493\nD\3D\5D\u0496\nD\3D\3D\5D\u049a\nD\3D\3")
        buf.write("D\3D\3D\5D\u04a0\nD\3D\3D\5D\u04a4\nD\3D\5D\u04a7\nD\3")
        buf.write("D\5D\u04aa\nD\3D\3D\3D\3D\5D\u04b0\nD\3D\5D\u04b3\nD\3")
        buf.write("D\5D\u04b6\nD\3D\3D\5D\u04ba\nD\3D\3D\3D\3D\5D\u04c0\n")
        buf.write("D\3D\5D\u04c3\nD\3D\5D\u04c6\nD\3D\3D\5D\u04ca\nD\3E\3")
        buf.write("E\5E\u04ce\nE\3F\3F\5F\u04d2\nF\3F\3F\5F\u04d6\nF\3F\3")
        buf.write("F\5F\u04da\nF\3F\5F\u04dd\nF\3F\7F\u04e0\nF\fF\16F\u04e3")
        buf.write("\13F\3G\3G\5G\u04e7\nG\3G\7G\u04ea\nG\fG\16G\u04ed\13")
        buf.write("G\3H\3H\5H\u04f1\nH\3H\3H\3I\3I\5I\u04f7\nI\3I\3I\5I\u04fb")
        buf.write("\nI\5I\u04fd\nI\3I\3I\5I\u0501\nI\3I\3I\5I\u0505\nI\5")
        buf.write("I\u0507\nI\5I\u0509\nI\3J\3J\3K\3K\3L\3L\5L\u0511\nL\3")
        buf.write("L\6L\u0514\nL\rL\16L\u0515\3M\3M\3N\3N\3N\3N\3N\7N\u051f")
        buf.write("\nN\fN\16N\u0522\13N\3O\3O\3O\3O\3O\7O\u0529\nO\fO\16")
        buf.write("O\u052c\13O\3P\3P\3P\3P\3P\7P\u0533\nP\fP\16P\u0536\13")
        buf.write("P\3Q\3Q\5Q\u053a\nQ\7Q\u053c\nQ\fQ\16Q\u053f\13Q\3Q\3")
        buf.write("Q\3R\3R\5R\u0545\nR\3R\7R\u0548\nR\fR\16R\u054b\13R\3")
        buf.write("S\3S\5S\u054f\nS\3S\3S\3S\5S\u0554\nS\3S\3S\3S\5S\u0559")
        buf.write("\nS\3S\3S\3S\5S\u055e\nS\3S\3S\3S\5S\u0563\nS\3S\3S\3")
        buf.write("S\5S\u0568\nS\3S\5S\u056b\nS\3T\3T\3T\3T\3T\3T\3T\3T\3")
        buf.write("T\3T\5T\u0577\nT\3T\5T\u057a\nT\3T\3T\3U\3U\3U\5U\u0581")
        buf.write("\nU\3U\3U\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u058f\nV\3")
        buf.write("W\3W\5W\u0593\nW\3W\3W\5W\u0597\nW\3W\3W\5W\u059b\nW\3")
        buf.write("W\3W\5W\u059f\nW\3W\7W\u05a2\nW\fW\16W\u05a5\13W\3X\3")
        buf.write("X\5X\u05a9\nX\3X\3X\5X\u05ad\nX\3X\3X\5X\u05b1\nX\3X\3")
        buf.write("X\5X\u05b5\nX\3X\3X\5X\u05b9\nX\3X\3X\5X\u05bd\nX\3X\7")
        buf.write("X\u05c0\nX\fX\16X\u05c3\13X\3Y\3Y\5Y\u05c7\nY\3Y\3Y\5")
        buf.write("Y\u05cb\nY\3Y\7Y\u05ce\nY\fY\16Y\u05d1\13Y\3Z\3Z\3Z\5")
        buf.write("Z\u05d6\nZ\3Z\5Z\u05d9\nZ\3[\3[\5[\u05dd\n[\3[\7[\u05e0")
        buf.write("\n[\f[\16[\u05e3\13[\3[\5[\u05e6\n[\3[\5[\u05e9\n[\3\\")
        buf.write("\3\\\5\\\u05ed\n\\\3\\\3\\\3]\3]\3]\3]\3]\5]\u05f6\n]")
        buf.write("\3]\3]\5]\u05fa\n]\3]\3]\5]\u05fe\n]\3]\3]\3]\3]\3]\3")
        buf.write("]\3]\3]\3]\5]\u0609\n]\3^\3^\5^\u060d\n^\3^\6^\u0610\n")
        buf.write("^\r^\16^\u0611\3^\3^\5^\u0616\n^\3^\3^\5^\u061a\n^\3^")
        buf.write("\6^\u061d\n^\r^\16^\u061e\5^\u0621\n^\3^\5^\u0624\n^\3")
        buf.write("^\3^\5^\u0628\n^\3^\5^\u062b\n^\3^\5^\u062e\n^\3^\3^\3")
        buf.write("_\3_\5_\u0634\n_\3_\3_\5_\u0638\n_\3_\3_\5_\u063c\n_\3")
        buf.write("_\3_\3`\3`\5`\u0642\n`\3`\3`\5`\u0646\n`\3`\3`\5`\u064a")
        buf.write("\n`\3`\5`\u064d\n`\3`\5`\u0650\n`\3`\3`\3a\3a\5a\u0656")
        buf.write("\na\3a\3a\5a\u065a\na\3a\3a\5a\u065e\na\5a\u0660\na\3")
        buf.write("a\3a\5a\u0664\na\3a\3a\5a\u0668\na\5a\u066a\na\3a\3a\5")
        buf.write("a\u066e\na\3a\3a\5a\u0672\na\3a\3a\3b\3b\5b\u0678\nb\3")
        buf.write("b\3b\5b\u067c\nb\3b\3b\5b\u0680\nb\3b\3b\3b\3b\5b\u0686")
        buf.write("\nb\3b\3b\5b\u068a\nb\3b\3b\5b\u068e\nb\3b\3b\3b\3b\5")
        buf.write("b\u0694\nb\3b\3b\5b\u0698\nb\3b\3b\5b\u069c\nb\3b\3b\3")
        buf.write("b\3b\5b\u06a2\nb\3b\3b\5b\u06a6\nb\3b\3b\5b\u06aa\nb\3")
        buf.write("b\3b\5b\u06ae\nb\3c\3c\5c\u06b2\nc\3c\5c\u06b5\nc\3d\3")
        buf.write("d\3e\3e\5e\u06bb\ne\3e\3e\5e\u06bf\ne\3e\3e\3f\3f\3f\3")
        buf.write("f\3f\3f\3g\3g\5g\u06cb\ng\3g\3g\5g\u06cf\ng\3g\3g\5g\u06d3")
        buf.write("\ng\5g\u06d5\ng\3g\3g\5g\u06d9\ng\3g\3g\5g\u06dd\ng\3")
        buf.write("g\3g\5g\u06e1\ng\7g\u06e3\ng\fg\16g\u06e6\13g\5g\u06e8")
        buf.write("\ng\3g\3g\3h\3h\3h\3i\3i\5i\u06f1\ni\3i\3i\5i\u06f5\n")
        buf.write("i\3i\3i\3i\5i\u06fa\ni\3i\5i\u06fd\ni\5i\u06ff\ni\3i\5")
        buf.write("i\u0702\ni\3i\3i\3j\3j\5j\u0708\nj\3j\3j\5j\u070c\nj\3")
        buf.write("j\3j\5j\u0710\nj\3j\3j\5j\u0714\nj\3j\3j\5j\u0718\nj\7")
        buf.write("j\u071a\nj\fj\16j\u071d\13j\5j\u071f\nj\3j\3j\3k\3k\3")
        buf.write("l\3l\3m\3m\3m\3n\3n\3n\7n\u072d\nn\fn\16n\u0730\13n\3")
        buf.write("o\3o\3p\3p\3p\3p\3p\3p\5p\u073a\np\3q\3q\3r\3r\5r\u0740")
        buf.write("\nr\3s\3s\3t\3t\3u\3u\5u\u0748\nu\3u\3u\5u\u074c\nu\3")
        buf.write("u\3u\5u\u0750\nu\3u\3u\5u\u0754\nu\7u\u0756\nu\fu\16u")
        buf.write("\u0759\13u\5u\u075b\nu\3u\3u\3v\3v\5v\u0761\nv\3v\3v\5")
        buf.write("v\u0765\nv\3v\3v\5v\u0769\nv\3v\3v\5v\u076d\nv\3v\3v\5")
        buf.write("v\u0771\nv\3v\3v\5v\u0775\nv\3v\3v\5v\u0779\nv\3v\3v\5")
        buf.write("v\u077d\nv\7v\u077f\nv\fv\16v\u0782\13v\5v\u0784\nv\3")
        buf.write("v\3v\3w\3w\3x\3x\3x\5x\u078d\nx\3y\3y\5y\u0791\ny\3z\3")
        buf.write("z\3{\3{\3|\3|\3|\2\2}\2\4\6\b\n\f\16\20\22\24\26\30\32")
        buf.write("\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfh")
        buf.write("jlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e")
        buf.write("\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0")
        buf.write("\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2")
        buf.write("\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4")
        buf.write("\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6")
        buf.write("\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\2\r\3")
        buf.write("\289\b\2\62\62__egnn\u0083\u0085\u0088\u0088\7\2\62FI")
        buf.write("^`dhjy\u0082\3\2PS\3\2\27\30\3\2ij\3\2km\3\2uv\4\2\23")
        buf.write("\23\35 \4\2\24\24!$\4\2\30\30%/\2\u08b3\2\u00fb\3\2\2")
        buf.write("\2\4\u00ff\3\2\2\2\6\u011b\3\2\2\2\b\u0190\3\2\2\2\n\u0192")
        buf.write("\3\2\2\2\f\u01ad\3\2\2\2\16\u01b1\3\2\2\2\20\u01ce\3\2")
        buf.write("\2\2\22\u01d0\3\2\2\2\24\u01d6\3\2\2\2\26\u01e6\3\2\2")
        buf.write("\2\30\u01fd\3\2\2\2\32\u01ff\3\2\2\2\34\u020d\3\2\2\2")
        buf.write("\36\u0217\3\2\2\2 \u0237\3\2\2\2\"\u0239\3\2\2\2$\u0251")
        buf.write("\3\2\2\2&\u025c\3\2\2\2(\u0268\3\2\2\2*\u0289\3\2\2\2")
        buf.write(",\u0292\3\2\2\2.\u029c\3\2\2\2\60\u02a3\3\2\2\2\62\u02af")
        buf.write("\3\2\2\2\64\u02c5\3\2\2\2\66\u02cf\3\2\2\28\u02d4\3\2")
        buf.write("\2\2:\u02ef\3\2\2\2<\u02f1\3\2\2\2>\u02f3\3\2\2\2@\u02f6")
        buf.write("\3\2\2\2B\u0304\3\2\2\2D\u0306\3\2\2\2F\u031c\3\2\2\2")
        buf.write("H\u0320\3\2\2\2J\u0345\3\2\2\2L\u0348\3\2\2\2N\u0354\3")
        buf.write("\2\2\2P\u0367\3\2\2\2R\u0369\3\2\2\2T\u0373\3\2\2\2V\u0389")
        buf.write("\3\2\2\2X\u038b\3\2\2\2Z\u0391\3\2\2\2\\\u03a3\3\2\2\2")
        buf.write("^\u03b7\3\2\2\2`\u03b9\3\2\2\2b\u03c4\3\2\2\2d\u03d5\3")
        buf.write("\2\2\2f\u03ee\3\2\2\2h\u03f2\3\2\2\2j\u03fa\3\2\2\2l\u0401")
        buf.write("\3\2\2\2n\u042d\3\2\2\2p\u0436\3\2\2\2r\u0438\3\2\2\2")
        buf.write("t\u0447\3\2\2\2v\u044b\3\2\2\2x\u044f\3\2\2\2z\u0456\3")
        buf.write("\2\2\2|\u045a\3\2\2\2~\u0468\3\2\2\2\u0080\u0478\3\2\2")
        buf.write("\2\u0082\u047a\3\2\2\2\u0084\u0483\3\2\2\2\u0086\u04c9")
        buf.write("\3\2\2\2\u0088\u04cd\3\2\2\2\u008a\u04cf\3\2\2\2\u008c")
        buf.write("\u04e4\3\2\2\2\u008e\u04ee\3\2\2\2\u0090\u04f4\3\2\2\2")
        buf.write("\u0092\u050a\3\2\2\2\u0094\u050c\3\2\2\2\u0096\u050e\3")
        buf.write("\2\2\2\u0098\u0517\3\2\2\2\u009a\u0519\3\2\2\2\u009c\u0523")
        buf.write("\3\2\2\2\u009e\u052d\3\2\2\2\u00a0\u053d\3\2\2\2\u00a2")
        buf.write("\u0542\3\2\2\2\u00a4\u056a\3\2\2\2\u00a6\u0576\3\2\2\2")
        buf.write("\u00a8\u057d\3\2\2\2\u00aa\u058e\3\2\2\2\u00ac\u0590\3")
        buf.write("\2\2\2\u00ae\u05a6\3\2\2\2\u00b0\u05c4\3\2\2\2\u00b2\u05d8")
        buf.write("\3\2\2\2\u00b4\u05da\3\2\2\2\u00b6\u05ea\3\2\2\2\u00b8")
        buf.write("\u0608\3\2\2\2\u00ba\u0620\3\2\2\2\u00bc\u0631\3\2\2\2")
        buf.write("\u00be\u063f\3\2\2\2\u00c0\u0653\3\2\2\2\u00c2\u06ad\3")
        buf.write("\2\2\2\u00c4\u06af\3\2\2\2\u00c6\u06b6\3\2\2\2\u00c8\u06b8")
        buf.write("\3\2\2\2\u00ca\u06c2\3\2\2\2\u00cc\u06c8\3\2\2\2\u00ce")
        buf.write("\u06eb\3\2\2\2\u00d0\u06ee\3\2\2\2\u00d2\u0705\3\2\2\2")
        buf.write("\u00d4\u0722\3\2\2\2\u00d6\u0724\3\2\2\2\u00d8\u0726\3")
        buf.write("\2\2\2\u00da\u072e\3\2\2\2\u00dc\u0731\3\2\2\2\u00de\u0739")
        buf.write("\3\2\2\2\u00e0\u073b\3\2\2\2\u00e2\u073f\3\2\2\2\u00e4")
        buf.write("\u0741\3\2\2\2\u00e6\u0743\3\2\2\2\u00e8\u0745\3\2\2\2")
        buf.write("\u00ea\u075e\3\2\2\2\u00ec\u0787\3\2\2\2\u00ee\u0789\3")
        buf.write("\2\2\2\u00f0\u0790\3\2\2\2\u00f2\u0792\3\2\2\2\u00f4\u0794")
        buf.write("\3\2\2\2\u00f6\u0796\3\2\2\2\u00f8\u00fc\5D#\2\u00f9\u00fc")
        buf.write("\5b\62\2\u00fa\u00fc\5\26\f\2\u00fb\u00f8\3\2\2\2\u00fb")
        buf.write("\u00f9\3\2\2\2\u00fb\u00fa\3\2\2\2\u00fc\3\3\2\2\2\u00fd")
        buf.write("\u00fe\7<\2\2\u00fe\u0100\7\u0089\2\2\u00ff\u00fd\3\2")
        buf.write("\2\2\u00ff\u0100\3\2\2\2\u0100\u0101\3\2\2\2\u0101\u0103")
        buf.write("\7=\2\2\u0102\u0104\7\u0089\2\2\u0103\u0102\3\2\2\2\u0103")
        buf.write("\u0104\3\2\2\2\u0104\u0105\3\2\2\2\u0105\u010d\5|?\2\u0106")
        buf.write("\u0108\7\u0089\2\2\u0107\u0106\3\2\2\2\u0107\u0108\3\2")
        buf.write("\2\2\u0108\u010b\3\2\2\2\u0109\u010c\5\22\n\2\u010a\u010c")
        buf.write("\5\24\13\2\u010b\u0109\3\2\2\2\u010b\u010a\3\2\2\2\u010c")
        buf.write("\u010e\3\2\2\2\u010d\u0107\3\2\2\2\u010d\u010e\3\2\2\2")
        buf.write("\u010e\u0113\3\2\2\2\u010f\u0111\7\u0089\2\2\u0110\u010f")
        buf.write("\3\2\2\2\u0110\u0111\3\2\2\2\u0111\u0112\3\2\2\2\u0112")
        buf.write("\u0114\5z>\2\u0113\u0110\3\2\2\2\u0113\u0114\3\2\2\2\u0114")
        buf.write("\5\3\2\2\2\u0115\u011c\5X-\2\u0116\u011c\5T+\2\u0117\u011c")
        buf.write("\5\16\b\2\u0118\u011c\5Z.\2\u0119\u011c\5\\/\2\u011a\u011c")
        buf.write("\5\n\6\2\u011b\u0115\3\2\2\2\u011b\u0116\3\2\2\2\u011b")
        buf.write("\u0117\3\2\2\2\u011b\u0118\3\2\2\2\u011b\u0119\3\2\2\2")
        buf.write("\u011b\u011a\3\2\2\2\u011c\u0121\3\2\2\2\u011d\u011f\7")
        buf.write("\u0089\2\2\u011e\u011d\3\2\2\2\u011e\u011f\3\2\2\2\u011f")
        buf.write("\u0120\3\2\2\2\u0120\u0122\5\22\n\2\u0121\u011e\3\2\2")
        buf.write("\2\u0121\u0122\3\2\2\2\u0122\7\3\2\2\2\u0123\u0125\5\u00dc")
        buf.write("o\2\u0124\u0126\7\u0089\2\2\u0125\u0124\3\2\2\2\u0125")
        buf.write("\u0126\3\2\2\2\u0126\u0127\3\2\2\2\u0127\u0128\58\35\2")
        buf.write("\u0128\u0191\3\2\2\2\u0129\u012e\5\u00dco\2\u012a\u012c")
        buf.write("\7\u0089\2\2\u012b\u012a\3\2\2\2\u012b\u012c\3\2\2\2\u012c")
        buf.write("\u012d\3\2\2\2\u012d\u012f\58\35\2\u012e\u012b\3\2\2\2")
        buf.write("\u012e\u012f\3\2\2\2\u012f\u0130\3\2\2\2\u0130\u0131\7")
        buf.write("\3\2\2\u0131\u0133\5\u00ecw\2\u0132\u0134\7\u0089\2\2")
        buf.write("\u0133\u0132\3\2\2\2\u0133\u0134\3\2\2\2\u0134\u0135\3")
        buf.write("\2\2\2\u0135\u0136\58\35\2\u0136\u0191\3\2\2\2\u0137\u013c")
        buf.write("\5\u00dco\2\u0138\u013a\7\u0089\2\2\u0139\u0138\3\2\2")
        buf.write("\2\u0139\u013a\3\2\2\2\u013a\u013b\3\2\2\2\u013b\u013d")
        buf.write("\58\35\2\u013c\u0139\3\2\2\2\u013c\u013d\3\2\2\2\u013d")
        buf.write("\u013e\3\2\2\2\u013e\u013f\7\3\2\2\u013f\u0144\5\u00ec")
        buf.write("w\2\u0140\u0142\7\u0089\2\2\u0141\u0140\3\2\2\2\u0141")
        buf.write("\u0142\3\2\2\2\u0142\u0143\3\2\2\2\u0143\u0145\58\35\2")
        buf.write("\u0144\u0141\3\2\2\2\u0144\u0145\3\2\2\2\u0145\u0147\3")
        buf.write("\2\2\2\u0146\u0148\7\u0089\2\2\u0147\u0146\3\2\2\2\u0147")
        buf.write("\u0148\3\2\2\2\u0148\u0149\3\2\2\2\u0149\u014b\7\61\2")
        buf.write("\2\u014a\u014c\7\u0089\2\2\u014b\u014a\3\2\2\2\u014b\u014c")
        buf.write("\3\2\2\2\u014c\u014d\3\2\2\2\u014d\u014e\58\35\2\u014e")
        buf.write("\u0191\3\2\2\2\u014f\u0154\5\u00dco\2\u0150\u0152\7\u0089")
        buf.write("\2\2\u0151\u0150\3\2\2\2\u0151\u0152\3\2\2\2\u0152\u0153")
        buf.write("\3\2\2\2\u0153\u0155\58\35\2\u0154\u0151\3\2\2\2\u0154")
        buf.write("\u0155\3\2\2\2\u0155\u0156\3\2\2\2\u0156\u0157\7\3\2\2")
        buf.write("\u0157\u015c\5\u00ecw\2\u0158\u015a\7\u0089\2\2\u0159")
        buf.write("\u0158\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u015b\3\2\2\2")
        buf.write("\u015b\u015d\58\35\2\u015c\u0159\3\2\2\2\u015c\u015d\3")
        buf.write("\2\2\2\u015d\u015f\3\2\2\2\u015e\u0160\7\u0089\2\2\u015f")
        buf.write("\u015e\3\2\2\2\u015f\u0160\3\2\2\2\u0160\u0161\3\2\2\2")
        buf.write("\u0161\u0163\7\4\2\2\u0162\u0164\7\u0089\2\2\u0163\u0162")
        buf.write("\3\2\2\2\u0163\u0164\3\2\2\2\u0164\u0165\3\2\2\2\u0165")
        buf.write("\u016a\5\u0098M\2\u0166\u0168\7\u0089\2\2\u0167\u0166")
        buf.write("\3\2\2\2\u0167\u0168\3\2\2\2\u0168\u0169\3\2\2\2\u0169")
        buf.write("\u016b\58\35\2\u016a\u0167\3\2\2\2\u016a\u016b\3\2\2\2")
        buf.write("\u016b\u0191\3\2\2\2\u016c\u016e\5\u0096L\2\u016d\u016f")
        buf.write("\7\u0089\2\2\u016e\u016d\3\2\2\2\u016e\u016f\3\2\2\2\u016f")
        buf.write("\u0170\3\2\2\2\u0170\u0172\7\4\2\2\u0171\u0173\7\u0089")
        buf.write("\2\2\u0172\u0171\3\2\2\2\u0172\u0173\3\2\2\2\u0173\u0174")
        buf.write("\3\2\2\2\u0174\u0175\5\u0098M\2\u0175\u0191\3\2\2\2\u0176")
        buf.write("\u0178\5\u00dco\2\u0177\u0179\7\u0089\2\2\u0178\u0177")
        buf.write("\3\2\2\2\u0178\u0179\3\2\2\2\u0179\u017a\3\2\2\2\u017a")
        buf.write("\u017c\7\4\2\2\u017b\u017d\7\u0089\2\2\u017c\u017b\3\2")
        buf.write("\2\2\u017c\u017d\3\2\2\2\u017d\u017e\3\2\2\2\u017e\u017f")
        buf.write("\5\u0098M\2\u017f\u0191\3\2\2\2\u0180\u0182\5\u00dco\2")
        buf.write("\u0181\u0183\7\u0089\2\2\u0182\u0181\3\2\2\2\u0182\u0183")
        buf.write("\3\2\2\2\u0183\u0184\3\2\2\2\u0184\u0186\7\5\2\2\u0185")
        buf.write("\u0187\7\u0089\2\2\u0186\u0185\3\2\2\2\u0186\u0187\3\2")
        buf.write("\2\2\u0187\u0188\3\2\2\2\u0188\u0189\5\u0098M\2\u0189")
        buf.write("\u0191\3\2\2\2\u018a\u018c\5\u00dco\2\u018b\u018d\7\u0089")
        buf.write("\2\2\u018c\u018b\3\2\2\2\u018c\u018d\3\2\2\2\u018d\u018e")
        buf.write("\3\2\2\2\u018e\u018f\5\u008cG\2\u018f\u0191\3\2\2\2\u0190")
        buf.write("\u0123\3\2\2\2\u0190\u0129\3\2\2\2\u0190\u0137\3\2\2\2")
        buf.write("\u0190\u014f\3\2\2\2\u0190\u016c\3\2\2\2\u0190\u0176\3")
        buf.write("\2\2\2\u0190\u0180\3\2\2\2\u0190\u018a\3\2\2\2\u0191\t")
        buf.write("\3\2\2\2\u0192\u0194\7\67\2\2\u0193\u0195\7\u0089\2\2")
        buf.write("\u0194\u0193\3\2\2\2\u0194\u0195\3\2\2\2\u0195\u0196\3")
        buf.write("\2\2\2\u0196\u01a1\5\f\7\2\u0197\u0199\7\u0089\2\2\u0198")
        buf.write("\u0197\3\2\2\2\u0198\u0199\3\2\2\2\u0199\u019a\3\2\2\2")
        buf.write("\u019a\u019c\7\6\2\2\u019b\u019d\7\u0089\2\2\u019c\u019b")
        buf.write("\3\2\2\2\u019c\u019d\3\2\2\2\u019d\u019e\3\2\2\2\u019e")
        buf.write("\u01a0\5\f\7\2\u019f\u0198\3\2\2\2\u01a0\u01a3\3\2\2\2")
        buf.write("\u01a1\u019f\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2\13\3\2")
        buf.write("\2\2\u01a3\u01a1\3\2\2\2\u01a4\u01a5\5\u0098M\2\u01a5")
        buf.write("\u01a6\7\3\2\2\u01a6\u01a8\5\u00ecw\2\u01a7\u01a9\7\u0089")
        buf.write("\2\2\u01a8\u01a7\3\2\2\2\u01a8\u01a9\3\2\2\2\u01a9\u01aa")
        buf.write("\3\2\2\2\u01aa\u01ab\7\61\2\2\u01ab\u01ae\3\2\2\2\u01ac")
        buf.write("\u01ae\5\u0098M\2\u01ad\u01a4\3\2\2\2\u01ad\u01ac\3\2")
        buf.write("\2\2\u01ae\r\3\2\2\2\u01af\u01b0\7D\2\2\u01b0\u01b2\7")
        buf.write("\u0089\2\2\u01b1\u01af\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2")
        buf.write("\u01b3\3\2\2\2\u01b3\u01b5\7E\2\2\u01b4\u01b6\7\u0089")
        buf.write("\2\2\u01b5\u01b4\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01b7")
        buf.write("\3\2\2\2\u01b7\u01c2\5\20\t\2\u01b8\u01ba\7\u0089\2\2")
        buf.write("\u01b9\u01b8\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba\u01bb\3")
        buf.write("\2\2\2\u01bb\u01bd\7\6\2\2\u01bc\u01be\7\u0089\2\2\u01bd")
        buf.write("\u01bc\3\2\2\2\u01bd\u01be\3\2\2\2\u01be\u01bf\3\2\2\2")
        buf.write("\u01bf\u01c1\5\20\t\2\u01c0\u01b9\3\2\2\2\u01c1\u01c4")
        buf.write("\3\2\2\2\u01c2\u01c0\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3")
        buf.write("\17\3\2\2\2\u01c4\u01c2\3\2\2\2\u01c5\u01c6\5\u0098M\2")
        buf.write("\u01c6\u01c7\7\3\2\2\u01c7\u01c9\5\u00ecw\2\u01c8\u01ca")
        buf.write("\7\u0089\2\2\u01c9\u01c8\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca")
        buf.write("\u01cb\3\2\2\2\u01cb\u01cc\7\61\2\2\u01cc\u01cf\3\2\2")
        buf.write("\2\u01cd\u01cf\5\u0098M\2\u01ce\u01c5\3\2\2\2\u01ce\u01cd")
        buf.write("\3\2\2\2\u01cf\21\3\2\2\2\u01d0\u01d2\7\63\2\2\u01d1\u01d3")
        buf.write("\7\u0089\2\2\u01d2\u01d1\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3")
        buf.write("\u01d4\3\2\2\2\u01d4\u01d5\5\u0098M\2\u01d5\23\3\2\2\2")
        buf.write("\u01d6\u01d8\7\65\2\2\u01d7\u01d9\7\u0089\2\2\u01d8\u01d7")
        buf.write("\3\2\2\2\u01d8\u01d9\3\2\2\2\u01d9\u01da\3\2\2\2\u01da")
        buf.write("\u01db\5\u0098M\2\u01db\25\3\2\2\2\u01dc\u01de\7\64\2")
        buf.write("\2\u01dd\u01df\7\u0089\2\2\u01de\u01dd\3\2\2\2\u01de\u01df")
        buf.write("\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0\u01e7\5\u0098M\2\u01e1")
        buf.write("\u01e3\7\66\2\2\u01e2\u01e4\7\u0089\2\2\u01e3\u01e2\3")
        buf.write("\2\2\2\u01e3\u01e4\3\2\2\2\u01e4\u01e5\3\2\2\2\u01e5\u01e7")
        buf.write("\5\u0098M\2\u01e6\u01dc\3\2\2\2\u01e6\u01e1\3\2\2\2\u01e7")
        buf.write("\27\3\2\2\2\u01e8\u01ea\5\u00dco\2\u01e9\u01eb\7\u0089")
        buf.write("\2\2\u01ea\u01e9\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb\u01ec")
        buf.write("\3\2\2\2\u01ec\u01ee\7\4\2\2\u01ed\u01ef\7\u0089\2\2\u01ee")
        buf.write("\u01ed\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\u01f0\3\2\2\2")
        buf.write("\u01f0\u01f1\5\32\16\2\u01f1\u01fe\3\2\2\2\u01f2\u01f4")
        buf.write("\5\u00dco\2\u01f3\u01f5\7\u0089\2\2\u01f4\u01f3\3\2\2")
        buf.write("\2\u01f4\u01f5\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6\u01f8")
        buf.write("\7\4\2\2\u01f7\u01f9\7\u0089\2\2\u01f8\u01f7\3\2\2\2\u01f8")
        buf.write("\u01f9\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01fb\5~@\2\u01fb")
        buf.write("\u01fe\3\2\2\2\u01fc\u01fe\5~@\2\u01fd\u01e8\3\2\2\2\u01fd")
        buf.write("\u01f2\3\2\2\2\u01fd\u01fc\3\2\2\2\u01fe\31\3\2\2\2\u01ff")
        buf.write("\u0201\5\u00ceh\2\u0200\u0202\7\u0089\2\2\u0201\u0200")
        buf.write("\3\2\2\2\u0201\u0202\3\2\2\2\u0202\u0203\3\2\2\2\u0203")
        buf.write("\u0205\7\7\2\2\u0204\u0206\7\u0089\2\2\u0205\u0204\3\2")
        buf.write("\2\2\u0205\u0206\3\2\2\2\u0206\u0207\3\2\2\2\u0207\u0209")
        buf.write("\5\34\17\2\u0208\u020a\7\u0089\2\2\u0209\u0208\3\2\2\2")
        buf.write("\u0209\u020a\3\2\2\2\u020a\u020b\3\2\2\2\u020b\u020c\7")
        buf.write("\b\2\2\u020c\33\3\2\2\2\u020d\u020f\5\36\20\2\u020e\u0210")
        buf.write("\7\u0089\2\2\u020f\u020e\3\2\2\2\u020f\u0210\3\2\2\2\u0210")
        buf.write("\u0211\3\2\2\2\u0211\u0213\5\u0086D\2\u0212\u0214\7\u0089")
        buf.write("\2\2\u0213\u0212\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u0215")
        buf.write("\3\2\2\2\u0215\u0216\5\36\20\2\u0216\35\3\2\2\2\u0217")
        buf.write("\u0219\7\7\2\2\u0218\u021a\7\u0089\2\2\u0219\u0218\3\2")
        buf.write("\2\2\u0219\u021a\3\2\2\2\u021a\u021f\3\2\2\2\u021b\u021d")
        buf.write("\5\u00dco\2\u021c\u021e\7\u0089\2\2\u021d\u021c\3\2\2")
        buf.write("\2\u021d\u021e\3\2\2\2\u021e\u0220\3\2\2\2\u021f\u021b")
        buf.write("\3\2\2\2\u021f\u0220\3\2\2\2\u0220\u0225\3\2\2\2\u0221")
        buf.write("\u0223\5\u008cG\2\u0222\u0224\7\u0089\2\2\u0223\u0222")
        buf.write("\3\2\2\2\u0223\u0224\3\2\2\2\u0224\u0226\3\2\2\2\u0225")
        buf.write("\u0221\3\2\2\2\u0225\u0226\3\2\2\2\u0226\u022b\3\2\2\2")
        buf.write("\u0227\u0229\58\35\2\u0228\u022a\7\u0089\2\2\u0229\u0228")
        buf.write("\3\2\2\2\u0229\u022a\3\2\2\2\u022a\u022c\3\2\2\2\u022b")
        buf.write("\u0227\3\2\2\2\u022b\u022c\3\2\2\2\u022c\u0231\3\2\2\2")
        buf.write("\u022d\u022f\5 \21\2\u022e\u0230\7\u0089\2\2\u022f\u022e")
        buf.write("\3\2\2\2\u022f\u0230\3\2\2\2\u0230\u0232\3\2\2\2\u0231")
        buf.write("\u022d\3\2\2\2\u0231\u0232\3\2\2\2\u0232\u0233\3\2\2\2")
        buf.write("\u0233\u0234\7\b\2\2\u0234\37\3\2\2\2\u0235\u0238\5\"")
        buf.write("\22\2\u0236\u0238\5\u00eex\2\u0237\u0235\3\2\2\2\u0237")
        buf.write("\u0236\3\2\2\2\u0238!\3\2\2\2\u0239\u023b\7\t\2\2\u023a")
        buf.write("\u023c\7\u0089\2\2\u023b\u023a\3\2\2\2\u023b\u023c\3\2")
        buf.write("\2\2\u023c\u024d\3\2\2\2\u023d\u023e\5$\23\2\u023e\u023f")
        buf.write("\7\n\2\2\u023f\u024a\5&\24\2\u0240\u0242\7\6\2\2\u0241")
        buf.write("\u0243\7\u0089\2\2\u0242\u0241\3\2\2\2\u0242\u0243\3\2")
        buf.write("\2\2\u0243\u0244\3\2\2\2\u0244\u0245\5$\23\2\u0245\u0246")
        buf.write("\7\n\2\2\u0246\u0247\5&\24\2\u0247\u0249\3\2\2\2\u0248")
        buf.write("\u0240\3\2\2\2\u0249\u024c\3\2\2\2\u024a\u0248\3\2\2\2")
        buf.write("\u024a\u024b\3\2\2\2\u024b\u024e\3\2\2\2\u024c\u024a\3")
        buf.write("\2\2\2\u024d\u023d\3\2\2\2\u024d\u024e\3\2\2\2\u024e\u024f")
        buf.write("\3\2\2\2\u024f\u0250\7\13\2\2\u0250#\3\2\2\2\u0251\u0253")
        buf.write("\5\u00ecw\2\u0252\u0254\7\u0089\2\2\u0253\u0252\3\2\2")
        buf.write("\2\u0253\u0254\3\2\2\2\u0254\u0259\3\2\2\2\u0255\u0257")
        buf.write("\58\35\2\u0256\u0258\7\u0089\2\2\u0257\u0256\3\2\2\2\u0257")
        buf.write("\u0258\3\2\2\2\u0258\u025a\3\2\2\2\u0259\u0255\3\2\2\2")
        buf.write("\u0259\u025a\3\2\2\2\u025a%\3\2\2\2\u025b\u025d\7\u0089")
        buf.write("\2\2\u025c\u025b\3\2\2\2\u025c\u025d\3\2\2\2\u025d\u025e")
        buf.write("\3\2\2\2\u025e\u0260\5\u0098M\2\u025f\u0261\7\u0089\2")
        buf.write("\2\u0260\u025f\3\2\2\2\u0260\u0261\3\2\2\2\u0261\u0266")
        buf.write("\3\2\2\2\u0262\u0264\58\35\2\u0263\u0265\7\u0089\2\2\u0264")
        buf.write("\u0263\3\2\2\2\u0264\u0265\3\2\2\2\u0265\u0267\3\2\2\2")
        buf.write("\u0266\u0262\3\2\2\2\u0266\u0267\3\2\2\2\u0267\'\3\2\2")
        buf.write("\2\u0268\u026a\7\f\2\2\u0269\u026b\7\u0089\2\2\u026a\u0269")
        buf.write("\3\2\2\2\u026a\u026b\3\2\2\2\u026b\u0270\3\2\2\2\u026c")
        buf.write("\u026e\5\u00dco\2\u026d\u026f\7\u0089\2\2\u026e\u026d")
        buf.write("\3\2\2\2\u026e\u026f\3\2\2\2\u026f\u0271\3\2\2\2\u0270")
        buf.write("\u026c\3\2\2\2\u0270\u0271\3\2\2\2\u0271\u0276\3\2\2\2")
        buf.write("\u0272\u0274\5\u008aF\2\u0273\u0275\7\u0089\2\2\u0274")
        buf.write("\u0273\3\2\2\2\u0274\u0275\3\2\2\2\u0275\u0277\3\2\2\2")
        buf.write("\u0276\u0272\3\2\2\2\u0276\u0277\3\2\2\2\u0277\u0279\3")
        buf.write("\2\2\2\u0278\u027a\5\u0090I\2\u0279\u0278\3\2\2\2\u0279")
        buf.write("\u027a\3\2\2\2\u027a\u027f\3\2\2\2\u027b\u027d\58\35\2")
        buf.write("\u027c\u027e\7\u0089\2\2\u027d\u027c\3\2\2\2\u027d\u027e")
        buf.write("\3\2\2\2\u027e\u0280\3\2\2\2\u027f\u027b\3\2\2\2\u027f")
        buf.write("\u0280\3\2\2\2\u0280\u0285\3\2\2\2\u0281\u0283\5\u0088")
        buf.write("E\2\u0282\u0284\7\u0089\2\2\u0283\u0282\3\2\2\2\u0283")
        buf.write("\u0284\3\2\2\2\u0284\u0286\3\2\2\2\u0285\u0281\3\2\2\2")
        buf.write("\u0285\u0286\3\2\2\2\u0286\u0287\3\2\2\2\u0287\u0288\7")
        buf.write("\r\2\2\u0288)\3\2\2\2\u0289\u028e\5\u00acW\2\u028a\u028f")
        buf.write("\5\66\34\2\u028b\u028f\5\u00a6T\2\u028c\u028f\5\u00a8")
        buf.write("U\2\u028d\u028f\5\u00aaV\2\u028e\u028a\3\2\2\2\u028e\u028b")
        buf.write("\3\2\2\2\u028e\u028c\3\2\2\2\u028e\u028d\3\2\2\2\u028e")
        buf.write("\u028f\3\2\2\2\u028f+\3\2\2\2\u0290\u0293\5\u00b4[\2\u0291")
        buf.write("\u0293\5\62\32\2\u0292\u0290\3\2\2\2\u0292\u0291\3\2\2")
        buf.write("\2\u0293\u0298\3\2\2\2\u0294\u0297\5.\30\2\u0295\u0297")
        buf.write("\5\60\31\2\u0296\u0294\3\2\2\2\u0296\u0295\3\2\2\2\u0297")
        buf.write("\u029a\3\2\2\2\u0298\u0296\3\2\2\2\u0298\u0299\3\2\2\2")
        buf.write("\u0299-\3\2\2\2\u029a\u0298\3\2\2\2\u029b\u029d\7\u0089")
        buf.write("\2\2\u029c\u029b\3\2\2\2\u029c\u029d\3\2\2\2\u029d\u029e")
        buf.write("\3\2\2\2\u029e\u029f\7\f\2\2\u029f\u02a0\5\u0098M\2\u02a0")
        buf.write("\u02a1\7\r\2\2\u02a1/\3\2\2\2\u02a2\u02a4\7\u0089\2\2")
        buf.write("\u02a3\u02a2\3\2\2\2\u02a3\u02a4\3\2\2\2\u02a4\u02a5\3")
        buf.write("\2\2\2\u02a5\u02a7\7\f\2\2\u02a6\u02a8\5\u0098M\2\u02a7")
        buf.write("\u02a6\3\2\2\2\u02a7\u02a8\3\2\2\2\u02a8\u02a9\3\2\2\2")
        buf.write("\u02a9\u02ab\7\16\2\2\u02aa\u02ac\5\u0098M\2\u02ab\u02aa")
        buf.write("\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac\u02ad\3\2\2\2\u02ad")
        buf.write("\u02ae\7\r\2\2\u02ae\61\3\2\2\2\u02af\u02be\5\u00b8]\2")
        buf.write("\u02b0\u02b2\7\u0089\2\2\u02b1\u02b0\3\2\2\2\u02b1\u02b2")
        buf.write("\3\2\2\2\u02b2\u02b3\3\2\2\2\u02b3\u02b5\5\u00b6\\\2\u02b4")
        buf.write("\u02b1\3\2\2\2\u02b5\u02b6\3\2\2\2\u02b6\u02b4\3\2\2\2")
        buf.write("\u02b6\u02b7\3\2\2\2\u02b7\u02bc\3\2\2\2\u02b8\u02ba\7")
        buf.write("\u0089\2\2\u02b9\u02b8\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba")
        buf.write("\u02bb\3\2\2\2\u02bb\u02bd\7\61\2\2\u02bc\u02b9\3\2\2")
        buf.write("\2\u02bc\u02bd\3\2\2\2\u02bd\u02bf\3\2\2\2\u02be\u02b4")
        buf.write("\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02c1\3\2\2\2\u02c0")
        buf.write("\u02c2\7\u0089\2\2\u02c1\u02c0\3\2\2\2\u02c1\u02c2\3\2")
        buf.write("\2\2\u02c2\u02c3\3\2\2\2\u02c3\u02c4\5\64\33\2\u02c4\63")
        buf.write("\3\2\2\2\u02c5\u02cc\7\60\2\2\u02c6\u02c8\7\u0089\2\2")
        buf.write("\u02c7\u02c6\3\2\2\2\u02c7\u02c8\3\2\2\2\u02c8\u02c9\3")
        buf.write("\2\2\2\u02c9\u02cb\5\u00b6\\\2\u02ca\u02c7\3\2\2\2\u02cb")
        buf.write("\u02ce\3\2\2\2\u02cc\u02ca\3\2\2\2\u02cc\u02cd\3\2\2\2")
        buf.write("\u02cd\65\3\2\2\2\u02ce\u02cc\3\2\2\2\u02cf\u02d0\7\u0089")
        buf.write("\2\2\u02d0\u02d1\t\2\2\2\u02d1\u02d2\7\u0089\2\2\u02d2")
        buf.write("\u02d3\5\u00acW\2\u02d3\67\3\2\2\2\u02d4\u02d6\7\60\2")
        buf.write("\2\u02d5\u02d7\7\u0089\2\2\u02d6\u02d5\3\2\2\2\u02d6\u02d7")
        buf.write("\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8\u02da\7\7\2\2\u02d9")
        buf.write("\u02db\7\u0089\2\2\u02da\u02d9\3\2\2\2\u02da\u02db\3\2")
        buf.write("\2\2\u02db\u02dc\3\2\2\2\u02dc\u02de\5:\36\2\u02dd\u02df")
        buf.write("\7\u0089\2\2\u02de\u02dd\3\2\2\2\u02de\u02df\3\2\2\2\u02df")
        buf.write("\u02e0\3\2\2\2\u02e0\u02e2\7\6\2\2\u02e1\u02e3\7\u0089")
        buf.write("\2\2\u02e2\u02e1\3\2\2\2\u02e2\u02e3\3\2\2\2\u02e3\u02e6")
        buf.write("\3\2\2\2\u02e4\u02e7\5:\36\2\u02e5\u02e7\7\62\2\2\u02e6")
        buf.write("\u02e4\3\2\2\2\u02e6\u02e5\3\2\2\2\u02e7\u02e9\3\2\2\2")
        buf.write("\u02e8\u02ea\7\u0089\2\2\u02e9\u02e8\3\2\2\2\u02e9\u02ea")
        buf.write("\3\2\2\2\u02ea\u02eb\3\2\2\2\u02eb\u02ec\7\b\2\2\u02ec")
        buf.write("9\3\2\2\2\u02ed\u02f0\7w\2\2\u02ee\u02f0\5\u00eav\2\u02ef")
        buf.write("\u02ed\3\2\2\2\u02ef\u02ee\3\2\2\2\u02f0;\3\2\2\2\u02f1")
        buf.write("\u02f2\t\3\2\2\u02f2=\3\2\2\2\u02f3\u02f4\t\4\2\2\u02f4")
        buf.write("?\3\2\2\2\u02f5\u02f7\7\u0089\2\2\u02f6\u02f5\3\2\2\2")
        buf.write("\u02f6\u02f7\3\2\2\2\u02f7\u02f8\3\2\2\2\u02f8\u02fd\5")
        buf.write("B\"\2\u02f9\u02fb\7\u0089\2\2\u02fa\u02f9\3\2\2\2\u02fa")
        buf.write("\u02fb\3\2\2\2\u02fb\u02fc\3\2\2\2\u02fc\u02fe\7\17\2")
        buf.write("\2\u02fd\u02fa\3\2\2\2\u02fd\u02fe\3\2\2\2\u02fe\u0300")
        buf.write("\3\2\2\2\u02ff\u0301\7\u0089\2\2\u0300\u02ff\3\2\2\2\u0300")
        buf.write("\u0301\3\2\2\2\u0301\u0302\3\2\2\2\u0302\u0303\7\2\2\3")
        buf.write("\u0303A\3\2\2\2\u0304\u0305\5\2\2\2\u0305C\3\2\2\2\u0306")
        buf.write("\u030d\5H%\2\u0307\u0309\7\u0089\2\2\u0308\u0307\3\2\2")
        buf.write("\2\u0308\u0309\3\2\2\2\u0309\u030a\3\2\2\2\u030a\u030c")
        buf.write("\5F$\2\u030b\u0308\3\2\2\2\u030c\u030f\3\2\2\2\u030d\u030b")
        buf.write("\3\2\2\2\u030d\u030e\3\2\2\2\u030eE\3\2\2\2\u030f\u030d")
        buf.write("\3\2\2\2\u0310\u0311\7:\2\2\u0311\u0312\7\u0089\2\2\u0312")
        buf.write("\u0314\7;\2\2\u0313\u0315\7\u0089\2\2\u0314\u0313\3\2")
        buf.write("\2\2\u0314\u0315\3\2\2\2\u0315\u0316\3\2\2\2\u0316\u031d")
        buf.write("\5H%\2\u0317\u0319\7:\2\2\u0318\u031a\7\u0089\2\2\u0319")
        buf.write("\u0318\3\2\2\2\u0319\u031a\3\2\2\2\u031a\u031b\3\2\2\2")
        buf.write("\u031b\u031d\5H%\2\u031c\u0310\3\2\2\2\u031c\u0317\3\2")
        buf.write("\2\2\u031dG\3\2\2\2\u031e\u0321\5J&\2\u031f\u0321\5L\'")
        buf.write("\2\u0320\u031e\3\2\2\2\u0320\u031f\3\2\2\2\u0321I\3\2")
        buf.write("\2\2\u0322\u0324\5P)\2\u0323\u0325\7\u0089\2\2\u0324\u0323")
        buf.write("\3\2\2\2\u0324\u0325\3\2\2\2\u0325\u0327\3\2\2\2\u0326")
        buf.write("\u0322\3\2\2\2\u0327\u032a\3\2\2\2\u0328\u0326\3\2\2\2")
        buf.write("\u0328\u0329\3\2\2\2\u0329\u032b\3\2\2\2\u032a\u0328\3")
        buf.write("\2\2\2\u032b\u0346\5j\66\2\u032c\u032e\5P)\2\u032d\u032f")
        buf.write("\7\u0089\2\2\u032e\u032d\3\2\2\2\u032e\u032f\3\2\2\2\u032f")
        buf.write("\u0331\3\2\2\2\u0330\u032c\3\2\2\2\u0331\u0334\3\2\2\2")
        buf.write("\u0332\u0330\3\2\2\2\u0332\u0333\3\2\2\2\u0333\u0335\3")
        buf.write("\2\2\2\u0334\u0332\3\2\2\2\u0335\u033c\5\6\4\2\u0336\u0338")
        buf.write("\7\u0089\2\2\u0337\u0336\3\2\2\2\u0337\u0338\3\2\2\2\u0338")
        buf.write("\u0339\3\2\2\2\u0339\u033b\5\6\4\2\u033a\u0337\3\2\2\2")
        buf.write("\u033b\u033e\3\2\2\2\u033c\u033a\3\2\2\2\u033c\u033d\3")
        buf.write("\2\2\2\u033d\u0343\3\2\2\2\u033e\u033c\3\2\2\2\u033f\u0341")
        buf.write("\7\u0089\2\2\u0340\u033f\3\2\2\2\u0340\u0341\3\2\2\2\u0341")
        buf.write("\u0342\3\2\2\2\u0342\u0344\5j\66\2\u0343\u0340\3\2\2\2")
        buf.write("\u0343\u0344\3\2\2\2\u0344\u0346\3\2\2\2\u0345\u0328\3")
        buf.write("\2\2\2\u0345\u0332\3\2\2\2\u0346K\3\2\2\2\u0347\u0349")
        buf.write("\5N(\2\u0348\u0347\3\2\2\2\u0349\u034a\3\2\2\2\u034a\u0348")
        buf.write("\3\2\2\2\u034a\u034b\3\2\2\2\u034b\u034c\3\2\2\2\u034c")
        buf.write("\u034d\5J&\2\u034dM\3\2\2\2\u034e\u0350\5P)\2\u034f\u0351")
        buf.write("\7\u0089\2\2\u0350\u034f\3\2\2\2\u0350\u0351\3\2\2\2\u0351")
        buf.write("\u0353\3\2\2\2\u0352\u034e\3\2\2\2\u0353\u0356\3\2\2\2")
        buf.write("\u0354\u0352\3\2\2\2\u0354\u0355\3\2\2\2\u0355\u035d\3")
        buf.write("\2\2\2\u0356\u0354\3\2\2\2\u0357\u0359\5\6\4\2\u0358\u035a")
        buf.write("\7\u0089\2\2\u0359\u0358\3\2\2\2\u0359\u035a\3\2\2\2\u035a")
        buf.write("\u035c\3\2\2\2\u035b\u0357\3\2\2\2\u035c\u035f\3\2\2\2")
        buf.write("\u035d\u035b\3\2\2\2\u035d\u035e\3\2\2\2\u035e\u0360\3")
        buf.write("\2\2\2\u035f\u035d\3\2\2\2\u0360\u0362\5h\65\2\u0361\u0363")
        buf.write("\7\u0089\2\2\u0362\u0361\3\2\2\2\u0362\u0363\3\2\2\2\u0363")
        buf.write("O\3\2\2\2\u0364\u0368\5\4\3\2\u0365\u0368\5R*\2\u0366")
        buf.write("\u0368\5`\61\2\u0367\u0364\3\2\2\2\u0367\u0365\3\2\2\2")
        buf.write("\u0367\u0366\3\2\2\2\u0368Q\3\2\2\2\u0369\u036b\7>\2\2")
        buf.write("\u036a\u036c\7\u0089\2\2\u036b\u036a\3\2\2\2\u036b\u036c")
        buf.write("\3\2\2\2\u036c\u036d\3\2\2\2\u036d\u036e\5\u0098M\2\u036e")
        buf.write("\u036f\7\u0089\2\2\u036f\u0370\7?\2\2\u0370\u0371\7\u0089")
        buf.write("\2\2\u0371\u0372\5\u00dco\2\u0372S\3\2\2\2\u0373\u0375")
        buf.write("\7@\2\2\u0374\u0376\7\u0089\2\2\u0375\u0374\3\2\2\2\u0375")
        buf.write("\u0376\3\2\2\2\u0376\u0377\3\2\2\2\u0377\u037c\5\30\r")
        buf.write("\2\u0378\u0379\7\u0089\2\2\u0379\u037b\5V,\2\u037a\u0378")
        buf.write("\3\2\2\2\u037b\u037e\3\2\2\2\u037c\u037a\3\2\2\2\u037c")
        buf.write("\u037d\3\2\2\2\u037dU\3\2\2\2\u037e\u037c\3\2\2\2\u037f")
        buf.write("\u0380\7A\2\2\u0380\u0381\7\u0089\2\2\u0381\u0382\7=\2")
        buf.write("\2\u0382\u0383\7\u0089\2\2\u0383\u038a\5Z.\2\u0384\u0385")
        buf.write("\7A\2\2\u0385\u0386\7\u0089\2\2\u0386\u0387\7B\2\2\u0387")
        buf.write("\u0388\7\u0089\2\2\u0388\u038a\5Z.\2\u0389\u037f\3\2\2")
        buf.write("\2\u0389\u0384\3\2\2\2\u038aW\3\2\2\2\u038b\u038d\7B\2")
        buf.write("\2\u038c\u038e\7\u0089\2\2\u038d\u038c\3\2\2\2\u038d\u038e")
        buf.write("\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u0390\5|?\2\u0390Y")
        buf.write("\3\2\2\2\u0391\u0393\7C\2\2\u0392\u0394\7\u0089\2\2\u0393")
        buf.write("\u0392\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u0395\3\2\2\2")
        buf.write("\u0395\u03a0\5\b\5\2\u0396\u0398\7\u0089\2\2\u0397\u0396")
        buf.write("\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u0399\3\2\2\2\u0399")
        buf.write("\u039b\7\6\2\2\u039a\u039c\7\u0089\2\2\u039b\u039a\3\2")
        buf.write("\2\2\u039b\u039c\3\2\2\2\u039c\u039d\3\2\2\2\u039d\u039f")
        buf.write("\5\b\5\2\u039e\u0397\3\2\2\2\u039f\u03a2\3\2\2\2\u03a0")
        buf.write("\u039e\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1[\3\2\2\2\u03a2")
        buf.write("\u03a0\3\2\2\2\u03a3\u03a4\7F\2\2\u03a4\u03a5\7\u0089")
        buf.write("\2\2\u03a5\u03b0\5^\60\2\u03a6\u03a8\7\u0089\2\2\u03a7")
        buf.write("\u03a6\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03a9\3\2\2\2")
        buf.write("\u03a9\u03ab\7\6\2\2\u03aa\u03ac\7\u0089\2\2\u03ab\u03aa")
        buf.write("\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac\u03ad\3\2\2\2\u03ad")
        buf.write("\u03af\5^\60\2\u03ae\u03a7\3\2\2\2\u03af\u03b2\3\2\2\2")
        buf.write("\u03b0\u03ae\3\2\2\2\u03b0\u03b1\3\2\2\2\u03b1]\3\2\2")
        buf.write("\2\u03b2\u03b0\3\2\2\2\u03b3\u03b4\5\u00dco\2\u03b4\u03b5")
        buf.write("\5\u008cG\2\u03b5\u03b8\3\2\2\2\u03b6\u03b8\5\u0096L\2")
        buf.write("\u03b7\u03b3\3\2\2\2\u03b7\u03b6\3\2\2\2\u03b8_\3\2\2")
        buf.write("\2\u03b9\u03ba\7G\2\2\u03ba\u03bb\7\u0089\2\2\u03bb\u03c2")
        buf.write("\5\u00d2j\2\u03bc\u03be\7\u0089\2\2\u03bd\u03bc\3\2\2")
        buf.write("\2\u03bd\u03be\3\2\2\2\u03be\u03bf\3\2\2\2\u03bf\u03c0")
        buf.write("\7H\2\2\u03c0\u03c1\7\u0089\2\2\u03c1\u03c3\5d\63\2\u03c2")
        buf.write("\u03bd\3\2\2\2\u03c2\u03c3\3\2\2\2\u03c3a\3\2\2\2\u03c4")
        buf.write("\u03c5\7G\2\2\u03c5\u03c8\7\u0089\2\2\u03c6\u03c9\5\u00d2")
        buf.write("j\2\u03c7\u03c9\5\u00d4k\2\u03c8\u03c6\3\2\2\2\u03c8\u03c7")
        buf.write("\3\2\2\2\u03c9\u03d3\3\2\2\2\u03ca\u03cc\7\u0089\2\2\u03cb")
        buf.write("\u03ca\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u03cd\3\2\2\2")
        buf.write("\u03cd\u03ce\7H\2\2\u03ce\u03d1\7\u0089\2\2\u03cf\u03d2")
        buf.write("\7\20\2\2\u03d0\u03d2\5d\63\2\u03d1\u03cf\3\2\2\2\u03d1")
        buf.write("\u03d0\3\2\2\2\u03d2\u03d4\3\2\2\2\u03d3\u03cb\3\2\2\2")
        buf.write("\u03d3\u03d4\3\2\2\2\u03d4c\3\2\2\2\u03d5\u03e0\5f\64")
        buf.write("\2\u03d6\u03d8\7\u0089\2\2\u03d7\u03d6\3\2\2\2\u03d7\u03d8")
        buf.write("\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9\u03db\7\6\2\2\u03da")
        buf.write("\u03dc\7\u0089\2\2\u03db\u03da\3\2\2\2\u03db\u03dc\3\2")
        buf.write("\2\2\u03dc\u03dd\3\2\2\2\u03dd\u03df\5f\64\2\u03de\u03d7")
        buf.write("\3\2\2\2\u03df\u03e2\3\2\2\2\u03e0\u03de\3\2\2\2\u03e0")
        buf.write("\u03e1\3\2\2\2\u03e1\u03e7\3\2\2\2\u03e2\u03e0\3\2\2\2")
        buf.write("\u03e3\u03e5\7\u0089\2\2\u03e4\u03e3\3\2\2\2\u03e4\u03e5")
        buf.write("\3\2\2\2\u03e5\u03e6\3\2\2\2\u03e6\u03e8\5z>\2\u03e7\u03e4")
        buf.write("\3\2\2\2\u03e7\u03e8\3\2\2\2\u03e8e\3\2\2\2\u03e9\u03ea")
        buf.write("\5\u00d6l\2\u03ea\u03eb\7\u0089\2\2\u03eb\u03ec\7?\2\2")
        buf.write("\u03ec\u03ed\7\u0089\2\2\u03ed\u03ef\3\2\2\2\u03ee\u03e9")
        buf.write("\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef\u03f0\3\2\2\2\u03f0")
        buf.write("\u03f1\5\u00dco\2\u03f1g\3\2\2\2\u03f2\u03f3\7I\2\2\u03f3")
        buf.write("\u03f8\5l\67\2\u03f4\u03f6\7\u0089\2\2\u03f5\u03f4\3\2")
        buf.write("\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7\u03f9")
        buf.write("\5z>\2\u03f8\u03f5\3\2\2\2\u03f8\u03f9\3\2\2\2\u03f9i")
        buf.write("\3\2\2\2\u03fa\u03fb\7J\2\2\u03fb\u03fc\5l\67\2\u03fc")
        buf.write("k\3\2\2\2\u03fd\u03ff\7\u0089\2\2\u03fe\u03fd\3\2\2\2")
        buf.write("\u03fe\u03ff\3\2\2\2\u03ff\u0400\3\2\2\2\u0400\u0402\7")
        buf.write("K\2\2\u0401\u03fe\3\2\2\2\u0401\u0402\3\2\2\2\u0402\u0403")
        buf.write("\3\2\2\2\u0403\u0404\7\u0089\2\2\u0404\u0407\5n8\2\u0405")
        buf.write("\u0406\7\u0089\2\2\u0406\u0408\5r:\2\u0407\u0405\3\2\2")
        buf.write("\2\u0407\u0408\3\2\2\2\u0408\u040b\3\2\2\2\u0409\u040a")
        buf.write("\7\u0089\2\2\u040a\u040c\5t;\2\u040b\u0409\3\2\2\2\u040b")
        buf.write("\u040c\3\2\2\2\u040c\u040f\3\2\2\2\u040d\u040e\7\u0089")
        buf.write("\2\2\u040e\u0410\5v<\2\u040f\u040d\3\2\2\2\u040f\u0410")
        buf.write("\3\2\2\2\u0410m\3\2\2\2\u0411\u041c\7\20\2\2\u0412\u0414")
        buf.write("\7\u0089\2\2\u0413\u0412\3\2\2\2\u0413\u0414\3\2\2\2\u0414")
        buf.write("\u0415\3\2\2\2\u0415\u0417\7\6\2\2\u0416\u0418\7\u0089")
        buf.write("\2\2\u0417\u0416\3\2\2\2\u0417\u0418\3\2\2\2\u0418\u0419")
        buf.write("\3\2\2\2\u0419\u041b\5p9\2\u041a\u0413\3\2\2\2\u041b\u041e")
        buf.write("\3\2\2\2\u041c\u041a\3\2\2\2\u041c\u041d\3\2\2\2\u041d")
        buf.write("\u042e\3\2\2\2\u041e\u041c\3\2\2\2\u041f\u042a\5p9\2\u0420")
        buf.write("\u0422\7\u0089\2\2\u0421\u0420\3\2\2\2\u0421\u0422\3\2")
        buf.write("\2\2\u0422\u0423\3\2\2\2\u0423\u0425\7\6\2\2\u0424\u0426")
        buf.write("\7\u0089\2\2\u0425\u0424\3\2\2\2\u0425\u0426\3\2\2\2\u0426")
        buf.write("\u0427\3\2\2\2\u0427\u0429\5p9\2\u0428\u0421\3\2\2\2\u0429")
        buf.write("\u042c\3\2\2\2\u042a\u0428\3\2\2\2\u042a\u042b\3\2\2\2")
        buf.write("\u042b\u042e\3\2\2\2\u042c\u042a\3\2\2\2\u042d\u0411\3")
        buf.write("\2\2\2\u042d\u041f\3\2\2\2\u042eo\3\2\2\2\u042f\u0430")
        buf.write("\5\u0098M\2\u0430\u0431\7\u0089\2\2\u0431\u0432\7?\2\2")
        buf.write("\u0432\u0433\7\u0089\2\2\u0433\u0434\5\u00dco\2\u0434")
        buf.write("\u0437\3\2\2\2\u0435\u0437\5\u0098M\2\u0436\u042f\3\2")
        buf.write("\2\2\u0436\u0435\3\2\2\2\u0437q\3\2\2\2\u0438\u0439\7")
        buf.write("L\2\2\u0439\u043a\7\u0089\2\2\u043a\u043b\7M\2\2\u043b")
        buf.write("\u043c\7\u0089\2\2\u043c\u0444\5x=\2\u043d\u043f\7\6\2")
        buf.write("\2\u043e\u0440\7\u0089\2\2\u043f\u043e\3\2\2\2\u043f\u0440")
        buf.write("\3\2\2\2\u0440\u0441\3\2\2\2\u0441\u0443\5x=\2\u0442\u043d")
        buf.write("\3\2\2\2\u0443\u0446\3\2\2\2\u0444\u0442\3\2\2\2\u0444")
        buf.write("\u0445\3\2\2\2\u0445s\3\2\2\2\u0446\u0444\3\2\2\2\u0447")
        buf.write("\u0448\7N\2\2\u0448\u0449\7\u0089\2\2\u0449\u044a\5\u0098")
        buf.write("M\2\u044au\3\2\2\2\u044b\u044c\7O\2\2\u044c\u044d\7\u0089")
        buf.write("\2\2\u044d\u044e\5\u0098M\2\u044ew\3\2\2\2\u044f\u0454")
        buf.write("\5\u0098M\2\u0450\u0452\7\u0089\2\2\u0451\u0450\3\2\2")
        buf.write("\2\u0451\u0452\3\2\2\2\u0452\u0453\3\2\2\2\u0453\u0455")
        buf.write("\t\5\2\2\u0454\u0451\3\2\2\2\u0454\u0455\3\2\2\2\u0455")
        buf.write("y\3\2\2\2\u0456\u0457\7T\2\2\u0457\u0458\7\u0089\2\2\u0458")
        buf.write("\u0459\5\u0098M\2\u0459{\3\2\2\2\u045a\u0465\5\30\r\2")
        buf.write("\u045b\u045d\7\u0089\2\2\u045c\u045b\3\2\2\2\u045c\u045d")
        buf.write("\3\2\2\2\u045d\u045e\3\2\2\2\u045e\u0460\7\6\2\2\u045f")
        buf.write("\u0461\7\u0089\2\2\u0460\u045f\3\2\2\2\u0460\u0461\3\2")
        buf.write("\2\2\u0461\u0462\3\2\2\2\u0462\u0464\5\30\r\2\u0463\u045c")
        buf.write("\3\2\2\2\u0464\u0467\3\2\2\2\u0465\u0463\3\2\2\2\u0465")
        buf.write("\u0466\3\2\2\2\u0466}\3\2\2\2\u0467\u0465\3\2\2\2\u0468")
        buf.write("\u0469\5\u0080A\2\u0469\177\3\2\2\2\u046a\u0471\5\36\20")
        buf.write("\2\u046b\u046d\7\u0089\2\2\u046c\u046b\3\2\2\2\u046c\u046d")
        buf.write("\3\2\2\2\u046d\u046e\3\2\2\2\u046e\u0470\5\u0084C\2\u046f")
        buf.write("\u046c\3\2\2\2\u0470\u0473\3\2\2\2\u0471\u046f\3\2\2\2")
        buf.write("\u0471\u0472\3\2\2\2\u0472\u0479\3\2\2\2\u0473\u0471\3")
        buf.write("\2\2\2\u0474\u0475\7\7\2\2\u0475\u0476\5\u0080A\2\u0476")
        buf.write("\u0477\7\b\2\2\u0477\u0479\3\2\2\2\u0478\u046a\3\2\2\2")
        buf.write("\u0478\u0474\3\2\2\2\u0479\u0081\3\2\2\2\u047a\u047f\5")
        buf.write("\36\20\2\u047b\u047d\7\u0089\2\2\u047c\u047b\3\2\2\2\u047c")
        buf.write("\u047d\3\2\2\2\u047d\u047e\3\2\2\2\u047e\u0480\5\u0084")
        buf.write("C\2\u047f\u047c\3\2\2\2\u0480\u0481\3\2\2\2\u0481\u047f")
        buf.write("\3\2\2\2\u0481\u0482\3\2\2\2\u0482\u0083\3\2\2\2\u0483")
        buf.write("\u0485\5\u0086D\2\u0484\u0486\7\u0089\2\2\u0485\u0484")
        buf.write("\3\2\2\2\u0485\u0486\3\2\2\2\u0486\u0487\3\2\2\2\u0487")
        buf.write("\u0488\5\36\20\2\u0488\u0085\3\2\2\2\u0489\u048b\5\u00f2")
        buf.write("z\2\u048a\u048c\7\u0089\2\2\u048b\u048a\3\2\2\2\u048b")
        buf.write("\u048c\3\2\2\2\u048c\u048d\3\2\2\2\u048d\u048f\5\u00f6")
        buf.write("|\2\u048e\u0490\7\u0089\2\2\u048f\u048e\3\2\2\2\u048f")
        buf.write("\u0490\3\2\2\2\u0490\u0492\3\2\2\2\u0491\u0493\5(\25\2")
        buf.write("\u0492\u0491\3\2\2\2\u0492\u0493\3\2\2\2\u0493\u0495\3")
        buf.write("\2\2\2\u0494\u0496\7\u0089\2\2\u0495\u0494\3\2\2\2\u0495")
        buf.write("\u0496\3\2\2\2\u0496\u0497\3\2\2\2\u0497\u0499\5\u00f6")
        buf.write("|\2\u0498\u049a\7\u0089\2\2\u0499\u0498\3\2\2\2\u0499")
        buf.write("\u049a\3\2\2\2\u049a\u049b\3\2\2\2\u049b\u049c\5\u00f4")
        buf.write("{\2\u049c\u04ca\3\2\2\2\u049d\u049f\5\u00f2z\2\u049e\u04a0")
        buf.write("\7\u0089\2\2\u049f\u049e\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0")
        buf.write("\u04a1\3\2\2\2\u04a1\u04a3\5\u00f6|\2\u04a2\u04a4\7\u0089")
        buf.write("\2\2\u04a3\u04a2\3\2\2\2\u04a3\u04a4\3\2\2\2\u04a4\u04a6")
        buf.write("\3\2\2\2\u04a5\u04a7\5(\25\2\u04a6\u04a5\3\2\2\2\u04a6")
        buf.write("\u04a7\3\2\2\2\u04a7\u04a9\3\2\2\2\u04a8\u04aa\7\u0089")
        buf.write("\2\2\u04a9\u04a8\3\2\2\2\u04a9\u04aa\3\2\2\2\u04aa\u04ab")
        buf.write("\3\2\2\2\u04ab\u04ac\5\u00f6|\2\u04ac\u04ca\3\2\2\2\u04ad")
        buf.write("\u04af\5\u00f6|\2\u04ae\u04b0\7\u0089\2\2\u04af\u04ae")
        buf.write("\3\2\2\2\u04af\u04b0\3\2\2\2\u04b0\u04b2\3\2\2\2\u04b1")
        buf.write("\u04b3\5(\25\2\u04b2\u04b1\3\2\2\2\u04b2\u04b3\3\2\2\2")
        buf.write("\u04b3\u04b5\3\2\2\2\u04b4\u04b6\7\u0089\2\2\u04b5\u04b4")
        buf.write("\3\2\2\2\u04b5\u04b6\3\2\2\2\u04b6\u04b7\3\2\2\2\u04b7")
        buf.write("\u04b9\5\u00f6|\2\u04b8\u04ba\7\u0089\2\2\u04b9\u04b8")
        buf.write("\3\2\2\2\u04b9\u04ba\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bb")
        buf.write("\u04bc\5\u00f4{\2\u04bc\u04ca\3\2\2\2\u04bd\u04bf\5\u00f6")
        buf.write("|\2\u04be\u04c0\7\u0089\2\2\u04bf\u04be\3\2\2\2\u04bf")
        buf.write("\u04c0\3\2\2\2\u04c0\u04c2\3\2\2\2\u04c1\u04c3\5(\25\2")
        buf.write("\u04c2\u04c1\3\2\2\2\u04c2\u04c3\3\2\2\2\u04c3\u04c5\3")
        buf.write("\2\2\2\u04c4\u04c6\7\u0089\2\2\u04c5\u04c4\3\2\2\2\u04c5")
        buf.write("\u04c6\3\2\2\2\u04c6\u04c7\3\2\2\2\u04c7\u04c8\5\u00f6")
        buf.write("|\2\u04c8\u04ca\3\2\2\2\u04c9\u0489\3\2\2\2\u04c9\u049d")
        buf.write("\3\2\2\2\u04c9\u04ad\3\2\2\2\u04c9\u04bd\3\2\2\2\u04ca")
        buf.write("\u0087\3\2\2\2\u04cb\u04ce\5\u00eav\2\u04cc\u04ce\5\u00ee")
        buf.write("x\2\u04cd\u04cb\3\2\2\2\u04cd\u04cc\3\2\2\2\u04ce\u0089")
        buf.write("\3\2\2\2\u04cf\u04d1\7\n\2\2\u04d0\u04d2\7\u0089\2\2\u04d1")
        buf.write("\u04d0\3\2\2\2\u04d1\u04d2\3\2\2\2\u04d2\u04d3\3\2\2\2")
        buf.write("\u04d3\u04e1\5\u0094K\2\u04d4\u04d6\7\u0089\2\2\u04d5")
        buf.write("\u04d4\3\2\2\2\u04d5\u04d6\3\2\2\2\u04d6\u04d7\3\2\2\2")
        buf.write("\u04d7\u04d9\7\21\2\2\u04d8\u04da\7\n\2\2\u04d9\u04d8")
        buf.write("\3\2\2\2\u04d9\u04da\3\2\2\2\u04da\u04dc\3\2\2\2\u04db")
        buf.write("\u04dd\7\u0089\2\2\u04dc\u04db\3\2\2\2\u04dc\u04dd\3\2")
        buf.write("\2\2\u04dd\u04de\3\2\2\2\u04de\u04e0\5\u0094K\2\u04df")
        buf.write("\u04d5\3\2\2\2\u04e0\u04e3\3\2\2\2\u04e1\u04df\3\2\2\2")
        buf.write("\u04e1\u04e2\3\2\2\2\u04e2\u008b\3\2\2\2\u04e3\u04e1\3")
        buf.write("\2\2\2\u04e4\u04eb\5\u008eH\2\u04e5\u04e7\7\u0089\2\2")
        buf.write("\u04e6\u04e5\3\2\2\2\u04e6\u04e7\3\2\2\2\u04e7\u04e8\3")
        buf.write("\2\2\2\u04e8\u04ea\5\u008eH\2\u04e9\u04e6\3\2\2\2\u04ea")
        buf.write("\u04ed\3\2\2\2\u04eb\u04e9\3\2\2\2\u04eb\u04ec\3\2\2\2")
        buf.write("\u04ec\u008d\3\2\2\2\u04ed\u04eb\3\2\2\2\u04ee\u04f0\7")
        buf.write("\n\2\2\u04ef\u04f1\7\u0089\2\2\u04f0\u04ef\3\2\2\2\u04f0")
        buf.write("\u04f1\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2\u04f3\5\u0092")
        buf.write("J\2\u04f3\u008f\3\2\2\2\u04f4\u04f6\7\20\2\2\u04f5\u04f7")
        buf.write("\7\u0089\2\2\u04f6\u04f5\3\2\2\2\u04f6\u04f7\3\2\2\2\u04f7")
        buf.write("\u04fc\3\2\2\2\u04f8\u04fa\5\u00e4s\2\u04f9\u04fb\7\u0089")
        buf.write("\2\2\u04fa\u04f9\3\2\2\2\u04fa\u04fb\3\2\2\2\u04fb\u04fd")
        buf.write("\3\2\2\2\u04fc\u04f8\3\2\2\2\u04fc\u04fd\3\2\2\2\u04fd")
        buf.write("\u0508\3\2\2\2\u04fe\u0500\7\16\2\2\u04ff\u0501\7\u0089")
        buf.write("\2\2\u0500\u04ff\3\2\2\2\u0500\u0501\3\2\2\2\u0501\u0506")
        buf.write("\3\2\2\2\u0502\u0504\5\u00e4s\2\u0503\u0505\7\u0089\2")
        buf.write("\2\u0504\u0503\3\2\2\2\u0504\u0505\3\2\2\2\u0505\u0507")
        buf.write("\3\2\2\2\u0506\u0502\3\2\2\2\u0506\u0507\3\2\2\2\u0507")
        buf.write("\u0509\3\2\2\2\u0508\u04fe\3\2\2\2\u0508\u0509\3\2\2\2")
        buf.write("\u0509\u0091\3\2\2\2\u050a\u050b\5\u00f0y\2\u050b\u0093")
        buf.write("\3\2\2\2\u050c\u050d\5\u00f0y\2\u050d\u0095\3\2\2\2\u050e")
        buf.write("\u0513\5\u00b8]\2\u050f\u0511\7\u0089\2\2\u0510\u050f")
        buf.write("\3\2\2\2\u0510\u0511\3\2\2\2\u0511\u0512\3\2\2\2\u0512")
        buf.write("\u0514\5\u00b6\\\2\u0513\u0510\3\2\2\2\u0514\u0515\3\2")
        buf.write("\2\2\u0515\u0513\3\2\2\2\u0515\u0516\3\2\2\2\u0516\u0097")
        buf.write("\3\2\2\2\u0517\u0518\5\u009aN\2\u0518\u0099\3\2\2\2\u0519")
        buf.write("\u0520\5\u009cO\2\u051a\u051b\7\u0089\2\2\u051b\u051c")
        buf.write("\7U\2\2\u051c\u051d\7\u0089\2\2\u051d\u051f\5\u009cO\2")
        buf.write("\u051e\u051a\3\2\2\2\u051f\u0522\3\2\2\2\u0520\u051e\3")
        buf.write("\2\2\2\u0520\u0521\3\2\2\2\u0521\u009b\3\2\2\2\u0522\u0520")
        buf.write("\3\2\2\2\u0523\u052a\5\u009eP\2\u0524\u0525\7\u0089\2")
        buf.write("\2\u0525\u0526\7V\2\2\u0526\u0527\7\u0089\2\2\u0527\u0529")
        buf.write("\5\u009eP\2\u0528\u0524\3\2\2\2\u0529\u052c\3\2\2\2\u052a")
        buf.write("\u0528\3\2\2\2\u052a\u052b\3\2\2\2\u052b\u009d\3\2\2\2")
        buf.write("\u052c\u052a\3\2\2\2\u052d\u0534\5\u00a0Q\2\u052e\u052f")
        buf.write("\7\u0089\2\2\u052f\u0530\7W\2\2\u0530\u0531\7\u0089\2")
        buf.write("\2\u0531\u0533\5\u00a0Q\2\u0532\u052e\3\2\2\2\u0533\u0536")
        buf.write("\3\2\2\2\u0534\u0532\3\2\2\2\u0534\u0535\3\2\2\2\u0535")
        buf.write("\u009f\3\2\2\2\u0536\u0534\3\2\2\2\u0537\u0539\7X\2\2")
        buf.write("\u0538\u053a\7\u0089\2\2\u0539\u0538\3\2\2\2\u0539\u053a")
        buf.write("\3\2\2\2\u053a\u053c\3\2\2\2\u053b\u0537\3\2\2\2\u053c")
        buf.write("\u053f\3\2\2\2\u053d\u053b\3\2\2\2\u053d\u053e\3\2\2\2")
        buf.write("\u053e\u0540\3\2\2\2\u053f\u053d\3\2\2\2\u0540\u0541\5")
        buf.write("\u00a2R\2\u0541\u00a1\3\2\2\2\u0542\u0549\5*\26\2\u0543")
        buf.write("\u0545\7\u0089\2\2\u0544\u0543\3\2\2\2\u0544\u0545\3\2")
        buf.write("\2\2\u0545\u0546\3\2\2\2\u0546\u0548\5\u00a4S\2\u0547")
        buf.write("\u0544\3\2\2\2\u0548\u054b\3\2\2\2\u0549\u0547\3\2\2\2")
        buf.write("\u0549\u054a\3\2\2\2\u054a\u00a3\3\2\2\2\u054b\u0549\3")
        buf.write("\2\2\2\u054c\u054e\7\4\2\2\u054d\u054f\7\u0089\2\2\u054e")
        buf.write("\u054d\3\2\2\2\u054e\u054f\3\2\2\2\u054f\u0550\3\2\2\2")
        buf.write("\u0550\u056b\5*\26\2\u0551\u0553\7\22\2\2\u0552\u0554")
        buf.write("\7\u0089\2\2\u0553\u0552\3\2\2\2\u0553\u0554\3\2\2\2\u0554")
        buf.write("\u0555\3\2\2\2\u0555\u056b\5*\26\2\u0556\u0558\7\23\2")
        buf.write("\2\u0557\u0559\7\u0089\2\2\u0558\u0557\3\2\2\2\u0558\u0559")
        buf.write("\3\2\2\2\u0559\u055a\3\2\2\2\u055a\u056b\5*\26\2\u055b")
        buf.write("\u055d\7\24\2\2\u055c\u055e\7\u0089\2\2\u055d\u055c\3")
        buf.write("\2\2\2\u055d\u055e\3\2\2\2\u055e\u055f\3\2\2\2\u055f\u056b")
        buf.write("\5*\26\2\u0560\u0562\7\25\2\2\u0561\u0563\7\u0089\2\2")
        buf.write("\u0562\u0561\3\2\2\2\u0562\u0563\3\2\2\2\u0563\u0564\3")
        buf.write("\2\2\2\u0564\u056b\5*\26\2\u0565\u0567\7\26\2\2\u0566")
        buf.write("\u0568\7\u0089\2\2\u0567\u0566\3\2\2\2\u0567\u0568\3\2")
        buf.write("\2\2\u0568\u0569\3\2\2\2\u0569\u056b\5*\26\2\u056a\u054c")
        buf.write("\3\2\2\2\u056a\u0551\3\2\2\2\u056a\u0556\3\2\2\2\u056a")
        buf.write("\u055b\3\2\2\2\u056a\u0560\3\2\2\2\u056a\u0565\3\2\2\2")
        buf.write("\u056b\u00a5\3\2\2\2\u056c\u056d\7\u0089\2\2\u056d\u056e")
        buf.write("\7Y\2\2\u056e\u056f\7\u0089\2\2\u056f\u0577\7I\2\2\u0570")
        buf.write("\u0571\7\u0089\2\2\u0571\u0572\7Z\2\2\u0572\u0573\7\u0089")
        buf.write("\2\2\u0573\u0577\7I\2\2\u0574\u0575\7\u0089\2\2\u0575")
        buf.write("\u0577\7[\2\2\u0576\u056c\3\2\2\2\u0576\u0570\3\2\2\2")
        buf.write("\u0576\u0574\3\2\2\2\u0577\u0579\3\2\2\2\u0578\u057a\7")
        buf.write("\u0089\2\2\u0579\u0578\3\2\2\2\u0579\u057a\3\2\2\2\u057a")
        buf.write("\u057b\3\2\2\2\u057b\u057c\5\u00acW\2\u057c\u00a7\3\2")
        buf.write("\2\2\u057d\u057e\7\u0089\2\2\u057e\u0580\7\\\2\2\u057f")
        buf.write("\u0581\7\u0089\2\2\u0580\u057f\3\2\2\2\u0580\u0581\3\2")
        buf.write("\2\2\u0581\u0582\3\2\2\2\u0582\u0583\5\u00acW\2\u0583")
        buf.write("\u00a9\3\2\2\2\u0584\u0585\7\u0089\2\2\u0585\u0586\7]")
        buf.write("\2\2\u0586\u0587\7\u0089\2\2\u0587\u058f\7^\2\2\u0588")
        buf.write("\u0589\7\u0089\2\2\u0589\u058a\7]\2\2\u058a\u058b\7\u0089")
        buf.write("\2\2\u058b\u058c\7X\2\2\u058c\u058d\7\u0089\2\2\u058d")
        buf.write("\u058f\7^\2\2\u058e\u0584\3\2\2\2\u058e\u0588\3\2\2\2")
        buf.write("\u058f\u00ab\3\2\2\2\u0590\u05a3\5\u00aeX\2\u0591\u0593")
        buf.write("\7\u0089\2\2\u0592\u0591\3\2\2\2\u0592\u0593\3\2\2\2\u0593")
        buf.write("\u0594\3\2\2\2\u0594\u0596\7\27\2\2\u0595\u0597\7\u0089")
        buf.write("\2\2\u0596\u0595\3\2\2\2\u0596\u0597\3\2\2\2\u0597\u0598")
        buf.write("\3\2\2\2\u0598\u05a2\5\u00aeX\2\u0599\u059b\7\u0089\2")
        buf.write("\2\u059a\u0599\3\2\2\2\u059a\u059b\3\2\2\2\u059b\u059c")
        buf.write("\3\2\2\2\u059c\u059e\7\30\2\2\u059d\u059f\7\u0089\2\2")
        buf.write("\u059e\u059d\3\2\2\2\u059e\u059f\3\2\2\2\u059f\u05a0\3")
        buf.write("\2\2\2\u05a0\u05a2\5\u00aeX\2\u05a1\u0592\3\2\2\2\u05a1")
        buf.write("\u059a\3\2\2\2\u05a2\u05a5\3\2\2\2\u05a3\u05a1\3\2\2\2")
        buf.write("\u05a3\u05a4\3\2\2\2\u05a4\u00ad\3\2\2\2\u05a5\u05a3\3")
        buf.write("\2\2\2\u05a6\u05c1\5\u00b0Y\2\u05a7\u05a9\7\u0089\2\2")
        buf.write("\u05a8\u05a7\3\2\2\2\u05a8\u05a9\3\2\2\2\u05a9\u05aa\3")
        buf.write("\2\2\2\u05aa\u05ac\7\20\2\2\u05ab\u05ad\7\u0089\2\2\u05ac")
        buf.write("\u05ab\3\2\2\2\u05ac\u05ad\3\2\2\2\u05ad\u05ae\3\2\2\2")
        buf.write("\u05ae\u05c0\5\u00b0Y\2\u05af\u05b1\7\u0089\2\2\u05b0")
        buf.write("\u05af\3\2\2\2\u05b0\u05b1\3\2\2\2\u05b1\u05b2\3\2\2\2")
        buf.write("\u05b2\u05b4\7\31\2\2\u05b3\u05b5\7\u0089\2\2\u05b4\u05b3")
        buf.write("\3\2\2\2\u05b4\u05b5\3\2\2\2\u05b5\u05b6\3\2\2\2\u05b6")
        buf.write("\u05c0\5\u00b0Y\2\u05b7\u05b9\7\u0089\2\2\u05b8\u05b7")
        buf.write("\3\2\2\2\u05b8\u05b9\3\2\2\2\u05b9\u05ba\3\2\2\2\u05ba")
        buf.write("\u05bc\7\32\2\2\u05bb\u05bd\7\u0089\2\2\u05bc\u05bb\3")
        buf.write("\2\2\2\u05bc\u05bd\3\2\2\2\u05bd\u05be\3\2\2\2\u05be\u05c0")
        buf.write("\5\u00b0Y\2\u05bf\u05a8\3\2\2\2\u05bf\u05b0\3\2\2\2\u05bf")
        buf.write("\u05b8\3\2\2\2\u05c0\u05c3\3\2\2\2\u05c1\u05bf\3\2\2\2")
        buf.write("\u05c1\u05c2\3\2\2\2\u05c2\u00af\3\2\2\2\u05c3\u05c1\3")
        buf.write("\2\2\2\u05c4\u05cf\5\u00b2Z\2\u05c5\u05c7\7\u0089\2\2")
        buf.write("\u05c6\u05c5\3\2\2\2\u05c6\u05c7\3\2\2\2\u05c7\u05c8\3")
        buf.write("\2\2\2\u05c8\u05ca\7\33\2\2\u05c9\u05cb\7\u0089\2\2\u05ca")
        buf.write("\u05c9\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u05cc\3\2\2\2")
        buf.write("\u05cc\u05ce\5\u00b2Z\2\u05cd\u05c6\3\2\2\2\u05ce\u05d1")
        buf.write("\3\2\2\2\u05cf\u05cd\3\2\2\2\u05cf\u05d0\3\2\2\2\u05d0")
        buf.write("\u00b1\3\2\2\2\u05d1\u05cf\3\2\2\2\u05d2\u05d9\5,\27\2")
        buf.write("\u05d3\u05d5\t\6\2\2\u05d4\u05d6\7\u0089\2\2\u05d5\u05d4")
        buf.write("\3\2\2\2\u05d5\u05d6\3\2\2\2\u05d6\u05d7\3\2\2\2\u05d7")
        buf.write("\u05d9\5,\27\2\u05d8\u05d2\3\2\2\2\u05d8\u05d3\3\2\2\2")
        buf.write("\u05d9\u00b3\3\2\2\2\u05da\u05e1\5\u00b8]\2\u05db\u05dd")
        buf.write("\7\u0089\2\2\u05dc\u05db\3\2\2\2\u05dc\u05dd\3\2\2\2\u05dd")
        buf.write("\u05de\3\2\2\2\u05de\u05e0\5\u00b6\\\2\u05df\u05dc\3\2")
        buf.write("\2\2\u05e0\u05e3\3\2\2\2\u05e1\u05df\3\2\2\2\u05e1\u05e2")
        buf.write("\3\2\2\2\u05e2\u05e8\3\2\2\2\u05e3\u05e1\3\2\2\2\u05e4")
        buf.write("\u05e6\7\u0089\2\2\u05e5\u05e4\3\2\2\2\u05e5\u05e6\3\2")
        buf.write("\2\2\u05e6\u05e7\3\2\2\2\u05e7\u05e9\5\u008cG\2\u05e8")
        buf.write("\u05e5\3\2\2\2\u05e8\u05e9\3\2\2\2\u05e9\u00b5\3\2\2\2")
        buf.write("\u05ea\u05ec\7\3\2\2\u05eb\u05ed\7\u0089\2\2\u05ec\u05eb")
        buf.write("\3\2\2\2\u05ec\u05ed\3\2\2\2\u05ed\u05ee\3\2\2\2\u05ee")
        buf.write("\u05ef\5\u00ecw\2\u05ef\u00b7\3\2\2\2\u05f0\u0609\5\u00de")
        buf.write("p\2\u05f1\u0609\5\u00eex\2\u05f2\u0609\5\u00ba^\2\u05f3")
        buf.write("\u05f5\7_\2\2\u05f4\u05f6\7\u0089\2\2\u05f5\u05f4\3\2")
        buf.write("\2\2\u05f5\u05f6\3\2\2\2\u05f6\u05f7\3\2\2\2\u05f7\u05f9")
        buf.write("\7\7\2\2\u05f8\u05fa\7\u0089\2\2\u05f9\u05f8\3\2\2\2\u05f9")
        buf.write("\u05fa\3\2\2\2\u05fa\u05fb\3\2\2\2\u05fb\u05fd\7\20\2")
        buf.write("\2\u05fc\u05fe\7\u0089\2\2\u05fd\u05fc\3\2\2\2\u05fd\u05fe")
        buf.write("\3\2\2\2\u05fe\u05ff\3\2\2\2\u05ff\u0609\7\b\2\2\u0600")
        buf.write("\u0609\5\u00be`\2\u0601\u0609\5\u00c0a\2\u0602\u0609\5")
        buf.write("\u00c2b\2\u0603\u0609\5\u00c6d\2\u0604\u0609\5\u00c8e")
        buf.write("\2\u0605\u0609\5\u00ccg\2\u0606\u0609\5\u00d0i\2\u0607")
        buf.write("\u0609\5\u00dco\2\u0608\u05f0\3\2\2\2\u0608\u05f1\3\2")
        buf.write("\2\2\u0608\u05f2\3\2\2\2\u0608\u05f3\3\2\2\2\u0608\u0600")
        buf.write("\3\2\2\2\u0608\u0601\3\2\2\2\u0608\u0602\3\2\2\2\u0608")
        buf.write("\u0603\3\2\2\2\u0608\u0604\3\2\2\2\u0608\u0605\3\2\2\2")
        buf.write("\u0608\u0606\3\2\2\2\u0608\u0607\3\2\2\2\u0609\u00b9\3")
        buf.write("\2\2\2\u060a\u060f\7`\2\2\u060b\u060d\7\u0089\2\2\u060c")
        buf.write("\u060b\3\2\2\2\u060c\u060d\3\2\2\2\u060d\u060e\3\2\2\2")
        buf.write("\u060e\u0610\5\u00bc_\2\u060f\u060c\3\2\2\2\u0610\u0611")
        buf.write("\3\2\2\2\u0611\u060f\3\2\2\2\u0611\u0612\3\2\2\2\u0612")
        buf.write("\u0621\3\2\2\2\u0613\u0615\7`\2\2\u0614\u0616\7\u0089")
        buf.write("\2\2\u0615\u0614\3\2\2\2\u0615\u0616\3\2\2\2\u0616\u0617")
        buf.write("\3\2\2\2\u0617\u061c\5\u0098M\2\u0618\u061a\7\u0089\2")
        buf.write("\2\u0619\u0618\3\2\2\2\u0619\u061a\3\2\2\2\u061a\u061b")
        buf.write("\3\2\2\2\u061b\u061d\5\u00bc_\2\u061c\u0619\3\2\2\2\u061d")
        buf.write("\u061e\3\2\2\2\u061e\u061c\3\2\2\2\u061e\u061f\3\2\2\2")
        buf.write("\u061f\u0621\3\2\2\2\u0620\u060a\3\2\2\2\u0620\u0613\3")
        buf.write("\2\2\2\u0621\u062a\3\2\2\2\u0622\u0624\7\u0089\2\2\u0623")
        buf.write("\u0622\3\2\2\2\u0623\u0624\3\2\2\2\u0624\u0625\3\2\2\2")
        buf.write("\u0625\u0627\7a\2\2\u0626\u0628\7\u0089\2\2\u0627\u0626")
        buf.write("\3\2\2\2\u0627\u0628\3\2\2\2\u0628\u0629\3\2\2\2\u0629")
        buf.write("\u062b\5\u0098M\2\u062a\u0623\3\2\2\2\u062a\u062b\3\2")
        buf.write("\2\2\u062b\u062d\3\2\2\2\u062c\u062e\7\u0089\2\2\u062d")
        buf.write("\u062c\3\2\2\2\u062d\u062e\3\2\2\2\u062e\u062f\3\2\2\2")
        buf.write("\u062f\u0630\7b\2\2\u0630\u00bb\3\2\2\2\u0631\u0633\7")
        buf.write("c\2\2\u0632\u0634\7\u0089\2\2\u0633\u0632\3\2\2\2\u0633")
        buf.write("\u0634\3\2\2\2\u0634\u0635\3\2\2\2\u0635\u0637\5\u0098")
        buf.write("M\2\u0636\u0638\7\u0089\2\2\u0637\u0636\3\2\2\2\u0637")
        buf.write("\u0638\3\2\2\2\u0638\u0639\3\2\2\2\u0639\u063b\7d\2\2")
        buf.write("\u063a\u063c\7\u0089\2\2\u063b\u063a\3\2\2\2\u063b\u063c")
        buf.write("\3\2\2\2\u063c\u063d\3\2\2\2\u063d\u063e\5\u0098M\2\u063e")
        buf.write("\u00bd\3\2\2\2\u063f\u0641\7\f\2\2\u0640\u0642\7\u0089")
        buf.write("\2\2\u0641\u0640\3\2\2\2\u0641\u0642\3\2\2\2\u0642\u0643")
        buf.write("\3\2\2\2\u0643\u064c\5\u00c4c\2\u0644\u0646\7\u0089\2")
        buf.write("\2\u0645\u0644\3\2\2\2\u0645\u0646\3\2\2\2\u0646\u0647")
        buf.write("\3\2\2\2\u0647\u0649\7\21\2\2\u0648\u064a\7\u0089\2\2")
        buf.write("\u0649\u0648\3\2\2\2\u0649\u064a\3\2\2\2\u064a\u064b\3")
        buf.write("\2\2\2\u064b\u064d\5\u0098M\2\u064c\u0645\3\2\2\2\u064c")
        buf.write("\u064d\3\2\2\2\u064d\u064f\3\2\2\2\u064e\u0650\7\u0089")
        buf.write("\2\2\u064f\u064e\3\2\2\2\u064f\u0650\3\2\2\2\u0650\u0651")
        buf.write("\3\2\2\2\u0651\u0652\7\r\2\2\u0652\u00bf\3\2\2\2\u0653")
        buf.write("\u0655\7\f\2\2\u0654\u0656\7\u0089\2\2\u0655\u0654\3\2")
        buf.write("\2\2\u0655\u0656\3\2\2\2\u0656\u065f\3\2\2\2\u0657\u0659")
        buf.write("\5\u00dco\2\u0658\u065a\7\u0089\2\2\u0659\u0658\3\2\2")
        buf.write("\2\u0659\u065a\3\2\2\2\u065a\u065b\3\2\2\2\u065b\u065d")
        buf.write("\7\4\2\2\u065c\u065e\7\u0089\2\2\u065d\u065c\3\2\2\2\u065d")
        buf.write("\u065e\3\2\2\2\u065e\u0660\3\2\2\2\u065f\u0657\3\2\2\2")
        buf.write("\u065f\u0660\3\2\2\2\u0660\u0661\3\2\2\2\u0661\u0663\5")
        buf.write("\u0082B\2\u0662\u0664\7\u0089\2\2\u0663\u0662\3\2\2\2")
        buf.write("\u0663\u0664\3\2\2\2\u0664\u0669\3\2\2\2\u0665\u0667\5")
        buf.write("z>\2\u0666\u0668\7\u0089\2\2\u0667\u0666\3\2\2\2\u0667")
        buf.write("\u0668\3\2\2\2\u0668\u066a\3\2\2\2\u0669\u0665\3\2\2\2")
        buf.write("\u0669\u066a\3\2\2\2\u066a\u066b\3\2\2\2\u066b\u066d\7")
        buf.write("\21\2\2\u066c\u066e\7\u0089\2\2\u066d\u066c\3\2\2\2\u066d")
        buf.write("\u066e\3\2\2\2\u066e\u066f\3\2\2\2\u066f\u0671\5\u0098")
        buf.write("M\2\u0670\u0672\7\u0089\2\2\u0671\u0670\3\2\2\2\u0671")
        buf.write("\u0672\3\2\2\2\u0672\u0673\3\2\2\2\u0673\u0674\7\r\2\2")
        buf.write("\u0674\u00c1\3\2\2\2\u0675\u0677\7;\2\2\u0676\u0678\7")
        buf.write("\u0089\2\2\u0677\u0676\3\2\2\2\u0677\u0678\3\2\2\2\u0678")
        buf.write("\u0679\3\2\2\2\u0679\u067b\7\7\2\2\u067a\u067c\7\u0089")
        buf.write("\2\2\u067b\u067a\3\2\2\2\u067b\u067c\3\2\2\2\u067c\u067d")
        buf.write("\3\2\2\2\u067d\u067f\5\u00c4c\2\u067e\u0680\7\u0089\2")
        buf.write("\2\u067f\u067e\3\2\2\2\u067f\u0680\3\2\2\2\u0680\u0681")
        buf.write("\3\2\2\2\u0681\u0682\7\b\2\2\u0682\u06ae\3\2\2\2\u0683")
        buf.write("\u0685\7e\2\2\u0684\u0686\7\u0089\2\2\u0685\u0684\3\2")
        buf.write("\2\2\u0685\u0686\3\2\2\2\u0686\u0687\3\2\2\2\u0687\u0689")
        buf.write("\7\7\2\2\u0688\u068a\7\u0089\2\2\u0689\u0688\3\2\2\2\u0689")
        buf.write("\u068a\3\2\2\2\u068a\u068b\3\2\2\2\u068b\u068d\5\u00c4")
        buf.write("c\2\u068c\u068e\7\u0089\2\2\u068d\u068c\3\2\2\2\u068d")
        buf.write("\u068e\3\2\2\2\u068e\u068f\3\2\2\2\u068f\u0690\7\b\2\2")
        buf.write("\u0690\u06ae\3\2\2\2\u0691\u0693\7f\2\2\u0692\u0694\7")
        buf.write("\u0089\2\2\u0693\u0692\3\2\2\2\u0693\u0694\3\2\2\2\u0694")
        buf.write("\u0695\3\2\2\2\u0695\u0697\7\7\2\2\u0696\u0698\7\u0089")
        buf.write("\2\2\u0697\u0696\3\2\2\2\u0697\u0698\3\2\2\2\u0698\u0699")
        buf.write("\3\2\2\2\u0699\u069b\5\u00c4c\2\u069a\u069c\7\u0089\2")
        buf.write("\2\u069b\u069a\3\2\2\2\u069b\u069c\3\2\2\2\u069c\u069d")
        buf.write("\3\2\2\2\u069d\u069e\7\b\2\2\u069e\u06ae\3\2\2\2\u069f")
        buf.write("\u06a1\7g\2\2\u06a0\u06a2\7\u0089\2\2\u06a1\u06a0\3\2")
        buf.write("\2\2\u06a1\u06a2\3\2\2\2\u06a2\u06a3\3\2\2\2\u06a3\u06a5")
        buf.write("\7\7\2\2\u06a4\u06a6\7\u0089\2\2\u06a5\u06a4\3\2\2\2\u06a5")
        buf.write("\u06a6\3\2\2\2\u06a6\u06a7\3\2\2\2\u06a7\u06a9\5\u00c4")
        buf.write("c\2\u06a8\u06aa\7\u0089\2\2\u06a9\u06a8\3\2\2\2\u06a9")
        buf.write("\u06aa\3\2\2\2\u06aa\u06ab\3\2\2\2\u06ab\u06ac\7\b\2\2")
        buf.write("\u06ac\u06ae\3\2\2\2\u06ad\u0675\3\2\2\2\u06ad\u0683\3")
        buf.write("\2\2\2\u06ad\u0691\3\2\2\2\u06ad\u069f\3\2\2\2\u06ae\u00c3")
        buf.write("\3\2\2\2\u06af\u06b4\5\u00caf\2\u06b0\u06b2\7\u0089\2")
        buf.write("\2\u06b1\u06b0\3\2\2\2\u06b1\u06b2\3\2\2\2\u06b2\u06b3")
        buf.write("\3\2\2\2\u06b3\u06b5\5z>\2\u06b4\u06b1\3\2\2\2\u06b4\u06b5")
        buf.write("\3\2\2\2\u06b5\u00c5\3\2\2\2\u06b6\u06b7\5\u0082B\2\u06b7")
        buf.write("\u00c7\3\2\2\2\u06b8\u06ba\7\7\2\2\u06b9\u06bb\7\u0089")
        buf.write("\2\2\u06ba\u06b9\3\2\2\2\u06ba\u06bb\3\2\2\2\u06bb\u06bc")
        buf.write("\3\2\2\2\u06bc\u06be\5\u0098M\2\u06bd\u06bf\7\u0089\2")
        buf.write("\2\u06be\u06bd\3\2\2\2\u06be\u06bf\3\2\2\2\u06bf\u06c0")
        buf.write("\3\2\2\2\u06c0\u06c1\7\b\2\2\u06c1\u00c9\3\2\2\2\u06c2")
        buf.write("\u06c3\5\u00dco\2\u06c3\u06c4\7\u0089\2\2\u06c4\u06c5")
        buf.write("\7\\\2\2\u06c5\u06c6\7\u0089\2\2\u06c6\u06c7\5\u0098M")
        buf.write("\2\u06c7\u00cb\3\2\2\2\u06c8\u06ca\5\u00ceh\2\u06c9\u06cb")
        buf.write("\7\u0089\2\2\u06ca\u06c9\3\2\2\2\u06ca\u06cb\3\2\2\2\u06cb")
        buf.write("\u06cc\3\2\2\2\u06cc\u06ce\7\7\2\2\u06cd\u06cf\7\u0089")
        buf.write("\2\2\u06ce\u06cd\3\2\2\2\u06ce\u06cf\3\2\2\2\u06cf\u06d4")
        buf.write("\3\2\2\2\u06d0\u06d2\7K\2\2\u06d1\u06d3\7\u0089\2\2\u06d2")
        buf.write("\u06d1\3\2\2\2\u06d2\u06d3\3\2\2\2\u06d3\u06d5\3\2\2\2")
        buf.write("\u06d4\u06d0\3\2\2\2\u06d4\u06d5\3\2\2\2\u06d5\u06e7\3")
        buf.write("\2\2\2\u06d6\u06d8\5\u0098M\2\u06d7\u06d9\7\u0089\2\2")
        buf.write("\u06d8\u06d7\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9\u06e4\3")
        buf.write("\2\2\2\u06da\u06dc\7\6\2\2\u06db\u06dd\7\u0089\2\2\u06dc")
        buf.write("\u06db\3\2\2\2\u06dc\u06dd\3\2\2\2\u06dd\u06de\3\2\2\2")
        buf.write("\u06de\u06e0\5\u0098M\2\u06df\u06e1\7\u0089\2\2\u06e0")
        buf.write("\u06df\3\2\2\2\u06e0\u06e1\3\2\2\2\u06e1\u06e3\3\2\2\2")
        buf.write("\u06e2\u06da\3\2\2\2\u06e3\u06e6\3\2\2\2\u06e4\u06e2\3")
        buf.write("\2\2\2\u06e4\u06e5\3\2\2\2\u06e5\u06e8\3\2\2\2\u06e6\u06e4")
        buf.write("\3\2\2\2\u06e7\u06d6\3\2\2\2\u06e7\u06e8\3\2\2\2\u06e8")
        buf.write("\u06e9\3\2\2\2\u06e9\u06ea\7\b\2\2\u06ea\u00cd\3\2\2\2")
        buf.write("\u06eb\u06ec\5\u00dan\2\u06ec\u06ed\5<\37\2\u06ed\u00cf")
        buf.write("\3\2\2\2\u06ee\u06f0\7h\2\2\u06ef\u06f1\7\u0089\2\2\u06f0")
        buf.write("\u06ef\3\2\2\2\u06f0\u06f1\3\2\2\2\u06f1\u06f2\3\2\2\2")
        buf.write("\u06f2\u06f4\7\t\2\2\u06f3\u06f5\7\u0089\2\2\u06f4\u06f3")
        buf.write("\3\2\2\2\u06f4\u06f5\3\2\2\2\u06f5\u06fe\3\2\2\2\u06f6")
        buf.write("\u06ff\5D#\2\u06f7\u06fc\5|?\2\u06f8\u06fa\7\u0089\2\2")
        buf.write("\u06f9\u06f8\3\2\2\2\u06f9\u06fa\3\2\2\2\u06fa\u06fb\3")
        buf.write("\2\2\2\u06fb\u06fd\5z>\2\u06fc\u06f9\3\2\2\2\u06fc\u06fd")
        buf.write("\3\2\2\2\u06fd\u06ff\3\2\2\2\u06fe\u06f6\3\2\2\2\u06fe")
        buf.write("\u06f7\3\2\2\2\u06ff\u0701\3\2\2\2\u0700\u0702\7\u0089")
        buf.write("\2\2\u0701\u0700\3\2\2\2\u0701\u0702\3\2\2\2\u0702\u0703")
        buf.write("\3\2\2\2\u0703\u0704\7\13\2\2\u0704\u00d1\3\2\2\2\u0705")
        buf.write("\u0707\5\u00d8m\2\u0706\u0708\7\u0089\2\2\u0707\u0706")
        buf.write("\3\2\2\2\u0707\u0708\3\2\2\2\u0708\u0709\3\2\2\2\u0709")
        buf.write("\u070b\7\7\2\2\u070a\u070c\7\u0089\2\2\u070b\u070a\3\2")
        buf.write("\2\2\u070b\u070c\3\2\2\2\u070c\u071e\3\2\2\2\u070d\u070f")
        buf.write("\5\u0098M\2\u070e\u0710\7\u0089\2\2\u070f\u070e\3\2\2")
        buf.write("\2\u070f\u0710\3\2\2\2\u0710\u071b\3\2\2\2\u0711\u0713")
        buf.write("\7\6\2\2\u0712\u0714\7\u0089\2\2\u0713\u0712\3\2\2\2\u0713")
        buf.write("\u0714\3\2\2\2\u0714\u0715\3\2\2\2\u0715\u0717\5\u0098")
        buf.write("M\2\u0716\u0718\7\u0089\2\2\u0717\u0716\3\2\2\2\u0717")
        buf.write("\u0718\3\2\2\2\u0718\u071a\3\2\2\2\u0719\u0711\3\2\2\2")
        buf.write("\u071a\u071d\3\2\2\2\u071b\u0719\3\2\2\2\u071b\u071c\3")
        buf.write("\2\2\2\u071c\u071f\3\2\2\2\u071d\u071b\3\2\2\2\u071e\u070d")
        buf.write("\3\2\2\2\u071e\u071f\3\2\2\2\u071f\u0720\3\2\2\2\u0720")
        buf.write("\u0721\7\b\2\2\u0721\u00d3\3\2\2\2\u0722\u0723\5\u00d8")
        buf.write("m\2\u0723\u00d5\3\2\2\2\u0724\u0725\5<\37\2\u0725\u00d7")
        buf.write("\3\2\2\2\u0726\u0727\5\u00dan\2\u0727\u0728\5<\37\2\u0728")
        buf.write("\u00d9\3\2\2\2\u0729\u072a\5<\37\2\u072a\u072b\7\3\2\2")
        buf.write("\u072b\u072d\3\2\2\2\u072c\u0729\3\2\2\2\u072d\u0730\3")
        buf.write("\2\2\2\u072e\u072c\3\2\2\2\u072e\u072f\3\2\2\2\u072f\u00db")
        buf.write("\3\2\2\2\u0730\u072e\3\2\2\2\u0731\u0732\5<\37\2\u0732")
        buf.write("\u00dd\3\2\2\2\u0733\u073a\5\u00e0q\2\u0734\u073a\7^\2")
        buf.write("\2\u0735\u073a\5\u00e2r\2\u0736\u073a\7w\2\2\u0737\u073a")
        buf.write("\5\u00e8u\2\u0738\u073a\5\u00eav\2\u0739\u0733\3\2\2\2")
        buf.write("\u0739\u0734\3\2\2\2\u0739\u0735\3\2\2\2\u0739\u0736\3")
        buf.write("\2\2\2\u0739\u0737\3\2\2\2\u0739\u0738\3\2\2\2\u073a\u00df")
        buf.write("\3\2\2\2\u073b\u073c\t\7\2\2\u073c\u00e1\3\2\2\2\u073d")
        buf.write("\u0740\5\u00e6t\2\u073e\u0740\5\u00e4s\2\u073f\u073d\3")
        buf.write("\2\2\2\u073f\u073e\3\2\2\2\u0740\u00e3\3\2\2\2\u0741\u0742")
        buf.write("\t\b\2\2\u0742\u00e5\3\2\2\2\u0743\u0744\t\t\2\2\u0744")
        buf.write("\u00e7\3\2\2\2\u0745\u0747\7\f\2\2\u0746\u0748\7\u0089")
        buf.write("\2\2\u0747\u0746\3\2\2\2\u0747\u0748\3\2\2\2\u0748\u075a")
        buf.write("\3\2\2\2\u0749\u074b\5\u0098M\2\u074a\u074c\7\u0089\2")
        buf.write("\2\u074b\u074a\3\2\2\2\u074b\u074c\3\2\2\2\u074c\u0757")
        buf.write("\3\2\2\2\u074d\u074f\7\6\2\2\u074e\u0750\7\u0089\2\2\u074f")
        buf.write("\u074e\3\2\2\2\u074f\u0750\3\2\2\2\u0750\u0751\3\2\2\2")
        buf.write("\u0751\u0753\5\u0098M\2\u0752\u0754\7\u0089\2\2\u0753")
        buf.write("\u0752\3\2\2\2\u0753\u0754\3\2\2\2\u0754\u0756\3\2\2\2")
        buf.write("\u0755\u074d\3\2\2\2\u0756\u0759\3\2\2\2\u0757\u0755\3")
        buf.write("\2\2\2\u0757\u0758\3\2\2\2\u0758\u075b\3\2\2\2\u0759\u0757")
        buf.write("\3\2\2\2\u075a\u0749\3\2\2\2\u075a\u075b\3\2\2\2\u075b")
        buf.write("\u075c\3\2\2\2\u075c\u075d\7\r\2\2\u075d\u00e9\3\2\2\2")
        buf.write("\u075e\u0760\7\t\2\2\u075f\u0761\7\u0089\2\2\u0760\u075f")
        buf.write("\3\2\2\2\u0760\u0761\3\2\2\2\u0761\u0783\3\2\2\2\u0762")
        buf.write("\u0764\5\u00ecw\2\u0763\u0765\7\u0089\2\2\u0764\u0763")
        buf.write("\3\2\2\2\u0764\u0765\3\2\2\2\u0765\u0766\3\2\2\2\u0766")
        buf.write("\u0768\7\n\2\2\u0767\u0769\7\u0089\2\2\u0768\u0767\3\2")
        buf.write("\2\2\u0768\u0769\3\2\2\2\u0769\u076a\3\2\2\2\u076a\u076c")
        buf.write("\5\u0098M\2\u076b\u076d\7\u0089\2\2\u076c\u076b\3\2\2")
        buf.write("\2\u076c\u076d\3\2\2\2\u076d\u0780\3\2\2\2\u076e\u0770")
        buf.write("\7\6\2\2\u076f\u0771\7\u0089\2\2\u0770\u076f\3\2\2\2\u0770")
        buf.write("\u0771\3\2\2\2\u0771\u0772\3\2\2\2\u0772\u0774\5\u00ec")
        buf.write("w\2\u0773\u0775\7\u0089\2\2\u0774\u0773\3\2\2\2\u0774")
        buf.write("\u0775\3\2\2\2\u0775\u0776\3\2\2\2\u0776\u0778\7\n\2\2")
        buf.write("\u0777\u0779\7\u0089\2\2\u0778\u0777\3\2\2\2\u0778\u0779")
        buf.write("\3\2\2\2\u0779\u077a\3\2\2\2\u077a\u077c\5\u0098M\2\u077b")
        buf.write("\u077d\7\u0089\2\2\u077c\u077b\3\2\2\2\u077c\u077d\3\2")
        buf.write("\2\2\u077d\u077f\3\2\2\2\u077e\u076e\3\2\2\2\u077f\u0782")
        buf.write("\3\2\2\2\u0780\u077e\3\2\2\2\u0780\u0781\3\2\2\2\u0781")
        buf.write("\u0784\3\2\2\2\u0782\u0780\3\2\2\2\u0783\u0762\3\2\2\2")
        buf.write("\u0783\u0784\3\2\2\2\u0784\u0785\3\2\2\2\u0785\u0786\7")
        buf.write("\13\2\2\u0786\u00eb\3\2\2\2\u0787\u0788\5\u00f0y\2\u0788")
        buf.write("\u00ed\3\2\2\2\u0789\u078c\7\34\2\2\u078a\u078d\5<\37")
        buf.write("\2\u078b\u078d\7l\2\2\u078c\u078a\3\2\2\2\u078c\u078b")
        buf.write("\3\2\2\2\u078d\u00ef\3\2\2\2\u078e\u0791\5<\37\2\u078f")
        buf.write("\u0791\5> \2\u0790\u078e\3\2\2\2\u0790\u078f\3\2\2\2\u0791")
        buf.write("\u00f1\3\2\2\2\u0792\u0793\t\n\2\2\u0793\u00f3\3\2\2\2")
        buf.write("\u0794\u0795\t\13\2\2\u0795\u00f5\3\2\2\2\u0796\u0797")
        buf.write("\t\f\2\2\u0797\u00f7\3\2\2\2\u0170\u00fb\u00ff\u0103\u0107")
        buf.write("\u010b\u010d\u0110\u0113\u011b\u011e\u0121\u0125\u012b")
        buf.write("\u012e\u0133\u0139\u013c\u0141\u0144\u0147\u014b\u0151")
        buf.write("\u0154\u0159\u015c\u015f\u0163\u0167\u016a\u016e\u0172")
        buf.write("\u0178\u017c\u0182\u0186\u018c\u0190\u0194\u0198\u019c")
        buf.write("\u01a1\u01a8\u01ad\u01b1\u01b5\u01b9\u01bd\u01c2\u01c9")
        buf.write("\u01ce\u01d2\u01d8\u01de\u01e3\u01e6\u01ea\u01ee\u01f4")
        buf.write("\u01f8\u01fd\u0201\u0205\u0209\u020f\u0213\u0219\u021d")
        buf.write("\u021f\u0223\u0225\u0229\u022b\u022f\u0231\u0237\u023b")
        buf.write("\u0242\u024a\u024d\u0253\u0257\u0259\u025c\u0260\u0264")
        buf.write("\u0266\u026a\u026e\u0270\u0274\u0276\u0279\u027d\u027f")
        buf.write("\u0283\u0285\u028e\u0292\u0296\u0298\u029c\u02a3\u02a7")
        buf.write("\u02ab\u02b1\u02b6\u02b9\u02bc\u02be\u02c1\u02c7\u02cc")
        buf.write("\u02d6\u02da\u02de\u02e2\u02e6\u02e9\u02ef\u02f6\u02fa")
        buf.write("\u02fd\u0300\u0308\u030d\u0314\u0319\u031c\u0320\u0324")
        buf.write("\u0328\u032e\u0332\u0337\u033c\u0340\u0343\u0345\u034a")
        buf.write("\u0350\u0354\u0359\u035d\u0362\u0367\u036b\u0375\u037c")
        buf.write("\u0389\u038d\u0393\u0397\u039b\u03a0\u03a7\u03ab\u03b0")
        buf.write("\u03b7\u03bd\u03c2\u03c8\u03cb\u03d1\u03d3\u03d7\u03db")
        buf.write("\u03e0\u03e4\u03e7\u03ee\u03f5\u03f8\u03fe\u0401\u0407")
        buf.write("\u040b\u040f\u0413\u0417\u041c\u0421\u0425\u042a\u042d")
        buf.write("\u0436\u043f\u0444\u0451\u0454\u045c\u0460\u0465\u046c")
        buf.write("\u0471\u0478\u047c\u0481\u0485\u048b\u048f\u0492\u0495")
        buf.write("\u0499\u049f\u04a3\u04a6\u04a9\u04af\u04b2\u04b5\u04b9")
        buf.write("\u04bf\u04c2\u04c5\u04c9\u04cd\u04d1\u04d5\u04d9\u04dc")
        buf.write("\u04e1\u04e6\u04eb\u04f0\u04f6\u04fa\u04fc\u0500\u0504")
        buf.write("\u0506\u0508\u0510\u0515\u0520\u052a\u0534\u0539\u053d")
        buf.write("\u0544\u0549\u054e\u0553\u0558\u055d\u0562\u0567\u056a")
        buf.write("\u0576\u0579\u0580\u058e\u0592\u0596\u059a\u059e\u05a1")
        buf.write("\u05a3\u05a8\u05ac\u05b0\u05b4\u05b8\u05bc\u05bf\u05c1")
        buf.write("\u05c6\u05ca\u05cf\u05d5\u05d8\u05dc\u05e1\u05e5\u05e8")
        buf.write("\u05ec\u05f5\u05f9\u05fd\u0608\u060c\u0611\u0615\u0619")
        buf.write("\u061e\u0620\u0623\u0627\u062a\u062d\u0633\u0637\u063b")
        buf.write("\u0641\u0645\u0649\u064c\u064f\u0655\u0659\u065d\u065f")
        buf.write("\u0663\u0667\u0669\u066d\u0671\u0677\u067b\u067f\u0685")
        buf.write("\u0689\u068d\u0693\u0697\u069b\u06a1\u06a5\u06a9\u06ad")
        buf.write("\u06b1\u06b4\u06ba\u06be\u06ca\u06ce\u06d2\u06d4\u06d8")
        buf.write("\u06dc\u06e0\u06e4\u06e7\u06f0\u06f4\u06f9\u06fc\u06fe")
        buf.write("\u0701\u0707\u070b\u070f\u0713\u0717\u071b\u071e\u072e")
        buf.write("\u0739\u073f\u0747\u074b\u074f\u0753\u0757\u075a\u0760")
        buf.write("\u0764\u0768\u076c\u0770\u0774\u0778\u077c\u0780\u0783")
        buf.write("\u078c\u0790")
        return buf.getvalue()


class s_cypherParser ( Parser ):

    grammarFileName = "s_cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "'='", "'+='", "','", "'('", "')'", 
                     "'{'", "':'", "'}'", "'['", "']'", "'..'", "';'", "'*'", 
                     "'|'", "'<>'", "'<'", "'>'", "'<='", "'>='", "'+'", 
                     "'-'", "'/'", "'%'", "'^'", "'$'", "'\u27E8'", "'\u3008'", 
                     "'\uFE64'", "'\uFF1C'", "'\u27E9'", "'\u3009'", "'\uFE65'", 
                     "'\uFF1E'", "'\u00AD'", "'\u2010'", "'\u2011'", "'\u2012'", 
                     "'\u2013'", "'\u2014'", "'\u2015'", "'\u2212'", "'\uFE58'", 
                     "'\uFE63'", "'\uFF0D'", "<INVALID>", "<INVALID>", "'NOW'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "AtT", "PoundValue", "NOW", 
                      "AT_TIME", "SNAPSHOT", "BETWEEN", "SCOPE", "STALE", 
                      "DURING", "OVERLAPS", "UNION", "ALL", "OPTIONAL", 
                      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", 
                      "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", 
                      "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", 
                      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
                      "WHERE", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", 
                      "CONTAINS", "IN", "IS", "NULL", "COUNT", "CASE", "ELSE", 
                      "END", "WHEN", "THEN", "ANY", "NONE", "SINGLE", "EXISTS", 
                      "TRUE", "FALSE", "HexInteger", "DecimalInteger", "OctalInteger", 
                      "HexLetter", "HexDigit", "Digit", "NonZeroDigit", 
                      "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", 
                      "RegularDecimalReal", "StringLiteral", "EscapedChar", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Query = 0
    RULE_oC_Match = 1
    RULE_oC_UpdatingClause = 2
    RULE_oC_SetItem = 3
    RULE_s_Stale = 4
    RULE_s_StaleItem = 5
    RULE_oC_Delete = 6
    RULE_s_DeleteItem = 7
    RULE_s_AtTime = 8
    RULE_s_Between = 9
    RULE_s_TimeWindowLimit = 10
    RULE_oC_PatternPart = 11
    RULE_s_PathFunctionPattern = 12
    RULE_s_SinglePathPattern = 13
    RULE_oC_NodePattern = 14
    RULE_s_Properties = 15
    RULE_s_PropertiesPattern = 16
    RULE_s_PropertyNode = 17
    RULE_s_ValueNode = 18
    RULE_oC_RelationshipDetail = 19
    RULE_oC_StringListNullPredicateExpression = 20
    RULE_oC_ListOperatorExpression = 21
    RULE_oC_SingleIndexExpression = 22
    RULE_oC_DoubleIndexExpression = 23
    RULE_s_AtTExpression = 24
    RULE_oC_PropertyLookupTime = 25
    RULE_s_TimePredicateExpression = 26
    RULE_s_AtTElement = 27
    RULE_s_TimePointLiteral = 28
    RULE_oC_SymbolicName = 29
    RULE_oC_ReservedWord = 30
    RULE_oC_Cypher = 31
    RULE_oC_Statement = 32
    RULE_oC_RegularQuery = 33
    RULE_oC_Union = 34
    RULE_oC_SingleQuery = 35
    RULE_oC_SinglePartQuery = 36
    RULE_oC_MultiPartQuery = 37
    RULE_s_WithPartQuery = 38
    RULE_oC_ReadingClause = 39
    RULE_oC_Unwind = 40
    RULE_oC_Merge = 41
    RULE_oC_MergeAction = 42
    RULE_oC_Create = 43
    RULE_oC_Set = 44
    RULE_oC_Remove = 45
    RULE_oC_RemoveItem = 46
    RULE_oC_InQueryCall = 47
    RULE_oC_StandaloneCall = 48
    RULE_oC_YieldItems = 49
    RULE_oC_YieldItem = 50
    RULE_oC_With = 51
    RULE_oC_Return = 52
    RULE_oC_ProjectionBody = 53
    RULE_oC_ProjectionItems = 54
    RULE_oC_ProjectionItem = 55
    RULE_oC_Order = 56
    RULE_oC_Skip = 57
    RULE_oC_Limit = 58
    RULE_oC_SortItem = 59
    RULE_oC_Where = 60
    RULE_oC_Pattern = 61
    RULE_oC_AnonymousPatternPart = 62
    RULE_oC_PatternElement = 63
    RULE_oC_RelationshipsPattern = 64
    RULE_oC_PatternElementChain = 65
    RULE_oC_RelationshipPattern = 66
    RULE_oC_Properties = 67
    RULE_oC_RelationshipTypes = 68
    RULE_oC_NodeLabels = 69
    RULE_oC_NodeLabel = 70
    RULE_oC_RangeLiteral = 71
    RULE_oC_LabelName = 72
    RULE_oC_RelTypeName = 73
    RULE_oC_PropertyExpression = 74
    RULE_oC_Expression = 75
    RULE_oC_OrExpression = 76
    RULE_oC_XorExpression = 77
    RULE_oC_AndExpression = 78
    RULE_oC_NotExpression = 79
    RULE_oC_ComparisonExpression = 80
    RULE_oC_PartialComparisonExpression = 81
    RULE_oC_StringPredicateExpression = 82
    RULE_oC_ListPredicateExpression = 83
    RULE_oC_NullPredicateExpression = 84
    RULE_oC_AddOrSubtractExpression = 85
    RULE_oC_MultiplyDivideModuloExpression = 86
    RULE_oC_PowerOfExpression = 87
    RULE_oC_UnaryAddOrSubtractExpression = 88
    RULE_oC_PropertyOrLabelsExpression = 89
    RULE_oC_PropertyLookup = 90
    RULE_oC_Atom = 91
    RULE_oC_CaseExpression = 92
    RULE_oC_CaseAlternative = 93
    RULE_oC_ListComprehension = 94
    RULE_oC_PatternComprehension = 95
    RULE_oC_Quantifier = 96
    RULE_oC_FilterExpression = 97
    RULE_oC_PatternPredicate = 98
    RULE_oC_ParenthesizedExpression = 99
    RULE_oC_IdInColl = 100
    RULE_oC_FunctionInvocation = 101
    RULE_oC_FunctionName = 102
    RULE_oC_ExistentialSubquery = 103
    RULE_oC_ExplicitProcedureInvocation = 104
    RULE_oC_ImplicitProcedureInvocation = 105
    RULE_oC_ProcedureResultField = 106
    RULE_oC_ProcedureName = 107
    RULE_oC_Namespace = 108
    RULE_oC_Variable = 109
    RULE_oC_Literal = 110
    RULE_oC_BooleanLiteral = 111
    RULE_oC_NumberLiteral = 112
    RULE_oC_IntegerLiteral = 113
    RULE_oC_DoubleLiteral = 114
    RULE_oC_ListLiteral = 115
    RULE_oC_MapLiteral = 116
    RULE_oC_PropertyKeyName = 117
    RULE_oC_Parameter = 118
    RULE_oC_SchemaName = 119
    RULE_oC_LeftArrowHead = 120
    RULE_oC_RightArrowHead = 121
    RULE_oC_Dash = 122

    ruleNames =  [ "oC_Query", "oC_Match", "oC_UpdatingClause", "oC_SetItem", 
                   "s_Stale", "s_StaleItem", "oC_Delete", "s_DeleteItem", 
                   "s_AtTime", "s_Between", "s_TimeWindowLimit", "oC_PatternPart", 
                   "s_PathFunctionPattern", "s_SinglePathPattern", "oC_NodePattern", 
                   "s_Properties", "s_PropertiesPattern", "s_PropertyNode", 
                   "s_ValueNode", "oC_RelationshipDetail", "oC_StringListNullPredicateExpression", 
                   "oC_ListOperatorExpression", "oC_SingleIndexExpression", 
                   "oC_DoubleIndexExpression", "s_AtTExpression", "oC_PropertyLookupTime", 
                   "s_TimePredicateExpression", "s_AtTElement", "s_TimePointLiteral", 
                   "oC_SymbolicName", "oC_ReservedWord", "oC_Cypher", "oC_Statement", 
                   "oC_RegularQuery", "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", 
                   "oC_MultiPartQuery", "s_WithPartQuery", "oC_ReadingClause", 
                   "oC_Unwind", "oC_Merge", "oC_MergeAction", "oC_Create", 
                   "oC_Set", "oC_Remove", "oC_RemoveItem", "oC_InQueryCall", 
                   "oC_StandaloneCall", "oC_YieldItems", "oC_YieldItem", 
                   "oC_With", "oC_Return", "oC_ProjectionBody", "oC_ProjectionItems", 
                   "oC_ProjectionItem", "oC_Order", "oC_Skip", "oC_Limit", 
                   "oC_SortItem", "oC_Where", "oC_Pattern", "oC_AnonymousPatternPart", 
                   "oC_PatternElement", "oC_RelationshipsPattern", "oC_PatternElementChain", 
                   "oC_RelationshipPattern", "oC_Properties", "oC_RelationshipTypes", 
                   "oC_NodeLabels", "oC_NodeLabel", "oC_RangeLiteral", "oC_LabelName", 
                   "oC_RelTypeName", "oC_PropertyExpression", "oC_Expression", 
                   "oC_OrExpression", "oC_XorExpression", "oC_AndExpression", 
                   "oC_NotExpression", "oC_ComparisonExpression", "oC_PartialComparisonExpression", 
                   "oC_StringPredicateExpression", "oC_ListPredicateExpression", 
                   "oC_NullPredicateExpression", "oC_AddOrSubtractExpression", 
                   "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", 
                   "oC_UnaryAddOrSubtractExpression", "oC_PropertyOrLabelsExpression", 
                   "oC_PropertyLookup", "oC_Atom", "oC_CaseExpression", 
                   "oC_CaseAlternative", "oC_ListComprehension", "oC_PatternComprehension", 
                   "oC_Quantifier", "oC_FilterExpression", "oC_PatternPredicate", 
                   "oC_ParenthesizedExpression", "oC_IdInColl", "oC_FunctionInvocation", 
                   "oC_FunctionName", "oC_ExistentialSubquery", "oC_ExplicitProcedureInvocation", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_Variable", "oC_Literal", 
                   "oC_BooleanLiteral", "oC_NumberLiteral", "oC_IntegerLiteral", 
                   "oC_DoubleLiteral", "oC_ListLiteral", "oC_MapLiteral", 
                   "oC_PropertyKeyName", "oC_Parameter", "oC_SchemaName", 
                   "oC_LeftArrowHead", "oC_RightArrowHead", "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    AtT=46
    PoundValue=47
    NOW=48
    AT_TIME=49
    SNAPSHOT=50
    BETWEEN=51
    SCOPE=52
    STALE=53
    DURING=54
    OVERLAPS=55
    UNION=56
    ALL=57
    OPTIONAL=58
    MATCH=59
    UNWIND=60
    AS=61
    MERGE=62
    ON=63
    CREATE=64
    SET=65
    DETACH=66
    DELETE=67
    REMOVE=68
    CALL=69
    YIELD=70
    WITH=71
    RETURN=72
    DISTINCT=73
    ORDER=74
    BY=75
    L_SKIP=76
    LIMIT=77
    ASCENDING=78
    ASC=79
    DESCENDING=80
    DESC=81
    WHERE=82
    OR=83
    XOR=84
    AND=85
    NOT=86
    STARTS=87
    ENDS=88
    CONTAINS=89
    IN=90
    IS=91
    NULL=92
    COUNT=93
    CASE=94
    ELSE=95
    END=96
    WHEN=97
    THEN=98
    ANY=99
    NONE=100
    SINGLE=101
    EXISTS=102
    TRUE=103
    FALSE=104
    HexInteger=105
    DecimalInteger=106
    OctalInteger=107
    HexLetter=108
    HexDigit=109
    Digit=110
    NonZeroDigit=111
    NonZeroOctDigit=112
    OctDigit=113
    ZeroDigit=114
    ExponentDecimalReal=115
    RegularDecimalReal=116
    StringLiteral=117
    EscapedChar=118
    CONSTRAINT=119
    DO=120
    FOR=121
    REQUIRE=122
    UNIQUE=123
    MANDATORY=124
    SCALAR=125
    OF=126
    ADD=127
    DROP=128
    FILTER=129
    EXTRACT=130
    UnescapedSymbolicName=131
    IdentifierStart=132
    IdentifierPart=133
    EscapedSymbolicName=134
    SP=135
    WHITESPACE=136
    Comment=137

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StandaloneCallContext,0)


        def s_TimeWindowLimit(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimeWindowLimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = s_cypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Query)
        try:
            self.state = 249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 246
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 247
                self.oC_StandaloneCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 248
                self.s_TimeWindowLimit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = s_cypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.OPTIONAL:
                self.state = 251
                self.match(s_cypherParser.OPTIONAL)
                self.state = 252
                self.match(s_cypherParser.SP)


            self.state = 255
            self.match(s_cypherParser.MATCH)
            self.state = 257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 256
                self.match(s_cypherParser.SP)


            self.state = 259
            self.oC_Pattern()
            self.state = 267
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 260
                    self.match(s_cypherParser.SP)


                self.state = 265
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [s_cypherParser.AT_TIME]:
                    self.state = 263
                    self.s_AtTime()
                    pass
                elif token in [s_cypherParser.BETWEEN]:
                    self.state = 264
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 269
                    self.match(s_cypherParser.SP)


                self.state = 272
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Create(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CreateContext,0)


        def oC_Merge(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MergeContext,0)


        def oC_Delete(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DeleteContext,0)


        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RemoveContext,0)


        def s_Stale(self):
            return self.getTypedRuleContext(s_cypherParser.S_StaleContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = s_cypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_UpdatingClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [s_cypherParser.CREATE]:
                self.state = 275
                self.oC_Create()
                pass
            elif token in [s_cypherParser.MERGE]:
                self.state = 276
                self.oC_Merge()
                pass
            elif token in [s_cypherParser.DETACH, s_cypherParser.DELETE]:
                self.state = 277
                self.oC_Delete()
                pass
            elif token in [s_cypherParser.SET]:
                self.state = 278
                self.oC_Set()
                pass
            elif token in [s_cypherParser.REMOVE]:
                self.state = 279
                self.oC_Remove()
                pass
            elif token in [s_cypherParser.STALE]:
                self.state = 280
                self.s_Stale()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 283
                    self.match(s_cypherParser.SP)


                self.state = 286
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_AtTElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AtTElementContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = s_cypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 289
                self.oC_Variable()
                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 290
                    self.match(s_cypherParser.SP)


                self.state = 293
                self.s_AtTElement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 295
                self.oC_Variable()
                self.state = 300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.AtT or _la==s_cypherParser.SP:
                    self.state = 297
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 296
                        self.match(s_cypherParser.SP)


                    self.state = 299
                    self.s_AtTElement()


                self.state = 302
                self.match(s_cypherParser.T__0)
                self.state = 303
                self.oC_PropertyKeyName()
                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 304
                    self.match(s_cypherParser.SP)


                self.state = 307
                self.s_AtTElement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 309
                self.oC_Variable()
                self.state = 314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.AtT or _la==s_cypherParser.SP:
                    self.state = 311
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 310
                        self.match(s_cypherParser.SP)


                    self.state = 313
                    self.s_AtTElement()


                self.state = 316
                self.match(s_cypherParser.T__0)
                self.state = 317
                self.oC_PropertyKeyName()
                self.state = 322
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 319
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 318
                        self.match(s_cypherParser.SP)


                    self.state = 321
                    self.s_AtTElement()


                self.state = 325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 324
                    self.match(s_cypherParser.SP)


                self.state = 327
                self.match(s_cypherParser.PoundValue)
                self.state = 329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 328
                    self.match(s_cypherParser.SP)


                self.state = 331
                self.s_AtTElement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 333
                self.oC_Variable()
                self.state = 338
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.AtT or _la==s_cypherParser.SP:
                    self.state = 335
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 334
                        self.match(s_cypherParser.SP)


                    self.state = 337
                    self.s_AtTElement()


                self.state = 340
                self.match(s_cypherParser.T__0)
                self.state = 341
                self.oC_PropertyKeyName()
                self.state = 346
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                if la_ == 1:
                    self.state = 343
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 342
                        self.match(s_cypherParser.SP)


                    self.state = 345
                    self.s_AtTElement()


                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 348
                    self.match(s_cypherParser.SP)


                self.state = 351
                self.match(s_cypherParser.T__1)
                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 352
                    self.match(s_cypherParser.SP)


                self.state = 355
                self.oC_Expression()
                self.state = 360
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 357
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 356
                        self.match(s_cypherParser.SP)


                    self.state = 359
                    self.s_AtTElement()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 362
                self.oC_PropertyExpression()
                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 363
                    self.match(s_cypherParser.SP)


                self.state = 366
                self.match(s_cypherParser.T__1)
                self.state = 368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 367
                    self.match(s_cypherParser.SP)


                self.state = 370
                self.oC_Expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 372
                self.oC_Variable()
                self.state = 374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 373
                    self.match(s_cypherParser.SP)


                self.state = 376
                self.match(s_cypherParser.T__1)
                self.state = 378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 377
                    self.match(s_cypherParser.SP)


                self.state = 380
                self.oC_Expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 382
                self.oC_Variable()
                self.state = 384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 383
                    self.match(s_cypherParser.SP)


                self.state = 386
                self.match(s_cypherParser.T__2)
                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 387
                    self.match(s_cypherParser.SP)


                self.state = 390
                self.oC_Expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 392
                self.oC_Variable()
                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 393
                    self.match(s_cypherParser.SP)


                self.state = 396
                self.oC_NodeLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def s_StaleItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StaleItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StaleItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Stale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Stale" ):
                listener.enterS_Stale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Stale" ):
                listener.exitS_Stale(self)




    def s_Stale(self):

        localctx = s_cypherParser.S_StaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_s_Stale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.match(s_cypherParser.STALE)
            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 401
                self.match(s_cypherParser.SP)


            self.state = 404
            self.s_StaleItem()
            self.state = 415
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 406
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 405
                        self.match(s_cypherParser.SP)


                    self.state = 408
                    self.match(s_cypherParser.T__3)
                    self.state = 410
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 409
                        self.match(s_cypherParser.SP)


                    self.state = 412
                    self.s_StaleItem() 
                self.state = 417
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StaleItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StaleItem" ):
                listener.enterS_StaleItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StaleItem" ):
                listener.exitS_StaleItem(self)




    def s_StaleItem(self):

        localctx = s_cypherParser.S_StaleItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_s_StaleItem)
        self._la = 0 # Token type
        try:
            self.state = 427
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 418
                self.oC_Expression()
                self.state = 419
                self.match(s_cypherParser.T__0)
                self.state = 420
                self.oC_PropertyKeyName()
                self.state = 422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 421
                    self.match(s_cypherParser.SP)


                self.state = 424
                self.match(s_cypherParser.PoundValue)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 426
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def s_DeleteItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DeleteItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DeleteItemContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = s_cypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.DETACH:
                self.state = 429
                self.match(s_cypherParser.DETACH)
                self.state = 430
                self.match(s_cypherParser.SP)


            self.state = 433
            self.match(s_cypherParser.DELETE)
            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 434
                self.match(s_cypherParser.SP)


            self.state = 437
            self.s_DeleteItem()
            self.state = 448
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 438
                        self.match(s_cypherParser.SP)


                    self.state = 441
                    self.match(s_cypherParser.T__3)
                    self.state = 443
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 442
                        self.match(s_cypherParser.SP)


                    self.state = 445
                    self.s_DeleteItem() 
                self.state = 450
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DeleteItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DeleteItem" ):
                listener.enterS_DeleteItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DeleteItem" ):
                listener.exitS_DeleteItem(self)




    def s_DeleteItem(self):

        localctx = s_cypherParser.S_DeleteItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_s_DeleteItem)
        self._la = 0 # Token type
        try:
            self.state = 460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 451
                self.oC_Expression()
                self.state = 452
                self.match(s_cypherParser.T__0)
                self.state = 453
                self.oC_PropertyKeyName()
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 454
                    self.match(s_cypherParser.SP)


                self.state = 457
                self.match(s_cypherParser.PoundValue)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 459
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTime" ):
                listener.enterS_AtTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTime" ):
                listener.exitS_AtTime(self)




    def s_AtTime(self):

        localctx = s_cypherParser.S_AtTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_s_AtTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(s_cypherParser.AT_TIME)
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 463
                self.match(s_cypherParser.SP)


            self.state = 466
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_BetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Between

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Between" ):
                listener.enterS_Between(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Between" ):
                listener.exitS_Between(self)




    def s_Between(self):

        localctx = s_cypherParser.S_BetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_s_Between)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.match(s_cypherParser.BETWEEN)
            self.state = 470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 469
                self.match(s_cypherParser.SP)


            self.state = 472
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimeWindowLimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimeWindowLimit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimeWindowLimit" ):
                listener.enterS_TimeWindowLimit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimeWindowLimit" ):
                listener.exitS_TimeWindowLimit(self)




    def s_TimeWindowLimit(self):

        localctx = s_cypherParser.S_TimeWindowLimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_s_TimeWindowLimit)
        self._la = 0 # Token type
        try:
            self.state = 484
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [s_cypherParser.SNAPSHOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 474
                self.match(s_cypherParser.SNAPSHOT)
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 475
                    self.match(s_cypherParser.SP)


                self.state = 478
                self.oC_Expression()
                pass
            elif token in [s_cypherParser.SCOPE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 479
                self.match(s_cypherParser.SCOPE)
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 480
                    self.match(s_cypherParser.SP)


                self.state = 483
                self.oC_Expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_PathFunctionPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PathFunctionPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AnonymousPatternPartContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = s_cypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 486
                self.oC_Variable()
                self.state = 488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 487
                    self.match(s_cypherParser.SP)


                self.state = 490
                self.match(s_cypherParser.T__1)
                self.state = 492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 491
                    self.match(s_cypherParser.SP)


                self.state = 494
                self.s_PathFunctionPattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 496
                self.oC_Variable()
                self.state = 498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 497
                    self.match(s_cypherParser.SP)


                self.state = 500
                self.match(s_cypherParser.T__1)
                self.state = 502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 501
                    self.match(s_cypherParser.SP)


                self.state = 504
                self.oC_AnonymousPatternPart()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 506
                self.oC_AnonymousPatternPart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PathFunctionPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def s_SinglePathPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_SinglePathPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PathFunctionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PathFunctionPattern" ):
                listener.enterS_PathFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PathFunctionPattern" ):
                listener.exitS_PathFunctionPattern(self)




    def s_PathFunctionPattern(self):

        localctx = s_cypherParser.S_PathFunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_s_PathFunctionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.oC_FunctionName()
            self.state = 511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 510
                self.match(s_cypherParser.SP)


            self.state = 513
            self.match(s_cypherParser.T__4)
            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 514
                self.match(s_cypherParser.SP)


            self.state = 517
            self.s_SinglePathPattern()
            self.state = 519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 518
                self.match(s_cypherParser.SP)


            self.state = 521
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SinglePathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodePatternContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,i)


        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SinglePathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SinglePathPattern" ):
                listener.enterS_SinglePathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SinglePathPattern" ):
                listener.exitS_SinglePathPattern(self)




    def s_SinglePathPattern(self):

        localctx = s_cypherParser.S_SinglePathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_s_SinglePathPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.oC_NodePattern()
            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 524
                self.match(s_cypherParser.SP)


            self.state = 527
            self.oC_RelationshipPattern()
            self.state = 529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 528
                self.match(s_cypherParser.SP)


            self.state = 531
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def s_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = s_cypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.match(s_cypherParser.T__4)
            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 534
                self.match(s_cypherParser.SP)


            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.NOW or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (s_cypherParser.COUNT - 93)) | (1 << (s_cypherParser.ANY - 93)) | (1 << (s_cypherParser.NONE - 93)) | (1 << (s_cypherParser.SINGLE - 93)) | (1 << (s_cypherParser.HexLetter - 93)) | (1 << (s_cypherParser.FILTER - 93)) | (1 << (s_cypherParser.EXTRACT - 93)) | (1 << (s_cypherParser.UnescapedSymbolicName - 93)) | (1 << (s_cypherParser.EscapedSymbolicName - 93)))) != 0):
                self.state = 537
                self.oC_Variable()
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 538
                    self.match(s_cypherParser.SP)




            self.state = 547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.T__7:
                self.state = 543
                self.oC_NodeLabels()
                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 544
                    self.match(s_cypherParser.SP)




            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.AtT:
                self.state = 549
                self.s_AtTElement()
                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 550
                    self.match(s_cypherParser.SP)




            self.state = 559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.T__6 or _la==s_cypherParser.T__25:
                self.state = 555
                self.s_Properties()
                self.state = 557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 556
                    self.match(s_cypherParser.SP)




            self.state = 561
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertiesPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesPatternContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Properties" ):
                listener.enterS_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Properties" ):
                listener.exitS_Properties(self)




    def s_Properties(self):

        localctx = s_cypherParser.S_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_s_Properties)
        try:
            self.state = 565
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [s_cypherParser.T__6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 563
                self.s_PropertiesPattern()
                pass
            elif token in [s_cypherParser.T__25]:
                self.enterOuterAlt(localctx, 2)
                self.state = 564
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_PropertyNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PropertyNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PropertyNodeContext,i)


        def s_ValueNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ValueNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ValueNodeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertiesPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertiesPattern" ):
                listener.enterS_PropertiesPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertiesPattern" ):
                listener.exitS_PropertiesPattern(self)




    def s_PropertiesPattern(self):

        localctx = s_cypherParser.S_PropertiesPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_s_PropertiesPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self.match(s_cypherParser.T__6)
            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 568
                self.match(s_cypherParser.SP)


            self.state = 587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (s_cypherParser.NOW - 48)) | (1 << (s_cypherParser.AT_TIME - 48)) | (1 << (s_cypherParser.SNAPSHOT - 48)) | (1 << (s_cypherParser.BETWEEN - 48)) | (1 << (s_cypherParser.SCOPE - 48)) | (1 << (s_cypherParser.STALE - 48)) | (1 << (s_cypherParser.DURING - 48)) | (1 << (s_cypherParser.OVERLAPS - 48)) | (1 << (s_cypherParser.UNION - 48)) | (1 << (s_cypherParser.ALL - 48)) | (1 << (s_cypherParser.OPTIONAL - 48)) | (1 << (s_cypherParser.MATCH - 48)) | (1 << (s_cypherParser.UNWIND - 48)) | (1 << (s_cypherParser.AS - 48)) | (1 << (s_cypherParser.MERGE - 48)) | (1 << (s_cypherParser.ON - 48)) | (1 << (s_cypherParser.CREATE - 48)) | (1 << (s_cypherParser.SET - 48)) | (1 << (s_cypherParser.DETACH - 48)) | (1 << (s_cypherParser.DELETE - 48)) | (1 << (s_cypherParser.REMOVE - 48)) | (1 << (s_cypherParser.WITH - 48)) | (1 << (s_cypherParser.RETURN - 48)) | (1 << (s_cypherParser.DISTINCT - 48)) | (1 << (s_cypherParser.ORDER - 48)) | (1 << (s_cypherParser.BY - 48)) | (1 << (s_cypherParser.L_SKIP - 48)) | (1 << (s_cypherParser.LIMIT - 48)) | (1 << (s_cypherParser.ASCENDING - 48)) | (1 << (s_cypherParser.ASC - 48)) | (1 << (s_cypherParser.DESCENDING - 48)) | (1 << (s_cypherParser.DESC - 48)) | (1 << (s_cypherParser.WHERE - 48)) | (1 << (s_cypherParser.OR - 48)) | (1 << (s_cypherParser.XOR - 48)) | (1 << (s_cypherParser.AND - 48)) | (1 << (s_cypherParser.NOT - 48)) | (1 << (s_cypherParser.STARTS - 48)) | (1 << (s_cypherParser.ENDS - 48)) | (1 << (s_cypherParser.CONTAINS - 48)) | (1 << (s_cypherParser.IN - 48)) | (1 << (s_cypherParser.IS - 48)) | (1 << (s_cypherParser.NULL - 48)) | (1 << (s_cypherParser.COUNT - 48)) | (1 << (s_cypherParser.CASE - 48)) | (1 << (s_cypherParser.ELSE - 48)) | (1 << (s_cypherParser.END - 48)) | (1 << (s_cypherParser.WHEN - 48)) | (1 << (s_cypherParser.THEN - 48)) | (1 << (s_cypherParser.ANY - 48)) | (1 << (s_cypherParser.NONE - 48)) | (1 << (s_cypherParser.SINGLE - 48)) | (1 << (s_cypherParser.EXISTS - 48)) | (1 << (s_cypherParser.TRUE - 48)) | (1 << (s_cypherParser.FALSE - 48)) | (1 << (s_cypherParser.HexLetter - 48)))) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & ((1 << (s_cypherParser.CONSTRAINT - 119)) | (1 << (s_cypherParser.DO - 119)) | (1 << (s_cypherParser.FOR - 119)) | (1 << (s_cypherParser.REQUIRE - 119)) | (1 << (s_cypherParser.UNIQUE - 119)) | (1 << (s_cypherParser.MANDATORY - 119)) | (1 << (s_cypherParser.SCALAR - 119)) | (1 << (s_cypherParser.OF - 119)) | (1 << (s_cypherParser.ADD - 119)) | (1 << (s_cypherParser.DROP - 119)) | (1 << (s_cypherParser.FILTER - 119)) | (1 << (s_cypherParser.EXTRACT - 119)) | (1 << (s_cypherParser.UnescapedSymbolicName - 119)) | (1 << (s_cypherParser.EscapedSymbolicName - 119)))) != 0):
                self.state = 571
                self.s_PropertyNode()
                self.state = 572
                self.match(s_cypherParser.T__7)
                self.state = 573
                self.s_ValueNode()
                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==s_cypherParser.T__3:
                    self.state = 574
                    self.match(s_cypherParser.T__3)
                    self.state = 576
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 575
                        self.match(s_cypherParser.SP)


                    self.state = 578
                    self.s_PropertyNode()
                    self.state = 579
                    self.match(s_cypherParser.T__7)
                    self.state = 580
                    self.s_ValueNode()
                    self.state = 586
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 589
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyNode" ):
                listener.enterS_PropertyNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyNode" ):
                listener.exitS_PropertyNode(self)




    def s_PropertyNode(self):

        localctx = s_cypherParser.S_PropertyNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_s_PropertyNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self.oC_PropertyKeyName()
            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 592
                self.match(s_cypherParser.SP)


            self.state = 599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.AtT:
                self.state = 595
                self.s_AtTElement()
                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 596
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ValueNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ValueNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ValueNode" ):
                listener.enterS_ValueNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ValueNode" ):
                listener.exitS_ValueNode(self)




    def s_ValueNode(self):

        localctx = s_cypherParser.S_ValueNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_s_ValueNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 601
                self.match(s_cypherParser.SP)


            self.state = 604
            self.oC_Expression()
            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 605
                self.match(s_cypherParser.SP)


            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.AtT:
                self.state = 608
                self.s_AtTElement()
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 609
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RangeLiteralContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = s_cypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self.match(s_cypherParser.T__9)
            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 615
                self.match(s_cypherParser.SP)


            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.NOW or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (s_cypherParser.COUNT - 93)) | (1 << (s_cypherParser.ANY - 93)) | (1 << (s_cypherParser.NONE - 93)) | (1 << (s_cypherParser.SINGLE - 93)) | (1 << (s_cypherParser.HexLetter - 93)) | (1 << (s_cypherParser.FILTER - 93)) | (1 << (s_cypherParser.EXTRACT - 93)) | (1 << (s_cypherParser.UnescapedSymbolicName - 93)) | (1 << (s_cypherParser.EscapedSymbolicName - 93)))) != 0):
                self.state = 618
                self.oC_Variable()
                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 619
                    self.match(s_cypherParser.SP)




            self.state = 628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.T__7:
                self.state = 624
                self.oC_RelationshipTypes()
                self.state = 626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 625
                    self.match(s_cypherParser.SP)




            self.state = 631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.T__13:
                self.state = 630
                self.oC_RangeLiteral()


            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.AtT:
                self.state = 633
                self.s_AtTElement()
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 634
                    self.match(s_cypherParser.SP)




            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.T__6 or _la==s_cypherParser.T__25:
                self.state = 639
                self.oC_Properties()
                self.state = 641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 640
                    self.match(s_cypherParser.SP)




            self.state = 645
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def s_TimePredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateExpressionContext,0)


        def oC_StringPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringPredicateExpressionContext,0)


        def oC_ListPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListPredicateExpressionContext,0)


        def oC_NullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NullPredicateExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringListNullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullPredicateExpression" ):
                listener.enterOC_StringListNullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullPredicateExpression" ):
                listener.exitOC_StringListNullPredicateExpression(self)




    def oC_StringListNullPredicateExpression(self):

        localctx = s_cypherParser.OC_StringListNullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_oC_StringListNullPredicateExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.oC_AddOrSubtractExpression()
            self.state = 652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 648
                self.s_TimePredicateExpression()

            elif la_ == 2:
                self.state = 649
                self.oC_StringPredicateExpression()

            elif la_ == 3:
                self.state = 650
                self.oC_ListPredicateExpression()

            elif la_ == 4:
                self.state = 651
                self.oC_NullPredicateExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def s_AtTExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTExpressionContext,0)


        def oC_SingleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SingleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SingleIndexExpressionContext,i)


        def oC_DoubleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_DoubleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_DoubleIndexExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = s_cypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_oC_ListOperatorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 654
                self.oC_PropertyOrLabelsExpression()
                pass

            elif la_ == 2:
                self.state = 655
                self.s_AtTExpression()
                pass


            self.state = 662
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 660
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                    if la_ == 1:
                        self.state = 658
                        self.oC_SingleIndexExpression()
                        pass

                    elif la_ == 2:
                        self.state = 659
                        self.oC_DoubleIndexExpression()
                        pass

             
                self.state = 664
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SingleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleIndexExpression" ):
                listener.enterOC_SingleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleIndexExpression" ):
                listener.exitOC_SingleIndexExpression(self)




    def oC_SingleIndexExpression(self):

        localctx = s_cypherParser.OC_SingleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_oC_SingleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 665
                self.match(s_cypherParser.SP)


            self.state = 668
            self.match(s_cypherParser.T__9)
            self.state = 669
            self.oC_Expression()
            self.state = 670
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_DoubleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleIndexExpression" ):
                listener.enterOC_DoubleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleIndexExpression" ):
                listener.exitOC_DoubleIndexExpression(self)




    def oC_DoubleIndexExpression(self):

        localctx = s_cypherParser.OC_DoubleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_oC_DoubleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 672
                self.match(s_cypherParser.SP)


            self.state = 675
            self.match(s_cypherParser.T__9)
            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << s_cypherParser.T__4) | (1 << s_cypherParser.T__6) | (1 << s_cypherParser.T__9) | (1 << s_cypherParser.T__20) | (1 << s_cypherParser.T__21) | (1 << s_cypherParser.T__25) | (1 << s_cypherParser.NOW) | (1 << s_cypherParser.ALL))) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (s_cypherParser.NOT - 86)) | (1 << (s_cypherParser.NULL - 86)) | (1 << (s_cypherParser.COUNT - 86)) | (1 << (s_cypherParser.CASE - 86)) | (1 << (s_cypherParser.ANY - 86)) | (1 << (s_cypherParser.NONE - 86)) | (1 << (s_cypherParser.SINGLE - 86)) | (1 << (s_cypherParser.EXISTS - 86)) | (1 << (s_cypherParser.TRUE - 86)) | (1 << (s_cypherParser.FALSE - 86)) | (1 << (s_cypherParser.HexInteger - 86)) | (1 << (s_cypherParser.DecimalInteger - 86)) | (1 << (s_cypherParser.OctalInteger - 86)) | (1 << (s_cypherParser.HexLetter - 86)) | (1 << (s_cypherParser.ExponentDecimalReal - 86)) | (1 << (s_cypherParser.RegularDecimalReal - 86)) | (1 << (s_cypherParser.StringLiteral - 86)) | (1 << (s_cypherParser.FILTER - 86)) | (1 << (s_cypherParser.EXTRACT - 86)) | (1 << (s_cypherParser.UnescapedSymbolicName - 86)) | (1 << (s_cypherParser.EscapedSymbolicName - 86)))) != 0):
                self.state = 676
                self.oC_Expression()


            self.state = 679
            self.match(s_cypherParser.T__11)
            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << s_cypherParser.T__4) | (1 << s_cypherParser.T__6) | (1 << s_cypherParser.T__9) | (1 << s_cypherParser.T__20) | (1 << s_cypherParser.T__21) | (1 << s_cypherParser.T__25) | (1 << s_cypherParser.NOW) | (1 << s_cypherParser.ALL))) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (s_cypherParser.NOT - 86)) | (1 << (s_cypherParser.NULL - 86)) | (1 << (s_cypherParser.COUNT - 86)) | (1 << (s_cypherParser.CASE - 86)) | (1 << (s_cypherParser.ANY - 86)) | (1 << (s_cypherParser.NONE - 86)) | (1 << (s_cypherParser.SINGLE - 86)) | (1 << (s_cypherParser.EXISTS - 86)) | (1 << (s_cypherParser.TRUE - 86)) | (1 << (s_cypherParser.FALSE - 86)) | (1 << (s_cypherParser.HexInteger - 86)) | (1 << (s_cypherParser.DecimalInteger - 86)) | (1 << (s_cypherParser.OctalInteger - 86)) | (1 << (s_cypherParser.HexLetter - 86)) | (1 << (s_cypherParser.ExponentDecimalReal - 86)) | (1 << (s_cypherParser.RegularDecimalReal - 86)) | (1 << (s_cypherParser.StringLiteral - 86)) | (1 << (s_cypherParser.FILTER - 86)) | (1 << (s_cypherParser.EXTRACT - 86)) | (1 << (s_cypherParser.UnescapedSymbolicName - 86)) | (1 << (s_cypherParser.EscapedSymbolicName - 86)))) != 0):
                self.state = 680
                self.oC_Expression()


            self.state = 683
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookupTime(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupTimeContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTExpression" ):
                listener.enterS_AtTExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTExpression" ):
                listener.exitS_AtTExpression(self)




    def s_AtTExpression(self):

        localctx = s_cypherParser.S_AtTExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_s_AtTExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.oC_Atom()
            self.state = 700
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 690 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 687
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==s_cypherParser.SP:
                            self.state = 686
                            self.match(s_cypherParser.SP)


                        self.state = 689
                        self.oC_PropertyLookup()

                    else:
                        raise NoViableAltException(self)
                    self.state = 692 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                self.state = 698
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 695
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 694
                        self.match(s_cypherParser.SP)


                    self.state = 697
                    self.match(s_cypherParser.PoundValue)




            self.state = 703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 702
                self.match(s_cypherParser.SP)


            self.state = 705
            self.oC_PropertyLookupTime()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookupTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookupTime" ):
                listener.enterOC_PropertyLookupTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookupTime" ):
                listener.exitOC_PropertyLookupTime(self)




    def oC_PropertyLookupTime(self):

        localctx = s_cypherParser.OC_PropertyLookupTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_oC_PropertyLookupTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(s_cypherParser.AtT)
            self.state = 714
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 709
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 708
                        self.match(s_cypherParser.SP)


                    self.state = 711
                    self.oC_PropertyLookup() 
                self.state = 716
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateExpression" ):
                listener.enterS_TimePredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateExpression" ):
                listener.exitS_TimePredicateExpression(self)




    def s_TimePredicateExpression(self):

        localctx = s_cypherParser.S_TimePredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_s_TimePredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.match(s_cypherParser.SP)
            self.state = 718
            _la = self._input.LA(1)
            if not(_la==s_cypherParser.DURING or _la==s_cypherParser.OVERLAPS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 719
            self.match(s_cypherParser.SP)
            self.state = 720
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_TimePointLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_TimePointLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_TimePointLiteralContext,i)


        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTElement" ):
                listener.enterS_AtTElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTElement" ):
                listener.exitS_AtTElement(self)




    def s_AtTElement(self):

        localctx = s_cypherParser.S_AtTElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_s_AtTElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.match(s_cypherParser.AtT)
            self.state = 724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 723
                self.match(s_cypherParser.SP)


            self.state = 726
            self.match(s_cypherParser.T__4)
            self.state = 728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 727
                self.match(s_cypherParser.SP)


            self.state = 730
            self.s_TimePointLiteral()
            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 731
                self.match(s_cypherParser.SP)


            self.state = 734
            self.match(s_cypherParser.T__3)
            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 735
                self.match(s_cypherParser.SP)


            self.state = 740
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [s_cypherParser.T__6, s_cypherParser.StringLiteral]:
                self.state = 738
                self.s_TimePointLiteral()
                pass
            elif token in [s_cypherParser.NOW]:
                self.state = 739
                self.match(s_cypherParser.NOW)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 742
                self.match(s_cypherParser.SP)


            self.state = 745
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePointLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePointLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePointLiteral" ):
                listener.enterS_TimePointLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePointLiteral" ):
                listener.exitS_TimePointLiteral(self)




    def s_TimePointLiteral(self):

        localctx = s_cypherParser.S_TimePointLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_s_TimePointLiteral)
        try:
            self.state = 749
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [s_cypherParser.StringLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 747
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [s_cypherParser.T__6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 748
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(s_cypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(s_cypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(s_cypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(s_cypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(s_cypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = s_cypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            _la = self._input.LA(1)
            if not(_la==s_cypherParser.NOW or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (s_cypherParser.COUNT - 93)) | (1 << (s_cypherParser.ANY - 93)) | (1 << (s_cypherParser.NONE - 93)) | (1 << (s_cypherParser.SINGLE - 93)) | (1 << (s_cypherParser.HexLetter - 93)) | (1 << (s_cypherParser.FILTER - 93)) | (1 << (s_cypherParser.EXTRACT - 93)) | (1 << (s_cypherParser.UnescapedSymbolicName - 93)) | (1 << (s_cypherParser.EscapedSymbolicName - 93)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(s_cypherParser.AND, 0)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def OR(self):
            return self.getToken(s_cypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(s_cypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(s_cypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(s_cypherParser.DO, 0)

        def FOR(self):
            return self.getToken(s_cypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(s_cypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(s_cypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(s_cypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(s_cypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(s_cypherParser.OF, 0)

        def ADD(self):
            return self.getToken(s_cypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(s_cypherParser.DROP, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = s_cypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            _la = self._input.LA(1)
            if not(((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (s_cypherParser.NOW - 48)) | (1 << (s_cypherParser.AT_TIME - 48)) | (1 << (s_cypherParser.SNAPSHOT - 48)) | (1 << (s_cypherParser.BETWEEN - 48)) | (1 << (s_cypherParser.SCOPE - 48)) | (1 << (s_cypherParser.STALE - 48)) | (1 << (s_cypherParser.DURING - 48)) | (1 << (s_cypherParser.OVERLAPS - 48)) | (1 << (s_cypherParser.UNION - 48)) | (1 << (s_cypherParser.ALL - 48)) | (1 << (s_cypherParser.OPTIONAL - 48)) | (1 << (s_cypherParser.MATCH - 48)) | (1 << (s_cypherParser.UNWIND - 48)) | (1 << (s_cypherParser.AS - 48)) | (1 << (s_cypherParser.MERGE - 48)) | (1 << (s_cypherParser.ON - 48)) | (1 << (s_cypherParser.CREATE - 48)) | (1 << (s_cypherParser.SET - 48)) | (1 << (s_cypherParser.DETACH - 48)) | (1 << (s_cypherParser.DELETE - 48)) | (1 << (s_cypherParser.REMOVE - 48)) | (1 << (s_cypherParser.WITH - 48)) | (1 << (s_cypherParser.RETURN - 48)) | (1 << (s_cypherParser.DISTINCT - 48)) | (1 << (s_cypherParser.ORDER - 48)) | (1 << (s_cypherParser.BY - 48)) | (1 << (s_cypherParser.L_SKIP - 48)) | (1 << (s_cypherParser.LIMIT - 48)) | (1 << (s_cypherParser.ASCENDING - 48)) | (1 << (s_cypherParser.ASC - 48)) | (1 << (s_cypherParser.DESCENDING - 48)) | (1 << (s_cypherParser.DESC - 48)) | (1 << (s_cypherParser.WHERE - 48)) | (1 << (s_cypherParser.OR - 48)) | (1 << (s_cypherParser.XOR - 48)) | (1 << (s_cypherParser.AND - 48)) | (1 << (s_cypherParser.NOT - 48)) | (1 << (s_cypherParser.STARTS - 48)) | (1 << (s_cypherParser.ENDS - 48)) | (1 << (s_cypherParser.CONTAINS - 48)) | (1 << (s_cypherParser.IN - 48)) | (1 << (s_cypherParser.IS - 48)) | (1 << (s_cypherParser.NULL - 48)) | (1 << (s_cypherParser.CASE - 48)) | (1 << (s_cypherParser.ELSE - 48)) | (1 << (s_cypherParser.END - 48)) | (1 << (s_cypherParser.WHEN - 48)) | (1 << (s_cypherParser.THEN - 48)) | (1 << (s_cypherParser.EXISTS - 48)) | (1 << (s_cypherParser.TRUE - 48)) | (1 << (s_cypherParser.FALSE - 48)))) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & ((1 << (s_cypherParser.CONSTRAINT - 119)) | (1 << (s_cypherParser.DO - 119)) | (1 << (s_cypherParser.FOR - 119)) | (1 << (s_cypherParser.REQUIRE - 119)) | (1 << (s_cypherParser.UNIQUE - 119)) | (1 << (s_cypherParser.MANDATORY - 119)) | (1 << (s_cypherParser.SCALAR - 119)) | (1 << (s_cypherParser.OF - 119)) | (1 << (s_cypherParser.ADD - 119)) | (1 << (s_cypherParser.DROP - 119)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(s_cypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = s_cypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 755
                self.match(s_cypherParser.SP)


            self.state = 758
            self.oC_Statement()
            self.state = 763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 759
                    self.match(s_cypherParser.SP)


                self.state = 762
                self.match(s_cypherParser.T__12)


            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 765
                self.match(s_cypherParser.SP)


            self.state = 768
            self.match(s_cypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = s_cypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = s_cypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.oC_SingleQuery()
            self.state = 779
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 774
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 773
                        self.match(s_cypherParser.SP)


                    self.state = 776
                    self.oC_Union() 
                self.state = 781
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = s_cypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 794
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 782
                self.match(s_cypherParser.UNION)
                self.state = 783
                self.match(s_cypherParser.SP)
                self.state = 784
                self.match(s_cypherParser.ALL)
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 785
                    self.match(s_cypherParser.SP)


                self.state = 788
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 789
                self.match(s_cypherParser.UNION)
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 790
                    self.match(s_cypherParser.SP)


                self.state = 793
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = s_cypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_oC_SingleQuery)
        try:
            self.state = 798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 796
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 797
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = s_cypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 835
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (s_cypherParser.OPTIONAL - 58)) | (1 << (s_cypherParser.MATCH - 58)) | (1 << (s_cypherParser.UNWIND - 58)) | (1 << (s_cypherParser.CALL - 58)))) != 0):
                    self.state = 800
                    self.oC_ReadingClause()
                    self.state = 802
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 801
                        self.match(s_cypherParser.SP)


                    self.state = 808
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 809
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (s_cypherParser.OPTIONAL - 58)) | (1 << (s_cypherParser.MATCH - 58)) | (1 << (s_cypherParser.UNWIND - 58)) | (1 << (s_cypherParser.CALL - 58)))) != 0):
                    self.state = 810
                    self.oC_ReadingClause()
                    self.state = 812
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 811
                        self.match(s_cypherParser.SP)


                    self.state = 818
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 819
                self.oC_UpdatingClause()
                self.state = 826
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 821
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==s_cypherParser.SP:
                            self.state = 820
                            self.match(s_cypherParser.SP)


                        self.state = 823
                        self.oC_UpdatingClause() 
                    self.state = 828
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

                self.state = 833
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 829
                        self.match(s_cypherParser.SP)


                    self.state = 832
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def s_WithPartQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_WithPartQueryContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_WithPartQueryContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = s_cypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_oC_MultiPartQuery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 837
                    self.s_WithPartQuery()

                else:
                    raise NoViableAltException(self)
                self.state = 840 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

            self.state = 842
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_With(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WithContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_WithPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_WithPartQuery" ):
                listener.enterS_WithPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_WithPartQuery" ):
                listener.exitS_WithPartQuery(self)




    def s_WithPartQuery(self):

        localctx = s_cypherParser.S_WithPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_s_WithPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (s_cypherParser.OPTIONAL - 58)) | (1 << (s_cypherParser.MATCH - 58)) | (1 << (s_cypherParser.UNWIND - 58)) | (1 << (s_cypherParser.CALL - 58)))) != 0):
                self.state = 844
                self.oC_ReadingClause()
                self.state = 846
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 845
                    self.match(s_cypherParser.SP)


                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & ((1 << (s_cypherParser.STALE - 53)) | (1 << (s_cypherParser.MERGE - 53)) | (1 << (s_cypherParser.CREATE - 53)) | (1 << (s_cypherParser.SET - 53)) | (1 << (s_cypherParser.DETACH - 53)) | (1 << (s_cypherParser.DELETE - 53)) | (1 << (s_cypherParser.REMOVE - 53)))) != 0):
                self.state = 853
                self.oC_UpdatingClause()
                self.state = 855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 854
                    self.match(s_cypherParser.SP)


                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 862
            self.oC_With()
            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 863
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(s_cypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = s_cypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_oC_ReadingClause)
        try:
            self.state = 869
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [s_cypherParser.OPTIONAL, s_cypherParser.MATCH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 866
                self.oC_Match()
                pass
            elif token in [s_cypherParser.UNWIND]:
                self.enterOuterAlt(localctx, 2)
                self.state = 867
                self.oC_Unwind()
                pass
            elif token in [s_cypherParser.CALL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 868
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = s_cypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.match(s_cypherParser.UNWIND)
            self.state = 873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 872
                self.match(s_cypherParser.SP)


            self.state = 875
            self.oC_Expression()
            self.state = 876
            self.match(s_cypherParser.SP)
            self.state = 877
            self.match(s_cypherParser.AS)
            self.state = 878
            self.match(s_cypherParser.SP)
            self.state = 879
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = s_cypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.match(s_cypherParser.MERGE)
            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 882
                self.match(s_cypherParser.SP)


            self.state = 885
            self.oC_PatternPart()
            self.state = 890
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 886
                    self.match(s_cypherParser.SP)
                    self.state = 887
                    self.oC_MergeAction() 
                self.state = 892
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = s_cypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_oC_MergeAction)
        try:
            self.state = 903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 893
                self.match(s_cypherParser.ON)
                self.state = 894
                self.match(s_cypherParser.SP)
                self.state = 895
                self.match(s_cypherParser.MATCH)
                self.state = 896
                self.match(s_cypherParser.SP)
                self.state = 897
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 898
                self.match(s_cypherParser.ON)
                self.state = 899
                self.match(s_cypherParser.SP)
                self.state = 900
                self.match(s_cypherParser.CREATE)
                self.state = 901
                self.match(s_cypherParser.SP)
                self.state = 902
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = s_cypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.match(s_cypherParser.CREATE)
            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 906
                self.match(s_cypherParser.SP)


            self.state = 909
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = s_cypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.match(s_cypherParser.SET)
            self.state = 913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 912
                self.match(s_cypherParser.SP)


            self.state = 915
            self.oC_SetItem()
            self.state = 926
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 917
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 916
                        self.match(s_cypherParser.SP)


                    self.state = 919
                    self.match(s_cypherParser.T__3)
                    self.state = 921
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 920
                        self.match(s_cypherParser.SP)


                    self.state = 923
                    self.oC_SetItem() 
                self.state = 928
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = s_cypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 929
            self.match(s_cypherParser.REMOVE)
            self.state = 930
            self.match(s_cypherParser.SP)
            self.state = 931
            self.oC_RemoveItem()
            self.state = 942
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 933
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 932
                        self.match(s_cypherParser.SP)


                    self.state = 935
                    self.match(s_cypherParser.T__3)
                    self.state = 937
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 936
                        self.match(s_cypherParser.SP)


                    self.state = 939
                    self.oC_RemoveItem() 
                self.state = 944
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = s_cypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_oC_RemoveItem)
        try:
            self.state = 949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 945
                self.oC_Variable()
                self.state = 946
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 948
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = s_cypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.match(s_cypherParser.CALL)
            self.state = 952
            self.match(s_cypherParser.SP)
            self.state = 953
            self.oC_ExplicitProcedureInvocation()
            self.state = 960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 954
                    self.match(s_cypherParser.SP)


                self.state = 957
                self.match(s_cypherParser.YIELD)
                self.state = 958
                self.match(s_cypherParser.SP)
                self.state = 959
                self.oC_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = s_cypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_oC_StandaloneCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.match(s_cypherParser.CALL)
            self.state = 963
            self.match(s_cypherParser.SP)
            self.state = 966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 964
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 965
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.state = 969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 968
                    self.match(s_cypherParser.SP)


                self.state = 971
                self.match(s_cypherParser.YIELD)
                self.state = 972
                self.match(s_cypherParser.SP)
                self.state = 975
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [s_cypherParser.T__13]:
                    self.state = 973
                    self.match(s_cypherParser.T__13)
                    pass
                elif token in [s_cypherParser.NOW, s_cypherParser.COUNT, s_cypherParser.ANY, s_cypherParser.NONE, s_cypherParser.SINGLE, s_cypherParser.HexLetter, s_cypherParser.FILTER, s_cypherParser.EXTRACT, s_cypherParser.UnescapedSymbolicName, s_cypherParser.EscapedSymbolicName]:
                    self.state = 974
                    self.oC_YieldItems()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = s_cypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.oC_YieldItem()
            self.state = 990
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,166,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 981
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 980
                        self.match(s_cypherParser.SP)


                    self.state = 983
                    self.match(s_cypherParser.T__3)
                    self.state = 985
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 984
                        self.match(s_cypherParser.SP)


                    self.state = 987
                    self.oC_YieldItem() 
                self.state = 992
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,166,self._ctx)

            self.state = 997
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 993
                    self.match(s_cypherParser.SP)


                self.state = 996
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = s_cypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 999
                self.oC_ProcedureResultField()
                self.state = 1000
                self.match(s_cypherParser.SP)
                self.state = 1001
                self.match(s_cypherParser.AS)
                self.state = 1002
                self.match(s_cypherParser.SP)


            self.state = 1006
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = s_cypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.match(s_cypherParser.WITH)
            self.state = 1009
            self.oC_ProjectionBody()
            self.state = 1014
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1010
                    self.match(s_cypherParser.SP)


                self.state = 1013
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = s_cypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self.match(s_cypherParser.RETURN)
            self.state = 1017
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)




    def oC_ProjectionBody(self):

        localctx = s_cypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1019
                    self.match(s_cypherParser.SP)


                self.state = 1022
                self.match(s_cypherParser.DISTINCT)


            self.state = 1025
            self.match(s_cypherParser.SP)
            self.state = 1026
            self.oC_ProjectionItems()
            self.state = 1029
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1027
                self.match(s_cypherParser.SP)
                self.state = 1028
                self.oC_Order()


            self.state = 1033
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.state = 1031
                self.match(s_cypherParser.SP)
                self.state = 1032
                self.oC_Skip()


            self.state = 1037
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.state = 1035
                self.match(s_cypherParser.SP)
                self.state = 1036
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)




    def oC_ProjectionItems(self):

        localctx = s_cypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 1067
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [s_cypherParser.T__13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1039
                self.match(s_cypherParser.T__13)
                self.state = 1050
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,179,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1041
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==s_cypherParser.SP:
                            self.state = 1040
                            self.match(s_cypherParser.SP)


                        self.state = 1043
                        self.match(s_cypherParser.T__3)
                        self.state = 1045
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==s_cypherParser.SP:
                            self.state = 1044
                            self.match(s_cypherParser.SP)


                        self.state = 1047
                        self.oC_ProjectionItem() 
                    self.state = 1052
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,179,self._ctx)

                pass
            elif token in [s_cypherParser.T__4, s_cypherParser.T__6, s_cypherParser.T__9, s_cypherParser.T__20, s_cypherParser.T__21, s_cypherParser.T__25, s_cypherParser.NOW, s_cypherParser.ALL, s_cypherParser.NOT, s_cypherParser.NULL, s_cypherParser.COUNT, s_cypherParser.CASE, s_cypherParser.ANY, s_cypherParser.NONE, s_cypherParser.SINGLE, s_cypherParser.EXISTS, s_cypherParser.TRUE, s_cypherParser.FALSE, s_cypherParser.HexInteger, s_cypherParser.DecimalInteger, s_cypherParser.OctalInteger, s_cypherParser.HexLetter, s_cypherParser.ExponentDecimalReal, s_cypherParser.RegularDecimalReal, s_cypherParser.StringLiteral, s_cypherParser.FILTER, s_cypherParser.EXTRACT, s_cypherParser.UnescapedSymbolicName, s_cypherParser.EscapedSymbolicName]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1053
                self.oC_ProjectionItem()
                self.state = 1064
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,182,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1055
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==s_cypherParser.SP:
                            self.state = 1054
                            self.match(s_cypherParser.SP)


                        self.state = 1057
                        self.match(s_cypherParser.T__3)
                        self.state = 1059
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==s_cypherParser.SP:
                            self.state = 1058
                            self.match(s_cypherParser.SP)


                        self.state = 1061
                        self.oC_ProjectionItem() 
                    self.state = 1066
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)




    def oC_ProjectionItem(self):

        localctx = s_cypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_oC_ProjectionItem)
        try:
            self.state = 1076
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1069
                self.oC_Expression()
                self.state = 1070
                self.match(s_cypherParser.SP)
                self.state = 1071
                self.match(s_cypherParser.AS)
                self.state = 1072
                self.match(s_cypherParser.SP)
                self.state = 1073
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1075
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = s_cypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            self.match(s_cypherParser.ORDER)
            self.state = 1079
            self.match(s_cypherParser.SP)
            self.state = 1080
            self.match(s_cypherParser.BY)
            self.state = 1081
            self.match(s_cypherParser.SP)
            self.state = 1082
            self.oC_SortItem()
            self.state = 1090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==s_cypherParser.T__3:
                self.state = 1083
                self.match(s_cypherParser.T__3)
                self.state = 1085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1084
                    self.match(s_cypherParser.SP)


                self.state = 1087
                self.oC_SortItem()
                self.state = 1092
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = s_cypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1093
            self.match(s_cypherParser.L_SKIP)
            self.state = 1094
            self.match(s_cypherParser.SP)
            self.state = 1095
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = s_cypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1097
            self.match(s_cypherParser.LIMIT)
            self.state = 1098
            self.match(s_cypherParser.SP)
            self.state = 1099
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = s_cypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            self.oC_Expression()
            self.state = 1106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.state = 1103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1102
                    self.match(s_cypherParser.SP)


                self.state = 1105
                _la = self._input.LA(1)
                if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (s_cypherParser.ASCENDING - 78)) | (1 << (s_cypherParser.ASC - 78)) | (1 << (s_cypherParser.DESCENDING - 78)) | (1 << (s_cypherParser.DESC - 78)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = s_cypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self.match(s_cypherParser.WHERE)
            self.state = 1109
            self.match(s_cypherParser.SP)
            self.state = 1110
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = s_cypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1112
            self.oC_PatternPart()
            self.state = 1123
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,191,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1114
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 1113
                        self.match(s_cypherParser.SP)


                    self.state = 1116
                    self.match(s_cypherParser.T__3)
                    self.state = 1118
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 1117
                        self.match(s_cypherParser.SP)


                    self.state = 1120
                    self.oC_PatternPart() 
                self.state = 1125
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,191,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = s_cypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1126
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = s_cypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 1142
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1128
                self.oC_NodePattern()
                self.state = 1135
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,193,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1130
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==s_cypherParser.SP:
                            self.state = 1129
                            self.match(s_cypherParser.SP)


                        self.state = 1132
                        self.oC_PatternElementChain() 
                    self.state = 1137
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,193,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1138
                self.match(s_cypherParser.T__4)
                self.state = 1139
                self.oC_PatternElement()
                self.state = 1140
                self.match(s_cypherParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = s_cypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1144
            self.oC_NodePattern()
            self.state = 1149 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1146
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 1145
                        self.match(s_cypherParser.SP)


                    self.state = 1148
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 1151 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,196,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = s_cypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            self.oC_RelationshipPattern()
            self.state = 1155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1154
                self.match(s_cypherParser.SP)


            self.state = 1157
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = s_cypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 1223
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1159
                self.oC_LeftArrowHead()
                self.state = 1161
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1160
                    self.match(s_cypherParser.SP)


                self.state = 1163
                self.oC_Dash()
                self.state = 1165
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                if la_ == 1:
                    self.state = 1164
                    self.match(s_cypherParser.SP)


                self.state = 1168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.T__9:
                    self.state = 1167
                    self.oC_RelationshipDetail()


                self.state = 1171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1170
                    self.match(s_cypherParser.SP)


                self.state = 1173
                self.oC_Dash()
                self.state = 1175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1174
                    self.match(s_cypherParser.SP)


                self.state = 1177
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1179
                self.oC_LeftArrowHead()
                self.state = 1181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1180
                    self.match(s_cypherParser.SP)


                self.state = 1183
                self.oC_Dash()
                self.state = 1185
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
                if la_ == 1:
                    self.state = 1184
                    self.match(s_cypherParser.SP)


                self.state = 1188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.T__9:
                    self.state = 1187
                    self.oC_RelationshipDetail()


                self.state = 1191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1190
                    self.match(s_cypherParser.SP)


                self.state = 1193
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1195
                self.oC_Dash()
                self.state = 1197
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
                if la_ == 1:
                    self.state = 1196
                    self.match(s_cypherParser.SP)


                self.state = 1200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.T__9:
                    self.state = 1199
                    self.oC_RelationshipDetail()


                self.state = 1203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1202
                    self.match(s_cypherParser.SP)


                self.state = 1205
                self.oC_Dash()
                self.state = 1207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1206
                    self.match(s_cypherParser.SP)


                self.state = 1209
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1211
                self.oC_Dash()
                self.state = 1213
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
                if la_ == 1:
                    self.state = 1212
                    self.match(s_cypherParser.SP)


                self.state = 1216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.T__9:
                    self.state = 1215
                    self.oC_RelationshipDetail()


                self.state = 1219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1218
                    self.match(s_cypherParser.SP)


                self.state = 1221
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = s_cypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_oC_Properties)
        try:
            self.state = 1227
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [s_cypherParser.T__6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1225
                self.oC_MapLiteral()
                pass
            elif token in [s_cypherParser.T__25]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1226
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = s_cypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1229
            self.match(s_cypherParser.T__7)
            self.state = 1231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1230
                self.match(s_cypherParser.SP)


            self.state = 1233
            self.oC_RelTypeName()
            self.state = 1247
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,220,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1235
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 1234
                        self.match(s_cypherParser.SP)


                    self.state = 1237
                    self.match(s_cypherParser.T__14)
                    self.state = 1239
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.T__7:
                        self.state = 1238
                        self.match(s_cypherParser.T__7)


                    self.state = 1242
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 1241
                        self.match(s_cypherParser.SP)


                    self.state = 1244
                    self.oC_RelTypeName() 
                self.state = 1249
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,220,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = s_cypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1250
            self.oC_NodeLabel()
            self.state = 1257
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,222,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1252
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 1251
                        self.match(s_cypherParser.SP)


                    self.state = 1254
                    self.oC_NodeLabel() 
                self.state = 1259
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,222,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = s_cypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            self.match(s_cypherParser.T__7)
            self.state = 1262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1261
                self.match(s_cypherParser.SP)


            self.state = 1264
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = s_cypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1266
            self.match(s_cypherParser.T__13)
            self.state = 1268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1267
                self.match(s_cypherParser.SP)


            self.state = 1274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & ((1 << (s_cypherParser.HexInteger - 105)) | (1 << (s_cypherParser.DecimalInteger - 105)) | (1 << (s_cypherParser.OctalInteger - 105)))) != 0):
                self.state = 1270
                self.oC_IntegerLiteral()
                self.state = 1272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1271
                    self.match(s_cypherParser.SP)




            self.state = 1286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.T__11:
                self.state = 1276
                self.match(s_cypherParser.T__11)
                self.state = 1278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1277
                    self.match(s_cypherParser.SP)


                self.state = 1284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & ((1 << (s_cypherParser.HexInteger - 105)) | (1 << (s_cypherParser.DecimalInteger - 105)) | (1 << (s_cypherParser.OctalInteger - 105)))) != 0):
                    self.state = 1280
                    self.oC_IntegerLiteral()
                    self.state = 1282
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 1281
                        self.match(s_cypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = s_cypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = s_cypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1290
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = s_cypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292
            self.oC_Atom()
            self.state = 1297 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1294
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 1293
                        self.match(s_cypherParser.SP)


                    self.state = 1296
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 1299 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = s_cypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1301
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = s_cypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1303
            self.oC_XorExpression()
            self.state = 1310
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,233,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1304
                    self.match(s_cypherParser.SP)
                    self.state = 1305
                    self.match(s_cypherParser.OR)
                    self.state = 1306
                    self.match(s_cypherParser.SP)
                    self.state = 1307
                    self.oC_XorExpression() 
                self.state = 1312
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,233,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = s_cypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1313
            self.oC_AndExpression()
            self.state = 1320
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,234,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1314
                    self.match(s_cypherParser.SP)
                    self.state = 1315
                    self.match(s_cypherParser.XOR)
                    self.state = 1316
                    self.match(s_cypherParser.SP)
                    self.state = 1317
                    self.oC_AndExpression() 
                self.state = 1322
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,234,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = s_cypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1323
            self.oC_NotExpression()
            self.state = 1330
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,235,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1324
                    self.match(s_cypherParser.SP)
                    self.state = 1325
                    self.match(s_cypherParser.AND)
                    self.state = 1326
                    self.match(s_cypherParser.SP)
                    self.state = 1327
                    self.oC_NotExpression() 
                self.state = 1332
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,235,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = s_cypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==s_cypherParser.NOT:
                self.state = 1333
                self.match(s_cypherParser.NOT)
                self.state = 1335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1334
                    self.match(s_cypherParser.SP)


                self.state = 1341
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1342
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def oC_PartialComparisonExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PartialComparisonExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PartialComparisonExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = s_cypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            self.oC_StringListNullPredicateExpression()
            self.state = 1351
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,239,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1346
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 1345
                        self.match(s_cypherParser.SP)


                    self.state = 1348
                    self.oC_PartialComparisonExpression() 
                self.state = 1353
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,239,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PartialComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PartialComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PartialComparisonExpression" ):
                listener.enterOC_PartialComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PartialComparisonExpression" ):
                listener.exitOC_PartialComparisonExpression(self)




    def oC_PartialComparisonExpression(self):

        localctx = s_cypherParser.OC_PartialComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_PartialComparisonExpression)
        self._la = 0 # Token type
        try:
            self.state = 1384
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [s_cypherParser.T__1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1354
                self.match(s_cypherParser.T__1)
                self.state = 1356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1355
                    self.match(s_cypherParser.SP)


                self.state = 1358
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [s_cypherParser.T__15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1359
                self.match(s_cypherParser.T__15)
                self.state = 1361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1360
                    self.match(s_cypherParser.SP)


                self.state = 1363
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [s_cypherParser.T__16]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1364
                self.match(s_cypherParser.T__16)
                self.state = 1366
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1365
                    self.match(s_cypherParser.SP)


                self.state = 1368
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [s_cypherParser.T__17]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1369
                self.match(s_cypherParser.T__17)
                self.state = 1371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1370
                    self.match(s_cypherParser.SP)


                self.state = 1373
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [s_cypherParser.T__18]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1374
                self.match(s_cypherParser.T__18)
                self.state = 1376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1375
                    self.match(s_cypherParser.SP)


                self.state = 1378
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [s_cypherParser.T__19]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1379
                self.match(s_cypherParser.T__19)
                self.state = 1381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1380
                    self.match(s_cypherParser.SP)


                self.state = 1383
                self.oC_StringListNullPredicateExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringPredicateExpression" ):
                listener.enterOC_StringPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringPredicateExpression" ):
                listener.exitOC_StringPredicateExpression(self)




    def oC_StringPredicateExpression(self):

        localctx = s_cypherParser.OC_StringPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_StringPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
            if la_ == 1:
                self.state = 1386
                self.match(s_cypherParser.SP)
                self.state = 1387
                self.match(s_cypherParser.STARTS)
                self.state = 1388
                self.match(s_cypherParser.SP)
                self.state = 1389
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1390
                self.match(s_cypherParser.SP)
                self.state = 1391
                self.match(s_cypherParser.ENDS)
                self.state = 1392
                self.match(s_cypherParser.SP)
                self.state = 1393
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1394
                self.match(s_cypherParser.SP)
                self.state = 1395
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 1399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1398
                self.match(s_cypherParser.SP)


            self.state = 1401
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListPredicateExpression" ):
                listener.enterOC_ListPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListPredicateExpression" ):
                listener.exitOC_ListPredicateExpression(self)




    def oC_ListPredicateExpression(self):

        localctx = s_cypherParser.OC_ListPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_ListPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1403
            self.match(s_cypherParser.SP)
            self.state = 1404
            self.match(s_cypherParser.IN)
            self.state = 1406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1405
                self.match(s_cypherParser.SP)


            self.state = 1408
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullPredicateExpression" ):
                listener.enterOC_NullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullPredicateExpression" ):
                listener.exitOC_NullPredicateExpression(self)




    def oC_NullPredicateExpression(self):

        localctx = s_cypherParser.OC_NullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_NullPredicateExpression)
        try:
            self.state = 1420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1410
                self.match(s_cypherParser.SP)
                self.state = 1411
                self.match(s_cypherParser.IS)
                self.state = 1412
                self.match(s_cypherParser.SP)
                self.state = 1413
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1414
                self.match(s_cypherParser.SP)
                self.state = 1415
                self.match(s_cypherParser.IS)
                self.state = 1416
                self.match(s_cypherParser.SP)
                self.state = 1417
                self.match(s_cypherParser.NOT)
                self.state = 1418
                self.match(s_cypherParser.SP)
                self.state = 1419
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1422
            self.oC_MultiplyDivideModuloExpression()
            self.state = 1441
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,256,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1439
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
                    if la_ == 1:
                        self.state = 1424
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==s_cypherParser.SP:
                            self.state = 1423
                            self.match(s_cypherParser.SP)


                        self.state = 1426
                        self.match(s_cypherParser.T__20)
                        self.state = 1428
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==s_cypherParser.SP:
                            self.state = 1427
                            self.match(s_cypherParser.SP)


                        self.state = 1430
                        self.oC_MultiplyDivideModuloExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1432
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==s_cypherParser.SP:
                            self.state = 1431
                            self.match(s_cypherParser.SP)


                        self.state = 1434
                        self.match(s_cypherParser.T__21)
                        self.state = 1436
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==s_cypherParser.SP:
                            self.state = 1435
                            self.match(s_cypherParser.SP)


                        self.state = 1438
                        self.oC_MultiplyDivideModuloExpression()
                        pass

             
                self.state = 1443
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,256,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PowerOfExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = s_cypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1444
            self.oC_PowerOfExpression()
            self.state = 1471
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,264,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1469
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
                    if la_ == 1:
                        self.state = 1446
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==s_cypherParser.SP:
                            self.state = 1445
                            self.match(s_cypherParser.SP)


                        self.state = 1448
                        self.match(s_cypherParser.T__13)
                        self.state = 1450
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==s_cypherParser.SP:
                            self.state = 1449
                            self.match(s_cypherParser.SP)


                        self.state = 1452
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1454
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==s_cypherParser.SP:
                            self.state = 1453
                            self.match(s_cypherParser.SP)


                        self.state = 1456
                        self.match(s_cypherParser.T__22)
                        self.state = 1458
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==s_cypherParser.SP:
                            self.state = 1457
                            self.match(s_cypherParser.SP)


                        self.state = 1460
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1462
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==s_cypherParser.SP:
                            self.state = 1461
                            self.match(s_cypherParser.SP)


                        self.state = 1464
                        self.match(s_cypherParser.T__23)
                        self.state = 1466
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==s_cypherParser.SP:
                            self.state = 1465
                            self.match(s_cypherParser.SP)


                        self.state = 1468
                        self.oC_PowerOfExpression()
                        pass

             
                self.state = 1473
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,264,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = s_cypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1474
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 1485
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,267,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1476
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 1475
                        self.match(s_cypherParser.SP)


                    self.state = 1478
                    self.match(s_cypherParser.T__24)
                    self.state = 1480
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 1479
                        self.match(s_cypherParser.SP)


                    self.state = 1482
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 1487
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,267,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ListOperatorExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListOperatorExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.state = 1494
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [s_cypherParser.T__4, s_cypherParser.T__6, s_cypherParser.T__9, s_cypherParser.T__25, s_cypherParser.NOW, s_cypherParser.ALL, s_cypherParser.NULL, s_cypherParser.COUNT, s_cypherParser.CASE, s_cypherParser.ANY, s_cypherParser.NONE, s_cypherParser.SINGLE, s_cypherParser.EXISTS, s_cypherParser.TRUE, s_cypherParser.FALSE, s_cypherParser.HexInteger, s_cypherParser.DecimalInteger, s_cypherParser.OctalInteger, s_cypherParser.HexLetter, s_cypherParser.ExponentDecimalReal, s_cypherParser.RegularDecimalReal, s_cypherParser.StringLiteral, s_cypherParser.FILTER, s_cypherParser.EXTRACT, s_cypherParser.UnescapedSymbolicName, s_cypherParser.EscapedSymbolicName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1488
                self.oC_ListOperatorExpression()
                pass
            elif token in [s_cypherParser.T__20, s_cypherParser.T__21]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1489
                _la = self._input.LA(1)
                if not(_la==s_cypherParser.T__20 or _la==s_cypherParser.T__21):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1490
                    self.match(s_cypherParser.SP)


                self.state = 1493
                self.oC_ListOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyOrLabelsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyOrLabelsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyOrLabelsExpression" ):
                listener.enterOC_PropertyOrLabelsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyOrLabelsExpression" ):
                listener.exitOC_PropertyOrLabelsExpression(self)




    def oC_PropertyOrLabelsExpression(self):

        localctx = s_cypherParser.OC_PropertyOrLabelsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_PropertyOrLabelsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1496
            self.oC_Atom()
            self.state = 1503
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,271,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1498
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 1497
                        self.match(s_cypherParser.SP)


                    self.state = 1500
                    self.oC_PropertyLookup() 
                self.state = 1505
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,271,self._ctx)

            self.state = 1510
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.state = 1507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1506
                    self.match(s_cypherParser.SP)


                self.state = 1509
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = s_cypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1512
            self.match(s_cypherParser.T__0)
            self.state = 1514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1513
                self.match(s_cypherParser.SP)


            self.state = 1516
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternComprehensionContext,0)


        def oC_Quantifier(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QuantifierContext,0)


        def oC_PatternPredicate(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPredicateContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionInvocationContext,0)


        def oC_ExistentialSubquery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExistentialSubqueryContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = s_cypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 1542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1518
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1519
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1520
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1521
                self.match(s_cypherParser.COUNT)
                self.state = 1523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1522
                    self.match(s_cypherParser.SP)


                self.state = 1525
                self.match(s_cypherParser.T__4)
                self.state = 1527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1526
                    self.match(s_cypherParser.SP)


                self.state = 1529
                self.match(s_cypherParser.T__13)
                self.state = 1531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1530
                    self.match(s_cypherParser.SP)


                self.state = 1533
                self.match(s_cypherParser.T__5)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1534
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1535
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1536
                self.oC_Quantifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1537
                self.oC_PatternPredicate()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1538
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1539
                self.oC_FunctionInvocation()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1540
                self.oC_ExistentialSubquery()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1541
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def oC_CaseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_CaseAlternativeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = s_cypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.state = 1544
                self.match(s_cypherParser.CASE)
                self.state = 1549 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1546
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==s_cypherParser.SP:
                            self.state = 1545
                            self.match(s_cypherParser.SP)


                        self.state = 1548
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1551 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,280,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1553
                self.match(s_cypherParser.CASE)
                self.state = 1555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1554
                    self.match(s_cypherParser.SP)


                self.state = 1557
                self.oC_Expression()
                self.state = 1562 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1559
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==s_cypherParser.SP:
                            self.state = 1558
                            self.match(s_cypherParser.SP)


                        self.state = 1561
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1564 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,283,self._ctx)

                pass


            self.state = 1576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.state = 1569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1568
                    self.match(s_cypherParser.SP)


                self.state = 1571
                self.match(s_cypherParser.ELSE)
                self.state = 1573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1572
                    self.match(s_cypherParser.SP)


                self.state = 1575
                self.oC_Expression()


            self.state = 1579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1578
                self.match(s_cypherParser.SP)


            self.state = 1581
            self.match(s_cypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternative" ):
                listener.enterOC_CaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternative" ):
                listener.exitOC_CaseAlternative(self)




    def oC_CaseAlternative(self):

        localctx = s_cypherParser.OC_CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_CaseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1583
            self.match(s_cypherParser.WHEN)
            self.state = 1585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1584
                self.match(s_cypherParser.SP)


            self.state = 1587
            self.oC_Expression()
            self.state = 1589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1588
                self.match(s_cypherParser.SP)


            self.state = 1591
            self.match(s_cypherParser.THEN)
            self.state = 1593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1592
                self.match(s_cypherParser.SP)


            self.state = 1595
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = s_cypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1597
            self.match(s_cypherParser.T__9)
            self.state = 1599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1598
                self.match(s_cypherParser.SP)


            self.state = 1601
            self.oC_FilterExpression()
            self.state = 1610
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.state = 1603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1602
                    self.match(s_cypherParser.SP)


                self.state = 1605
                self.match(s_cypherParser.T__14)
                self.state = 1607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1606
                    self.match(s_cypherParser.SP)


                self.state = 1609
                self.oC_Expression()


            self.state = 1613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1612
                self.match(s_cypherParser.SP)


            self.state = 1615
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = s_cypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1617
            self.match(s_cypherParser.T__9)
            self.state = 1619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1618
                self.match(s_cypherParser.SP)


            self.state = 1629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.NOW or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (s_cypherParser.COUNT - 93)) | (1 << (s_cypherParser.ANY - 93)) | (1 << (s_cypherParser.NONE - 93)) | (1 << (s_cypherParser.SINGLE - 93)) | (1 << (s_cypherParser.HexLetter - 93)) | (1 << (s_cypherParser.FILTER - 93)) | (1 << (s_cypherParser.EXTRACT - 93)) | (1 << (s_cypherParser.UnescapedSymbolicName - 93)) | (1 << (s_cypherParser.EscapedSymbolicName - 93)))) != 0):
                self.state = 1621
                self.oC_Variable()
                self.state = 1623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1622
                    self.match(s_cypherParser.SP)


                self.state = 1625
                self.match(s_cypherParser.T__1)
                self.state = 1627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1626
                    self.match(s_cypherParser.SP)




            self.state = 1631
            self.oC_RelationshipsPattern()
            self.state = 1633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1632
                self.match(s_cypherParser.SP)


            self.state = 1639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.WHERE:
                self.state = 1635
                self.oC_Where()
                self.state = 1637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1636
                    self.match(s_cypherParser.SP)




            self.state = 1641
            self.match(s_cypherParser.T__14)
            self.state = 1643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1642
                self.match(s_cypherParser.SP)


            self.state = 1645
            self.oC_Expression()
            self.state = 1647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1646
                self.match(s_cypherParser.SP)


            self.state = 1649
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Quantifier" ):
                listener.enterOC_Quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Quantifier" ):
                listener.exitOC_Quantifier(self)




    def oC_Quantifier(self):

        localctx = s_cypherParser.OC_QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_Quantifier)
        self._la = 0 # Token type
        try:
            self.state = 1707
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [s_cypherParser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1651
                self.match(s_cypherParser.ALL)
                self.state = 1653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1652
                    self.match(s_cypherParser.SP)


                self.state = 1655
                self.match(s_cypherParser.T__4)
                self.state = 1657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1656
                    self.match(s_cypherParser.SP)


                self.state = 1659
                self.oC_FilterExpression()
                self.state = 1661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1660
                    self.match(s_cypherParser.SP)


                self.state = 1663
                self.match(s_cypherParser.T__5)
                pass
            elif token in [s_cypherParser.ANY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1665
                self.match(s_cypherParser.ANY)
                self.state = 1667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1666
                    self.match(s_cypherParser.SP)


                self.state = 1669
                self.match(s_cypherParser.T__4)
                self.state = 1671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1670
                    self.match(s_cypherParser.SP)


                self.state = 1673
                self.oC_FilterExpression()
                self.state = 1675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1674
                    self.match(s_cypherParser.SP)


                self.state = 1677
                self.match(s_cypherParser.T__5)
                pass
            elif token in [s_cypherParser.NONE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1679
                self.match(s_cypherParser.NONE)
                self.state = 1681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1680
                    self.match(s_cypherParser.SP)


                self.state = 1683
                self.match(s_cypherParser.T__4)
                self.state = 1685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1684
                    self.match(s_cypherParser.SP)


                self.state = 1687
                self.oC_FilterExpression()
                self.state = 1689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1688
                    self.match(s_cypherParser.SP)


                self.state = 1691
                self.match(s_cypherParser.T__5)
                pass
            elif token in [s_cypherParser.SINGLE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1693
                self.match(s_cypherParser.SINGLE)
                self.state = 1695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1694
                    self.match(s_cypherParser.SP)


                self.state = 1697
                self.match(s_cypherParser.T__4)
                self.state = 1699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1698
                    self.match(s_cypherParser.SP)


                self.state = 1701
                self.oC_FilterExpression()
                self.state = 1703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1702
                    self.match(s_cypherParser.SP)


                self.state = 1705
                self.match(s_cypherParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IdInCollContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = s_cypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1709
            self.oC_IdInColl()
            self.state = 1714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,320,self._ctx)
            if la_ == 1:
                self.state = 1711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1710
                    self.match(s_cypherParser.SP)


                self.state = 1713
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPredicate" ):
                listener.enterOC_PatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPredicate" ):
                listener.exitOC_PatternPredicate(self)




    def oC_PatternPredicate(self):

        localctx = s_cypherParser.OC_PatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_PatternPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1716
            self.oC_RelationshipsPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = s_cypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1718
            self.match(s_cypherParser.T__4)
            self.state = 1720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1719
                self.match(s_cypherParser.SP)


            self.state = 1722
            self.oC_Expression()
            self.state = 1724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1723
                self.match(s_cypherParser.SP)


            self.state = 1726
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = s_cypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1728
            self.oC_Variable()
            self.state = 1729
            self.match(s_cypherParser.SP)
            self.state = 1730
            self.match(s_cypherParser.IN)
            self.state = 1731
            self.match(s_cypherParser.SP)
            self.state = 1732
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = s_cypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1734
            self.oC_FunctionName()
            self.state = 1736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1735
                self.match(s_cypherParser.SP)


            self.state = 1738
            self.match(s_cypherParser.T__4)
            self.state = 1740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1739
                self.match(s_cypherParser.SP)


            self.state = 1746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.DISTINCT:
                self.state = 1742
                self.match(s_cypherParser.DISTINCT)
                self.state = 1744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1743
                    self.match(s_cypherParser.SP)




            self.state = 1765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << s_cypherParser.T__4) | (1 << s_cypherParser.T__6) | (1 << s_cypherParser.T__9) | (1 << s_cypherParser.T__20) | (1 << s_cypherParser.T__21) | (1 << s_cypherParser.T__25) | (1 << s_cypherParser.NOW) | (1 << s_cypherParser.ALL))) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (s_cypherParser.NOT - 86)) | (1 << (s_cypherParser.NULL - 86)) | (1 << (s_cypherParser.COUNT - 86)) | (1 << (s_cypherParser.CASE - 86)) | (1 << (s_cypherParser.ANY - 86)) | (1 << (s_cypherParser.NONE - 86)) | (1 << (s_cypherParser.SINGLE - 86)) | (1 << (s_cypherParser.EXISTS - 86)) | (1 << (s_cypherParser.TRUE - 86)) | (1 << (s_cypherParser.FALSE - 86)) | (1 << (s_cypherParser.HexInteger - 86)) | (1 << (s_cypherParser.DecimalInteger - 86)) | (1 << (s_cypherParser.OctalInteger - 86)) | (1 << (s_cypherParser.HexLetter - 86)) | (1 << (s_cypherParser.ExponentDecimalReal - 86)) | (1 << (s_cypherParser.RegularDecimalReal - 86)) | (1 << (s_cypherParser.StringLiteral - 86)) | (1 << (s_cypherParser.FILTER - 86)) | (1 << (s_cypherParser.EXTRACT - 86)) | (1 << (s_cypherParser.UnescapedSymbolicName - 86)) | (1 << (s_cypherParser.EscapedSymbolicName - 86)))) != 0):
                self.state = 1748
                self.oC_Expression()
                self.state = 1750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1749
                    self.match(s_cypherParser.SP)


                self.state = 1762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==s_cypherParser.T__3:
                    self.state = 1752
                    self.match(s_cypherParser.T__3)
                    self.state = 1754
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 1753
                        self.match(s_cypherParser.SP)


                    self.state = 1756
                    self.oC_Expression()
                    self.state = 1758
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 1757
                        self.match(s_cypherParser.SP)


                    self.state = 1764
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1767
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = s_cypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_FunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1769
            self.oC_Namespace()
            self.state = 1770
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExistentialSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExistentialSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExistentialSubquery" ):
                listener.enterOC_ExistentialSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExistentialSubquery" ):
                listener.exitOC_ExistentialSubquery(self)




    def oC_ExistentialSubquery(self):

        localctx = s_cypherParser.OC_ExistentialSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_oC_ExistentialSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1772
            self.match(s_cypherParser.EXISTS)
            self.state = 1774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1773
                self.match(s_cypherParser.SP)


            self.state = 1776
            self.match(s_cypherParser.T__6)
            self.state = 1778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1777
                self.match(s_cypherParser.SP)


            self.state = 1788
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [s_cypherParser.STALE, s_cypherParser.OPTIONAL, s_cypherParser.MATCH, s_cypherParser.UNWIND, s_cypherParser.MERGE, s_cypherParser.CREATE, s_cypherParser.SET, s_cypherParser.DETACH, s_cypherParser.DELETE, s_cypherParser.REMOVE, s_cypherParser.CALL, s_cypherParser.WITH, s_cypherParser.RETURN]:
                self.state = 1780
                self.oC_RegularQuery()
                pass
            elif token in [s_cypherParser.T__4, s_cypherParser.NOW, s_cypherParser.COUNT, s_cypherParser.ANY, s_cypherParser.NONE, s_cypherParser.SINGLE, s_cypherParser.HexLetter, s_cypherParser.FILTER, s_cypherParser.EXTRACT, s_cypherParser.UnescapedSymbolicName, s_cypherParser.EscapedSymbolicName]:
                self.state = 1781
                self.oC_Pattern()
                self.state = 1786
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
                if la_ == 1:
                    self.state = 1783
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 1782
                        self.match(s_cypherParser.SP)


                    self.state = 1785
                    self.oC_Where()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1790
                self.match(s_cypherParser.SP)


            self.state = 1793
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1795
            self.oC_ProcedureName()
            self.state = 1797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1796
                self.match(s_cypherParser.SP)


            self.state = 1799
            self.match(s_cypherParser.T__4)
            self.state = 1801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1800
                self.match(s_cypherParser.SP)


            self.state = 1820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << s_cypherParser.T__4) | (1 << s_cypherParser.T__6) | (1 << s_cypherParser.T__9) | (1 << s_cypherParser.T__20) | (1 << s_cypherParser.T__21) | (1 << s_cypherParser.T__25) | (1 << s_cypherParser.NOW) | (1 << s_cypherParser.ALL))) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (s_cypherParser.NOT - 86)) | (1 << (s_cypherParser.NULL - 86)) | (1 << (s_cypherParser.COUNT - 86)) | (1 << (s_cypherParser.CASE - 86)) | (1 << (s_cypherParser.ANY - 86)) | (1 << (s_cypherParser.NONE - 86)) | (1 << (s_cypherParser.SINGLE - 86)) | (1 << (s_cypherParser.EXISTS - 86)) | (1 << (s_cypherParser.TRUE - 86)) | (1 << (s_cypherParser.FALSE - 86)) | (1 << (s_cypherParser.HexInteger - 86)) | (1 << (s_cypherParser.DecimalInteger - 86)) | (1 << (s_cypherParser.OctalInteger - 86)) | (1 << (s_cypherParser.HexLetter - 86)) | (1 << (s_cypherParser.ExponentDecimalReal - 86)) | (1 << (s_cypherParser.RegularDecimalReal - 86)) | (1 << (s_cypherParser.StringLiteral - 86)) | (1 << (s_cypherParser.FILTER - 86)) | (1 << (s_cypherParser.EXTRACT - 86)) | (1 << (s_cypherParser.UnescapedSymbolicName - 86)) | (1 << (s_cypherParser.EscapedSymbolicName - 86)))) != 0):
                self.state = 1803
                self.oC_Expression()
                self.state = 1805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1804
                    self.match(s_cypherParser.SP)


                self.state = 1817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==s_cypherParser.T__3:
                    self.state = 1807
                    self.match(s_cypherParser.T__3)
                    self.state = 1809
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 1808
                        self.match(s_cypherParser.SP)


                    self.state = 1811
                    self.oC_Expression()
                    self.state = 1813
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 1812
                        self.match(s_cypherParser.SP)


                    self.state = 1819
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1822
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1824
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = s_cypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1826
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = s_cypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1828
            self.oC_Namespace()
            self.state = 1829
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = s_cypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1836
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,345,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1831
                    self.oC_SymbolicName()
                    self.state = 1832
                    self.match(s_cypherParser.T__0) 
                self.state = 1838
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,345,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = s_cypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1839
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_ListLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListLiteralContext,0)


        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = s_cypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_oC_Literal)
        try:
            self.state = 1847
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [s_cypherParser.TRUE, s_cypherParser.FALSE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1841
                self.oC_BooleanLiteral()
                pass
            elif token in [s_cypherParser.NULL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1842
                self.match(s_cypherParser.NULL)
                pass
            elif token in [s_cypherParser.HexInteger, s_cypherParser.DecimalInteger, s_cypherParser.OctalInteger, s_cypherParser.ExponentDecimalReal, s_cypherParser.RegularDecimalReal]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1843
                self.oC_NumberLiteral()
                pass
            elif token in [s_cypherParser.StringLiteral]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1844
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [s_cypherParser.T__9]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1845
                self.oC_ListLiteral()
                pass
            elif token in [s_cypherParser.T__6]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1846
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = s_cypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1849
            _la = self._input.LA(1)
            if not(_la==s_cypherParser.TRUE or _la==s_cypherParser.FALSE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = s_cypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_oC_NumberLiteral)
        try:
            self.state = 1853
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [s_cypherParser.ExponentDecimalReal, s_cypherParser.RegularDecimalReal]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1851
                self.oC_DoubleLiteral()
                pass
            elif token in [s_cypherParser.HexInteger, s_cypherParser.DecimalInteger, s_cypherParser.OctalInteger]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1852
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(s_cypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(s_cypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = s_cypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1855
            _la = self._input.LA(1)
            if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & ((1 << (s_cypherParser.HexInteger - 105)) | (1 << (s_cypherParser.DecimalInteger - 105)) | (1 << (s_cypherParser.OctalInteger - 105)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(s_cypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(s_cypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = s_cypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1857
            _la = self._input.LA(1)
            if not(_la==s_cypherParser.ExponentDecimalReal or _la==s_cypherParser.RegularDecimalReal):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = s_cypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1859
            self.match(s_cypherParser.T__9)
            self.state = 1861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1860
                self.match(s_cypherParser.SP)


            self.state = 1880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << s_cypherParser.T__4) | (1 << s_cypherParser.T__6) | (1 << s_cypherParser.T__9) | (1 << s_cypherParser.T__20) | (1 << s_cypherParser.T__21) | (1 << s_cypherParser.T__25) | (1 << s_cypherParser.NOW) | (1 << s_cypherParser.ALL))) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (s_cypherParser.NOT - 86)) | (1 << (s_cypherParser.NULL - 86)) | (1 << (s_cypherParser.COUNT - 86)) | (1 << (s_cypherParser.CASE - 86)) | (1 << (s_cypherParser.ANY - 86)) | (1 << (s_cypherParser.NONE - 86)) | (1 << (s_cypherParser.SINGLE - 86)) | (1 << (s_cypherParser.EXISTS - 86)) | (1 << (s_cypherParser.TRUE - 86)) | (1 << (s_cypherParser.FALSE - 86)) | (1 << (s_cypherParser.HexInteger - 86)) | (1 << (s_cypherParser.DecimalInteger - 86)) | (1 << (s_cypherParser.OctalInteger - 86)) | (1 << (s_cypherParser.HexLetter - 86)) | (1 << (s_cypherParser.ExponentDecimalReal - 86)) | (1 << (s_cypherParser.RegularDecimalReal - 86)) | (1 << (s_cypherParser.StringLiteral - 86)) | (1 << (s_cypherParser.FILTER - 86)) | (1 << (s_cypherParser.EXTRACT - 86)) | (1 << (s_cypherParser.UnescapedSymbolicName - 86)) | (1 << (s_cypherParser.EscapedSymbolicName - 86)))) != 0):
                self.state = 1863
                self.oC_Expression()
                self.state = 1865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1864
                    self.match(s_cypherParser.SP)


                self.state = 1877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==s_cypherParser.T__3:
                    self.state = 1867
                    self.match(s_cypherParser.T__3)
                    self.state = 1869
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 1868
                        self.match(s_cypherParser.SP)


                    self.state = 1871
                    self.oC_Expression()
                    self.state = 1873
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 1872
                        self.match(s_cypherParser.SP)


                    self.state = 1879
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1882
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyKeyName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyKeyNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,i)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = s_cypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1884
            self.match(s_cypherParser.T__6)
            self.state = 1886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==s_cypherParser.SP:
                self.state = 1885
                self.match(s_cypherParser.SP)


            self.state = 1921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (s_cypherParser.NOW - 48)) | (1 << (s_cypherParser.AT_TIME - 48)) | (1 << (s_cypherParser.SNAPSHOT - 48)) | (1 << (s_cypherParser.BETWEEN - 48)) | (1 << (s_cypherParser.SCOPE - 48)) | (1 << (s_cypherParser.STALE - 48)) | (1 << (s_cypherParser.DURING - 48)) | (1 << (s_cypherParser.OVERLAPS - 48)) | (1 << (s_cypherParser.UNION - 48)) | (1 << (s_cypherParser.ALL - 48)) | (1 << (s_cypherParser.OPTIONAL - 48)) | (1 << (s_cypherParser.MATCH - 48)) | (1 << (s_cypherParser.UNWIND - 48)) | (1 << (s_cypherParser.AS - 48)) | (1 << (s_cypherParser.MERGE - 48)) | (1 << (s_cypherParser.ON - 48)) | (1 << (s_cypherParser.CREATE - 48)) | (1 << (s_cypherParser.SET - 48)) | (1 << (s_cypherParser.DETACH - 48)) | (1 << (s_cypherParser.DELETE - 48)) | (1 << (s_cypherParser.REMOVE - 48)) | (1 << (s_cypherParser.WITH - 48)) | (1 << (s_cypherParser.RETURN - 48)) | (1 << (s_cypherParser.DISTINCT - 48)) | (1 << (s_cypherParser.ORDER - 48)) | (1 << (s_cypherParser.BY - 48)) | (1 << (s_cypherParser.L_SKIP - 48)) | (1 << (s_cypherParser.LIMIT - 48)) | (1 << (s_cypherParser.ASCENDING - 48)) | (1 << (s_cypherParser.ASC - 48)) | (1 << (s_cypherParser.DESCENDING - 48)) | (1 << (s_cypherParser.DESC - 48)) | (1 << (s_cypherParser.WHERE - 48)) | (1 << (s_cypherParser.OR - 48)) | (1 << (s_cypherParser.XOR - 48)) | (1 << (s_cypherParser.AND - 48)) | (1 << (s_cypherParser.NOT - 48)) | (1 << (s_cypherParser.STARTS - 48)) | (1 << (s_cypherParser.ENDS - 48)) | (1 << (s_cypherParser.CONTAINS - 48)) | (1 << (s_cypherParser.IN - 48)) | (1 << (s_cypherParser.IS - 48)) | (1 << (s_cypherParser.NULL - 48)) | (1 << (s_cypherParser.COUNT - 48)) | (1 << (s_cypherParser.CASE - 48)) | (1 << (s_cypherParser.ELSE - 48)) | (1 << (s_cypherParser.END - 48)) | (1 << (s_cypherParser.WHEN - 48)) | (1 << (s_cypherParser.THEN - 48)) | (1 << (s_cypherParser.ANY - 48)) | (1 << (s_cypherParser.NONE - 48)) | (1 << (s_cypherParser.SINGLE - 48)) | (1 << (s_cypherParser.EXISTS - 48)) | (1 << (s_cypherParser.TRUE - 48)) | (1 << (s_cypherParser.FALSE - 48)) | (1 << (s_cypherParser.HexLetter - 48)))) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & ((1 << (s_cypherParser.CONSTRAINT - 119)) | (1 << (s_cypherParser.DO - 119)) | (1 << (s_cypherParser.FOR - 119)) | (1 << (s_cypherParser.REQUIRE - 119)) | (1 << (s_cypherParser.UNIQUE - 119)) | (1 << (s_cypherParser.MANDATORY - 119)) | (1 << (s_cypherParser.SCALAR - 119)) | (1 << (s_cypherParser.OF - 119)) | (1 << (s_cypherParser.ADD - 119)) | (1 << (s_cypherParser.DROP - 119)) | (1 << (s_cypherParser.FILTER - 119)) | (1 << (s_cypherParser.EXTRACT - 119)) | (1 << (s_cypherParser.UnescapedSymbolicName - 119)) | (1 << (s_cypherParser.EscapedSymbolicName - 119)))) != 0):
                self.state = 1888
                self.oC_PropertyKeyName()
                self.state = 1890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1889
                    self.match(s_cypherParser.SP)


                self.state = 1892
                self.match(s_cypherParser.T__7)
                self.state = 1894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1893
                    self.match(s_cypherParser.SP)


                self.state = 1896
                self.oC_Expression()
                self.state = 1898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==s_cypherParser.SP:
                    self.state = 1897
                    self.match(s_cypherParser.SP)


                self.state = 1918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==s_cypherParser.T__3:
                    self.state = 1900
                    self.match(s_cypherParser.T__3)
                    self.state = 1902
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 1901
                        self.match(s_cypherParser.SP)


                    self.state = 1904
                    self.oC_PropertyKeyName()
                    self.state = 1906
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 1905
                        self.match(s_cypherParser.SP)


                    self.state = 1908
                    self.match(s_cypherParser.T__7)
                    self.state = 1910
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 1909
                        self.match(s_cypherParser.SP)


                    self.state = 1912
                    self.oC_Expression()
                    self.state = 1914
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==s_cypherParser.SP:
                        self.state = 1913
                        self.match(s_cypherParser.SP)


                    self.state = 1920
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1923
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = s_cypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1925
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = s_cypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1927
            self.match(s_cypherParser.T__25)
            self.state = 1930
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [s_cypherParser.NOW, s_cypherParser.COUNT, s_cypherParser.ANY, s_cypherParser.NONE, s_cypherParser.SINGLE, s_cypherParser.HexLetter, s_cypherParser.FILTER, s_cypherParser.EXTRACT, s_cypherParser.UnescapedSymbolicName, s_cypherParser.EscapedSymbolicName]:
                self.state = 1928
                self.oC_SymbolicName()
                pass
            elif token in [s_cypherParser.DecimalInteger]:
                self.state = 1929
                self.match(s_cypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = s_cypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_oC_SchemaName)
        try:
            self.state = 1934
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1932
                self.oC_SymbolicName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1933
                self.oC_ReservedWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = s_cypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1936
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << s_cypherParser.T__16) | (1 << s_cypherParser.T__26) | (1 << s_cypherParser.T__27) | (1 << s_cypherParser.T__28) | (1 << s_cypherParser.T__29))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = s_cypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1938
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << s_cypherParser.T__17) | (1 << s_cypherParser.T__30) | (1 << s_cypherParser.T__31) | (1 << s_cypherParser.T__32) | (1 << s_cypherParser.T__33))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = s_cypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1940
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << s_cypherParser.T__21) | (1 << s_cypherParser.T__34) | (1 << s_cypherParser.T__35) | (1 << s_cypherParser.T__36) | (1 << s_cypherParser.T__37) | (1 << s_cypherParser.T__38) | (1 << s_cypherParser.T__39) | (1 << s_cypherParser.T__40) | (1 << s_cypherParser.T__41) | (1 << s_cypherParser.T__42) | (1 << s_cypherParser.T__43) | (1 << s_cypherParser.T__44))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





