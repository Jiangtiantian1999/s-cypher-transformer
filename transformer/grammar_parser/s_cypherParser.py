# Generated from s_cypher.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,137,1945,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,1,0,1,0,1,0,3,0,238,8,0,1,1,1,1,3,1,242,
        8,1,1,1,1,1,3,1,246,8,1,1,1,1,1,3,1,250,8,1,1,1,1,1,3,1,254,8,1,
        3,1,256,8,1,1,1,3,1,259,8,1,1,1,3,1,262,8,1,1,2,1,2,1,2,1,2,1,2,
        1,2,3,2,270,8,2,1,2,3,2,273,8,2,1,2,3,2,276,8,2,1,3,1,3,3,3,280,
        8,3,1,3,1,3,1,3,1,3,3,3,286,8,3,1,3,3,3,289,8,3,1,3,1,3,1,3,3,3,
        294,8,3,1,3,1,3,1,3,1,3,3,3,300,8,3,1,3,3,3,303,8,3,1,3,1,3,1,3,
        3,3,308,8,3,1,3,3,3,311,8,3,1,3,3,3,314,8,3,1,3,3,3,317,8,3,1,3,
        3,3,320,8,3,1,3,1,3,1,3,1,3,3,3,326,8,3,1,3,3,3,329,8,3,1,3,1,3,
        1,3,3,3,334,8,3,1,3,3,3,337,8,3,1,3,3,3,340,8,3,1,3,1,3,3,3,344,
        8,3,1,3,1,3,3,3,348,8,3,1,3,3,3,351,8,3,1,3,1,3,3,3,355,8,3,1,3,
        1,3,3,3,359,8,3,1,3,1,3,1,3,1,3,3,3,365,8,3,1,3,1,3,3,3,369,8,3,
        1,3,1,3,1,3,1,3,3,3,375,8,3,1,3,1,3,3,3,379,8,3,1,3,1,3,1,3,1,3,
        3,3,385,8,3,1,3,1,3,3,3,389,8,3,1,4,1,4,3,4,393,8,4,1,4,1,4,3,4,
        397,8,4,1,4,1,4,3,4,401,8,4,1,4,5,4,404,8,4,10,4,12,4,407,9,4,1,
        5,1,5,1,5,1,5,3,5,413,8,5,1,5,3,5,416,8,5,3,5,418,8,5,1,6,1,6,3,
        6,422,8,6,1,6,1,6,3,6,426,8,6,1,6,1,6,3,6,430,8,6,1,6,1,6,3,6,434,
        8,6,1,6,5,6,437,8,6,10,6,12,6,440,9,6,1,7,1,7,1,7,1,7,3,7,446,8,
        7,1,7,3,7,449,8,7,3,7,451,8,7,1,8,1,8,3,8,455,8,8,1,8,1,8,1,9,1,
        9,3,9,461,8,9,1,9,1,9,1,10,1,10,3,10,467,8,10,1,10,1,10,1,10,3,10,
        472,8,10,1,10,3,10,475,8,10,1,11,1,11,3,11,479,8,11,1,11,1,11,3,
        11,483,8,11,1,11,1,11,1,11,1,11,3,11,489,8,11,1,11,1,11,3,11,493,
        8,11,1,11,1,11,1,11,3,11,498,8,11,1,12,1,12,3,12,502,8,12,1,12,1,
        12,3,12,506,8,12,1,12,1,12,3,12,510,8,12,1,12,1,12,1,13,1,13,3,13,
        516,8,13,1,13,1,13,3,13,520,8,13,1,13,1,13,1,14,1,14,3,14,526,8,
        14,1,14,1,14,3,14,530,8,14,3,14,532,8,14,1,14,1,14,3,14,536,8,14,
        3,14,538,8,14,1,14,1,14,3,14,542,8,14,3,14,544,8,14,1,14,1,14,3,
        14,548,8,14,3,14,550,8,14,1,14,1,14,1,15,1,15,3,15,556,8,15,1,16,
        1,16,3,16,560,8,16,1,16,1,16,3,16,564,8,16,1,16,1,16,3,16,568,8,
        16,3,16,570,8,16,1,16,1,16,3,16,574,8,16,1,16,1,16,3,16,578,8,16,
        1,16,1,16,3,16,582,8,16,3,16,584,8,16,1,16,1,16,3,16,588,8,16,1,
        16,1,16,3,16,592,8,16,1,16,1,16,3,16,596,8,16,3,16,598,8,16,1,16,
        1,16,3,16,602,8,16,1,16,1,16,3,16,606,8,16,1,16,1,16,3,16,610,8,
        16,3,16,612,8,16,5,16,614,8,16,10,16,12,16,617,9,16,3,16,619,8,16,
        1,16,1,16,1,17,1,17,3,17,625,8,17,1,17,1,17,3,17,629,8,17,3,17,631,
        8,17,1,17,1,17,3,17,635,8,17,3,17,637,8,17,1,17,3,17,640,8,17,1,
        17,1,17,3,17,644,8,17,3,17,646,8,17,1,17,1,17,3,17,650,8,17,3,17,
        652,8,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,3,18,661,8,18,1,19,1,
        19,3,19,665,8,19,1,19,3,19,668,8,19,1,19,1,19,1,19,1,19,1,19,3,19,
        675,8,19,1,19,1,19,3,19,679,8,19,1,19,1,19,3,19,683,8,19,1,19,5,
        19,686,8,19,10,19,12,19,689,9,19,1,20,1,20,3,20,693,8,20,1,20,4,
        20,696,8,20,11,20,12,20,697,1,20,3,20,701,8,20,1,20,3,20,704,8,20,
        3,20,706,8,20,1,20,3,20,709,8,20,1,20,1,20,3,20,713,8,20,1,20,5,
        20,716,8,20,10,20,12,20,719,9,20,1,21,1,21,1,21,1,21,1,21,1,22,1,
        22,3,22,728,8,22,1,22,1,22,3,22,732,8,22,1,22,1,22,3,22,736,8,22,
        1,22,1,22,3,22,740,8,22,1,22,1,22,3,22,744,8,22,1,22,3,22,747,8,
        22,1,22,1,22,1,23,1,23,3,23,753,8,23,1,24,1,24,1,25,1,25,1,26,3,
        26,760,8,26,1,26,1,26,3,26,764,8,26,1,26,3,26,767,8,26,1,26,3,26,
        770,8,26,1,26,1,26,1,27,1,27,1,28,1,28,3,28,778,8,28,1,28,5,28,781,
        8,28,10,28,12,28,784,9,28,1,29,1,29,1,29,1,29,3,29,790,8,29,1,29,
        1,29,1,29,3,29,795,8,29,1,29,3,29,798,8,29,1,30,1,30,3,30,802,8,
        30,1,31,1,31,3,31,806,8,31,5,31,808,8,31,10,31,12,31,811,9,31,1,
        31,1,31,1,31,3,31,816,8,31,5,31,818,8,31,10,31,12,31,821,9,31,1,
        31,1,31,3,31,825,8,31,1,31,5,31,828,8,31,10,31,12,31,831,9,31,1,
        31,3,31,834,8,31,1,31,3,31,837,8,31,3,31,839,8,31,1,32,1,32,3,32,
        843,8,32,5,32,845,8,32,10,32,12,32,848,9,32,1,32,1,32,3,32,852,8,
        32,5,32,854,8,32,10,32,12,32,857,9,32,1,32,1,32,3,32,861,8,32,4,
        32,863,8,32,11,32,12,32,864,1,32,1,32,1,33,1,33,1,33,3,33,872,8,
        33,1,34,1,34,3,34,876,8,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,
        35,3,35,886,8,35,1,35,1,35,1,35,5,35,891,8,35,10,35,12,35,894,9,
        35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,906,8,
        36,1,37,1,37,3,37,910,8,37,1,37,1,37,1,38,1,38,3,38,916,8,38,1,38,
        1,38,3,38,920,8,38,1,38,1,38,3,38,924,8,38,1,38,5,38,927,8,38,10,
        38,12,38,930,9,38,1,39,1,39,1,39,1,39,3,39,936,8,39,1,39,1,39,3,
        39,940,8,39,1,39,5,39,943,8,39,10,39,12,39,946,9,39,1,40,1,40,1,
        40,1,40,3,40,952,8,40,1,41,1,41,1,41,1,41,3,41,958,8,41,1,41,1,41,
        1,41,3,41,963,8,41,1,42,1,42,1,42,1,42,3,42,969,8,42,1,42,3,42,972,
        8,42,1,42,1,42,1,42,1,42,3,42,978,8,42,3,42,980,8,42,1,43,1,43,3,
        43,984,8,43,1,43,1,43,3,43,988,8,43,1,43,5,43,991,8,43,10,43,12,
        43,994,9,43,1,43,3,43,997,8,43,1,43,3,43,1000,8,43,1,44,1,44,1,44,
        1,44,1,44,3,44,1007,8,44,1,44,1,44,1,45,1,45,1,45,3,45,1014,8,45,
        1,45,3,45,1017,8,45,1,46,1,46,1,46,1,47,3,47,1023,8,47,1,47,3,47,
        1026,8,47,1,47,1,47,1,47,1,47,3,47,1032,8,47,1,47,1,47,3,47,1036,
        8,47,1,47,1,47,3,47,1040,8,47,1,48,1,48,3,48,1044,8,48,1,48,1,48,
        3,48,1048,8,48,1,48,5,48,1051,8,48,10,48,12,48,1054,9,48,1,48,1,
        48,3,48,1058,8,48,1,48,1,48,3,48,1062,8,48,1,48,5,48,1065,8,48,10,
        48,12,48,1068,9,48,3,48,1070,8,48,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,3,49,1079,8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1088,
        8,50,1,50,5,50,1091,8,50,10,50,12,50,1094,9,50,1,51,1,51,1,51,1,
        51,1,52,1,52,1,52,1,52,1,53,1,53,3,53,1106,8,53,1,53,3,53,1109,8,
        53,1,54,1,54,1,54,1,54,1,55,1,55,3,55,1117,8,55,1,55,1,55,3,55,1121,
        8,55,1,55,5,55,1124,8,55,10,55,12,55,1127,9,55,1,56,1,56,1,57,1,
        57,3,57,1133,8,57,1,57,5,57,1136,8,57,10,57,12,57,1139,9,57,1,57,
        1,57,1,57,1,57,3,57,1145,8,57,1,58,1,58,3,58,1149,8,58,1,58,4,58,
        1152,8,58,11,58,12,58,1153,1,59,1,59,3,59,1158,8,59,1,59,1,59,1,
        60,1,60,3,60,1164,8,60,1,60,1,60,3,60,1168,8,60,1,60,3,60,1171,8,
        60,1,60,3,60,1174,8,60,1,60,1,60,3,60,1178,8,60,1,60,1,60,1,60,1,
        60,3,60,1184,8,60,1,60,1,60,3,60,1188,8,60,1,60,3,60,1191,8,60,1,
        60,3,60,1194,8,60,1,60,1,60,1,60,1,60,3,60,1200,8,60,1,60,3,60,1203,
        8,60,1,60,3,60,1206,8,60,1,60,1,60,3,60,1210,8,60,1,60,1,60,1,60,
        1,60,3,60,1216,8,60,1,60,3,60,1219,8,60,1,60,3,60,1222,8,60,1,60,
        1,60,3,60,1226,8,60,1,61,1,61,3,61,1230,8,61,1,62,1,62,3,62,1234,
        8,62,1,62,1,62,3,62,1238,8,62,1,62,1,62,3,62,1242,8,62,1,62,3,62,
        1245,8,62,1,62,5,62,1248,8,62,10,62,12,62,1251,9,62,1,63,1,63,3,
        63,1255,8,63,1,63,5,63,1258,8,63,10,63,12,63,1261,9,63,1,64,1,64,
        3,64,1265,8,64,1,64,1,64,1,65,1,65,3,65,1271,8,65,1,65,1,65,3,65,
        1275,8,65,3,65,1277,8,65,1,65,1,65,3,65,1281,8,65,1,65,1,65,3,65,
        1285,8,65,3,65,1287,8,65,3,65,1289,8,65,1,66,1,66,1,67,1,67,1,68,
        1,68,3,68,1297,8,68,1,68,4,68,1300,8,68,11,68,12,68,1301,1,69,1,
        69,1,70,1,70,1,70,1,70,1,70,5,70,1311,8,70,10,70,12,70,1314,9,70,
        1,71,1,71,1,71,1,71,1,71,5,71,1321,8,71,10,71,12,71,1324,9,71,1,
        72,1,72,1,72,1,72,1,72,5,72,1331,8,72,10,72,12,72,1334,9,72,1,73,
        1,73,3,73,1338,8,73,5,73,1340,8,73,10,73,12,73,1343,9,73,1,73,1,
        73,1,74,1,74,3,74,1349,8,74,1,74,5,74,1352,8,74,10,74,12,74,1355,
        9,74,1,75,1,75,3,75,1359,8,75,1,75,1,75,1,75,3,75,1364,8,75,1,75,
        1,75,1,75,3,75,1369,8,75,1,75,1,75,1,75,3,75,1374,8,75,1,75,1,75,
        1,75,3,75,1379,8,75,1,75,1,75,1,75,3,75,1384,8,75,1,75,3,75,1387,
        8,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,1399,
        8,76,1,76,3,76,1402,8,76,1,76,1,76,1,77,1,77,1,77,3,77,1409,8,77,
        1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,
        1423,8,78,1,79,1,79,3,79,1427,8,79,1,79,1,79,3,79,1431,8,79,1,79,
        1,79,3,79,1435,8,79,1,79,1,79,3,79,1439,8,79,1,79,5,79,1442,8,79,
        10,79,12,79,1445,9,79,1,80,1,80,3,80,1449,8,80,1,80,1,80,3,80,1453,
        8,80,1,80,1,80,3,80,1457,8,80,1,80,1,80,3,80,1461,8,80,1,80,1,80,
        3,80,1465,8,80,1,80,1,80,3,80,1469,8,80,1,80,5,80,1472,8,80,10,80,
        12,80,1475,9,80,1,81,1,81,3,81,1479,8,81,1,81,1,81,3,81,1483,8,81,
        1,81,5,81,1486,8,81,10,81,12,81,1489,9,81,1,82,1,82,1,82,3,82,1494,
        8,82,1,82,3,82,1497,8,82,1,83,1,83,3,83,1501,8,83,1,83,5,83,1504,
        8,83,10,83,12,83,1507,9,83,1,83,3,83,1510,8,83,1,83,3,83,1513,8,
        83,1,84,1,84,3,84,1517,8,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,3,
        85,1526,8,85,1,85,1,85,3,85,1530,8,85,1,85,1,85,3,85,1534,8,85,1,
        85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1545,8,85,1,86,1,
        86,3,86,1549,8,86,1,86,4,86,1552,8,86,11,86,12,86,1553,1,86,1,86,
        3,86,1558,8,86,1,86,1,86,3,86,1562,8,86,1,86,4,86,1565,8,86,11,86,
        12,86,1566,3,86,1569,8,86,1,86,3,86,1572,8,86,1,86,1,86,3,86,1576,
        8,86,1,86,3,86,1579,8,86,1,86,3,86,1582,8,86,1,86,1,86,1,87,1,87,
        3,87,1588,8,87,1,87,1,87,3,87,1592,8,87,1,87,1,87,3,87,1596,8,87,
        1,87,1,87,1,88,1,88,3,88,1602,8,88,1,88,1,88,3,88,1606,8,88,1,88,
        1,88,3,88,1610,8,88,1,88,3,88,1613,8,88,1,88,3,88,1616,8,88,1,88,
        1,88,1,89,1,89,3,89,1622,8,89,1,89,1,89,3,89,1626,8,89,1,89,1,89,
        3,89,1630,8,89,3,89,1632,8,89,1,89,1,89,3,89,1636,8,89,1,89,1,89,
        3,89,1640,8,89,3,89,1642,8,89,1,89,1,89,3,89,1646,8,89,1,89,1,89,
        3,89,1650,8,89,1,89,1,89,1,90,1,90,3,90,1656,8,90,1,90,1,90,3,90,
        1660,8,90,1,90,1,90,3,90,1664,8,90,1,90,1,90,1,90,1,90,3,90,1670,
        8,90,1,90,1,90,3,90,1674,8,90,1,90,1,90,3,90,1678,8,90,1,90,1,90,
        1,90,1,90,3,90,1684,8,90,1,90,1,90,3,90,1688,8,90,1,90,1,90,3,90,
        1692,8,90,1,90,1,90,1,90,1,90,3,90,1698,8,90,1,90,1,90,3,90,1702,
        8,90,1,90,1,90,3,90,1706,8,90,1,90,1,90,3,90,1710,8,90,1,91,1,91,
        3,91,1714,8,91,1,91,3,91,1717,8,91,1,92,1,92,1,93,1,93,3,93,1723,
        8,93,1,93,1,93,3,93,1727,8,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,
        1,94,1,95,1,95,3,95,1739,8,95,1,95,1,95,3,95,1743,8,95,1,95,1,95,
        3,95,1747,8,95,3,95,1749,8,95,1,95,1,95,3,95,1753,8,95,1,95,1,95,
        3,95,1757,8,95,1,95,1,95,3,95,1761,8,95,5,95,1763,8,95,10,95,12,
        95,1766,9,95,3,95,1768,8,95,1,95,1,95,1,96,1,96,1,96,1,97,1,97,3,
        97,1777,8,97,1,97,1,97,3,97,1781,8,97,1,97,1,97,1,97,3,97,1786,8,
        97,1,97,3,97,1789,8,97,3,97,1791,8,97,1,97,3,97,1794,8,97,1,97,1,
        97,1,98,1,98,3,98,1800,8,98,1,98,1,98,3,98,1804,8,98,1,98,1,98,3,
        98,1808,8,98,1,98,1,98,3,98,1812,8,98,1,98,1,98,3,98,1816,8,98,5,
        98,1818,8,98,10,98,12,98,1821,9,98,3,98,1823,8,98,1,98,1,98,1,99,
        1,99,1,100,1,100,1,101,1,101,1,101,1,102,1,102,1,102,5,102,1837,
        8,102,10,102,12,102,1840,9,102,1,103,1,103,1,104,1,104,1,104,1,104,
        1,104,1,104,3,104,1850,8,104,1,105,1,105,1,106,1,106,3,106,1856,
        8,106,1,107,1,107,1,108,1,108,1,109,1,109,3,109,1864,8,109,1,109,
        1,109,3,109,1868,8,109,1,109,1,109,3,109,1872,8,109,1,109,1,109,
        3,109,1876,8,109,5,109,1878,8,109,10,109,12,109,1881,9,109,3,109,
        1883,8,109,1,109,1,109,1,110,1,110,3,110,1889,8,110,1,110,1,110,
        3,110,1893,8,110,1,110,1,110,3,110,1897,8,110,1,110,1,110,3,110,
        1901,8,110,1,110,1,110,3,110,1905,8,110,1,110,1,110,3,110,1909,8,
        110,1,110,1,110,3,110,1913,8,110,1,110,1,110,3,110,1917,8,110,5,
        110,1919,8,110,10,110,12,110,1922,9,110,3,110,1924,8,110,1,110,1,
        110,1,111,1,111,1,112,1,112,1,112,3,112,1933,8,112,1,113,1,113,3,
        113,1937,8,113,1,114,1,114,1,115,1,115,1,116,1,116,1,116,0,0,117,
        0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
        46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
        90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
        158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
        190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,
        222,224,226,228,230,232,0,11,1,0,54,55,6,0,48,48,93,93,99,101,108,
        108,129,131,134,134,5,0,48,68,71,92,94,98,102,104,119,128,1,0,78,
        81,1,0,21,22,1,0,103,104,1,0,105,107,1,0,115,116,2,0,17,17,27,30,
        2,0,18,18,31,34,2,0,22,22,35,45,2243,0,237,1,0,0,0,2,241,1,0,0,0,
        4,269,1,0,0,0,6,388,1,0,0,0,8,390,1,0,0,0,10,408,1,0,0,0,12,421,
        1,0,0,0,14,441,1,0,0,0,16,452,1,0,0,0,18,458,1,0,0,0,20,474,1,0,
        0,0,22,497,1,0,0,0,24,499,1,0,0,0,26,513,1,0,0,0,28,523,1,0,0,0,
        30,555,1,0,0,0,32,557,1,0,0,0,34,622,1,0,0,0,36,655,1,0,0,0,38,664,
        1,0,0,0,40,690,1,0,0,0,42,720,1,0,0,0,44,725,1,0,0,0,46,752,1,0,
        0,0,48,754,1,0,0,0,50,756,1,0,0,0,52,759,1,0,0,0,54,773,1,0,0,0,
        56,775,1,0,0,0,58,797,1,0,0,0,60,801,1,0,0,0,62,838,1,0,0,0,64,862,
        1,0,0,0,66,871,1,0,0,0,68,873,1,0,0,0,70,883,1,0,0,0,72,905,1,0,
        0,0,74,907,1,0,0,0,76,913,1,0,0,0,78,931,1,0,0,0,80,951,1,0,0,0,
        82,953,1,0,0,0,84,964,1,0,0,0,86,981,1,0,0,0,88,1006,1,0,0,0,90,
        1010,1,0,0,0,92,1018,1,0,0,0,94,1025,1,0,0,0,96,1069,1,0,0,0,98,
        1078,1,0,0,0,100,1080,1,0,0,0,102,1095,1,0,0,0,104,1099,1,0,0,0,
        106,1103,1,0,0,0,108,1110,1,0,0,0,110,1114,1,0,0,0,112,1128,1,0,
        0,0,114,1144,1,0,0,0,116,1146,1,0,0,0,118,1155,1,0,0,0,120,1225,
        1,0,0,0,122,1229,1,0,0,0,124,1231,1,0,0,0,126,1252,1,0,0,0,128,1262,
        1,0,0,0,130,1268,1,0,0,0,132,1290,1,0,0,0,134,1292,1,0,0,0,136,1294,
        1,0,0,0,138,1303,1,0,0,0,140,1305,1,0,0,0,142,1315,1,0,0,0,144,1325,
        1,0,0,0,146,1341,1,0,0,0,148,1346,1,0,0,0,150,1386,1,0,0,0,152,1398,
        1,0,0,0,154,1405,1,0,0,0,156,1422,1,0,0,0,158,1424,1,0,0,0,160,1446,
        1,0,0,0,162,1476,1,0,0,0,164,1496,1,0,0,0,166,1498,1,0,0,0,168,1514,
        1,0,0,0,170,1544,1,0,0,0,172,1568,1,0,0,0,174,1585,1,0,0,0,176,1599,
        1,0,0,0,178,1619,1,0,0,0,180,1709,1,0,0,0,182,1711,1,0,0,0,184,1718,
        1,0,0,0,186,1720,1,0,0,0,188,1730,1,0,0,0,190,1736,1,0,0,0,192,1771,
        1,0,0,0,194,1774,1,0,0,0,196,1797,1,0,0,0,198,1826,1,0,0,0,200,1828,
        1,0,0,0,202,1830,1,0,0,0,204,1838,1,0,0,0,206,1841,1,0,0,0,208,1849,
        1,0,0,0,210,1851,1,0,0,0,212,1855,1,0,0,0,214,1857,1,0,0,0,216,1859,
        1,0,0,0,218,1861,1,0,0,0,220,1886,1,0,0,0,222,1927,1,0,0,0,224,1929,
        1,0,0,0,226,1936,1,0,0,0,228,1938,1,0,0,0,230,1940,1,0,0,0,232,1942,
        1,0,0,0,234,238,3,56,28,0,235,238,3,84,42,0,236,238,3,20,10,0,237,
        234,1,0,0,0,237,235,1,0,0,0,237,236,1,0,0,0,238,1,1,0,0,0,239,240,
        5,58,0,0,240,242,5,135,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,243,
        1,0,0,0,243,245,5,59,0,0,244,246,5,135,0,0,245,244,1,0,0,0,245,246,
        1,0,0,0,246,247,1,0,0,0,247,255,3,110,55,0,248,250,5,135,0,0,249,
        248,1,0,0,0,249,250,1,0,0,0,250,253,1,0,0,0,251,254,3,16,8,0,252,
        254,3,18,9,0,253,251,1,0,0,0,253,252,1,0,0,0,254,256,1,0,0,0,255,
        249,1,0,0,0,255,256,1,0,0,0,256,261,1,0,0,0,257,259,5,135,0,0,258,
        257,1,0,0,0,258,259,1,0,0,0,259,260,1,0,0,0,260,262,3,108,54,0,261,
        258,1,0,0,0,261,262,1,0,0,0,262,3,1,0,0,0,263,270,3,74,37,0,264,
        270,3,70,35,0,265,270,3,12,6,0,266,270,3,76,38,0,267,270,3,78,39,
        0,268,270,3,8,4,0,269,263,1,0,0,0,269,264,1,0,0,0,269,265,1,0,0,
        0,269,266,1,0,0,0,269,267,1,0,0,0,269,268,1,0,0,0,270,275,1,0,0,
        0,271,273,5,135,0,0,272,271,1,0,0,0,272,273,1,0,0,0,273,274,1,0,
        0,0,274,276,3,16,8,0,275,272,1,0,0,0,275,276,1,0,0,0,276,5,1,0,0,
        0,277,279,3,206,103,0,278,280,5,135,0,0,279,278,1,0,0,0,279,280,
        1,0,0,0,280,281,1,0,0,0,281,282,3,44,22,0,282,389,1,0,0,0,283,288,
        3,206,103,0,284,286,5,135,0,0,285,284,1,0,0,0,285,286,1,0,0,0,286,
        287,1,0,0,0,287,289,3,44,22,0,288,285,1,0,0,0,288,289,1,0,0,0,289,
        290,1,0,0,0,290,291,5,1,0,0,291,293,3,206,103,0,292,294,5,135,0,
        0,293,292,1,0,0,0,293,294,1,0,0,0,294,295,1,0,0,0,295,296,3,44,22,
        0,296,389,1,0,0,0,297,302,3,206,103,0,298,300,5,135,0,0,299,298,
        1,0,0,0,299,300,1,0,0,0,300,301,1,0,0,0,301,303,3,44,22,0,302,299,
        1,0,0,0,302,303,1,0,0,0,303,304,1,0,0,0,304,305,5,1,0,0,305,310,
        3,206,103,0,306,308,5,135,0,0,307,306,1,0,0,0,307,308,1,0,0,0,308,
        309,1,0,0,0,309,311,3,44,22,0,310,307,1,0,0,0,310,311,1,0,0,0,311,
        316,1,0,0,0,312,314,5,135,0,0,313,312,1,0,0,0,313,314,1,0,0,0,314,
        315,1,0,0,0,315,317,5,47,0,0,316,313,1,0,0,0,316,317,1,0,0,0,317,
        319,1,0,0,0,318,320,5,135,0,0,319,318,1,0,0,0,319,320,1,0,0,0,320,
        321,1,0,0,0,321,322,3,44,22,0,322,389,1,0,0,0,323,328,3,206,103,
        0,324,326,5,135,0,0,325,324,1,0,0,0,325,326,1,0,0,0,326,327,1,0,
        0,0,327,329,3,44,22,0,328,325,1,0,0,0,328,329,1,0,0,0,329,330,1,
        0,0,0,330,331,5,1,0,0,331,336,3,206,103,0,332,334,5,135,0,0,333,
        332,1,0,0,0,333,334,1,0,0,0,334,335,1,0,0,0,335,337,3,44,22,0,336,
        333,1,0,0,0,336,337,1,0,0,0,337,339,1,0,0,0,338,340,5,135,0,0,339,
        338,1,0,0,0,339,340,1,0,0,0,340,341,1,0,0,0,341,343,5,2,0,0,342,
        344,5,135,0,0,343,342,1,0,0,0,343,344,1,0,0,0,344,345,1,0,0,0,345,
        350,3,138,69,0,346,348,5,135,0,0,347,346,1,0,0,0,347,348,1,0,0,0,
        348,349,1,0,0,0,349,351,3,44,22,0,350,347,1,0,0,0,350,351,1,0,0,
        0,351,389,1,0,0,0,352,354,3,136,68,0,353,355,5,135,0,0,354,353,1,
        0,0,0,354,355,1,0,0,0,355,356,1,0,0,0,356,358,5,2,0,0,357,359,5,
        135,0,0,358,357,1,0,0,0,358,359,1,0,0,0,359,360,1,0,0,0,360,361,
        3,138,69,0,361,389,1,0,0,0,362,364,3,206,103,0,363,365,5,135,0,0,
        364,363,1,0,0,0,364,365,1,0,0,0,365,366,1,0,0,0,366,368,5,2,0,0,
        367,369,5,135,0,0,368,367,1,0,0,0,368,369,1,0,0,0,369,370,1,0,0,
        0,370,371,3,138,69,0,371,389,1,0,0,0,372,374,3,206,103,0,373,375,
        5,135,0,0,374,373,1,0,0,0,374,375,1,0,0,0,375,376,1,0,0,0,376,378,
        5,3,0,0,377,379,5,135,0,0,378,377,1,0,0,0,378,379,1,0,0,0,379,380,
        1,0,0,0,380,381,3,138,69,0,381,389,1,0,0,0,382,384,3,206,103,0,383,
        385,5,135,0,0,384,383,1,0,0,0,384,385,1,0,0,0,385,386,1,0,0,0,386,
        387,3,126,63,0,387,389,1,0,0,0,388,277,1,0,0,0,388,283,1,0,0,0,388,
        297,1,0,0,0,388,323,1,0,0,0,388,352,1,0,0,0,388,362,1,0,0,0,388,
        372,1,0,0,0,388,382,1,0,0,0,389,7,1,0,0,0,390,392,5,53,0,0,391,393,
        5,135,0,0,392,391,1,0,0,0,392,393,1,0,0,0,393,394,1,0,0,0,394,405,
        3,10,5,0,395,397,5,135,0,0,396,395,1,0,0,0,396,397,1,0,0,0,397,398,
        1,0,0,0,398,400,5,4,0,0,399,401,5,135,0,0,400,399,1,0,0,0,400,401,
        1,0,0,0,401,402,1,0,0,0,402,404,3,10,5,0,403,396,1,0,0,0,404,407,
        1,0,0,0,405,403,1,0,0,0,405,406,1,0,0,0,406,9,1,0,0,0,407,405,1,
        0,0,0,408,417,3,206,103,0,409,410,5,1,0,0,410,415,3,206,103,0,411,
        413,5,135,0,0,412,411,1,0,0,0,412,413,1,0,0,0,413,414,1,0,0,0,414,
        416,5,47,0,0,415,412,1,0,0,0,415,416,1,0,0,0,416,418,1,0,0,0,417,
        409,1,0,0,0,417,418,1,0,0,0,418,11,1,0,0,0,419,420,5,66,0,0,420,
        422,5,135,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,423,1,0,0,0,423,
        425,5,67,0,0,424,426,5,135,0,0,425,424,1,0,0,0,425,426,1,0,0,0,426,
        427,1,0,0,0,427,438,3,14,7,0,428,430,5,135,0,0,429,428,1,0,0,0,429,
        430,1,0,0,0,430,431,1,0,0,0,431,433,5,4,0,0,432,434,5,135,0,0,433,
        432,1,0,0,0,433,434,1,0,0,0,434,435,1,0,0,0,435,437,3,14,7,0,436,
        429,1,0,0,0,437,440,1,0,0,0,438,436,1,0,0,0,438,439,1,0,0,0,439,
        13,1,0,0,0,440,438,1,0,0,0,441,450,3,206,103,0,442,443,5,1,0,0,443,
        448,3,206,103,0,444,446,5,135,0,0,445,444,1,0,0,0,445,446,1,0,0,
        0,446,447,1,0,0,0,447,449,5,47,0,0,448,445,1,0,0,0,448,449,1,0,0,
        0,449,451,1,0,0,0,450,442,1,0,0,0,450,451,1,0,0,0,451,15,1,0,0,0,
        452,454,5,49,0,0,453,455,5,135,0,0,454,453,1,0,0,0,454,455,1,0,0,
        0,455,456,1,0,0,0,456,457,3,138,69,0,457,17,1,0,0,0,458,460,5,51,
        0,0,459,461,5,135,0,0,460,459,1,0,0,0,460,461,1,0,0,0,461,462,1,
        0,0,0,462,463,3,138,69,0,463,19,1,0,0,0,464,466,5,50,0,0,465,467,
        5,135,0,0,466,465,1,0,0,0,466,467,1,0,0,0,467,468,1,0,0,0,468,475,
        3,138,69,0,469,471,5,52,0,0,470,472,5,135,0,0,471,470,1,0,0,0,471,
        472,1,0,0,0,472,473,1,0,0,0,473,475,3,138,69,0,474,464,1,0,0,0,474,
        469,1,0,0,0,475,21,1,0,0,0,476,478,3,206,103,0,477,479,5,135,0,0,
        478,477,1,0,0,0,478,479,1,0,0,0,479,480,1,0,0,0,480,482,5,2,0,0,
        481,483,5,135,0,0,482,481,1,0,0,0,482,483,1,0,0,0,483,484,1,0,0,
        0,484,485,3,24,12,0,485,498,1,0,0,0,486,488,3,206,103,0,487,489,
        5,135,0,0,488,487,1,0,0,0,488,489,1,0,0,0,489,490,1,0,0,0,490,492,
        5,2,0,0,491,493,5,135,0,0,492,491,1,0,0,0,492,493,1,0,0,0,493,494,
        1,0,0,0,494,495,3,112,56,0,495,498,1,0,0,0,496,498,3,112,56,0,497,
        476,1,0,0,0,497,486,1,0,0,0,497,496,1,0,0,0,498,23,1,0,0,0,499,501,
        3,192,96,0,500,502,5,135,0,0,501,500,1,0,0,0,501,502,1,0,0,0,502,
        503,1,0,0,0,503,505,5,5,0,0,504,506,5,135,0,0,505,504,1,0,0,0,505,
        506,1,0,0,0,506,507,1,0,0,0,507,509,3,26,13,0,508,510,5,135,0,0,
        509,508,1,0,0,0,509,510,1,0,0,0,510,511,1,0,0,0,511,512,5,6,0,0,
        512,25,1,0,0,0,513,515,3,28,14,0,514,516,5,135,0,0,515,514,1,0,0,
        0,515,516,1,0,0,0,516,517,1,0,0,0,517,519,3,120,60,0,518,520,5,135,
        0,0,519,518,1,0,0,0,519,520,1,0,0,0,520,521,1,0,0,0,521,522,3,28,
        14,0,522,27,1,0,0,0,523,525,5,5,0,0,524,526,5,135,0,0,525,524,1,
        0,0,0,525,526,1,0,0,0,526,531,1,0,0,0,527,529,3,206,103,0,528,530,
        5,135,0,0,529,528,1,0,0,0,529,530,1,0,0,0,530,532,1,0,0,0,531,527,
        1,0,0,0,531,532,1,0,0,0,532,537,1,0,0,0,533,535,3,126,63,0,534,536,
        5,135,0,0,535,534,1,0,0,0,535,536,1,0,0,0,536,538,1,0,0,0,537,533,
        1,0,0,0,537,538,1,0,0,0,538,543,1,0,0,0,539,541,3,44,22,0,540,542,
        5,135,0,0,541,540,1,0,0,0,541,542,1,0,0,0,542,544,1,0,0,0,543,539,
        1,0,0,0,543,544,1,0,0,0,544,549,1,0,0,0,545,547,3,30,15,0,546,548,
        5,135,0,0,547,546,1,0,0,0,547,548,1,0,0,0,548,550,1,0,0,0,549,545,
        1,0,0,0,549,550,1,0,0,0,550,551,1,0,0,0,551,552,5,6,0,0,552,29,1,
        0,0,0,553,556,3,32,16,0,554,556,3,224,112,0,555,553,1,0,0,0,555,
        554,1,0,0,0,556,31,1,0,0,0,557,559,5,7,0,0,558,560,5,135,0,0,559,
        558,1,0,0,0,559,560,1,0,0,0,560,618,1,0,0,0,561,563,3,222,111,0,
        562,564,5,135,0,0,563,562,1,0,0,0,563,564,1,0,0,0,564,569,1,0,0,
        0,565,567,3,44,22,0,566,568,5,135,0,0,567,566,1,0,0,0,567,568,1,
        0,0,0,568,570,1,0,0,0,569,565,1,0,0,0,569,570,1,0,0,0,570,571,1,
        0,0,0,571,573,5,8,0,0,572,574,5,135,0,0,573,572,1,0,0,0,573,574,
        1,0,0,0,574,575,1,0,0,0,575,577,3,138,69,0,576,578,5,135,0,0,577,
        576,1,0,0,0,577,578,1,0,0,0,578,583,1,0,0,0,579,581,3,44,22,0,580,
        582,5,135,0,0,581,580,1,0,0,0,581,582,1,0,0,0,582,584,1,0,0,0,583,
        579,1,0,0,0,583,584,1,0,0,0,584,615,1,0,0,0,585,587,5,4,0,0,586,
        588,5,135,0,0,587,586,1,0,0,0,587,588,1,0,0,0,588,589,1,0,0,0,589,
        591,3,222,111,0,590,592,5,135,0,0,591,590,1,0,0,0,591,592,1,0,0,
        0,592,597,1,0,0,0,593,595,3,44,22,0,594,596,5,135,0,0,595,594,1,
        0,0,0,595,596,1,0,0,0,596,598,1,0,0,0,597,593,1,0,0,0,597,598,1,
        0,0,0,598,599,1,0,0,0,599,601,5,8,0,0,600,602,5,135,0,0,601,600,
        1,0,0,0,601,602,1,0,0,0,602,603,1,0,0,0,603,605,3,138,69,0,604,606,
        5,135,0,0,605,604,1,0,0,0,605,606,1,0,0,0,606,611,1,0,0,0,607,609,
        3,44,22,0,608,610,5,135,0,0,609,608,1,0,0,0,609,610,1,0,0,0,610,
        612,1,0,0,0,611,607,1,0,0,0,611,612,1,0,0,0,612,614,1,0,0,0,613,
        585,1,0,0,0,614,617,1,0,0,0,615,613,1,0,0,0,615,616,1,0,0,0,616,
        619,1,0,0,0,617,615,1,0,0,0,618,561,1,0,0,0,618,619,1,0,0,0,619,
        620,1,0,0,0,620,621,5,9,0,0,621,33,1,0,0,0,622,624,5,10,0,0,623,
        625,5,135,0,0,624,623,1,0,0,0,624,625,1,0,0,0,625,630,1,0,0,0,626,
        628,3,206,103,0,627,629,5,135,0,0,628,627,1,0,0,0,628,629,1,0,0,
        0,629,631,1,0,0,0,630,626,1,0,0,0,630,631,1,0,0,0,631,636,1,0,0,
        0,632,634,3,124,62,0,633,635,5,135,0,0,634,633,1,0,0,0,634,635,1,
        0,0,0,635,637,1,0,0,0,636,632,1,0,0,0,636,637,1,0,0,0,637,639,1,
        0,0,0,638,640,3,130,65,0,639,638,1,0,0,0,639,640,1,0,0,0,640,645,
        1,0,0,0,641,643,3,44,22,0,642,644,5,135,0,0,643,642,1,0,0,0,643,
        644,1,0,0,0,644,646,1,0,0,0,645,641,1,0,0,0,645,646,1,0,0,0,646,
        651,1,0,0,0,647,649,3,122,61,0,648,650,5,135,0,0,649,648,1,0,0,0,
        649,650,1,0,0,0,650,652,1,0,0,0,651,647,1,0,0,0,651,652,1,0,0,0,
        652,653,1,0,0,0,653,654,5,11,0,0,654,35,1,0,0,0,655,660,3,158,79,
        0,656,661,3,42,21,0,657,661,3,152,76,0,658,661,3,154,77,0,659,661,
        3,156,78,0,660,656,1,0,0,0,660,657,1,0,0,0,660,658,1,0,0,0,660,659,
        1,0,0,0,660,661,1,0,0,0,661,37,1,0,0,0,662,665,3,166,83,0,663,665,
        3,40,20,0,664,662,1,0,0,0,664,663,1,0,0,0,665,687,1,0,0,0,666,668,
        5,135,0,0,667,666,1,0,0,0,667,668,1,0,0,0,668,669,1,0,0,0,669,670,
        5,10,0,0,670,671,3,138,69,0,671,672,5,11,0,0,672,686,1,0,0,0,673,
        675,5,135,0,0,674,673,1,0,0,0,674,675,1,0,0,0,675,676,1,0,0,0,676,
        678,5,10,0,0,677,679,3,138,69,0,678,677,1,0,0,0,678,679,1,0,0,0,
        679,680,1,0,0,0,680,682,5,12,0,0,681,683,3,138,69,0,682,681,1,0,
        0,0,682,683,1,0,0,0,683,684,1,0,0,0,684,686,5,11,0,0,685,667,1,0,
        0,0,685,674,1,0,0,0,686,689,1,0,0,0,687,685,1,0,0,0,687,688,1,0,
        0,0,688,39,1,0,0,0,689,687,1,0,0,0,690,705,3,170,85,0,691,693,5,
        135,0,0,692,691,1,0,0,0,692,693,1,0,0,0,693,694,1,0,0,0,694,696,
        3,168,84,0,695,692,1,0,0,0,696,697,1,0,0,0,697,695,1,0,0,0,697,698,
        1,0,0,0,698,703,1,0,0,0,699,701,5,135,0,0,700,699,1,0,0,0,700,701,
        1,0,0,0,701,702,1,0,0,0,702,704,5,47,0,0,703,700,1,0,0,0,703,704,
        1,0,0,0,704,706,1,0,0,0,705,695,1,0,0,0,705,706,1,0,0,0,706,708,
        1,0,0,0,707,709,5,135,0,0,708,707,1,0,0,0,708,709,1,0,0,0,709,710,
        1,0,0,0,710,717,5,46,0,0,711,713,5,135,0,0,712,711,1,0,0,0,712,713,
        1,0,0,0,713,714,1,0,0,0,714,716,3,168,84,0,715,712,1,0,0,0,716,719,
        1,0,0,0,717,715,1,0,0,0,717,718,1,0,0,0,718,41,1,0,0,0,719,717,1,
        0,0,0,720,721,5,135,0,0,721,722,7,0,0,0,722,723,5,135,0,0,723,724,
        3,158,79,0,724,43,1,0,0,0,725,727,5,46,0,0,726,728,5,135,0,0,727,
        726,1,0,0,0,727,728,1,0,0,0,728,729,1,0,0,0,729,731,5,5,0,0,730,
        732,5,135,0,0,731,730,1,0,0,0,731,732,1,0,0,0,732,733,1,0,0,0,733,
        735,3,46,23,0,734,736,5,135,0,0,735,734,1,0,0,0,735,736,1,0,0,0,
        736,737,1,0,0,0,737,739,5,4,0,0,738,740,5,135,0,0,739,738,1,0,0,
        0,739,740,1,0,0,0,740,743,1,0,0,0,741,744,3,46,23,0,742,744,5,48,
        0,0,743,741,1,0,0,0,743,742,1,0,0,0,744,746,1,0,0,0,745,747,5,135,
        0,0,746,745,1,0,0,0,746,747,1,0,0,0,747,748,1,0,0,0,748,749,5,6,
        0,0,749,45,1,0,0,0,750,753,5,117,0,0,751,753,3,220,110,0,752,750,
        1,0,0,0,752,751,1,0,0,0,753,47,1,0,0,0,754,755,7,1,0,0,755,49,1,
        0,0,0,756,757,7,2,0,0,757,51,1,0,0,0,758,760,5,135,0,0,759,758,1,
        0,0,0,759,760,1,0,0,0,760,761,1,0,0,0,761,766,3,54,27,0,762,764,
        5,135,0,0,763,762,1,0,0,0,763,764,1,0,0,0,764,765,1,0,0,0,765,767,
        5,13,0,0,766,763,1,0,0,0,766,767,1,0,0,0,767,769,1,0,0,0,768,770,
        5,135,0,0,769,768,1,0,0,0,769,770,1,0,0,0,770,771,1,0,0,0,771,772,
        5,0,0,1,772,53,1,0,0,0,773,774,3,0,0,0,774,55,1,0,0,0,775,782,3,
        60,30,0,776,778,5,135,0,0,777,776,1,0,0,0,777,778,1,0,0,0,778,779,
        1,0,0,0,779,781,3,58,29,0,780,777,1,0,0,0,781,784,1,0,0,0,782,780,
        1,0,0,0,782,783,1,0,0,0,783,57,1,0,0,0,784,782,1,0,0,0,785,786,5,
        56,0,0,786,787,5,135,0,0,787,789,5,57,0,0,788,790,5,135,0,0,789,
        788,1,0,0,0,789,790,1,0,0,0,790,791,1,0,0,0,791,798,3,60,30,0,792,
        794,5,56,0,0,793,795,5,135,0,0,794,793,1,0,0,0,794,795,1,0,0,0,795,
        796,1,0,0,0,796,798,3,60,30,0,797,785,1,0,0,0,797,792,1,0,0,0,798,
        59,1,0,0,0,799,802,3,62,31,0,800,802,3,64,32,0,801,799,1,0,0,0,801,
        800,1,0,0,0,802,61,1,0,0,0,803,805,3,66,33,0,804,806,5,135,0,0,805,
        804,1,0,0,0,805,806,1,0,0,0,806,808,1,0,0,0,807,803,1,0,0,0,808,
        811,1,0,0,0,809,807,1,0,0,0,809,810,1,0,0,0,810,812,1,0,0,0,811,
        809,1,0,0,0,812,839,3,92,46,0,813,815,3,66,33,0,814,816,5,135,0,
        0,815,814,1,0,0,0,815,816,1,0,0,0,816,818,1,0,0,0,817,813,1,0,0,
        0,818,821,1,0,0,0,819,817,1,0,0,0,819,820,1,0,0,0,820,822,1,0,0,
        0,821,819,1,0,0,0,822,829,3,4,2,0,823,825,5,135,0,0,824,823,1,0,
        0,0,824,825,1,0,0,0,825,826,1,0,0,0,826,828,3,4,2,0,827,824,1,0,
        0,0,828,831,1,0,0,0,829,827,1,0,0,0,829,830,1,0,0,0,830,836,1,0,
        0,0,831,829,1,0,0,0,832,834,5,135,0,0,833,832,1,0,0,0,833,834,1,
        0,0,0,834,835,1,0,0,0,835,837,3,92,46,0,836,833,1,0,0,0,836,837,
        1,0,0,0,837,839,1,0,0,0,838,809,1,0,0,0,838,819,1,0,0,0,839,63,1,
        0,0,0,840,842,3,66,33,0,841,843,5,135,0,0,842,841,1,0,0,0,842,843,
        1,0,0,0,843,845,1,0,0,0,844,840,1,0,0,0,845,848,1,0,0,0,846,844,
        1,0,0,0,846,847,1,0,0,0,847,855,1,0,0,0,848,846,1,0,0,0,849,851,
        3,4,2,0,850,852,5,135,0,0,851,850,1,0,0,0,851,852,1,0,0,0,852,854,
        1,0,0,0,853,849,1,0,0,0,854,857,1,0,0,0,855,853,1,0,0,0,855,856,
        1,0,0,0,856,858,1,0,0,0,857,855,1,0,0,0,858,860,3,90,45,0,859,861,
        5,135,0,0,860,859,1,0,0,0,860,861,1,0,0,0,861,863,1,0,0,0,862,846,
        1,0,0,0,863,864,1,0,0,0,864,862,1,0,0,0,864,865,1,0,0,0,865,866,
        1,0,0,0,866,867,3,62,31,0,867,65,1,0,0,0,868,872,3,2,1,0,869,872,
        3,68,34,0,870,872,3,82,41,0,871,868,1,0,0,0,871,869,1,0,0,0,871,
        870,1,0,0,0,872,67,1,0,0,0,873,875,5,60,0,0,874,876,5,135,0,0,875,
        874,1,0,0,0,875,876,1,0,0,0,876,877,1,0,0,0,877,878,3,138,69,0,878,
        879,5,135,0,0,879,880,5,61,0,0,880,881,5,135,0,0,881,882,3,206,103,
        0,882,69,1,0,0,0,883,885,5,62,0,0,884,886,5,135,0,0,885,884,1,0,
        0,0,885,886,1,0,0,0,886,887,1,0,0,0,887,892,3,22,11,0,888,889,5,
        135,0,0,889,891,3,72,36,0,890,888,1,0,0,0,891,894,1,0,0,0,892,890,
        1,0,0,0,892,893,1,0,0,0,893,71,1,0,0,0,894,892,1,0,0,0,895,896,5,
        63,0,0,896,897,5,135,0,0,897,898,5,59,0,0,898,899,5,135,0,0,899,
        906,3,76,38,0,900,901,5,63,0,0,901,902,5,135,0,0,902,903,5,64,0,
        0,903,904,5,135,0,0,904,906,3,76,38,0,905,895,1,0,0,0,905,900,1,
        0,0,0,906,73,1,0,0,0,907,909,5,64,0,0,908,910,5,135,0,0,909,908,
        1,0,0,0,909,910,1,0,0,0,910,911,1,0,0,0,911,912,3,110,55,0,912,75,
        1,0,0,0,913,915,5,65,0,0,914,916,5,135,0,0,915,914,1,0,0,0,915,916,
        1,0,0,0,916,917,1,0,0,0,917,928,3,6,3,0,918,920,5,135,0,0,919,918,
        1,0,0,0,919,920,1,0,0,0,920,921,1,0,0,0,921,923,5,4,0,0,922,924,
        5,135,0,0,923,922,1,0,0,0,923,924,1,0,0,0,924,925,1,0,0,0,925,927,
        3,6,3,0,926,919,1,0,0,0,927,930,1,0,0,0,928,926,1,0,0,0,928,929,
        1,0,0,0,929,77,1,0,0,0,930,928,1,0,0,0,931,932,5,68,0,0,932,933,
        5,135,0,0,933,944,3,80,40,0,934,936,5,135,0,0,935,934,1,0,0,0,935,
        936,1,0,0,0,936,937,1,0,0,0,937,939,5,4,0,0,938,940,5,135,0,0,939,
        938,1,0,0,0,939,940,1,0,0,0,940,941,1,0,0,0,941,943,3,80,40,0,942,
        935,1,0,0,0,943,946,1,0,0,0,944,942,1,0,0,0,944,945,1,0,0,0,945,
        79,1,0,0,0,946,944,1,0,0,0,947,948,3,206,103,0,948,949,3,126,63,
        0,949,952,1,0,0,0,950,952,3,136,68,0,951,947,1,0,0,0,951,950,1,0,
        0,0,952,81,1,0,0,0,953,954,5,69,0,0,954,955,5,135,0,0,955,962,3,
        196,98,0,956,958,5,135,0,0,957,956,1,0,0,0,957,958,1,0,0,0,958,959,
        1,0,0,0,959,960,5,70,0,0,960,961,5,135,0,0,961,963,3,86,43,0,962,
        957,1,0,0,0,962,963,1,0,0,0,963,83,1,0,0,0,964,965,5,69,0,0,965,
        968,5,135,0,0,966,969,3,196,98,0,967,969,3,198,99,0,968,966,1,0,
        0,0,968,967,1,0,0,0,969,979,1,0,0,0,970,972,5,135,0,0,971,970,1,
        0,0,0,971,972,1,0,0,0,972,973,1,0,0,0,973,974,5,70,0,0,974,977,5,
        135,0,0,975,978,5,14,0,0,976,978,3,86,43,0,977,975,1,0,0,0,977,976,
        1,0,0,0,978,980,1,0,0,0,979,971,1,0,0,0,979,980,1,0,0,0,980,85,1,
        0,0,0,981,992,3,88,44,0,982,984,5,135,0,0,983,982,1,0,0,0,983,984,
        1,0,0,0,984,985,1,0,0,0,985,987,5,4,0,0,986,988,5,135,0,0,987,986,
        1,0,0,0,987,988,1,0,0,0,988,989,1,0,0,0,989,991,3,88,44,0,990,983,
        1,0,0,0,991,994,1,0,0,0,992,990,1,0,0,0,992,993,1,0,0,0,993,999,
        1,0,0,0,994,992,1,0,0,0,995,997,5,135,0,0,996,995,1,0,0,0,996,997,
        1,0,0,0,997,998,1,0,0,0,998,1000,3,108,54,0,999,996,1,0,0,0,999,
        1000,1,0,0,0,1000,87,1,0,0,0,1001,1002,3,200,100,0,1002,1003,5,135,
        0,0,1003,1004,5,61,0,0,1004,1005,5,135,0,0,1005,1007,1,0,0,0,1006,
        1001,1,0,0,0,1006,1007,1,0,0,0,1007,1008,1,0,0,0,1008,1009,3,206,
        103,0,1009,89,1,0,0,0,1010,1011,5,71,0,0,1011,1016,3,94,47,0,1012,
        1014,5,135,0,0,1013,1012,1,0,0,0,1013,1014,1,0,0,0,1014,1015,1,0,
        0,0,1015,1017,3,108,54,0,1016,1013,1,0,0,0,1016,1017,1,0,0,0,1017,
        91,1,0,0,0,1018,1019,5,72,0,0,1019,1020,3,94,47,0,1020,93,1,0,0,
        0,1021,1023,5,135,0,0,1022,1021,1,0,0,0,1022,1023,1,0,0,0,1023,1024,
        1,0,0,0,1024,1026,5,73,0,0,1025,1022,1,0,0,0,1025,1026,1,0,0,0,1026,
        1027,1,0,0,0,1027,1028,5,135,0,0,1028,1031,3,96,48,0,1029,1030,5,
        135,0,0,1030,1032,3,100,50,0,1031,1029,1,0,0,0,1031,1032,1,0,0,0,
        1032,1035,1,0,0,0,1033,1034,5,135,0,0,1034,1036,3,102,51,0,1035,
        1033,1,0,0,0,1035,1036,1,0,0,0,1036,1039,1,0,0,0,1037,1038,5,135,
        0,0,1038,1040,3,104,52,0,1039,1037,1,0,0,0,1039,1040,1,0,0,0,1040,
        95,1,0,0,0,1041,1052,5,14,0,0,1042,1044,5,135,0,0,1043,1042,1,0,
        0,0,1043,1044,1,0,0,0,1044,1045,1,0,0,0,1045,1047,5,4,0,0,1046,1048,
        5,135,0,0,1047,1046,1,0,0,0,1047,1048,1,0,0,0,1048,1049,1,0,0,0,
        1049,1051,3,98,49,0,1050,1043,1,0,0,0,1051,1054,1,0,0,0,1052,1050,
        1,0,0,0,1052,1053,1,0,0,0,1053,1070,1,0,0,0,1054,1052,1,0,0,0,1055,
        1066,3,98,49,0,1056,1058,5,135,0,0,1057,1056,1,0,0,0,1057,1058,1,
        0,0,0,1058,1059,1,0,0,0,1059,1061,5,4,0,0,1060,1062,5,135,0,0,1061,
        1060,1,0,0,0,1061,1062,1,0,0,0,1062,1063,1,0,0,0,1063,1065,3,98,
        49,0,1064,1057,1,0,0,0,1065,1068,1,0,0,0,1066,1064,1,0,0,0,1066,
        1067,1,0,0,0,1067,1070,1,0,0,0,1068,1066,1,0,0,0,1069,1041,1,0,0,
        0,1069,1055,1,0,0,0,1070,97,1,0,0,0,1071,1072,3,138,69,0,1072,1073,
        5,135,0,0,1073,1074,5,61,0,0,1074,1075,5,135,0,0,1075,1076,3,206,
        103,0,1076,1079,1,0,0,0,1077,1079,3,138,69,0,1078,1071,1,0,0,0,1078,
        1077,1,0,0,0,1079,99,1,0,0,0,1080,1081,5,74,0,0,1081,1082,5,135,
        0,0,1082,1083,5,75,0,0,1083,1084,5,135,0,0,1084,1092,3,106,53,0,
        1085,1087,5,4,0,0,1086,1088,5,135,0,0,1087,1086,1,0,0,0,1087,1088,
        1,0,0,0,1088,1089,1,0,0,0,1089,1091,3,106,53,0,1090,1085,1,0,0,0,
        1091,1094,1,0,0,0,1092,1090,1,0,0,0,1092,1093,1,0,0,0,1093,101,1,
        0,0,0,1094,1092,1,0,0,0,1095,1096,5,76,0,0,1096,1097,5,135,0,0,1097,
        1098,3,138,69,0,1098,103,1,0,0,0,1099,1100,5,77,0,0,1100,1101,5,
        135,0,0,1101,1102,3,138,69,0,1102,105,1,0,0,0,1103,1108,3,138,69,
        0,1104,1106,5,135,0,0,1105,1104,1,0,0,0,1105,1106,1,0,0,0,1106,1107,
        1,0,0,0,1107,1109,7,3,0,0,1108,1105,1,0,0,0,1108,1109,1,0,0,0,1109,
        107,1,0,0,0,1110,1111,5,82,0,0,1111,1112,5,135,0,0,1112,1113,3,138,
        69,0,1113,109,1,0,0,0,1114,1125,3,22,11,0,1115,1117,5,135,0,0,1116,
        1115,1,0,0,0,1116,1117,1,0,0,0,1117,1118,1,0,0,0,1118,1120,5,4,0,
        0,1119,1121,5,135,0,0,1120,1119,1,0,0,0,1120,1121,1,0,0,0,1121,1122,
        1,0,0,0,1122,1124,3,22,11,0,1123,1116,1,0,0,0,1124,1127,1,0,0,0,
        1125,1123,1,0,0,0,1125,1126,1,0,0,0,1126,111,1,0,0,0,1127,1125,1,
        0,0,0,1128,1129,3,114,57,0,1129,113,1,0,0,0,1130,1137,3,28,14,0,
        1131,1133,5,135,0,0,1132,1131,1,0,0,0,1132,1133,1,0,0,0,1133,1134,
        1,0,0,0,1134,1136,3,118,59,0,1135,1132,1,0,0,0,1136,1139,1,0,0,0,
        1137,1135,1,0,0,0,1137,1138,1,0,0,0,1138,1145,1,0,0,0,1139,1137,
        1,0,0,0,1140,1141,5,5,0,0,1141,1142,3,114,57,0,1142,1143,5,6,0,0,
        1143,1145,1,0,0,0,1144,1130,1,0,0,0,1144,1140,1,0,0,0,1145,115,1,
        0,0,0,1146,1151,3,28,14,0,1147,1149,5,135,0,0,1148,1147,1,0,0,0,
        1148,1149,1,0,0,0,1149,1150,1,0,0,0,1150,1152,3,118,59,0,1151,1148,
        1,0,0,0,1152,1153,1,0,0,0,1153,1151,1,0,0,0,1153,1154,1,0,0,0,1154,
        117,1,0,0,0,1155,1157,3,120,60,0,1156,1158,5,135,0,0,1157,1156,1,
        0,0,0,1157,1158,1,0,0,0,1158,1159,1,0,0,0,1159,1160,3,28,14,0,1160,
        119,1,0,0,0,1161,1163,3,228,114,0,1162,1164,5,135,0,0,1163,1162,
        1,0,0,0,1163,1164,1,0,0,0,1164,1165,1,0,0,0,1165,1167,3,232,116,
        0,1166,1168,5,135,0,0,1167,1166,1,0,0,0,1167,1168,1,0,0,0,1168,1170,
        1,0,0,0,1169,1171,3,34,17,0,1170,1169,1,0,0,0,1170,1171,1,0,0,0,
        1171,1173,1,0,0,0,1172,1174,5,135,0,0,1173,1172,1,0,0,0,1173,1174,
        1,0,0,0,1174,1175,1,0,0,0,1175,1177,3,232,116,0,1176,1178,5,135,
        0,0,1177,1176,1,0,0,0,1177,1178,1,0,0,0,1178,1179,1,0,0,0,1179,1180,
        3,230,115,0,1180,1226,1,0,0,0,1181,1183,3,228,114,0,1182,1184,5,
        135,0,0,1183,1182,1,0,0,0,1183,1184,1,0,0,0,1184,1185,1,0,0,0,1185,
        1187,3,232,116,0,1186,1188,5,135,0,0,1187,1186,1,0,0,0,1187,1188,
        1,0,0,0,1188,1190,1,0,0,0,1189,1191,3,34,17,0,1190,1189,1,0,0,0,
        1190,1191,1,0,0,0,1191,1193,1,0,0,0,1192,1194,5,135,0,0,1193,1192,
        1,0,0,0,1193,1194,1,0,0,0,1194,1195,1,0,0,0,1195,1196,3,232,116,
        0,1196,1226,1,0,0,0,1197,1199,3,232,116,0,1198,1200,5,135,0,0,1199,
        1198,1,0,0,0,1199,1200,1,0,0,0,1200,1202,1,0,0,0,1201,1203,3,34,
        17,0,1202,1201,1,0,0,0,1202,1203,1,0,0,0,1203,1205,1,0,0,0,1204,
        1206,5,135,0,0,1205,1204,1,0,0,0,1205,1206,1,0,0,0,1206,1207,1,0,
        0,0,1207,1209,3,232,116,0,1208,1210,5,135,0,0,1209,1208,1,0,0,0,
        1209,1210,1,0,0,0,1210,1211,1,0,0,0,1211,1212,3,230,115,0,1212,1226,
        1,0,0,0,1213,1215,3,232,116,0,1214,1216,5,135,0,0,1215,1214,1,0,
        0,0,1215,1216,1,0,0,0,1216,1218,1,0,0,0,1217,1219,3,34,17,0,1218,
        1217,1,0,0,0,1218,1219,1,0,0,0,1219,1221,1,0,0,0,1220,1222,5,135,
        0,0,1221,1220,1,0,0,0,1221,1222,1,0,0,0,1222,1223,1,0,0,0,1223,1224,
        3,232,116,0,1224,1226,1,0,0,0,1225,1161,1,0,0,0,1225,1181,1,0,0,
        0,1225,1197,1,0,0,0,1225,1213,1,0,0,0,1226,121,1,0,0,0,1227,1230,
        3,220,110,0,1228,1230,3,224,112,0,1229,1227,1,0,0,0,1229,1228,1,
        0,0,0,1230,123,1,0,0,0,1231,1233,5,8,0,0,1232,1234,5,135,0,0,1233,
        1232,1,0,0,0,1233,1234,1,0,0,0,1234,1235,1,0,0,0,1235,1249,3,134,
        67,0,1236,1238,5,135,0,0,1237,1236,1,0,0,0,1237,1238,1,0,0,0,1238,
        1239,1,0,0,0,1239,1241,5,15,0,0,1240,1242,5,8,0,0,1241,1240,1,0,
        0,0,1241,1242,1,0,0,0,1242,1244,1,0,0,0,1243,1245,5,135,0,0,1244,
        1243,1,0,0,0,1244,1245,1,0,0,0,1245,1246,1,0,0,0,1246,1248,3,134,
        67,0,1247,1237,1,0,0,0,1248,1251,1,0,0,0,1249,1247,1,0,0,0,1249,
        1250,1,0,0,0,1250,125,1,0,0,0,1251,1249,1,0,0,0,1252,1259,3,128,
        64,0,1253,1255,5,135,0,0,1254,1253,1,0,0,0,1254,1255,1,0,0,0,1255,
        1256,1,0,0,0,1256,1258,3,128,64,0,1257,1254,1,0,0,0,1258,1261,1,
        0,0,0,1259,1257,1,0,0,0,1259,1260,1,0,0,0,1260,127,1,0,0,0,1261,
        1259,1,0,0,0,1262,1264,5,8,0,0,1263,1265,5,135,0,0,1264,1263,1,0,
        0,0,1264,1265,1,0,0,0,1265,1266,1,0,0,0,1266,1267,3,132,66,0,1267,
        129,1,0,0,0,1268,1270,5,14,0,0,1269,1271,5,135,0,0,1270,1269,1,0,
        0,0,1270,1271,1,0,0,0,1271,1276,1,0,0,0,1272,1274,3,214,107,0,1273,
        1275,5,135,0,0,1274,1273,1,0,0,0,1274,1275,1,0,0,0,1275,1277,1,0,
        0,0,1276,1272,1,0,0,0,1276,1277,1,0,0,0,1277,1288,1,0,0,0,1278,1280,
        5,12,0,0,1279,1281,5,135,0,0,1280,1279,1,0,0,0,1280,1281,1,0,0,0,
        1281,1286,1,0,0,0,1282,1284,3,214,107,0,1283,1285,5,135,0,0,1284,
        1283,1,0,0,0,1284,1285,1,0,0,0,1285,1287,1,0,0,0,1286,1282,1,0,0,
        0,1286,1287,1,0,0,0,1287,1289,1,0,0,0,1288,1278,1,0,0,0,1288,1289,
        1,0,0,0,1289,131,1,0,0,0,1290,1291,3,226,113,0,1291,133,1,0,0,0,
        1292,1293,3,226,113,0,1293,135,1,0,0,0,1294,1299,3,170,85,0,1295,
        1297,5,135,0,0,1296,1295,1,0,0,0,1296,1297,1,0,0,0,1297,1298,1,0,
        0,0,1298,1300,3,168,84,0,1299,1296,1,0,0,0,1300,1301,1,0,0,0,1301,
        1299,1,0,0,0,1301,1302,1,0,0,0,1302,137,1,0,0,0,1303,1304,3,140,
        70,0,1304,139,1,0,0,0,1305,1312,3,142,71,0,1306,1307,5,135,0,0,1307,
        1308,5,83,0,0,1308,1309,5,135,0,0,1309,1311,3,142,71,0,1310,1306,
        1,0,0,0,1311,1314,1,0,0,0,1312,1310,1,0,0,0,1312,1313,1,0,0,0,1313,
        141,1,0,0,0,1314,1312,1,0,0,0,1315,1322,3,144,72,0,1316,1317,5,135,
        0,0,1317,1318,5,84,0,0,1318,1319,5,135,0,0,1319,1321,3,144,72,0,
        1320,1316,1,0,0,0,1321,1324,1,0,0,0,1322,1320,1,0,0,0,1322,1323,
        1,0,0,0,1323,143,1,0,0,0,1324,1322,1,0,0,0,1325,1332,3,146,73,0,
        1326,1327,5,135,0,0,1327,1328,5,85,0,0,1328,1329,5,135,0,0,1329,
        1331,3,146,73,0,1330,1326,1,0,0,0,1331,1334,1,0,0,0,1332,1330,1,
        0,0,0,1332,1333,1,0,0,0,1333,145,1,0,0,0,1334,1332,1,0,0,0,1335,
        1337,5,86,0,0,1336,1338,5,135,0,0,1337,1336,1,0,0,0,1337,1338,1,
        0,0,0,1338,1340,1,0,0,0,1339,1335,1,0,0,0,1340,1343,1,0,0,0,1341,
        1339,1,0,0,0,1341,1342,1,0,0,0,1342,1344,1,0,0,0,1343,1341,1,0,0,
        0,1344,1345,3,148,74,0,1345,147,1,0,0,0,1346,1353,3,36,18,0,1347,
        1349,5,135,0,0,1348,1347,1,0,0,0,1348,1349,1,0,0,0,1349,1350,1,0,
        0,0,1350,1352,3,150,75,0,1351,1348,1,0,0,0,1352,1355,1,0,0,0,1353,
        1351,1,0,0,0,1353,1354,1,0,0,0,1354,149,1,0,0,0,1355,1353,1,0,0,
        0,1356,1358,5,2,0,0,1357,1359,5,135,0,0,1358,1357,1,0,0,0,1358,1359,
        1,0,0,0,1359,1360,1,0,0,0,1360,1387,3,36,18,0,1361,1363,5,16,0,0,
        1362,1364,5,135,0,0,1363,1362,1,0,0,0,1363,1364,1,0,0,0,1364,1365,
        1,0,0,0,1365,1387,3,36,18,0,1366,1368,5,17,0,0,1367,1369,5,135,0,
        0,1368,1367,1,0,0,0,1368,1369,1,0,0,0,1369,1370,1,0,0,0,1370,1387,
        3,36,18,0,1371,1373,5,18,0,0,1372,1374,5,135,0,0,1373,1372,1,0,0,
        0,1373,1374,1,0,0,0,1374,1375,1,0,0,0,1375,1387,3,36,18,0,1376,1378,
        5,19,0,0,1377,1379,5,135,0,0,1378,1377,1,0,0,0,1378,1379,1,0,0,0,
        1379,1380,1,0,0,0,1380,1387,3,36,18,0,1381,1383,5,20,0,0,1382,1384,
        5,135,0,0,1383,1382,1,0,0,0,1383,1384,1,0,0,0,1384,1385,1,0,0,0,
        1385,1387,3,36,18,0,1386,1356,1,0,0,0,1386,1361,1,0,0,0,1386,1366,
        1,0,0,0,1386,1371,1,0,0,0,1386,1376,1,0,0,0,1386,1381,1,0,0,0,1387,
        151,1,0,0,0,1388,1389,5,135,0,0,1389,1390,5,87,0,0,1390,1391,5,135,
        0,0,1391,1399,5,71,0,0,1392,1393,5,135,0,0,1393,1394,5,88,0,0,1394,
        1395,5,135,0,0,1395,1399,5,71,0,0,1396,1397,5,135,0,0,1397,1399,
        5,89,0,0,1398,1388,1,0,0,0,1398,1392,1,0,0,0,1398,1396,1,0,0,0,1399,
        1401,1,0,0,0,1400,1402,5,135,0,0,1401,1400,1,0,0,0,1401,1402,1,0,
        0,0,1402,1403,1,0,0,0,1403,1404,3,158,79,0,1404,153,1,0,0,0,1405,
        1406,5,135,0,0,1406,1408,5,90,0,0,1407,1409,5,135,0,0,1408,1407,
        1,0,0,0,1408,1409,1,0,0,0,1409,1410,1,0,0,0,1410,1411,3,158,79,0,
        1411,155,1,0,0,0,1412,1413,5,135,0,0,1413,1414,5,91,0,0,1414,1415,
        5,135,0,0,1415,1423,5,92,0,0,1416,1417,5,135,0,0,1417,1418,5,91,
        0,0,1418,1419,5,135,0,0,1419,1420,5,86,0,0,1420,1421,5,135,0,0,1421,
        1423,5,92,0,0,1422,1412,1,0,0,0,1422,1416,1,0,0,0,1423,157,1,0,0,
        0,1424,1443,3,160,80,0,1425,1427,5,135,0,0,1426,1425,1,0,0,0,1426,
        1427,1,0,0,0,1427,1428,1,0,0,0,1428,1430,5,21,0,0,1429,1431,5,135,
        0,0,1430,1429,1,0,0,0,1430,1431,1,0,0,0,1431,1432,1,0,0,0,1432,1442,
        3,160,80,0,1433,1435,5,135,0,0,1434,1433,1,0,0,0,1434,1435,1,0,0,
        0,1435,1436,1,0,0,0,1436,1438,5,22,0,0,1437,1439,5,135,0,0,1438,
        1437,1,0,0,0,1438,1439,1,0,0,0,1439,1440,1,0,0,0,1440,1442,3,160,
        80,0,1441,1426,1,0,0,0,1441,1434,1,0,0,0,1442,1445,1,0,0,0,1443,
        1441,1,0,0,0,1443,1444,1,0,0,0,1444,159,1,0,0,0,1445,1443,1,0,0,
        0,1446,1473,3,162,81,0,1447,1449,5,135,0,0,1448,1447,1,0,0,0,1448,
        1449,1,0,0,0,1449,1450,1,0,0,0,1450,1452,5,14,0,0,1451,1453,5,135,
        0,0,1452,1451,1,0,0,0,1452,1453,1,0,0,0,1453,1454,1,0,0,0,1454,1472,
        3,162,81,0,1455,1457,5,135,0,0,1456,1455,1,0,0,0,1456,1457,1,0,0,
        0,1457,1458,1,0,0,0,1458,1460,5,23,0,0,1459,1461,5,135,0,0,1460,
        1459,1,0,0,0,1460,1461,1,0,0,0,1461,1462,1,0,0,0,1462,1472,3,162,
        81,0,1463,1465,5,135,0,0,1464,1463,1,0,0,0,1464,1465,1,0,0,0,1465,
        1466,1,0,0,0,1466,1468,5,24,0,0,1467,1469,5,135,0,0,1468,1467,1,
        0,0,0,1468,1469,1,0,0,0,1469,1470,1,0,0,0,1470,1472,3,162,81,0,1471,
        1448,1,0,0,0,1471,1456,1,0,0,0,1471,1464,1,0,0,0,1472,1475,1,0,0,
        0,1473,1471,1,0,0,0,1473,1474,1,0,0,0,1474,161,1,0,0,0,1475,1473,
        1,0,0,0,1476,1487,3,164,82,0,1477,1479,5,135,0,0,1478,1477,1,0,0,
        0,1478,1479,1,0,0,0,1479,1480,1,0,0,0,1480,1482,5,25,0,0,1481,1483,
        5,135,0,0,1482,1481,1,0,0,0,1482,1483,1,0,0,0,1483,1484,1,0,0,0,
        1484,1486,3,164,82,0,1485,1478,1,0,0,0,1486,1489,1,0,0,0,1487,1485,
        1,0,0,0,1487,1488,1,0,0,0,1488,163,1,0,0,0,1489,1487,1,0,0,0,1490,
        1497,3,38,19,0,1491,1493,7,4,0,0,1492,1494,5,135,0,0,1493,1492,1,
        0,0,0,1493,1494,1,0,0,0,1494,1495,1,0,0,0,1495,1497,3,38,19,0,1496,
        1490,1,0,0,0,1496,1491,1,0,0,0,1497,165,1,0,0,0,1498,1505,3,170,
        85,0,1499,1501,5,135,0,0,1500,1499,1,0,0,0,1500,1501,1,0,0,0,1501,
        1502,1,0,0,0,1502,1504,3,168,84,0,1503,1500,1,0,0,0,1504,1507,1,
        0,0,0,1505,1503,1,0,0,0,1505,1506,1,0,0,0,1506,1512,1,0,0,0,1507,
        1505,1,0,0,0,1508,1510,5,135,0,0,1509,1508,1,0,0,0,1509,1510,1,0,
        0,0,1510,1511,1,0,0,0,1511,1513,3,126,63,0,1512,1509,1,0,0,0,1512,
        1513,1,0,0,0,1513,167,1,0,0,0,1514,1516,5,1,0,0,1515,1517,5,135,
        0,0,1516,1515,1,0,0,0,1516,1517,1,0,0,0,1517,1518,1,0,0,0,1518,1519,
        3,222,111,0,1519,169,1,0,0,0,1520,1545,3,208,104,0,1521,1545,3,224,
        112,0,1522,1545,3,172,86,0,1523,1525,5,93,0,0,1524,1526,5,135,0,
        0,1525,1524,1,0,0,0,1525,1526,1,0,0,0,1526,1527,1,0,0,0,1527,1529,
        5,5,0,0,1528,1530,5,135,0,0,1529,1528,1,0,0,0,1529,1530,1,0,0,0,
        1530,1531,1,0,0,0,1531,1533,5,14,0,0,1532,1534,5,135,0,0,1533,1532,
        1,0,0,0,1533,1534,1,0,0,0,1534,1535,1,0,0,0,1535,1545,5,6,0,0,1536,
        1545,3,176,88,0,1537,1545,3,178,89,0,1538,1545,3,180,90,0,1539,1545,
        3,184,92,0,1540,1545,3,186,93,0,1541,1545,3,190,95,0,1542,1545,3,
        194,97,0,1543,1545,3,206,103,0,1544,1520,1,0,0,0,1544,1521,1,0,0,
        0,1544,1522,1,0,0,0,1544,1523,1,0,0,0,1544,1536,1,0,0,0,1544,1537,
        1,0,0,0,1544,1538,1,0,0,0,1544,1539,1,0,0,0,1544,1540,1,0,0,0,1544,
        1541,1,0,0,0,1544,1542,1,0,0,0,1544,1543,1,0,0,0,1545,171,1,0,0,
        0,1546,1551,5,94,0,0,1547,1549,5,135,0,0,1548,1547,1,0,0,0,1548,
        1549,1,0,0,0,1549,1550,1,0,0,0,1550,1552,3,174,87,0,1551,1548,1,
        0,0,0,1552,1553,1,0,0,0,1553,1551,1,0,0,0,1553,1554,1,0,0,0,1554,
        1569,1,0,0,0,1555,1557,5,94,0,0,1556,1558,5,135,0,0,1557,1556,1,
        0,0,0,1557,1558,1,0,0,0,1558,1559,1,0,0,0,1559,1564,3,138,69,0,1560,
        1562,5,135,0,0,1561,1560,1,0,0,0,1561,1562,1,0,0,0,1562,1563,1,0,
        0,0,1563,1565,3,174,87,0,1564,1561,1,0,0,0,1565,1566,1,0,0,0,1566,
        1564,1,0,0,0,1566,1567,1,0,0,0,1567,1569,1,0,0,0,1568,1546,1,0,0,
        0,1568,1555,1,0,0,0,1569,1578,1,0,0,0,1570,1572,5,135,0,0,1571,1570,
        1,0,0,0,1571,1572,1,0,0,0,1572,1573,1,0,0,0,1573,1575,5,95,0,0,1574,
        1576,5,135,0,0,1575,1574,1,0,0,0,1575,1576,1,0,0,0,1576,1577,1,0,
        0,0,1577,1579,3,138,69,0,1578,1571,1,0,0,0,1578,1579,1,0,0,0,1579,
        1581,1,0,0,0,1580,1582,5,135,0,0,1581,1580,1,0,0,0,1581,1582,1,0,
        0,0,1582,1583,1,0,0,0,1583,1584,5,96,0,0,1584,173,1,0,0,0,1585,1587,
        5,97,0,0,1586,1588,5,135,0,0,1587,1586,1,0,0,0,1587,1588,1,0,0,0,
        1588,1589,1,0,0,0,1589,1591,3,138,69,0,1590,1592,5,135,0,0,1591,
        1590,1,0,0,0,1591,1592,1,0,0,0,1592,1593,1,0,0,0,1593,1595,5,98,
        0,0,1594,1596,5,135,0,0,1595,1594,1,0,0,0,1595,1596,1,0,0,0,1596,
        1597,1,0,0,0,1597,1598,3,138,69,0,1598,175,1,0,0,0,1599,1601,5,10,
        0,0,1600,1602,5,135,0,0,1601,1600,1,0,0,0,1601,1602,1,0,0,0,1602,
        1603,1,0,0,0,1603,1612,3,182,91,0,1604,1606,5,135,0,0,1605,1604,
        1,0,0,0,1605,1606,1,0,0,0,1606,1607,1,0,0,0,1607,1609,5,15,0,0,1608,
        1610,5,135,0,0,1609,1608,1,0,0,0,1609,1610,1,0,0,0,1610,1611,1,0,
        0,0,1611,1613,3,138,69,0,1612,1605,1,0,0,0,1612,1613,1,0,0,0,1613,
        1615,1,0,0,0,1614,1616,5,135,0,0,1615,1614,1,0,0,0,1615,1616,1,0,
        0,0,1616,1617,1,0,0,0,1617,1618,5,11,0,0,1618,177,1,0,0,0,1619,1621,
        5,10,0,0,1620,1622,5,135,0,0,1621,1620,1,0,0,0,1621,1622,1,0,0,0,
        1622,1631,1,0,0,0,1623,1625,3,206,103,0,1624,1626,5,135,0,0,1625,
        1624,1,0,0,0,1625,1626,1,0,0,0,1626,1627,1,0,0,0,1627,1629,5,2,0,
        0,1628,1630,5,135,0,0,1629,1628,1,0,0,0,1629,1630,1,0,0,0,1630,1632,
        1,0,0,0,1631,1623,1,0,0,0,1631,1632,1,0,0,0,1632,1633,1,0,0,0,1633,
        1635,3,116,58,0,1634,1636,5,135,0,0,1635,1634,1,0,0,0,1635,1636,
        1,0,0,0,1636,1641,1,0,0,0,1637,1639,3,108,54,0,1638,1640,5,135,0,
        0,1639,1638,1,0,0,0,1639,1640,1,0,0,0,1640,1642,1,0,0,0,1641,1637,
        1,0,0,0,1641,1642,1,0,0,0,1642,1643,1,0,0,0,1643,1645,5,15,0,0,1644,
        1646,5,135,0,0,1645,1644,1,0,0,0,1645,1646,1,0,0,0,1646,1647,1,0,
        0,0,1647,1649,3,138,69,0,1648,1650,5,135,0,0,1649,1648,1,0,0,0,1649,
        1650,1,0,0,0,1650,1651,1,0,0,0,1651,1652,5,11,0,0,1652,179,1,0,0,
        0,1653,1655,5,57,0,0,1654,1656,5,135,0,0,1655,1654,1,0,0,0,1655,
        1656,1,0,0,0,1656,1657,1,0,0,0,1657,1659,5,5,0,0,1658,1660,5,135,
        0,0,1659,1658,1,0,0,0,1659,1660,1,0,0,0,1660,1661,1,0,0,0,1661,1663,
        3,182,91,0,1662,1664,5,135,0,0,1663,1662,1,0,0,0,1663,1664,1,0,0,
        0,1664,1665,1,0,0,0,1665,1666,5,6,0,0,1666,1710,1,0,0,0,1667,1669,
        5,99,0,0,1668,1670,5,135,0,0,1669,1668,1,0,0,0,1669,1670,1,0,0,0,
        1670,1671,1,0,0,0,1671,1673,5,5,0,0,1672,1674,5,135,0,0,1673,1672,
        1,0,0,0,1673,1674,1,0,0,0,1674,1675,1,0,0,0,1675,1677,3,182,91,0,
        1676,1678,5,135,0,0,1677,1676,1,0,0,0,1677,1678,1,0,0,0,1678,1679,
        1,0,0,0,1679,1680,5,6,0,0,1680,1710,1,0,0,0,1681,1683,5,100,0,0,
        1682,1684,5,135,0,0,1683,1682,1,0,0,0,1683,1684,1,0,0,0,1684,1685,
        1,0,0,0,1685,1687,5,5,0,0,1686,1688,5,135,0,0,1687,1686,1,0,0,0,
        1687,1688,1,0,0,0,1688,1689,1,0,0,0,1689,1691,3,182,91,0,1690,1692,
        5,135,0,0,1691,1690,1,0,0,0,1691,1692,1,0,0,0,1692,1693,1,0,0,0,
        1693,1694,5,6,0,0,1694,1710,1,0,0,0,1695,1697,5,101,0,0,1696,1698,
        5,135,0,0,1697,1696,1,0,0,0,1697,1698,1,0,0,0,1698,1699,1,0,0,0,
        1699,1701,5,5,0,0,1700,1702,5,135,0,0,1701,1700,1,0,0,0,1701,1702,
        1,0,0,0,1702,1703,1,0,0,0,1703,1705,3,182,91,0,1704,1706,5,135,0,
        0,1705,1704,1,0,0,0,1705,1706,1,0,0,0,1706,1707,1,0,0,0,1707,1708,
        5,6,0,0,1708,1710,1,0,0,0,1709,1653,1,0,0,0,1709,1667,1,0,0,0,1709,
        1681,1,0,0,0,1709,1695,1,0,0,0,1710,181,1,0,0,0,1711,1716,3,188,
        94,0,1712,1714,5,135,0,0,1713,1712,1,0,0,0,1713,1714,1,0,0,0,1714,
        1715,1,0,0,0,1715,1717,3,108,54,0,1716,1713,1,0,0,0,1716,1717,1,
        0,0,0,1717,183,1,0,0,0,1718,1719,3,116,58,0,1719,185,1,0,0,0,1720,
        1722,5,5,0,0,1721,1723,5,135,0,0,1722,1721,1,0,0,0,1722,1723,1,0,
        0,0,1723,1724,1,0,0,0,1724,1726,3,138,69,0,1725,1727,5,135,0,0,1726,
        1725,1,0,0,0,1726,1727,1,0,0,0,1727,1728,1,0,0,0,1728,1729,5,6,0,
        0,1729,187,1,0,0,0,1730,1731,3,206,103,0,1731,1732,5,135,0,0,1732,
        1733,5,90,0,0,1733,1734,5,135,0,0,1734,1735,3,138,69,0,1735,189,
        1,0,0,0,1736,1738,3,192,96,0,1737,1739,5,135,0,0,1738,1737,1,0,0,
        0,1738,1739,1,0,0,0,1739,1740,1,0,0,0,1740,1742,5,5,0,0,1741,1743,
        5,135,0,0,1742,1741,1,0,0,0,1742,1743,1,0,0,0,1743,1748,1,0,0,0,
        1744,1746,5,73,0,0,1745,1747,5,135,0,0,1746,1745,1,0,0,0,1746,1747,
        1,0,0,0,1747,1749,1,0,0,0,1748,1744,1,0,0,0,1748,1749,1,0,0,0,1749,
        1767,1,0,0,0,1750,1752,3,138,69,0,1751,1753,5,135,0,0,1752,1751,
        1,0,0,0,1752,1753,1,0,0,0,1753,1764,1,0,0,0,1754,1756,5,4,0,0,1755,
        1757,5,135,0,0,1756,1755,1,0,0,0,1756,1757,1,0,0,0,1757,1758,1,0,
        0,0,1758,1760,3,138,69,0,1759,1761,5,135,0,0,1760,1759,1,0,0,0,1760,
        1761,1,0,0,0,1761,1763,1,0,0,0,1762,1754,1,0,0,0,1763,1766,1,0,0,
        0,1764,1762,1,0,0,0,1764,1765,1,0,0,0,1765,1768,1,0,0,0,1766,1764,
        1,0,0,0,1767,1750,1,0,0,0,1767,1768,1,0,0,0,1768,1769,1,0,0,0,1769,
        1770,5,6,0,0,1770,191,1,0,0,0,1771,1772,3,204,102,0,1772,1773,3,
        48,24,0,1773,193,1,0,0,0,1774,1776,5,102,0,0,1775,1777,5,135,0,0,
        1776,1775,1,0,0,0,1776,1777,1,0,0,0,1777,1778,1,0,0,0,1778,1780,
        5,7,0,0,1779,1781,5,135,0,0,1780,1779,1,0,0,0,1780,1781,1,0,0,0,
        1781,1790,1,0,0,0,1782,1791,3,56,28,0,1783,1788,3,110,55,0,1784,
        1786,5,135,0,0,1785,1784,1,0,0,0,1785,1786,1,0,0,0,1786,1787,1,0,
        0,0,1787,1789,3,108,54,0,1788,1785,1,0,0,0,1788,1789,1,0,0,0,1789,
        1791,1,0,0,0,1790,1782,1,0,0,0,1790,1783,1,0,0,0,1791,1793,1,0,0,
        0,1792,1794,5,135,0,0,1793,1792,1,0,0,0,1793,1794,1,0,0,0,1794,1795,
        1,0,0,0,1795,1796,5,9,0,0,1796,195,1,0,0,0,1797,1799,3,202,101,0,
        1798,1800,5,135,0,0,1799,1798,1,0,0,0,1799,1800,1,0,0,0,1800,1801,
        1,0,0,0,1801,1803,5,5,0,0,1802,1804,5,135,0,0,1803,1802,1,0,0,0,
        1803,1804,1,0,0,0,1804,1822,1,0,0,0,1805,1807,3,138,69,0,1806,1808,
        5,135,0,0,1807,1806,1,0,0,0,1807,1808,1,0,0,0,1808,1819,1,0,0,0,
        1809,1811,5,4,0,0,1810,1812,5,135,0,0,1811,1810,1,0,0,0,1811,1812,
        1,0,0,0,1812,1813,1,0,0,0,1813,1815,3,138,69,0,1814,1816,5,135,0,
        0,1815,1814,1,0,0,0,1815,1816,1,0,0,0,1816,1818,1,0,0,0,1817,1809,
        1,0,0,0,1818,1821,1,0,0,0,1819,1817,1,0,0,0,1819,1820,1,0,0,0,1820,
        1823,1,0,0,0,1821,1819,1,0,0,0,1822,1805,1,0,0,0,1822,1823,1,0,0,
        0,1823,1824,1,0,0,0,1824,1825,5,6,0,0,1825,197,1,0,0,0,1826,1827,
        3,202,101,0,1827,199,1,0,0,0,1828,1829,3,48,24,0,1829,201,1,0,0,
        0,1830,1831,3,204,102,0,1831,1832,3,48,24,0,1832,203,1,0,0,0,1833,
        1834,3,48,24,0,1834,1835,5,1,0,0,1835,1837,1,0,0,0,1836,1833,1,0,
        0,0,1837,1840,1,0,0,0,1838,1836,1,0,0,0,1838,1839,1,0,0,0,1839,205,
        1,0,0,0,1840,1838,1,0,0,0,1841,1842,3,48,24,0,1842,207,1,0,0,0,1843,
        1850,3,210,105,0,1844,1850,5,92,0,0,1845,1850,3,212,106,0,1846,1850,
        5,117,0,0,1847,1850,3,218,109,0,1848,1850,3,220,110,0,1849,1843,
        1,0,0,0,1849,1844,1,0,0,0,1849,1845,1,0,0,0,1849,1846,1,0,0,0,1849,
        1847,1,0,0,0,1849,1848,1,0,0,0,1850,209,1,0,0,0,1851,1852,7,5,0,
        0,1852,211,1,0,0,0,1853,1856,3,216,108,0,1854,1856,3,214,107,0,1855,
        1853,1,0,0,0,1855,1854,1,0,0,0,1856,213,1,0,0,0,1857,1858,7,6,0,
        0,1858,215,1,0,0,0,1859,1860,7,7,0,0,1860,217,1,0,0,0,1861,1863,
        5,10,0,0,1862,1864,5,135,0,0,1863,1862,1,0,0,0,1863,1864,1,0,0,0,
        1864,1882,1,0,0,0,1865,1867,3,138,69,0,1866,1868,5,135,0,0,1867,
        1866,1,0,0,0,1867,1868,1,0,0,0,1868,1879,1,0,0,0,1869,1871,5,4,0,
        0,1870,1872,5,135,0,0,1871,1870,1,0,0,0,1871,1872,1,0,0,0,1872,1873,
        1,0,0,0,1873,1875,3,138,69,0,1874,1876,5,135,0,0,1875,1874,1,0,0,
        0,1875,1876,1,0,0,0,1876,1878,1,0,0,0,1877,1869,1,0,0,0,1878,1881,
        1,0,0,0,1879,1877,1,0,0,0,1879,1880,1,0,0,0,1880,1883,1,0,0,0,1881,
        1879,1,0,0,0,1882,1865,1,0,0,0,1882,1883,1,0,0,0,1883,1884,1,0,0,
        0,1884,1885,5,11,0,0,1885,219,1,0,0,0,1886,1888,5,7,0,0,1887,1889,
        5,135,0,0,1888,1887,1,0,0,0,1888,1889,1,0,0,0,1889,1923,1,0,0,0,
        1890,1892,3,222,111,0,1891,1893,5,135,0,0,1892,1891,1,0,0,0,1892,
        1893,1,0,0,0,1893,1894,1,0,0,0,1894,1896,5,8,0,0,1895,1897,5,135,
        0,0,1896,1895,1,0,0,0,1896,1897,1,0,0,0,1897,1898,1,0,0,0,1898,1900,
        3,138,69,0,1899,1901,5,135,0,0,1900,1899,1,0,0,0,1900,1901,1,0,0,
        0,1901,1920,1,0,0,0,1902,1904,5,4,0,0,1903,1905,5,135,0,0,1904,1903,
        1,0,0,0,1904,1905,1,0,0,0,1905,1906,1,0,0,0,1906,1908,3,222,111,
        0,1907,1909,5,135,0,0,1908,1907,1,0,0,0,1908,1909,1,0,0,0,1909,1910,
        1,0,0,0,1910,1912,5,8,0,0,1911,1913,5,135,0,0,1912,1911,1,0,0,0,
        1912,1913,1,0,0,0,1913,1914,1,0,0,0,1914,1916,3,138,69,0,1915,1917,
        5,135,0,0,1916,1915,1,0,0,0,1916,1917,1,0,0,0,1917,1919,1,0,0,0,
        1918,1902,1,0,0,0,1919,1922,1,0,0,0,1920,1918,1,0,0,0,1920,1921,
        1,0,0,0,1921,1924,1,0,0,0,1922,1920,1,0,0,0,1923,1890,1,0,0,0,1923,
        1924,1,0,0,0,1924,1925,1,0,0,0,1925,1926,5,9,0,0,1926,221,1,0,0,
        0,1927,1928,3,226,113,0,1928,223,1,0,0,0,1929,1932,5,26,0,0,1930,
        1933,3,48,24,0,1931,1933,5,106,0,0,1932,1930,1,0,0,0,1932,1931,1,
        0,0,0,1933,225,1,0,0,0,1934,1937,3,48,24,0,1935,1937,3,50,25,0,1936,
        1934,1,0,0,0,1936,1935,1,0,0,0,1937,227,1,0,0,0,1938,1939,7,8,0,
        0,1939,229,1,0,0,0,1940,1941,7,9,0,0,1941,231,1,0,0,0,1942,1943,
        7,10,0,0,1943,233,1,0,0,0,376,237,241,245,249,253,255,258,261,269,
        272,275,279,285,288,293,299,302,307,310,313,316,319,325,328,333,
        336,339,343,347,350,354,358,364,368,374,378,384,388,392,396,400,
        405,412,415,417,421,425,429,433,438,445,448,450,454,460,466,471,
        474,478,482,488,492,497,501,505,509,515,519,525,529,531,535,537,
        541,543,547,549,555,559,563,567,569,573,577,581,583,587,591,595,
        597,601,605,609,611,615,618,624,628,630,634,636,639,643,645,649,
        651,660,664,667,674,678,682,685,687,692,697,700,703,705,708,712,
        717,727,731,735,739,743,746,752,759,763,766,769,777,782,789,794,
        797,801,805,809,815,819,824,829,833,836,838,842,846,851,855,860,
        864,871,875,885,892,905,909,915,919,923,928,935,939,944,951,957,
        962,968,971,977,979,983,987,992,996,999,1006,1013,1016,1022,1025,
        1031,1035,1039,1043,1047,1052,1057,1061,1066,1069,1078,1087,1092,
        1105,1108,1116,1120,1125,1132,1137,1144,1148,1153,1157,1163,1167,
        1170,1173,1177,1183,1187,1190,1193,1199,1202,1205,1209,1215,1218,
        1221,1225,1229,1233,1237,1241,1244,1249,1254,1259,1264,1270,1274,
        1276,1280,1284,1286,1288,1296,1301,1312,1322,1332,1337,1341,1348,
        1353,1358,1363,1368,1373,1378,1383,1386,1398,1401,1408,1422,1426,
        1430,1434,1438,1441,1443,1448,1452,1456,1460,1464,1468,1471,1473,
        1478,1482,1487,1493,1496,1500,1505,1509,1512,1516,1525,1529,1533,
        1544,1548,1553,1557,1561,1566,1568,1571,1575,1578,1581,1587,1591,
        1595,1601,1605,1609,1612,1615,1621,1625,1629,1631,1635,1639,1641,
        1645,1649,1655,1659,1663,1669,1673,1677,1683,1687,1691,1697,1701,
        1705,1709,1713,1716,1722,1726,1738,1742,1746,1748,1752,1756,1760,
        1764,1767,1776,1780,1785,1788,1790,1793,1799,1803,1807,1811,1815,
        1819,1822,1838,1849,1855,1863,1867,1871,1875,1879,1882,1888,1892,
        1896,1900,1904,1908,1912,1916,1920,1923,1932,1936
    ]

class s_cypherParser ( Parser ):

    grammarFileName = "s_cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "'='", "'+='", "','", "'('", "')'", 
                     "'{'", "':'", "'}'", "'['", "']'", "'..'", "';'", "'*'", 
                     "'|'", "'<>'", "'<'", "'>'", "'<='", "'>='", "'+'", 
                     "'-'", "'/'", "'%'", "'^'", "'$'", "'\\u27E8'", "'\\u3008'", 
                     "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
                     "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", 
                     "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", 
                     "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
                     "'\\uFF0D'", "<INVALID>", "<INVALID>", "'NOW'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "AtT", "PoundValue", "NOW", 
                      "AT_TIME", "SNAPSHOT", "BETWEEN", "SCOPE", "STALE", 
                      "DURING", "OVERLAPS", "UNION", "ALL", "OPTIONAL", 
                      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", 
                      "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", 
                      "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", 
                      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
                      "WHERE", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", 
                      "CONTAINS", "IN", "IS", "NULL", "COUNT", "CASE", "ELSE", 
                      "END", "WHEN", "THEN", "ANY", "NONE", "SINGLE", "EXISTS", 
                      "TRUE", "FALSE", "HexInteger", "DecimalInteger", "OctalInteger", 
                      "HexLetter", "HexDigit", "Digit", "NonZeroDigit", 
                      "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", 
                      "RegularDecimalReal", "StringLiteral", "EscapedChar", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Query = 0
    RULE_oC_Match = 1
    RULE_oC_UpdatingClause = 2
    RULE_oC_SetItem = 3
    RULE_s_Stale = 4
    RULE_s_StaleItem = 5
    RULE_oC_Delete = 6
    RULE_s_DeleteItem = 7
    RULE_s_AtTime = 8
    RULE_s_Between = 9
    RULE_s_TimeWindowLimit = 10
    RULE_oC_PatternPart = 11
    RULE_s_PathFunctionPattern = 12
    RULE_s_SinglePathPattern = 13
    RULE_oC_NodePattern = 14
    RULE_s_Properties = 15
    RULE_s_PropertiesPattern = 16
    RULE_oC_RelationshipDetail = 17
    RULE_oC_StringListNullPredicateExpression = 18
    RULE_oC_ListOperatorExpression = 19
    RULE_s_AtTExpression = 20
    RULE_s_TimePredicateExpression = 21
    RULE_s_AtTElement = 22
    RULE_s_TimePointLiteral = 23
    RULE_oC_SymbolicName = 24
    RULE_oC_ReservedWord = 25
    RULE_oC_Cypher = 26
    RULE_oC_Statement = 27
    RULE_oC_RegularQuery = 28
    RULE_oC_Union = 29
    RULE_oC_SingleQuery = 30
    RULE_oC_SinglePartQuery = 31
    RULE_oC_MultiPartQuery = 32
    RULE_oC_ReadingClause = 33
    RULE_oC_Unwind = 34
    RULE_oC_Merge = 35
    RULE_oC_MergeAction = 36
    RULE_oC_Create = 37
    RULE_oC_Set = 38
    RULE_oC_Remove = 39
    RULE_oC_RemoveItem = 40
    RULE_oC_InQueryCall = 41
    RULE_oC_StandaloneCall = 42
    RULE_oC_YieldItems = 43
    RULE_oC_YieldItem = 44
    RULE_oC_With = 45
    RULE_oC_Return = 46
    RULE_oC_ProjectionBody = 47
    RULE_oC_ProjectionItems = 48
    RULE_oC_ProjectionItem = 49
    RULE_oC_Order = 50
    RULE_oC_Skip = 51
    RULE_oC_Limit = 52
    RULE_oC_SortItem = 53
    RULE_oC_Where = 54
    RULE_oC_Pattern = 55
    RULE_oC_AnonymousPatternPart = 56
    RULE_oC_PatternElement = 57
    RULE_oC_RelationshipsPattern = 58
    RULE_oC_PatternElementChain = 59
    RULE_oC_RelationshipPattern = 60
    RULE_oC_Properties = 61
    RULE_oC_RelationshipTypes = 62
    RULE_oC_NodeLabels = 63
    RULE_oC_NodeLabel = 64
    RULE_oC_RangeLiteral = 65
    RULE_oC_LabelName = 66
    RULE_oC_RelTypeName = 67
    RULE_oC_PropertyExpression = 68
    RULE_oC_Expression = 69
    RULE_oC_OrExpression = 70
    RULE_oC_XorExpression = 71
    RULE_oC_AndExpression = 72
    RULE_oC_NotExpression = 73
    RULE_oC_ComparisonExpression = 74
    RULE_oC_PartialComparisonExpression = 75
    RULE_oC_StringPredicateExpression = 76
    RULE_oC_ListPredicateExpression = 77
    RULE_oC_NullPredicateExpression = 78
    RULE_oC_AddOrSubtractExpression = 79
    RULE_oC_MultiplyDivideModuloExpression = 80
    RULE_oC_PowerOfExpression = 81
    RULE_oC_UnaryAddOrSubtractExpression = 82
    RULE_oC_PropertyOrLabelsExpression = 83
    RULE_oC_PropertyLookup = 84
    RULE_oC_Atom = 85
    RULE_oC_CaseExpression = 86
    RULE_oC_CaseAlternative = 87
    RULE_oC_ListComprehension = 88
    RULE_oC_PatternComprehension = 89
    RULE_oC_Quantifier = 90
    RULE_oC_FilterExpression = 91
    RULE_oC_PatternPredicate = 92
    RULE_oC_ParenthesizedExpression = 93
    RULE_oC_IdInColl = 94
    RULE_oC_FunctionInvocation = 95
    RULE_oC_FunctionName = 96
    RULE_oC_ExistentialSubquery = 97
    RULE_oC_ExplicitProcedureInvocation = 98
    RULE_oC_ImplicitProcedureInvocation = 99
    RULE_oC_ProcedureResultField = 100
    RULE_oC_ProcedureName = 101
    RULE_oC_Namespace = 102
    RULE_oC_Variable = 103
    RULE_oC_Literal = 104
    RULE_oC_BooleanLiteral = 105
    RULE_oC_NumberLiteral = 106
    RULE_oC_IntegerLiteral = 107
    RULE_oC_DoubleLiteral = 108
    RULE_oC_ListLiteral = 109
    RULE_oC_MapLiteral = 110
    RULE_oC_PropertyKeyName = 111
    RULE_oC_Parameter = 112
    RULE_oC_SchemaName = 113
    RULE_oC_LeftArrowHead = 114
    RULE_oC_RightArrowHead = 115
    RULE_oC_Dash = 116

    ruleNames =  [ "oC_Query", "oC_Match", "oC_UpdatingClause", "oC_SetItem", 
                   "s_Stale", "s_StaleItem", "oC_Delete", "s_DeleteItem", 
                   "s_AtTime", "s_Between", "s_TimeWindowLimit", "oC_PatternPart", 
                   "s_PathFunctionPattern", "s_SinglePathPattern", "oC_NodePattern", 
                   "s_Properties", "s_PropertiesPattern", "oC_RelationshipDetail", 
                   "oC_StringListNullPredicateExpression", "oC_ListOperatorExpression", 
                   "s_AtTExpression", "s_TimePredicateExpression", "s_AtTElement", 
                   "s_TimePointLiteral", "oC_SymbolicName", "oC_ReservedWord", 
                   "oC_Cypher", "oC_Statement", "oC_RegularQuery", "oC_Union", 
                   "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", 
                   "oC_ReadingClause", "oC_Unwind", "oC_Merge", "oC_MergeAction", 
                   "oC_Create", "oC_Set", "oC_Remove", "oC_RemoveItem", 
                   "oC_InQueryCall", "oC_StandaloneCall", "oC_YieldItems", 
                   "oC_YieldItem", "oC_With", "oC_Return", "oC_ProjectionBody", 
                   "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", 
                   "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", 
                   "oC_AnonymousPatternPart", "oC_PatternElement", "oC_RelationshipsPattern", 
                   "oC_PatternElementChain", "oC_RelationshipPattern", "oC_Properties", 
                   "oC_RelationshipTypes", "oC_NodeLabels", "oC_NodeLabel", 
                   "oC_RangeLiteral", "oC_LabelName", "oC_RelTypeName", 
                   "oC_PropertyExpression", "oC_Expression", "oC_OrExpression", 
                   "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", 
                   "oC_ComparisonExpression", "oC_PartialComparisonExpression", 
                   "oC_StringPredicateExpression", "oC_ListPredicateExpression", 
                   "oC_NullPredicateExpression", "oC_AddOrSubtractExpression", 
                   "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", 
                   "oC_UnaryAddOrSubtractExpression", "oC_PropertyOrLabelsExpression", 
                   "oC_PropertyLookup", "oC_Atom", "oC_CaseExpression", 
                   "oC_CaseAlternative", "oC_ListComprehension", "oC_PatternComprehension", 
                   "oC_Quantifier", "oC_FilterExpression", "oC_PatternPredicate", 
                   "oC_ParenthesizedExpression", "oC_IdInColl", "oC_FunctionInvocation", 
                   "oC_FunctionName", "oC_ExistentialSubquery", "oC_ExplicitProcedureInvocation", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_Variable", "oC_Literal", 
                   "oC_BooleanLiteral", "oC_NumberLiteral", "oC_IntegerLiteral", 
                   "oC_DoubleLiteral", "oC_ListLiteral", "oC_MapLiteral", 
                   "oC_PropertyKeyName", "oC_Parameter", "oC_SchemaName", 
                   "oC_LeftArrowHead", "oC_RightArrowHead", "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    AtT=46
    PoundValue=47
    NOW=48
    AT_TIME=49
    SNAPSHOT=50
    BETWEEN=51
    SCOPE=52
    STALE=53
    DURING=54
    OVERLAPS=55
    UNION=56
    ALL=57
    OPTIONAL=58
    MATCH=59
    UNWIND=60
    AS=61
    MERGE=62
    ON=63
    CREATE=64
    SET=65
    DETACH=66
    DELETE=67
    REMOVE=68
    CALL=69
    YIELD=70
    WITH=71
    RETURN=72
    DISTINCT=73
    ORDER=74
    BY=75
    L_SKIP=76
    LIMIT=77
    ASCENDING=78
    ASC=79
    DESCENDING=80
    DESC=81
    WHERE=82
    OR=83
    XOR=84
    AND=85
    NOT=86
    STARTS=87
    ENDS=88
    CONTAINS=89
    IN=90
    IS=91
    NULL=92
    COUNT=93
    CASE=94
    ELSE=95
    END=96
    WHEN=97
    THEN=98
    ANY=99
    NONE=100
    SINGLE=101
    EXISTS=102
    TRUE=103
    FALSE=104
    HexInteger=105
    DecimalInteger=106
    OctalInteger=107
    HexLetter=108
    HexDigit=109
    Digit=110
    NonZeroDigit=111
    NonZeroOctDigit=112
    OctDigit=113
    ZeroDigit=114
    ExponentDecimalReal=115
    RegularDecimalReal=116
    StringLiteral=117
    EscapedChar=118
    CONSTRAINT=119
    DO=120
    FOR=121
    REQUIRE=122
    UNIQUE=123
    MANDATORY=124
    SCALAR=125
    OF=126
    ADD=127
    DROP=128
    FILTER=129
    EXTRACT=130
    UnescapedSymbolicName=131
    IdentifierStart=132
    IdentifierPart=133
    EscapedSymbolicName=134
    SP=135
    WHITESPACE=136
    Comment=137

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StandaloneCallContext,0)


        def s_TimeWindowLimit(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimeWindowLimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = s_cypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Query)
        try:
            self.state = 237
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 234
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 235
                self.oC_StandaloneCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 236
                self.s_TimeWindowLimit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = s_cypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 239
                self.match(s_cypherParser.OPTIONAL)
                self.state = 240
                self.match(s_cypherParser.SP)


            self.state = 243
            self.match(s_cypherParser.MATCH)
            self.state = 245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 244
                self.match(s_cypherParser.SP)


            self.state = 247
            self.oC_Pattern()
            self.state = 255
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 248
                    self.match(s_cypherParser.SP)


                self.state = 253
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 251
                    self.s_AtTime()
                    pass
                elif token in [51]:
                    self.state = 252
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 261
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 257
                    self.match(s_cypherParser.SP)


                self.state = 260
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Create(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CreateContext,0)


        def oC_Merge(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MergeContext,0)


        def oC_Delete(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DeleteContext,0)


        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RemoveContext,0)


        def s_Stale(self):
            return self.getTypedRuleContext(s_cypherParser.S_StaleContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = s_cypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_UpdatingClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.state = 263
                self.oC_Create()
                pass
            elif token in [62]:
                self.state = 264
                self.oC_Merge()
                pass
            elif token in [66, 67]:
                self.state = 265
                self.oC_Delete()
                pass
            elif token in [65]:
                self.state = 266
                self.oC_Set()
                pass
            elif token in [68]:
                self.state = 267
                self.oC_Remove()
                pass
            elif token in [53]:
                self.state = 268
                self.s_Stale()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 271
                    self.match(s_cypherParser.SP)


                self.state = 274
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_VariableContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,i)


        def s_AtTElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AtTElementContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = s_cypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 388
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 277
                self.oC_Variable()
                self.state = 279
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 278
                    self.match(s_cypherParser.SP)


                self.state = 281
                self.s_AtTElement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 283
                self.oC_Variable()
                self.state = 288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 285
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 284
                        self.match(s_cypherParser.SP)


                    self.state = 287
                    self.s_AtTElement()


                self.state = 290
                self.match(s_cypherParser.T__0)
                self.state = 291
                self.oC_Variable()
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 292
                    self.match(s_cypherParser.SP)


                self.state = 295
                self.s_AtTElement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 297
                self.oC_Variable()
                self.state = 302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 299
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 298
                        self.match(s_cypherParser.SP)


                    self.state = 301
                    self.s_AtTElement()


                self.state = 304
                self.match(s_cypherParser.T__0)
                self.state = 305
                self.oC_Variable()
                self.state = 310
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 307
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 306
                        self.match(s_cypherParser.SP)


                    self.state = 309
                    self.s_AtTElement()


                self.state = 316
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
                if la_ == 1:
                    self.state = 313
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 312
                        self.match(s_cypherParser.SP)


                    self.state = 315
                    self.match(s_cypherParser.PoundValue)


                self.state = 319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 318
                    self.match(s_cypherParser.SP)


                self.state = 321
                self.s_AtTElement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 323
                self.oC_Variable()
                self.state = 328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 325
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 324
                        self.match(s_cypherParser.SP)


                    self.state = 327
                    self.s_AtTElement()


                self.state = 330
                self.match(s_cypherParser.T__0)
                self.state = 331
                self.oC_Variable()
                self.state = 336
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 333
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 332
                        self.match(s_cypherParser.SP)


                    self.state = 335
                    self.s_AtTElement()


                self.state = 339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 338
                    self.match(s_cypherParser.SP)


                self.state = 341
                self.match(s_cypherParser.T__1)
                self.state = 343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 342
                    self.match(s_cypherParser.SP)


                self.state = 345
                self.oC_Expression()
                self.state = 350
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 347
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 346
                        self.match(s_cypherParser.SP)


                    self.state = 349
                    self.s_AtTElement()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 352
                self.oC_PropertyExpression()
                self.state = 354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 353
                    self.match(s_cypherParser.SP)


                self.state = 356
                self.match(s_cypherParser.T__1)
                self.state = 358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 357
                    self.match(s_cypherParser.SP)


                self.state = 360
                self.oC_Expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 362
                self.oC_Variable()
                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 363
                    self.match(s_cypherParser.SP)


                self.state = 366
                self.match(s_cypherParser.T__1)
                self.state = 368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 367
                    self.match(s_cypherParser.SP)


                self.state = 370
                self.oC_Expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 372
                self.oC_Variable()
                self.state = 374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 373
                    self.match(s_cypherParser.SP)


                self.state = 376
                self.match(s_cypherParser.T__2)
                self.state = 378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 377
                    self.match(s_cypherParser.SP)


                self.state = 380
                self.oC_Expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 382
                self.oC_Variable()
                self.state = 384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 383
                    self.match(s_cypherParser.SP)


                self.state = 386
                self.oC_NodeLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def s_StaleItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StaleItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StaleItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Stale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Stale" ):
                listener.enterS_Stale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Stale" ):
                listener.exitS_Stale(self)




    def s_Stale(self):

        localctx = s_cypherParser.S_StaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_s_Stale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.match(s_cypherParser.STALE)
            self.state = 392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 391
                self.match(s_cypherParser.SP)


            self.state = 394
            self.s_StaleItem()
            self.state = 405
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 396
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 395
                        self.match(s_cypherParser.SP)


                    self.state = 398
                    self.match(s_cypherParser.T__3)
                    self.state = 400
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 399
                        self.match(s_cypherParser.SP)


                    self.state = 402
                    self.s_StaleItem() 
                self.state = 407
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_VariableContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StaleItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StaleItem" ):
                listener.enterS_StaleItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StaleItem" ):
                listener.exitS_StaleItem(self)




    def s_StaleItem(self):

        localctx = s_cypherParser.S_StaleItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_s_StaleItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.oC_Variable()
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 409
                self.match(s_cypherParser.T__0)
                self.state = 410
                self.oC_Variable()
                self.state = 415
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 412
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 411
                        self.match(s_cypherParser.SP)


                    self.state = 414
                    self.match(s_cypherParser.PoundValue)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def s_DeleteItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DeleteItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DeleteItemContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = s_cypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 419
                self.match(s_cypherParser.DETACH)
                self.state = 420
                self.match(s_cypherParser.SP)


            self.state = 423
            self.match(s_cypherParser.DELETE)
            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 424
                self.match(s_cypherParser.SP)


            self.state = 427
            self.s_DeleteItem()
            self.state = 438
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 429
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 428
                        self.match(s_cypherParser.SP)


                    self.state = 431
                    self.match(s_cypherParser.T__3)
                    self.state = 433
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 432
                        self.match(s_cypherParser.SP)


                    self.state = 435
                    self.s_DeleteItem() 
                self.state = 440
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_VariableContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DeleteItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DeleteItem" ):
                listener.enterS_DeleteItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DeleteItem" ):
                listener.exitS_DeleteItem(self)




    def s_DeleteItem(self):

        localctx = s_cypherParser.S_DeleteItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_s_DeleteItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.oC_Variable()
            self.state = 450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 442
                self.match(s_cypherParser.T__0)
                self.state = 443
                self.oC_Variable()
                self.state = 448
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 445
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 444
                        self.match(s_cypherParser.SP)


                    self.state = 447
                    self.match(s_cypherParser.PoundValue)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTime" ):
                listener.enterS_AtTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTime" ):
                listener.exitS_AtTime(self)




    def s_AtTime(self):

        localctx = s_cypherParser.S_AtTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_s_AtTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.match(s_cypherParser.AT_TIME)
            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 453
                self.match(s_cypherParser.SP)


            self.state = 456
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_BetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Between

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Between" ):
                listener.enterS_Between(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Between" ):
                listener.exitS_Between(self)




    def s_Between(self):

        localctx = s_cypherParser.S_BetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_s_Between)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.match(s_cypherParser.BETWEEN)
            self.state = 460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 459
                self.match(s_cypherParser.SP)


            self.state = 462
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimeWindowLimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimeWindowLimit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimeWindowLimit" ):
                listener.enterS_TimeWindowLimit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimeWindowLimit" ):
                listener.exitS_TimeWindowLimit(self)




    def s_TimeWindowLimit(self):

        localctx = s_cypherParser.S_TimeWindowLimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_s_TimeWindowLimit)
        self._la = 0 # Token type
        try:
            self.state = 474
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 464
                self.match(s_cypherParser.SNAPSHOT)
                self.state = 466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 465
                    self.match(s_cypherParser.SP)


                self.state = 468
                self.oC_Expression()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 469
                self.match(s_cypherParser.SCOPE)
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 470
                    self.match(s_cypherParser.SP)


                self.state = 473
                self.oC_Expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_PathFunctionPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PathFunctionPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AnonymousPatternPartContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = s_cypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 497
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 476
                self.oC_Variable()
                self.state = 478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 477
                    self.match(s_cypherParser.SP)


                self.state = 480
                self.match(s_cypherParser.T__1)
                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 481
                    self.match(s_cypherParser.SP)


                self.state = 484
                self.s_PathFunctionPattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 486
                self.oC_Variable()
                self.state = 488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 487
                    self.match(s_cypherParser.SP)


                self.state = 490
                self.match(s_cypherParser.T__1)
                self.state = 492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 491
                    self.match(s_cypherParser.SP)


                self.state = 494
                self.oC_AnonymousPatternPart()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 496
                self.oC_AnonymousPatternPart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PathFunctionPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def s_SinglePathPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_SinglePathPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PathFunctionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PathFunctionPattern" ):
                listener.enterS_PathFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PathFunctionPattern" ):
                listener.exitS_PathFunctionPattern(self)




    def s_PathFunctionPattern(self):

        localctx = s_cypherParser.S_PathFunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_s_PathFunctionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self.oC_FunctionName()
            self.state = 501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 500
                self.match(s_cypherParser.SP)


            self.state = 503
            self.match(s_cypherParser.T__4)
            self.state = 505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 504
                self.match(s_cypherParser.SP)


            self.state = 507
            self.s_SinglePathPattern()
            self.state = 509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 508
                self.match(s_cypherParser.SP)


            self.state = 511
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SinglePathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodePatternContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,i)


        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SinglePathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SinglePathPattern" ):
                listener.enterS_SinglePathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SinglePathPattern" ):
                listener.exitS_SinglePathPattern(self)




    def s_SinglePathPattern(self):

        localctx = s_cypherParser.S_SinglePathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_s_SinglePathPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.oC_NodePattern()
            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 514
                self.match(s_cypherParser.SP)


            self.state = 517
            self.oC_RelationshipPattern()
            self.state = 519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 518
                self.match(s_cypherParser.SP)


            self.state = 521
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def s_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = s_cypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(s_cypherParser.T__4)
            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 524
                self.match(s_cypherParser.SP)


            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 527
                self.oC_Variable()
                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 528
                    self.match(s_cypherParser.SP)




            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 533
                self.oC_NodeLabels()
                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 534
                    self.match(s_cypherParser.SP)




            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 539
                self.s_AtTElement()
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 540
                    self.match(s_cypherParser.SP)




            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==26:
                self.state = 545
                self.s_Properties()
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 546
                    self.match(s_cypherParser.SP)




            self.state = 551
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertiesPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesPatternContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Properties" ):
                listener.enterS_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Properties" ):
                listener.exitS_Properties(self)




    def s_Properties(self):

        localctx = s_cypherParser.S_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_s_Properties)
        try:
            self.state = 555
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 553
                self.s_PropertiesPattern()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 554
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyKeyName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyKeyNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,i)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def s_AtTElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AtTElementContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertiesPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertiesPattern" ):
                listener.enterS_PropertiesPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertiesPattern" ):
                listener.exitS_PropertiesPattern(self)




    def s_PropertiesPattern(self):

        localctx = s_cypherParser.S_PropertiesPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_s_PropertiesPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.match(s_cypherParser.T__6)
            self.state = 559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 558
                self.match(s_cypherParser.SP)


            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 561
                self.oC_PropertyKeyName()
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 562
                    self.match(s_cypherParser.SP)


                self.state = 569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 565
                    self.s_AtTElement()
                    self.state = 567
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 566
                        self.match(s_cypherParser.SP)




                self.state = 571
                self.match(s_cypherParser.T__7)
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 572
                    self.match(s_cypherParser.SP)


                self.state = 575
                self.oC_Expression()
                self.state = 577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 576
                    self.match(s_cypherParser.SP)


                self.state = 583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 579
                    self.s_AtTElement()
                    self.state = 581
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 580
                        self.match(s_cypherParser.SP)




                self.state = 615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 585
                    self.match(s_cypherParser.T__3)
                    self.state = 587
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 586
                        self.match(s_cypherParser.SP)


                    self.state = 589
                    self.oC_PropertyKeyName()
                    self.state = 591
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 590
                        self.match(s_cypherParser.SP)


                    self.state = 597
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==46:
                        self.state = 593
                        self.s_AtTElement()
                        self.state = 595
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 594
                            self.match(s_cypherParser.SP)




                    self.state = 599
                    self.match(s_cypherParser.T__7)
                    self.state = 601
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 600
                        self.match(s_cypherParser.SP)


                    self.state = 603
                    self.oC_Expression()
                    self.state = 605
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 604
                        self.match(s_cypherParser.SP)


                    self.state = 611
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==46:
                        self.state = 607
                        self.s_AtTElement()
                        self.state = 609
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 608
                            self.match(s_cypherParser.SP)




                    self.state = 617
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 620
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RangeLiteralContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = s_cypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 622
            self.match(s_cypherParser.T__9)
            self.state = 624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 623
                self.match(s_cypherParser.SP)


            self.state = 630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 626
                self.oC_Variable()
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 627
                    self.match(s_cypherParser.SP)




            self.state = 636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 632
                self.oC_RelationshipTypes()
                self.state = 634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 633
                    self.match(s_cypherParser.SP)




            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 638
                self.oC_RangeLiteral()


            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 641
                self.s_AtTElement()
                self.state = 643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 642
                    self.match(s_cypherParser.SP)




            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==26:
                self.state = 647
                self.oC_Properties()
                self.state = 649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 648
                    self.match(s_cypherParser.SP)




            self.state = 653
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def s_TimePredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateExpressionContext,0)


        def oC_StringPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringPredicateExpressionContext,0)


        def oC_ListPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListPredicateExpressionContext,0)


        def oC_NullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NullPredicateExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringListNullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullPredicateExpression" ):
                listener.enterOC_StringListNullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullPredicateExpression" ):
                listener.exitOC_StringListNullPredicateExpression(self)




    def oC_StringListNullPredicateExpression(self):

        localctx = s_cypherParser.OC_StringListNullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_oC_StringListNullPredicateExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.oC_AddOrSubtractExpression()
            self.state = 660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 656
                self.s_TimePredicateExpression()

            elif la_ == 2:
                self.state = 657
                self.oC_StringPredicateExpression()

            elif la_ == 3:
                self.state = 658
                self.oC_ListPredicateExpression()

            elif la_ == 4:
                self.state = 659
                self.oC_NullPredicateExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def s_AtTExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTExpressionContext,0)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = s_cypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_oC_ListOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 662
                self.oC_PropertyOrLabelsExpression()
                pass

            elif la_ == 2:
                self.state = 663
                self.s_AtTExpression()
                pass


            self.state = 687
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 685
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                    if la_ == 1:
                        self.state = 667
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 666
                            self.match(s_cypherParser.SP)


                        self.state = 669
                        self.match(s_cypherParser.T__9)
                        self.state = 670
                        self.oC_Expression()
                        self.state = 671
                        self.match(s_cypherParser.T__10)
                        pass

                    elif la_ == 2:
                        self.state = 674
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 673
                            self.match(s_cypherParser.SP)


                        self.state = 676
                        self.match(s_cypherParser.T__9)
                        self.state = 678
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                            self.state = 677
                            self.oC_Expression()


                        self.state = 680
                        self.match(s_cypherParser.T__11)
                        self.state = 682
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                            self.state = 681
                            self.oC_Expression()


                        self.state = 684
                        self.match(s_cypherParser.T__10)
                        pass

             
                self.state = 689
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTExpression" ):
                listener.enterS_AtTExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTExpression" ):
                listener.exitS_AtTExpression(self)




    def s_AtTExpression(self):

        localctx = s_cypherParser.S_AtTExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_s_AtTExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.oC_Atom()
            self.state = 705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 695 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 692
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 691
                            self.match(s_cypherParser.SP)


                        self.state = 694
                        self.oC_PropertyLookup()

                    else:
                        raise NoViableAltException(self)
                    self.state = 697 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

                self.state = 703
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 700
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 699
                        self.match(s_cypherParser.SP)


                    self.state = 702
                    self.match(s_cypherParser.PoundValue)




            self.state = 708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 707
                self.match(s_cypherParser.SP)


            self.state = 710
            self.match(s_cypherParser.AtT)
            self.state = 717
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 712
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 711
                        self.match(s_cypherParser.SP)


                    self.state = 714
                    self.oC_PropertyLookup() 
                self.state = 719
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateExpression" ):
                listener.enterS_TimePredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateExpression" ):
                listener.exitS_TimePredicateExpression(self)




    def s_TimePredicateExpression(self):

        localctx = s_cypherParser.S_TimePredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_s_TimePredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.match(s_cypherParser.SP)
            self.state = 721
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 722
            self.match(s_cypherParser.SP)
            self.state = 723
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_TimePointLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_TimePointLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_TimePointLiteralContext,i)


        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTElement" ):
                listener.enterS_AtTElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTElement" ):
                listener.exitS_AtTElement(self)




    def s_AtTElement(self):

        localctx = s_cypherParser.S_AtTElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_s_AtTElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.match(s_cypherParser.AtT)
            self.state = 727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 726
                self.match(s_cypherParser.SP)


            self.state = 729
            self.match(s_cypherParser.T__4)
            self.state = 731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 730
                self.match(s_cypherParser.SP)


            self.state = 733
            self.s_TimePointLiteral()
            self.state = 735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 734
                self.match(s_cypherParser.SP)


            self.state = 737
            self.match(s_cypherParser.T__3)
            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 738
                self.match(s_cypherParser.SP)


            self.state = 743
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 117]:
                self.state = 741
                self.s_TimePointLiteral()
                pass
            elif token in [48]:
                self.state = 742
                self.match(s_cypherParser.NOW)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 745
                self.match(s_cypherParser.SP)


            self.state = 748
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePointLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePointLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePointLiteral" ):
                listener.enterS_TimePointLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePointLiteral" ):
                listener.exitS_TimePointLiteral(self)




    def s_TimePointLiteral(self):

        localctx = s_cypherParser.S_TimePointLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_s_TimePointLiteral)
        try:
            self.state = 752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 750
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 751
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(s_cypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(s_cypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(s_cypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(s_cypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(s_cypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = s_cypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            _la = self._input.LA(1)
            if not(_la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(s_cypherParser.AND, 0)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def OR(self):
            return self.getToken(s_cypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(s_cypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(s_cypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(s_cypherParser.DO, 0)

        def FOR(self):
            return self.getToken(s_cypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(s_cypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(s_cypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(s_cypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(s_cypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(s_cypherParser.OF, 0)

        def ADD(self):
            return self.getToken(s_cypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(s_cypherParser.DROP, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = s_cypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            _la = self._input.LA(1)
            if not(((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 128317405001678847) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(s_cypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = s_cypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 758
                self.match(s_cypherParser.SP)


            self.state = 761
            self.oC_Statement()
            self.state = 766
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 762
                    self.match(s_cypherParser.SP)


                self.state = 765
                self.match(s_cypherParser.T__12)


            self.state = 769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 768
                self.match(s_cypherParser.SP)


            self.state = 771
            self.match(s_cypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = s_cypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = s_cypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.oC_SingleQuery()
            self.state = 782
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 777
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 776
                        self.match(s_cypherParser.SP)


                    self.state = 779
                    self.oC_Union() 
                self.state = 784
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = s_cypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 785
                self.match(s_cypherParser.UNION)
                self.state = 786
                self.match(s_cypherParser.SP)
                self.state = 787
                self.match(s_cypherParser.ALL)
                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 788
                    self.match(s_cypherParser.SP)


                self.state = 791
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 792
                self.match(s_cypherParser.UNION)
                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 793
                    self.match(s_cypherParser.SP)


                self.state = 796
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = s_cypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_oC_SingleQuery)
        try:
            self.state = 801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 799
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 800
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = s_cypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 838
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 803
                    self.oC_ReadingClause()
                    self.state = 805
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 804
                        self.match(s_cypherParser.SP)


                    self.state = 811
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 812
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 813
                    self.oC_ReadingClause()
                    self.state = 815
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 814
                        self.match(s_cypherParser.SP)


                    self.state = 821
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 822
                self.oC_UpdatingClause()
                self.state = 829
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 824
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 823
                            self.match(s_cypherParser.SP)


                        self.state = 826
                        self.oC_UpdatingClause() 
                    self.state = 831
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

                self.state = 836
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                if la_ == 1:
                    self.state = 833
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 832
                        self.match(s_cypherParser.SP)


                    self.state = 835
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def oC_With(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_WithContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_WithContext,i)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = s_cypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_oC_MultiPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 846
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                        self.state = 840
                        self.oC_ReadingClause()
                        self.state = 842
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 841
                            self.match(s_cypherParser.SP)


                        self.state = 848
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 855
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64001) != 0):
                        self.state = 849
                        self.oC_UpdatingClause()
                        self.state = 851
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 850
                            self.match(s_cypherParser.SP)


                        self.state = 857
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 858
                    self.oC_With()
                    self.state = 860
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 859
                        self.match(s_cypherParser.SP)



                else:
                    raise NoViableAltException(self)
                self.state = 864 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

            self.state = 866
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(s_cypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = s_cypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_oC_ReadingClause)
        try:
            self.state = 871
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 868
                self.oC_Match()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 869
                self.oC_Unwind()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 870
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = s_cypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.match(s_cypherParser.UNWIND)
            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 874
                self.match(s_cypherParser.SP)


            self.state = 877
            self.oC_Expression()
            self.state = 878
            self.match(s_cypherParser.SP)
            self.state = 879
            self.match(s_cypherParser.AS)
            self.state = 880
            self.match(s_cypherParser.SP)
            self.state = 881
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = s_cypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self.match(s_cypherParser.MERGE)
            self.state = 885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 884
                self.match(s_cypherParser.SP)


            self.state = 887
            self.oC_PatternPart()
            self.state = 892
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,157,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 888
                    self.match(s_cypherParser.SP)
                    self.state = 889
                    self.oC_MergeAction() 
                self.state = 894
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,157,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = s_cypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_oC_MergeAction)
        try:
            self.state = 905
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 895
                self.match(s_cypherParser.ON)
                self.state = 896
                self.match(s_cypherParser.SP)
                self.state = 897
                self.match(s_cypherParser.MATCH)
                self.state = 898
                self.match(s_cypherParser.SP)
                self.state = 899
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 900
                self.match(s_cypherParser.ON)
                self.state = 901
                self.match(s_cypherParser.SP)
                self.state = 902
                self.match(s_cypherParser.CREATE)
                self.state = 903
                self.match(s_cypherParser.SP)
                self.state = 904
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = s_cypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            self.match(s_cypherParser.CREATE)
            self.state = 909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 908
                self.match(s_cypherParser.SP)


            self.state = 911
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = s_cypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.match(s_cypherParser.SET)
            self.state = 915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 914
                self.match(s_cypherParser.SP)


            self.state = 917
            self.oC_SetItem()
            self.state = 928
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,163,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 919
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 918
                        self.match(s_cypherParser.SP)


                    self.state = 921
                    self.match(s_cypherParser.T__3)
                    self.state = 923
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 922
                        self.match(s_cypherParser.SP)


                    self.state = 925
                    self.oC_SetItem() 
                self.state = 930
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = s_cypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self.match(s_cypherParser.REMOVE)
            self.state = 932
            self.match(s_cypherParser.SP)
            self.state = 933
            self.oC_RemoveItem()
            self.state = 944
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,166,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 935
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 934
                        self.match(s_cypherParser.SP)


                    self.state = 937
                    self.match(s_cypherParser.T__3)
                    self.state = 939
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 938
                        self.match(s_cypherParser.SP)


                    self.state = 941
                    self.oC_RemoveItem() 
                self.state = 946
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,166,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = s_cypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_oC_RemoveItem)
        try:
            self.state = 951
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 947
                self.oC_Variable()
                self.state = 948
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 950
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = s_cypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.match(s_cypherParser.CALL)
            self.state = 954
            self.match(s_cypherParser.SP)
            self.state = 955
            self.oC_ExplicitProcedureInvocation()
            self.state = 962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 956
                    self.match(s_cypherParser.SP)


                self.state = 959
                self.match(s_cypherParser.YIELD)
                self.state = 960
                self.match(s_cypherParser.SP)
                self.state = 961
                self.oC_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = s_cypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_oC_StandaloneCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self.match(s_cypherParser.CALL)
            self.state = 965
            self.match(s_cypherParser.SP)
            self.state = 968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 966
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 967
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 979
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 970
                    self.match(s_cypherParser.SP)


                self.state = 973
                self.match(s_cypherParser.YIELD)
                self.state = 974
                self.match(s_cypherParser.SP)
                self.state = 977
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14]:
                    self.state = 975
                    self.match(s_cypherParser.T__13)
                    pass
                elif token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                    self.state = 976
                    self.oC_YieldItems()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = s_cypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.oC_YieldItem()
            self.state = 992
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,176,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 983
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 982
                        self.match(s_cypherParser.SP)


                    self.state = 985
                    self.match(s_cypherParser.T__3)
                    self.state = 987
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 986
                        self.match(s_cypherParser.SP)


                    self.state = 989
                    self.oC_YieldItem() 
                self.state = 994
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,176,self._ctx)

            self.state = 999
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 995
                    self.match(s_cypherParser.SP)


                self.state = 998
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = s_cypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1006
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1001
                self.oC_ProcedureResultField()
                self.state = 1002
                self.match(s_cypherParser.SP)
                self.state = 1003
                self.match(s_cypherParser.AS)
                self.state = 1004
                self.match(s_cypherParser.SP)


            self.state = 1008
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = s_cypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self.match(s_cypherParser.WITH)
            self.state = 1011
            self.oC_ProjectionBody()
            self.state = 1016
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.state = 1013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1012
                    self.match(s_cypherParser.SP)


                self.state = 1015
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = s_cypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.match(s_cypherParser.RETURN)
            self.state = 1019
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)




    def oC_ProjectionBody(self):

        localctx = s_cypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.state = 1022
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1021
                    self.match(s_cypherParser.SP)


                self.state = 1024
                self.match(s_cypherParser.DISTINCT)


            self.state = 1027
            self.match(s_cypherParser.SP)
            self.state = 1028
            self.oC_ProjectionItems()
            self.state = 1031
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.state = 1029
                self.match(s_cypherParser.SP)
                self.state = 1030
                self.oC_Order()


            self.state = 1035
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                self.state = 1033
                self.match(s_cypherParser.SP)
                self.state = 1034
                self.oC_Skip()


            self.state = 1039
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 1037
                self.match(s_cypherParser.SP)
                self.state = 1038
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)




    def oC_ProjectionItems(self):

        localctx = s_cypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 1069
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1041
                self.match(s_cypherParser.T__13)
                self.state = 1052
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,189,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1043
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1042
                            self.match(s_cypherParser.SP)


                        self.state = 1045
                        self.match(s_cypherParser.T__3)
                        self.state = 1047
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1046
                            self.match(s_cypherParser.SP)


                        self.state = 1049
                        self.oC_ProjectionItem() 
                    self.state = 1054
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,189,self._ctx)

                pass
            elif token in [5, 7, 10, 21, 22, 26, 48, 57, 86, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1055
                self.oC_ProjectionItem()
                self.state = 1066
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,192,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1057
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1056
                            self.match(s_cypherParser.SP)


                        self.state = 1059
                        self.match(s_cypherParser.T__3)
                        self.state = 1061
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1060
                            self.match(s_cypherParser.SP)


                        self.state = 1063
                        self.oC_ProjectionItem() 
                    self.state = 1068
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,192,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)




    def oC_ProjectionItem(self):

        localctx = s_cypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_oC_ProjectionItem)
        try:
            self.state = 1078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1071
                self.oC_Expression()
                self.state = 1072
                self.match(s_cypherParser.SP)
                self.state = 1073
                self.match(s_cypherParser.AS)
                self.state = 1074
                self.match(s_cypherParser.SP)
                self.state = 1075
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1077
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = s_cypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self.match(s_cypherParser.ORDER)
            self.state = 1081
            self.match(s_cypherParser.SP)
            self.state = 1082
            self.match(s_cypherParser.BY)
            self.state = 1083
            self.match(s_cypherParser.SP)
            self.state = 1084
            self.oC_SortItem()
            self.state = 1092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1085
                self.match(s_cypherParser.T__3)
                self.state = 1087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1086
                    self.match(s_cypherParser.SP)


                self.state = 1089
                self.oC_SortItem()
                self.state = 1094
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = s_cypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self.match(s_cypherParser.L_SKIP)
            self.state = 1096
            self.match(s_cypherParser.SP)
            self.state = 1097
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = s_cypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1099
            self.match(s_cypherParser.LIMIT)
            self.state = 1100
            self.match(s_cypherParser.SP)
            self.state = 1101
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = s_cypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            self.oC_Expression()
            self.state = 1108
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.state = 1105
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1104
                    self.match(s_cypherParser.SP)


                self.state = 1107
                _la = self._input.LA(1)
                if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = s_cypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            self.match(s_cypherParser.WHERE)
            self.state = 1111
            self.match(s_cypherParser.SP)
            self.state = 1112
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = s_cypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1114
            self.oC_PatternPart()
            self.state = 1125
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,201,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1116
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1115
                        self.match(s_cypherParser.SP)


                    self.state = 1118
                    self.match(s_cypherParser.T__3)
                    self.state = 1120
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1119
                        self.match(s_cypherParser.SP)


                    self.state = 1122
                    self.oC_PatternPart() 
                self.state = 1127
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,201,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = s_cypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = s_cypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 1144
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1130
                self.oC_NodePattern()
                self.state = 1137
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,203,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1132
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1131
                            self.match(s_cypherParser.SP)


                        self.state = 1134
                        self.oC_PatternElementChain() 
                    self.state = 1139
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,203,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1140
                self.match(s_cypherParser.T__4)
                self.state = 1141
                self.oC_PatternElement()
                self.state = 1142
                self.match(s_cypherParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = s_cypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            self.oC_NodePattern()
            self.state = 1151 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1148
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1147
                        self.match(s_cypherParser.SP)


                    self.state = 1150
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 1153 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = s_cypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1155
            self.oC_RelationshipPattern()
            self.state = 1157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1156
                self.match(s_cypherParser.SP)


            self.state = 1159
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = s_cypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 1225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1161
                self.oC_LeftArrowHead()
                self.state = 1163
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1162
                    self.match(s_cypherParser.SP)


                self.state = 1165
                self.oC_Dash()
                self.state = 1167
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
                if la_ == 1:
                    self.state = 1166
                    self.match(s_cypherParser.SP)


                self.state = 1170
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1169
                    self.oC_RelationshipDetail()


                self.state = 1173
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1172
                    self.match(s_cypherParser.SP)


                self.state = 1175
                self.oC_Dash()
                self.state = 1177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1176
                    self.match(s_cypherParser.SP)


                self.state = 1179
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1181
                self.oC_LeftArrowHead()
                self.state = 1183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1182
                    self.match(s_cypherParser.SP)


                self.state = 1185
                self.oC_Dash()
                self.state = 1187
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
                if la_ == 1:
                    self.state = 1186
                    self.match(s_cypherParser.SP)


                self.state = 1190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1189
                    self.oC_RelationshipDetail()


                self.state = 1193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1192
                    self.match(s_cypherParser.SP)


                self.state = 1195
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1197
                self.oC_Dash()
                self.state = 1199
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
                if la_ == 1:
                    self.state = 1198
                    self.match(s_cypherParser.SP)


                self.state = 1202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1201
                    self.oC_RelationshipDetail()


                self.state = 1205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1204
                    self.match(s_cypherParser.SP)


                self.state = 1207
                self.oC_Dash()
                self.state = 1209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1208
                    self.match(s_cypherParser.SP)


                self.state = 1211
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1213
                self.oC_Dash()
                self.state = 1215
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
                if la_ == 1:
                    self.state = 1214
                    self.match(s_cypherParser.SP)


                self.state = 1218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1217
                    self.oC_RelationshipDetail()


                self.state = 1221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1220
                    self.match(s_cypherParser.SP)


                self.state = 1223
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = s_cypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_oC_Properties)
        try:
            self.state = 1229
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1227
                self.oC_MapLiteral()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1228
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = s_cypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1231
            self.match(s_cypherParser.T__7)
            self.state = 1233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1232
                self.match(s_cypherParser.SP)


            self.state = 1235
            self.oC_RelTypeName()
            self.state = 1249
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,230,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1237
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1236
                        self.match(s_cypherParser.SP)


                    self.state = 1239
                    self.match(s_cypherParser.T__14)
                    self.state = 1241
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==8:
                        self.state = 1240
                        self.match(s_cypherParser.T__7)


                    self.state = 1244
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1243
                        self.match(s_cypherParser.SP)


                    self.state = 1246
                    self.oC_RelTypeName() 
                self.state = 1251
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,230,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = s_cypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            self.oC_NodeLabel()
            self.state = 1259
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,232,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1253
                        self.match(s_cypherParser.SP)


                    self.state = 1256
                    self.oC_NodeLabel() 
                self.state = 1261
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = s_cypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1262
            self.match(s_cypherParser.T__7)
            self.state = 1264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1263
                self.match(s_cypherParser.SP)


            self.state = 1266
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = s_cypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1268
            self.match(s_cypherParser.T__13)
            self.state = 1270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1269
                self.match(s_cypherParser.SP)


            self.state = 1276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                self.state = 1272
                self.oC_IntegerLiteral()
                self.state = 1274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1273
                    self.match(s_cypherParser.SP)




            self.state = 1288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 1278
                self.match(s_cypherParser.T__11)
                self.state = 1280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1279
                    self.match(s_cypherParser.SP)


                self.state = 1286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                    self.state = 1282
                    self.oC_IntegerLiteral()
                    self.state = 1284
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1283
                        self.match(s_cypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = s_cypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1290
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = s_cypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = s_cypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1294
            self.oC_Atom()
            self.state = 1299 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1296
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1295
                        self.match(s_cypherParser.SP)


                    self.state = 1298
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 1301 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,242,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = s_cypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1303
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = s_cypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self.oC_XorExpression()
            self.state = 1312
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,243,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1306
                    self.match(s_cypherParser.SP)
                    self.state = 1307
                    self.match(s_cypherParser.OR)
                    self.state = 1308
                    self.match(s_cypherParser.SP)
                    self.state = 1309
                    self.oC_XorExpression() 
                self.state = 1314
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,243,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = s_cypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1315
            self.oC_AndExpression()
            self.state = 1322
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,244,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1316
                    self.match(s_cypherParser.SP)
                    self.state = 1317
                    self.match(s_cypherParser.XOR)
                    self.state = 1318
                    self.match(s_cypherParser.SP)
                    self.state = 1319
                    self.oC_AndExpression() 
                self.state = 1324
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,244,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = s_cypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1325
            self.oC_NotExpression()
            self.state = 1332
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,245,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1326
                    self.match(s_cypherParser.SP)
                    self.state = 1327
                    self.match(s_cypherParser.AND)
                    self.state = 1328
                    self.match(s_cypherParser.SP)
                    self.state = 1329
                    self.oC_NotExpression() 
                self.state = 1334
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,245,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = s_cypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1335
                self.match(s_cypherParser.NOT)
                self.state = 1337
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1336
                    self.match(s_cypherParser.SP)


                self.state = 1343
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1344
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def oC_PartialComparisonExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PartialComparisonExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PartialComparisonExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = s_cypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1346
            self.oC_StringListNullPredicateExpression()
            self.state = 1353
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,249,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1348
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1347
                        self.match(s_cypherParser.SP)


                    self.state = 1350
                    self.oC_PartialComparisonExpression() 
                self.state = 1355
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,249,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PartialComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PartialComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PartialComparisonExpression" ):
                listener.enterOC_PartialComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PartialComparisonExpression" ):
                listener.exitOC_PartialComparisonExpression(self)




    def oC_PartialComparisonExpression(self):

        localctx = s_cypherParser.OC_PartialComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_PartialComparisonExpression)
        self._la = 0 # Token type
        try:
            self.state = 1386
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1356
                self.match(s_cypherParser.T__1)
                self.state = 1358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1357
                    self.match(s_cypherParser.SP)


                self.state = 1360
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1361
                self.match(s_cypherParser.T__15)
                self.state = 1363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1362
                    self.match(s_cypherParser.SP)


                self.state = 1365
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1366
                self.match(s_cypherParser.T__16)
                self.state = 1368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1367
                    self.match(s_cypherParser.SP)


                self.state = 1370
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1371
                self.match(s_cypherParser.T__17)
                self.state = 1373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1372
                    self.match(s_cypherParser.SP)


                self.state = 1375
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1376
                self.match(s_cypherParser.T__18)
                self.state = 1378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1377
                    self.match(s_cypherParser.SP)


                self.state = 1380
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1381
                self.match(s_cypherParser.T__19)
                self.state = 1383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1382
                    self.match(s_cypherParser.SP)


                self.state = 1385
                self.oC_StringListNullPredicateExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringPredicateExpression" ):
                listener.enterOC_StringPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringPredicateExpression" ):
                listener.exitOC_StringPredicateExpression(self)




    def oC_StringPredicateExpression(self):

        localctx = s_cypherParser.OC_StringPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_StringPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
            if la_ == 1:
                self.state = 1388
                self.match(s_cypherParser.SP)
                self.state = 1389
                self.match(s_cypherParser.STARTS)
                self.state = 1390
                self.match(s_cypherParser.SP)
                self.state = 1391
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1392
                self.match(s_cypherParser.SP)
                self.state = 1393
                self.match(s_cypherParser.ENDS)
                self.state = 1394
                self.match(s_cypherParser.SP)
                self.state = 1395
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1396
                self.match(s_cypherParser.SP)
                self.state = 1397
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 1401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1400
                self.match(s_cypherParser.SP)


            self.state = 1403
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListPredicateExpression" ):
                listener.enterOC_ListPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListPredicateExpression" ):
                listener.exitOC_ListPredicateExpression(self)




    def oC_ListPredicateExpression(self):

        localctx = s_cypherParser.OC_ListPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_ListPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1405
            self.match(s_cypherParser.SP)
            self.state = 1406
            self.match(s_cypherParser.IN)
            self.state = 1408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1407
                self.match(s_cypherParser.SP)


            self.state = 1410
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullPredicateExpression" ):
                listener.enterOC_NullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullPredicateExpression" ):
                listener.exitOC_NullPredicateExpression(self)




    def oC_NullPredicateExpression(self):

        localctx = s_cypherParser.OC_NullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_NullPredicateExpression)
        try:
            self.state = 1422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1412
                self.match(s_cypherParser.SP)
                self.state = 1413
                self.match(s_cypherParser.IS)
                self.state = 1414
                self.match(s_cypherParser.SP)
                self.state = 1415
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1416
                self.match(s_cypherParser.SP)
                self.state = 1417
                self.match(s_cypherParser.IS)
                self.state = 1418
                self.match(s_cypherParser.SP)
                self.state = 1419
                self.match(s_cypherParser.NOT)
                self.state = 1420
                self.match(s_cypherParser.SP)
                self.state = 1421
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1424
            self.oC_MultiplyDivideModuloExpression()
            self.state = 1443
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,266,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1441
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
                    if la_ == 1:
                        self.state = 1426
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1425
                            self.match(s_cypherParser.SP)


                        self.state = 1428
                        self.match(s_cypherParser.T__20)
                        self.state = 1430
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1429
                            self.match(s_cypherParser.SP)


                        self.state = 1432
                        self.oC_MultiplyDivideModuloExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1434
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1433
                            self.match(s_cypherParser.SP)


                        self.state = 1436
                        self.match(s_cypherParser.T__21)
                        self.state = 1438
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1437
                            self.match(s_cypherParser.SP)


                        self.state = 1440
                        self.oC_MultiplyDivideModuloExpression()
                        pass

             
                self.state = 1445
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,266,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PowerOfExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = s_cypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1446
            self.oC_PowerOfExpression()
            self.state = 1473
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,274,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1471
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
                    if la_ == 1:
                        self.state = 1448
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1447
                            self.match(s_cypherParser.SP)


                        self.state = 1450
                        self.match(s_cypherParser.T__13)
                        self.state = 1452
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1451
                            self.match(s_cypherParser.SP)


                        self.state = 1454
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1456
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1455
                            self.match(s_cypherParser.SP)


                        self.state = 1458
                        self.match(s_cypherParser.T__22)
                        self.state = 1460
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1459
                            self.match(s_cypherParser.SP)


                        self.state = 1462
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1464
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1463
                            self.match(s_cypherParser.SP)


                        self.state = 1466
                        self.match(s_cypherParser.T__23)
                        self.state = 1468
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1467
                            self.match(s_cypherParser.SP)


                        self.state = 1470
                        self.oC_PowerOfExpression()
                        pass

             
                self.state = 1475
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,274,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = s_cypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1476
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 1487
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,277,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1478
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1477
                        self.match(s_cypherParser.SP)


                    self.state = 1480
                    self.match(s_cypherParser.T__24)
                    self.state = 1482
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1481
                        self.match(s_cypherParser.SP)


                    self.state = 1484
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 1489
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,277,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ListOperatorExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListOperatorExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.state = 1496
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 7, 10, 26, 48, 57, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1490
                self.oC_ListOperatorExpression()
                pass
            elif token in [21, 22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1491
                _la = self._input.LA(1)
                if not(_la==21 or _la==22):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1492
                    self.match(s_cypherParser.SP)


                self.state = 1495
                self.oC_ListOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyOrLabelsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyOrLabelsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyOrLabelsExpression" ):
                listener.enterOC_PropertyOrLabelsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyOrLabelsExpression" ):
                listener.exitOC_PropertyOrLabelsExpression(self)




    def oC_PropertyOrLabelsExpression(self):

        localctx = s_cypherParser.OC_PropertyOrLabelsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_PropertyOrLabelsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1498
            self.oC_Atom()
            self.state = 1505
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,281,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1500
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1499
                        self.match(s_cypherParser.SP)


                    self.state = 1502
                    self.oC_PropertyLookup() 
                self.state = 1507
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,281,self._ctx)

            self.state = 1512
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
            if la_ == 1:
                self.state = 1509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1508
                    self.match(s_cypherParser.SP)


                self.state = 1511
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = s_cypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1514
            self.match(s_cypherParser.T__0)
            self.state = 1516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1515
                self.match(s_cypherParser.SP)


            self.state = 1518
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternComprehensionContext,0)


        def oC_Quantifier(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QuantifierContext,0)


        def oC_PatternPredicate(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPredicateContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionInvocationContext,0)


        def oC_ExistentialSubquery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExistentialSubqueryContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = s_cypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 1544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1520
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1521
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1522
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1523
                self.match(s_cypherParser.COUNT)
                self.state = 1525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1524
                    self.match(s_cypherParser.SP)


                self.state = 1527
                self.match(s_cypherParser.T__4)
                self.state = 1529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1528
                    self.match(s_cypherParser.SP)


                self.state = 1531
                self.match(s_cypherParser.T__13)
                self.state = 1533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1532
                    self.match(s_cypherParser.SP)


                self.state = 1535
                self.match(s_cypherParser.T__5)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1536
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1537
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1538
                self.oC_Quantifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1539
                self.oC_PatternPredicate()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1540
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1541
                self.oC_FunctionInvocation()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1542
                self.oC_ExistentialSubquery()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1543
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def oC_CaseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_CaseAlternativeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = s_cypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1568
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
            if la_ == 1:
                self.state = 1546
                self.match(s_cypherParser.CASE)
                self.state = 1551 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1548
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1547
                            self.match(s_cypherParser.SP)


                        self.state = 1550
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1553 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,290,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1555
                self.match(s_cypherParser.CASE)
                self.state = 1557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1556
                    self.match(s_cypherParser.SP)


                self.state = 1559
                self.oC_Expression()
                self.state = 1564 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1561
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1560
                            self.match(s_cypherParser.SP)


                        self.state = 1563
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1566 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,293,self._ctx)

                pass


            self.state = 1578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
            if la_ == 1:
                self.state = 1571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1570
                    self.match(s_cypherParser.SP)


                self.state = 1573
                self.match(s_cypherParser.ELSE)
                self.state = 1575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1574
                    self.match(s_cypherParser.SP)


                self.state = 1577
                self.oC_Expression()


            self.state = 1581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1580
                self.match(s_cypherParser.SP)


            self.state = 1583
            self.match(s_cypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternative" ):
                listener.enterOC_CaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternative" ):
                listener.exitOC_CaseAlternative(self)




    def oC_CaseAlternative(self):

        localctx = s_cypherParser.OC_CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_CaseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1585
            self.match(s_cypherParser.WHEN)
            self.state = 1587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1586
                self.match(s_cypherParser.SP)


            self.state = 1589
            self.oC_Expression()
            self.state = 1591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1590
                self.match(s_cypherParser.SP)


            self.state = 1593
            self.match(s_cypherParser.THEN)
            self.state = 1595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1594
                self.match(s_cypherParser.SP)


            self.state = 1597
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = s_cypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1599
            self.match(s_cypherParser.T__9)
            self.state = 1601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1600
                self.match(s_cypherParser.SP)


            self.state = 1603
            self.oC_FilterExpression()
            self.state = 1612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
            if la_ == 1:
                self.state = 1605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1604
                    self.match(s_cypherParser.SP)


                self.state = 1607
                self.match(s_cypherParser.T__14)
                self.state = 1609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1608
                    self.match(s_cypherParser.SP)


                self.state = 1611
                self.oC_Expression()


            self.state = 1615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1614
                self.match(s_cypherParser.SP)


            self.state = 1617
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = s_cypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1619
            self.match(s_cypherParser.T__9)
            self.state = 1621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1620
                self.match(s_cypherParser.SP)


            self.state = 1631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 1623
                self.oC_Variable()
                self.state = 1625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1624
                    self.match(s_cypherParser.SP)


                self.state = 1627
                self.match(s_cypherParser.T__1)
                self.state = 1629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1628
                    self.match(s_cypherParser.SP)




            self.state = 1633
            self.oC_RelationshipsPattern()
            self.state = 1635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1634
                self.match(s_cypherParser.SP)


            self.state = 1641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 1637
                self.oC_Where()
                self.state = 1639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1638
                    self.match(s_cypherParser.SP)




            self.state = 1643
            self.match(s_cypherParser.T__14)
            self.state = 1645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1644
                self.match(s_cypherParser.SP)


            self.state = 1647
            self.oC_Expression()
            self.state = 1649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1648
                self.match(s_cypherParser.SP)


            self.state = 1651
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Quantifier" ):
                listener.enterOC_Quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Quantifier" ):
                listener.exitOC_Quantifier(self)




    def oC_Quantifier(self):

        localctx = s_cypherParser.OC_QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_Quantifier)
        self._la = 0 # Token type
        try:
            self.state = 1709
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1653
                self.match(s_cypherParser.ALL)
                self.state = 1655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1654
                    self.match(s_cypherParser.SP)


                self.state = 1657
                self.match(s_cypherParser.T__4)
                self.state = 1659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1658
                    self.match(s_cypherParser.SP)


                self.state = 1661
                self.oC_FilterExpression()
                self.state = 1663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1662
                    self.match(s_cypherParser.SP)


                self.state = 1665
                self.match(s_cypherParser.T__5)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1667
                self.match(s_cypherParser.ANY)
                self.state = 1669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1668
                    self.match(s_cypherParser.SP)


                self.state = 1671
                self.match(s_cypherParser.T__4)
                self.state = 1673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1672
                    self.match(s_cypherParser.SP)


                self.state = 1675
                self.oC_FilterExpression()
                self.state = 1677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1676
                    self.match(s_cypherParser.SP)


                self.state = 1679
                self.match(s_cypherParser.T__5)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1681
                self.match(s_cypherParser.NONE)
                self.state = 1683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1682
                    self.match(s_cypherParser.SP)


                self.state = 1685
                self.match(s_cypherParser.T__4)
                self.state = 1687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1686
                    self.match(s_cypherParser.SP)


                self.state = 1689
                self.oC_FilterExpression()
                self.state = 1691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1690
                    self.match(s_cypherParser.SP)


                self.state = 1693
                self.match(s_cypherParser.T__5)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1695
                self.match(s_cypherParser.SINGLE)
                self.state = 1697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1696
                    self.match(s_cypherParser.SP)


                self.state = 1699
                self.match(s_cypherParser.T__4)
                self.state = 1701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1700
                    self.match(s_cypherParser.SP)


                self.state = 1703
                self.oC_FilterExpression()
                self.state = 1705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1704
                    self.match(s_cypherParser.SP)


                self.state = 1707
                self.match(s_cypherParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IdInCollContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = s_cypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1711
            self.oC_IdInColl()
            self.state = 1716
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
            if la_ == 1:
                self.state = 1713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1712
                    self.match(s_cypherParser.SP)


                self.state = 1715
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPredicate" ):
                listener.enterOC_PatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPredicate" ):
                listener.exitOC_PatternPredicate(self)




    def oC_PatternPredicate(self):

        localctx = s_cypherParser.OC_PatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_PatternPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1718
            self.oC_RelationshipsPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = s_cypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1720
            self.match(s_cypherParser.T__4)
            self.state = 1722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1721
                self.match(s_cypherParser.SP)


            self.state = 1724
            self.oC_Expression()
            self.state = 1726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1725
                self.match(s_cypherParser.SP)


            self.state = 1728
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = s_cypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1730
            self.oC_Variable()
            self.state = 1731
            self.match(s_cypherParser.SP)
            self.state = 1732
            self.match(s_cypherParser.IN)
            self.state = 1733
            self.match(s_cypherParser.SP)
            self.state = 1734
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = s_cypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1736
            self.oC_FunctionName()
            self.state = 1738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1737
                self.match(s_cypherParser.SP)


            self.state = 1740
            self.match(s_cypherParser.T__4)
            self.state = 1742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1741
                self.match(s_cypherParser.SP)


            self.state = 1748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 1744
                self.match(s_cypherParser.DISTINCT)
                self.state = 1746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1745
                    self.match(s_cypherParser.SP)




            self.state = 1767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1750
                self.oC_Expression()
                self.state = 1752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1751
                    self.match(s_cypherParser.SP)


                self.state = 1764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1754
                    self.match(s_cypherParser.T__3)
                    self.state = 1756
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1755
                        self.match(s_cypherParser.SP)


                    self.state = 1758
                    self.oC_Expression()
                    self.state = 1760
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1759
                        self.match(s_cypherParser.SP)


                    self.state = 1766
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1769
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = s_cypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_FunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1771
            self.oC_Namespace()
            self.state = 1772
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExistentialSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExistentialSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExistentialSubquery" ):
                listener.enterOC_ExistentialSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExistentialSubquery" ):
                listener.exitOC_ExistentialSubquery(self)




    def oC_ExistentialSubquery(self):

        localctx = s_cypherParser.OC_ExistentialSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_ExistentialSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1774
            self.match(s_cypherParser.EXISTS)
            self.state = 1776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1775
                self.match(s_cypherParser.SP)


            self.state = 1778
            self.match(s_cypherParser.T__6)
            self.state = 1780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1779
                self.match(s_cypherParser.SP)


            self.state = 1790
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 71, 72]:
                self.state = 1782
                self.oC_RegularQuery()
                pass
            elif token in [5, 48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 1783
                self.oC_Pattern()
                self.state = 1788
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
                if la_ == 1:
                    self.state = 1785
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1784
                        self.match(s_cypherParser.SP)


                    self.state = 1787
                    self.oC_Where()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1792
                self.match(s_cypherParser.SP)


            self.state = 1795
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1797
            self.oC_ProcedureName()
            self.state = 1799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1798
                self.match(s_cypherParser.SP)


            self.state = 1801
            self.match(s_cypherParser.T__4)
            self.state = 1803
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1802
                self.match(s_cypherParser.SP)


            self.state = 1822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1805
                self.oC_Expression()
                self.state = 1807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1806
                    self.match(s_cypherParser.SP)


                self.state = 1819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1809
                    self.match(s_cypherParser.T__3)
                    self.state = 1811
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1810
                        self.match(s_cypherParser.SP)


                    self.state = 1813
                    self.oC_Expression()
                    self.state = 1815
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1814
                        self.match(s_cypherParser.SP)


                    self.state = 1821
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1824
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1826
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = s_cypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1828
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = s_cypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1830
            self.oC_Namespace()
            self.state = 1831
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = s_cypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1838
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,355,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1833
                    self.oC_SymbolicName()
                    self.state = 1834
                    self.match(s_cypherParser.T__0) 
                self.state = 1840
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,355,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = s_cypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1841
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_ListLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListLiteralContext,0)


        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = s_cypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_oC_Literal)
        try:
            self.state = 1849
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1843
                self.oC_BooleanLiteral()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1844
                self.match(s_cypherParser.NULL)
                pass
            elif token in [105, 106, 107, 115, 116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1845
                self.oC_NumberLiteral()
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1846
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1847
                self.oC_ListLiteral()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1848
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = s_cypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1851
            _la = self._input.LA(1)
            if not(_la==103 or _la==104):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = s_cypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_oC_NumberLiteral)
        try:
            self.state = 1855
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115, 116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1853
                self.oC_DoubleLiteral()
                pass
            elif token in [105, 106, 107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1854
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(s_cypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(s_cypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = s_cypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1857
            _la = self._input.LA(1)
            if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(s_cypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(s_cypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = s_cypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1859
            _la = self._input.LA(1)
            if not(_la==115 or _la==116):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = s_cypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1861
            self.match(s_cypherParser.T__9)
            self.state = 1863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1862
                self.match(s_cypherParser.SP)


            self.state = 1882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663125968032) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1865
                self.oC_Expression()
                self.state = 1867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1866
                    self.match(s_cypherParser.SP)


                self.state = 1879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1869
                    self.match(s_cypherParser.T__3)
                    self.state = 1871
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1870
                        self.match(s_cypherParser.SP)


                    self.state = 1873
                    self.oC_Expression()
                    self.state = 1875
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1874
                        self.match(s_cypherParser.SP)


                    self.state = 1881
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1884
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyKeyName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyKeyNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,i)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = s_cypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1886
            self.match(s_cypherParser.T__6)
            self.state = 1888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1887
                self.match(s_cypherParser.SP)


            self.state = 1923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 1890
                self.oC_PropertyKeyName()
                self.state = 1892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1891
                    self.match(s_cypherParser.SP)


                self.state = 1894
                self.match(s_cypherParser.T__7)
                self.state = 1896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1895
                    self.match(s_cypherParser.SP)


                self.state = 1898
                self.oC_Expression()
                self.state = 1900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1899
                    self.match(s_cypherParser.SP)


                self.state = 1920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 1902
                    self.match(s_cypherParser.T__3)
                    self.state = 1904
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1903
                        self.match(s_cypherParser.SP)


                    self.state = 1906
                    self.oC_PropertyKeyName()
                    self.state = 1908
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1907
                        self.match(s_cypherParser.SP)


                    self.state = 1910
                    self.match(s_cypherParser.T__7)
                    self.state = 1912
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1911
                        self.match(s_cypherParser.SP)


                    self.state = 1914
                    self.oC_Expression()
                    self.state = 1916
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1915
                        self.match(s_cypherParser.SP)


                    self.state = 1922
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1925
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = s_cypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1927
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = s_cypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1929
            self.match(s_cypherParser.T__25)
            self.state = 1932
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 1930
                self.oC_SymbolicName()
                pass
            elif token in [106]:
                self.state = 1931
                self.match(s_cypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = s_cypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_oC_SchemaName)
        try:
            self.state = 1936
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,375,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1934
                self.oC_SymbolicName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1935
                self.oC_ReservedWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = s_cypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1938
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2013396992) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = s_cypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1940
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32212516864) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = s_cypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1942
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70334388633600) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





