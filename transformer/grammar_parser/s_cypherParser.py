# Generated from .\transformer\grammar_parser\s_cypher.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,137,2158,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,1,0,1,0,1,0,3,0,296,8,
        0,1,1,4,1,299,8,1,11,1,12,1,300,1,1,1,1,1,2,1,2,3,2,307,8,2,1,2,
        1,2,3,2,311,8,2,1,2,1,2,3,2,315,8,2,1,2,1,2,3,2,319,8,2,3,2,321,
        8,2,1,2,3,2,324,8,2,1,2,3,2,327,8,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,
        335,8,3,1,4,1,4,3,4,339,8,4,1,4,1,4,3,4,343,8,4,1,4,3,4,346,8,4,
        1,5,1,5,3,5,350,8,5,1,5,1,5,1,5,5,5,355,8,5,10,5,12,5,358,9,5,1,
        5,3,5,361,8,5,1,5,3,5,364,8,5,1,6,1,6,3,6,368,8,6,1,6,1,6,3,6,372,
        8,6,1,6,1,6,3,6,376,8,6,1,6,5,6,379,8,6,10,6,12,6,382,9,6,1,6,3,
        6,385,8,6,1,6,3,6,388,8,6,1,7,1,7,3,7,392,8,7,1,7,1,7,3,7,396,8,
        7,1,7,1,7,3,7,400,8,7,1,7,5,7,403,8,7,10,7,12,7,406,9,7,1,7,3,7,
        409,8,7,1,7,3,7,412,8,7,1,8,1,8,3,8,416,8,8,1,8,3,8,419,8,8,1,8,
        3,8,422,8,8,1,8,1,8,3,8,426,8,8,1,8,1,8,1,8,1,8,3,8,432,8,8,1,8,
        1,8,3,8,436,8,8,1,8,1,8,1,8,1,8,3,8,442,8,8,1,8,1,8,3,8,446,8,8,
        1,8,1,8,1,8,1,8,3,8,452,8,8,1,8,1,8,1,8,1,8,3,8,458,8,8,1,8,1,8,
        1,8,1,8,3,8,464,8,8,1,8,3,8,467,8,8,1,8,3,8,470,8,8,1,8,1,8,3,8,
        474,8,8,1,8,1,8,1,8,1,8,3,8,480,8,8,1,8,3,8,483,8,8,1,8,3,8,486,
        8,8,1,8,1,8,3,8,490,8,8,1,8,1,8,3,8,494,8,8,1,8,1,8,3,8,498,8,8,
        1,9,1,9,3,9,502,8,9,1,9,1,9,1,10,1,10,3,10,508,8,10,1,10,3,10,511,
        8,10,1,11,1,11,3,11,515,8,11,1,11,1,11,1,12,1,12,1,12,3,12,522,8,
        12,1,12,1,12,3,12,526,8,12,1,13,1,13,3,13,530,8,13,1,13,1,13,3,13,
        534,8,13,1,13,1,13,3,13,538,8,13,1,13,1,13,3,13,542,8,13,1,13,5,
        13,545,8,13,10,13,12,13,548,9,13,1,13,3,13,551,8,13,1,13,1,13,3,
        13,555,8,13,3,13,557,8,13,1,14,1,14,1,14,3,14,562,8,14,1,14,1,14,
        3,14,566,8,14,3,14,568,8,14,3,14,570,8,14,1,15,1,15,1,15,1,15,3,
        15,576,8,15,1,16,1,16,3,16,580,8,16,1,16,1,16,1,17,1,17,3,17,586,
        8,17,1,17,1,17,1,18,1,18,3,18,592,8,18,1,19,1,19,1,19,1,19,3,19,
        598,8,19,1,19,1,19,1,19,3,19,603,8,19,1,20,1,20,1,20,1,20,3,20,609,
        8,20,1,20,3,20,612,8,20,1,20,1,20,1,20,1,20,3,20,618,8,20,3,20,620,
        8,20,1,21,1,21,3,21,624,8,21,1,21,1,21,3,21,628,8,21,1,21,5,21,631,
        8,21,10,21,12,21,634,9,21,1,21,3,21,637,8,21,1,21,3,21,640,8,21,
        1,22,1,22,1,22,1,22,1,22,3,22,647,8,22,1,23,1,23,3,23,651,8,23,5,
        23,653,8,23,10,23,12,23,656,9,23,1,23,1,23,3,23,660,8,23,5,23,662,
        8,23,10,23,12,23,665,9,23,1,23,1,23,3,23,669,8,23,1,24,1,24,1,24,
        3,24,674,8,24,1,24,3,24,677,8,24,1,25,1,25,3,25,681,8,25,1,25,1,
        25,3,25,685,8,25,1,25,1,25,1,25,3,25,690,8,25,1,25,3,25,693,8,25,
        3,25,695,8,25,1,25,3,25,698,8,25,1,25,1,25,1,26,1,26,3,26,704,8,
        26,1,26,3,26,707,8,26,1,27,1,27,3,27,711,8,27,1,27,1,27,1,28,1,28,
        3,28,717,8,28,1,28,1,28,1,29,1,29,3,29,723,8,29,1,29,1,29,3,29,727,
        8,29,1,29,1,29,1,29,1,29,3,29,733,8,29,1,29,1,29,3,29,737,8,29,1,
        29,1,29,1,29,3,29,742,8,29,1,30,1,30,3,30,746,8,30,1,30,1,30,3,30,
        750,8,30,1,30,1,30,3,30,754,8,30,1,30,1,30,1,31,1,31,3,31,760,8,
        31,1,31,1,31,3,31,764,8,31,1,31,1,31,1,32,1,32,3,32,770,8,32,1,32,
        1,32,3,32,774,8,32,3,32,776,8,32,1,32,1,32,3,32,780,8,32,3,32,782,
        8,32,1,32,1,32,3,32,786,8,32,3,32,788,8,32,1,32,1,32,3,32,792,8,
        32,3,32,794,8,32,1,32,1,32,1,33,1,33,3,33,800,8,33,1,34,1,34,3,34,
        804,8,34,1,34,1,34,3,34,808,8,34,1,34,1,34,3,34,812,8,34,1,34,1,
        34,3,34,816,8,34,1,34,1,34,3,34,820,8,34,1,34,1,34,3,34,824,8,34,
        1,34,1,34,3,34,828,8,34,1,34,1,34,5,34,832,8,34,10,34,12,34,835,
        9,34,3,34,837,8,34,1,34,3,34,840,8,34,1,34,1,34,1,35,1,35,3,35,846,
        8,35,1,35,3,35,849,8,35,1,36,1,36,3,36,853,8,36,1,36,1,36,3,36,857,
        8,36,1,36,1,36,3,36,861,8,36,1,36,1,36,3,36,865,8,36,1,37,1,37,3,
        37,869,8,37,1,37,1,37,3,37,873,8,37,3,37,875,8,37,1,37,1,37,3,37,
        879,8,37,3,37,881,8,37,1,37,3,37,884,8,37,1,37,1,37,3,37,888,8,37,
        3,37,890,8,37,1,37,1,37,3,37,894,8,37,3,37,896,8,37,1,37,1,37,1,
        38,1,38,3,38,902,8,38,1,38,1,38,3,38,906,8,38,1,38,1,38,5,38,910,
        8,38,10,38,12,38,913,9,38,1,39,1,39,1,39,1,39,1,39,3,39,920,8,39,
        1,40,1,40,3,40,924,8,40,1,40,1,40,3,40,928,8,40,1,40,1,40,5,40,932,
        8,40,10,40,12,40,935,9,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,
        1,45,1,45,3,45,947,8,45,1,45,1,45,3,45,951,8,45,1,45,1,45,5,45,955,
        8,45,10,45,12,45,958,9,45,1,46,1,46,3,46,962,8,46,1,46,1,46,3,46,
        966,8,46,1,46,1,46,5,46,970,8,46,10,46,12,46,973,9,46,1,47,1,47,
        3,47,977,8,47,1,47,1,47,5,47,981,8,47,10,47,12,47,984,9,47,1,48,
        3,48,987,8,48,1,48,1,48,3,48,991,8,48,1,48,1,48,3,48,995,8,48,1,
        48,1,48,1,49,3,49,1000,8,49,1,49,1,49,3,49,1004,8,49,1,49,3,49,1007,
        8,49,1,49,3,49,1010,8,49,1,49,1,49,3,49,1014,8,49,1,49,3,49,1017,
        8,49,1,49,3,49,1020,8,49,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,
        3,52,1030,8,52,1,52,5,52,1033,8,52,10,52,12,52,1036,9,52,1,52,3,
        52,1039,8,52,1,52,1,52,3,52,1043,8,52,3,52,1045,8,52,1,53,1,53,3,
        53,1049,8,53,1,53,5,53,1052,8,53,10,53,12,53,1055,9,53,1,53,1,53,
        3,53,1059,8,53,1,53,1,53,3,53,1063,8,53,3,53,1065,8,53,3,53,1067,
        8,53,1,53,3,53,1070,8,53,1,53,1,53,1,54,3,54,1075,8,54,1,54,1,54,
        3,54,1079,8,54,1,54,1,54,1,55,1,55,3,55,1085,8,55,1,55,5,55,1088,
        8,55,10,55,12,55,1091,9,55,1,56,1,56,3,56,1095,8,56,1,56,1,56,1,
        57,1,57,1,57,1,57,1,57,1,58,1,58,3,58,1106,8,58,1,58,1,58,3,58,1110,
        8,58,1,58,1,58,3,58,1114,8,58,1,58,1,58,3,58,1118,8,58,1,58,3,58,
        1121,8,58,1,58,1,58,3,58,1125,8,58,1,58,3,58,1128,8,58,1,58,1,58,
        1,59,1,59,3,59,1134,8,59,1,60,1,60,3,60,1138,8,60,1,60,1,60,3,60,
        1142,8,60,1,60,1,60,3,60,1146,8,60,3,60,1148,8,60,1,60,1,60,3,60,
        1152,8,60,1,60,1,60,3,60,1156,8,60,1,60,1,60,3,60,1160,8,60,5,60,
        1162,8,60,10,60,12,60,1165,9,60,3,60,1167,8,60,1,60,1,60,1,61,1,
        61,1,62,1,62,3,62,1175,8,62,1,62,1,62,3,62,1179,8,62,1,62,1,62,3,
        62,1183,8,62,1,62,1,62,3,62,1187,8,62,5,62,1189,8,62,10,62,12,62,
        1192,9,62,3,62,1194,8,62,1,62,1,62,1,63,1,63,1,64,1,64,3,64,1202,
        8,64,1,64,1,64,1,64,3,64,1207,8,64,1,64,5,64,1210,8,64,10,64,12,
        64,1213,9,64,3,64,1215,8,64,1,64,1,64,1,65,1,65,3,65,1221,8,65,1,
        65,1,65,3,65,1225,8,65,1,65,1,65,3,65,1229,8,65,1,66,1,66,1,67,1,
        67,1,68,3,68,1236,8,68,1,68,1,68,3,68,1240,8,68,1,68,3,68,1243,8,
        68,1,68,3,68,1246,8,68,1,68,1,68,1,69,1,69,1,70,1,70,3,70,1254,8,
        70,1,70,5,70,1257,8,70,10,70,12,70,1260,9,70,1,71,1,71,1,71,1,71,
        3,71,1266,8,71,1,71,1,71,1,71,3,71,1271,8,71,1,71,3,71,1274,8,71,
        1,72,1,72,3,72,1278,8,72,1,73,1,73,3,73,1282,8,73,5,73,1284,8,73,
        10,73,12,73,1287,9,73,1,73,1,73,1,73,3,73,1292,8,73,5,73,1294,8,
        73,10,73,12,73,1297,9,73,1,73,1,73,3,73,1301,8,73,1,73,5,73,1304,
        8,73,10,73,12,73,1307,9,73,1,73,3,73,1310,8,73,1,73,3,73,1313,8,
        73,3,73,1315,8,73,1,74,1,74,1,74,3,74,1320,8,74,1,75,1,75,3,75,1324,
        8,75,1,75,1,75,1,75,1,75,1,75,1,75,1,76,1,76,3,76,1334,8,76,1,76,
        1,76,1,76,5,76,1339,8,76,10,76,12,76,1342,9,76,1,77,1,77,1,77,1,
        77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1354,8,77,1,78,1,78,3,78,1358,
        8,78,1,78,1,78,1,79,1,79,3,79,1364,8,79,1,79,1,79,3,79,1368,8,79,
        1,79,1,79,3,79,1372,8,79,1,79,5,79,1375,8,79,10,79,12,79,1378,9,
        79,1,80,1,80,3,80,1382,8,80,1,80,1,80,3,80,1386,8,80,1,80,1,80,3,
        80,1390,8,80,1,80,1,80,3,80,1394,8,80,1,80,5,80,1397,8,80,10,80,
        12,80,1400,9,80,1,81,1,81,1,81,1,81,3,81,1406,8,81,1,81,1,81,3,81,
        1410,8,81,1,81,5,81,1413,8,81,10,81,12,81,1416,9,81,1,82,1,82,3,
        82,1420,8,82,1,82,1,82,3,82,1424,8,82,1,82,5,82,1427,8,82,10,82,
        12,82,1430,9,82,1,82,3,82,1433,8,82,1,82,3,82,1436,8,82,1,83,1,83,
        1,83,1,83,1,83,3,83,1443,8,83,1,83,1,83,1,84,1,84,1,84,3,84,1450,
        8,84,1,84,3,84,1453,8,84,1,85,1,85,1,85,1,86,3,86,1459,8,86,1,86,
        3,86,1462,8,86,1,86,1,86,1,86,1,86,3,86,1468,8,86,1,86,1,86,3,86,
        1472,8,86,1,86,1,86,3,86,1476,8,86,1,87,1,87,3,87,1480,8,87,1,87,
        1,87,3,87,1484,8,87,1,87,5,87,1487,8,87,10,87,12,87,1490,9,87,1,
        87,1,87,3,87,1494,8,87,1,87,1,87,3,87,1498,8,87,1,87,5,87,1501,8,
        87,10,87,12,87,1504,9,87,3,87,1506,8,87,1,88,1,88,1,88,1,88,1,88,
        1,88,1,88,3,88,1515,8,88,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,
        1524,8,89,1,89,5,89,1527,8,89,10,89,12,89,1530,9,89,1,90,1,90,1,
        90,1,90,1,91,1,91,1,91,1,91,1,92,1,92,3,92,1542,8,92,1,92,3,92,1545,
        8,92,1,93,1,93,1,93,1,93,1,94,1,94,3,94,1553,8,94,1,94,1,94,3,94,
        1557,8,94,1,94,5,94,1560,8,94,10,94,12,94,1563,9,94,1,95,1,95,1,
        96,1,96,3,96,1569,8,96,1,96,5,96,1572,8,96,10,96,12,96,1575,9,96,
        1,96,1,96,1,96,1,96,3,96,1581,8,96,1,97,1,97,3,97,1585,8,97,1,97,
        4,97,1588,8,97,11,97,12,97,1589,1,98,1,98,3,98,1594,8,98,1,98,1,
        98,1,99,1,99,3,99,1600,8,99,1,99,1,99,3,99,1604,8,99,1,99,3,99,1607,
        8,99,1,99,3,99,1610,8,99,1,99,1,99,3,99,1614,8,99,1,99,1,99,1,99,
        1,99,3,99,1620,8,99,1,99,1,99,3,99,1624,8,99,1,99,3,99,1627,8,99,
        1,99,3,99,1630,8,99,1,99,1,99,1,99,1,99,3,99,1636,8,99,1,99,3,99,
        1639,8,99,1,99,3,99,1642,8,99,1,99,1,99,3,99,1646,8,99,1,99,1,99,
        1,99,1,99,3,99,1652,8,99,1,99,3,99,1655,8,99,1,99,3,99,1658,8,99,
        1,99,1,99,3,99,1662,8,99,1,100,1,100,3,100,1666,8,100,1,101,1,101,
        3,101,1670,8,101,1,101,1,101,3,101,1674,8,101,1,101,1,101,3,101,
        1678,8,101,1,101,3,101,1681,8,101,1,101,5,101,1684,8,101,10,101,
        12,101,1687,9,101,1,102,1,102,3,102,1691,8,102,1,102,5,102,1694,
        8,102,10,102,12,102,1697,9,102,1,103,1,103,3,103,1701,8,103,1,103,
        1,103,1,104,1,104,3,104,1707,8,104,1,104,1,104,3,104,1711,8,104,
        3,104,1713,8,104,1,104,1,104,3,104,1717,8,104,1,104,1,104,3,104,
        1721,8,104,3,104,1723,8,104,3,104,1725,8,104,1,105,1,105,1,106,1,
        106,1,107,1,107,3,107,1733,8,107,1,107,4,107,1736,8,107,11,107,12,
        107,1737,1,108,1,108,1,109,1,109,1,109,1,109,1,109,5,109,1747,8,
        109,10,109,12,109,1750,9,109,1,110,1,110,1,110,1,110,1,110,5,110,
        1757,8,110,10,110,12,110,1760,9,110,1,111,1,111,1,111,1,111,1,111,
        5,111,1767,8,111,10,111,12,111,1770,9,111,1,112,1,112,3,112,1774,
        8,112,5,112,1776,8,112,10,112,12,112,1779,9,112,1,112,1,112,1,113,
        1,113,3,113,1785,8,113,1,113,1,113,1,113,3,113,1790,8,113,1,113,
        1,113,1,113,3,113,1795,8,113,1,113,1,113,1,113,3,113,1800,8,113,
        1,113,1,113,1,113,3,113,1805,8,113,1,113,1,113,1,113,3,113,1810,
        8,113,1,113,3,113,1813,8,113,1,114,1,114,1,114,1,114,1,114,1,114,
        1,114,1,114,1,114,1,114,3,114,1825,8,114,1,114,3,114,1828,8,114,
        1,114,1,114,1,115,1,115,1,115,3,115,1835,8,115,1,115,1,115,1,116,
        1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,3,116,1849,
        8,116,1,117,1,117,1,117,3,117,1854,8,117,1,117,3,117,1857,8,117,
        1,118,1,118,3,118,1861,8,118,1,118,1,118,1,119,1,119,1,119,1,119,
        1,119,3,119,1870,8,119,1,119,1,119,3,119,1874,8,119,1,119,1,119,
        3,119,1878,8,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
        1,119,3,119,1889,8,119,1,120,1,120,3,120,1893,8,120,1,120,4,120,
        1896,8,120,11,120,12,120,1897,1,120,1,120,3,120,1902,8,120,1,120,
        1,120,3,120,1906,8,120,1,120,4,120,1909,8,120,11,120,12,120,1910,
        3,120,1913,8,120,1,120,3,120,1916,8,120,1,120,1,120,3,120,1920,8,
        120,1,120,3,120,1923,8,120,1,120,3,120,1926,8,120,1,120,1,120,1,
        121,1,121,3,121,1932,8,121,1,121,1,121,3,121,1936,8,121,1,121,1,
        121,3,121,1940,8,121,1,121,1,121,1,122,1,122,3,122,1946,8,122,1,
        122,1,122,3,122,1950,8,122,1,122,1,122,3,122,1954,8,122,1,122,3,
        122,1957,8,122,1,122,3,122,1960,8,122,1,122,1,122,1,123,1,123,3,
        123,1966,8,123,1,123,1,123,3,123,1970,8,123,1,123,1,123,3,123,1974,
        8,123,3,123,1976,8,123,1,123,1,123,3,123,1980,8,123,1,123,1,123,
        3,123,1984,8,123,3,123,1986,8,123,1,123,1,123,3,123,1990,8,123,1,
        123,1,123,3,123,1994,8,123,1,123,1,123,1,124,1,124,3,124,2000,8,
        124,1,124,1,124,3,124,2004,8,124,1,124,1,124,3,124,2008,8,124,1,
        124,1,124,1,124,1,124,3,124,2014,8,124,1,124,1,124,3,124,2018,8,
        124,1,124,1,124,3,124,2022,8,124,1,124,1,124,1,124,1,124,3,124,2028,
        8,124,1,124,1,124,3,124,2032,8,124,1,124,1,124,3,124,2036,8,124,
        1,124,1,124,1,124,1,124,3,124,2042,8,124,1,124,1,124,3,124,2046,
        8,124,1,124,1,124,3,124,2050,8,124,1,124,1,124,3,124,2054,8,124,
        1,125,1,125,1,126,1,126,3,126,2060,8,126,1,126,1,126,3,126,2064,
        8,126,1,126,1,126,1,127,1,127,1,127,1,127,1,127,1,127,1,128,1,128,
        1,128,1,129,1,129,3,129,2079,8,129,1,129,1,129,3,129,2083,8,129,
        1,129,1,129,3,129,2087,8,129,1,129,1,129,3,129,2091,8,129,1,129,
        1,129,3,129,2095,8,129,5,129,2097,8,129,10,129,12,129,2100,9,129,
        3,129,2102,8,129,1,129,1,129,1,130,1,130,1,131,1,131,1,132,1,132,
        1,132,1,133,1,133,1,133,5,133,2116,8,133,10,133,12,133,2119,9,133,
        1,134,1,134,1,135,1,135,1,135,1,135,1,135,1,135,3,135,2129,8,135,
        1,136,1,136,1,137,1,137,3,137,2135,8,137,1,138,1,138,1,139,1,139,
        1,140,1,140,1,141,1,141,1,141,3,141,2146,8,141,1,142,1,142,3,142,
        2150,8,142,1,143,1,143,1,144,1,144,1,145,1,145,1,145,0,0,146,0,2,
        4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
        50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
        94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
        128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
        160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
        192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,
        224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,
        256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,
        288,290,0,13,2,0,5,5,13,14,1,0,16,17,2,0,2,2,18,22,1,0,54,55,7,0,
        48,48,93,93,97,97,99,101,108,108,129,131,134,134,5,0,48,68,71,92,
        94,98,102,104,119,128,1,0,78,81,1,0,103,104,1,0,105,107,1,0,115,
        116,2,0,19,19,27,30,2,0,21,21,31,34,2,0,17,17,35,45,2451,0,295,1,
        0,0,0,2,298,1,0,0,0,4,306,1,0,0,0,6,334,1,0,0,0,8,336,1,0,0,0,10,
        347,1,0,0,0,12,365,1,0,0,0,14,389,1,0,0,0,16,497,1,0,0,0,18,499,
        1,0,0,0,20,505,1,0,0,0,22,512,1,0,0,0,24,518,1,0,0,0,26,529,1,0,
        0,0,28,558,1,0,0,0,30,575,1,0,0,0,32,577,1,0,0,0,34,583,1,0,0,0,
        36,591,1,0,0,0,38,593,1,0,0,0,40,604,1,0,0,0,42,621,1,0,0,0,44,641,
        1,0,0,0,46,654,1,0,0,0,48,670,1,0,0,0,50,678,1,0,0,0,52,701,1,0,
        0,0,54,708,1,0,0,0,56,714,1,0,0,0,58,741,1,0,0,0,60,743,1,0,0,0,
        62,757,1,0,0,0,64,767,1,0,0,0,66,799,1,0,0,0,68,801,1,0,0,0,70,843,
        1,0,0,0,72,850,1,0,0,0,74,866,1,0,0,0,76,899,1,0,0,0,78,914,1,0,
        0,0,80,921,1,0,0,0,82,936,1,0,0,0,84,938,1,0,0,0,86,940,1,0,0,0,
        88,942,1,0,0,0,90,944,1,0,0,0,92,959,1,0,0,0,94,976,1,0,0,0,96,986,
        1,0,0,0,98,999,1,0,0,0,100,1023,1,0,0,0,102,1025,1,0,0,0,104,1027,
        1,0,0,0,106,1046,1,0,0,0,108,1074,1,0,0,0,110,1082,1,0,0,0,112,1092,
        1,0,0,0,114,1098,1,0,0,0,116,1103,1,0,0,0,118,1133,1,0,0,0,120,1135,
        1,0,0,0,122,1170,1,0,0,0,124,1172,1,0,0,0,126,1197,1,0,0,0,128,1199,
        1,0,0,0,130,1218,1,0,0,0,132,1230,1,0,0,0,134,1232,1,0,0,0,136,1235,
        1,0,0,0,138,1249,1,0,0,0,140,1251,1,0,0,0,142,1273,1,0,0,0,144,1277,
        1,0,0,0,146,1314,1,0,0,0,148,1319,1,0,0,0,150,1321,1,0,0,0,152,1331,
        1,0,0,0,154,1353,1,0,0,0,156,1355,1,0,0,0,158,1361,1,0,0,0,160,1381,
        1,0,0,0,162,1401,1,0,0,0,164,1417,1,0,0,0,166,1442,1,0,0,0,168,1446,
        1,0,0,0,170,1454,1,0,0,0,172,1461,1,0,0,0,174,1505,1,0,0,0,176,1514,
        1,0,0,0,178,1516,1,0,0,0,180,1531,1,0,0,0,182,1535,1,0,0,0,184,1539,
        1,0,0,0,186,1546,1,0,0,0,188,1550,1,0,0,0,190,1564,1,0,0,0,192,1580,
        1,0,0,0,194,1582,1,0,0,0,196,1591,1,0,0,0,198,1661,1,0,0,0,200,1665,
        1,0,0,0,202,1667,1,0,0,0,204,1688,1,0,0,0,206,1698,1,0,0,0,208,1704,
        1,0,0,0,210,1726,1,0,0,0,212,1728,1,0,0,0,214,1730,1,0,0,0,216,1739,
        1,0,0,0,218,1741,1,0,0,0,220,1751,1,0,0,0,222,1761,1,0,0,0,224,1777,
        1,0,0,0,226,1812,1,0,0,0,228,1824,1,0,0,0,230,1831,1,0,0,0,232,1848,
        1,0,0,0,234,1856,1,0,0,0,236,1858,1,0,0,0,238,1888,1,0,0,0,240,1912,
        1,0,0,0,242,1929,1,0,0,0,244,1943,1,0,0,0,246,1963,1,0,0,0,248,2053,
        1,0,0,0,250,2055,1,0,0,0,252,2057,1,0,0,0,254,2067,1,0,0,0,256,2073,
        1,0,0,0,258,2076,1,0,0,0,260,2105,1,0,0,0,262,2107,1,0,0,0,264,2109,
        1,0,0,0,266,2117,1,0,0,0,268,2120,1,0,0,0,270,2128,1,0,0,0,272,2130,
        1,0,0,0,274,2134,1,0,0,0,276,2136,1,0,0,0,278,2138,1,0,0,0,280,2140,
        1,0,0,0,282,2142,1,0,0,0,284,2149,1,0,0,0,286,2151,1,0,0,0,288,2153,
        1,0,0,0,290,2155,1,0,0,0,292,296,3,140,70,0,293,296,3,40,20,0,294,
        296,3,36,18,0,295,292,1,0,0,0,295,293,1,0,0,0,295,294,1,0,0,0,296,
        1,1,0,0,0,297,299,3,46,23,0,298,297,1,0,0,0,299,300,1,0,0,0,300,
        298,1,0,0,0,300,301,1,0,0,0,301,302,1,0,0,0,302,303,3,146,73,0,303,
        3,1,0,0,0,304,305,5,58,0,0,305,307,5,135,0,0,306,304,1,0,0,0,306,
        307,1,0,0,0,307,308,1,0,0,0,308,310,5,59,0,0,309,311,5,135,0,0,310,
        309,1,0,0,0,310,311,1,0,0,0,311,312,1,0,0,0,312,320,3,188,94,0,313,
        315,5,135,0,0,314,313,1,0,0,0,314,315,1,0,0,0,315,318,1,0,0,0,316,
        319,3,32,16,0,317,319,3,34,17,0,318,316,1,0,0,0,318,317,1,0,0,0,
        319,321,1,0,0,0,320,314,1,0,0,0,320,321,1,0,0,0,321,326,1,0,0,0,
        322,324,5,135,0,0,323,322,1,0,0,0,323,324,1,0,0,0,324,325,1,0,0,
        0,325,327,3,186,93,0,326,323,1,0,0,0,326,327,1,0,0,0,327,5,1,0,0,
        0,328,335,3,8,4,0,329,335,3,10,5,0,330,335,3,12,6,0,331,335,3,162,
        81,0,332,335,3,14,7,0,333,335,3,26,13,0,334,328,1,0,0,0,334,329,
        1,0,0,0,334,330,1,0,0,0,334,331,1,0,0,0,334,332,1,0,0,0,334,333,
        1,0,0,0,335,7,1,0,0,0,336,338,5,64,0,0,337,339,5,135,0,0,338,337,
        1,0,0,0,338,339,1,0,0,0,339,340,1,0,0,0,340,345,3,188,94,0,341,343,
        5,135,0,0,342,341,1,0,0,0,342,343,1,0,0,0,343,344,1,0,0,0,344,346,
        3,32,16,0,345,342,1,0,0,0,345,346,1,0,0,0,346,9,1,0,0,0,347,349,
        5,62,0,0,348,350,5,135,0,0,349,348,1,0,0,0,349,350,1,0,0,0,350,351,
        1,0,0,0,351,356,3,58,29,0,352,353,5,135,0,0,353,355,3,154,77,0,354,
        352,1,0,0,0,355,358,1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,
        363,1,0,0,0,358,356,1,0,0,0,359,361,5,135,0,0,360,359,1,0,0,0,360,
        361,1,0,0,0,361,362,1,0,0,0,362,364,3,32,16,0,363,360,1,0,0,0,363,
        364,1,0,0,0,364,11,1,0,0,0,365,367,5,65,0,0,366,368,5,135,0,0,367,
        366,1,0,0,0,367,368,1,0,0,0,368,369,1,0,0,0,369,380,3,16,8,0,370,
        372,5,135,0,0,371,370,1,0,0,0,371,372,1,0,0,0,372,373,1,0,0,0,373,
        375,5,1,0,0,374,376,5,135,0,0,375,374,1,0,0,0,375,376,1,0,0,0,376,
        377,1,0,0,0,377,379,3,16,8,0,378,371,1,0,0,0,379,382,1,0,0,0,380,
        378,1,0,0,0,380,381,1,0,0,0,381,387,1,0,0,0,382,380,1,0,0,0,383,
        385,5,135,0,0,384,383,1,0,0,0,384,385,1,0,0,0,385,386,1,0,0,0,386,
        388,3,32,16,0,387,384,1,0,0,0,387,388,1,0,0,0,388,13,1,0,0,0,389,
        391,5,53,0,0,390,392,5,135,0,0,391,390,1,0,0,0,391,392,1,0,0,0,392,
        393,1,0,0,0,393,404,3,24,12,0,394,396,5,135,0,0,395,394,1,0,0,0,
        395,396,1,0,0,0,396,397,1,0,0,0,397,399,5,1,0,0,398,400,5,135,0,
        0,399,398,1,0,0,0,399,400,1,0,0,0,400,401,1,0,0,0,401,403,3,24,12,
        0,402,395,1,0,0,0,403,406,1,0,0,0,404,402,1,0,0,0,404,405,1,0,0,
        0,405,411,1,0,0,0,406,404,1,0,0,0,407,409,5,135,0,0,408,407,1,0,
        0,0,408,409,1,0,0,0,409,410,1,0,0,0,410,412,3,32,16,0,411,408,1,
        0,0,0,411,412,1,0,0,0,412,15,1,0,0,0,413,418,3,214,107,0,414,416,
        5,135,0,0,415,414,1,0,0,0,415,416,1,0,0,0,416,417,1,0,0,0,417,419,
        3,116,58,0,418,415,1,0,0,0,418,419,1,0,0,0,419,421,1,0,0,0,420,422,
        5,135,0,0,421,420,1,0,0,0,421,422,1,0,0,0,422,423,1,0,0,0,423,425,
        5,2,0,0,424,426,5,135,0,0,425,424,1,0,0,0,425,426,1,0,0,0,426,427,
        1,0,0,0,427,428,3,216,108,0,428,498,1,0,0,0,429,431,3,268,134,0,
        430,432,5,135,0,0,431,430,1,0,0,0,431,432,1,0,0,0,432,433,1,0,0,
        0,433,435,5,2,0,0,434,436,5,135,0,0,435,434,1,0,0,0,435,436,1,0,
        0,0,436,437,1,0,0,0,437,438,3,216,108,0,438,498,1,0,0,0,439,441,
        3,268,134,0,440,442,5,135,0,0,441,440,1,0,0,0,441,442,1,0,0,0,442,
        443,1,0,0,0,443,445,5,3,0,0,444,446,5,135,0,0,445,444,1,0,0,0,445,
        446,1,0,0,0,446,447,1,0,0,0,447,448,3,216,108,0,448,498,1,0,0,0,
        449,451,3,268,134,0,450,452,5,135,0,0,451,450,1,0,0,0,451,452,1,
        0,0,0,452,453,1,0,0,0,453,454,3,204,102,0,454,498,1,0,0,0,455,457,
        3,268,134,0,456,458,5,135,0,0,457,456,1,0,0,0,457,458,1,0,0,0,458,
        459,1,0,0,0,459,460,3,116,58,0,460,498,1,0,0,0,461,466,3,268,134,
        0,462,464,5,135,0,0,463,462,1,0,0,0,463,464,1,0,0,0,464,465,1,0,
        0,0,465,467,3,116,58,0,466,463,1,0,0,0,466,467,1,0,0,0,467,469,1,
        0,0,0,468,470,5,135,0,0,469,468,1,0,0,0,469,470,1,0,0,0,470,471,
        1,0,0,0,471,473,5,4,0,0,472,474,5,135,0,0,473,472,1,0,0,0,473,474,
        1,0,0,0,474,475,1,0,0,0,475,476,3,18,9,0,476,498,1,0,0,0,477,482,
        3,268,134,0,478,480,5,135,0,0,479,478,1,0,0,0,479,480,1,0,0,0,480,
        481,1,0,0,0,481,483,3,116,58,0,482,479,1,0,0,0,482,483,1,0,0,0,483,
        485,1,0,0,0,484,486,5,135,0,0,485,484,1,0,0,0,485,486,1,0,0,0,486,
        487,1,0,0,0,487,489,5,4,0,0,488,490,5,135,0,0,489,488,1,0,0,0,489,
        490,1,0,0,0,490,491,1,0,0,0,491,493,3,20,10,0,492,494,5,135,0,0,
        493,492,1,0,0,0,493,494,1,0,0,0,494,495,1,0,0,0,495,496,3,22,11,
        0,496,498,1,0,0,0,497,413,1,0,0,0,497,429,1,0,0,0,497,439,1,0,0,
        0,497,449,1,0,0,0,497,455,1,0,0,0,497,461,1,0,0,0,497,477,1,0,0,
        0,498,17,1,0,0,0,499,501,3,280,140,0,500,502,5,135,0,0,501,500,1,
        0,0,0,501,502,1,0,0,0,502,503,1,0,0,0,503,504,3,116,58,0,504,19,
        1,0,0,0,505,510,3,280,140,0,506,508,5,135,0,0,507,506,1,0,0,0,507,
        508,1,0,0,0,508,509,1,0,0,0,509,511,3,116,58,0,510,507,1,0,0,0,510,
        511,1,0,0,0,511,21,1,0,0,0,512,514,5,47,0,0,513,515,5,135,0,0,514,
        513,1,0,0,0,514,515,1,0,0,0,515,516,1,0,0,0,516,517,3,116,58,0,517,
        23,1,0,0,0,518,525,3,216,108,0,519,521,3,108,54,0,520,522,5,135,
        0,0,521,520,1,0,0,0,521,522,1,0,0,0,522,523,1,0,0,0,523,524,5,47,
        0,0,524,526,1,0,0,0,525,519,1,0,0,0,525,526,1,0,0,0,526,25,1,0,0,
        0,527,528,5,66,0,0,528,530,5,135,0,0,529,527,1,0,0,0,529,530,1,0,
        0,0,530,531,1,0,0,0,531,533,5,67,0,0,532,534,5,135,0,0,533,532,1,
        0,0,0,533,534,1,0,0,0,534,535,1,0,0,0,535,546,3,28,14,0,536,538,
        5,135,0,0,537,536,1,0,0,0,537,538,1,0,0,0,538,539,1,0,0,0,539,541,
        5,1,0,0,540,542,5,135,0,0,541,540,1,0,0,0,541,542,1,0,0,0,542,543,
        1,0,0,0,543,545,3,28,14,0,544,537,1,0,0,0,545,548,1,0,0,0,546,544,
        1,0,0,0,546,547,1,0,0,0,547,556,1,0,0,0,548,546,1,0,0,0,549,551,
        5,135,0,0,550,549,1,0,0,0,550,551,1,0,0,0,551,554,1,0,0,0,552,555,
        3,32,16,0,553,555,3,34,17,0,554,552,1,0,0,0,554,553,1,0,0,0,555,
        557,1,0,0,0,556,550,1,0,0,0,556,557,1,0,0,0,557,27,1,0,0,0,558,569,
        3,216,108,0,559,567,3,108,54,0,560,562,5,135,0,0,561,560,1,0,0,0,
        561,562,1,0,0,0,562,565,1,0,0,0,563,566,5,47,0,0,564,566,3,116,58,
        0,565,563,1,0,0,0,565,564,1,0,0,0,566,568,1,0,0,0,567,561,1,0,0,
        0,567,568,1,0,0,0,568,570,1,0,0,0,569,559,1,0,0,0,569,570,1,0,0,
        0,570,29,1,0,0,0,571,572,3,268,134,0,572,573,3,204,102,0,573,576,
        1,0,0,0,574,576,3,214,107,0,575,571,1,0,0,0,575,574,1,0,0,0,576,
        31,1,0,0,0,577,579,5,49,0,0,578,580,5,135,0,0,579,578,1,0,0,0,579,
        580,1,0,0,0,580,581,1,0,0,0,581,582,3,216,108,0,582,33,1,0,0,0,583,
        585,5,51,0,0,584,586,5,135,0,0,585,584,1,0,0,0,585,586,1,0,0,0,586,
        587,1,0,0,0,587,588,3,216,108,0,588,35,1,0,0,0,589,592,3,54,27,0,
        590,592,3,56,28,0,591,589,1,0,0,0,591,590,1,0,0,0,592,37,1,0,0,0,
        593,594,5,69,0,0,594,595,5,135,0,0,595,602,3,258,129,0,596,598,5,
        135,0,0,597,596,1,0,0,0,597,598,1,0,0,0,598,599,1,0,0,0,599,600,
        5,70,0,0,600,601,5,135,0,0,601,603,3,42,21,0,602,597,1,0,0,0,602,
        603,1,0,0,0,603,39,1,0,0,0,604,605,5,69,0,0,605,608,5,135,0,0,606,
        609,3,258,129,0,607,609,3,260,130,0,608,606,1,0,0,0,608,607,1,0,
        0,0,609,619,1,0,0,0,610,612,5,135,0,0,611,610,1,0,0,0,611,612,1,
        0,0,0,612,613,1,0,0,0,613,614,5,70,0,0,614,617,5,135,0,0,615,618,
        5,5,0,0,616,618,3,42,21,0,617,615,1,0,0,0,617,616,1,0,0,0,618,620,
        1,0,0,0,619,611,1,0,0,0,619,620,1,0,0,0,620,41,1,0,0,0,621,632,3,
        44,22,0,622,624,5,135,0,0,623,622,1,0,0,0,623,624,1,0,0,0,624,625,
        1,0,0,0,625,627,5,1,0,0,626,628,5,135,0,0,627,626,1,0,0,0,627,628,
        1,0,0,0,628,629,1,0,0,0,629,631,3,44,22,0,630,623,1,0,0,0,631,634,
        1,0,0,0,632,630,1,0,0,0,632,633,1,0,0,0,633,639,1,0,0,0,634,632,
        1,0,0,0,635,637,5,135,0,0,636,635,1,0,0,0,636,637,1,0,0,0,637,638,
        1,0,0,0,638,640,3,186,93,0,639,636,1,0,0,0,639,640,1,0,0,0,640,43,
        1,0,0,0,641,646,3,262,131,0,642,643,5,135,0,0,643,644,5,61,0,0,644,
        645,5,135,0,0,645,647,3,268,134,0,646,642,1,0,0,0,646,647,1,0,0,
        0,647,45,1,0,0,0,648,650,3,148,74,0,649,651,5,135,0,0,650,649,1,
        0,0,0,650,651,1,0,0,0,651,653,1,0,0,0,652,648,1,0,0,0,653,656,1,
        0,0,0,654,652,1,0,0,0,654,655,1,0,0,0,655,663,1,0,0,0,656,654,1,
        0,0,0,657,659,3,6,3,0,658,660,5,135,0,0,659,658,1,0,0,0,659,660,
        1,0,0,0,660,662,1,0,0,0,661,657,1,0,0,0,662,665,1,0,0,0,663,661,
        1,0,0,0,663,664,1,0,0,0,664,666,1,0,0,0,665,663,1,0,0,0,666,668,
        3,48,24,0,667,669,5,135,0,0,668,667,1,0,0,0,668,669,1,0,0,0,669,
        47,1,0,0,0,670,671,5,71,0,0,671,676,3,172,86,0,672,674,5,135,0,0,
        673,672,1,0,0,0,673,674,1,0,0,0,674,675,1,0,0,0,675,677,3,186,93,
        0,676,673,1,0,0,0,676,677,1,0,0,0,677,49,1,0,0,0,678,680,5,102,0,
        0,679,681,5,135,0,0,680,679,1,0,0,0,680,681,1,0,0,0,681,682,1,0,
        0,0,682,684,5,6,0,0,683,685,5,135,0,0,684,683,1,0,0,0,684,685,1,
        0,0,0,685,694,1,0,0,0,686,695,3,140,70,0,687,692,3,188,94,0,688,
        690,5,135,0,0,689,688,1,0,0,0,689,690,1,0,0,0,690,691,1,0,0,0,691,
        693,3,186,93,0,692,689,1,0,0,0,692,693,1,0,0,0,693,695,1,0,0,0,694,
        686,1,0,0,0,694,687,1,0,0,0,695,697,1,0,0,0,696,698,5,135,0,0,697,
        696,1,0,0,0,697,698,1,0,0,0,698,699,1,0,0,0,699,700,5,7,0,0,700,
        51,1,0,0,0,701,706,3,254,127,0,702,704,5,135,0,0,703,702,1,0,0,0,
        703,704,1,0,0,0,704,705,1,0,0,0,705,707,3,186,93,0,706,703,1,0,0,
        0,706,707,1,0,0,0,707,53,1,0,0,0,708,710,5,50,0,0,709,711,5,135,
        0,0,710,709,1,0,0,0,710,711,1,0,0,0,711,712,1,0,0,0,712,713,3,216,
        108,0,713,55,1,0,0,0,714,716,5,52,0,0,715,717,5,135,0,0,716,715,
        1,0,0,0,716,717,1,0,0,0,717,718,1,0,0,0,718,719,3,216,108,0,719,
        57,1,0,0,0,720,722,3,268,134,0,721,723,5,135,0,0,722,721,1,0,0,0,
        722,723,1,0,0,0,723,724,1,0,0,0,724,726,5,2,0,0,725,727,5,135,0,
        0,726,725,1,0,0,0,726,727,1,0,0,0,727,728,1,0,0,0,728,729,3,60,30,
        0,729,742,1,0,0,0,730,732,3,268,134,0,731,733,5,135,0,0,732,731,
        1,0,0,0,732,733,1,0,0,0,733,734,1,0,0,0,734,736,5,2,0,0,735,737,
        5,135,0,0,736,735,1,0,0,0,736,737,1,0,0,0,737,738,1,0,0,0,738,739,
        3,190,95,0,739,742,1,0,0,0,740,742,3,190,95,0,741,720,1,0,0,0,741,
        730,1,0,0,0,741,740,1,0,0,0,742,59,1,0,0,0,743,745,3,256,128,0,744,
        746,5,135,0,0,745,744,1,0,0,0,745,746,1,0,0,0,746,747,1,0,0,0,747,
        749,5,8,0,0,748,750,5,135,0,0,749,748,1,0,0,0,749,750,1,0,0,0,750,
        751,1,0,0,0,751,753,3,62,31,0,752,754,5,135,0,0,753,752,1,0,0,0,
        753,754,1,0,0,0,754,755,1,0,0,0,755,756,5,9,0,0,756,61,1,0,0,0,757,
        759,3,64,32,0,758,760,5,135,0,0,759,758,1,0,0,0,759,760,1,0,0,0,
        760,761,1,0,0,0,761,763,3,198,99,0,762,764,5,135,0,0,763,762,1,0,
        0,0,763,764,1,0,0,0,764,765,1,0,0,0,765,766,3,64,32,0,766,63,1,0,
        0,0,767,769,5,8,0,0,768,770,5,135,0,0,769,768,1,0,0,0,769,770,1,
        0,0,0,770,775,1,0,0,0,771,773,3,268,134,0,772,774,5,135,0,0,773,
        772,1,0,0,0,773,774,1,0,0,0,774,776,1,0,0,0,775,771,1,0,0,0,775,
        776,1,0,0,0,776,781,1,0,0,0,777,779,3,204,102,0,778,780,5,135,0,
        0,779,778,1,0,0,0,779,780,1,0,0,0,780,782,1,0,0,0,781,777,1,0,0,
        0,781,782,1,0,0,0,782,787,1,0,0,0,783,785,3,116,58,0,784,786,5,135,
        0,0,785,784,1,0,0,0,785,786,1,0,0,0,786,788,1,0,0,0,787,783,1,0,
        0,0,787,788,1,0,0,0,788,793,1,0,0,0,789,791,3,66,33,0,790,792,5,
        135,0,0,791,790,1,0,0,0,791,792,1,0,0,0,792,794,1,0,0,0,793,789,
        1,0,0,0,793,794,1,0,0,0,794,795,1,0,0,0,795,796,5,9,0,0,796,65,1,
        0,0,0,797,800,3,68,34,0,798,800,3,282,141,0,799,797,1,0,0,0,799,
        798,1,0,0,0,800,67,1,0,0,0,801,836,5,6,0,0,802,804,5,135,0,0,803,
        802,1,0,0,0,803,804,1,0,0,0,804,805,1,0,0,0,805,807,3,70,35,0,806,
        808,5,135,0,0,807,806,1,0,0,0,807,808,1,0,0,0,808,809,1,0,0,0,809,
        811,5,10,0,0,810,812,5,135,0,0,811,810,1,0,0,0,811,812,1,0,0,0,812,
        813,1,0,0,0,813,833,3,72,36,0,814,816,5,135,0,0,815,814,1,0,0,0,
        815,816,1,0,0,0,816,817,1,0,0,0,817,819,5,1,0,0,818,820,5,135,0,
        0,819,818,1,0,0,0,819,820,1,0,0,0,820,821,1,0,0,0,821,823,3,70,35,
        0,822,824,5,135,0,0,823,822,1,0,0,0,823,824,1,0,0,0,824,825,1,0,
        0,0,825,827,5,10,0,0,826,828,5,135,0,0,827,826,1,0,0,0,827,828,1,
        0,0,0,828,829,1,0,0,0,829,830,3,72,36,0,830,832,1,0,0,0,831,815,
        1,0,0,0,832,835,1,0,0,0,833,831,1,0,0,0,833,834,1,0,0,0,834,837,
        1,0,0,0,835,833,1,0,0,0,836,803,1,0,0,0,836,837,1,0,0,0,837,839,
        1,0,0,0,838,840,5,135,0,0,839,838,1,0,0,0,839,840,1,0,0,0,840,841,
        1,0,0,0,841,842,5,7,0,0,842,69,1,0,0,0,843,848,3,280,140,0,844,846,
        5,135,0,0,845,844,1,0,0,0,845,846,1,0,0,0,846,847,1,0,0,0,847,849,
        3,116,58,0,848,845,1,0,0,0,848,849,1,0,0,0,849,71,1,0,0,0,850,852,
        3,216,108,0,851,853,5,135,0,0,852,851,1,0,0,0,852,853,1,0,0,0,853,
        864,1,0,0,0,854,856,5,8,0,0,855,857,5,135,0,0,856,855,1,0,0,0,856,
        857,1,0,0,0,857,858,1,0,0,0,858,860,3,116,58,0,859,861,5,135,0,0,
        860,859,1,0,0,0,860,861,1,0,0,0,861,862,1,0,0,0,862,863,5,9,0,0,
        863,865,1,0,0,0,864,854,1,0,0,0,864,865,1,0,0,0,865,73,1,0,0,0,866,
        868,5,11,0,0,867,869,5,135,0,0,868,867,1,0,0,0,868,869,1,0,0,0,869,
        874,1,0,0,0,870,872,3,268,134,0,871,873,5,135,0,0,872,871,1,0,0,
        0,872,873,1,0,0,0,873,875,1,0,0,0,874,870,1,0,0,0,874,875,1,0,0,
        0,875,880,1,0,0,0,876,878,3,202,101,0,877,879,5,135,0,0,878,877,
        1,0,0,0,878,879,1,0,0,0,879,881,1,0,0,0,880,876,1,0,0,0,880,881,
        1,0,0,0,881,883,1,0,0,0,882,884,3,208,104,0,883,882,1,0,0,0,883,
        884,1,0,0,0,884,889,1,0,0,0,885,887,3,116,58,0,886,888,5,135,0,0,
        887,886,1,0,0,0,887,888,1,0,0,0,888,890,1,0,0,0,889,885,1,0,0,0,
        889,890,1,0,0,0,890,895,1,0,0,0,891,893,3,200,100,0,892,894,5,135,
        0,0,893,892,1,0,0,0,893,894,1,0,0,0,894,896,1,0,0,0,895,891,1,0,
        0,0,895,896,1,0,0,0,896,897,1,0,0,0,897,898,5,12,0,0,898,75,1,0,
        0,0,899,911,3,78,39,0,900,902,5,135,0,0,901,900,1,0,0,0,901,902,
        1,0,0,0,902,903,1,0,0,0,903,905,3,88,44,0,904,906,5,135,0,0,905,
        904,1,0,0,0,905,906,1,0,0,0,906,907,1,0,0,0,907,908,3,78,39,0,908,
        910,1,0,0,0,909,901,1,0,0,0,910,913,1,0,0,0,911,909,1,0,0,0,911,
        912,1,0,0,0,912,77,1,0,0,0,913,911,1,0,0,0,914,919,3,80,40,0,915,
        920,3,114,57,0,916,920,3,228,114,0,917,920,3,230,115,0,918,920,3,
        232,116,0,919,915,1,0,0,0,919,916,1,0,0,0,919,917,1,0,0,0,919,918,
        1,0,0,0,919,920,1,0,0,0,920,79,1,0,0,0,921,933,3,90,45,0,922,924,
        5,135,0,0,923,922,1,0,0,0,923,924,1,0,0,0,924,925,1,0,0,0,925,927,
        3,86,43,0,926,928,5,135,0,0,927,926,1,0,0,0,927,928,1,0,0,0,928,
        929,1,0,0,0,929,930,3,90,45,0,930,932,1,0,0,0,931,923,1,0,0,0,932,
        935,1,0,0,0,933,931,1,0,0,0,933,934,1,0,0,0,934,81,1,0,0,0,935,933,
        1,0,0,0,936,937,7,0,0,0,937,83,1,0,0,0,938,939,5,15,0,0,939,85,1,
        0,0,0,940,941,7,1,0,0,941,87,1,0,0,0,942,943,7,2,0,0,943,89,1,0,
        0,0,944,956,3,92,46,0,945,947,5,135,0,0,946,945,1,0,0,0,946,947,
        1,0,0,0,947,948,1,0,0,0,948,950,3,82,41,0,949,951,5,135,0,0,950,
        949,1,0,0,0,950,951,1,0,0,0,951,952,1,0,0,0,952,953,3,92,46,0,953,
        955,1,0,0,0,954,946,1,0,0,0,955,958,1,0,0,0,956,954,1,0,0,0,956,
        957,1,0,0,0,957,91,1,0,0,0,958,956,1,0,0,0,959,971,3,234,117,0,960,
        962,5,135,0,0,961,960,1,0,0,0,961,962,1,0,0,0,962,963,1,0,0,0,963,
        965,3,84,42,0,964,966,5,135,0,0,965,964,1,0,0,0,965,966,1,0,0,0,
        966,967,1,0,0,0,967,968,3,234,117,0,968,970,1,0,0,0,969,961,1,0,
        0,0,970,973,1,0,0,0,971,969,1,0,0,0,971,972,1,0,0,0,972,93,1,0,0,
        0,973,971,1,0,0,0,974,977,3,104,52,0,975,977,3,106,53,0,976,974,
        1,0,0,0,976,975,1,0,0,0,977,982,1,0,0,0,978,981,3,96,48,0,979,981,
        3,98,49,0,980,978,1,0,0,0,980,979,1,0,0,0,981,984,1,0,0,0,982,980,
        1,0,0,0,982,983,1,0,0,0,983,95,1,0,0,0,984,982,1,0,0,0,985,987,5,
        135,0,0,986,985,1,0,0,0,986,987,1,0,0,0,987,988,1,0,0,0,988,990,
        5,11,0,0,989,991,5,135,0,0,990,989,1,0,0,0,990,991,1,0,0,0,991,992,
        1,0,0,0,992,994,3,100,50,0,993,995,5,135,0,0,994,993,1,0,0,0,994,
        995,1,0,0,0,995,996,1,0,0,0,996,997,5,12,0,0,997,97,1,0,0,0,998,
        1000,5,135,0,0,999,998,1,0,0,0,999,1000,1,0,0,0,1000,1001,1,0,0,
        0,1001,1003,5,11,0,0,1002,1004,5,135,0,0,1003,1002,1,0,0,0,1003,
        1004,1,0,0,0,1004,1006,1,0,0,0,1005,1007,3,100,50,0,1006,1005,1,
        0,0,0,1006,1007,1,0,0,0,1007,1009,1,0,0,0,1008,1010,5,135,0,0,1009,
        1008,1,0,0,0,1009,1010,1,0,0,0,1010,1011,1,0,0,0,1011,1013,5,23,
        0,0,1012,1014,5,135,0,0,1013,1012,1,0,0,0,1013,1014,1,0,0,0,1014,
        1016,1,0,0,0,1015,1017,3,102,51,0,1016,1015,1,0,0,0,1016,1017,1,
        0,0,0,1017,1019,1,0,0,0,1018,1020,5,135,0,0,1019,1018,1,0,0,0,1019,
        1020,1,0,0,0,1020,1021,1,0,0,0,1021,1022,5,12,0,0,1022,99,1,0,0,
        0,1023,1024,3,216,108,0,1024,101,1,0,0,0,1025,1026,3,216,108,0,1026,
        103,1,0,0,0,1027,1034,3,238,119,0,1028,1030,5,135,0,0,1029,1028,
        1,0,0,0,1029,1030,1,0,0,0,1030,1031,1,0,0,0,1031,1033,3,236,118,
        0,1032,1029,1,0,0,0,1033,1036,1,0,0,0,1034,1032,1,0,0,0,1034,1035,
        1,0,0,0,1035,1044,1,0,0,0,1036,1034,1,0,0,0,1037,1039,5,135,0,0,
        1038,1037,1,0,0,0,1038,1039,1,0,0,0,1039,1042,1,0,0,0,1040,1043,
        3,204,102,0,1041,1043,3,116,58,0,1042,1040,1,0,0,0,1042,1041,1,0,
        0,0,1043,1045,1,0,0,0,1044,1038,1,0,0,0,1044,1045,1,0,0,0,1045,105,
        1,0,0,0,1046,1053,3,238,119,0,1047,1049,5,135,0,0,1048,1047,1,0,
        0,0,1048,1049,1,0,0,0,1049,1050,1,0,0,0,1050,1052,3,236,118,0,1051,
        1048,1,0,0,0,1052,1055,1,0,0,0,1053,1051,1,0,0,0,1053,1054,1,0,0,
        0,1054,1066,1,0,0,0,1055,1053,1,0,0,0,1056,1064,3,108,54,0,1057,
        1059,5,135,0,0,1058,1057,1,0,0,0,1058,1059,1,0,0,0,1059,1062,1,0,
        0,0,1060,1063,5,47,0,0,1061,1063,3,116,58,0,1062,1060,1,0,0,0,1062,
        1061,1,0,0,0,1063,1065,1,0,0,0,1064,1058,1,0,0,0,1064,1065,1,0,0,
        0,1065,1067,1,0,0,0,1066,1056,1,0,0,0,1066,1067,1,0,0,0,1067,1069,
        1,0,0,0,1068,1070,5,135,0,0,1069,1068,1,0,0,0,1069,1070,1,0,0,0,
        1070,1071,1,0,0,0,1071,1072,3,110,55,0,1072,107,1,0,0,0,1073,1075,
        5,135,0,0,1074,1073,1,0,0,0,1074,1075,1,0,0,0,1075,1076,1,0,0,0,
        1076,1078,5,4,0,0,1077,1079,5,135,0,0,1078,1077,1,0,0,0,1078,1079,
        1,0,0,0,1079,1080,1,0,0,0,1080,1081,3,280,140,0,1081,109,1,0,0,0,
        1082,1089,5,46,0,0,1083,1085,5,135,0,0,1084,1083,1,0,0,0,1084,1085,
        1,0,0,0,1085,1086,1,0,0,0,1086,1088,3,112,56,0,1087,1084,1,0,0,0,
        1088,1091,1,0,0,0,1089,1087,1,0,0,0,1089,1090,1,0,0,0,1090,111,1,
        0,0,0,1091,1089,1,0,0,0,1092,1094,5,4,0,0,1093,1095,5,135,0,0,1094,
        1093,1,0,0,0,1094,1095,1,0,0,0,1095,1096,1,0,0,0,1096,1097,3,280,
        140,0,1097,113,1,0,0,0,1098,1099,5,135,0,0,1099,1100,7,3,0,0,1100,
        1101,5,135,0,0,1101,1102,3,80,40,0,1102,115,1,0,0,0,1103,1105,5,
        46,0,0,1104,1106,5,135,0,0,1105,1104,1,0,0,0,1105,1106,1,0,0,0,1106,
        1107,1,0,0,0,1107,1117,5,8,0,0,1108,1110,5,135,0,0,1109,1108,1,0,
        0,0,1109,1110,1,0,0,0,1110,1111,1,0,0,0,1111,1113,3,118,59,0,1112,
        1114,5,135,0,0,1113,1112,1,0,0,0,1113,1114,1,0,0,0,1114,1115,1,0,
        0,0,1115,1116,5,1,0,0,1116,1118,1,0,0,0,1117,1109,1,0,0,0,1117,1118,
        1,0,0,0,1118,1120,1,0,0,0,1119,1121,5,135,0,0,1120,1119,1,0,0,0,
        1120,1121,1,0,0,0,1121,1124,1,0,0,0,1122,1125,3,118,59,0,1123,1125,
        5,48,0,0,1124,1122,1,0,0,0,1124,1123,1,0,0,0,1125,1127,1,0,0,0,1126,
        1128,5,135,0,0,1127,1126,1,0,0,0,1127,1128,1,0,0,0,1128,1129,1,0,
        0,0,1129,1130,5,9,0,0,1130,117,1,0,0,0,1131,1134,5,117,0,0,1132,
        1134,3,128,64,0,1133,1131,1,0,0,0,1133,1132,1,0,0,0,1134,119,1,0,
        0,0,1135,1137,3,256,128,0,1136,1138,5,135,0,0,1137,1136,1,0,0,0,
        1137,1138,1,0,0,0,1138,1139,1,0,0,0,1139,1141,5,8,0,0,1140,1142,
        5,135,0,0,1141,1140,1,0,0,0,1141,1142,1,0,0,0,1142,1147,1,0,0,0,
        1143,1145,5,73,0,0,1144,1146,5,135,0,0,1145,1144,1,0,0,0,1145,1146,
        1,0,0,0,1146,1148,1,0,0,0,1147,1143,1,0,0,0,1147,1148,1,0,0,0,1148,
        1166,1,0,0,0,1149,1151,3,122,61,0,1150,1152,5,135,0,0,1151,1150,
        1,0,0,0,1151,1152,1,0,0,0,1152,1163,1,0,0,0,1153,1155,5,1,0,0,1154,
        1156,5,135,0,0,1155,1154,1,0,0,0,1155,1156,1,0,0,0,1156,1157,1,0,
        0,0,1157,1159,3,122,61,0,1158,1160,5,135,0,0,1159,1158,1,0,0,0,1159,
        1160,1,0,0,0,1160,1162,1,0,0,0,1161,1153,1,0,0,0,1162,1165,1,0,0,
        0,1163,1161,1,0,0,0,1163,1164,1,0,0,0,1164,1167,1,0,0,0,1165,1163,
        1,0,0,0,1166,1149,1,0,0,0,1166,1167,1,0,0,0,1167,1168,1,0,0,0,1168,
        1169,5,9,0,0,1169,121,1,0,0,0,1170,1171,3,216,108,0,1171,123,1,0,
        0,0,1172,1174,5,11,0,0,1173,1175,5,135,0,0,1174,1173,1,0,0,0,1174,
        1175,1,0,0,0,1175,1193,1,0,0,0,1176,1178,3,126,63,0,1177,1179,5,
        135,0,0,1178,1177,1,0,0,0,1178,1179,1,0,0,0,1179,1190,1,0,0,0,1180,
        1182,5,1,0,0,1181,1183,5,135,0,0,1182,1181,1,0,0,0,1182,1183,1,0,
        0,0,1183,1184,1,0,0,0,1184,1186,3,126,63,0,1185,1187,5,135,0,0,1186,
        1185,1,0,0,0,1186,1187,1,0,0,0,1187,1189,1,0,0,0,1188,1180,1,0,0,
        0,1189,1192,1,0,0,0,1190,1188,1,0,0,0,1190,1191,1,0,0,0,1191,1194,
        1,0,0,0,1192,1190,1,0,0,0,1193,1176,1,0,0,0,1193,1194,1,0,0,0,1194,
        1195,1,0,0,0,1195,1196,5,12,0,0,1196,125,1,0,0,0,1197,1198,3,216,
        108,0,1198,127,1,0,0,0,1199,1201,5,6,0,0,1200,1202,5,135,0,0,1201,
        1200,1,0,0,0,1201,1202,1,0,0,0,1202,1214,1,0,0,0,1203,1211,3,130,
        65,0,1204,1206,5,1,0,0,1205,1207,5,135,0,0,1206,1205,1,0,0,0,1206,
        1207,1,0,0,0,1207,1208,1,0,0,0,1208,1210,3,130,65,0,1209,1204,1,
        0,0,0,1210,1213,1,0,0,0,1211,1209,1,0,0,0,1211,1212,1,0,0,0,1212,
        1215,1,0,0,0,1213,1211,1,0,0,0,1214,1203,1,0,0,0,1214,1215,1,0,0,
        0,1215,1216,1,0,0,0,1216,1217,5,7,0,0,1217,129,1,0,0,0,1218,1220,
        3,280,140,0,1219,1221,5,135,0,0,1220,1219,1,0,0,0,1220,1221,1,0,
        0,0,1221,1222,1,0,0,0,1222,1224,5,10,0,0,1223,1225,5,135,0,0,1224,
        1223,1,0,0,0,1224,1225,1,0,0,0,1225,1226,1,0,0,0,1226,1228,3,216,
        108,0,1227,1229,5,135,0,0,1228,1227,1,0,0,0,1228,1229,1,0,0,0,1229,
        131,1,0,0,0,1230,1231,7,4,0,0,1231,133,1,0,0,0,1232,1233,7,5,0,0,
        1233,135,1,0,0,0,1234,1236,5,135,0,0,1235,1234,1,0,0,0,1235,1236,
        1,0,0,0,1236,1237,1,0,0,0,1237,1242,3,138,69,0,1238,1240,5,135,0,
        0,1239,1238,1,0,0,0,1239,1240,1,0,0,0,1240,1241,1,0,0,0,1241,1243,
        5,24,0,0,1242,1239,1,0,0,0,1242,1243,1,0,0,0,1243,1245,1,0,0,0,1244,
        1246,5,135,0,0,1245,1244,1,0,0,0,1245,1246,1,0,0,0,1246,1247,1,0,
        0,0,1247,1248,5,0,0,1,1248,137,1,0,0,0,1249,1250,3,0,0,0,1250,139,
        1,0,0,0,1251,1258,3,144,72,0,1252,1254,5,135,0,0,1253,1252,1,0,0,
        0,1253,1254,1,0,0,0,1254,1255,1,0,0,0,1255,1257,3,142,71,0,1256,
        1253,1,0,0,0,1257,1260,1,0,0,0,1258,1256,1,0,0,0,1258,1259,1,0,0,
        0,1259,141,1,0,0,0,1260,1258,1,0,0,0,1261,1262,5,56,0,0,1262,1263,
        5,135,0,0,1263,1265,5,57,0,0,1264,1266,5,135,0,0,1265,1264,1,0,0,
        0,1265,1266,1,0,0,0,1266,1267,1,0,0,0,1267,1274,3,144,72,0,1268,
        1270,5,56,0,0,1269,1271,5,135,0,0,1270,1269,1,0,0,0,1270,1271,1,
        0,0,0,1271,1272,1,0,0,0,1272,1274,3,144,72,0,1273,1261,1,0,0,0,1273,
        1268,1,0,0,0,1274,143,1,0,0,0,1275,1278,3,146,73,0,1276,1278,3,2,
        1,0,1277,1275,1,0,0,0,1277,1276,1,0,0,0,1278,145,1,0,0,0,1279,1281,
        3,148,74,0,1280,1282,5,135,0,0,1281,1280,1,0,0,0,1281,1282,1,0,0,
        0,1282,1284,1,0,0,0,1283,1279,1,0,0,0,1284,1287,1,0,0,0,1285,1283,
        1,0,0,0,1285,1286,1,0,0,0,1286,1288,1,0,0,0,1287,1285,1,0,0,0,1288,
        1315,3,170,85,0,1289,1291,3,148,74,0,1290,1292,5,135,0,0,1291,1290,
        1,0,0,0,1291,1292,1,0,0,0,1292,1294,1,0,0,0,1293,1289,1,0,0,0,1294,
        1297,1,0,0,0,1295,1293,1,0,0,0,1295,1296,1,0,0,0,1296,1298,1,0,0,
        0,1297,1295,1,0,0,0,1298,1305,3,6,3,0,1299,1301,5,135,0,0,1300,1299,
        1,0,0,0,1300,1301,1,0,0,0,1301,1302,1,0,0,0,1302,1304,3,6,3,0,1303,
        1300,1,0,0,0,1304,1307,1,0,0,0,1305,1303,1,0,0,0,1305,1306,1,0,0,
        0,1306,1312,1,0,0,0,1307,1305,1,0,0,0,1308,1310,5,135,0,0,1309,1308,
        1,0,0,0,1309,1310,1,0,0,0,1310,1311,1,0,0,0,1311,1313,3,170,85,0,
        1312,1309,1,0,0,0,1312,1313,1,0,0,0,1313,1315,1,0,0,0,1314,1285,
        1,0,0,0,1314,1295,1,0,0,0,1315,147,1,0,0,0,1316,1320,3,4,2,0,1317,
        1320,3,150,75,0,1318,1320,3,38,19,0,1319,1316,1,0,0,0,1319,1317,
        1,0,0,0,1319,1318,1,0,0,0,1320,149,1,0,0,0,1321,1323,5,60,0,0,1322,
        1324,5,135,0,0,1323,1322,1,0,0,0,1323,1324,1,0,0,0,1324,1325,1,0,
        0,0,1325,1326,3,216,108,0,1326,1327,5,135,0,0,1327,1328,5,61,0,0,
        1328,1329,5,135,0,0,1329,1330,3,268,134,0,1330,151,1,0,0,0,1331,
        1333,5,62,0,0,1332,1334,5,135,0,0,1333,1332,1,0,0,0,1333,1334,1,
        0,0,0,1334,1335,1,0,0,0,1335,1340,3,58,29,0,1336,1337,5,135,0,0,
        1337,1339,3,154,77,0,1338,1336,1,0,0,0,1339,1342,1,0,0,0,1340,1338,
        1,0,0,0,1340,1341,1,0,0,0,1341,153,1,0,0,0,1342,1340,1,0,0,0,1343,
        1344,5,63,0,0,1344,1345,5,135,0,0,1345,1346,5,59,0,0,1346,1347,5,
        135,0,0,1347,1354,3,158,79,0,1348,1349,5,63,0,0,1349,1350,5,135,
        0,0,1350,1351,5,64,0,0,1351,1352,5,135,0,0,1352,1354,3,158,79,0,
        1353,1343,1,0,0,0,1353,1348,1,0,0,0,1354,155,1,0,0,0,1355,1357,5,
        64,0,0,1356,1358,5,135,0,0,1357,1356,1,0,0,0,1357,1358,1,0,0,0,1358,
        1359,1,0,0,0,1359,1360,3,188,94,0,1360,157,1,0,0,0,1361,1363,5,65,
        0,0,1362,1364,5,135,0,0,1363,1362,1,0,0,0,1363,1364,1,0,0,0,1364,
        1365,1,0,0,0,1365,1376,3,16,8,0,1366,1368,5,135,0,0,1367,1366,1,
        0,0,0,1367,1368,1,0,0,0,1368,1369,1,0,0,0,1369,1371,5,1,0,0,1370,
        1372,5,135,0,0,1371,1370,1,0,0,0,1371,1372,1,0,0,0,1372,1373,1,0,
        0,0,1373,1375,3,16,8,0,1374,1367,1,0,0,0,1375,1378,1,0,0,0,1376,
        1374,1,0,0,0,1376,1377,1,0,0,0,1377,159,1,0,0,0,1378,1376,1,0,0,
        0,1379,1380,5,66,0,0,1380,1382,5,135,0,0,1381,1379,1,0,0,0,1381,
        1382,1,0,0,0,1382,1383,1,0,0,0,1383,1385,5,67,0,0,1384,1386,5,135,
        0,0,1385,1384,1,0,0,0,1385,1386,1,0,0,0,1386,1387,1,0,0,0,1387,1398,
        3,216,108,0,1388,1390,5,135,0,0,1389,1388,1,0,0,0,1389,1390,1,0,
        0,0,1390,1391,1,0,0,0,1391,1393,5,1,0,0,1392,1394,5,135,0,0,1393,
        1392,1,0,0,0,1393,1394,1,0,0,0,1394,1395,1,0,0,0,1395,1397,3,216,
        108,0,1396,1389,1,0,0,0,1397,1400,1,0,0,0,1398,1396,1,0,0,0,1398,
        1399,1,0,0,0,1399,161,1,0,0,0,1400,1398,1,0,0,0,1401,1402,5,68,0,
        0,1402,1403,5,135,0,0,1403,1414,3,30,15,0,1404,1406,5,135,0,0,1405,
        1404,1,0,0,0,1405,1406,1,0,0,0,1406,1407,1,0,0,0,1407,1409,5,1,0,
        0,1408,1410,5,135,0,0,1409,1408,1,0,0,0,1409,1410,1,0,0,0,1410,1411,
        1,0,0,0,1411,1413,3,30,15,0,1412,1405,1,0,0,0,1413,1416,1,0,0,0,
        1414,1412,1,0,0,0,1414,1415,1,0,0,0,1415,163,1,0,0,0,1416,1414,1,
        0,0,0,1417,1428,3,166,83,0,1418,1420,5,135,0,0,1419,1418,1,0,0,0,
        1419,1420,1,0,0,0,1420,1421,1,0,0,0,1421,1423,5,1,0,0,1422,1424,
        5,135,0,0,1423,1422,1,0,0,0,1423,1424,1,0,0,0,1424,1425,1,0,0,0,
        1425,1427,3,166,83,0,1426,1419,1,0,0,0,1427,1430,1,0,0,0,1428,1426,
        1,0,0,0,1428,1429,1,0,0,0,1429,1435,1,0,0,0,1430,1428,1,0,0,0,1431,
        1433,5,135,0,0,1432,1431,1,0,0,0,1432,1433,1,0,0,0,1433,1434,1,0,
        0,0,1434,1436,3,186,93,0,1435,1432,1,0,0,0,1435,1436,1,0,0,0,1436,
        165,1,0,0,0,1437,1438,3,262,131,0,1438,1439,5,135,0,0,1439,1440,
        5,61,0,0,1440,1441,5,135,0,0,1441,1443,1,0,0,0,1442,1437,1,0,0,0,
        1442,1443,1,0,0,0,1443,1444,1,0,0,0,1444,1445,3,268,134,0,1445,167,
        1,0,0,0,1446,1447,5,71,0,0,1447,1452,3,172,86,0,1448,1450,5,135,
        0,0,1449,1448,1,0,0,0,1449,1450,1,0,0,0,1450,1451,1,0,0,0,1451,1453,
        3,186,93,0,1452,1449,1,0,0,0,1452,1453,1,0,0,0,1453,169,1,0,0,0,
        1454,1455,5,72,0,0,1455,1456,3,172,86,0,1456,171,1,0,0,0,1457,1459,
        5,135,0,0,1458,1457,1,0,0,0,1458,1459,1,0,0,0,1459,1460,1,0,0,0,
        1460,1462,5,73,0,0,1461,1458,1,0,0,0,1461,1462,1,0,0,0,1462,1463,
        1,0,0,0,1463,1464,5,135,0,0,1464,1467,3,174,87,0,1465,1466,5,135,
        0,0,1466,1468,3,178,89,0,1467,1465,1,0,0,0,1467,1468,1,0,0,0,1468,
        1471,1,0,0,0,1469,1470,5,135,0,0,1470,1472,3,180,90,0,1471,1469,
        1,0,0,0,1471,1472,1,0,0,0,1472,1475,1,0,0,0,1473,1474,5,135,0,0,
        1474,1476,3,182,91,0,1475,1473,1,0,0,0,1475,1476,1,0,0,0,1476,173,
        1,0,0,0,1477,1488,5,5,0,0,1478,1480,5,135,0,0,1479,1478,1,0,0,0,
        1479,1480,1,0,0,0,1480,1481,1,0,0,0,1481,1483,5,1,0,0,1482,1484,
        5,135,0,0,1483,1482,1,0,0,0,1483,1484,1,0,0,0,1484,1485,1,0,0,0,
        1485,1487,3,176,88,0,1486,1479,1,0,0,0,1487,1490,1,0,0,0,1488,1486,
        1,0,0,0,1488,1489,1,0,0,0,1489,1506,1,0,0,0,1490,1488,1,0,0,0,1491,
        1502,3,176,88,0,1492,1494,5,135,0,0,1493,1492,1,0,0,0,1493,1494,
        1,0,0,0,1494,1495,1,0,0,0,1495,1497,5,1,0,0,1496,1498,5,135,0,0,
        1497,1496,1,0,0,0,1497,1498,1,0,0,0,1498,1499,1,0,0,0,1499,1501,
        3,176,88,0,1500,1493,1,0,0,0,1501,1504,1,0,0,0,1502,1500,1,0,0,0,
        1502,1503,1,0,0,0,1503,1506,1,0,0,0,1504,1502,1,0,0,0,1505,1477,
        1,0,0,0,1505,1491,1,0,0,0,1506,175,1,0,0,0,1507,1508,3,216,108,0,
        1508,1509,5,135,0,0,1509,1510,5,61,0,0,1510,1511,5,135,0,0,1511,
        1512,3,268,134,0,1512,1515,1,0,0,0,1513,1515,3,216,108,0,1514,1507,
        1,0,0,0,1514,1513,1,0,0,0,1515,177,1,0,0,0,1516,1517,5,74,0,0,1517,
        1518,5,135,0,0,1518,1519,5,75,0,0,1519,1520,5,135,0,0,1520,1528,
        3,184,92,0,1521,1523,5,1,0,0,1522,1524,5,135,0,0,1523,1522,1,0,0,
        0,1523,1524,1,0,0,0,1524,1525,1,0,0,0,1525,1527,3,184,92,0,1526,
        1521,1,0,0,0,1527,1530,1,0,0,0,1528,1526,1,0,0,0,1528,1529,1,0,0,
        0,1529,179,1,0,0,0,1530,1528,1,0,0,0,1531,1532,5,76,0,0,1532,1533,
        5,135,0,0,1533,1534,3,216,108,0,1534,181,1,0,0,0,1535,1536,5,77,
        0,0,1536,1537,5,135,0,0,1537,1538,3,216,108,0,1538,183,1,0,0,0,1539,
        1544,3,216,108,0,1540,1542,5,135,0,0,1541,1540,1,0,0,0,1541,1542,
        1,0,0,0,1542,1543,1,0,0,0,1543,1545,7,6,0,0,1544,1541,1,0,0,0,1544,
        1545,1,0,0,0,1545,185,1,0,0,0,1546,1547,5,82,0,0,1547,1548,5,135,
        0,0,1548,1549,3,216,108,0,1549,187,1,0,0,0,1550,1561,3,58,29,0,1551,
        1553,5,135,0,0,1552,1551,1,0,0,0,1552,1553,1,0,0,0,1553,1554,1,0,
        0,0,1554,1556,5,1,0,0,1555,1557,5,135,0,0,1556,1555,1,0,0,0,1556,
        1557,1,0,0,0,1557,1558,1,0,0,0,1558,1560,3,58,29,0,1559,1552,1,0,
        0,0,1560,1563,1,0,0,0,1561,1559,1,0,0,0,1561,1562,1,0,0,0,1562,189,
        1,0,0,0,1563,1561,1,0,0,0,1564,1565,3,192,96,0,1565,191,1,0,0,0,
        1566,1573,3,64,32,0,1567,1569,5,135,0,0,1568,1567,1,0,0,0,1568,1569,
        1,0,0,0,1569,1570,1,0,0,0,1570,1572,3,196,98,0,1571,1568,1,0,0,0,
        1572,1575,1,0,0,0,1573,1571,1,0,0,0,1573,1574,1,0,0,0,1574,1581,
        1,0,0,0,1575,1573,1,0,0,0,1576,1577,5,8,0,0,1577,1578,3,192,96,0,
        1578,1579,5,9,0,0,1579,1581,1,0,0,0,1580,1566,1,0,0,0,1580,1576,
        1,0,0,0,1581,193,1,0,0,0,1582,1587,3,64,32,0,1583,1585,5,135,0,0,
        1584,1583,1,0,0,0,1584,1585,1,0,0,0,1585,1586,1,0,0,0,1586,1588,
        3,196,98,0,1587,1584,1,0,0,0,1588,1589,1,0,0,0,1589,1587,1,0,0,0,
        1589,1590,1,0,0,0,1590,195,1,0,0,0,1591,1593,3,198,99,0,1592,1594,
        5,135,0,0,1593,1592,1,0,0,0,1593,1594,1,0,0,0,1594,1595,1,0,0,0,
        1595,1596,3,64,32,0,1596,197,1,0,0,0,1597,1599,3,286,143,0,1598,
        1600,5,135,0,0,1599,1598,1,0,0,0,1599,1600,1,0,0,0,1600,1601,1,0,
        0,0,1601,1603,3,290,145,0,1602,1604,5,135,0,0,1603,1602,1,0,0,0,
        1603,1604,1,0,0,0,1604,1606,1,0,0,0,1605,1607,3,74,37,0,1606,1605,
        1,0,0,0,1606,1607,1,0,0,0,1607,1609,1,0,0,0,1608,1610,5,135,0,0,
        1609,1608,1,0,0,0,1609,1610,1,0,0,0,1610,1611,1,0,0,0,1611,1613,
        3,290,145,0,1612,1614,5,135,0,0,1613,1612,1,0,0,0,1613,1614,1,0,
        0,0,1614,1615,1,0,0,0,1615,1616,3,288,144,0,1616,1662,1,0,0,0,1617,
        1619,3,286,143,0,1618,1620,5,135,0,0,1619,1618,1,0,0,0,1619,1620,
        1,0,0,0,1620,1621,1,0,0,0,1621,1623,3,290,145,0,1622,1624,5,135,
        0,0,1623,1622,1,0,0,0,1623,1624,1,0,0,0,1624,1626,1,0,0,0,1625,1627,
        3,74,37,0,1626,1625,1,0,0,0,1626,1627,1,0,0,0,1627,1629,1,0,0,0,
        1628,1630,5,135,0,0,1629,1628,1,0,0,0,1629,1630,1,0,0,0,1630,1631,
        1,0,0,0,1631,1632,3,290,145,0,1632,1662,1,0,0,0,1633,1635,3,290,
        145,0,1634,1636,5,135,0,0,1635,1634,1,0,0,0,1635,1636,1,0,0,0,1636,
        1638,1,0,0,0,1637,1639,3,74,37,0,1638,1637,1,0,0,0,1638,1639,1,0,
        0,0,1639,1641,1,0,0,0,1640,1642,5,135,0,0,1641,1640,1,0,0,0,1641,
        1642,1,0,0,0,1642,1643,1,0,0,0,1643,1645,3,290,145,0,1644,1646,5,
        135,0,0,1645,1644,1,0,0,0,1645,1646,1,0,0,0,1646,1647,1,0,0,0,1647,
        1648,3,288,144,0,1648,1662,1,0,0,0,1649,1651,3,290,145,0,1650,1652,
        5,135,0,0,1651,1650,1,0,0,0,1651,1652,1,0,0,0,1652,1654,1,0,0,0,
        1653,1655,3,74,37,0,1654,1653,1,0,0,0,1654,1655,1,0,0,0,1655,1657,
        1,0,0,0,1656,1658,5,135,0,0,1657,1656,1,0,0,0,1657,1658,1,0,0,0,
        1658,1659,1,0,0,0,1659,1660,3,290,145,0,1660,1662,1,0,0,0,1661,1597,
        1,0,0,0,1661,1617,1,0,0,0,1661,1633,1,0,0,0,1661,1649,1,0,0,0,1662,
        199,1,0,0,0,1663,1666,3,128,64,0,1664,1666,3,282,141,0,1665,1663,
        1,0,0,0,1665,1664,1,0,0,0,1666,201,1,0,0,0,1667,1669,5,10,0,0,1668,
        1670,5,135,0,0,1669,1668,1,0,0,0,1669,1670,1,0,0,0,1670,1671,1,0,
        0,0,1671,1685,3,212,106,0,1672,1674,5,135,0,0,1673,1672,1,0,0,0,
        1673,1674,1,0,0,0,1674,1675,1,0,0,0,1675,1677,5,25,0,0,1676,1678,
        5,10,0,0,1677,1676,1,0,0,0,1677,1678,1,0,0,0,1678,1680,1,0,0,0,1679,
        1681,5,135,0,0,1680,1679,1,0,0,0,1680,1681,1,0,0,0,1681,1682,1,0,
        0,0,1682,1684,3,212,106,0,1683,1673,1,0,0,0,1684,1687,1,0,0,0,1685,
        1683,1,0,0,0,1685,1686,1,0,0,0,1686,203,1,0,0,0,1687,1685,1,0,0,
        0,1688,1695,3,206,103,0,1689,1691,5,135,0,0,1690,1689,1,0,0,0,1690,
        1691,1,0,0,0,1691,1692,1,0,0,0,1692,1694,3,206,103,0,1693,1690,1,
        0,0,0,1694,1697,1,0,0,0,1695,1693,1,0,0,0,1695,1696,1,0,0,0,1696,
        205,1,0,0,0,1697,1695,1,0,0,0,1698,1700,5,10,0,0,1699,1701,5,135,
        0,0,1700,1699,1,0,0,0,1700,1701,1,0,0,0,1701,1702,1,0,0,0,1702,1703,
        3,210,105,0,1703,207,1,0,0,0,1704,1706,5,5,0,0,1705,1707,5,135,0,
        0,1706,1705,1,0,0,0,1706,1707,1,0,0,0,1707,1712,1,0,0,0,1708,1710,
        3,276,138,0,1709,1711,5,135,0,0,1710,1709,1,0,0,0,1710,1711,1,0,
        0,0,1711,1713,1,0,0,0,1712,1708,1,0,0,0,1712,1713,1,0,0,0,1713,1724,
        1,0,0,0,1714,1716,5,23,0,0,1715,1717,5,135,0,0,1716,1715,1,0,0,0,
        1716,1717,1,0,0,0,1717,1722,1,0,0,0,1718,1720,3,276,138,0,1719,1721,
        5,135,0,0,1720,1719,1,0,0,0,1720,1721,1,0,0,0,1721,1723,1,0,0,0,
        1722,1718,1,0,0,0,1722,1723,1,0,0,0,1723,1725,1,0,0,0,1724,1714,
        1,0,0,0,1724,1725,1,0,0,0,1725,209,1,0,0,0,1726,1727,3,284,142,0,
        1727,211,1,0,0,0,1728,1729,3,284,142,0,1729,213,1,0,0,0,1730,1735,
        3,238,119,0,1731,1733,5,135,0,0,1732,1731,1,0,0,0,1732,1733,1,0,
        0,0,1733,1734,1,0,0,0,1734,1736,3,236,118,0,1735,1732,1,0,0,0,1736,
        1737,1,0,0,0,1737,1735,1,0,0,0,1737,1738,1,0,0,0,1738,215,1,0,0,
        0,1739,1740,3,218,109,0,1740,217,1,0,0,0,1741,1748,3,220,110,0,1742,
        1743,5,135,0,0,1743,1744,5,83,0,0,1744,1745,5,135,0,0,1745,1747,
        3,220,110,0,1746,1742,1,0,0,0,1747,1750,1,0,0,0,1748,1746,1,0,0,
        0,1748,1749,1,0,0,0,1749,219,1,0,0,0,1750,1748,1,0,0,0,1751,1758,
        3,222,111,0,1752,1753,5,135,0,0,1753,1754,5,84,0,0,1754,1755,5,135,
        0,0,1755,1757,3,222,111,0,1756,1752,1,0,0,0,1757,1760,1,0,0,0,1758,
        1756,1,0,0,0,1758,1759,1,0,0,0,1759,221,1,0,0,0,1760,1758,1,0,0,
        0,1761,1768,3,224,112,0,1762,1763,5,135,0,0,1763,1764,5,85,0,0,1764,
        1765,5,135,0,0,1765,1767,3,224,112,0,1766,1762,1,0,0,0,1767,1770,
        1,0,0,0,1768,1766,1,0,0,0,1768,1769,1,0,0,0,1769,223,1,0,0,0,1770,
        1768,1,0,0,0,1771,1773,5,86,0,0,1772,1774,5,135,0,0,1773,1772,1,
        0,0,0,1773,1774,1,0,0,0,1774,1776,1,0,0,0,1775,1771,1,0,0,0,1776,
        1779,1,0,0,0,1777,1775,1,0,0,0,1777,1778,1,0,0,0,1778,1780,1,0,0,
        0,1779,1777,1,0,0,0,1780,1781,3,76,38,0,1781,225,1,0,0,0,1782,1784,
        5,2,0,0,1783,1785,5,135,0,0,1784,1783,1,0,0,0,1784,1785,1,0,0,0,
        1785,1786,1,0,0,0,1786,1813,3,78,39,0,1787,1789,5,18,0,0,1788,1790,
        5,135,0,0,1789,1788,1,0,0,0,1789,1790,1,0,0,0,1790,1791,1,0,0,0,
        1791,1813,3,78,39,0,1792,1794,5,19,0,0,1793,1795,5,135,0,0,1794,
        1793,1,0,0,0,1794,1795,1,0,0,0,1795,1796,1,0,0,0,1796,1813,3,78,
        39,0,1797,1799,5,21,0,0,1798,1800,5,135,0,0,1799,1798,1,0,0,0,1799,
        1800,1,0,0,0,1800,1801,1,0,0,0,1801,1813,3,78,39,0,1802,1804,5,20,
        0,0,1803,1805,5,135,0,0,1804,1803,1,0,0,0,1804,1805,1,0,0,0,1805,
        1806,1,0,0,0,1806,1813,3,78,39,0,1807,1809,5,22,0,0,1808,1810,5,
        135,0,0,1809,1808,1,0,0,0,1809,1810,1,0,0,0,1810,1811,1,0,0,0,1811,
        1813,3,78,39,0,1812,1782,1,0,0,0,1812,1787,1,0,0,0,1812,1792,1,0,
        0,0,1812,1797,1,0,0,0,1812,1802,1,0,0,0,1812,1807,1,0,0,0,1813,227,
        1,0,0,0,1814,1815,5,135,0,0,1815,1816,5,87,0,0,1816,1817,5,135,0,
        0,1817,1825,5,71,0,0,1818,1819,5,135,0,0,1819,1820,5,88,0,0,1820,
        1821,5,135,0,0,1821,1825,5,71,0,0,1822,1823,5,135,0,0,1823,1825,
        5,89,0,0,1824,1814,1,0,0,0,1824,1818,1,0,0,0,1824,1822,1,0,0,0,1825,
        1827,1,0,0,0,1826,1828,5,135,0,0,1827,1826,1,0,0,0,1827,1828,1,0,
        0,0,1828,1829,1,0,0,0,1829,1830,3,80,40,0,1830,229,1,0,0,0,1831,
        1832,5,135,0,0,1832,1834,5,90,0,0,1833,1835,5,135,0,0,1834,1833,
        1,0,0,0,1834,1835,1,0,0,0,1835,1836,1,0,0,0,1836,1837,3,80,40,0,
        1837,231,1,0,0,0,1838,1839,5,135,0,0,1839,1840,5,91,0,0,1840,1841,
        5,135,0,0,1841,1849,5,92,0,0,1842,1843,5,135,0,0,1843,1844,5,91,
        0,0,1844,1845,5,135,0,0,1845,1846,5,86,0,0,1846,1847,5,135,0,0,1847,
        1849,5,92,0,0,1848,1838,1,0,0,0,1848,1842,1,0,0,0,1849,233,1,0,0,
        0,1850,1857,3,94,47,0,1851,1853,7,1,0,0,1852,1854,5,135,0,0,1853,
        1852,1,0,0,0,1853,1854,1,0,0,0,1854,1855,1,0,0,0,1855,1857,3,94,
        47,0,1856,1850,1,0,0,0,1856,1851,1,0,0,0,1857,235,1,0,0,0,1858,1860,
        5,4,0,0,1859,1861,5,135,0,0,1860,1859,1,0,0,0,1860,1861,1,0,0,0,
        1861,1862,1,0,0,0,1862,1863,3,280,140,0,1863,237,1,0,0,0,1864,1889,
        3,270,135,0,1865,1889,3,282,141,0,1866,1889,3,240,120,0,1867,1869,
        5,93,0,0,1868,1870,5,135,0,0,1869,1868,1,0,0,0,1869,1870,1,0,0,0,
        1870,1871,1,0,0,0,1871,1873,5,8,0,0,1872,1874,5,135,0,0,1873,1872,
        1,0,0,0,1873,1874,1,0,0,0,1874,1875,1,0,0,0,1875,1877,5,5,0,0,1876,
        1878,5,135,0,0,1877,1876,1,0,0,0,1877,1878,1,0,0,0,1878,1879,1,0,
        0,0,1879,1889,5,9,0,0,1880,1889,3,244,122,0,1881,1889,3,246,123,
        0,1882,1889,3,248,124,0,1883,1889,3,250,125,0,1884,1889,3,252,126,
        0,1885,1889,3,120,60,0,1886,1889,3,50,25,0,1887,1889,3,268,134,0,
        1888,1864,1,0,0,0,1888,1865,1,0,0,0,1888,1866,1,0,0,0,1888,1867,
        1,0,0,0,1888,1880,1,0,0,0,1888,1881,1,0,0,0,1888,1882,1,0,0,0,1888,
        1883,1,0,0,0,1888,1884,1,0,0,0,1888,1885,1,0,0,0,1888,1886,1,0,0,
        0,1888,1887,1,0,0,0,1889,239,1,0,0,0,1890,1895,5,94,0,0,1891,1893,
        5,135,0,0,1892,1891,1,0,0,0,1892,1893,1,0,0,0,1893,1894,1,0,0,0,
        1894,1896,3,242,121,0,1895,1892,1,0,0,0,1896,1897,1,0,0,0,1897,1895,
        1,0,0,0,1897,1898,1,0,0,0,1898,1913,1,0,0,0,1899,1901,5,94,0,0,1900,
        1902,5,135,0,0,1901,1900,1,0,0,0,1901,1902,1,0,0,0,1902,1903,1,0,
        0,0,1903,1908,3,216,108,0,1904,1906,5,135,0,0,1905,1904,1,0,0,0,
        1905,1906,1,0,0,0,1906,1907,1,0,0,0,1907,1909,3,242,121,0,1908,1905,
        1,0,0,0,1909,1910,1,0,0,0,1910,1908,1,0,0,0,1910,1911,1,0,0,0,1911,
        1913,1,0,0,0,1912,1890,1,0,0,0,1912,1899,1,0,0,0,1913,1922,1,0,0,
        0,1914,1916,5,135,0,0,1915,1914,1,0,0,0,1915,1916,1,0,0,0,1916,1917,
        1,0,0,0,1917,1919,5,95,0,0,1918,1920,5,135,0,0,1919,1918,1,0,0,0,
        1919,1920,1,0,0,0,1920,1921,1,0,0,0,1921,1923,3,216,108,0,1922,1915,
        1,0,0,0,1922,1923,1,0,0,0,1923,1925,1,0,0,0,1924,1926,5,135,0,0,
        1925,1924,1,0,0,0,1925,1926,1,0,0,0,1926,1927,1,0,0,0,1927,1928,
        5,96,0,0,1928,241,1,0,0,0,1929,1931,5,97,0,0,1930,1932,5,135,0,0,
        1931,1930,1,0,0,0,1931,1932,1,0,0,0,1932,1933,1,0,0,0,1933,1935,
        3,216,108,0,1934,1936,5,135,0,0,1935,1934,1,0,0,0,1935,1936,1,0,
        0,0,1936,1937,1,0,0,0,1937,1939,5,98,0,0,1938,1940,5,135,0,0,1939,
        1938,1,0,0,0,1939,1940,1,0,0,0,1940,1941,1,0,0,0,1941,1942,3,216,
        108,0,1942,243,1,0,0,0,1943,1945,5,11,0,0,1944,1946,5,135,0,0,1945,
        1944,1,0,0,0,1945,1946,1,0,0,0,1946,1947,1,0,0,0,1947,1956,3,52,
        26,0,1948,1950,5,135,0,0,1949,1948,1,0,0,0,1949,1950,1,0,0,0,1950,
        1951,1,0,0,0,1951,1953,5,25,0,0,1952,1954,5,135,0,0,1953,1952,1,
        0,0,0,1953,1954,1,0,0,0,1954,1955,1,0,0,0,1955,1957,3,216,108,0,
        1956,1949,1,0,0,0,1956,1957,1,0,0,0,1957,1959,1,0,0,0,1958,1960,
        5,135,0,0,1959,1958,1,0,0,0,1959,1960,1,0,0,0,1960,1961,1,0,0,0,
        1961,1962,5,12,0,0,1962,245,1,0,0,0,1963,1965,5,11,0,0,1964,1966,
        5,135,0,0,1965,1964,1,0,0,0,1965,1966,1,0,0,0,1966,1975,1,0,0,0,
        1967,1969,3,268,134,0,1968,1970,5,135,0,0,1969,1968,1,0,0,0,1969,
        1970,1,0,0,0,1970,1971,1,0,0,0,1971,1973,5,2,0,0,1972,1974,5,135,
        0,0,1973,1972,1,0,0,0,1973,1974,1,0,0,0,1974,1976,1,0,0,0,1975,1967,
        1,0,0,0,1975,1976,1,0,0,0,1976,1977,1,0,0,0,1977,1979,3,194,97,0,
        1978,1980,5,135,0,0,1979,1978,1,0,0,0,1979,1980,1,0,0,0,1980,1985,
        1,0,0,0,1981,1983,3,186,93,0,1982,1984,5,135,0,0,1983,1982,1,0,0,
        0,1983,1984,1,0,0,0,1984,1986,1,0,0,0,1985,1981,1,0,0,0,1985,1986,
        1,0,0,0,1986,1987,1,0,0,0,1987,1989,5,25,0,0,1988,1990,5,135,0,0,
        1989,1988,1,0,0,0,1989,1990,1,0,0,0,1990,1991,1,0,0,0,1991,1993,
        3,216,108,0,1992,1994,5,135,0,0,1993,1992,1,0,0,0,1993,1994,1,0,
        0,0,1994,1995,1,0,0,0,1995,1996,5,12,0,0,1996,247,1,0,0,0,1997,1999,
        5,57,0,0,1998,2000,5,135,0,0,1999,1998,1,0,0,0,1999,2000,1,0,0,0,
        2000,2001,1,0,0,0,2001,2003,5,8,0,0,2002,2004,5,135,0,0,2003,2002,
        1,0,0,0,2003,2004,1,0,0,0,2004,2005,1,0,0,0,2005,2007,3,52,26,0,
        2006,2008,5,135,0,0,2007,2006,1,0,0,0,2007,2008,1,0,0,0,2008,2009,
        1,0,0,0,2009,2010,5,9,0,0,2010,2054,1,0,0,0,2011,2013,5,99,0,0,2012,
        2014,5,135,0,0,2013,2012,1,0,0,0,2013,2014,1,0,0,0,2014,2015,1,0,
        0,0,2015,2017,5,8,0,0,2016,2018,5,135,0,0,2017,2016,1,0,0,0,2017,
        2018,1,0,0,0,2018,2019,1,0,0,0,2019,2021,3,52,26,0,2020,2022,5,135,
        0,0,2021,2020,1,0,0,0,2021,2022,1,0,0,0,2022,2023,1,0,0,0,2023,2024,
        5,9,0,0,2024,2054,1,0,0,0,2025,2027,5,100,0,0,2026,2028,5,135,0,
        0,2027,2026,1,0,0,0,2027,2028,1,0,0,0,2028,2029,1,0,0,0,2029,2031,
        5,8,0,0,2030,2032,5,135,0,0,2031,2030,1,0,0,0,2031,2032,1,0,0,0,
        2032,2033,1,0,0,0,2033,2035,3,52,26,0,2034,2036,5,135,0,0,2035,2034,
        1,0,0,0,2035,2036,1,0,0,0,2036,2037,1,0,0,0,2037,2038,5,9,0,0,2038,
        2054,1,0,0,0,2039,2041,5,101,0,0,2040,2042,5,135,0,0,2041,2040,1,
        0,0,0,2041,2042,1,0,0,0,2042,2043,1,0,0,0,2043,2045,5,8,0,0,2044,
        2046,5,135,0,0,2045,2044,1,0,0,0,2045,2046,1,0,0,0,2046,2047,1,0,
        0,0,2047,2049,3,52,26,0,2048,2050,5,135,0,0,2049,2048,1,0,0,0,2049,
        2050,1,0,0,0,2050,2051,1,0,0,0,2051,2052,5,9,0,0,2052,2054,1,0,0,
        0,2053,1997,1,0,0,0,2053,2011,1,0,0,0,2053,2025,1,0,0,0,2053,2039,
        1,0,0,0,2054,249,1,0,0,0,2055,2056,3,194,97,0,2056,251,1,0,0,0,2057,
        2059,5,8,0,0,2058,2060,5,135,0,0,2059,2058,1,0,0,0,2059,2060,1,0,
        0,0,2060,2061,1,0,0,0,2061,2063,3,216,108,0,2062,2064,5,135,0,0,
        2063,2062,1,0,0,0,2063,2064,1,0,0,0,2064,2065,1,0,0,0,2065,2066,
        5,9,0,0,2066,253,1,0,0,0,2067,2068,3,268,134,0,2068,2069,5,135,0,
        0,2069,2070,5,90,0,0,2070,2071,5,135,0,0,2071,2072,3,216,108,0,2072,
        255,1,0,0,0,2073,2074,3,266,133,0,2074,2075,3,132,66,0,2075,257,
        1,0,0,0,2076,2078,3,264,132,0,2077,2079,5,135,0,0,2078,2077,1,0,
        0,0,2078,2079,1,0,0,0,2079,2080,1,0,0,0,2080,2082,5,8,0,0,2081,2083,
        5,135,0,0,2082,2081,1,0,0,0,2082,2083,1,0,0,0,2083,2101,1,0,0,0,
        2084,2086,3,216,108,0,2085,2087,5,135,0,0,2086,2085,1,0,0,0,2086,
        2087,1,0,0,0,2087,2098,1,0,0,0,2088,2090,5,1,0,0,2089,2091,5,135,
        0,0,2090,2089,1,0,0,0,2090,2091,1,0,0,0,2091,2092,1,0,0,0,2092,2094,
        3,216,108,0,2093,2095,5,135,0,0,2094,2093,1,0,0,0,2094,2095,1,0,
        0,0,2095,2097,1,0,0,0,2096,2088,1,0,0,0,2097,2100,1,0,0,0,2098,2096,
        1,0,0,0,2098,2099,1,0,0,0,2099,2102,1,0,0,0,2100,2098,1,0,0,0,2101,
        2084,1,0,0,0,2101,2102,1,0,0,0,2102,2103,1,0,0,0,2103,2104,5,9,0,
        0,2104,259,1,0,0,0,2105,2106,3,264,132,0,2106,261,1,0,0,0,2107,2108,
        3,132,66,0,2108,263,1,0,0,0,2109,2110,3,266,133,0,2110,2111,3,132,
        66,0,2111,265,1,0,0,0,2112,2113,3,132,66,0,2113,2114,5,4,0,0,2114,
        2116,1,0,0,0,2115,2112,1,0,0,0,2116,2119,1,0,0,0,2117,2115,1,0,0,
        0,2117,2118,1,0,0,0,2118,267,1,0,0,0,2119,2117,1,0,0,0,2120,2121,
        3,132,66,0,2121,269,1,0,0,0,2122,2129,3,272,136,0,2123,2129,5,92,
        0,0,2124,2129,3,274,137,0,2125,2129,5,117,0,0,2126,2129,3,124,62,
        0,2127,2129,3,128,64,0,2128,2122,1,0,0,0,2128,2123,1,0,0,0,2128,
        2124,1,0,0,0,2128,2125,1,0,0,0,2128,2126,1,0,0,0,2128,2127,1,0,0,
        0,2129,271,1,0,0,0,2130,2131,7,7,0,0,2131,273,1,0,0,0,2132,2135,
        3,278,139,0,2133,2135,3,276,138,0,2134,2132,1,0,0,0,2134,2133,1,
        0,0,0,2135,275,1,0,0,0,2136,2137,7,8,0,0,2137,277,1,0,0,0,2138,2139,
        7,9,0,0,2139,279,1,0,0,0,2140,2141,3,284,142,0,2141,281,1,0,0,0,
        2142,2145,5,26,0,0,2143,2146,3,132,66,0,2144,2146,5,106,0,0,2145,
        2143,1,0,0,0,2145,2144,1,0,0,0,2146,283,1,0,0,0,2147,2150,3,132,
        66,0,2148,2150,3,134,67,0,2149,2147,1,0,0,0,2149,2148,1,0,0,0,2150,
        285,1,0,0,0,2151,2152,7,10,0,0,2152,287,1,0,0,0,2153,2154,7,11,0,
        0,2154,289,1,0,0,0,2155,2156,7,12,0,0,2156,291,1,0,0,0,402,295,300,
        306,310,314,318,320,323,326,334,338,342,345,349,356,360,363,367,
        371,375,380,384,387,391,395,399,404,408,411,415,418,421,425,431,
        435,441,445,451,457,463,466,469,473,479,482,485,489,493,497,501,
        507,510,514,521,525,529,533,537,541,546,550,554,556,561,565,567,
        569,575,579,585,591,597,602,608,611,617,619,623,627,632,636,639,
        646,650,654,659,663,668,673,676,680,684,689,692,694,697,703,706,
        710,716,722,726,732,736,741,745,749,753,759,763,769,773,775,779,
        781,785,787,791,793,799,803,807,811,815,819,823,827,833,836,839,
        845,848,852,856,860,864,868,872,874,878,880,883,887,889,893,895,
        901,905,911,919,923,927,933,946,950,956,961,965,971,976,980,982,
        986,990,994,999,1003,1006,1009,1013,1016,1019,1029,1034,1038,1042,
        1044,1048,1053,1058,1062,1064,1066,1069,1074,1078,1084,1089,1094,
        1105,1109,1113,1117,1120,1124,1127,1133,1137,1141,1145,1147,1151,
        1155,1159,1163,1166,1174,1178,1182,1186,1190,1193,1201,1206,1211,
        1214,1220,1224,1228,1235,1239,1242,1245,1253,1258,1265,1270,1273,
        1277,1281,1285,1291,1295,1300,1305,1309,1312,1314,1319,1323,1333,
        1340,1353,1357,1363,1367,1371,1376,1381,1385,1389,1393,1398,1405,
        1409,1414,1419,1423,1428,1432,1435,1442,1449,1452,1458,1461,1467,
        1471,1475,1479,1483,1488,1493,1497,1502,1505,1514,1523,1528,1541,
        1544,1552,1556,1561,1568,1573,1580,1584,1589,1593,1599,1603,1606,
        1609,1613,1619,1623,1626,1629,1635,1638,1641,1645,1651,1654,1657,
        1661,1665,1669,1673,1677,1680,1685,1690,1695,1700,1706,1710,1712,
        1716,1720,1722,1724,1732,1737,1748,1758,1768,1773,1777,1784,1789,
        1794,1799,1804,1809,1812,1824,1827,1834,1848,1853,1856,1860,1869,
        1873,1877,1888,1892,1897,1901,1905,1910,1912,1915,1919,1922,1925,
        1931,1935,1939,1945,1949,1953,1956,1959,1965,1969,1973,1975,1979,
        1983,1985,1989,1993,1999,2003,2007,2013,2017,2021,2027,2031,2035,
        2041,2045,2049,2053,2059,2063,2078,2082,2086,2090,2094,2098,2101,
        2117,2128,2134,2145,2149
    ]

class s_cypherParser ( Parser ):

    grammarFileName = "s_cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "','", "'='", "'+='", "'.'", "'*'", "'{'", 
                     "'}'", "'('", "')'", "':'", "'['", "']'", "'/'", "'%'", 
                     "'^'", "'+'", "'-'", "'<>'", "'<'", "'<='", "'>'", 
                     "'>='", "'..'", "';'", "'|'", "'$'", "'\\u27E8'", "'\\u3008'", 
                     "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
                     "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", 
                     "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", 
                     "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
                     "'\\uFF0D'", "<INVALID>", "<INVALID>", "'NOW'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "AtT", "PoundValue", "NOW", 
                      "AT_TIME", "SNAPSHOT", "BETWEEN", "SCOPE", "STALE", 
                      "DURING", "OVERLAPS", "UNION", "ALL", "OPTIONAL", 
                      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", 
                      "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", 
                      "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", 
                      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
                      "WHERE", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", 
                      "CONTAINS", "IN", "IS", "NULL", "COUNT", "CASE", "ELSE", 
                      "END", "WHEN", "THEN", "ANY", "NONE", "SINGLE", "EXISTS", 
                      "TRUE", "FALSE", "HexInteger", "DecimalInteger", "OctalInteger", 
                      "HexLetter", "HexDigit", "Digit", "NonZeroDigit", 
                      "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", 
                      "RegularDecimalReal", "StringLiteral", "EscapedChar", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Query = 0
    RULE_oC_MultiPartQuery = 1
    RULE_oC_Match = 2
    RULE_oC_UpdatingClause = 3
    RULE_s_Create = 4
    RULE_s_Merge = 5
    RULE_s_Set = 6
    RULE_s_Stale = 7
    RULE_oC_SetItem = 8
    RULE_s_SetPropertyItemOne = 9
    RULE_s_SetPropertyItemTwo = 10
    RULE_s_SetValueItem = 11
    RULE_s_StaleItem = 12
    RULE_s_Delete = 13
    RULE_s_DeleteItem = 14
    RULE_oC_RemoveItem = 15
    RULE_s_AtTime = 16
    RULE_s_Between = 17
    RULE_s_TimeWindowLimit = 18
    RULE_oC_InQueryCall = 19
    RULE_oC_StandaloneCall = 20
    RULE_s_YieldItems = 21
    RULE_s_YieldItem = 22
    RULE_s_WithPartQuery = 23
    RULE_s_With = 24
    RULE_oC_ExistentialSubquery = 25
    RULE_oC_FilterExpression = 26
    RULE_s_Snapshot = 27
    RULE_s_Scope = 28
    RULE_oC_PatternPart = 29
    RULE_s_PathFunctionPattern = 30
    RULE_s_SinglePathPattern = 31
    RULE_oC_NodePattern = 32
    RULE_s_Properties = 33
    RULE_s_PropertiesPattern = 34
    RULE_s_PropertyNode = 35
    RULE_s_ValueNode = 36
    RULE_oC_RelationshipDetail = 37
    RULE_oC_ComparisonExpression = 38
    RULE_oC_StringListNullPredicateExpression = 39
    RULE_oC_AddOrSubtractExpression = 40
    RULE_s_MultiplyDivideModuloOperator = 41
    RULE_s_PowerOfOperator = 42
    RULE_s_AddOrSubtractOperator = 43
    RULE_s_ComparisonOperator = 44
    RULE_oC_MultiplyDivideModuloExpression = 45
    RULE_oC_PowerOfExpression = 46
    RULE_oC_ListOperatorExpression = 47
    RULE_s_SingleIndexExpression = 48
    RULE_s_DoubleIndexExpression = 49
    RULE_s_LeftExpression = 50
    RULE_s_RightExpression = 51
    RULE_oC_PropertyOrLabelsExpression = 52
    RULE_s_AtTExpression = 53
    RULE_s_PropertyLookupName = 54
    RULE_s_PropertyLookupTime = 55
    RULE_s_TimePropertyItem = 56
    RULE_s_TimePredicateExpression = 57
    RULE_s_AtTElement = 58
    RULE_s_TimePointLiteral = 59
    RULE_oC_FunctionInvocation = 60
    RULE_s_FunctionInvocationExpression = 61
    RULE_oC_ListLiteral = 62
    RULE_s_ListLiteralExpression = 63
    RULE_oC_MapLiteral = 64
    RULE_s_MapKeyValue = 65
    RULE_oC_SymbolicName = 66
    RULE_oC_ReservedWord = 67
    RULE_oC_Cypher = 68
    RULE_oC_Statement = 69
    RULE_oC_RegularQuery = 70
    RULE_oC_Union = 71
    RULE_oC_SingleQuery = 72
    RULE_oC_SinglePartQuery = 73
    RULE_oC_ReadingClause = 74
    RULE_oC_Unwind = 75
    RULE_oC_Merge = 76
    RULE_oC_MergeAction = 77
    RULE_oC_Create = 78
    RULE_oC_Set = 79
    RULE_oC_Delete = 80
    RULE_oC_Remove = 81
    RULE_oC_YieldItems = 82
    RULE_oC_YieldItem = 83
    RULE_oC_With = 84
    RULE_oC_Return = 85
    RULE_oC_ProjectionBody = 86
    RULE_oC_ProjectionItems = 87
    RULE_oC_ProjectionItem = 88
    RULE_oC_Order = 89
    RULE_oC_Skip = 90
    RULE_oC_Limit = 91
    RULE_oC_SortItem = 92
    RULE_oC_Where = 93
    RULE_oC_Pattern = 94
    RULE_oC_AnonymousPatternPart = 95
    RULE_oC_PatternElement = 96
    RULE_oC_RelationshipsPattern = 97
    RULE_oC_PatternElementChain = 98
    RULE_oC_RelationshipPattern = 99
    RULE_oC_Properties = 100
    RULE_oC_RelationshipTypes = 101
    RULE_oC_NodeLabels = 102
    RULE_oC_NodeLabel = 103
    RULE_oC_RangeLiteral = 104
    RULE_oC_LabelName = 105
    RULE_oC_RelTypeName = 106
    RULE_oC_PropertyExpression = 107
    RULE_oC_Expression = 108
    RULE_oC_OrExpression = 109
    RULE_oC_XorExpression = 110
    RULE_oC_AndExpression = 111
    RULE_oC_NotExpression = 112
    RULE_oC_PartialComparisonExpression = 113
    RULE_oC_StringPredicateExpression = 114
    RULE_oC_ListPredicateExpression = 115
    RULE_oC_NullPredicateExpression = 116
    RULE_oC_UnaryAddOrSubtractExpression = 117
    RULE_oC_PropertyLookup = 118
    RULE_oC_Atom = 119
    RULE_oC_CaseExpression = 120
    RULE_oC_CaseAlternative = 121
    RULE_oC_ListComprehension = 122
    RULE_oC_PatternComprehension = 123
    RULE_oC_Quantifier = 124
    RULE_oC_PatternPredicate = 125
    RULE_oC_ParenthesizedExpression = 126
    RULE_oC_IdInColl = 127
    RULE_oC_FunctionName = 128
    RULE_oC_ExplicitProcedureInvocation = 129
    RULE_oC_ImplicitProcedureInvocation = 130
    RULE_oC_ProcedureResultField = 131
    RULE_oC_ProcedureName = 132
    RULE_oC_Namespace = 133
    RULE_oC_Variable = 134
    RULE_oC_Literal = 135
    RULE_oC_BooleanLiteral = 136
    RULE_oC_NumberLiteral = 137
    RULE_oC_IntegerLiteral = 138
    RULE_oC_DoubleLiteral = 139
    RULE_oC_PropertyKeyName = 140
    RULE_oC_Parameter = 141
    RULE_oC_SchemaName = 142
    RULE_oC_LeftArrowHead = 143
    RULE_oC_RightArrowHead = 144
    RULE_oC_Dash = 145

    ruleNames =  [ "oC_Query", "oC_MultiPartQuery", "oC_Match", "oC_UpdatingClause", 
                   "s_Create", "s_Merge", "s_Set", "s_Stale", "oC_SetItem", 
                   "s_SetPropertyItemOne", "s_SetPropertyItemTwo", "s_SetValueItem", 
                   "s_StaleItem", "s_Delete", "s_DeleteItem", "oC_RemoveItem", 
                   "s_AtTime", "s_Between", "s_TimeWindowLimit", "oC_InQueryCall", 
                   "oC_StandaloneCall", "s_YieldItems", "s_YieldItem", "s_WithPartQuery", 
                   "s_With", "oC_ExistentialSubquery", "oC_FilterExpression", 
                   "s_Snapshot", "s_Scope", "oC_PatternPart", "s_PathFunctionPattern", 
                   "s_SinglePathPattern", "oC_NodePattern", "s_Properties", 
                   "s_PropertiesPattern", "s_PropertyNode", "s_ValueNode", 
                   "oC_RelationshipDetail", "oC_ComparisonExpression", "oC_StringListNullPredicateExpression", 
                   "oC_AddOrSubtractExpression", "s_MultiplyDivideModuloOperator", 
                   "s_PowerOfOperator", "s_AddOrSubtractOperator", "s_ComparisonOperator", 
                   "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", 
                   "oC_ListOperatorExpression", "s_SingleIndexExpression", 
                   "s_DoubleIndexExpression", "s_LeftExpression", "s_RightExpression", 
                   "oC_PropertyOrLabelsExpression", "s_AtTExpression", "s_PropertyLookupName", 
                   "s_PropertyLookupTime", "s_TimePropertyItem", "s_TimePredicateExpression", 
                   "s_AtTElement", "s_TimePointLiteral", "oC_FunctionInvocation", 
                   "s_FunctionInvocationExpression", "oC_ListLiteral", "s_ListLiteralExpression", 
                   "oC_MapLiteral", "s_MapKeyValue", "oC_SymbolicName", 
                   "oC_ReservedWord", "oC_Cypher", "oC_Statement", "oC_RegularQuery", 
                   "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", "oC_ReadingClause", 
                   "oC_Unwind", "oC_Merge", "oC_MergeAction", "oC_Create", 
                   "oC_Set", "oC_Delete", "oC_Remove", "oC_YieldItems", 
                   "oC_YieldItem", "oC_With", "oC_Return", "oC_ProjectionBody", 
                   "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", 
                   "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", 
                   "oC_AnonymousPatternPart", "oC_PatternElement", "oC_RelationshipsPattern", 
                   "oC_PatternElementChain", "oC_RelationshipPattern", "oC_Properties", 
                   "oC_RelationshipTypes", "oC_NodeLabels", "oC_NodeLabel", 
                   "oC_RangeLiteral", "oC_LabelName", "oC_RelTypeName", 
                   "oC_PropertyExpression", "oC_Expression", "oC_OrExpression", 
                   "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", 
                   "oC_PartialComparisonExpression", "oC_StringPredicateExpression", 
                   "oC_ListPredicateExpression", "oC_NullPredicateExpression", 
                   "oC_UnaryAddOrSubtractExpression", "oC_PropertyLookup", 
                   "oC_Atom", "oC_CaseExpression", "oC_CaseAlternative", 
                   "oC_ListComprehension", "oC_PatternComprehension", "oC_Quantifier", 
                   "oC_PatternPredicate", "oC_ParenthesizedExpression", 
                   "oC_IdInColl", "oC_FunctionName", "oC_ExplicitProcedureInvocation", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_Variable", "oC_Literal", 
                   "oC_BooleanLiteral", "oC_NumberLiteral", "oC_IntegerLiteral", 
                   "oC_DoubleLiteral", "oC_PropertyKeyName", "oC_Parameter", 
                   "oC_SchemaName", "oC_LeftArrowHead", "oC_RightArrowHead", 
                   "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    AtT=46
    PoundValue=47
    NOW=48
    AT_TIME=49
    SNAPSHOT=50
    BETWEEN=51
    SCOPE=52
    STALE=53
    DURING=54
    OVERLAPS=55
    UNION=56
    ALL=57
    OPTIONAL=58
    MATCH=59
    UNWIND=60
    AS=61
    MERGE=62
    ON=63
    CREATE=64
    SET=65
    DETACH=66
    DELETE=67
    REMOVE=68
    CALL=69
    YIELD=70
    WITH=71
    RETURN=72
    DISTINCT=73
    ORDER=74
    BY=75
    L_SKIP=76
    LIMIT=77
    ASCENDING=78
    ASC=79
    DESCENDING=80
    DESC=81
    WHERE=82
    OR=83
    XOR=84
    AND=85
    NOT=86
    STARTS=87
    ENDS=88
    CONTAINS=89
    IN=90
    IS=91
    NULL=92
    COUNT=93
    CASE=94
    ELSE=95
    END=96
    WHEN=97
    THEN=98
    ANY=99
    NONE=100
    SINGLE=101
    EXISTS=102
    TRUE=103
    FALSE=104
    HexInteger=105
    DecimalInteger=106
    OctalInteger=107
    HexLetter=108
    HexDigit=109
    Digit=110
    NonZeroDigit=111
    NonZeroOctDigit=112
    OctDigit=113
    ZeroDigit=114
    ExponentDecimalReal=115
    RegularDecimalReal=116
    StringLiteral=117
    EscapedChar=118
    CONSTRAINT=119
    DO=120
    FOR=121
    REQUIRE=122
    UNIQUE=123
    MANDATORY=124
    SCALAR=125
    OF=126
    ADD=127
    DROP=128
    FILTER=129
    EXTRACT=130
    UnescapedSymbolicName=131
    IdentifierStart=132
    IdentifierPart=133
    EscapedSymbolicName=134
    SP=135
    WHITESPACE=136
    Comment=137

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StandaloneCallContext,0)


        def s_TimeWindowLimit(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimeWindowLimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = s_cypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Query)
        try:
            self.state = 295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 292
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 293
                self.oC_StandaloneCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 294
                self.s_TimeWindowLimit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def s_WithPartQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_WithPartQueryContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_WithPartQueryContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = s_cypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_MultiPartQuery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 297
                    self.s_WithPartQuery()

                else:
                    raise NoViableAltException(self)
                self.state = 300 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

            self.state = 302
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = s_cypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 304
                self.match(s_cypherParser.OPTIONAL)
                self.state = 305
                self.match(s_cypherParser.SP)


            self.state = 308
            self.match(s_cypherParser.MATCH)
            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 309
                self.match(s_cypherParser.SP)


            self.state = 312
            self.oC_Pattern()
            self.state = 320
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 313
                    self.match(s_cypherParser.SP)


                self.state = 318
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 316
                    self.s_AtTime()
                    pass
                elif token in [51]:
                    self.state = 317
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 322
                    self.match(s_cypherParser.SP)


                self.state = 325
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_Create(self):
            return self.getTypedRuleContext(s_cypherParser.S_CreateContext,0)


        def s_Merge(self):
            return self.getTypedRuleContext(s_cypherParser.S_MergeContext,0)


        def s_Set(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RemoveContext,0)


        def s_Stale(self):
            return self.getTypedRuleContext(s_cypherParser.S_StaleContext,0)


        def s_Delete(self):
            return self.getTypedRuleContext(s_cypherParser.S_DeleteContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = s_cypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_oC_UpdatingClause)
        try:
            self.state = 334
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.enterOuterAlt(localctx, 1)
                self.state = 328
                self.s_Create()
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 329
                self.s_Merge()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 3)
                self.state = 330
                self.s_Set()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 4)
                self.state = 331
                self.oC_Remove()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 5)
                self.state = 332
                self.s_Stale()
                pass
            elif token in [66, 67]:
                self.enterOuterAlt(localctx, 6)
                self.state = 333
                self.s_Delete()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Create" ):
                listener.enterS_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Create" ):
                listener.exitS_Create(self)




    def s_Create(self):

        localctx = s_cypherParser.S_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_s_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.match(s_cypherParser.CREATE)
            self.state = 338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 337
                self.match(s_cypherParser.SP)


            self.state = 340
            self.oC_Pattern()
            self.state = 345
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 341
                    self.match(s_cypherParser.SP)


                self.state = 344
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Merge" ):
                listener.enterS_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Merge" ):
                listener.exitS_Merge(self)




    def s_Merge(self):

        localctx = s_cypherParser.S_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_s_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self.match(s_cypherParser.MERGE)
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 348
                self.match(s_cypherParser.SP)


            self.state = 351
            self.oC_PatternPart()
            self.state = 356
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 352
                    self.match(s_cypherParser.SP)
                    self.state = 353
                    self.oC_MergeAction() 
                self.state = 358
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

            self.state = 363
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 359
                    self.match(s_cypherParser.SP)


                self.state = 362
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Set" ):
                listener.enterS_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Set" ):
                listener.exitS_Set(self)




    def s_Set(self):

        localctx = s_cypherParser.S_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_s_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.match(s_cypherParser.SET)
            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 366
                self.match(s_cypherParser.SP)


            self.state = 369
            self.oC_SetItem()
            self.state = 380
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 371
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 370
                        self.match(s_cypherParser.SP)


                    self.state = 373
                    self.match(s_cypherParser.T__0)
                    self.state = 375
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 374
                        self.match(s_cypherParser.SP)


                    self.state = 377
                    self.oC_SetItem() 
                self.state = 382
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

            self.state = 387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 383
                    self.match(s_cypherParser.SP)


                self.state = 386
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def s_StaleItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StaleItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StaleItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Stale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Stale" ):
                listener.enterS_Stale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Stale" ):
                listener.exitS_Stale(self)




    def s_Stale(self):

        localctx = s_cypherParser.S_StaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_s_Stale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.match(s_cypherParser.STALE)
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 390
                self.match(s_cypherParser.SP)


            self.state = 393
            self.s_StaleItem()
            self.state = 404
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 395
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 394
                        self.match(s_cypherParser.SP)


                    self.state = 397
                    self.match(s_cypherParser.T__0)
                    self.state = 399
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 398
                        self.match(s_cypherParser.SP)


                    self.state = 401
                    self.s_StaleItem() 
                self.state = 406
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

            self.state = 411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 407
                    self.match(s_cypherParser.SP)


                self.state = 410
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_SetPropertyItemOne(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemOneContext,0)


        def s_SetPropertyItemTwo(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemTwoContext,0)


        def s_SetValueItem(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetValueItemContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = s_cypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 497
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 413
                self.oC_PropertyExpression()
                self.state = 418
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 415
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 414
                        self.match(s_cypherParser.SP)


                    self.state = 417
                    self.s_AtTElement()


                self.state = 421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 420
                    self.match(s_cypherParser.SP)


                self.state = 423
                self.match(s_cypherParser.T__1)
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 424
                    self.match(s_cypherParser.SP)


                self.state = 427
                self.oC_Expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 429
                self.oC_Variable()
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 430
                    self.match(s_cypherParser.SP)


                self.state = 433
                self.match(s_cypherParser.T__1)
                self.state = 435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 434
                    self.match(s_cypherParser.SP)


                self.state = 437
                self.oC_Expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 439
                self.oC_Variable()
                self.state = 441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 440
                    self.match(s_cypherParser.SP)


                self.state = 443
                self.match(s_cypherParser.T__2)
                self.state = 445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 444
                    self.match(s_cypherParser.SP)


                self.state = 447
                self.oC_Expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 449
                self.oC_Variable()
                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 450
                    self.match(s_cypherParser.SP)


                self.state = 453
                self.oC_NodeLabels()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 455
                self.oC_Variable()
                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 456
                    self.match(s_cypherParser.SP)


                self.state = 459
                self.s_AtTElement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 461
                self.oC_Variable()
                self.state = 466
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 463
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 462
                        self.match(s_cypherParser.SP)


                    self.state = 465
                    self.s_AtTElement()


                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 468
                    self.match(s_cypherParser.SP)


                self.state = 471
                self.match(s_cypherParser.T__3)
                self.state = 473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 472
                    self.match(s_cypherParser.SP)


                self.state = 475
                self.s_SetPropertyItemOne()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 477
                self.oC_Variable()
                self.state = 482
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 479
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 478
                        self.match(s_cypherParser.SP)


                    self.state = 481
                    self.s_AtTElement()


                self.state = 485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 484
                    self.match(s_cypherParser.SP)


                self.state = 487
                self.match(s_cypherParser.T__3)
                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 488
                    self.match(s_cypherParser.SP)


                self.state = 491
                self.s_SetPropertyItemTwo()
                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 492
                    self.match(s_cypherParser.SP)


                self.state = 495
                self.s_SetValueItem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemOneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemOne

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemOne" ):
                listener.enterS_SetPropertyItemOne(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemOne" ):
                listener.exitS_SetPropertyItemOne(self)




    def s_SetPropertyItemOne(self):

        localctx = s_cypherParser.S_SetPropertyItemOneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_s_SetPropertyItemOne)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self.oC_PropertyKeyName()
            self.state = 501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 500
                self.match(s_cypherParser.SP)


            self.state = 503
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemTwoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemTwo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemTwo" ):
                listener.enterS_SetPropertyItemTwo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemTwo" ):
                listener.exitS_SetPropertyItemTwo(self)




    def s_SetPropertyItemTwo(self):

        localctx = s_cypherParser.S_SetPropertyItemTwoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_s_SetPropertyItemTwo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.oC_PropertyKeyName()
            self.state = 510
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 506
                    self.match(s_cypherParser.SP)


                self.state = 509
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetValueItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetValueItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetValueItem" ):
                listener.enterS_SetValueItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetValueItem" ):
                listener.exitS_SetValueItem(self)




    def s_SetValueItem(self):

        localctx = s_cypherParser.S_SetValueItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_s_SetValueItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self.match(s_cypherParser.PoundValue)
            self.state = 514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 513
                self.match(s_cypherParser.SP)


            self.state = 516
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def s_PropertyLookupName(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StaleItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StaleItem" ):
                listener.enterS_StaleItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StaleItem" ):
                listener.exitS_StaleItem(self)




    def s_StaleItem(self):

        localctx = s_cypherParser.S_StaleItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_s_StaleItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self.oC_Expression()
            self.state = 525
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 519
                self.s_PropertyLookupName()
                self.state = 521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 520
                    self.match(s_cypherParser.SP)


                self.state = 523
                self.match(s_cypherParser.PoundValue)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def s_DeleteItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DeleteItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DeleteItemContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Delete" ):
                listener.enterS_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Delete" ):
                listener.exitS_Delete(self)




    def s_Delete(self):

        localctx = s_cypherParser.S_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_s_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 527
                self.match(s_cypherParser.DETACH)
                self.state = 528
                self.match(s_cypherParser.SP)


            self.state = 531
            self.match(s_cypherParser.DELETE)
            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 532
                self.match(s_cypherParser.SP)


            self.state = 535
            self.s_DeleteItem()
            self.state = 546
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 537
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 536
                        self.match(s_cypherParser.SP)


                    self.state = 539
                    self.match(s_cypherParser.T__0)
                    self.state = 541
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 540
                        self.match(s_cypherParser.SP)


                    self.state = 543
                    self.s_DeleteItem() 
                self.state = 548
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

            self.state = 556
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 549
                    self.match(s_cypherParser.SP)


                self.state = 554
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 552
                    self.s_AtTime()
                    pass
                elif token in [51]:
                    self.state = 553
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def s_PropertyLookupName(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DeleteItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DeleteItem" ):
                listener.enterS_DeleteItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DeleteItem" ):
                listener.exitS_DeleteItem(self)




    def s_DeleteItem(self):

        localctx = s_cypherParser.S_DeleteItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_s_DeleteItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.oC_Expression()
            self.state = 569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 559
                self.s_PropertyLookupName()
                self.state = 567
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 561
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 560
                        self.match(s_cypherParser.SP)


                    self.state = 565
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [47]:
                        self.state = 563
                        self.match(s_cypherParser.PoundValue)
                        pass
                    elif token in [46]:
                        self.state = 564
                        self.s_AtTElement()
                        pass
                    else:
                        raise NoViableAltException(self)





        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = s_cypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_oC_RemoveItem)
        try:
            self.state = 575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 571
                self.oC_Variable()
                self.state = 572
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 574
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTime" ):
                listener.enterS_AtTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTime" ):
                listener.exitS_AtTime(self)




    def s_AtTime(self):

        localctx = s_cypherParser.S_AtTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_s_AtTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self.match(s_cypherParser.AT_TIME)
            self.state = 579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 578
                self.match(s_cypherParser.SP)


            self.state = 581
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_BetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Between

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Between" ):
                listener.enterS_Between(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Between" ):
                listener.exitS_Between(self)




    def s_Between(self):

        localctx = s_cypherParser.S_BetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_s_Between)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self.match(s_cypherParser.BETWEEN)
            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 584
                self.match(s_cypherParser.SP)


            self.state = 587
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimeWindowLimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_Snapshot(self):
            return self.getTypedRuleContext(s_cypherParser.S_SnapshotContext,0)


        def s_Scope(self):
            return self.getTypedRuleContext(s_cypherParser.S_ScopeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimeWindowLimit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimeWindowLimit" ):
                listener.enterS_TimeWindowLimit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimeWindowLimit" ):
                listener.exitS_TimeWindowLimit(self)




    def s_TimeWindowLimit(self):

        localctx = s_cypherParser.S_TimeWindowLimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_s_TimeWindowLimit)
        try:
            self.state = 591
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 589
                self.s_Snapshot()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 590
                self.s_Scope()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def s_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.S_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = s_cypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.match(s_cypherParser.CALL)
            self.state = 594
            self.match(s_cypherParser.SP)
            self.state = 595
            self.oC_ExplicitProcedureInvocation()
            self.state = 602
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 596
                    self.match(s_cypherParser.SP)


                self.state = 599
                self.match(s_cypherParser.YIELD)
                self.state = 600
                self.match(s_cypherParser.SP)
                self.state = 601
                self.s_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def s_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.S_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = s_cypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_oC_StandaloneCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.match(s_cypherParser.CALL)
            self.state = 605
            self.match(s_cypherParser.SP)
            self.state = 608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 606
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 607
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 619
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 610
                    self.match(s_cypherParser.SP)


                self.state = 613
                self.match(s_cypherParser.YIELD)
                self.state = 614
                self.match(s_cypherParser.SP)
                self.state = 617
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [5]:
                    self.state = 615
                    self.match(s_cypherParser.T__4)
                    pass
                elif token in [48, 93, 97, 99, 100, 101, 108, 129, 130, 131, 134]:
                    self.state = 616
                    self.s_YieldItems()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_YieldItems" ):
                listener.enterS_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_YieldItems" ):
                listener.exitS_YieldItems(self)




    def s_YieldItems(self):

        localctx = s_cypherParser.S_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_s_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.s_YieldItem()
            self.state = 632
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 623
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 622
                        self.match(s_cypherParser.SP)


                    self.state = 625
                    self.match(s_cypherParser.T__0)
                    self.state = 627
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 626
                        self.match(s_cypherParser.SP)


                    self.state = 629
                    self.s_YieldItem() 
                self.state = 634
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

            self.state = 639
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 635
                    self.match(s_cypherParser.SP)


                self.state = 638
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_YieldItem" ):
                listener.enterS_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_YieldItem" ):
                listener.exitS_YieldItem(self)




    def s_YieldItem(self):

        localctx = s_cypherParser.S_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_s_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.oC_ProcedureResultField()
            self.state = 646
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 642
                self.match(s_cypherParser.SP)
                self.state = 643
                self.match(s_cypherParser.AS)
                self.state = 644
                self.match(s_cypherParser.SP)
                self.state = 645
                self.oC_Variable()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_With(self):
            return self.getTypedRuleContext(s_cypherParser.S_WithContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_WithPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_WithPartQuery" ):
                listener.enterS_WithPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_WithPartQuery" ):
                listener.exitS_WithPartQuery(self)




    def s_WithPartQuery(self):

        localctx = s_cypherParser.S_WithPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_s_WithPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                self.state = 648
                self.oC_ReadingClause()
                self.state = 650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 649
                    self.match(s_cypherParser.SP)


                self.state = 656
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64001) != 0):
                self.state = 657
                self.oC_UpdatingClause()
                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 658
                    self.match(s_cypherParser.SP)


                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 666
            self.s_With()
            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 667
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_With" ):
                listener.enterS_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_With" ):
                listener.exitS_With(self)




    def s_With(self):

        localctx = s_cypherParser.S_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_s_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.match(s_cypherParser.WITH)
            self.state = 671
            self.oC_ProjectionBody()
            self.state = 676
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 672
                    self.match(s_cypherParser.SP)


                self.state = 675
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExistentialSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExistentialSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExistentialSubquery" ):
                listener.enterOC_ExistentialSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExistentialSubquery" ):
                listener.exitOC_ExistentialSubquery(self)




    def oC_ExistentialSubquery(self):

        localctx = s_cypherParser.OC_ExistentialSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_oC_ExistentialSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.match(s_cypherParser.EXISTS)
            self.state = 680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 679
                self.match(s_cypherParser.SP)


            self.state = 682
            self.match(s_cypherParser.T__5)
            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 683
                self.match(s_cypherParser.SP)


            self.state = 694
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 71, 72]:
                self.state = 686
                self.oC_RegularQuery()
                pass
            elif token in [8, 48, 93, 97, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 687
                self.oC_Pattern()
                self.state = 692
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                if la_ == 1:
                    self.state = 689
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 688
                        self.match(s_cypherParser.SP)


                    self.state = 691
                    self.oC_Where()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 696
                self.match(s_cypherParser.SP)


            self.state = 699
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IdInCollContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = s_cypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self.oC_IdInColl()
            self.state = 706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 702
                    self.match(s_cypherParser.SP)


                self.state = 705
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SnapshotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Snapshot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Snapshot" ):
                listener.enterS_Snapshot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Snapshot" ):
                listener.exitS_Snapshot(self)




    def s_Snapshot(self):

        localctx = s_cypherParser.S_SnapshotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_s_Snapshot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.match(s_cypherParser.SNAPSHOT)
            self.state = 710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 709
                self.match(s_cypherParser.SP)


            self.state = 712
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Scope" ):
                listener.enterS_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Scope" ):
                listener.exitS_Scope(self)




    def s_Scope(self):

        localctx = s_cypherParser.S_ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_s_Scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.match(s_cypherParser.SCOPE)
            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 715
                self.match(s_cypherParser.SP)


            self.state = 718
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_PathFunctionPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PathFunctionPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AnonymousPatternPartContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = s_cypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 720
                self.oC_Variable()
                self.state = 722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 721
                    self.match(s_cypherParser.SP)


                self.state = 724
                self.match(s_cypherParser.T__1)
                self.state = 726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 725
                    self.match(s_cypherParser.SP)


                self.state = 728
                self.s_PathFunctionPattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 730
                self.oC_Variable()
                self.state = 732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 731
                    self.match(s_cypherParser.SP)


                self.state = 734
                self.match(s_cypherParser.T__1)
                self.state = 736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 735
                    self.match(s_cypherParser.SP)


                self.state = 738
                self.oC_AnonymousPatternPart()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 740
                self.oC_AnonymousPatternPart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PathFunctionPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def s_SinglePathPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_SinglePathPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PathFunctionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PathFunctionPattern" ):
                listener.enterS_PathFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PathFunctionPattern" ):
                listener.exitS_PathFunctionPattern(self)




    def s_PathFunctionPattern(self):

        localctx = s_cypherParser.S_PathFunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_s_PathFunctionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.oC_FunctionName()
            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 744
                self.match(s_cypherParser.SP)


            self.state = 747
            self.match(s_cypherParser.T__7)
            self.state = 749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 748
                self.match(s_cypherParser.SP)


            self.state = 751
            self.s_SinglePathPattern()
            self.state = 753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 752
                self.match(s_cypherParser.SP)


            self.state = 755
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SinglePathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodePatternContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,i)


        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SinglePathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SinglePathPattern" ):
                listener.enterS_SinglePathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SinglePathPattern" ):
                listener.exitS_SinglePathPattern(self)




    def s_SinglePathPattern(self):

        localctx = s_cypherParser.S_SinglePathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_s_SinglePathPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.oC_NodePattern()
            self.state = 759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 758
                self.match(s_cypherParser.SP)


            self.state = 761
            self.oC_RelationshipPattern()
            self.state = 763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 762
                self.match(s_cypherParser.SP)


            self.state = 765
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def s_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = s_cypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.match(s_cypherParser.T__7)
            self.state = 769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 768
                self.match(s_cypherParser.SP)


            self.state = 775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625937) != 0):
                self.state = 771
                self.oC_Variable()
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 772
                    self.match(s_cypherParser.SP)




            self.state = 781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 777
                self.oC_NodeLabels()
                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 778
                    self.match(s_cypherParser.SP)




            self.state = 787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 783
                self.s_AtTElement()
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 784
                    self.match(s_cypherParser.SP)




            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6 or _la==26:
                self.state = 789
                self.s_Properties()
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 790
                    self.match(s_cypherParser.SP)




            self.state = 795
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertiesPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesPatternContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Properties" ):
                listener.enterS_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Properties" ):
                listener.exitS_Properties(self)




    def s_Properties(self):

        localctx = s_cypherParser.S_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_s_Properties)
        try:
            self.state = 799
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 797
                self.s_PropertiesPattern()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 798
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertyNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PropertyNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PropertyNodeContext,i)


        def s_ValueNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ValueNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ValueNodeContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertiesPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertiesPattern" ):
                listener.enterS_PropertiesPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertiesPattern" ):
                listener.exitS_PropertiesPattern(self)




    def s_PropertiesPattern(self):

        localctx = s_cypherParser.S_PropertiesPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_s_PropertiesPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.match(s_cypherParser.T__5)
            self.state = 836
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 802
                    self.match(s_cypherParser.SP)


                self.state = 805
                self.s_PropertyNode()
                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 806
                    self.match(s_cypherParser.SP)


                self.state = 809
                self.match(s_cypherParser.T__9)
                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 810
                    self.match(s_cypherParser.SP)


                self.state = 813
                self.s_ValueNode()
                self.state = 833
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 815
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 814
                            self.match(s_cypherParser.SP)


                        self.state = 817
                        self.match(s_cypherParser.T__0)
                        self.state = 819
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 818
                            self.match(s_cypherParser.SP)


                        self.state = 821
                        self.s_PropertyNode()
                        self.state = 823
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 822
                            self.match(s_cypherParser.SP)


                        self.state = 825
                        self.match(s_cypherParser.T__9)
                        self.state = 827
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 826
                            self.match(s_cypherParser.SP)


                        self.state = 829
                        self.s_ValueNode() 
                    self.state = 835
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,127,self._ctx)



            self.state = 839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 838
                self.match(s_cypherParser.SP)


            self.state = 841
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyNode" ):
                listener.enterS_PropertyNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyNode" ):
                listener.exitS_PropertyNode(self)




    def s_PropertyNode(self):

        localctx = s_cypherParser.S_PropertyNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_s_PropertyNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self.oC_PropertyKeyName()
            self.state = 848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 844
                    self.match(s_cypherParser.SP)


                self.state = 847
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ValueNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ValueNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ValueNode" ):
                listener.enterS_ValueNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ValueNode" ):
                listener.exitS_ValueNode(self)




    def s_ValueNode(self):

        localctx = s_cypherParser.S_ValueNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_s_ValueNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.oC_Expression()
            self.state = 852
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.state = 851
                self.match(s_cypherParser.SP)


            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 854
                self.match(s_cypherParser.T__7)
                self.state = 856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 855
                    self.match(s_cypherParser.SP)


                self.state = 858
                self.s_AtTElement()
                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 859
                    self.match(s_cypherParser.SP)


                self.state = 862
                self.match(s_cypherParser.T__8)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RangeLiteralContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = s_cypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.match(s_cypherParser.T__10)
            self.state = 868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 867
                self.match(s_cypherParser.SP)


            self.state = 874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625937) != 0):
                self.state = 870
                self.oC_Variable()
                self.state = 872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 871
                    self.match(s_cypherParser.SP)




            self.state = 880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 876
                self.oC_RelationshipTypes()
                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 877
                    self.match(s_cypherParser.SP)




            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 882
                self.oC_RangeLiteral()


            self.state = 889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 885
                self.s_AtTElement()
                self.state = 887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 886
                    self.match(s_cypherParser.SP)




            self.state = 895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6 or _la==26:
                self.state = 891
                self.oC_Properties()
                self.state = 893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 892
                    self.match(s_cypherParser.SP)




            self.state = 897
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_StringListNullPredicateExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,i)


        def s_ComparisonOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ComparisonOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ComparisonOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = s_cypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self.oC_StringListNullPredicateExpression()
            self.state = 911
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,148,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 901
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 900
                        self.match(s_cypherParser.SP)


                    self.state = 903
                    self.s_ComparisonOperator()
                    self.state = 905
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 904
                        self.match(s_cypherParser.SP)


                    self.state = 907
                    self.oC_StringListNullPredicateExpression() 
                self.state = 913
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def s_TimePredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateExpressionContext,0)


        def oC_StringPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringPredicateExpressionContext,0)


        def oC_ListPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListPredicateExpressionContext,0)


        def oC_NullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NullPredicateExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringListNullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullPredicateExpression" ):
                listener.enterOC_StringListNullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullPredicateExpression" ):
                listener.exitOC_StringListNullPredicateExpression(self)




    def oC_StringListNullPredicateExpression(self):

        localctx = s_cypherParser.OC_StringListNullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_oC_StringListNullPredicateExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            self.oC_AddOrSubtractExpression()
            self.state = 919
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.state = 915
                self.s_TimePredicateExpression()

            elif la_ == 2:
                self.state = 916
                self.oC_StringPredicateExpression()

            elif la_ == 3:
                self.state = 917
                self.oC_ListPredicateExpression()

            elif la_ == 4:
                self.state = 918
                self.oC_NullPredicateExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def s_AddOrSubtractOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AddOrSubtractOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.oC_MultiplyDivideModuloExpression()
            self.state = 933
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 923
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 922
                        self.match(s_cypherParser.SP)


                    self.state = 925
                    self.s_AddOrSubtractOperator()
                    self.state = 927
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 926
                        self.match(s_cypherParser.SP)


                    self.state = 929
                    self.oC_MultiplyDivideModuloExpression() 
                self.state = 935
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MultiplyDivideModuloOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MultiplyDivideModuloOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MultiplyDivideModuloOperator" ):
                listener.enterS_MultiplyDivideModuloOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MultiplyDivideModuloOperator" ):
                listener.exitS_MultiplyDivideModuloOperator(self)




    def s_MultiplyDivideModuloOperator(self):

        localctx = s_cypherParser.S_MultiplyDivideModuloOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_s_MultiplyDivideModuloOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 24608) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PowerOfOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PowerOfOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PowerOfOperator" ):
                listener.enterS_PowerOfOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PowerOfOperator" ):
                listener.exitS_PowerOfOperator(self)




    def s_PowerOfOperator(self):

        localctx = s_cypherParser.S_PowerOfOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_s_PowerOfOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.match(s_cypherParser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AddOrSubtractOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AddOrSubtractOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AddOrSubtractOperator" ):
                listener.enterS_AddOrSubtractOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AddOrSubtractOperator" ):
                listener.exitS_AddOrSubtractOperator(self)




    def s_AddOrSubtractOperator(self):

        localctx = s_cypherParser.S_AddOrSubtractOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_s_AddOrSubtractOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            _la = self._input.LA(1)
            if not(_la==16 or _la==17):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ComparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ComparisonOperator" ):
                listener.enterS_ComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ComparisonOperator" ):
                listener.exitS_ComparisonOperator(self)




    def s_ComparisonOperator(self):

        localctx = s_cypherParser.S_ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_s_ComparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8126468) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PowerOfExpressionContext,i)


        def s_MultiplyDivideModuloOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MultiplyDivideModuloOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MultiplyDivideModuloOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = s_cypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.oC_PowerOfExpression()
            self.state = 956
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 946
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 945
                        self.match(s_cypherParser.SP)


                    self.state = 948
                    self.s_MultiplyDivideModuloOperator()
                    self.state = 950
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 949
                        self.match(s_cypherParser.SP)


                    self.state = 952
                    self.oC_PowerOfExpression() 
                self.state = 958
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def s_PowerOfOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PowerOfOperatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PowerOfOperatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = s_cypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 971
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,158,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 961
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 960
                        self.match(s_cypherParser.SP)


                    self.state = 963
                    self.s_PowerOfOperator()
                    self.state = 965
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 964
                        self.match(s_cypherParser.SP)


                    self.state = 967
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 973
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,158,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def s_AtTExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTExpressionContext,0)


        def s_SingleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_SingleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_SingleIndexExpressionContext,i)


        def s_DoubleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DoubleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DoubleIndexExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = s_cypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_oC_ListOperatorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 974
                self.oC_PropertyOrLabelsExpression()
                pass

            elif la_ == 2:
                self.state = 975
                self.s_AtTExpression()
                pass


            self.state = 982
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 980
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                    if la_ == 1:
                        self.state = 978
                        self.s_SingleIndexExpression()
                        pass

                    elif la_ == 2:
                        self.state = 979
                        self.s_DoubleIndexExpression()
                        pass

             
                self.state = 984
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SingleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SingleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SingleIndexExpression" ):
                listener.enterS_SingleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SingleIndexExpression" ):
                listener.exitS_SingleIndexExpression(self)




    def s_SingleIndexExpression(self):

        localctx = s_cypherParser.S_SingleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_s_SingleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 985
                self.match(s_cypherParser.SP)


            self.state = 988
            self.match(s_cypherParser.T__10)
            self.state = 990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 989
                self.match(s_cypherParser.SP)


            self.state = 992
            self.s_LeftExpression()
            self.state = 994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 993
                self.match(s_cypherParser.SP)


            self.state = 996
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DoubleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def s_RightExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_RightExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DoubleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DoubleIndexExpression" ):
                listener.enterS_DoubleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DoubleIndexExpression" ):
                listener.exitS_DoubleIndexExpression(self)




    def s_DoubleIndexExpression(self):

        localctx = s_cypherParser.S_DoubleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_s_DoubleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 998
                self.match(s_cypherParser.SP)


            self.state = 1001
            self.match(s_cypherParser.T__10)
            self.state = 1003
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.state = 1002
                self.match(s_cypherParser.SP)


            self.state = 1006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119874368) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394345409) != 0):
                self.state = 1005
                self.s_LeftExpression()


            self.state = 1009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1008
                self.match(s_cypherParser.SP)


            self.state = 1011
            self.match(s_cypherParser.T__22)
            self.state = 1013
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1012
                self.match(s_cypherParser.SP)


            self.state = 1016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119874368) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394345409) != 0):
                self.state = 1015
                self.s_RightExpression()


            self.state = 1019
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1018
                self.match(s_cypherParser.SP)


            self.state = 1021
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_LeftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_LeftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_LeftExpression" ):
                listener.enterS_LeftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_LeftExpression" ):
                listener.exitS_LeftExpression(self)




    def s_LeftExpression(self):

        localctx = s_cypherParser.S_LeftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_s_LeftExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_RightExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_RightExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_RightExpression" ):
                listener.enterS_RightExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_RightExpression" ):
                listener.exitS_RightExpression(self)




    def s_RightExpression(self):

        localctx = s_cypherParser.S_RightExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_s_RightExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyOrLabelsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyOrLabelsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyOrLabelsExpression" ):
                listener.enterOC_PropertyOrLabelsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyOrLabelsExpression" ):
                listener.exitOC_PropertyOrLabelsExpression(self)




    def oC_PropertyOrLabelsExpression(self):

        localctx = s_cypherParser.OC_PropertyOrLabelsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_oC_PropertyOrLabelsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027
            self.oC_Atom()
            self.state = 1034
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,173,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1029
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1028
                        self.match(s_cypherParser.SP)


                    self.state = 1031
                    self.oC_PropertyLookup() 
                self.state = 1036
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,173,self._ctx)

            self.state = 1044
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1037
                    self.match(s_cypherParser.SP)


                self.state = 1042
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10]:
                    self.state = 1040
                    self.oC_NodeLabels()
                    pass
                elif token in [46]:
                    self.state = 1041
                    self.s_AtTElement()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def s_PropertyLookupTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupTimeContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def s_PropertyLookupName(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTExpression" ):
                listener.enterS_AtTExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTExpression" ):
                listener.exitS_AtTExpression(self)




    def s_AtTExpression(self):

        localctx = s_cypherParser.S_AtTExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_s_AtTExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            self.oC_Atom()
            self.state = 1053
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,178,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1048
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1047
                        self.match(s_cypherParser.SP)


                    self.state = 1050
                    self.oC_PropertyLookup() 
                self.state = 1055
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

            self.state = 1066
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.state = 1056
                self.s_PropertyLookupName()
                self.state = 1064
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                if la_ == 1:
                    self.state = 1058
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1057
                        self.match(s_cypherParser.SP)


                    self.state = 1062
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [47]:
                        self.state = 1060
                        self.match(s_cypherParser.PoundValue)
                        pass
                    elif token in [46]:
                        self.state = 1061
                        self.s_AtTElement()
                        pass
                    else:
                        raise NoViableAltException(self)





            self.state = 1069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1068
                self.match(s_cypherParser.SP)


            self.state = 1071
            self.s_PropertyLookupTime()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyLookupNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyLookupName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyLookupName" ):
                listener.enterS_PropertyLookupName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyLookupName" ):
                listener.exitS_PropertyLookupName(self)




    def s_PropertyLookupName(self):

        localctx = s_cypherParser.S_PropertyLookupNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_s_PropertyLookupName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1073
                self.match(s_cypherParser.SP)


            self.state = 1076
            self.match(s_cypherParser.T__3)
            self.state = 1078
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1077
                self.match(s_cypherParser.SP)


            self.state = 1080
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyLookupTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_TimePropertyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_TimePropertyItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_TimePropertyItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyLookupTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyLookupTime" ):
                listener.enterS_PropertyLookupTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyLookupTime" ):
                listener.exitS_PropertyLookupTime(self)




    def s_PropertyLookupTime(self):

        localctx = s_cypherParser.S_PropertyLookupTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_s_PropertyLookupTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1082
            self.match(s_cypherParser.AtT)
            self.state = 1089
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1084
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1083
                        self.match(s_cypherParser.SP)


                    self.state = 1086
                    self.s_TimePropertyItem() 
                self.state = 1091
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePropertyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePropertyItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePropertyItem" ):
                listener.enterS_TimePropertyItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePropertyItem" ):
                listener.exitS_TimePropertyItem(self)




    def s_TimePropertyItem(self):

        localctx = s_cypherParser.S_TimePropertyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_s_TimePropertyItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self.match(s_cypherParser.T__3)
            self.state = 1094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1093
                self.match(s_cypherParser.SP)


            self.state = 1096
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateExpression" ):
                listener.enterS_TimePredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateExpression" ):
                listener.exitS_TimePredicateExpression(self)




    def s_TimePredicateExpression(self):

        localctx = s_cypherParser.S_TimePredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_s_TimePredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self.match(s_cypherParser.SP)
            self.state = 1099
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1100
            self.match(s_cypherParser.SP)
            self.state = 1101
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_TimePointLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_TimePointLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_TimePointLiteralContext,i)


        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTElement" ):
                listener.enterS_AtTElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTElement" ):
                listener.exitS_AtTElement(self)




    def s_AtTElement(self):

        localctx = s_cypherParser.S_AtTElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_s_AtTElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            self.match(s_cypherParser.AtT)
            self.state = 1105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1104
                self.match(s_cypherParser.SP)


            self.state = 1107
            self.match(s_cypherParser.T__7)
            self.state = 1117
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1108
                    self.match(s_cypherParser.SP)


                self.state = 1111
                self.s_TimePointLiteral()
                self.state = 1113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1112
                    self.match(s_cypherParser.SP)


                self.state = 1115
                self.match(s_cypherParser.T__0)


            self.state = 1120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1119
                self.match(s_cypherParser.SP)


            self.state = 1124
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 117]:
                self.state = 1122
                self.s_TimePointLiteral()
                pass
            elif token in [48]:
                self.state = 1123
                self.match(s_cypherParser.NOW)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1126
                self.match(s_cypherParser.SP)


            self.state = 1129
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePointLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePointLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePointLiteral" ):
                listener.enterS_TimePointLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePointLiteral" ):
                listener.exitS_TimePointLiteral(self)




    def s_TimePointLiteral(self):

        localctx = s_cypherParser.S_TimePointLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_s_TimePointLiteral)
        try:
            self.state = 1133
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1131
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1132
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def s_FunctionInvocationExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_FunctionInvocationExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_FunctionInvocationExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = s_cypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1135
            self.oC_FunctionName()
            self.state = 1137
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1136
                self.match(s_cypherParser.SP)


            self.state = 1139
            self.match(s_cypherParser.T__7)
            self.state = 1141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1140
                self.match(s_cypherParser.SP)


            self.state = 1147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 1143
                self.match(s_cypherParser.DISTINCT)
                self.state = 1145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1144
                    self.match(s_cypherParser.SP)




            self.state = 1166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119874368) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394345409) != 0):
                self.state = 1149
                self.s_FunctionInvocationExpression()
                self.state = 1151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1150
                    self.match(s_cypherParser.SP)


                self.state = 1163
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 1153
                    self.match(s_cypherParser.T__0)
                    self.state = 1155
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1154
                        self.match(s_cypherParser.SP)


                    self.state = 1157
                    self.s_FunctionInvocationExpression()
                    self.state = 1159
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1158
                        self.match(s_cypherParser.SP)


                    self.state = 1165
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1168
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_FunctionInvocationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_FunctionInvocationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_FunctionInvocationExpression" ):
                listener.enterS_FunctionInvocationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_FunctionInvocationExpression" ):
                listener.exitS_FunctionInvocationExpression(self)




    def s_FunctionInvocationExpression(self):

        localctx = s_cypherParser.S_FunctionInvocationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_s_FunctionInvocationExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1170
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_ListLiteralExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ListLiteralExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ListLiteralExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = s_cypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172
            self.match(s_cypherParser.T__10)
            self.state = 1174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1173
                self.match(s_cypherParser.SP)


            self.state = 1193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119874368) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394345409) != 0):
                self.state = 1176
                self.s_ListLiteralExpression()
                self.state = 1178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1177
                    self.match(s_cypherParser.SP)


                self.state = 1190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 1180
                    self.match(s_cypherParser.T__0)
                    self.state = 1182
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1181
                        self.match(s_cypherParser.SP)


                    self.state = 1184
                    self.s_ListLiteralExpression()
                    self.state = 1186
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1185
                        self.match(s_cypherParser.SP)


                    self.state = 1192
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1195
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ListLiteralExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ListLiteralExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ListLiteralExpression" ):
                listener.enterS_ListLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ListLiteralExpression" ):
                listener.exitS_ListLiteralExpression(self)




    def s_ListLiteralExpression(self):

        localctx = s_cypherParser.S_ListLiteralExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_s_ListLiteralExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1197
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_MapKeyValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MapKeyValueContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MapKeyValueContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = s_cypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1199
            self.match(s_cypherParser.T__5)
            self.state = 1201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1200
                self.match(s_cypherParser.SP)


            self.state = 1214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 1203
                self.s_MapKeyValue()
                self.state = 1211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 1204
                    self.match(s_cypherParser.T__0)
                    self.state = 1206
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1205
                        self.match(s_cypherParser.SP)


                    self.state = 1208
                    self.s_MapKeyValue()
                    self.state = 1213
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1216
            self.match(s_cypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MapKeyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MapKeyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MapKeyValue" ):
                listener.enterS_MapKeyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MapKeyValue" ):
                listener.exitS_MapKeyValue(self)




    def s_MapKeyValue(self):

        localctx = s_cypherParser.S_MapKeyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_s_MapKeyValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1218
            self.oC_PropertyKeyName()
            self.state = 1220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1219
                self.match(s_cypherParser.SP)


            self.state = 1222
            self.match(s_cypherParser.T__9)
            self.state = 1224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1223
                self.match(s_cypherParser.SP)


            self.state = 1226
            self.oC_Expression()
            self.state = 1228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1227
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(s_cypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(s_cypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(s_cypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(s_cypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(s_cypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = s_cypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1230
            _la = self._input.LA(1)
            if not(_la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625937) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(s_cypherParser.AND, 0)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def OR(self):
            return self.getToken(s_cypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(s_cypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(s_cypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(s_cypherParser.DO, 0)

        def FOR(self):
            return self.getToken(s_cypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(s_cypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(s_cypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(s_cypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(s_cypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(s_cypherParser.OF, 0)

        def ADD(self):
            return self.getToken(s_cypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(s_cypherParser.DROP, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = s_cypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1232
            _la = self._input.LA(1)
            if not(((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 128317405001678847) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(s_cypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = s_cypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1234
                self.match(s_cypherParser.SP)


            self.state = 1237
            self.oC_Statement()
            self.state = 1242
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.state = 1239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1238
                    self.match(s_cypherParser.SP)


                self.state = 1241
                self.match(s_cypherParser.T__23)


            self.state = 1245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1244
                self.match(s_cypherParser.SP)


            self.state = 1247
            self.match(s_cypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = s_cypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1249
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = s_cypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1251
            self.oC_SingleQuery()
            self.state = 1258
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,224,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1253
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1252
                        self.match(s_cypherParser.SP)


                    self.state = 1255
                    self.oC_Union() 
                self.state = 1260
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,224,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = s_cypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 1273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1261
                self.match(s_cypherParser.UNION)
                self.state = 1262
                self.match(s_cypherParser.SP)
                self.state = 1263
                self.match(s_cypherParser.ALL)
                self.state = 1265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1264
                    self.match(s_cypherParser.SP)


                self.state = 1267
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1268
                self.match(s_cypherParser.UNION)
                self.state = 1270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1269
                    self.match(s_cypherParser.SP)


                self.state = 1272
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = s_cypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_oC_SingleQuery)
        try:
            self.state = 1277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1275
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1276
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = s_cypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 1314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 1279
                    self.oC_ReadingClause()
                    self.state = 1281
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1280
                        self.match(s_cypherParser.SP)


                    self.state = 1287
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1288
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 1289
                    self.oC_ReadingClause()
                    self.state = 1291
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1290
                        self.match(s_cypherParser.SP)


                    self.state = 1297
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1298
                self.oC_UpdatingClause()
                self.state = 1305
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,234,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1300
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1299
                            self.match(s_cypherParser.SP)


                        self.state = 1302
                        self.oC_UpdatingClause() 
                    self.state = 1307
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,234,self._ctx)

                self.state = 1312
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
                if la_ == 1:
                    self.state = 1309
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1308
                        self.match(s_cypherParser.SP)


                    self.state = 1311
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(s_cypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = s_cypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_ReadingClause)
        try:
            self.state = 1319
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1316
                self.oC_Match()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1317
                self.oC_Unwind()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1318
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = s_cypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            self.match(s_cypherParser.UNWIND)
            self.state = 1323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1322
                self.match(s_cypherParser.SP)


            self.state = 1325
            self.oC_Expression()
            self.state = 1326
            self.match(s_cypherParser.SP)
            self.state = 1327
            self.match(s_cypherParser.AS)
            self.state = 1328
            self.match(s_cypherParser.SP)
            self.state = 1329
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = s_cypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1331
            self.match(s_cypherParser.MERGE)
            self.state = 1333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1332
                self.match(s_cypherParser.SP)


            self.state = 1335
            self.oC_PatternPart()
            self.state = 1340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==135:
                self.state = 1336
                self.match(s_cypherParser.SP)
                self.state = 1337
                self.oC_MergeAction()
                self.state = 1342
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = s_cypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_MergeAction)
        try:
            self.state = 1353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1343
                self.match(s_cypherParser.ON)
                self.state = 1344
                self.match(s_cypherParser.SP)
                self.state = 1345
                self.match(s_cypherParser.MATCH)
                self.state = 1346
                self.match(s_cypherParser.SP)
                self.state = 1347
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1348
                self.match(s_cypherParser.ON)
                self.state = 1349
                self.match(s_cypherParser.SP)
                self.state = 1350
                self.match(s_cypherParser.CREATE)
                self.state = 1351
                self.match(s_cypherParser.SP)
                self.state = 1352
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = s_cypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1355
            self.match(s_cypherParser.CREATE)
            self.state = 1357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1356
                self.match(s_cypherParser.SP)


            self.state = 1359
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = s_cypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1361
            self.match(s_cypherParser.SET)
            self.state = 1363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1362
                self.match(s_cypherParser.SP)


            self.state = 1365
            self.oC_SetItem()
            self.state = 1376
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,247,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1367
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1366
                        self.match(s_cypherParser.SP)


                    self.state = 1369
                    self.match(s_cypherParser.T__0)
                    self.state = 1371
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1370
                        self.match(s_cypherParser.SP)


                    self.state = 1373
                    self.oC_SetItem() 
                self.state = 1378
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,247,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = s_cypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 1379
                self.match(s_cypherParser.DETACH)
                self.state = 1380
                self.match(s_cypherParser.SP)


            self.state = 1383
            self.match(s_cypherParser.DELETE)
            self.state = 1385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1384
                self.match(s_cypherParser.SP)


            self.state = 1387
            self.oC_Expression()
            self.state = 1398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1 or _la==135:
                self.state = 1389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1388
                    self.match(s_cypherParser.SP)


                self.state = 1391
                self.match(s_cypherParser.T__0)
                self.state = 1393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1392
                    self.match(s_cypherParser.SP)


                self.state = 1395
                self.oC_Expression()
                self.state = 1400
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = s_cypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401
            self.match(s_cypherParser.REMOVE)
            self.state = 1402
            self.match(s_cypherParser.SP)
            self.state = 1403
            self.oC_RemoveItem()
            self.state = 1414
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,255,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1405
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1404
                        self.match(s_cypherParser.SP)


                    self.state = 1407
                    self.match(s_cypherParser.T__0)
                    self.state = 1409
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1408
                        self.match(s_cypherParser.SP)


                    self.state = 1411
                    self.oC_RemoveItem() 
                self.state = 1416
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,255,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = s_cypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1417
            self.oC_YieldItem()
            self.state = 1428
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,258,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1419
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1418
                        self.match(s_cypherParser.SP)


                    self.state = 1421
                    self.match(s_cypherParser.T__0)
                    self.state = 1423
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1422
                        self.match(s_cypherParser.SP)


                    self.state = 1425
                    self.oC_YieldItem() 
                self.state = 1430
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,258,self._ctx)

            self.state = 1435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82 or _la==135:
                self.state = 1432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1431
                    self.match(s_cypherParser.SP)


                self.state = 1434
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = s_cypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                self.state = 1437
                self.oC_ProcedureResultField()
                self.state = 1438
                self.match(s_cypherParser.SP)
                self.state = 1439
                self.match(s_cypherParser.AS)
                self.state = 1440
                self.match(s_cypherParser.SP)


            self.state = 1444
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = s_cypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1446
            self.match(s_cypherParser.WITH)
            self.state = 1447
            self.oC_ProjectionBody()
            self.state = 1452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82 or _la==135:
                self.state = 1449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1448
                    self.match(s_cypherParser.SP)


                self.state = 1451
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = s_cypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1454
            self.match(s_cypherParser.RETURN)
            self.state = 1455
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)




    def oC_ProjectionBody(self):

        localctx = s_cypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1461
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                self.state = 1458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1457
                    self.match(s_cypherParser.SP)


                self.state = 1460
                self.match(s_cypherParser.DISTINCT)


            self.state = 1463
            self.match(s_cypherParser.SP)
            self.state = 1464
            self.oC_ProjectionItems()
            self.state = 1467
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.state = 1465
                self.match(s_cypherParser.SP)
                self.state = 1466
                self.oC_Order()


            self.state = 1471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                self.state = 1469
                self.match(s_cypherParser.SP)
                self.state = 1470
                self.oC_Skip()


            self.state = 1475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
            if la_ == 1:
                self.state = 1473
                self.match(s_cypherParser.SP)
                self.state = 1474
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)




    def oC_ProjectionItems(self):

        localctx = s_cypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 1505
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1477
                self.match(s_cypherParser.T__4)
                self.state = 1488
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,271,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1479
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1478
                            self.match(s_cypherParser.SP)


                        self.state = 1481
                        self.match(s_cypherParser.T__0)
                        self.state = 1483
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1482
                            self.match(s_cypherParser.SP)


                        self.state = 1485
                        self.oC_ProjectionItem() 
                    self.state = 1490
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,271,self._ctx)

                pass
            elif token in [6, 8, 11, 16, 17, 26, 48, 57, 86, 92, 93, 94, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1491
                self.oC_ProjectionItem()
                self.state = 1502
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,274,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1493
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1492
                            self.match(s_cypherParser.SP)


                        self.state = 1495
                        self.match(s_cypherParser.T__0)
                        self.state = 1497
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1496
                            self.match(s_cypherParser.SP)


                        self.state = 1499
                        self.oC_ProjectionItem() 
                    self.state = 1504
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,274,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)




    def oC_ProjectionItem(self):

        localctx = s_cypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_ProjectionItem)
        try:
            self.state = 1514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1507
                self.oC_Expression()
                self.state = 1508
                self.match(s_cypherParser.SP)
                self.state = 1509
                self.match(s_cypherParser.AS)
                self.state = 1510
                self.match(s_cypherParser.SP)
                self.state = 1511
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1513
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = s_cypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1516
            self.match(s_cypherParser.ORDER)
            self.state = 1517
            self.match(s_cypherParser.SP)
            self.state = 1518
            self.match(s_cypherParser.BY)
            self.state = 1519
            self.match(s_cypherParser.SP)
            self.state = 1520
            self.oC_SortItem()
            self.state = 1528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 1521
                self.match(s_cypherParser.T__0)
                self.state = 1523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1522
                    self.match(s_cypherParser.SP)


                self.state = 1525
                self.oC_SortItem()
                self.state = 1530
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = s_cypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1531
            self.match(s_cypherParser.L_SKIP)
            self.state = 1532
            self.match(s_cypherParser.SP)
            self.state = 1533
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = s_cypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1535
            self.match(s_cypherParser.LIMIT)
            self.state = 1536
            self.match(s_cypherParser.SP)
            self.state = 1537
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = s_cypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1539
            self.oC_Expression()
            self.state = 1544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.state = 1541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1540
                    self.match(s_cypherParser.SP)


                self.state = 1543
                _la = self._input.LA(1)
                if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = s_cypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1546
            self.match(s_cypherParser.WHERE)
            self.state = 1547
            self.match(s_cypherParser.SP)
            self.state = 1548
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = s_cypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1550
            self.oC_PatternPart()
            self.state = 1561
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,283,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1552
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1551
                        self.match(s_cypherParser.SP)


                    self.state = 1554
                    self.match(s_cypherParser.T__0)
                    self.state = 1556
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1555
                        self.match(s_cypherParser.SP)


                    self.state = 1558
                    self.oC_PatternPart() 
                self.state = 1563
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,283,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = s_cypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1564
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = s_cypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 1580
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1566
                self.oC_NodePattern()
                self.state = 1573
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,285,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1568
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1567
                            self.match(s_cypherParser.SP)


                        self.state = 1570
                        self.oC_PatternElementChain() 
                    self.state = 1575
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,285,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1576
                self.match(s_cypherParser.T__7)
                self.state = 1577
                self.oC_PatternElement()
                self.state = 1578
                self.match(s_cypherParser.T__8)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = s_cypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1582
            self.oC_NodePattern()
            self.state = 1587 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1584
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1583
                        self.match(s_cypherParser.SP)


                    self.state = 1586
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 1589 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,288,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = s_cypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1591
            self.oC_RelationshipPattern()
            self.state = 1593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1592
                self.match(s_cypherParser.SP)


            self.state = 1595
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = s_cypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 1661
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1597
                self.oC_LeftArrowHead()
                self.state = 1599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1598
                    self.match(s_cypherParser.SP)


                self.state = 1601
                self.oC_Dash()
                self.state = 1603
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
                if la_ == 1:
                    self.state = 1602
                    self.match(s_cypherParser.SP)


                self.state = 1606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1605
                    self.oC_RelationshipDetail()


                self.state = 1609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1608
                    self.match(s_cypherParser.SP)


                self.state = 1611
                self.oC_Dash()
                self.state = 1613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1612
                    self.match(s_cypherParser.SP)


                self.state = 1615
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1617
                self.oC_LeftArrowHead()
                self.state = 1619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1618
                    self.match(s_cypherParser.SP)


                self.state = 1621
                self.oC_Dash()
                self.state = 1623
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
                if la_ == 1:
                    self.state = 1622
                    self.match(s_cypherParser.SP)


                self.state = 1626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1625
                    self.oC_RelationshipDetail()


                self.state = 1629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1628
                    self.match(s_cypherParser.SP)


                self.state = 1631
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1633
                self.oC_Dash()
                self.state = 1635
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
                if la_ == 1:
                    self.state = 1634
                    self.match(s_cypherParser.SP)


                self.state = 1638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1637
                    self.oC_RelationshipDetail()


                self.state = 1641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1640
                    self.match(s_cypherParser.SP)


                self.state = 1643
                self.oC_Dash()
                self.state = 1645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1644
                    self.match(s_cypherParser.SP)


                self.state = 1647
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1649
                self.oC_Dash()
                self.state = 1651
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
                if la_ == 1:
                    self.state = 1650
                    self.match(s_cypherParser.SP)


                self.state = 1654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1653
                    self.oC_RelationshipDetail()


                self.state = 1657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1656
                    self.match(s_cypherParser.SP)


                self.state = 1659
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = s_cypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_Properties)
        try:
            self.state = 1665
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1663
                self.oC_MapLiteral()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1664
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = s_cypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1667
            self.match(s_cypherParser.T__9)
            self.state = 1669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1668
                self.match(s_cypherParser.SP)


            self.state = 1671
            self.oC_RelTypeName()
            self.state = 1685
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,312,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1673
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1672
                        self.match(s_cypherParser.SP)


                    self.state = 1675
                    self.match(s_cypherParser.T__24)
                    self.state = 1677
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==10:
                        self.state = 1676
                        self.match(s_cypherParser.T__9)


                    self.state = 1680
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1679
                        self.match(s_cypherParser.SP)


                    self.state = 1682
                    self.oC_RelTypeName() 
                self.state = 1687
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,312,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = s_cypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1688
            self.oC_NodeLabel()
            self.state = 1695
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,314,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1690
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1689
                        self.match(s_cypherParser.SP)


                    self.state = 1692
                    self.oC_NodeLabel() 
                self.state = 1697
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,314,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = s_cypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1698
            self.match(s_cypherParser.T__9)
            self.state = 1700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1699
                self.match(s_cypherParser.SP)


            self.state = 1702
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = s_cypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1704
            self.match(s_cypherParser.T__4)
            self.state = 1706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1705
                self.match(s_cypherParser.SP)


            self.state = 1712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                self.state = 1708
                self.oC_IntegerLiteral()
                self.state = 1710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1709
                    self.match(s_cypherParser.SP)




            self.state = 1724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 1714
                self.match(s_cypherParser.T__22)
                self.state = 1716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1715
                    self.match(s_cypherParser.SP)


                self.state = 1722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                    self.state = 1718
                    self.oC_IntegerLiteral()
                    self.state = 1720
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1719
                        self.match(s_cypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = s_cypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1726
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = s_cypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1728
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = s_cypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1730
            self.oC_Atom()
            self.state = 1735 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1732
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1731
                        self.match(s_cypherParser.SP)


                    self.state = 1734
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 1737 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,324,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = s_cypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1739
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = s_cypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1741
            self.oC_XorExpression()
            self.state = 1748
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,325,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1742
                    self.match(s_cypherParser.SP)
                    self.state = 1743
                    self.match(s_cypherParser.OR)
                    self.state = 1744
                    self.match(s_cypherParser.SP)
                    self.state = 1745
                    self.oC_XorExpression() 
                self.state = 1750
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,325,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = s_cypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1751
            self.oC_AndExpression()
            self.state = 1758
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,326,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1752
                    self.match(s_cypherParser.SP)
                    self.state = 1753
                    self.match(s_cypherParser.XOR)
                    self.state = 1754
                    self.match(s_cypherParser.SP)
                    self.state = 1755
                    self.oC_AndExpression() 
                self.state = 1760
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,326,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = s_cypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1761
            self.oC_NotExpression()
            self.state = 1768
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,327,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1762
                    self.match(s_cypherParser.SP)
                    self.state = 1763
                    self.match(s_cypherParser.AND)
                    self.state = 1764
                    self.match(s_cypherParser.SP)
                    self.state = 1765
                    self.oC_NotExpression() 
                self.state = 1770
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,327,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = s_cypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1771
                self.match(s_cypherParser.NOT)
                self.state = 1773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1772
                    self.match(s_cypherParser.SP)


                self.state = 1779
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1780
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PartialComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PartialComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PartialComparisonExpression" ):
                listener.enterOC_PartialComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PartialComparisonExpression" ):
                listener.exitOC_PartialComparisonExpression(self)




    def oC_PartialComparisonExpression(self):

        localctx = s_cypherParser.OC_PartialComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_oC_PartialComparisonExpression)
        self._la = 0 # Token type
        try:
            self.state = 1812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1782
                self.match(s_cypherParser.T__1)
                self.state = 1784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1783
                    self.match(s_cypherParser.SP)


                self.state = 1786
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1787
                self.match(s_cypherParser.T__17)
                self.state = 1789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1788
                    self.match(s_cypherParser.SP)


                self.state = 1791
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1792
                self.match(s_cypherParser.T__18)
                self.state = 1794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1793
                    self.match(s_cypherParser.SP)


                self.state = 1796
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1797
                self.match(s_cypherParser.T__20)
                self.state = 1799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1798
                    self.match(s_cypherParser.SP)


                self.state = 1801
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1802
                self.match(s_cypherParser.T__19)
                self.state = 1804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1803
                    self.match(s_cypherParser.SP)


                self.state = 1806
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1807
                self.match(s_cypherParser.T__21)
                self.state = 1809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1808
                    self.match(s_cypherParser.SP)


                self.state = 1811
                self.oC_StringListNullPredicateExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringPredicateExpression" ):
                listener.enterOC_StringPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringPredicateExpression" ):
                listener.exitOC_StringPredicateExpression(self)




    def oC_StringPredicateExpression(self):

        localctx = s_cypherParser.OC_StringPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_oC_StringPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
            if la_ == 1:
                self.state = 1814
                self.match(s_cypherParser.SP)
                self.state = 1815
                self.match(s_cypherParser.STARTS)
                self.state = 1816
                self.match(s_cypherParser.SP)
                self.state = 1817
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1818
                self.match(s_cypherParser.SP)
                self.state = 1819
                self.match(s_cypherParser.ENDS)
                self.state = 1820
                self.match(s_cypherParser.SP)
                self.state = 1821
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1822
                self.match(s_cypherParser.SP)
                self.state = 1823
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 1827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1826
                self.match(s_cypherParser.SP)


            self.state = 1829
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListPredicateExpression" ):
                listener.enterOC_ListPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListPredicateExpression" ):
                listener.exitOC_ListPredicateExpression(self)




    def oC_ListPredicateExpression(self):

        localctx = s_cypherParser.OC_ListPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_oC_ListPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1831
            self.match(s_cypherParser.SP)
            self.state = 1832
            self.match(s_cypherParser.IN)
            self.state = 1834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1833
                self.match(s_cypherParser.SP)


            self.state = 1836
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullPredicateExpression" ):
                listener.enterOC_NullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullPredicateExpression" ):
                listener.exitOC_NullPredicateExpression(self)




    def oC_NullPredicateExpression(self):

        localctx = s_cypherParser.OC_NullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_oC_NullPredicateExpression)
        try:
            self.state = 1848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1838
                self.match(s_cypherParser.SP)
                self.state = 1839
                self.match(s_cypherParser.IS)
                self.state = 1840
                self.match(s_cypherParser.SP)
                self.state = 1841
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1842
                self.match(s_cypherParser.SP)
                self.state = 1843
                self.match(s_cypherParser.IS)
                self.state = 1844
                self.match(s_cypherParser.SP)
                self.state = 1845
                self.match(s_cypherParser.NOT)
                self.state = 1846
                self.match(s_cypherParser.SP)
                self.state = 1847
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ListOperatorExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListOperatorExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.state = 1856
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 8, 11, 26, 48, 57, 92, 93, 94, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1850
                self.oC_ListOperatorExpression()
                pass
            elif token in [16, 17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1851
                _la = self._input.LA(1)
                if not(_la==16 or _la==17):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1852
                    self.match(s_cypherParser.SP)


                self.state = 1855
                self.oC_ListOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = s_cypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1858
            self.match(s_cypherParser.T__3)
            self.state = 1860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1859
                self.match(s_cypherParser.SP)


            self.state = 1862
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternComprehensionContext,0)


        def oC_Quantifier(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QuantifierContext,0)


        def oC_PatternPredicate(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPredicateContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionInvocationContext,0)


        def oC_ExistentialSubquery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExistentialSubqueryContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = s_cypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 1888
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,347,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1864
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1865
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1866
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1867
                self.match(s_cypherParser.COUNT)
                self.state = 1869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1868
                    self.match(s_cypherParser.SP)


                self.state = 1871
                self.match(s_cypherParser.T__7)
                self.state = 1873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1872
                    self.match(s_cypherParser.SP)


                self.state = 1875
                self.match(s_cypherParser.T__4)
                self.state = 1877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1876
                    self.match(s_cypherParser.SP)


                self.state = 1879
                self.match(s_cypherParser.T__8)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1880
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1881
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1882
                self.oC_Quantifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1883
                self.oC_PatternPredicate()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1884
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1885
                self.oC_FunctionInvocation()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1886
                self.oC_ExistentialSubquery()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1887
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def oC_CaseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_CaseAlternativeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = s_cypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1912
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,353,self._ctx)
            if la_ == 1:
                self.state = 1890
                self.match(s_cypherParser.CASE)
                self.state = 1895 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1892
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1891
                            self.match(s_cypherParser.SP)


                        self.state = 1894
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1897 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,349,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1899
                self.match(s_cypherParser.CASE)
                self.state = 1901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1900
                    self.match(s_cypherParser.SP)


                self.state = 1903
                self.oC_Expression()
                self.state = 1908 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1905
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1904
                            self.match(s_cypherParser.SP)


                        self.state = 1907
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1910 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,352,self._ctx)

                pass


            self.state = 1922
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,356,self._ctx)
            if la_ == 1:
                self.state = 1915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1914
                    self.match(s_cypherParser.SP)


                self.state = 1917
                self.match(s_cypherParser.ELSE)
                self.state = 1919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1918
                    self.match(s_cypherParser.SP)


                self.state = 1921
                self.oC_Expression()


            self.state = 1925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1924
                self.match(s_cypherParser.SP)


            self.state = 1927
            self.match(s_cypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternative" ):
                listener.enterOC_CaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternative" ):
                listener.exitOC_CaseAlternative(self)




    def oC_CaseAlternative(self):

        localctx = s_cypherParser.OC_CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_oC_CaseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1929
            self.match(s_cypherParser.WHEN)
            self.state = 1931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1930
                self.match(s_cypherParser.SP)


            self.state = 1933
            self.oC_Expression()
            self.state = 1935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1934
                self.match(s_cypherParser.SP)


            self.state = 1937
            self.match(s_cypherParser.THEN)
            self.state = 1939
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1938
                self.match(s_cypherParser.SP)


            self.state = 1941
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = s_cypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1943
            self.match(s_cypherParser.T__10)
            self.state = 1945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1944
                self.match(s_cypherParser.SP)


            self.state = 1947
            self.oC_FilterExpression()
            self.state = 1956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
            if la_ == 1:
                self.state = 1949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1948
                    self.match(s_cypherParser.SP)


                self.state = 1951
                self.match(s_cypherParser.T__24)
                self.state = 1953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1952
                    self.match(s_cypherParser.SP)


                self.state = 1955
                self.oC_Expression()


            self.state = 1959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1958
                self.match(s_cypherParser.SP)


            self.state = 1961
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = s_cypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1963
            self.match(s_cypherParser.T__10)
            self.state = 1965
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1964
                self.match(s_cypherParser.SP)


            self.state = 1975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625937) != 0):
                self.state = 1967
                self.oC_Variable()
                self.state = 1969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1968
                    self.match(s_cypherParser.SP)


                self.state = 1971
                self.match(s_cypherParser.T__1)
                self.state = 1973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1972
                    self.match(s_cypherParser.SP)




            self.state = 1977
            self.oC_RelationshipsPattern()
            self.state = 1979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1978
                self.match(s_cypherParser.SP)


            self.state = 1985
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 1981
                self.oC_Where()
                self.state = 1983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1982
                    self.match(s_cypherParser.SP)




            self.state = 1987
            self.match(s_cypherParser.T__24)
            self.state = 1989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1988
                self.match(s_cypherParser.SP)


            self.state = 1991
            self.oC_Expression()
            self.state = 1993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1992
                self.match(s_cypherParser.SP)


            self.state = 1995
            self.match(s_cypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Quantifier" ):
                listener.enterOC_Quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Quantifier" ):
                listener.exitOC_Quantifier(self)




    def oC_Quantifier(self):

        localctx = s_cypherParser.OC_QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_oC_Quantifier)
        self._la = 0 # Token type
        try:
            self.state = 2053
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1997
                self.match(s_cypherParser.ALL)
                self.state = 1999
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1998
                    self.match(s_cypherParser.SP)


                self.state = 2001
                self.match(s_cypherParser.T__7)
                self.state = 2003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2002
                    self.match(s_cypherParser.SP)


                self.state = 2005
                self.oC_FilterExpression()
                self.state = 2007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2006
                    self.match(s_cypherParser.SP)


                self.state = 2009
                self.match(s_cypherParser.T__8)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2011
                self.match(s_cypherParser.ANY)
                self.state = 2013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2012
                    self.match(s_cypherParser.SP)


                self.state = 2015
                self.match(s_cypherParser.T__7)
                self.state = 2017
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2016
                    self.match(s_cypherParser.SP)


                self.state = 2019
                self.oC_FilterExpression()
                self.state = 2021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2020
                    self.match(s_cypherParser.SP)


                self.state = 2023
                self.match(s_cypherParser.T__8)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2025
                self.match(s_cypherParser.NONE)
                self.state = 2027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2026
                    self.match(s_cypherParser.SP)


                self.state = 2029
                self.match(s_cypherParser.T__7)
                self.state = 2031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2030
                    self.match(s_cypherParser.SP)


                self.state = 2033
                self.oC_FilterExpression()
                self.state = 2035
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2034
                    self.match(s_cypherParser.SP)


                self.state = 2037
                self.match(s_cypherParser.T__8)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2039
                self.match(s_cypherParser.SINGLE)
                self.state = 2041
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2040
                    self.match(s_cypherParser.SP)


                self.state = 2043
                self.match(s_cypherParser.T__7)
                self.state = 2045
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2044
                    self.match(s_cypherParser.SP)


                self.state = 2047
                self.oC_FilterExpression()
                self.state = 2049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2048
                    self.match(s_cypherParser.SP)


                self.state = 2051
                self.match(s_cypherParser.T__8)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPredicate" ):
                listener.enterOC_PatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPredicate" ):
                listener.exitOC_PatternPredicate(self)




    def oC_PatternPredicate(self):

        localctx = s_cypherParser.OC_PatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_oC_PatternPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2055
            self.oC_RelationshipsPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = s_cypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2057
            self.match(s_cypherParser.T__7)
            self.state = 2059
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2058
                self.match(s_cypherParser.SP)


            self.state = 2061
            self.oC_Expression()
            self.state = 2063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2062
                self.match(s_cypherParser.SP)


            self.state = 2065
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = s_cypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2067
            self.oC_Variable()
            self.state = 2068
            self.match(s_cypherParser.SP)
            self.state = 2069
            self.match(s_cypherParser.IN)
            self.state = 2070
            self.match(s_cypherParser.SP)
            self.state = 2071
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = s_cypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_oC_FunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2073
            self.oC_Namespace()
            self.state = 2074
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2076
            self.oC_ProcedureName()
            self.state = 2078
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2077
                self.match(s_cypherParser.SP)


            self.state = 2080
            self.match(s_cypherParser.T__7)
            self.state = 2082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2081
                self.match(s_cypherParser.SP)


            self.state = 2101
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119874368) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394345409) != 0):
                self.state = 2084
                self.oC_Expression()
                self.state = 2086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2085
                    self.match(s_cypherParser.SP)


                self.state = 2098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 2088
                    self.match(s_cypherParser.T__0)
                    self.state = 2090
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2089
                        self.match(s_cypherParser.SP)


                    self.state = 2092
                    self.oC_Expression()
                    self.state = 2094
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2093
                        self.match(s_cypherParser.SP)


                    self.state = 2100
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2103
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2105
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = s_cypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2107
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = s_cypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2109
            self.oC_Namespace()
            self.state = 2110
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = s_cypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2117
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,397,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2112
                    self.oC_SymbolicName()
                    self.state = 2113
                    self.match(s_cypherParser.T__3) 
                self.state = 2119
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,397,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = s_cypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2120
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_ListLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListLiteralContext,0)


        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = s_cypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_oC_Literal)
        try:
            self.state = 2128
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2122
                self.oC_BooleanLiteral()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2123
                self.match(s_cypherParser.NULL)
                pass
            elif token in [105, 106, 107, 115, 116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2124
                self.oC_NumberLiteral()
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2125
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2126
                self.oC_ListLiteral()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2127
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = s_cypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2130
            _la = self._input.LA(1)
            if not(_la==103 or _la==104):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = s_cypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_oC_NumberLiteral)
        try:
            self.state = 2134
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115, 116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2132
                self.oC_DoubleLiteral()
                pass
            elif token in [105, 106, 107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2133
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(s_cypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(s_cypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = s_cypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2136
            _la = self._input.LA(1)
            if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(s_cypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(s_cypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = s_cypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2138
            _la = self._input.LA(1)
            if not(_la==115 or _la==116):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = s_cypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2140
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = s_cypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2142
            self.match(s_cypherParser.T__25)
            self.state = 2145
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 93, 97, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 2143
                self.oC_SymbolicName()
                pass
            elif token in [106]:
                self.state = 2144
                self.match(s_cypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = s_cypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_oC_SchemaName)
        try:
            self.state = 2149
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,401,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2147
                self.oC_SymbolicName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2148
                self.oC_ReservedWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = s_cypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2151
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2013790208) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = s_cypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2153
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32214351872) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = s_cypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2155
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70334384570368) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





