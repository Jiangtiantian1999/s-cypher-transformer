# Generated from .\s_cypher.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,137,2326,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,1,0,1,0,1,0,3,0,316,8,0,1,1,1,1,3,
        1,320,8,1,1,1,1,1,3,1,324,8,1,1,1,1,1,3,1,328,8,1,1,1,1,1,3,1,332,
        8,1,3,1,334,8,1,1,1,3,1,337,8,1,1,1,3,1,340,8,1,1,2,1,2,1,2,1,2,
        1,2,1,2,3,2,348,8,2,1,2,3,2,351,8,2,1,2,3,2,354,8,2,1,3,1,3,3,3,
        358,8,3,1,3,1,3,1,3,1,3,3,3,364,8,3,1,3,3,3,367,8,3,1,3,1,3,1,3,
        1,3,1,3,3,3,374,8,3,1,3,3,3,377,8,3,1,3,1,3,1,3,3,3,382,8,3,1,3,
        1,3,1,3,1,3,3,3,388,8,3,1,3,3,3,391,8,3,1,3,1,3,1,3,3,3,396,8,3,
        1,3,1,3,3,3,400,8,3,1,3,1,3,1,3,1,3,3,3,406,8,3,1,3,1,3,3,3,410,
        8,3,1,3,1,3,1,3,1,3,3,3,416,8,3,1,3,1,3,3,3,420,8,3,1,3,1,3,1,3,
        1,3,3,3,426,8,3,1,3,1,3,3,3,430,8,3,1,3,1,3,1,3,1,3,3,3,436,8,3,
        1,3,1,3,3,3,440,8,3,1,4,1,4,3,4,444,8,4,1,4,1,4,1,5,1,5,3,5,450,
        8,5,1,5,3,5,453,8,5,1,6,1,6,3,6,457,8,6,1,6,1,6,1,7,1,7,3,7,463,
        8,7,1,7,3,7,466,8,7,1,8,1,8,3,8,470,8,8,1,8,1,8,3,8,474,8,8,1,8,
        1,8,3,8,478,8,8,1,8,5,8,481,8,8,10,8,12,8,484,9,8,1,9,1,9,1,9,1,
        9,3,9,490,8,9,1,9,1,9,1,9,3,9,495,8,9,1,10,1,10,3,10,499,8,10,1,
        10,1,10,3,10,503,8,10,1,10,1,10,3,10,507,8,10,1,10,1,10,3,10,511,
        8,10,1,10,5,10,514,8,10,10,10,12,10,517,9,10,1,11,1,11,1,11,1,11,
        3,11,523,8,11,1,11,1,11,1,11,3,11,528,8,11,1,12,1,12,3,12,532,8,
        12,1,12,1,12,1,13,1,13,3,13,538,8,13,1,13,1,13,1,14,1,14,3,14,544,
        8,14,1,15,1,15,3,15,548,8,15,1,15,1,15,1,16,1,16,3,16,554,8,16,1,
        16,1,16,1,17,1,17,3,17,560,8,17,1,17,1,17,3,17,564,8,17,1,17,1,17,
        1,17,1,17,3,17,570,8,17,1,17,1,17,3,17,574,8,17,1,17,1,17,1,17,3,
        17,579,8,17,1,18,1,18,3,18,583,8,18,1,18,1,18,3,18,587,8,18,1,18,
        1,18,3,18,591,8,18,1,18,1,18,1,19,1,19,3,19,597,8,19,1,19,1,19,3,
        19,601,8,19,1,19,1,19,1,20,1,20,3,20,607,8,20,1,20,1,20,3,20,611,
        8,20,3,20,613,8,20,1,20,1,20,3,20,617,8,20,3,20,619,8,20,1,20,1,
        20,3,20,623,8,20,3,20,625,8,20,1,20,1,20,3,20,629,8,20,3,20,631,
        8,20,1,20,1,20,1,21,1,21,3,21,637,8,21,1,22,1,22,3,22,641,8,22,1,
        22,1,22,1,22,1,22,1,22,3,22,648,8,22,1,22,1,22,1,22,1,22,5,22,654,
        8,22,10,22,12,22,657,9,22,3,22,659,8,22,1,22,1,22,1,23,1,23,3,23,
        665,8,23,1,23,1,23,3,23,669,8,23,3,23,671,8,23,1,24,3,24,674,8,24,
        1,24,1,24,3,24,678,8,24,1,24,1,24,3,24,682,8,24,3,24,684,8,24,1,
        25,1,25,3,25,688,8,25,1,25,1,25,3,25,692,8,25,3,25,694,8,25,1,25,
        1,25,3,25,698,8,25,3,25,700,8,25,1,25,3,25,703,8,25,1,25,1,25,3,
        25,707,8,25,3,25,709,8,25,1,25,1,25,3,25,713,8,25,3,25,715,8,25,
        1,25,1,25,1,26,1,26,1,26,1,26,1,26,3,26,724,8,26,1,27,1,27,3,27,
        728,8,27,1,27,1,27,5,27,732,8,27,10,27,12,27,735,9,27,1,28,3,28,
        738,8,28,1,28,1,28,1,28,1,28,1,29,3,29,745,8,29,1,29,1,29,3,29,749,
        8,29,1,29,1,29,3,29,753,8,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,
        1,32,3,32,763,8,32,1,32,4,32,766,8,32,11,32,12,32,767,1,32,3,32,
        771,8,32,1,32,3,32,774,8,32,3,32,776,8,32,1,32,3,32,779,8,32,1,32,
        1,32,1,33,1,33,3,33,785,8,33,1,33,5,33,788,8,33,10,33,12,33,791,
        9,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,3,35,800,8,35,1,35,1,35,
        3,35,804,8,35,1,35,1,35,3,35,808,8,35,1,35,1,35,3,35,812,8,35,1,
        35,1,35,3,35,816,8,35,1,35,3,35,819,8,35,1,35,1,35,1,36,1,36,1,36,
        1,36,1,37,1,37,1,38,1,38,1,38,1,38,1,38,5,38,834,8,38,10,38,12,38,
        837,9,38,1,39,1,39,1,39,1,39,1,39,5,39,844,8,39,10,39,12,39,847,
        9,39,1,40,1,40,1,40,1,40,1,40,5,40,854,8,40,10,40,12,40,857,9,40,
        1,41,1,41,3,41,861,8,41,5,41,863,8,41,10,41,12,41,866,9,41,1,41,
        1,41,1,42,1,42,3,42,872,8,42,1,42,5,42,875,8,42,10,42,12,42,878,
        9,42,1,43,1,43,3,43,882,8,43,1,43,1,43,1,43,1,43,3,43,888,8,43,1,
        43,1,43,1,43,1,43,3,43,894,8,43,1,43,1,43,1,43,1,43,3,43,900,8,43,
        1,43,1,43,1,43,1,43,3,43,906,8,43,1,43,1,43,1,43,1,43,3,43,912,8,
        43,1,43,1,43,3,43,916,8,43,1,44,1,44,1,44,1,44,1,44,3,44,923,8,44,
        1,45,1,45,3,45,927,8,45,1,45,1,45,3,45,931,8,45,1,45,1,45,1,45,3,
        45,936,8,45,1,45,1,45,3,45,940,8,45,1,45,1,45,5,45,944,8,45,10,45,
        12,45,947,9,45,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,1,47,1,47,1,47,3,47,964,8,47,1,47,3,47,967,8,47,1,47,1,
        47,1,48,1,48,1,48,3,48,974,8,48,1,48,1,48,1,49,1,49,1,49,1,49,1,
        49,1,49,1,49,1,49,1,49,1,49,3,49,988,8,49,1,50,1,50,3,50,992,8,50,
        1,50,1,50,3,50,996,8,50,1,50,1,50,1,50,3,50,1001,8,50,1,50,1,50,
        3,50,1005,8,50,1,50,1,50,1,50,3,50,1010,8,50,1,50,1,50,3,50,1014,
        8,50,1,50,1,50,5,50,1018,8,50,10,50,12,50,1021,9,50,1,51,1,51,3,
        51,1025,8,51,1,51,1,51,3,51,1029,8,51,1,51,1,51,5,51,1033,8,51,10,
        51,12,51,1036,9,51,1,52,1,52,1,52,3,52,1041,8,52,1,52,3,52,1044,
        8,52,1,53,1,53,3,53,1048,8,53,1,53,1,53,5,53,1052,8,53,10,53,12,
        53,1055,9,53,1,54,1,54,3,54,1059,8,54,1,54,5,54,1062,8,54,10,54,
        12,54,1065,9,54,1,54,3,54,1068,8,54,1,54,3,54,1071,8,54,1,55,1,55,
        3,55,1075,8,55,1,55,4,55,1078,8,55,11,55,12,55,1079,1,55,3,55,1083,
        8,55,1,55,3,55,1086,8,55,3,55,1088,8,55,1,55,3,55,1091,8,55,1,55,
        1,55,1,56,3,56,1096,8,56,1,56,1,56,1,56,1,56,1,57,3,57,1103,8,57,
        1,57,1,57,3,57,1107,8,57,1,57,1,57,3,57,1111,8,57,1,57,1,57,1,58,
        1,58,1,59,1,59,1,60,1,60,3,60,1121,8,60,1,61,1,61,1,62,1,62,1,63,
        3,63,1128,8,63,1,63,1,63,3,63,1132,8,63,1,63,3,63,1135,8,63,1,63,
        3,63,1138,8,63,1,63,1,63,1,64,1,64,1,65,1,65,3,65,1146,8,65,1,65,
        5,65,1149,8,65,10,65,12,65,1152,9,65,1,66,1,66,1,66,1,66,3,66,1158,
        8,66,1,66,1,66,1,66,3,66,1163,8,66,1,66,3,66,1166,8,66,1,67,1,67,
        3,67,1170,8,67,1,68,1,68,3,68,1174,8,68,5,68,1176,8,68,10,68,12,
        68,1179,9,68,1,68,1,68,1,68,3,68,1184,8,68,5,68,1186,8,68,10,68,
        12,68,1189,9,68,1,68,1,68,3,68,1193,8,68,1,68,5,68,1196,8,68,10,
        68,12,68,1199,9,68,1,68,3,68,1202,8,68,1,68,3,68,1205,8,68,3,68,
        1207,8,68,1,69,4,69,1210,8,69,11,69,12,69,1211,1,69,1,69,1,70,1,
        70,3,70,1218,8,70,5,70,1220,8,70,10,70,12,70,1223,9,70,1,70,1,70,
        3,70,1227,8,70,5,70,1229,8,70,10,70,12,70,1232,9,70,1,70,1,70,3,
        70,1236,8,70,1,71,1,71,1,71,3,71,1241,8,71,1,72,1,72,3,72,1245,8,
        72,1,72,1,72,1,72,1,72,1,72,1,72,1,73,1,73,3,73,1255,8,73,1,73,1,
        73,1,73,5,73,1260,8,73,10,73,12,73,1263,9,73,1,74,1,74,1,74,1,74,
        1,74,1,74,1,74,1,74,1,74,1,74,3,74,1275,8,74,1,75,1,75,3,75,1279,
        8,75,1,75,1,75,1,76,1,76,3,76,1285,8,76,1,76,1,76,3,76,1289,8,76,
        1,76,1,76,3,76,1293,8,76,1,76,5,76,1296,8,76,10,76,12,76,1299,9,
        76,1,77,1,77,1,77,1,77,3,77,1305,8,77,1,77,1,77,3,77,1309,8,77,1,
        77,5,77,1312,8,77,10,77,12,77,1315,9,77,1,78,1,78,1,78,1,78,3,78,
        1321,8,78,1,79,1,79,1,79,1,79,3,79,1327,8,79,1,79,1,79,1,79,3,79,
        1332,8,79,1,80,1,80,1,80,1,80,3,80,1338,8,80,1,80,3,80,1341,8,80,
        1,80,1,80,1,80,1,80,3,80,1347,8,80,3,80,1349,8,80,1,81,1,81,3,81,
        1353,8,81,1,81,1,81,3,81,1357,8,81,1,81,5,81,1360,8,81,10,81,12,
        81,1363,9,81,1,81,3,81,1366,8,81,1,81,3,81,1369,8,81,1,82,1,82,1,
        82,1,82,1,82,3,82,1376,8,82,1,83,1,83,1,83,3,83,1381,8,83,1,83,3,
        83,1384,8,83,1,84,1,84,1,84,1,85,3,85,1390,8,85,1,85,3,85,1393,8,
        85,1,85,1,85,1,85,1,85,3,85,1399,8,85,1,85,1,85,3,85,1403,8,85,1,
        85,1,85,3,85,1407,8,85,1,86,1,86,3,86,1411,8,86,1,86,1,86,3,86,1415,
        8,86,1,86,5,86,1418,8,86,10,86,12,86,1421,9,86,1,86,1,86,3,86,1425,
        8,86,1,86,1,86,3,86,1429,8,86,1,86,5,86,1432,8,86,10,86,12,86,1435,
        9,86,3,86,1437,8,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1446,
        8,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,1455,8,88,1,88,5,88,
        1458,8,88,10,88,12,88,1461,9,88,1,89,1,89,1,89,1,89,1,90,1,90,1,
        90,1,90,1,91,1,91,3,91,1473,8,91,1,91,3,91,1476,8,91,1,92,1,92,1,
        92,1,92,1,93,1,93,3,93,1484,8,93,1,93,1,93,3,93,1488,8,93,1,93,5,
        93,1491,8,93,10,93,12,93,1494,9,93,1,94,1,94,1,95,1,95,3,95,1500,
        8,95,1,95,5,95,1503,8,95,10,95,12,95,1506,9,95,1,95,1,95,1,95,1,
        95,3,95,1512,8,95,1,96,1,96,3,96,1516,8,96,1,96,4,96,1519,8,96,11,
        96,12,96,1520,1,97,1,97,3,97,1525,8,97,1,97,1,97,1,98,1,98,3,98,
        1531,8,98,1,98,1,98,3,98,1535,8,98,1,98,3,98,1538,8,98,1,98,3,98,
        1541,8,98,1,98,1,98,3,98,1545,8,98,1,98,1,98,1,98,1,98,3,98,1551,
        8,98,1,98,1,98,3,98,1555,8,98,1,98,3,98,1558,8,98,1,98,3,98,1561,
        8,98,1,98,1,98,1,98,1,98,3,98,1567,8,98,1,98,3,98,1570,8,98,1,98,
        3,98,1573,8,98,1,98,1,98,3,98,1577,8,98,1,98,1,98,1,98,1,98,3,98,
        1583,8,98,1,98,3,98,1586,8,98,1,98,3,98,1589,8,98,1,98,1,98,3,98,
        1593,8,98,1,99,1,99,3,99,1597,8,99,1,100,1,100,3,100,1601,8,100,
        1,100,1,100,3,100,1605,8,100,1,100,1,100,3,100,1609,8,100,1,100,
        3,100,1612,8,100,1,100,5,100,1615,8,100,10,100,12,100,1618,9,100,
        1,101,1,101,3,101,1622,8,101,1,101,5,101,1625,8,101,10,101,12,101,
        1628,9,101,1,102,1,102,3,102,1632,8,102,1,102,1,102,1,103,1,103,
        3,103,1638,8,103,1,103,1,103,3,103,1642,8,103,3,103,1644,8,103,1,
        103,1,103,3,103,1648,8,103,1,103,1,103,3,103,1652,8,103,3,103,1654,
        8,103,3,103,1656,8,103,1,104,1,104,1,105,1,105,1,106,1,106,3,106,
        1664,8,106,1,106,4,106,1667,8,106,11,106,12,106,1668,1,107,1,107,
        1,108,1,108,1,108,1,108,1,108,5,108,1678,8,108,10,108,12,108,1681,
        9,108,1,109,1,109,1,109,1,109,1,109,5,109,1688,8,109,10,109,12,109,
        1691,9,109,1,110,1,110,1,110,1,110,1,110,5,110,1698,8,110,10,110,
        12,110,1701,9,110,1,111,1,111,3,111,1705,8,111,5,111,1707,8,111,
        10,111,12,111,1710,9,111,1,111,1,111,1,112,1,112,3,112,1716,8,112,
        1,112,5,112,1719,8,112,10,112,12,112,1722,9,112,1,113,1,113,3,113,
        1726,8,113,1,113,1,113,1,113,1,113,3,113,1732,8,113,1,113,1,113,
        1,113,1,113,3,113,1738,8,113,1,113,1,113,1,113,1,113,3,113,1744,
        8,113,1,113,1,113,1,113,1,113,3,113,1750,8,113,1,113,1,113,1,113,
        1,113,3,113,1756,8,113,1,113,1,113,3,113,1760,8,113,1,114,1,114,
        1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,3,114,1772,8,114,
        1,114,3,114,1775,8,114,1,114,1,114,1,115,1,115,1,115,3,115,1782,
        8,115,1,115,1,115,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,
        1,116,1,116,3,116,1796,8,116,1,117,1,117,3,117,1800,8,117,1,117,
        1,117,3,117,1804,8,117,1,117,1,117,1,117,3,117,1809,8,117,1,117,
        1,117,3,117,1813,8,117,1,117,1,117,5,117,1817,8,117,10,117,12,117,
        1820,9,117,1,118,1,118,1,119,1,119,3,119,1826,8,119,1,119,1,119,
        3,119,1830,8,119,1,119,1,119,1,119,3,119,1835,8,119,1,119,1,119,
        3,119,1839,8,119,1,119,1,119,1,119,3,119,1844,8,119,1,119,1,119,
        3,119,1848,8,119,1,119,1,119,5,119,1852,8,119,10,119,12,119,1855,
        9,119,1,120,1,120,3,120,1859,8,120,1,120,1,120,3,120,1863,8,120,
        1,120,1,120,5,120,1867,8,120,10,120,12,120,1870,9,120,1,121,1,121,
        1,121,3,121,1875,8,121,1,121,3,121,1878,8,121,1,122,1,122,3,122,
        1882,8,122,1,122,5,122,1885,8,122,10,122,12,122,1888,9,122,1,122,
        3,122,1891,8,122,1,122,3,122,1894,8,122,1,123,1,123,3,123,1898,8,
        123,1,123,1,123,1,124,1,124,1,124,1,124,1,124,3,124,1907,8,124,1,
        124,1,124,3,124,1911,8,124,1,124,1,124,3,124,1915,8,124,1,124,1,
        124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,3,124,1926,8,124,1,
        125,1,125,3,125,1930,8,125,1,125,4,125,1933,8,125,11,125,12,125,
        1934,1,125,1,125,3,125,1939,8,125,1,125,1,125,3,125,1943,8,125,1,
        125,4,125,1946,8,125,11,125,12,125,1947,3,125,1950,8,125,1,125,3,
        125,1953,8,125,1,125,1,125,3,125,1957,8,125,1,125,3,125,1960,8,125,
        1,125,3,125,1963,8,125,1,125,1,125,1,126,1,126,3,126,1969,8,126,
        1,126,1,126,3,126,1973,8,126,1,126,1,126,3,126,1977,8,126,1,126,
        1,126,1,127,1,127,3,127,1983,8,127,1,127,1,127,3,127,1987,8,127,
        1,127,1,127,3,127,1991,8,127,1,127,3,127,1994,8,127,1,127,3,127,
        1997,8,127,1,127,1,127,1,128,1,128,3,128,2003,8,128,1,128,1,128,
        3,128,2007,8,128,1,128,1,128,3,128,2011,8,128,3,128,2013,8,128,1,
        128,1,128,3,128,2017,8,128,1,128,1,128,3,128,2021,8,128,3,128,2023,
        8,128,1,128,1,128,3,128,2027,8,128,1,128,1,128,3,128,2031,8,128,
        1,128,1,128,1,129,1,129,3,129,2037,8,129,1,129,1,129,3,129,2041,
        8,129,1,129,1,129,3,129,2045,8,129,1,129,1,129,1,129,1,129,3,129,
        2051,8,129,1,129,1,129,3,129,2055,8,129,1,129,1,129,3,129,2059,8,
        129,1,129,1,129,1,129,1,129,3,129,2065,8,129,1,129,1,129,3,129,2069,
        8,129,1,129,1,129,3,129,2073,8,129,1,129,1,129,1,129,1,129,3,129,
        2079,8,129,1,129,1,129,3,129,2083,8,129,1,129,1,129,3,129,2087,8,
        129,1,129,1,129,3,129,2091,8,129,1,130,1,130,3,130,2095,8,130,1,
        130,3,130,2098,8,130,1,131,1,131,1,132,1,132,3,132,2104,8,132,1,
        132,1,132,3,132,2108,8,132,1,132,1,132,1,133,1,133,1,133,1,133,1,
        133,1,133,1,134,1,134,3,134,2120,8,134,1,134,1,134,3,134,2124,8,
        134,1,134,1,134,3,134,2128,8,134,3,134,2130,8,134,1,134,1,134,3,
        134,2134,8,134,1,134,1,134,3,134,2138,8,134,1,134,1,134,3,134,2142,
        8,134,5,134,2144,8,134,10,134,12,134,2147,9,134,3,134,2149,8,134,
        1,134,1,134,1,135,1,135,1,135,1,136,1,136,3,136,2158,8,136,1,136,
        1,136,3,136,2162,8,136,1,136,1,136,1,136,3,136,2167,8,136,1,136,
        3,136,2170,8,136,3,136,2172,8,136,1,136,3,136,2175,8,136,1,136,1,
        136,1,137,1,137,3,137,2181,8,137,1,137,1,137,3,137,2185,8,137,1,
        137,1,137,3,137,2189,8,137,1,137,1,137,3,137,2193,8,137,1,137,1,
        137,3,137,2197,8,137,5,137,2199,8,137,10,137,12,137,2202,9,137,3,
        137,2204,8,137,1,137,1,137,1,138,1,138,1,139,1,139,1,140,1,140,1,
        140,1,141,1,141,1,141,5,141,2218,8,141,10,141,12,141,2221,9,141,
        1,142,1,142,1,143,1,143,1,143,1,143,1,143,1,143,3,143,2231,8,143,
        1,144,1,144,1,145,1,145,3,145,2237,8,145,1,146,1,146,1,147,1,147,
        1,148,1,148,3,148,2245,8,148,1,148,1,148,3,148,2249,8,148,1,148,
        1,148,3,148,2253,8,148,1,148,1,148,3,148,2257,8,148,5,148,2259,8,
        148,10,148,12,148,2262,9,148,3,148,2264,8,148,1,148,1,148,1,149,
        1,149,3,149,2270,8,149,1,149,1,149,3,149,2274,8,149,1,149,1,149,
        3,149,2278,8,149,1,149,1,149,3,149,2282,8,149,1,149,1,149,3,149,
        2286,8,149,1,149,1,149,3,149,2290,8,149,1,149,1,149,3,149,2294,8,
        149,1,149,1,149,3,149,2298,8,149,5,149,2300,8,149,10,149,12,149,
        2303,9,149,3,149,2305,8,149,1,149,1,149,1,150,1,150,1,151,1,151,
        1,151,3,151,2314,8,151,1,152,1,152,3,152,2318,8,152,1,153,1,153,
        1,154,1,154,1,155,1,155,1,155,0,0,156,0,2,4,6,8,10,12,14,16,18,20,
        22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
        204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
        236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,
        268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,
        300,302,304,306,308,310,0,12,1,0,54,55,1,0,13,14,6,0,48,48,93,93,
        99,101,108,108,129,131,134,134,5,0,48,68,71,92,94,98,102,104,119,
        128,1,0,78,81,4,0,2,2,13,14,16,16,18,25,1,0,103,104,1,0,105,107,
        1,0,115,116,2,0,22,22,27,30,2,0,24,24,31,34,2,0,14,14,35,45,2637,
        0,315,1,0,0,0,2,319,1,0,0,0,4,347,1,0,0,0,6,439,1,0,0,0,8,441,1,
        0,0,0,10,447,1,0,0,0,12,454,1,0,0,0,14,460,1,0,0,0,16,467,1,0,0,
        0,18,494,1,0,0,0,20,498,1,0,0,0,22,527,1,0,0,0,24,529,1,0,0,0,26,
        535,1,0,0,0,28,543,1,0,0,0,30,545,1,0,0,0,32,551,1,0,0,0,34,578,
        1,0,0,0,36,580,1,0,0,0,38,594,1,0,0,0,40,604,1,0,0,0,42,636,1,0,
        0,0,44,638,1,0,0,0,46,662,1,0,0,0,48,673,1,0,0,0,50,685,1,0,0,0,
        52,718,1,0,0,0,54,727,1,0,0,0,56,737,1,0,0,0,58,744,1,0,0,0,60,756,
        1,0,0,0,62,758,1,0,0,0,64,760,1,0,0,0,66,782,1,0,0,0,68,792,1,0,
        0,0,70,797,1,0,0,0,72,822,1,0,0,0,74,826,1,0,0,0,76,828,1,0,0,0,
        78,838,1,0,0,0,80,848,1,0,0,0,82,864,1,0,0,0,84,869,1,0,0,0,86,915,
        1,0,0,0,88,917,1,0,0,0,90,924,1,0,0,0,92,948,1,0,0,0,94,963,1,0,
        0,0,96,970,1,0,0,0,98,987,1,0,0,0,100,989,1,0,0,0,102,1022,1,0,0,
        0,104,1043,1,0,0,0,106,1047,1,0,0,0,108,1056,1,0,0,0,110,1072,1,
        0,0,0,112,1095,1,0,0,0,114,1102,1,0,0,0,116,1114,1,0,0,0,118,1116,
        1,0,0,0,120,1120,1,0,0,0,122,1122,1,0,0,0,124,1124,1,0,0,0,126,1127,
        1,0,0,0,128,1141,1,0,0,0,130,1143,1,0,0,0,132,1165,1,0,0,0,134,1169,
        1,0,0,0,136,1206,1,0,0,0,138,1209,1,0,0,0,140,1221,1,0,0,0,142,1240,
        1,0,0,0,144,1242,1,0,0,0,146,1252,1,0,0,0,148,1274,1,0,0,0,150,1276,
        1,0,0,0,152,1282,1,0,0,0,154,1300,1,0,0,0,156,1320,1,0,0,0,158,1322,
        1,0,0,0,160,1333,1,0,0,0,162,1350,1,0,0,0,164,1370,1,0,0,0,166,1377,
        1,0,0,0,168,1385,1,0,0,0,170,1392,1,0,0,0,172,1436,1,0,0,0,174,1445,
        1,0,0,0,176,1447,1,0,0,0,178,1462,1,0,0,0,180,1466,1,0,0,0,182,1470,
        1,0,0,0,184,1477,1,0,0,0,186,1481,1,0,0,0,188,1495,1,0,0,0,190,1511,
        1,0,0,0,192,1513,1,0,0,0,194,1522,1,0,0,0,196,1592,1,0,0,0,198,1596,
        1,0,0,0,200,1598,1,0,0,0,202,1619,1,0,0,0,204,1629,1,0,0,0,206,1635,
        1,0,0,0,208,1657,1,0,0,0,210,1659,1,0,0,0,212,1661,1,0,0,0,214,1670,
        1,0,0,0,216,1672,1,0,0,0,218,1682,1,0,0,0,220,1692,1,0,0,0,222,1708,
        1,0,0,0,224,1713,1,0,0,0,226,1759,1,0,0,0,228,1771,1,0,0,0,230,1778,
        1,0,0,0,232,1795,1,0,0,0,234,1797,1,0,0,0,236,1821,1,0,0,0,238,1823,
        1,0,0,0,240,1856,1,0,0,0,242,1877,1,0,0,0,244,1879,1,0,0,0,246,1895,
        1,0,0,0,248,1925,1,0,0,0,250,1949,1,0,0,0,252,1966,1,0,0,0,254,1980,
        1,0,0,0,256,2000,1,0,0,0,258,2090,1,0,0,0,260,2092,1,0,0,0,262,2099,
        1,0,0,0,264,2101,1,0,0,0,266,2111,1,0,0,0,268,2117,1,0,0,0,270,2152,
        1,0,0,0,272,2155,1,0,0,0,274,2178,1,0,0,0,276,2207,1,0,0,0,278,2209,
        1,0,0,0,280,2211,1,0,0,0,282,2219,1,0,0,0,284,2222,1,0,0,0,286,2230,
        1,0,0,0,288,2232,1,0,0,0,290,2236,1,0,0,0,292,2238,1,0,0,0,294,2240,
        1,0,0,0,296,2242,1,0,0,0,298,2267,1,0,0,0,300,2308,1,0,0,0,302,2310,
        1,0,0,0,304,2317,1,0,0,0,306,2319,1,0,0,0,308,2321,1,0,0,0,310,2323,
        1,0,0,0,312,316,3,130,65,0,313,316,3,160,80,0,314,316,3,28,14,0,
        315,312,1,0,0,0,315,313,1,0,0,0,315,314,1,0,0,0,316,1,1,0,0,0,317,
        318,5,58,0,0,318,320,5,135,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,
        321,1,0,0,0,321,323,5,59,0,0,322,324,5,135,0,0,323,322,1,0,0,0,323,
        324,1,0,0,0,324,325,1,0,0,0,325,333,3,186,93,0,326,328,5,135,0,0,
        327,326,1,0,0,0,327,328,1,0,0,0,328,331,1,0,0,0,329,332,3,24,12,
        0,330,332,3,26,13,0,331,329,1,0,0,0,331,330,1,0,0,0,332,334,1,0,
        0,0,333,327,1,0,0,0,333,334,1,0,0,0,334,339,1,0,0,0,335,337,5,135,
        0,0,336,335,1,0,0,0,336,337,1,0,0,0,337,338,1,0,0,0,338,340,3,72,
        36,0,339,336,1,0,0,0,339,340,1,0,0,0,340,3,1,0,0,0,341,348,3,150,
        75,0,342,348,3,146,73,0,343,348,3,20,10,0,344,348,3,152,76,0,345,
        348,3,154,77,0,346,348,3,16,8,0,347,341,1,0,0,0,347,342,1,0,0,0,
        347,343,1,0,0,0,347,344,1,0,0,0,347,345,1,0,0,0,347,346,1,0,0,0,
        348,353,1,0,0,0,349,351,5,135,0,0,350,349,1,0,0,0,350,351,1,0,0,
        0,351,352,1,0,0,0,352,354,3,24,12,0,353,350,1,0,0,0,353,354,1,0,
        0,0,354,5,1,0,0,0,355,357,3,284,142,0,356,358,5,135,0,0,357,356,
        1,0,0,0,357,358,1,0,0,0,358,359,1,0,0,0,359,360,3,70,35,0,360,440,
        1,0,0,0,361,366,3,284,142,0,362,364,5,135,0,0,363,362,1,0,0,0,363,
        364,1,0,0,0,364,365,1,0,0,0,365,367,3,70,35,0,366,363,1,0,0,0,366,
        367,1,0,0,0,367,368,1,0,0,0,368,369,5,1,0,0,369,370,3,8,4,0,370,
        440,1,0,0,0,371,376,3,284,142,0,372,374,5,135,0,0,373,372,1,0,0,
        0,373,374,1,0,0,0,374,375,1,0,0,0,375,377,3,70,35,0,376,373,1,0,
        0,0,376,377,1,0,0,0,377,378,1,0,0,0,378,379,5,1,0,0,379,381,3,10,
        5,0,380,382,5,135,0,0,381,380,1,0,0,0,381,382,1,0,0,0,382,383,1,
        0,0,0,383,384,3,12,6,0,384,440,1,0,0,0,385,390,3,284,142,0,386,388,
        5,135,0,0,387,386,1,0,0,0,387,388,1,0,0,0,388,389,1,0,0,0,389,391,
        3,70,35,0,390,387,1,0,0,0,390,391,1,0,0,0,391,392,1,0,0,0,392,393,
        5,1,0,0,393,395,3,10,5,0,394,396,5,135,0,0,395,394,1,0,0,0,395,396,
        1,0,0,0,396,397,1,0,0,0,397,399,5,2,0,0,398,400,5,135,0,0,399,398,
        1,0,0,0,399,400,1,0,0,0,400,401,1,0,0,0,401,402,3,14,7,0,402,440,
        1,0,0,0,403,405,3,212,106,0,404,406,5,135,0,0,405,404,1,0,0,0,405,
        406,1,0,0,0,406,407,1,0,0,0,407,409,5,2,0,0,408,410,5,135,0,0,409,
        408,1,0,0,0,409,410,1,0,0,0,410,411,1,0,0,0,411,412,3,214,107,0,
        412,440,1,0,0,0,413,415,3,284,142,0,414,416,5,135,0,0,415,414,1,
        0,0,0,415,416,1,0,0,0,416,417,1,0,0,0,417,419,5,2,0,0,418,420,5,
        135,0,0,419,418,1,0,0,0,419,420,1,0,0,0,420,421,1,0,0,0,421,422,
        3,214,107,0,422,440,1,0,0,0,423,425,3,284,142,0,424,426,5,135,0,
        0,425,424,1,0,0,0,425,426,1,0,0,0,426,427,1,0,0,0,427,429,5,3,0,
        0,428,430,5,135,0,0,429,428,1,0,0,0,429,430,1,0,0,0,430,431,1,0,
        0,0,431,432,3,214,107,0,432,440,1,0,0,0,433,435,3,284,142,0,434,
        436,5,135,0,0,435,434,1,0,0,0,435,436,1,0,0,0,436,437,1,0,0,0,437,
        438,3,202,101,0,438,440,1,0,0,0,439,355,1,0,0,0,439,361,1,0,0,0,
        439,371,1,0,0,0,439,385,1,0,0,0,439,403,1,0,0,0,439,413,1,0,0,0,
        439,423,1,0,0,0,439,433,1,0,0,0,440,7,1,0,0,0,441,443,3,300,150,
        0,442,444,5,135,0,0,443,442,1,0,0,0,443,444,1,0,0,0,444,445,1,0,
        0,0,445,446,3,70,35,0,446,9,1,0,0,0,447,452,3,300,150,0,448,450,
        5,135,0,0,449,448,1,0,0,0,449,450,1,0,0,0,450,451,1,0,0,0,451,453,
        3,70,35,0,452,449,1,0,0,0,452,453,1,0,0,0,453,11,1,0,0,0,454,456,
        5,47,0,0,455,457,5,135,0,0,456,455,1,0,0,0,456,457,1,0,0,0,457,458,
        1,0,0,0,458,459,3,70,35,0,459,13,1,0,0,0,460,465,3,214,107,0,461,
        463,5,135,0,0,462,461,1,0,0,0,462,463,1,0,0,0,463,464,1,0,0,0,464,
        466,3,70,35,0,465,462,1,0,0,0,465,466,1,0,0,0,466,15,1,0,0,0,467,
        469,5,53,0,0,468,470,5,135,0,0,469,468,1,0,0,0,469,470,1,0,0,0,470,
        471,1,0,0,0,471,482,3,18,9,0,472,474,5,135,0,0,473,472,1,0,0,0,473,
        474,1,0,0,0,474,475,1,0,0,0,475,477,5,4,0,0,476,478,5,135,0,0,477,
        476,1,0,0,0,477,478,1,0,0,0,478,479,1,0,0,0,479,481,3,18,9,0,480,
        473,1,0,0,0,481,484,1,0,0,0,482,480,1,0,0,0,482,483,1,0,0,0,483,
        17,1,0,0,0,484,482,1,0,0,0,485,486,3,214,107,0,486,487,5,1,0,0,487,
        489,3,300,150,0,488,490,5,135,0,0,489,488,1,0,0,0,489,490,1,0,0,
        0,490,491,1,0,0,0,491,492,5,47,0,0,492,495,1,0,0,0,493,495,3,214,
        107,0,494,485,1,0,0,0,494,493,1,0,0,0,495,19,1,0,0,0,496,497,5,66,
        0,0,497,499,5,135,0,0,498,496,1,0,0,0,498,499,1,0,0,0,499,500,1,
        0,0,0,500,502,5,67,0,0,501,503,5,135,0,0,502,501,1,0,0,0,502,503,
        1,0,0,0,503,504,1,0,0,0,504,515,3,22,11,0,505,507,5,135,0,0,506,
        505,1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,0,508,510,5,4,0,0,509,
        511,5,135,0,0,510,509,1,0,0,0,510,511,1,0,0,0,511,512,1,0,0,0,512,
        514,3,22,11,0,513,506,1,0,0,0,514,517,1,0,0,0,515,513,1,0,0,0,515,
        516,1,0,0,0,516,21,1,0,0,0,517,515,1,0,0,0,518,519,3,214,107,0,519,
        520,5,1,0,0,520,522,3,300,150,0,521,523,5,135,0,0,522,521,1,0,0,
        0,522,523,1,0,0,0,523,524,1,0,0,0,524,525,5,47,0,0,525,528,1,0,0,
        0,526,528,3,214,107,0,527,518,1,0,0,0,527,526,1,0,0,0,528,23,1,0,
        0,0,529,531,5,49,0,0,530,532,5,135,0,0,531,530,1,0,0,0,531,532,1,
        0,0,0,532,533,1,0,0,0,533,534,3,214,107,0,534,25,1,0,0,0,535,537,
        5,51,0,0,536,538,5,135,0,0,537,536,1,0,0,0,537,538,1,0,0,0,538,539,
        1,0,0,0,539,540,3,214,107,0,540,27,1,0,0,0,541,544,3,30,15,0,542,
        544,3,32,16,0,543,541,1,0,0,0,543,542,1,0,0,0,544,29,1,0,0,0,545,
        547,5,50,0,0,546,548,5,135,0,0,547,546,1,0,0,0,547,548,1,0,0,0,548,
        549,1,0,0,0,549,550,3,214,107,0,550,31,1,0,0,0,551,553,5,52,0,0,
        552,554,5,135,0,0,553,552,1,0,0,0,553,554,1,0,0,0,554,555,1,0,0,
        0,555,556,3,214,107,0,556,33,1,0,0,0,557,559,3,284,142,0,558,560,
        5,135,0,0,559,558,1,0,0,0,559,560,1,0,0,0,560,561,1,0,0,0,561,563,
        5,2,0,0,562,564,5,135,0,0,563,562,1,0,0,0,563,564,1,0,0,0,564,565,
        1,0,0,0,565,566,3,36,18,0,566,579,1,0,0,0,567,569,3,284,142,0,568,
        570,5,135,0,0,569,568,1,0,0,0,569,570,1,0,0,0,570,571,1,0,0,0,571,
        573,5,2,0,0,572,574,5,135,0,0,573,572,1,0,0,0,573,574,1,0,0,0,574,
        575,1,0,0,0,575,576,3,188,94,0,576,579,1,0,0,0,577,579,3,188,94,
        0,578,557,1,0,0,0,578,567,1,0,0,0,578,577,1,0,0,0,579,35,1,0,0,0,
        580,582,3,270,135,0,581,583,5,135,0,0,582,581,1,0,0,0,582,583,1,
        0,0,0,583,584,1,0,0,0,584,586,5,5,0,0,585,587,5,135,0,0,586,585,
        1,0,0,0,586,587,1,0,0,0,587,588,1,0,0,0,588,590,3,38,19,0,589,591,
        5,135,0,0,590,589,1,0,0,0,590,591,1,0,0,0,591,592,1,0,0,0,592,593,
        5,6,0,0,593,37,1,0,0,0,594,596,3,40,20,0,595,597,5,135,0,0,596,595,
        1,0,0,0,596,597,1,0,0,0,597,598,1,0,0,0,598,600,3,196,98,0,599,601,
        5,135,0,0,600,599,1,0,0,0,600,601,1,0,0,0,601,602,1,0,0,0,602,603,
        3,40,20,0,603,39,1,0,0,0,604,606,5,5,0,0,605,607,5,135,0,0,606,605,
        1,0,0,0,606,607,1,0,0,0,607,612,1,0,0,0,608,610,3,284,142,0,609,
        611,5,135,0,0,610,609,1,0,0,0,610,611,1,0,0,0,611,613,1,0,0,0,612,
        608,1,0,0,0,612,613,1,0,0,0,613,618,1,0,0,0,614,616,3,202,101,0,
        615,617,5,135,0,0,616,615,1,0,0,0,616,617,1,0,0,0,617,619,1,0,0,
        0,618,614,1,0,0,0,618,619,1,0,0,0,619,624,1,0,0,0,620,622,3,70,35,
        0,621,623,5,135,0,0,622,621,1,0,0,0,622,623,1,0,0,0,623,625,1,0,
        0,0,624,620,1,0,0,0,624,625,1,0,0,0,625,630,1,0,0,0,626,628,3,42,
        21,0,627,629,5,135,0,0,628,627,1,0,0,0,628,629,1,0,0,0,629,631,1,
        0,0,0,630,626,1,0,0,0,630,631,1,0,0,0,631,632,1,0,0,0,632,633,5,
        6,0,0,633,41,1,0,0,0,634,637,3,44,22,0,635,637,3,302,151,0,636,634,
        1,0,0,0,636,635,1,0,0,0,637,43,1,0,0,0,638,640,5,7,0,0,639,641,5,
        135,0,0,640,639,1,0,0,0,640,641,1,0,0,0,641,658,1,0,0,0,642,643,
        3,46,23,0,643,644,5,8,0,0,644,655,3,48,24,0,645,647,5,4,0,0,646,
        648,5,135,0,0,647,646,1,0,0,0,647,648,1,0,0,0,648,649,1,0,0,0,649,
        650,3,46,23,0,650,651,5,8,0,0,651,652,3,48,24,0,652,654,1,0,0,0,
        653,645,1,0,0,0,654,657,1,0,0,0,655,653,1,0,0,0,655,656,1,0,0,0,
        656,659,1,0,0,0,657,655,1,0,0,0,658,642,1,0,0,0,658,659,1,0,0,0,
        659,660,1,0,0,0,660,661,5,9,0,0,661,45,1,0,0,0,662,664,3,300,150,
        0,663,665,5,135,0,0,664,663,1,0,0,0,664,665,1,0,0,0,665,670,1,0,
        0,0,666,668,3,70,35,0,667,669,5,135,0,0,668,667,1,0,0,0,668,669,
        1,0,0,0,669,671,1,0,0,0,670,666,1,0,0,0,670,671,1,0,0,0,671,47,1,
        0,0,0,672,674,5,135,0,0,673,672,1,0,0,0,673,674,1,0,0,0,674,675,
        1,0,0,0,675,677,3,214,107,0,676,678,5,135,0,0,677,676,1,0,0,0,677,
        678,1,0,0,0,678,683,1,0,0,0,679,681,3,70,35,0,680,682,5,135,0,0,
        681,680,1,0,0,0,681,682,1,0,0,0,682,684,1,0,0,0,683,679,1,0,0,0,
        683,684,1,0,0,0,684,49,1,0,0,0,685,687,5,10,0,0,686,688,5,135,0,
        0,687,686,1,0,0,0,687,688,1,0,0,0,688,693,1,0,0,0,689,691,3,284,
        142,0,690,692,5,135,0,0,691,690,1,0,0,0,691,692,1,0,0,0,692,694,
        1,0,0,0,693,689,1,0,0,0,693,694,1,0,0,0,694,699,1,0,0,0,695,697,
        3,200,100,0,696,698,5,135,0,0,697,696,1,0,0,0,697,698,1,0,0,0,698,
        700,1,0,0,0,699,695,1,0,0,0,699,700,1,0,0,0,700,702,1,0,0,0,701,
        703,3,206,103,0,702,701,1,0,0,0,702,703,1,0,0,0,703,708,1,0,0,0,
        704,706,3,70,35,0,705,707,5,135,0,0,706,705,1,0,0,0,706,707,1,0,
        0,0,707,709,1,0,0,0,708,704,1,0,0,0,708,709,1,0,0,0,709,714,1,0,
        0,0,710,712,3,198,99,0,711,713,5,135,0,0,712,711,1,0,0,0,712,713,
        1,0,0,0,713,715,1,0,0,0,714,710,1,0,0,0,714,715,1,0,0,0,715,716,
        1,0,0,0,716,717,5,11,0,0,717,51,1,0,0,0,718,723,3,234,117,0,719,
        724,3,68,34,0,720,724,3,228,114,0,721,724,3,230,115,0,722,724,3,
        232,116,0,723,719,1,0,0,0,723,720,1,0,0,0,723,721,1,0,0,0,723,722,
        1,0,0,0,723,724,1,0,0,0,724,53,1,0,0,0,725,728,3,244,122,0,726,728,
        3,64,32,0,727,725,1,0,0,0,727,726,1,0,0,0,728,733,1,0,0,0,729,732,
        3,56,28,0,730,732,3,58,29,0,731,729,1,0,0,0,731,730,1,0,0,0,732,
        735,1,0,0,0,733,731,1,0,0,0,733,734,1,0,0,0,734,55,1,0,0,0,735,733,
        1,0,0,0,736,738,5,135,0,0,737,736,1,0,0,0,737,738,1,0,0,0,738,739,
        1,0,0,0,739,740,5,10,0,0,740,741,3,60,30,0,741,742,5,11,0,0,742,
        57,1,0,0,0,743,745,5,135,0,0,744,743,1,0,0,0,744,745,1,0,0,0,745,
        746,1,0,0,0,746,748,5,10,0,0,747,749,3,60,30,0,748,747,1,0,0,0,748,
        749,1,0,0,0,749,750,1,0,0,0,750,752,5,12,0,0,751,753,3,62,31,0,752,
        751,1,0,0,0,752,753,1,0,0,0,753,754,1,0,0,0,754,755,5,11,0,0,755,
        59,1,0,0,0,756,757,3,214,107,0,757,61,1,0,0,0,758,759,3,214,107,
        0,759,63,1,0,0,0,760,775,3,248,124,0,761,763,5,135,0,0,762,761,1,
        0,0,0,762,763,1,0,0,0,763,764,1,0,0,0,764,766,3,246,123,0,765,762,
        1,0,0,0,766,767,1,0,0,0,767,765,1,0,0,0,767,768,1,0,0,0,768,773,
        1,0,0,0,769,771,5,135,0,0,770,769,1,0,0,0,770,771,1,0,0,0,771,772,
        1,0,0,0,772,774,5,47,0,0,773,770,1,0,0,0,773,774,1,0,0,0,774,776,
        1,0,0,0,775,765,1,0,0,0,775,776,1,0,0,0,776,778,1,0,0,0,777,779,
        5,135,0,0,778,777,1,0,0,0,778,779,1,0,0,0,779,780,1,0,0,0,780,781,
        3,66,33,0,781,65,1,0,0,0,782,789,5,46,0,0,783,785,5,135,0,0,784,
        783,1,0,0,0,784,785,1,0,0,0,785,786,1,0,0,0,786,788,3,246,123,0,
        787,784,1,0,0,0,788,791,1,0,0,0,789,787,1,0,0,0,789,790,1,0,0,0,
        790,67,1,0,0,0,791,789,1,0,0,0,792,793,5,135,0,0,793,794,7,0,0,0,
        794,795,5,135,0,0,795,796,3,234,117,0,796,69,1,0,0,0,797,799,5,46,
        0,0,798,800,5,135,0,0,799,798,1,0,0,0,799,800,1,0,0,0,800,801,1,
        0,0,0,801,803,5,5,0,0,802,804,5,135,0,0,803,802,1,0,0,0,803,804,
        1,0,0,0,804,805,1,0,0,0,805,807,3,120,60,0,806,808,5,135,0,0,807,
        806,1,0,0,0,807,808,1,0,0,0,808,809,1,0,0,0,809,811,5,4,0,0,810,
        812,5,135,0,0,811,810,1,0,0,0,811,812,1,0,0,0,812,815,1,0,0,0,813,
        816,3,120,60,0,814,816,5,48,0,0,815,813,1,0,0,0,815,814,1,0,0,0,
        816,818,1,0,0,0,817,819,5,135,0,0,818,817,1,0,0,0,818,819,1,0,0,
        0,819,820,1,0,0,0,820,821,5,6,0,0,821,71,1,0,0,0,822,823,5,82,0,
        0,823,824,5,135,0,0,824,825,3,74,37,0,825,73,1,0,0,0,826,827,3,76,
        38,0,827,75,1,0,0,0,828,835,3,78,39,0,829,830,5,135,0,0,830,831,
        5,83,0,0,831,832,5,135,0,0,832,834,3,78,39,0,833,829,1,0,0,0,834,
        837,1,0,0,0,835,833,1,0,0,0,835,836,1,0,0,0,836,77,1,0,0,0,837,835,
        1,0,0,0,838,845,3,80,40,0,839,840,5,135,0,0,840,841,5,84,0,0,841,
        842,5,135,0,0,842,844,3,80,40,0,843,839,1,0,0,0,844,847,1,0,0,0,
        845,843,1,0,0,0,845,846,1,0,0,0,846,79,1,0,0,0,847,845,1,0,0,0,848,
        855,3,82,41,0,849,850,5,135,0,0,850,851,5,85,0,0,851,852,5,135,0,
        0,852,854,3,82,41,0,853,849,1,0,0,0,854,857,1,0,0,0,855,853,1,0,
        0,0,855,856,1,0,0,0,856,81,1,0,0,0,857,855,1,0,0,0,858,860,5,86,
        0,0,859,861,5,135,0,0,860,859,1,0,0,0,860,861,1,0,0,0,861,863,1,
        0,0,0,862,858,1,0,0,0,863,866,1,0,0,0,864,862,1,0,0,0,864,865,1,
        0,0,0,865,867,1,0,0,0,866,864,1,0,0,0,867,868,3,84,42,0,868,83,1,
        0,0,0,869,876,3,88,44,0,870,872,5,135,0,0,871,870,1,0,0,0,871,872,
        1,0,0,0,872,873,1,0,0,0,873,875,3,86,43,0,874,871,1,0,0,0,875,878,
        1,0,0,0,876,874,1,0,0,0,876,877,1,0,0,0,877,85,1,0,0,0,878,876,1,
        0,0,0,879,881,3,236,118,0,880,882,5,135,0,0,881,880,1,0,0,0,881,
        882,1,0,0,0,882,883,1,0,0,0,883,884,3,88,44,0,884,916,1,0,0,0,885,
        887,3,236,118,0,886,888,5,135,0,0,887,886,1,0,0,0,887,888,1,0,0,
        0,888,889,1,0,0,0,889,890,3,88,44,0,890,916,1,0,0,0,891,893,3,236,
        118,0,892,894,5,135,0,0,893,892,1,0,0,0,893,894,1,0,0,0,894,895,
        1,0,0,0,895,896,3,88,44,0,896,916,1,0,0,0,897,899,3,236,118,0,898,
        900,5,135,0,0,899,898,1,0,0,0,899,900,1,0,0,0,900,901,1,0,0,0,901,
        902,3,88,44,0,902,916,1,0,0,0,903,905,3,236,118,0,904,906,5,135,
        0,0,905,904,1,0,0,0,905,906,1,0,0,0,906,907,1,0,0,0,907,908,3,88,
        44,0,908,916,1,0,0,0,909,911,3,236,118,0,910,912,5,135,0,0,911,910,
        1,0,0,0,911,912,1,0,0,0,912,913,1,0,0,0,913,914,3,88,44,0,914,916,
        1,0,0,0,915,879,1,0,0,0,915,885,1,0,0,0,915,891,1,0,0,0,915,897,
        1,0,0,0,915,903,1,0,0,0,915,909,1,0,0,0,916,87,1,0,0,0,917,922,3,
        90,45,0,918,923,3,92,46,0,919,923,3,94,47,0,920,923,3,96,48,0,921,
        923,3,98,49,0,922,918,1,0,0,0,922,919,1,0,0,0,922,920,1,0,0,0,922,
        921,1,0,0,0,922,923,1,0,0,0,923,89,1,0,0,0,924,945,3,100,50,0,925,
        927,5,135,0,0,926,925,1,0,0,0,926,927,1,0,0,0,927,928,1,0,0,0,928,
        930,3,236,118,0,929,931,5,135,0,0,930,929,1,0,0,0,930,931,1,0,0,
        0,931,932,1,0,0,0,932,933,3,100,50,0,933,944,1,0,0,0,934,936,5,135,
        0,0,935,934,1,0,0,0,935,936,1,0,0,0,936,937,1,0,0,0,937,939,3,236,
        118,0,938,940,5,135,0,0,939,938,1,0,0,0,939,940,1,0,0,0,940,941,
        1,0,0,0,941,942,3,100,50,0,942,944,1,0,0,0,943,926,1,0,0,0,943,935,
        1,0,0,0,944,947,1,0,0,0,945,943,1,0,0,0,945,946,1,0,0,0,946,91,1,
        0,0,0,947,945,1,0,0,0,948,949,5,135,0,0,949,950,7,0,0,0,950,951,
        5,135,0,0,951,952,3,90,45,0,952,93,1,0,0,0,953,954,5,135,0,0,954,
        955,5,87,0,0,955,956,5,135,0,0,956,964,5,71,0,0,957,958,5,135,0,
        0,958,959,5,88,0,0,959,960,5,135,0,0,960,964,5,71,0,0,961,962,5,
        135,0,0,962,964,5,89,0,0,963,953,1,0,0,0,963,957,1,0,0,0,963,961,
        1,0,0,0,964,966,1,0,0,0,965,967,5,135,0,0,966,965,1,0,0,0,966,967,
        1,0,0,0,967,968,1,0,0,0,968,969,3,90,45,0,969,95,1,0,0,0,970,971,
        5,135,0,0,971,973,5,90,0,0,972,974,5,135,0,0,973,972,1,0,0,0,973,
        974,1,0,0,0,974,975,1,0,0,0,975,976,3,90,45,0,976,97,1,0,0,0,977,
        978,5,135,0,0,978,979,5,91,0,0,979,980,5,135,0,0,980,988,5,92,0,
        0,981,982,5,135,0,0,982,983,5,91,0,0,983,984,5,135,0,0,984,985,5,
        86,0,0,985,986,5,135,0,0,986,988,5,92,0,0,987,977,1,0,0,0,987,981,
        1,0,0,0,988,99,1,0,0,0,989,1019,3,102,51,0,990,992,5,135,0,0,991,
        990,1,0,0,0,991,992,1,0,0,0,992,993,1,0,0,0,993,995,3,236,118,0,
        994,996,5,135,0,0,995,994,1,0,0,0,995,996,1,0,0,0,996,997,1,0,0,
        0,997,998,3,102,51,0,998,1018,1,0,0,0,999,1001,5,135,0,0,1000,999,
        1,0,0,0,1000,1001,1,0,0,0,1001,1002,1,0,0,0,1002,1004,3,236,118,
        0,1003,1005,5,135,0,0,1004,1003,1,0,0,0,1004,1005,1,0,0,0,1005,1006,
        1,0,0,0,1006,1007,3,102,51,0,1007,1018,1,0,0,0,1008,1010,5,135,0,
        0,1009,1008,1,0,0,0,1009,1010,1,0,0,0,1010,1011,1,0,0,0,1011,1013,
        3,236,118,0,1012,1014,5,135,0,0,1013,1012,1,0,0,0,1013,1014,1,0,
        0,0,1014,1015,1,0,0,0,1015,1016,3,102,51,0,1016,1018,1,0,0,0,1017,
        991,1,0,0,0,1017,1000,1,0,0,0,1017,1009,1,0,0,0,1018,1021,1,0,0,
        0,1019,1017,1,0,0,0,1019,1020,1,0,0,0,1020,101,1,0,0,0,1021,1019,
        1,0,0,0,1022,1034,3,104,52,0,1023,1025,5,135,0,0,1024,1023,1,0,0,
        0,1024,1025,1,0,0,0,1025,1026,1,0,0,0,1026,1028,3,236,118,0,1027,
        1029,5,135,0,0,1028,1027,1,0,0,0,1028,1029,1,0,0,0,1029,1030,1,0,
        0,0,1030,1031,3,104,52,0,1031,1033,1,0,0,0,1032,1024,1,0,0,0,1033,
        1036,1,0,0,0,1034,1032,1,0,0,0,1034,1035,1,0,0,0,1035,103,1,0,0,
        0,1036,1034,1,0,0,0,1037,1044,3,106,53,0,1038,1040,7,1,0,0,1039,
        1041,5,135,0,0,1040,1039,1,0,0,0,1040,1041,1,0,0,0,1041,1042,1,0,
        0,0,1042,1044,3,106,53,0,1043,1037,1,0,0,0,1043,1038,1,0,0,0,1044,
        105,1,0,0,0,1045,1048,3,108,54,0,1046,1048,3,110,55,0,1047,1045,
        1,0,0,0,1047,1046,1,0,0,0,1048,1053,1,0,0,0,1049,1052,3,112,56,0,
        1050,1052,3,114,57,0,1051,1049,1,0,0,0,1051,1050,1,0,0,0,1052,1055,
        1,0,0,0,1053,1051,1,0,0,0,1053,1054,1,0,0,0,1054,107,1,0,0,0,1055,
        1053,1,0,0,0,1056,1063,3,248,124,0,1057,1059,5,135,0,0,1058,1057,
        1,0,0,0,1058,1059,1,0,0,0,1059,1060,1,0,0,0,1060,1062,3,246,123,
        0,1061,1058,1,0,0,0,1062,1065,1,0,0,0,1063,1061,1,0,0,0,1063,1064,
        1,0,0,0,1064,1070,1,0,0,0,1065,1063,1,0,0,0,1066,1068,5,135,0,0,
        1067,1066,1,0,0,0,1067,1068,1,0,0,0,1068,1069,1,0,0,0,1069,1071,
        3,202,101,0,1070,1067,1,0,0,0,1070,1071,1,0,0,0,1071,109,1,0,0,0,
        1072,1087,3,248,124,0,1073,1075,5,135,0,0,1074,1073,1,0,0,0,1074,
        1075,1,0,0,0,1075,1076,1,0,0,0,1076,1078,3,246,123,0,1077,1074,1,
        0,0,0,1078,1079,1,0,0,0,1079,1077,1,0,0,0,1079,1080,1,0,0,0,1080,
        1085,1,0,0,0,1081,1083,5,135,0,0,1082,1081,1,0,0,0,1082,1083,1,0,
        0,0,1083,1084,1,0,0,0,1084,1086,5,47,0,0,1085,1082,1,0,0,0,1085,
        1086,1,0,0,0,1086,1088,1,0,0,0,1087,1077,1,0,0,0,1087,1088,1,0,0,
        0,1088,1090,1,0,0,0,1089,1091,5,135,0,0,1090,1089,1,0,0,0,1090,1091,
        1,0,0,0,1091,1092,1,0,0,0,1092,1093,3,66,33,0,1093,111,1,0,0,0,1094,
        1096,5,135,0,0,1095,1094,1,0,0,0,1095,1096,1,0,0,0,1096,1097,1,0,
        0,0,1097,1098,5,10,0,0,1098,1099,3,116,58,0,1099,1100,5,11,0,0,1100,
        113,1,0,0,0,1101,1103,5,135,0,0,1102,1101,1,0,0,0,1102,1103,1,0,
        0,0,1103,1104,1,0,0,0,1104,1106,5,10,0,0,1105,1107,3,116,58,0,1106,
        1105,1,0,0,0,1106,1107,1,0,0,0,1107,1108,1,0,0,0,1108,1110,5,12,
        0,0,1109,1111,3,118,59,0,1110,1109,1,0,0,0,1110,1111,1,0,0,0,1111,
        1112,1,0,0,0,1112,1113,5,11,0,0,1113,115,1,0,0,0,1114,1115,3,214,
        107,0,1115,117,1,0,0,0,1116,1117,3,214,107,0,1117,119,1,0,0,0,1118,
        1121,5,117,0,0,1119,1121,3,298,149,0,1120,1118,1,0,0,0,1120,1119,
        1,0,0,0,1121,121,1,0,0,0,1122,1123,7,2,0,0,1123,123,1,0,0,0,1124,
        1125,7,3,0,0,1125,125,1,0,0,0,1126,1128,5,135,0,0,1127,1126,1,0,
        0,0,1127,1128,1,0,0,0,1128,1129,1,0,0,0,1129,1134,3,128,64,0,1130,
        1132,5,135,0,0,1131,1130,1,0,0,0,1131,1132,1,0,0,0,1132,1133,1,0,
        0,0,1133,1135,5,15,0,0,1134,1131,1,0,0,0,1134,1135,1,0,0,0,1135,
        1137,1,0,0,0,1136,1138,5,135,0,0,1137,1136,1,0,0,0,1137,1138,1,0,
        0,0,1138,1139,1,0,0,0,1139,1140,5,0,0,1,1140,127,1,0,0,0,1141,1142,
        3,0,0,0,1142,129,1,0,0,0,1143,1150,3,134,67,0,1144,1146,5,135,0,
        0,1145,1144,1,0,0,0,1145,1146,1,0,0,0,1146,1147,1,0,0,0,1147,1149,
        3,132,66,0,1148,1145,1,0,0,0,1149,1152,1,0,0,0,1150,1148,1,0,0,0,
        1150,1151,1,0,0,0,1151,131,1,0,0,0,1152,1150,1,0,0,0,1153,1154,5,
        56,0,0,1154,1155,5,135,0,0,1155,1157,5,57,0,0,1156,1158,5,135,0,
        0,1157,1156,1,0,0,0,1157,1158,1,0,0,0,1158,1159,1,0,0,0,1159,1166,
        3,134,67,0,1160,1162,5,56,0,0,1161,1163,5,135,0,0,1162,1161,1,0,
        0,0,1162,1163,1,0,0,0,1163,1164,1,0,0,0,1164,1166,3,134,67,0,1165,
        1153,1,0,0,0,1165,1160,1,0,0,0,1166,133,1,0,0,0,1167,1170,3,136,
        68,0,1168,1170,3,138,69,0,1169,1167,1,0,0,0,1169,1168,1,0,0,0,1170,
        135,1,0,0,0,1171,1173,3,142,71,0,1172,1174,5,135,0,0,1173,1172,1,
        0,0,0,1173,1174,1,0,0,0,1174,1176,1,0,0,0,1175,1171,1,0,0,0,1176,
        1179,1,0,0,0,1177,1175,1,0,0,0,1177,1178,1,0,0,0,1178,1180,1,0,0,
        0,1179,1177,1,0,0,0,1180,1207,3,168,84,0,1181,1183,3,142,71,0,1182,
        1184,5,135,0,0,1183,1182,1,0,0,0,1183,1184,1,0,0,0,1184,1186,1,0,
        0,0,1185,1181,1,0,0,0,1186,1189,1,0,0,0,1187,1185,1,0,0,0,1187,1188,
        1,0,0,0,1188,1190,1,0,0,0,1189,1187,1,0,0,0,1190,1197,3,4,2,0,1191,
        1193,5,135,0,0,1192,1191,1,0,0,0,1192,1193,1,0,0,0,1193,1194,1,0,
        0,0,1194,1196,3,4,2,0,1195,1192,1,0,0,0,1196,1199,1,0,0,0,1197,1195,
        1,0,0,0,1197,1198,1,0,0,0,1198,1204,1,0,0,0,1199,1197,1,0,0,0,1200,
        1202,5,135,0,0,1201,1200,1,0,0,0,1201,1202,1,0,0,0,1202,1203,1,0,
        0,0,1203,1205,3,168,84,0,1204,1201,1,0,0,0,1204,1205,1,0,0,0,1205,
        1207,1,0,0,0,1206,1177,1,0,0,0,1206,1187,1,0,0,0,1207,137,1,0,0,
        0,1208,1210,3,140,70,0,1209,1208,1,0,0,0,1210,1211,1,0,0,0,1211,
        1209,1,0,0,0,1211,1212,1,0,0,0,1212,1213,1,0,0,0,1213,1214,3,136,
        68,0,1214,139,1,0,0,0,1215,1217,3,142,71,0,1216,1218,5,135,0,0,1217,
        1216,1,0,0,0,1217,1218,1,0,0,0,1218,1220,1,0,0,0,1219,1215,1,0,0,
        0,1220,1223,1,0,0,0,1221,1219,1,0,0,0,1221,1222,1,0,0,0,1222,1230,
        1,0,0,0,1223,1221,1,0,0,0,1224,1226,3,4,2,0,1225,1227,5,135,0,0,
        1226,1225,1,0,0,0,1226,1227,1,0,0,0,1227,1229,1,0,0,0,1228,1224,
        1,0,0,0,1229,1232,1,0,0,0,1230,1228,1,0,0,0,1230,1231,1,0,0,0,1231,
        1233,1,0,0,0,1232,1230,1,0,0,0,1233,1235,3,166,83,0,1234,1236,5,
        135,0,0,1235,1234,1,0,0,0,1235,1236,1,0,0,0,1236,141,1,0,0,0,1237,
        1241,3,2,1,0,1238,1241,3,144,72,0,1239,1241,3,158,79,0,1240,1237,
        1,0,0,0,1240,1238,1,0,0,0,1240,1239,1,0,0,0,1241,143,1,0,0,0,1242,
        1244,5,60,0,0,1243,1245,5,135,0,0,1244,1243,1,0,0,0,1244,1245,1,
        0,0,0,1245,1246,1,0,0,0,1246,1247,3,214,107,0,1247,1248,5,135,0,
        0,1248,1249,5,61,0,0,1249,1250,5,135,0,0,1250,1251,3,284,142,0,1251,
        145,1,0,0,0,1252,1254,5,62,0,0,1253,1255,5,135,0,0,1254,1253,1,0,
        0,0,1254,1255,1,0,0,0,1255,1256,1,0,0,0,1256,1261,3,34,17,0,1257,
        1258,5,135,0,0,1258,1260,3,148,74,0,1259,1257,1,0,0,0,1260,1263,
        1,0,0,0,1261,1259,1,0,0,0,1261,1262,1,0,0,0,1262,147,1,0,0,0,1263,
        1261,1,0,0,0,1264,1265,5,63,0,0,1265,1266,5,135,0,0,1266,1267,5,
        59,0,0,1267,1268,5,135,0,0,1268,1275,3,152,76,0,1269,1270,5,63,0,
        0,1270,1271,5,135,0,0,1271,1272,5,64,0,0,1272,1273,5,135,0,0,1273,
        1275,3,152,76,0,1274,1264,1,0,0,0,1274,1269,1,0,0,0,1275,149,1,0,
        0,0,1276,1278,5,64,0,0,1277,1279,5,135,0,0,1278,1277,1,0,0,0,1278,
        1279,1,0,0,0,1279,1280,1,0,0,0,1280,1281,3,186,93,0,1281,151,1,0,
        0,0,1282,1284,5,65,0,0,1283,1285,5,135,0,0,1284,1283,1,0,0,0,1284,
        1285,1,0,0,0,1285,1286,1,0,0,0,1286,1297,3,6,3,0,1287,1289,5,135,
        0,0,1288,1287,1,0,0,0,1288,1289,1,0,0,0,1289,1290,1,0,0,0,1290,1292,
        5,4,0,0,1291,1293,5,135,0,0,1292,1291,1,0,0,0,1292,1293,1,0,0,0,
        1293,1294,1,0,0,0,1294,1296,3,6,3,0,1295,1288,1,0,0,0,1296,1299,
        1,0,0,0,1297,1295,1,0,0,0,1297,1298,1,0,0,0,1298,153,1,0,0,0,1299,
        1297,1,0,0,0,1300,1301,5,68,0,0,1301,1302,5,135,0,0,1302,1313,3,
        156,78,0,1303,1305,5,135,0,0,1304,1303,1,0,0,0,1304,1305,1,0,0,0,
        1305,1306,1,0,0,0,1306,1308,5,4,0,0,1307,1309,5,135,0,0,1308,1307,
        1,0,0,0,1308,1309,1,0,0,0,1309,1310,1,0,0,0,1310,1312,3,156,78,0,
        1311,1304,1,0,0,0,1312,1315,1,0,0,0,1313,1311,1,0,0,0,1313,1314,
        1,0,0,0,1314,155,1,0,0,0,1315,1313,1,0,0,0,1316,1317,3,284,142,0,
        1317,1318,3,202,101,0,1318,1321,1,0,0,0,1319,1321,3,212,106,0,1320,
        1316,1,0,0,0,1320,1319,1,0,0,0,1321,157,1,0,0,0,1322,1323,5,69,0,
        0,1323,1324,5,135,0,0,1324,1331,3,274,137,0,1325,1327,5,135,0,0,
        1326,1325,1,0,0,0,1326,1327,1,0,0,0,1327,1328,1,0,0,0,1328,1329,
        5,70,0,0,1329,1330,5,135,0,0,1330,1332,3,162,81,0,1331,1326,1,0,
        0,0,1331,1332,1,0,0,0,1332,159,1,0,0,0,1333,1334,5,69,0,0,1334,1337,
        5,135,0,0,1335,1338,3,274,137,0,1336,1338,3,276,138,0,1337,1335,
        1,0,0,0,1337,1336,1,0,0,0,1338,1348,1,0,0,0,1339,1341,5,135,0,0,
        1340,1339,1,0,0,0,1340,1341,1,0,0,0,1341,1342,1,0,0,0,1342,1343,
        5,70,0,0,1343,1346,5,135,0,0,1344,1347,5,16,0,0,1345,1347,3,162,
        81,0,1346,1344,1,0,0,0,1346,1345,1,0,0,0,1347,1349,1,0,0,0,1348,
        1340,1,0,0,0,1348,1349,1,0,0,0,1349,161,1,0,0,0,1350,1361,3,164,
        82,0,1351,1353,5,135,0,0,1352,1351,1,0,0,0,1352,1353,1,0,0,0,1353,
        1354,1,0,0,0,1354,1356,5,4,0,0,1355,1357,5,135,0,0,1356,1355,1,0,
        0,0,1356,1357,1,0,0,0,1357,1358,1,0,0,0,1358,1360,3,164,82,0,1359,
        1352,1,0,0,0,1360,1363,1,0,0,0,1361,1359,1,0,0,0,1361,1362,1,0,0,
        0,1362,1368,1,0,0,0,1363,1361,1,0,0,0,1364,1366,5,135,0,0,1365,1364,
        1,0,0,0,1365,1366,1,0,0,0,1366,1367,1,0,0,0,1367,1369,3,184,92,0,
        1368,1365,1,0,0,0,1368,1369,1,0,0,0,1369,163,1,0,0,0,1370,1375,3,
        278,139,0,1371,1372,5,135,0,0,1372,1373,5,61,0,0,1373,1374,5,135,
        0,0,1374,1376,3,284,142,0,1375,1371,1,0,0,0,1375,1376,1,0,0,0,1376,
        165,1,0,0,0,1377,1378,5,71,0,0,1378,1383,3,170,85,0,1379,1381,5,
        135,0,0,1380,1379,1,0,0,0,1380,1381,1,0,0,0,1381,1382,1,0,0,0,1382,
        1384,3,184,92,0,1383,1380,1,0,0,0,1383,1384,1,0,0,0,1384,167,1,0,
        0,0,1385,1386,5,72,0,0,1386,1387,3,170,85,0,1387,169,1,0,0,0,1388,
        1390,5,135,0,0,1389,1388,1,0,0,0,1389,1390,1,0,0,0,1390,1391,1,0,
        0,0,1391,1393,5,73,0,0,1392,1389,1,0,0,0,1392,1393,1,0,0,0,1393,
        1394,1,0,0,0,1394,1395,5,135,0,0,1395,1398,3,172,86,0,1396,1397,
        5,135,0,0,1397,1399,3,176,88,0,1398,1396,1,0,0,0,1398,1399,1,0,0,
        0,1399,1402,1,0,0,0,1400,1401,5,135,0,0,1401,1403,3,178,89,0,1402,
        1400,1,0,0,0,1402,1403,1,0,0,0,1403,1406,1,0,0,0,1404,1405,5,135,
        0,0,1405,1407,3,180,90,0,1406,1404,1,0,0,0,1406,1407,1,0,0,0,1407,
        171,1,0,0,0,1408,1419,5,16,0,0,1409,1411,5,135,0,0,1410,1409,1,0,
        0,0,1410,1411,1,0,0,0,1411,1412,1,0,0,0,1412,1414,5,4,0,0,1413,1415,
        5,135,0,0,1414,1413,1,0,0,0,1414,1415,1,0,0,0,1415,1416,1,0,0,0,
        1416,1418,3,174,87,0,1417,1410,1,0,0,0,1418,1421,1,0,0,0,1419,1417,
        1,0,0,0,1419,1420,1,0,0,0,1420,1437,1,0,0,0,1421,1419,1,0,0,0,1422,
        1433,3,174,87,0,1423,1425,5,135,0,0,1424,1423,1,0,0,0,1424,1425,
        1,0,0,0,1425,1426,1,0,0,0,1426,1428,5,4,0,0,1427,1429,5,135,0,0,
        1428,1427,1,0,0,0,1428,1429,1,0,0,0,1429,1430,1,0,0,0,1430,1432,
        3,174,87,0,1431,1424,1,0,0,0,1432,1435,1,0,0,0,1433,1431,1,0,0,0,
        1433,1434,1,0,0,0,1434,1437,1,0,0,0,1435,1433,1,0,0,0,1436,1408,
        1,0,0,0,1436,1422,1,0,0,0,1437,173,1,0,0,0,1438,1439,3,214,107,0,
        1439,1440,5,135,0,0,1440,1441,5,61,0,0,1441,1442,5,135,0,0,1442,
        1443,3,284,142,0,1443,1446,1,0,0,0,1444,1446,3,214,107,0,1445,1438,
        1,0,0,0,1445,1444,1,0,0,0,1446,175,1,0,0,0,1447,1448,5,74,0,0,1448,
        1449,5,135,0,0,1449,1450,5,75,0,0,1450,1451,5,135,0,0,1451,1459,
        3,182,91,0,1452,1454,5,4,0,0,1453,1455,5,135,0,0,1454,1453,1,0,0,
        0,1454,1455,1,0,0,0,1455,1456,1,0,0,0,1456,1458,3,182,91,0,1457,
        1452,1,0,0,0,1458,1461,1,0,0,0,1459,1457,1,0,0,0,1459,1460,1,0,0,
        0,1460,177,1,0,0,0,1461,1459,1,0,0,0,1462,1463,5,76,0,0,1463,1464,
        5,135,0,0,1464,1465,3,214,107,0,1465,179,1,0,0,0,1466,1467,5,77,
        0,0,1467,1468,5,135,0,0,1468,1469,3,214,107,0,1469,181,1,0,0,0,1470,
        1475,3,214,107,0,1471,1473,5,135,0,0,1472,1471,1,0,0,0,1472,1473,
        1,0,0,0,1473,1474,1,0,0,0,1474,1476,7,4,0,0,1475,1472,1,0,0,0,1475,
        1476,1,0,0,0,1476,183,1,0,0,0,1477,1478,5,82,0,0,1478,1479,5,135,
        0,0,1479,1480,3,214,107,0,1480,185,1,0,0,0,1481,1492,3,34,17,0,1482,
        1484,5,135,0,0,1483,1482,1,0,0,0,1483,1484,1,0,0,0,1484,1485,1,0,
        0,0,1485,1487,5,4,0,0,1486,1488,5,135,0,0,1487,1486,1,0,0,0,1487,
        1488,1,0,0,0,1488,1489,1,0,0,0,1489,1491,3,34,17,0,1490,1483,1,0,
        0,0,1491,1494,1,0,0,0,1492,1490,1,0,0,0,1492,1493,1,0,0,0,1493,187,
        1,0,0,0,1494,1492,1,0,0,0,1495,1496,3,190,95,0,1496,189,1,0,0,0,
        1497,1504,3,40,20,0,1498,1500,5,135,0,0,1499,1498,1,0,0,0,1499,1500,
        1,0,0,0,1500,1501,1,0,0,0,1501,1503,3,194,97,0,1502,1499,1,0,0,0,
        1503,1506,1,0,0,0,1504,1502,1,0,0,0,1504,1505,1,0,0,0,1505,1512,
        1,0,0,0,1506,1504,1,0,0,0,1507,1508,5,5,0,0,1508,1509,3,190,95,0,
        1509,1510,5,6,0,0,1510,1512,1,0,0,0,1511,1497,1,0,0,0,1511,1507,
        1,0,0,0,1512,191,1,0,0,0,1513,1518,3,40,20,0,1514,1516,5,135,0,0,
        1515,1514,1,0,0,0,1515,1516,1,0,0,0,1516,1517,1,0,0,0,1517,1519,
        3,194,97,0,1518,1515,1,0,0,0,1519,1520,1,0,0,0,1520,1518,1,0,0,0,
        1520,1521,1,0,0,0,1521,193,1,0,0,0,1522,1524,3,196,98,0,1523,1525,
        5,135,0,0,1524,1523,1,0,0,0,1524,1525,1,0,0,0,1525,1526,1,0,0,0,
        1526,1527,3,40,20,0,1527,195,1,0,0,0,1528,1530,3,306,153,0,1529,
        1531,5,135,0,0,1530,1529,1,0,0,0,1530,1531,1,0,0,0,1531,1532,1,0,
        0,0,1532,1534,3,310,155,0,1533,1535,5,135,0,0,1534,1533,1,0,0,0,
        1534,1535,1,0,0,0,1535,1537,1,0,0,0,1536,1538,3,50,25,0,1537,1536,
        1,0,0,0,1537,1538,1,0,0,0,1538,1540,1,0,0,0,1539,1541,5,135,0,0,
        1540,1539,1,0,0,0,1540,1541,1,0,0,0,1541,1542,1,0,0,0,1542,1544,
        3,310,155,0,1543,1545,5,135,0,0,1544,1543,1,0,0,0,1544,1545,1,0,
        0,0,1545,1546,1,0,0,0,1546,1547,3,308,154,0,1547,1593,1,0,0,0,1548,
        1550,3,306,153,0,1549,1551,5,135,0,0,1550,1549,1,0,0,0,1550,1551,
        1,0,0,0,1551,1552,1,0,0,0,1552,1554,3,310,155,0,1553,1555,5,135,
        0,0,1554,1553,1,0,0,0,1554,1555,1,0,0,0,1555,1557,1,0,0,0,1556,1558,
        3,50,25,0,1557,1556,1,0,0,0,1557,1558,1,0,0,0,1558,1560,1,0,0,0,
        1559,1561,5,135,0,0,1560,1559,1,0,0,0,1560,1561,1,0,0,0,1561,1562,
        1,0,0,0,1562,1563,3,310,155,0,1563,1593,1,0,0,0,1564,1566,3,310,
        155,0,1565,1567,5,135,0,0,1566,1565,1,0,0,0,1566,1567,1,0,0,0,1567,
        1569,1,0,0,0,1568,1570,3,50,25,0,1569,1568,1,0,0,0,1569,1570,1,0,
        0,0,1570,1572,1,0,0,0,1571,1573,5,135,0,0,1572,1571,1,0,0,0,1572,
        1573,1,0,0,0,1573,1574,1,0,0,0,1574,1576,3,310,155,0,1575,1577,5,
        135,0,0,1576,1575,1,0,0,0,1576,1577,1,0,0,0,1577,1578,1,0,0,0,1578,
        1579,3,308,154,0,1579,1593,1,0,0,0,1580,1582,3,310,155,0,1581,1583,
        5,135,0,0,1582,1581,1,0,0,0,1582,1583,1,0,0,0,1583,1585,1,0,0,0,
        1584,1586,3,50,25,0,1585,1584,1,0,0,0,1585,1586,1,0,0,0,1586,1588,
        1,0,0,0,1587,1589,5,135,0,0,1588,1587,1,0,0,0,1588,1589,1,0,0,0,
        1589,1590,1,0,0,0,1590,1591,3,310,155,0,1591,1593,1,0,0,0,1592,1528,
        1,0,0,0,1592,1548,1,0,0,0,1592,1564,1,0,0,0,1592,1580,1,0,0,0,1593,
        197,1,0,0,0,1594,1597,3,298,149,0,1595,1597,3,302,151,0,1596,1594,
        1,0,0,0,1596,1595,1,0,0,0,1597,199,1,0,0,0,1598,1600,5,8,0,0,1599,
        1601,5,135,0,0,1600,1599,1,0,0,0,1600,1601,1,0,0,0,1601,1602,1,0,
        0,0,1602,1616,3,210,105,0,1603,1605,5,135,0,0,1604,1603,1,0,0,0,
        1604,1605,1,0,0,0,1605,1606,1,0,0,0,1606,1608,5,17,0,0,1607,1609,
        5,8,0,0,1608,1607,1,0,0,0,1608,1609,1,0,0,0,1609,1611,1,0,0,0,1610,
        1612,5,135,0,0,1611,1610,1,0,0,0,1611,1612,1,0,0,0,1612,1613,1,0,
        0,0,1613,1615,3,210,105,0,1614,1604,1,0,0,0,1615,1618,1,0,0,0,1616,
        1614,1,0,0,0,1616,1617,1,0,0,0,1617,201,1,0,0,0,1618,1616,1,0,0,
        0,1619,1626,3,204,102,0,1620,1622,5,135,0,0,1621,1620,1,0,0,0,1621,
        1622,1,0,0,0,1622,1623,1,0,0,0,1623,1625,3,204,102,0,1624,1621,1,
        0,0,0,1625,1628,1,0,0,0,1626,1624,1,0,0,0,1626,1627,1,0,0,0,1627,
        203,1,0,0,0,1628,1626,1,0,0,0,1629,1631,5,8,0,0,1630,1632,5,135,
        0,0,1631,1630,1,0,0,0,1631,1632,1,0,0,0,1632,1633,1,0,0,0,1633,1634,
        3,208,104,0,1634,205,1,0,0,0,1635,1637,5,16,0,0,1636,1638,5,135,
        0,0,1637,1636,1,0,0,0,1637,1638,1,0,0,0,1638,1643,1,0,0,0,1639,1641,
        3,292,146,0,1640,1642,5,135,0,0,1641,1640,1,0,0,0,1641,1642,1,0,
        0,0,1642,1644,1,0,0,0,1643,1639,1,0,0,0,1643,1644,1,0,0,0,1644,1655,
        1,0,0,0,1645,1647,5,12,0,0,1646,1648,5,135,0,0,1647,1646,1,0,0,0,
        1647,1648,1,0,0,0,1648,1653,1,0,0,0,1649,1651,3,292,146,0,1650,1652,
        5,135,0,0,1651,1650,1,0,0,0,1651,1652,1,0,0,0,1652,1654,1,0,0,0,
        1653,1649,1,0,0,0,1653,1654,1,0,0,0,1654,1656,1,0,0,0,1655,1645,
        1,0,0,0,1655,1656,1,0,0,0,1656,207,1,0,0,0,1657,1658,3,304,152,0,
        1658,209,1,0,0,0,1659,1660,3,304,152,0,1660,211,1,0,0,0,1661,1666,
        3,248,124,0,1662,1664,5,135,0,0,1663,1662,1,0,0,0,1663,1664,1,0,
        0,0,1664,1665,1,0,0,0,1665,1667,3,246,123,0,1666,1663,1,0,0,0,1667,
        1668,1,0,0,0,1668,1666,1,0,0,0,1668,1669,1,0,0,0,1669,213,1,0,0,
        0,1670,1671,3,216,108,0,1671,215,1,0,0,0,1672,1679,3,218,109,0,1673,
        1674,5,135,0,0,1674,1675,5,83,0,0,1675,1676,5,135,0,0,1676,1678,
        3,218,109,0,1677,1673,1,0,0,0,1678,1681,1,0,0,0,1679,1677,1,0,0,
        0,1679,1680,1,0,0,0,1680,217,1,0,0,0,1681,1679,1,0,0,0,1682,1689,
        3,220,110,0,1683,1684,5,135,0,0,1684,1685,5,84,0,0,1685,1686,5,135,
        0,0,1686,1688,3,220,110,0,1687,1683,1,0,0,0,1688,1691,1,0,0,0,1689,
        1687,1,0,0,0,1689,1690,1,0,0,0,1690,219,1,0,0,0,1691,1689,1,0,0,
        0,1692,1699,3,222,111,0,1693,1694,5,135,0,0,1694,1695,5,85,0,0,1695,
        1696,5,135,0,0,1696,1698,3,222,111,0,1697,1693,1,0,0,0,1698,1701,
        1,0,0,0,1699,1697,1,0,0,0,1699,1700,1,0,0,0,1700,221,1,0,0,0,1701,
        1699,1,0,0,0,1702,1704,5,86,0,0,1703,1705,5,135,0,0,1704,1703,1,
        0,0,0,1704,1705,1,0,0,0,1705,1707,1,0,0,0,1706,1702,1,0,0,0,1707,
        1710,1,0,0,0,1708,1706,1,0,0,0,1708,1709,1,0,0,0,1709,1711,1,0,0,
        0,1710,1708,1,0,0,0,1711,1712,3,224,112,0,1712,223,1,0,0,0,1713,
        1720,3,52,26,0,1714,1716,5,135,0,0,1715,1714,1,0,0,0,1715,1716,1,
        0,0,0,1716,1717,1,0,0,0,1717,1719,3,226,113,0,1718,1715,1,0,0,0,
        1719,1722,1,0,0,0,1720,1718,1,0,0,0,1720,1721,1,0,0,0,1721,225,1,
        0,0,0,1722,1720,1,0,0,0,1723,1725,3,236,118,0,1724,1726,5,135,0,
        0,1725,1724,1,0,0,0,1725,1726,1,0,0,0,1726,1727,1,0,0,0,1727,1728,
        3,52,26,0,1728,1760,1,0,0,0,1729,1731,3,236,118,0,1730,1732,5,135,
        0,0,1731,1730,1,0,0,0,1731,1732,1,0,0,0,1732,1733,1,0,0,0,1733,1734,
        3,52,26,0,1734,1760,1,0,0,0,1735,1737,3,236,118,0,1736,1738,5,135,
        0,0,1737,1736,1,0,0,0,1737,1738,1,0,0,0,1738,1739,1,0,0,0,1739,1740,
        3,52,26,0,1740,1760,1,0,0,0,1741,1743,3,236,118,0,1742,1744,5,135,
        0,0,1743,1742,1,0,0,0,1743,1744,1,0,0,0,1744,1745,1,0,0,0,1745,1746,
        3,52,26,0,1746,1760,1,0,0,0,1747,1749,3,236,118,0,1748,1750,5,135,
        0,0,1749,1748,1,0,0,0,1749,1750,1,0,0,0,1750,1751,1,0,0,0,1751,1752,
        3,52,26,0,1752,1760,1,0,0,0,1753,1755,3,236,118,0,1754,1756,5,135,
        0,0,1755,1754,1,0,0,0,1755,1756,1,0,0,0,1756,1757,1,0,0,0,1757,1758,
        3,52,26,0,1758,1760,1,0,0,0,1759,1723,1,0,0,0,1759,1729,1,0,0,0,
        1759,1735,1,0,0,0,1759,1741,1,0,0,0,1759,1747,1,0,0,0,1759,1753,
        1,0,0,0,1760,227,1,0,0,0,1761,1762,5,135,0,0,1762,1763,5,87,0,0,
        1763,1764,5,135,0,0,1764,1772,5,71,0,0,1765,1766,5,135,0,0,1766,
        1767,5,88,0,0,1767,1768,5,135,0,0,1768,1772,5,71,0,0,1769,1770,5,
        135,0,0,1770,1772,5,89,0,0,1771,1761,1,0,0,0,1771,1765,1,0,0,0,1771,
        1769,1,0,0,0,1772,1774,1,0,0,0,1773,1775,5,135,0,0,1774,1773,1,0,
        0,0,1774,1775,1,0,0,0,1775,1776,1,0,0,0,1776,1777,3,234,117,0,1777,
        229,1,0,0,0,1778,1779,5,135,0,0,1779,1781,5,90,0,0,1780,1782,5,135,
        0,0,1781,1780,1,0,0,0,1781,1782,1,0,0,0,1782,1783,1,0,0,0,1783,1784,
        3,234,117,0,1784,231,1,0,0,0,1785,1786,5,135,0,0,1786,1787,5,91,
        0,0,1787,1788,5,135,0,0,1788,1796,5,92,0,0,1789,1790,5,135,0,0,1790,
        1791,5,91,0,0,1791,1792,5,135,0,0,1792,1793,5,86,0,0,1793,1794,5,
        135,0,0,1794,1796,5,92,0,0,1795,1785,1,0,0,0,1795,1789,1,0,0,0,1796,
        233,1,0,0,0,1797,1818,3,238,119,0,1798,1800,5,135,0,0,1799,1798,
        1,0,0,0,1799,1800,1,0,0,0,1800,1801,1,0,0,0,1801,1803,3,236,118,
        0,1802,1804,5,135,0,0,1803,1802,1,0,0,0,1803,1804,1,0,0,0,1804,1805,
        1,0,0,0,1805,1806,3,238,119,0,1806,1817,1,0,0,0,1807,1809,5,135,
        0,0,1808,1807,1,0,0,0,1808,1809,1,0,0,0,1809,1810,1,0,0,0,1810,1812,
        3,236,118,0,1811,1813,5,135,0,0,1812,1811,1,0,0,0,1812,1813,1,0,
        0,0,1813,1814,1,0,0,0,1814,1815,3,238,119,0,1815,1817,1,0,0,0,1816,
        1799,1,0,0,0,1816,1808,1,0,0,0,1817,1820,1,0,0,0,1818,1816,1,0,0,
        0,1818,1819,1,0,0,0,1819,235,1,0,0,0,1820,1818,1,0,0,0,1821,1822,
        7,5,0,0,1822,237,1,0,0,0,1823,1853,3,240,120,0,1824,1826,5,135,0,
        0,1825,1824,1,0,0,0,1825,1826,1,0,0,0,1826,1827,1,0,0,0,1827,1829,
        3,236,118,0,1828,1830,5,135,0,0,1829,1828,1,0,0,0,1829,1830,1,0,
        0,0,1830,1831,1,0,0,0,1831,1832,3,240,120,0,1832,1852,1,0,0,0,1833,
        1835,5,135,0,0,1834,1833,1,0,0,0,1834,1835,1,0,0,0,1835,1836,1,0,
        0,0,1836,1838,3,236,118,0,1837,1839,5,135,0,0,1838,1837,1,0,0,0,
        1838,1839,1,0,0,0,1839,1840,1,0,0,0,1840,1841,3,240,120,0,1841,1852,
        1,0,0,0,1842,1844,5,135,0,0,1843,1842,1,0,0,0,1843,1844,1,0,0,0,
        1844,1845,1,0,0,0,1845,1847,3,236,118,0,1846,1848,5,135,0,0,1847,
        1846,1,0,0,0,1847,1848,1,0,0,0,1848,1849,1,0,0,0,1849,1850,3,240,
        120,0,1850,1852,1,0,0,0,1851,1825,1,0,0,0,1851,1834,1,0,0,0,1851,
        1843,1,0,0,0,1852,1855,1,0,0,0,1853,1851,1,0,0,0,1853,1854,1,0,0,
        0,1854,239,1,0,0,0,1855,1853,1,0,0,0,1856,1868,3,242,121,0,1857,
        1859,5,135,0,0,1858,1857,1,0,0,0,1858,1859,1,0,0,0,1859,1860,1,0,
        0,0,1860,1862,3,236,118,0,1861,1863,5,135,0,0,1862,1861,1,0,0,0,
        1862,1863,1,0,0,0,1863,1864,1,0,0,0,1864,1865,3,242,121,0,1865,1867,
        1,0,0,0,1866,1858,1,0,0,0,1867,1870,1,0,0,0,1868,1866,1,0,0,0,1868,
        1869,1,0,0,0,1869,241,1,0,0,0,1870,1868,1,0,0,0,1871,1878,3,54,27,
        0,1872,1874,7,1,0,0,1873,1875,5,135,0,0,1874,1873,1,0,0,0,1874,1875,
        1,0,0,0,1875,1876,1,0,0,0,1876,1878,3,54,27,0,1877,1871,1,0,0,0,
        1877,1872,1,0,0,0,1878,243,1,0,0,0,1879,1886,3,248,124,0,1880,1882,
        5,135,0,0,1881,1880,1,0,0,0,1881,1882,1,0,0,0,1882,1883,1,0,0,0,
        1883,1885,3,246,123,0,1884,1881,1,0,0,0,1885,1888,1,0,0,0,1886,1884,
        1,0,0,0,1886,1887,1,0,0,0,1887,1893,1,0,0,0,1888,1886,1,0,0,0,1889,
        1891,5,135,0,0,1890,1889,1,0,0,0,1890,1891,1,0,0,0,1891,1892,1,0,
        0,0,1892,1894,3,202,101,0,1893,1890,1,0,0,0,1893,1894,1,0,0,0,1894,
        245,1,0,0,0,1895,1897,5,1,0,0,1896,1898,5,135,0,0,1897,1896,1,0,
        0,0,1897,1898,1,0,0,0,1898,1899,1,0,0,0,1899,1900,3,300,150,0,1900,
        247,1,0,0,0,1901,1926,3,286,143,0,1902,1926,3,302,151,0,1903,1926,
        3,250,125,0,1904,1906,5,93,0,0,1905,1907,5,135,0,0,1906,1905,1,0,
        0,0,1906,1907,1,0,0,0,1907,1908,1,0,0,0,1908,1910,5,5,0,0,1909,1911,
        5,135,0,0,1910,1909,1,0,0,0,1910,1911,1,0,0,0,1911,1912,1,0,0,0,
        1912,1914,5,16,0,0,1913,1915,5,135,0,0,1914,1913,1,0,0,0,1914,1915,
        1,0,0,0,1915,1916,1,0,0,0,1916,1926,5,6,0,0,1917,1926,3,254,127,
        0,1918,1926,3,256,128,0,1919,1926,3,258,129,0,1920,1926,3,262,131,
        0,1921,1926,3,264,132,0,1922,1926,3,268,134,0,1923,1926,3,272,136,
        0,1924,1926,3,284,142,0,1925,1901,1,0,0,0,1925,1902,1,0,0,0,1925,
        1903,1,0,0,0,1925,1904,1,0,0,0,1925,1917,1,0,0,0,1925,1918,1,0,0,
        0,1925,1919,1,0,0,0,1925,1920,1,0,0,0,1925,1921,1,0,0,0,1925,1922,
        1,0,0,0,1925,1923,1,0,0,0,1925,1924,1,0,0,0,1926,249,1,0,0,0,1927,
        1932,5,94,0,0,1928,1930,5,135,0,0,1929,1928,1,0,0,0,1929,1930,1,
        0,0,0,1930,1931,1,0,0,0,1931,1933,3,252,126,0,1932,1929,1,0,0,0,
        1933,1934,1,0,0,0,1934,1932,1,0,0,0,1934,1935,1,0,0,0,1935,1950,
        1,0,0,0,1936,1938,5,94,0,0,1937,1939,5,135,0,0,1938,1937,1,0,0,0,
        1938,1939,1,0,0,0,1939,1940,1,0,0,0,1940,1945,3,214,107,0,1941,1943,
        5,135,0,0,1942,1941,1,0,0,0,1942,1943,1,0,0,0,1943,1944,1,0,0,0,
        1944,1946,3,252,126,0,1945,1942,1,0,0,0,1946,1947,1,0,0,0,1947,1945,
        1,0,0,0,1947,1948,1,0,0,0,1948,1950,1,0,0,0,1949,1927,1,0,0,0,1949,
        1936,1,0,0,0,1950,1959,1,0,0,0,1951,1953,5,135,0,0,1952,1951,1,0,
        0,0,1952,1953,1,0,0,0,1953,1954,1,0,0,0,1954,1956,5,95,0,0,1955,
        1957,5,135,0,0,1956,1955,1,0,0,0,1956,1957,1,0,0,0,1957,1958,1,0,
        0,0,1958,1960,3,214,107,0,1959,1952,1,0,0,0,1959,1960,1,0,0,0,1960,
        1962,1,0,0,0,1961,1963,5,135,0,0,1962,1961,1,0,0,0,1962,1963,1,0,
        0,0,1963,1964,1,0,0,0,1964,1965,5,96,0,0,1965,251,1,0,0,0,1966,1968,
        5,97,0,0,1967,1969,5,135,0,0,1968,1967,1,0,0,0,1968,1969,1,0,0,0,
        1969,1970,1,0,0,0,1970,1972,3,214,107,0,1971,1973,5,135,0,0,1972,
        1971,1,0,0,0,1972,1973,1,0,0,0,1973,1974,1,0,0,0,1974,1976,5,98,
        0,0,1975,1977,5,135,0,0,1976,1975,1,0,0,0,1976,1977,1,0,0,0,1977,
        1978,1,0,0,0,1978,1979,3,214,107,0,1979,253,1,0,0,0,1980,1982,5,
        10,0,0,1981,1983,5,135,0,0,1982,1981,1,0,0,0,1982,1983,1,0,0,0,1983,
        1984,1,0,0,0,1984,1993,3,260,130,0,1985,1987,5,135,0,0,1986,1985,
        1,0,0,0,1986,1987,1,0,0,0,1987,1988,1,0,0,0,1988,1990,5,17,0,0,1989,
        1991,5,135,0,0,1990,1989,1,0,0,0,1990,1991,1,0,0,0,1991,1992,1,0,
        0,0,1992,1994,3,214,107,0,1993,1986,1,0,0,0,1993,1994,1,0,0,0,1994,
        1996,1,0,0,0,1995,1997,5,135,0,0,1996,1995,1,0,0,0,1996,1997,1,0,
        0,0,1997,1998,1,0,0,0,1998,1999,5,11,0,0,1999,255,1,0,0,0,2000,2002,
        5,10,0,0,2001,2003,5,135,0,0,2002,2001,1,0,0,0,2002,2003,1,0,0,0,
        2003,2012,1,0,0,0,2004,2006,3,284,142,0,2005,2007,5,135,0,0,2006,
        2005,1,0,0,0,2006,2007,1,0,0,0,2007,2008,1,0,0,0,2008,2010,5,2,0,
        0,2009,2011,5,135,0,0,2010,2009,1,0,0,0,2010,2011,1,0,0,0,2011,2013,
        1,0,0,0,2012,2004,1,0,0,0,2012,2013,1,0,0,0,2013,2014,1,0,0,0,2014,
        2016,3,192,96,0,2015,2017,5,135,0,0,2016,2015,1,0,0,0,2016,2017,
        1,0,0,0,2017,2022,1,0,0,0,2018,2020,3,184,92,0,2019,2021,5,135,0,
        0,2020,2019,1,0,0,0,2020,2021,1,0,0,0,2021,2023,1,0,0,0,2022,2018,
        1,0,0,0,2022,2023,1,0,0,0,2023,2024,1,0,0,0,2024,2026,5,17,0,0,2025,
        2027,5,135,0,0,2026,2025,1,0,0,0,2026,2027,1,0,0,0,2027,2028,1,0,
        0,0,2028,2030,3,214,107,0,2029,2031,5,135,0,0,2030,2029,1,0,0,0,
        2030,2031,1,0,0,0,2031,2032,1,0,0,0,2032,2033,5,11,0,0,2033,257,
        1,0,0,0,2034,2036,5,57,0,0,2035,2037,5,135,0,0,2036,2035,1,0,0,0,
        2036,2037,1,0,0,0,2037,2038,1,0,0,0,2038,2040,5,5,0,0,2039,2041,
        5,135,0,0,2040,2039,1,0,0,0,2040,2041,1,0,0,0,2041,2042,1,0,0,0,
        2042,2044,3,260,130,0,2043,2045,5,135,0,0,2044,2043,1,0,0,0,2044,
        2045,1,0,0,0,2045,2046,1,0,0,0,2046,2047,5,6,0,0,2047,2091,1,0,0,
        0,2048,2050,5,99,0,0,2049,2051,5,135,0,0,2050,2049,1,0,0,0,2050,
        2051,1,0,0,0,2051,2052,1,0,0,0,2052,2054,5,5,0,0,2053,2055,5,135,
        0,0,2054,2053,1,0,0,0,2054,2055,1,0,0,0,2055,2056,1,0,0,0,2056,2058,
        3,260,130,0,2057,2059,5,135,0,0,2058,2057,1,0,0,0,2058,2059,1,0,
        0,0,2059,2060,1,0,0,0,2060,2061,5,6,0,0,2061,2091,1,0,0,0,2062,2064,
        5,100,0,0,2063,2065,5,135,0,0,2064,2063,1,0,0,0,2064,2065,1,0,0,
        0,2065,2066,1,0,0,0,2066,2068,5,5,0,0,2067,2069,5,135,0,0,2068,2067,
        1,0,0,0,2068,2069,1,0,0,0,2069,2070,1,0,0,0,2070,2072,3,260,130,
        0,2071,2073,5,135,0,0,2072,2071,1,0,0,0,2072,2073,1,0,0,0,2073,2074,
        1,0,0,0,2074,2075,5,6,0,0,2075,2091,1,0,0,0,2076,2078,5,101,0,0,
        2077,2079,5,135,0,0,2078,2077,1,0,0,0,2078,2079,1,0,0,0,2079,2080,
        1,0,0,0,2080,2082,5,5,0,0,2081,2083,5,135,0,0,2082,2081,1,0,0,0,
        2082,2083,1,0,0,0,2083,2084,1,0,0,0,2084,2086,3,260,130,0,2085,2087,
        5,135,0,0,2086,2085,1,0,0,0,2086,2087,1,0,0,0,2087,2088,1,0,0,0,
        2088,2089,5,6,0,0,2089,2091,1,0,0,0,2090,2034,1,0,0,0,2090,2048,
        1,0,0,0,2090,2062,1,0,0,0,2090,2076,1,0,0,0,2091,259,1,0,0,0,2092,
        2097,3,266,133,0,2093,2095,5,135,0,0,2094,2093,1,0,0,0,2094,2095,
        1,0,0,0,2095,2096,1,0,0,0,2096,2098,3,184,92,0,2097,2094,1,0,0,0,
        2097,2098,1,0,0,0,2098,261,1,0,0,0,2099,2100,3,192,96,0,2100,263,
        1,0,0,0,2101,2103,5,5,0,0,2102,2104,5,135,0,0,2103,2102,1,0,0,0,
        2103,2104,1,0,0,0,2104,2105,1,0,0,0,2105,2107,3,214,107,0,2106,2108,
        5,135,0,0,2107,2106,1,0,0,0,2107,2108,1,0,0,0,2108,2109,1,0,0,0,
        2109,2110,5,6,0,0,2110,265,1,0,0,0,2111,2112,3,284,142,0,2112,2113,
        5,135,0,0,2113,2114,5,90,0,0,2114,2115,5,135,0,0,2115,2116,3,214,
        107,0,2116,267,1,0,0,0,2117,2119,3,270,135,0,2118,2120,5,135,0,0,
        2119,2118,1,0,0,0,2119,2120,1,0,0,0,2120,2121,1,0,0,0,2121,2123,
        5,5,0,0,2122,2124,5,135,0,0,2123,2122,1,0,0,0,2123,2124,1,0,0,0,
        2124,2129,1,0,0,0,2125,2127,5,73,0,0,2126,2128,5,135,0,0,2127,2126,
        1,0,0,0,2127,2128,1,0,0,0,2128,2130,1,0,0,0,2129,2125,1,0,0,0,2129,
        2130,1,0,0,0,2130,2148,1,0,0,0,2131,2133,3,214,107,0,2132,2134,5,
        135,0,0,2133,2132,1,0,0,0,2133,2134,1,0,0,0,2134,2145,1,0,0,0,2135,
        2137,5,4,0,0,2136,2138,5,135,0,0,2137,2136,1,0,0,0,2137,2138,1,0,
        0,0,2138,2139,1,0,0,0,2139,2141,3,214,107,0,2140,2142,5,135,0,0,
        2141,2140,1,0,0,0,2141,2142,1,0,0,0,2142,2144,1,0,0,0,2143,2135,
        1,0,0,0,2144,2147,1,0,0,0,2145,2143,1,0,0,0,2145,2146,1,0,0,0,2146,
        2149,1,0,0,0,2147,2145,1,0,0,0,2148,2131,1,0,0,0,2148,2149,1,0,0,
        0,2149,2150,1,0,0,0,2150,2151,5,6,0,0,2151,269,1,0,0,0,2152,2153,
        3,282,141,0,2153,2154,3,122,61,0,2154,271,1,0,0,0,2155,2157,5,102,
        0,0,2156,2158,5,135,0,0,2157,2156,1,0,0,0,2157,2158,1,0,0,0,2158,
        2159,1,0,0,0,2159,2161,5,7,0,0,2160,2162,5,135,0,0,2161,2160,1,0,
        0,0,2161,2162,1,0,0,0,2162,2171,1,0,0,0,2163,2172,3,130,65,0,2164,
        2169,3,186,93,0,2165,2167,5,135,0,0,2166,2165,1,0,0,0,2166,2167,
        1,0,0,0,2167,2168,1,0,0,0,2168,2170,3,184,92,0,2169,2166,1,0,0,0,
        2169,2170,1,0,0,0,2170,2172,1,0,0,0,2171,2163,1,0,0,0,2171,2164,
        1,0,0,0,2172,2174,1,0,0,0,2173,2175,5,135,0,0,2174,2173,1,0,0,0,
        2174,2175,1,0,0,0,2175,2176,1,0,0,0,2176,2177,5,9,0,0,2177,273,1,
        0,0,0,2178,2180,3,280,140,0,2179,2181,5,135,0,0,2180,2179,1,0,0,
        0,2180,2181,1,0,0,0,2181,2182,1,0,0,0,2182,2184,5,5,0,0,2183,2185,
        5,135,0,0,2184,2183,1,0,0,0,2184,2185,1,0,0,0,2185,2203,1,0,0,0,
        2186,2188,3,214,107,0,2187,2189,5,135,0,0,2188,2187,1,0,0,0,2188,
        2189,1,0,0,0,2189,2200,1,0,0,0,2190,2192,5,4,0,0,2191,2193,5,135,
        0,0,2192,2191,1,0,0,0,2192,2193,1,0,0,0,2193,2194,1,0,0,0,2194,2196,
        3,214,107,0,2195,2197,5,135,0,0,2196,2195,1,0,0,0,2196,2197,1,0,
        0,0,2197,2199,1,0,0,0,2198,2190,1,0,0,0,2199,2202,1,0,0,0,2200,2198,
        1,0,0,0,2200,2201,1,0,0,0,2201,2204,1,0,0,0,2202,2200,1,0,0,0,2203,
        2186,1,0,0,0,2203,2204,1,0,0,0,2204,2205,1,0,0,0,2205,2206,5,6,0,
        0,2206,275,1,0,0,0,2207,2208,3,280,140,0,2208,277,1,0,0,0,2209,2210,
        3,122,61,0,2210,279,1,0,0,0,2211,2212,3,282,141,0,2212,2213,3,122,
        61,0,2213,281,1,0,0,0,2214,2215,3,122,61,0,2215,2216,5,1,0,0,2216,
        2218,1,0,0,0,2217,2214,1,0,0,0,2218,2221,1,0,0,0,2219,2217,1,0,0,
        0,2219,2220,1,0,0,0,2220,283,1,0,0,0,2221,2219,1,0,0,0,2222,2223,
        3,122,61,0,2223,285,1,0,0,0,2224,2231,3,288,144,0,2225,2231,5,92,
        0,0,2226,2231,3,290,145,0,2227,2231,5,117,0,0,2228,2231,3,296,148,
        0,2229,2231,3,298,149,0,2230,2224,1,0,0,0,2230,2225,1,0,0,0,2230,
        2226,1,0,0,0,2230,2227,1,0,0,0,2230,2228,1,0,0,0,2230,2229,1,0,0,
        0,2231,287,1,0,0,0,2232,2233,7,6,0,0,2233,289,1,0,0,0,2234,2237,
        3,294,147,0,2235,2237,3,292,146,0,2236,2234,1,0,0,0,2236,2235,1,
        0,0,0,2237,291,1,0,0,0,2238,2239,7,7,0,0,2239,293,1,0,0,0,2240,2241,
        7,8,0,0,2241,295,1,0,0,0,2242,2244,5,10,0,0,2243,2245,5,135,0,0,
        2244,2243,1,0,0,0,2244,2245,1,0,0,0,2245,2263,1,0,0,0,2246,2248,
        3,214,107,0,2247,2249,5,135,0,0,2248,2247,1,0,0,0,2248,2249,1,0,
        0,0,2249,2260,1,0,0,0,2250,2252,5,4,0,0,2251,2253,5,135,0,0,2252,
        2251,1,0,0,0,2252,2253,1,0,0,0,2253,2254,1,0,0,0,2254,2256,3,214,
        107,0,2255,2257,5,135,0,0,2256,2255,1,0,0,0,2256,2257,1,0,0,0,2257,
        2259,1,0,0,0,2258,2250,1,0,0,0,2259,2262,1,0,0,0,2260,2258,1,0,0,
        0,2260,2261,1,0,0,0,2261,2264,1,0,0,0,2262,2260,1,0,0,0,2263,2246,
        1,0,0,0,2263,2264,1,0,0,0,2264,2265,1,0,0,0,2265,2266,5,11,0,0,2266,
        297,1,0,0,0,2267,2269,5,7,0,0,2268,2270,5,135,0,0,2269,2268,1,0,
        0,0,2269,2270,1,0,0,0,2270,2304,1,0,0,0,2271,2273,3,300,150,0,2272,
        2274,5,135,0,0,2273,2272,1,0,0,0,2273,2274,1,0,0,0,2274,2275,1,0,
        0,0,2275,2277,5,8,0,0,2276,2278,5,135,0,0,2277,2276,1,0,0,0,2277,
        2278,1,0,0,0,2278,2279,1,0,0,0,2279,2281,3,214,107,0,2280,2282,5,
        135,0,0,2281,2280,1,0,0,0,2281,2282,1,0,0,0,2282,2301,1,0,0,0,2283,
        2285,5,4,0,0,2284,2286,5,135,0,0,2285,2284,1,0,0,0,2285,2286,1,0,
        0,0,2286,2287,1,0,0,0,2287,2289,3,300,150,0,2288,2290,5,135,0,0,
        2289,2288,1,0,0,0,2289,2290,1,0,0,0,2290,2291,1,0,0,0,2291,2293,
        5,8,0,0,2292,2294,5,135,0,0,2293,2292,1,0,0,0,2293,2294,1,0,0,0,
        2294,2295,1,0,0,0,2295,2297,3,214,107,0,2296,2298,5,135,0,0,2297,
        2296,1,0,0,0,2297,2298,1,0,0,0,2298,2300,1,0,0,0,2299,2283,1,0,0,
        0,2300,2303,1,0,0,0,2301,2299,1,0,0,0,2301,2302,1,0,0,0,2302,2305,
        1,0,0,0,2303,2301,1,0,0,0,2304,2271,1,0,0,0,2304,2305,1,0,0,0,2305,
        2306,1,0,0,0,2306,2307,5,9,0,0,2307,299,1,0,0,0,2308,2309,3,304,
        152,0,2309,301,1,0,0,0,2310,2313,5,26,0,0,2311,2314,3,122,61,0,2312,
        2314,5,106,0,0,2313,2311,1,0,0,0,2313,2312,1,0,0,0,2314,303,1,0,
        0,0,2315,2318,3,122,61,0,2316,2318,3,124,62,0,2317,2315,1,0,0,0,
        2317,2316,1,0,0,0,2318,305,1,0,0,0,2319,2320,7,9,0,0,2320,307,1,
        0,0,0,2321,2322,7,10,0,0,2322,309,1,0,0,0,2323,2324,7,11,0,0,2324,
        311,1,0,0,0,419,315,319,323,327,331,333,336,339,347,350,353,357,
        363,366,373,376,381,387,390,395,399,405,409,415,419,425,429,435,
        439,443,449,452,456,462,465,469,473,477,482,489,494,498,502,506,
        510,515,522,527,531,537,543,547,553,559,563,569,573,578,582,586,
        590,596,600,606,610,612,616,618,622,624,628,630,636,640,647,655,
        658,664,668,670,673,677,681,683,687,691,693,697,699,702,706,708,
        712,714,723,727,731,733,737,744,748,752,762,767,770,773,775,778,
        784,789,799,803,807,811,815,818,835,845,855,860,864,871,876,881,
        887,893,899,905,911,915,922,926,930,935,939,943,945,963,966,973,
        987,991,995,1000,1004,1009,1013,1017,1019,1024,1028,1034,1040,1043,
        1047,1051,1053,1058,1063,1067,1070,1074,1079,1082,1085,1087,1090,
        1095,1102,1106,1110,1120,1127,1131,1134,1137,1145,1150,1157,1162,
        1165,1169,1173,1177,1183,1187,1192,1197,1201,1204,1206,1211,1217,
        1221,1226,1230,1235,1240,1244,1254,1261,1274,1278,1284,1288,1292,
        1297,1304,1308,1313,1320,1326,1331,1337,1340,1346,1348,1352,1356,
        1361,1365,1368,1375,1380,1383,1389,1392,1398,1402,1406,1410,1414,
        1419,1424,1428,1433,1436,1445,1454,1459,1472,1475,1483,1487,1492,
        1499,1504,1511,1515,1520,1524,1530,1534,1537,1540,1544,1550,1554,
        1557,1560,1566,1569,1572,1576,1582,1585,1588,1592,1596,1600,1604,
        1608,1611,1616,1621,1626,1631,1637,1641,1643,1647,1651,1653,1655,
        1663,1668,1679,1689,1699,1704,1708,1715,1720,1725,1731,1737,1743,
        1749,1755,1759,1771,1774,1781,1795,1799,1803,1808,1812,1816,1818,
        1825,1829,1834,1838,1843,1847,1851,1853,1858,1862,1868,1874,1877,
        1881,1886,1890,1893,1897,1906,1910,1914,1925,1929,1934,1938,1942,
        1947,1949,1952,1956,1959,1962,1968,1972,1976,1982,1986,1990,1993,
        1996,2002,2006,2010,2012,2016,2020,2022,2026,2030,2036,2040,2044,
        2050,2054,2058,2064,2068,2072,2078,2082,2086,2090,2094,2097,2103,
        2107,2119,2123,2127,2129,2133,2137,2141,2145,2148,2157,2161,2166,
        2169,2171,2174,2180,2184,2188,2192,2196,2200,2203,2219,2230,2236,
        2244,2248,2252,2256,2260,2263,2269,2273,2277,2281,2285,2289,2293,
        2297,2301,2304,2313,2317
    ]

class s_cypherParser ( Parser ):

    grammarFileName = "s_cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "'='", "'+='", "','", "'('", "')'", 
                     "'{'", "':'", "'}'", "'['", "']'", "'..'", "'+'", "'-'", 
                     "';'", "'*'", "'|'", "'/'", "'%'", "'^'", "'<>'", "'<'", 
                     "'<='", "'>'", "'>='", "'$'", "'\\u27E8'", "'\\u3008'", 
                     "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
                     "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", 
                     "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", 
                     "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
                     "'\\uFF0D'", "<INVALID>", "<INVALID>", "'NOW'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "AtT", "PoundValue", "NOW", 
                      "AT_TIME", "SNAPSHOT", "BETWEEN", "SCOPE", "STALE", 
                      "DURING", "OVERLAPS", "UNION", "ALL", "OPTIONAL", 
                      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", 
                      "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", 
                      "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", 
                      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
                      "WHERE", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", 
                      "CONTAINS", "IN", "IS", "NULL", "COUNT", "CASE", "ELSE", 
                      "END", "WHEN", "THEN", "ANY", "NONE", "SINGLE", "EXISTS", 
                      "TRUE", "FALSE", "HexInteger", "DecimalInteger", "OctalInteger", 
                      "HexLetter", "HexDigit", "Digit", "NonZeroDigit", 
                      "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", 
                      "RegularDecimalReal", "StringLiteral", "EscapedChar", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Query = 0
    RULE_oC_Match = 1
    RULE_oC_UpdatingClause = 2
    RULE_oC_SetItem = 3
    RULE_s_SetPropertyItemOne = 4
    RULE_s_SetPropertyItemTwo = 5
    RULE_s_SetValueItem = 6
    RULE_s_SetValueItemExpression = 7
    RULE_s_Stale = 8
    RULE_s_StaleItem = 9
    RULE_oC_Delete = 10
    RULE_s_DeleteItem = 11
    RULE_s_AtTime = 12
    RULE_s_Between = 13
    RULE_s_TimeWindowLimit = 14
    RULE_s_Snapshot = 15
    RULE_s_Scope = 16
    RULE_oC_PatternPart = 17
    RULE_s_PathFunctionPattern = 18
    RULE_s_SinglePathPattern = 19
    RULE_oC_NodePattern = 20
    RULE_s_Properties = 21
    RULE_s_PropertiesPattern = 22
    RULE_s_PropertyNode = 23
    RULE_s_ValueNode = 24
    RULE_oC_RelationshipDetail = 25
    RULE_oC_StringListNullPredicateExpression = 26
    RULE_oC_ListOperatorExpression = 27
    RULE_s_SingleIndexExpression = 28
    RULE_s_DoubleIndexExpression = 29
    RULE_s_LeftExpression = 30
    RULE_s_RightExpression = 31
    RULE_s_AtTExpression = 32
    RULE_s_PropertyLookupTime = 33
    RULE_s_TimePredicateExpression = 34
    RULE_s_AtTElement = 35
    RULE_s_Where = 36
    RULE_s_WhereExpression = 37
    RULE_s_OrWhereExpression = 38
    RULE_s_XorWhereExpression = 39
    RULE_s_AndWhereExpression = 40
    RULE_s_NotWhereExpression = 41
    RULE_s_ComparisonWhereExpression = 42
    RULE_s_PartialComparisonWhereExpression = 43
    RULE_s_StringListNullPredicateWhereExpression = 44
    RULE_s_AddOrSubtractWhereExpression = 45
    RULE_s_TimePredicateWhereExpression = 46
    RULE_s_StringPredicateWhereExpression = 47
    RULE_s_ListPredicateWhereExpression = 48
    RULE_s_NullPredicateWhereExpression = 49
    RULE_s_MultiplyDivideModuloWhereExpression = 50
    RULE_s_PowerOfWhereExpression = 51
    RULE_s_UnaryAddOrSubtractWhereExpression = 52
    RULE_s_ListOperatorWhereExpression = 53
    RULE_s_PropertyOrLabelsWhereExpression = 54
    RULE_s_AtTWhereExpression = 55
    RULE_s_SingleIndexWhereExpression = 56
    RULE_s_DoubleIndexWhereExpression = 57
    RULE_s_LeftWhereExpression = 58
    RULE_s_RightWhereExpression = 59
    RULE_s_TimePointLiteral = 60
    RULE_oC_SymbolicName = 61
    RULE_oC_ReservedWord = 62
    RULE_oC_Cypher = 63
    RULE_oC_Statement = 64
    RULE_oC_RegularQuery = 65
    RULE_oC_Union = 66
    RULE_oC_SingleQuery = 67
    RULE_oC_SinglePartQuery = 68
    RULE_oC_MultiPartQuery = 69
    RULE_s_WithPartQuery = 70
    RULE_oC_ReadingClause = 71
    RULE_oC_Unwind = 72
    RULE_oC_Merge = 73
    RULE_oC_MergeAction = 74
    RULE_oC_Create = 75
    RULE_oC_Set = 76
    RULE_oC_Remove = 77
    RULE_oC_RemoveItem = 78
    RULE_oC_InQueryCall = 79
    RULE_oC_StandaloneCall = 80
    RULE_oC_YieldItems = 81
    RULE_oC_YieldItem = 82
    RULE_oC_With = 83
    RULE_oC_Return = 84
    RULE_oC_ProjectionBody = 85
    RULE_oC_ProjectionItems = 86
    RULE_oC_ProjectionItem = 87
    RULE_oC_Order = 88
    RULE_oC_Skip = 89
    RULE_oC_Limit = 90
    RULE_oC_SortItem = 91
    RULE_oC_Where = 92
    RULE_oC_Pattern = 93
    RULE_oC_AnonymousPatternPart = 94
    RULE_oC_PatternElement = 95
    RULE_oC_RelationshipsPattern = 96
    RULE_oC_PatternElementChain = 97
    RULE_oC_RelationshipPattern = 98
    RULE_oC_Properties = 99
    RULE_oC_RelationshipTypes = 100
    RULE_oC_NodeLabels = 101
    RULE_oC_NodeLabel = 102
    RULE_oC_RangeLiteral = 103
    RULE_oC_LabelName = 104
    RULE_oC_RelTypeName = 105
    RULE_oC_PropertyExpression = 106
    RULE_oC_Expression = 107
    RULE_oC_OrExpression = 108
    RULE_oC_XorExpression = 109
    RULE_oC_AndExpression = 110
    RULE_oC_NotExpression = 111
    RULE_oC_ComparisonExpression = 112
    RULE_oC_PartialComparisonExpression = 113
    RULE_oC_StringPredicateExpression = 114
    RULE_oC_ListPredicateExpression = 115
    RULE_oC_NullPredicateExpression = 116
    RULE_oC_AddOrSubtractExpression = 117
    RULE_s_operator = 118
    RULE_oC_MultiplyDivideModuloExpression = 119
    RULE_oC_PowerOfExpression = 120
    RULE_oC_UnaryAddOrSubtractExpression = 121
    RULE_oC_PropertyOrLabelsExpression = 122
    RULE_oC_PropertyLookup = 123
    RULE_oC_Atom = 124
    RULE_oC_CaseExpression = 125
    RULE_oC_CaseAlternative = 126
    RULE_oC_ListComprehension = 127
    RULE_oC_PatternComprehension = 128
    RULE_oC_Quantifier = 129
    RULE_oC_FilterExpression = 130
    RULE_oC_PatternPredicate = 131
    RULE_oC_ParenthesizedExpression = 132
    RULE_oC_IdInColl = 133
    RULE_oC_FunctionInvocation = 134
    RULE_oC_FunctionName = 135
    RULE_oC_ExistentialSubquery = 136
    RULE_oC_ExplicitProcedureInvocation = 137
    RULE_oC_ImplicitProcedureInvocation = 138
    RULE_oC_ProcedureResultField = 139
    RULE_oC_ProcedureName = 140
    RULE_oC_Namespace = 141
    RULE_oC_Variable = 142
    RULE_oC_Literal = 143
    RULE_oC_BooleanLiteral = 144
    RULE_oC_NumberLiteral = 145
    RULE_oC_IntegerLiteral = 146
    RULE_oC_DoubleLiteral = 147
    RULE_oC_ListLiteral = 148
    RULE_oC_MapLiteral = 149
    RULE_oC_PropertyKeyName = 150
    RULE_oC_Parameter = 151
    RULE_oC_SchemaName = 152
    RULE_oC_LeftArrowHead = 153
    RULE_oC_RightArrowHead = 154
    RULE_oC_Dash = 155

    ruleNames =  [ "oC_Query", "oC_Match", "oC_UpdatingClause", "oC_SetItem", 
                   "s_SetPropertyItemOne", "s_SetPropertyItemTwo", "s_SetValueItem", 
                   "s_SetValueItemExpression", "s_Stale", "s_StaleItem", 
                   "oC_Delete", "s_DeleteItem", "s_AtTime", "s_Between", 
                   "s_TimeWindowLimit", "s_Snapshot", "s_Scope", "oC_PatternPart", 
                   "s_PathFunctionPattern", "s_SinglePathPattern", "oC_NodePattern", 
                   "s_Properties", "s_PropertiesPattern", "s_PropertyNode", 
                   "s_ValueNode", "oC_RelationshipDetail", "oC_StringListNullPredicateExpression", 
                   "oC_ListOperatorExpression", "s_SingleIndexExpression", 
                   "s_DoubleIndexExpression", "s_LeftExpression", "s_RightExpression", 
                   "s_AtTExpression", "s_PropertyLookupTime", "s_TimePredicateExpression", 
                   "s_AtTElement", "s_Where", "s_WhereExpression", "s_OrWhereExpression", 
                   "s_XorWhereExpression", "s_AndWhereExpression", "s_NotWhereExpression", 
                   "s_ComparisonWhereExpression", "s_PartialComparisonWhereExpression", 
                   "s_StringListNullPredicateWhereExpression", "s_AddOrSubtractWhereExpression", 
                   "s_TimePredicateWhereExpression", "s_StringPredicateWhereExpression", 
                   "s_ListPredicateWhereExpression", "s_NullPredicateWhereExpression", 
                   "s_MultiplyDivideModuloWhereExpression", "s_PowerOfWhereExpression", 
                   "s_UnaryAddOrSubtractWhereExpression", "s_ListOperatorWhereExpression", 
                   "s_PropertyOrLabelsWhereExpression", "s_AtTWhereExpression", 
                   "s_SingleIndexWhereExpression", "s_DoubleIndexWhereExpression", 
                   "s_LeftWhereExpression", "s_RightWhereExpression", "s_TimePointLiteral", 
                   "oC_SymbolicName", "oC_ReservedWord", "oC_Cypher", "oC_Statement", 
                   "oC_RegularQuery", "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", 
                   "oC_MultiPartQuery", "s_WithPartQuery", "oC_ReadingClause", 
                   "oC_Unwind", "oC_Merge", "oC_MergeAction", "oC_Create", 
                   "oC_Set", "oC_Remove", "oC_RemoveItem", "oC_InQueryCall", 
                   "oC_StandaloneCall", "oC_YieldItems", "oC_YieldItem", 
                   "oC_With", "oC_Return", "oC_ProjectionBody", "oC_ProjectionItems", 
                   "oC_ProjectionItem", "oC_Order", "oC_Skip", "oC_Limit", 
                   "oC_SortItem", "oC_Where", "oC_Pattern", "oC_AnonymousPatternPart", 
                   "oC_PatternElement", "oC_RelationshipsPattern", "oC_PatternElementChain", 
                   "oC_RelationshipPattern", "oC_Properties", "oC_RelationshipTypes", 
                   "oC_NodeLabels", "oC_NodeLabel", "oC_RangeLiteral", "oC_LabelName", 
                   "oC_RelTypeName", "oC_PropertyExpression", "oC_Expression", 
                   "oC_OrExpression", "oC_XorExpression", "oC_AndExpression", 
                   "oC_NotExpression", "oC_ComparisonExpression", "oC_PartialComparisonExpression", 
                   "oC_StringPredicateExpression", "oC_ListPredicateExpression", 
                   "oC_NullPredicateExpression", "oC_AddOrSubtractExpression", 
                   "s_operator", "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", 
                   "oC_UnaryAddOrSubtractExpression", "oC_PropertyOrLabelsExpression", 
                   "oC_PropertyLookup", "oC_Atom", "oC_CaseExpression", 
                   "oC_CaseAlternative", "oC_ListComprehension", "oC_PatternComprehension", 
                   "oC_Quantifier", "oC_FilterExpression", "oC_PatternPredicate", 
                   "oC_ParenthesizedExpression", "oC_IdInColl", "oC_FunctionInvocation", 
                   "oC_FunctionName", "oC_ExistentialSubquery", "oC_ExplicitProcedureInvocation", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_Variable", "oC_Literal", 
                   "oC_BooleanLiteral", "oC_NumberLiteral", "oC_IntegerLiteral", 
                   "oC_DoubleLiteral", "oC_ListLiteral", "oC_MapLiteral", 
                   "oC_PropertyKeyName", "oC_Parameter", "oC_SchemaName", 
                   "oC_LeftArrowHead", "oC_RightArrowHead", "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    AtT=46
    PoundValue=47
    NOW=48
    AT_TIME=49
    SNAPSHOT=50
    BETWEEN=51
    SCOPE=52
    STALE=53
    DURING=54
    OVERLAPS=55
    UNION=56
    ALL=57
    OPTIONAL=58
    MATCH=59
    UNWIND=60
    AS=61
    MERGE=62
    ON=63
    CREATE=64
    SET=65
    DETACH=66
    DELETE=67
    REMOVE=68
    CALL=69
    YIELD=70
    WITH=71
    RETURN=72
    DISTINCT=73
    ORDER=74
    BY=75
    L_SKIP=76
    LIMIT=77
    ASCENDING=78
    ASC=79
    DESCENDING=80
    DESC=81
    WHERE=82
    OR=83
    XOR=84
    AND=85
    NOT=86
    STARTS=87
    ENDS=88
    CONTAINS=89
    IN=90
    IS=91
    NULL=92
    COUNT=93
    CASE=94
    ELSE=95
    END=96
    WHEN=97
    THEN=98
    ANY=99
    NONE=100
    SINGLE=101
    EXISTS=102
    TRUE=103
    FALSE=104
    HexInteger=105
    DecimalInteger=106
    OctalInteger=107
    HexLetter=108
    HexDigit=109
    Digit=110
    NonZeroDigit=111
    NonZeroOctDigit=112
    OctDigit=113
    ZeroDigit=114
    ExponentDecimalReal=115
    RegularDecimalReal=116
    StringLiteral=117
    EscapedChar=118
    CONSTRAINT=119
    DO=120
    FOR=121
    REQUIRE=122
    UNIQUE=123
    MANDATORY=124
    SCALAR=125
    OF=126
    ADD=127
    DROP=128
    FILTER=129
    EXTRACT=130
    UnescapedSymbolicName=131
    IdentifierStart=132
    IdentifierPart=133
    EscapedSymbolicName=134
    SP=135
    WHITESPACE=136
    Comment=137

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StandaloneCallContext,0)


        def s_TimeWindowLimit(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimeWindowLimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = s_cypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Query)
        try:
            self.state = 315
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 312
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 313
                self.oC_StandaloneCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 314
                self.s_TimeWindowLimit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_Where(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def s_Between(self):
            return self.getTypedRuleContext(s_cypherParser.S_BetweenContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = s_cypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 317
                self.match(s_cypherParser.OPTIONAL)
                self.state = 318
                self.match(s_cypherParser.SP)


            self.state = 321
            self.match(s_cypherParser.MATCH)
            self.state = 323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 322
                self.match(s_cypherParser.SP)


            self.state = 325
            self.oC_Pattern()
            self.state = 333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 326
                    self.match(s_cypherParser.SP)


                self.state = 331
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 329
                    self.s_AtTime()
                    pass
                elif token in [51]:
                    self.state = 330
                    self.s_Between()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 335
                    self.match(s_cypherParser.SP)


                self.state = 338
                self.s_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Create(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CreateContext,0)


        def oC_Merge(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MergeContext,0)


        def oC_Delete(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DeleteContext,0)


        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RemoveContext,0)


        def s_Stale(self):
            return self.getTypedRuleContext(s_cypherParser.S_StaleContext,0)


        def s_AtTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTimeContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = s_cypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_UpdatingClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.state = 341
                self.oC_Create()
                pass
            elif token in [62]:
                self.state = 342
                self.oC_Merge()
                pass
            elif token in [66, 67]:
                self.state = 343
                self.oC_Delete()
                pass
            elif token in [65]:
                self.state = 344
                self.oC_Set()
                pass
            elif token in [68]:
                self.state = 345
                self.oC_Remove()
                pass
            elif token in [53]:
                self.state = 346
                self.s_Stale()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 349
                    self.match(s_cypherParser.SP)


                self.state = 352
                self.s_AtTime()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_SetPropertyItemOne(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemOneContext,0)


        def s_SetPropertyItemTwo(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetPropertyItemTwoContext,0)


        def s_SetValueItem(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetValueItemContext,0)


        def s_SetValueItemExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_SetValueItemExpressionContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = s_cypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 355
                self.oC_Variable()
                self.state = 357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 356
                    self.match(s_cypherParser.SP)


                self.state = 359
                self.s_AtTElement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 361
                self.oC_Variable()
                self.state = 366
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 363
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 362
                        self.match(s_cypherParser.SP)


                    self.state = 365
                    self.s_AtTElement()


                self.state = 368
                self.match(s_cypherParser.T__0)
                self.state = 369
                self.s_SetPropertyItemOne()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 371
                self.oC_Variable()
                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 373
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 372
                        self.match(s_cypherParser.SP)


                    self.state = 375
                    self.s_AtTElement()


                self.state = 378
                self.match(s_cypherParser.T__0)
                self.state = 379
                self.s_SetPropertyItemTwo()
                self.state = 381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 380
                    self.match(s_cypherParser.SP)


                self.state = 383
                self.s_SetValueItem()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 385
                self.oC_Variable()
                self.state = 390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==135:
                    self.state = 387
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 386
                        self.match(s_cypherParser.SP)


                    self.state = 389
                    self.s_AtTElement()


                self.state = 392
                self.match(s_cypherParser.T__0)
                self.state = 393
                self.s_SetPropertyItemTwo()
                self.state = 395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 394
                    self.match(s_cypherParser.SP)


                self.state = 397
                self.match(s_cypherParser.T__1)
                self.state = 399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 398
                    self.match(s_cypherParser.SP)


                self.state = 401
                self.s_SetValueItemExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 403
                self.oC_PropertyExpression()
                self.state = 405
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 404
                    self.match(s_cypherParser.SP)


                self.state = 407
                self.match(s_cypherParser.T__1)
                self.state = 409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 408
                    self.match(s_cypherParser.SP)


                self.state = 411
                self.oC_Expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 413
                self.oC_Variable()
                self.state = 415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 414
                    self.match(s_cypherParser.SP)


                self.state = 417
                self.match(s_cypherParser.T__1)
                self.state = 419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 418
                    self.match(s_cypherParser.SP)


                self.state = 421
                self.oC_Expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 423
                self.oC_Variable()
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 424
                    self.match(s_cypherParser.SP)


                self.state = 427
                self.match(s_cypherParser.T__2)
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 428
                    self.match(s_cypherParser.SP)


                self.state = 431
                self.oC_Expression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 433
                self.oC_Variable()
                self.state = 435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 434
                    self.match(s_cypherParser.SP)


                self.state = 437
                self.oC_NodeLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemOneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemOne

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemOne" ):
                listener.enterS_SetPropertyItemOne(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemOne" ):
                listener.exitS_SetPropertyItemOne(self)




    def s_SetPropertyItemOne(self):

        localctx = s_cypherParser.S_SetPropertyItemOneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_s_SetPropertyItemOne)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.oC_PropertyKeyName()
            self.state = 443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 442
                self.match(s_cypherParser.SP)


            self.state = 445
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetPropertyItemTwoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetPropertyItemTwo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetPropertyItemTwo" ):
                listener.enterS_SetPropertyItemTwo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetPropertyItemTwo" ):
                listener.exitS_SetPropertyItemTwo(self)




    def s_SetPropertyItemTwo(self):

        localctx = s_cypherParser.S_SetPropertyItemTwoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_s_SetPropertyItemTwo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self.oC_PropertyKeyName()
            self.state = 452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 448
                    self.match(s_cypherParser.SP)


                self.state = 451
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetValueItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetValueItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetValueItem" ):
                listener.enterS_SetValueItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetValueItem" ):
                listener.exitS_SetValueItem(self)




    def s_SetValueItem(self):

        localctx = s_cypherParser.S_SetValueItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_s_SetValueItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.match(s_cypherParser.PoundValue)
            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 455
                self.match(s_cypherParser.SP)


            self.state = 458
            self.s_AtTElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SetValueItemExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SetValueItemExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SetValueItemExpression" ):
                listener.enterS_SetValueItemExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SetValueItemExpression" ):
                listener.exitS_SetValueItemExpression(self)




    def s_SetValueItemExpression(self):

        localctx = s_cypherParser.S_SetValueItemExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_s_SetValueItemExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.oC_Expression()
            self.state = 465
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 461
                    self.match(s_cypherParser.SP)


                self.state = 464
                self.s_AtTElement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def s_StaleItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_StaleItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_StaleItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Stale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Stale" ):
                listener.enterS_Stale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Stale" ):
                listener.exitS_Stale(self)




    def s_Stale(self):

        localctx = s_cypherParser.S_StaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_s_Stale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.match(s_cypherParser.STALE)
            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 468
                self.match(s_cypherParser.SP)


            self.state = 471
            self.s_StaleItem()
            self.state = 482
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 473
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 472
                        self.match(s_cypherParser.SP)


                    self.state = 475
                    self.match(s_cypherParser.T__3)
                    self.state = 477
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 476
                        self.match(s_cypherParser.SP)


                    self.state = 479
                    self.s_StaleItem() 
                self.state = 484
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StaleItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StaleItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StaleItem" ):
                listener.enterS_StaleItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StaleItem" ):
                listener.exitS_StaleItem(self)




    def s_StaleItem(self):

        localctx = s_cypherParser.S_StaleItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_s_StaleItem)
        self._la = 0 # Token type
        try:
            self.state = 494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 485
                self.oC_Expression()
                self.state = 486
                self.match(s_cypherParser.T__0)
                self.state = 487
                self.oC_PropertyKeyName()
                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 488
                    self.match(s_cypherParser.SP)


                self.state = 491
                self.match(s_cypherParser.PoundValue)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 493
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def s_DeleteItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DeleteItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DeleteItemContext,i)


        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = s_cypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 496
                self.match(s_cypherParser.DETACH)
                self.state = 497
                self.match(s_cypherParser.SP)


            self.state = 500
            self.match(s_cypherParser.DELETE)
            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 501
                self.match(s_cypherParser.SP)


            self.state = 504
            self.s_DeleteItem()
            self.state = 515
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 506
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 505
                        self.match(s_cypherParser.SP)


                    self.state = 508
                    self.match(s_cypherParser.T__3)
                    self.state = 510
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 509
                        self.match(s_cypherParser.SP)


                    self.state = 512
                    self.s_DeleteItem() 
                self.state = 517
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DeleteItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DeleteItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DeleteItem" ):
                listener.enterS_DeleteItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DeleteItem" ):
                listener.exitS_DeleteItem(self)




    def s_DeleteItem(self):

        localctx = s_cypherParser.S_DeleteItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_s_DeleteItem)
        self._la = 0 # Token type
        try:
            self.state = 527
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 518
                self.oC_Expression()
                self.state = 519
                self.match(s_cypherParser.T__0)
                self.state = 520
                self.oC_PropertyKeyName()
                self.state = 522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 521
                    self.match(s_cypherParser.SP)


                self.state = 524
                self.match(s_cypherParser.PoundValue)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 526
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTime" ):
                listener.enterS_AtTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTime" ):
                listener.exitS_AtTime(self)




    def s_AtTime(self):

        localctx = s_cypherParser.S_AtTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_s_AtTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 529
            self.match(s_cypherParser.AT_TIME)
            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 530
                self.match(s_cypherParser.SP)


            self.state = 533
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_BetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Between

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Between" ):
                listener.enterS_Between(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Between" ):
                listener.exitS_Between(self)




    def s_Between(self):

        localctx = s_cypherParser.S_BetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_s_Between)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535
            self.match(s_cypherParser.BETWEEN)
            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 536
                self.match(s_cypherParser.SP)


            self.state = 539
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimeWindowLimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_Snapshot(self):
            return self.getTypedRuleContext(s_cypherParser.S_SnapshotContext,0)


        def s_Scope(self):
            return self.getTypedRuleContext(s_cypherParser.S_ScopeContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimeWindowLimit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimeWindowLimit" ):
                listener.enterS_TimeWindowLimit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimeWindowLimit" ):
                listener.exitS_TimeWindowLimit(self)




    def s_TimeWindowLimit(self):

        localctx = s_cypherParser.S_TimeWindowLimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_s_TimeWindowLimit)
        try:
            self.state = 543
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 541
                self.s_Snapshot()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 542
                self.s_Scope()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SnapshotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Snapshot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Snapshot" ):
                listener.enterS_Snapshot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Snapshot" ):
                listener.exitS_Snapshot(self)




    def s_Snapshot(self):

        localctx = s_cypherParser.S_SnapshotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_s_Snapshot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self.match(s_cypherParser.SNAPSHOT)
            self.state = 547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 546
                self.match(s_cypherParser.SP)


            self.state = 549
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Scope" ):
                listener.enterS_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Scope" ):
                listener.exitS_Scope(self)




    def s_Scope(self):

        localctx = s_cypherParser.S_ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_s_Scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(s_cypherParser.SCOPE)
            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 552
                self.match(s_cypherParser.SP)


            self.state = 555
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def s_PathFunctionPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PathFunctionPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AnonymousPatternPartContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = s_cypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 557
                self.oC_Variable()
                self.state = 559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 558
                    self.match(s_cypherParser.SP)


                self.state = 561
                self.match(s_cypherParser.T__1)
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 562
                    self.match(s_cypherParser.SP)


                self.state = 565
                self.s_PathFunctionPattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 567
                self.oC_Variable()
                self.state = 569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 568
                    self.match(s_cypherParser.SP)


                self.state = 571
                self.match(s_cypherParser.T__1)
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 572
                    self.match(s_cypherParser.SP)


                self.state = 575
                self.oC_AnonymousPatternPart()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 577
                self.oC_AnonymousPatternPart()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PathFunctionPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def s_SinglePathPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_SinglePathPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PathFunctionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PathFunctionPattern" ):
                listener.enterS_PathFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PathFunctionPattern" ):
                listener.exitS_PathFunctionPattern(self)




    def s_PathFunctionPattern(self):

        localctx = s_cypherParser.S_PathFunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_s_PathFunctionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self.oC_FunctionName()
            self.state = 582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 581
                self.match(s_cypherParser.SP)


            self.state = 584
            self.match(s_cypherParser.T__4)
            self.state = 586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 585
                self.match(s_cypherParser.SP)


            self.state = 588
            self.s_SinglePathPattern()
            self.state = 590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 589
                self.match(s_cypherParser.SP)


            self.state = 592
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SinglePathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodePatternContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,i)


        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SinglePathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SinglePathPattern" ):
                listener.enterS_SinglePathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SinglePathPattern" ):
                listener.exitS_SinglePathPattern(self)




    def s_SinglePathPattern(self):

        localctx = s_cypherParser.S_SinglePathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_s_SinglePathPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.oC_NodePattern()
            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 595
                self.match(s_cypherParser.SP)


            self.state = 598
            self.oC_RelationshipPattern()
            self.state = 600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 599
                self.match(s_cypherParser.SP)


            self.state = 602
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def s_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = s_cypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.match(s_cypherParser.T__4)
            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 605
                self.match(s_cypherParser.SP)


            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 608
                self.oC_Variable()
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 609
                    self.match(s_cypherParser.SP)




            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 614
                self.oC_NodeLabels()
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 615
                    self.match(s_cypherParser.SP)




            self.state = 624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 620
                self.s_AtTElement()
                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 621
                    self.match(s_cypherParser.SP)




            self.state = 630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==26:
                self.state = 626
                self.s_Properties()
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 627
                    self.match(s_cypherParser.SP)




            self.state = 632
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertiesPattern(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertiesPatternContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Properties" ):
                listener.enterS_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Properties" ):
                listener.exitS_Properties(self)




    def s_Properties(self):

        localctx = s_cypherParser.S_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_s_Properties)
        try:
            self.state = 636
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 634
                self.s_PropertiesPattern()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 635
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertiesPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_PropertyNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PropertyNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PropertyNodeContext,i)


        def s_ValueNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_ValueNodeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_ValueNodeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertiesPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertiesPattern" ):
                listener.enterS_PropertiesPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertiesPattern" ):
                listener.exitS_PropertiesPattern(self)




    def s_PropertiesPattern(self):

        localctx = s_cypherParser.S_PropertiesPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_s_PropertiesPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self.match(s_cypherParser.T__6)
            self.state = 640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 639
                self.match(s_cypherParser.SP)


            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 642
                self.s_PropertyNode()
                self.state = 643
                self.match(s_cypherParser.T__7)
                self.state = 644
                self.s_ValueNode()
                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 645
                    self.match(s_cypherParser.T__3)
                    self.state = 647
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 646
                        self.match(s_cypherParser.SP)


                    self.state = 649
                    self.s_PropertyNode()
                    self.state = 650
                    self.match(s_cypherParser.T__7)
                    self.state = 651
                    self.s_ValueNode()
                    self.state = 657
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 660
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyNode" ):
                listener.enterS_PropertyNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyNode" ):
                listener.exitS_PropertyNode(self)




    def s_PropertyNode(self):

        localctx = s_cypherParser.S_PropertyNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_s_PropertyNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.oC_PropertyKeyName()
            self.state = 664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 663
                self.match(s_cypherParser.SP)


            self.state = 670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 666
                self.s_AtTElement()
                self.state = 668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 667
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ValueNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ValueNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ValueNode" ):
                listener.enterS_ValueNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ValueNode" ):
                listener.exitS_ValueNode(self)




    def s_ValueNode(self):

        localctx = s_cypherParser.S_ValueNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_s_ValueNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 672
                self.match(s_cypherParser.SP)


            self.state = 675
            self.oC_Expression()
            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 676
                self.match(s_cypherParser.SP)


            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 679
                self.s_AtTElement()
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 680
                    self.match(s_cypherParser.SP)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RangeLiteralContext,0)


        def s_AtTElement(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTElementContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = s_cypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.match(s_cypherParser.T__9)
            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 686
                self.match(s_cypherParser.SP)


            self.state = 693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 689
                self.oC_Variable()
                self.state = 691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 690
                    self.match(s_cypherParser.SP)




            self.state = 699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 695
                self.oC_RelationshipTypes()
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 696
                    self.match(s_cypherParser.SP)




            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 701
                self.oC_RangeLiteral()


            self.state = 708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 704
                self.s_AtTElement()
                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 705
                    self.match(s_cypherParser.SP)




            self.state = 714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==26:
                self.state = 710
                self.oC_Properties()
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 711
                    self.match(s_cypherParser.SP)




            self.state = 716
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def s_TimePredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateExpressionContext,0)


        def oC_StringPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringPredicateExpressionContext,0)


        def oC_ListPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListPredicateExpressionContext,0)


        def oC_NullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NullPredicateExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringListNullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullPredicateExpression" ):
                listener.enterOC_StringListNullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullPredicateExpression" ):
                listener.exitOC_StringListNullPredicateExpression(self)




    def oC_StringListNullPredicateExpression(self):

        localctx = s_cypherParser.OC_StringListNullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_oC_StringListNullPredicateExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self.oC_AddOrSubtractExpression()
            self.state = 723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 719
                self.s_TimePredicateExpression()

            elif la_ == 2:
                self.state = 720
                self.oC_StringPredicateExpression()

            elif la_ == 3:
                self.state = 721
                self.oC_ListPredicateExpression()

            elif la_ == 4:
                self.state = 722
                self.oC_NullPredicateExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def s_AtTExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTExpressionContext,0)


        def s_SingleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_SingleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_SingleIndexExpressionContext,i)


        def s_DoubleIndexExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DoubleIndexExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DoubleIndexExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = s_cypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_oC_ListOperatorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 725
                self.oC_PropertyOrLabelsExpression()
                pass

            elif la_ == 2:
                self.state = 726
                self.s_AtTExpression()
                pass


            self.state = 733
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 731
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                    if la_ == 1:
                        self.state = 729
                        self.s_SingleIndexExpression()
                        pass

                    elif la_ == 2:
                        self.state = 730
                        self.s_DoubleIndexExpression()
                        pass

             
                self.state = 735
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SingleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SingleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SingleIndexExpression" ):
                listener.enterS_SingleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SingleIndexExpression" ):
                listener.exitS_SingleIndexExpression(self)




    def s_SingleIndexExpression(self):

        localctx = s_cypherParser.S_SingleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_s_SingleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 736
                self.match(s_cypherParser.SP)


            self.state = 739
            self.match(s_cypherParser.T__9)
            self.state = 740
            self.s_LeftExpression()
            self.state = 741
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DoubleIndexExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def s_LeftExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftExpressionContext,0)


        def s_RightExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_RightExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DoubleIndexExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DoubleIndexExpression" ):
                listener.enterS_DoubleIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DoubleIndexExpression" ):
                listener.exitS_DoubleIndexExpression(self)




    def s_DoubleIndexExpression(self):

        localctx = s_cypherParser.S_DoubleIndexExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_s_DoubleIndexExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 743
                self.match(s_cypherParser.SP)


            self.state = 746
            self.match(s_cypherParser.T__9)
            self.state = 748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119701152) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 747
                self.s_LeftExpression()


            self.state = 750
            self.match(s_cypherParser.T__11)
            self.state = 752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119701152) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 751
                self.s_RightExpression()


            self.state = 754
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_LeftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_LeftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_LeftExpression" ):
                listener.enterS_LeftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_LeftExpression" ):
                listener.exitS_LeftExpression(self)




    def s_LeftExpression(self):

        localctx = s_cypherParser.S_LeftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_s_LeftExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_RightExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_RightExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_RightExpression" ):
                listener.enterS_RightExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_RightExpression" ):
                listener.exitS_RightExpression(self)




    def s_RightExpression(self):

        localctx = s_cypherParser.S_RightExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_s_RightExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def s_PropertyLookupTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupTimeContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTExpression" ):
                listener.enterS_AtTExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTExpression" ):
                listener.exitS_AtTExpression(self)




    def s_AtTExpression(self):

        localctx = s_cypherParser.S_AtTExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_s_AtTExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.oC_Atom()
            self.state = 775
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 765 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 762
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 761
                            self.match(s_cypherParser.SP)


                        self.state = 764
                        self.oC_PropertyLookup()

                    else:
                        raise NoViableAltException(self)
                    self.state = 767 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

                self.state = 773
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 770
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 769
                        self.match(s_cypherParser.SP)


                    self.state = 772
                    self.match(s_cypherParser.PoundValue)




            self.state = 778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 777
                self.match(s_cypherParser.SP)


            self.state = 780
            self.s_PropertyLookupTime()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyLookupTimeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyLookupTime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyLookupTime" ):
                listener.enterS_PropertyLookupTime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyLookupTime" ):
                listener.exitS_PropertyLookupTime(self)




    def s_PropertyLookupTime(self):

        localctx = s_cypherParser.S_PropertyLookupTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_s_PropertyLookupTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            self.match(s_cypherParser.AtT)
            self.state = 789
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 784
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 783
                        self.match(s_cypherParser.SP)


                    self.state = 786
                    self.oC_PropertyLookup() 
                self.state = 791
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateExpression" ):
                listener.enterS_TimePredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateExpression" ):
                listener.exitS_TimePredicateExpression(self)




    def s_TimePredicateExpression(self):

        localctx = s_cypherParser.S_TimePredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_s_TimePredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.match(s_cypherParser.SP)
            self.state = 793
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 794
            self.match(s_cypherParser.SP)
            self.state = 795
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AtT(self):
            return self.getToken(s_cypherParser.AtT, 0)

        def s_TimePointLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_TimePointLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_TimePointLiteralContext,i)


        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTElement" ):
                listener.enterS_AtTElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTElement" ):
                listener.exitS_AtTElement(self)




    def s_AtTElement(self):

        localctx = s_cypherParser.S_AtTElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_s_AtTElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.match(s_cypherParser.AtT)
            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 798
                self.match(s_cypherParser.SP)


            self.state = 801
            self.match(s_cypherParser.T__4)
            self.state = 803
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 802
                self.match(s_cypherParser.SP)


            self.state = 805
            self.s_TimePointLiteral()
            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 806
                self.match(s_cypherParser.SP)


            self.state = 809
            self.match(s_cypherParser.T__3)
            self.state = 811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 810
                self.match(s_cypherParser.SP)


            self.state = 815
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 117]:
                self.state = 813
                self.s_TimePointLiteral()
                pass
            elif token in [48]:
                self.state = 814
                self.match(s_cypherParser.NOW)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 817
                self.match(s_cypherParser.SP)


            self.state = 820
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def s_WhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_WhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_Where" ):
                listener.enterS_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_Where" ):
                listener.exitS_Where(self)




    def s_Where(self):

        localctx = s_cypherParser.S_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_s_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(s_cypherParser.WHERE)
            self.state = 823
            self.match(s_cypherParser.SP)
            self.state = 824
            self.s_WhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_OrWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_OrWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_WhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_WhereExpression" ):
                listener.enterS_WhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_WhereExpression" ):
                listener.exitS_WhereExpression(self)




    def s_WhereExpression(self):

        localctx = s_cypherParser.S_WhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_s_WhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.s_OrWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_OrWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_XorWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_XorWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_XorWhereExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_OrWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_OrWhereExpression" ):
                listener.enterS_OrWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_OrWhereExpression" ):
                listener.exitS_OrWhereExpression(self)




    def s_OrWhereExpression(self):

        localctx = s_cypherParser.S_OrWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_s_OrWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.s_XorWhereExpression()
            self.state = 835
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 829
                    self.match(s_cypherParser.SP)
                    self.state = 830
                    self.match(s_cypherParser.OR)
                    self.state = 831
                    self.match(s_cypherParser.SP)
                    self.state = 832
                    self.s_XorWhereExpression() 
                self.state = 837
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_XorWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_AndWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_AndWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_AndWhereExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_XorWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_XorWhereExpression" ):
                listener.enterS_XorWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_XorWhereExpression" ):
                listener.exitS_XorWhereExpression(self)




    def s_XorWhereExpression(self):

        localctx = s_cypherParser.S_XorWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_s_XorWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.s_AndWhereExpression()
            self.state = 845
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 839
                    self.match(s_cypherParser.SP)
                    self.state = 840
                    self.match(s_cypherParser.XOR)
                    self.state = 841
                    self.match(s_cypherParser.SP)
                    self.state = 842
                    self.s_AndWhereExpression() 
                self.state = 847
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AndWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_NotWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_NotWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_NotWhereExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AndWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AndWhereExpression" ):
                listener.enterS_AndWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AndWhereExpression" ):
                listener.exitS_AndWhereExpression(self)




    def s_AndWhereExpression(self):

        localctx = s_cypherParser.S_AndWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_s_AndWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.s_NotWhereExpression()
            self.state = 855
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 849
                    self.match(s_cypherParser.SP)
                    self.state = 850
                    self.match(s_cypherParser.AND)
                    self.state = 851
                    self.match(s_cypherParser.SP)
                    self.state = 852
                    self.s_NotWhereExpression() 
                self.state = 857
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_NotWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_ComparisonWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_ComparisonWhereExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_NotWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_NotWhereExpression" ):
                listener.enterS_NotWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_NotWhereExpression" ):
                listener.exitS_NotWhereExpression(self)




    def s_NotWhereExpression(self):

        localctx = s_cypherParser.S_NotWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_s_NotWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 858
                self.match(s_cypherParser.NOT)
                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 859
                    self.match(s_cypherParser.SP)


                self.state = 866
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 867
            self.s_ComparisonWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ComparisonWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_StringListNullPredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_StringListNullPredicateWhereExpressionContext,0)


        def s_PartialComparisonWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PartialComparisonWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PartialComparisonWhereExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ComparisonWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ComparisonWhereExpression" ):
                listener.enterS_ComparisonWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ComparisonWhereExpression" ):
                listener.exitS_ComparisonWhereExpression(self)




    def s_ComparisonWhereExpression(self):

        localctx = s_cypherParser.S_ComparisonWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_s_ComparisonWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self.s_StringListNullPredicateWhereExpression()
            self.state = 876
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 871
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 870
                        self.match(s_cypherParser.SP)


                    self.state = 873
                    self.s_PartialComparisonWhereExpression() 
                self.state = 878
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PartialComparisonWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_operator(self):
            return self.getTypedRuleContext(s_cypherParser.S_operatorContext,0)


        def s_StringListNullPredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_StringListNullPredicateWhereExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PartialComparisonWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PartialComparisonWhereExpression" ):
                listener.enterS_PartialComparisonWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PartialComparisonWhereExpression" ):
                listener.exitS_PartialComparisonWhereExpression(self)




    def s_PartialComparisonWhereExpression(self):

        localctx = s_cypherParser.S_PartialComparisonWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_s_PartialComparisonWhereExpression)
        self._la = 0 # Token type
        try:
            self.state = 915
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 879
                self.s_operator()
                self.state = 881
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 880
                    self.match(s_cypherParser.SP)


                self.state = 883
                self.s_StringListNullPredicateWhereExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 885
                self.s_operator()
                self.state = 887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 886
                    self.match(s_cypherParser.SP)


                self.state = 889
                self.s_StringListNullPredicateWhereExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 891
                self.s_operator()
                self.state = 893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 892
                    self.match(s_cypherParser.SP)


                self.state = 895
                self.s_StringListNullPredicateWhereExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 897
                self.s_operator()
                self.state = 899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 898
                    self.match(s_cypherParser.SP)


                self.state = 901
                self.s_StringListNullPredicateWhereExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 903
                self.s_operator()
                self.state = 905
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 904
                    self.match(s_cypherParser.SP)


                self.state = 907
                self.s_StringListNullPredicateWhereExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 909
                self.s_operator()
                self.state = 911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 910
                    self.match(s_cypherParser.SP)


                self.state = 913
                self.s_StringListNullPredicateWhereExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StringListNullPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def s_TimePredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_TimePredicateWhereExpressionContext,0)


        def s_StringPredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_StringPredicateWhereExpressionContext,0)


        def s_ListPredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_ListPredicateWhereExpressionContext,0)


        def s_NullPredicateWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_NullPredicateWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StringListNullPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StringListNullPredicateWhereExpression" ):
                listener.enterS_StringListNullPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StringListNullPredicateWhereExpression" ):
                listener.exitS_StringListNullPredicateWhereExpression(self)




    def s_StringListNullPredicateWhereExpression(self):

        localctx = s_cypherParser.S_StringListNullPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_s_StringListNullPredicateWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            self.s_AddOrSubtractWhereExpression()
            self.state = 922
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 918
                self.s_TimePredicateWhereExpression()

            elif la_ == 2:
                self.state = 919
                self.s_StringPredicateWhereExpression()

            elif la_ == 3:
                self.state = 920
                self.s_ListPredicateWhereExpression()

            elif la_ == 4:
                self.state = 921
                self.s_NullPredicateWhereExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AddOrSubtractWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_MultiplyDivideModuloWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_MultiplyDivideModuloWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_MultiplyDivideModuloWhereExpressionContext,i)


        def s_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_operatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_operatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AddOrSubtractWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AddOrSubtractWhereExpression" ):
                listener.enterS_AddOrSubtractWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AddOrSubtractWhereExpression" ):
                listener.exitS_AddOrSubtractWhereExpression(self)




    def s_AddOrSubtractWhereExpression(self):

        localctx = s_cypherParser.S_AddOrSubtractWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_s_AddOrSubtractWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 924
            self.s_MultiplyDivideModuloWhereExpression()
            self.state = 945
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,136,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 943
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                    if la_ == 1:
                        self.state = 926
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 925
                            self.match(s_cypherParser.SP)


                        self.state = 928
                        self.s_operator()
                        self.state = 930
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 929
                            self.match(s_cypherParser.SP)


                        self.state = 932
                        self.s_MultiplyDivideModuloWhereExpression()
                        pass

                    elif la_ == 2:
                        self.state = 935
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 934
                            self.match(s_cypherParser.SP)


                        self.state = 937
                        self.s_operator()
                        self.state = 939
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 938
                            self.match(s_cypherParser.SP)


                        self.state = 941
                        self.s_MultiplyDivideModuloWhereExpression()
                        pass

             
                self.state = 947
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePredicateWhereExpression" ):
                listener.enterS_TimePredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePredicateWhereExpression" ):
                listener.exitS_TimePredicateWhereExpression(self)




    def s_TimePredicateWhereExpression(self):

        localctx = s_cypherParser.S_TimePredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_s_TimePredicateWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.match(s_cypherParser.SP)
            self.state = 949
            _la = self._input.LA(1)
            if not(_la==54 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 950
            self.match(s_cypherParser.SP)
            self.state = 951
            self.s_AddOrSubtractWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_StringPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_StringPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_StringPredicateWhereExpression" ):
                listener.enterS_StringPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_StringPredicateWhereExpression" ):
                listener.exitS_StringPredicateWhereExpression(self)




    def s_StringPredicateWhereExpression(self):

        localctx = s_cypherParser.S_StringPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_s_StringPredicateWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 953
                self.match(s_cypherParser.SP)
                self.state = 954
                self.match(s_cypherParser.STARTS)
                self.state = 955
                self.match(s_cypherParser.SP)
                self.state = 956
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 957
                self.match(s_cypherParser.SP)
                self.state = 958
                self.match(s_cypherParser.ENDS)
                self.state = 959
                self.match(s_cypherParser.SP)
                self.state = 960
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 961
                self.match(s_cypherParser.SP)
                self.state = 962
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 965
                self.match(s_cypherParser.SP)


            self.state = 968
            self.s_AddOrSubtractWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ListPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def s_AddOrSubtractWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AddOrSubtractWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ListPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ListPredicateWhereExpression" ):
                listener.enterS_ListPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ListPredicateWhereExpression" ):
                listener.exitS_ListPredicateWhereExpression(self)




    def s_ListPredicateWhereExpression(self):

        localctx = s_cypherParser.S_ListPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_s_ListPredicateWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.match(s_cypherParser.SP)
            self.state = 971
            self.match(s_cypherParser.IN)
            self.state = 973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 972
                self.match(s_cypherParser.SP)


            self.state = 975
            self.s_AddOrSubtractWhereExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_NullPredicateWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_NullPredicateWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_NullPredicateWhereExpression" ):
                listener.enterS_NullPredicateWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_NullPredicateWhereExpression" ):
                listener.exitS_NullPredicateWhereExpression(self)




    def s_NullPredicateWhereExpression(self):

        localctx = s_cypherParser.S_NullPredicateWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_s_NullPredicateWhereExpression)
        try:
            self.state = 987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 977
                self.match(s_cypherParser.SP)
                self.state = 978
                self.match(s_cypherParser.IS)
                self.state = 979
                self.match(s_cypherParser.SP)
                self.state = 980
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 981
                self.match(s_cypherParser.SP)
                self.state = 982
                self.match(s_cypherParser.IS)
                self.state = 983
                self.match(s_cypherParser.SP)
                self.state = 984
                self.match(s_cypherParser.NOT)
                self.state = 985
                self.match(s_cypherParser.SP)
                self.state = 986
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_MultiplyDivideModuloWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PowerOfWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_PowerOfWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_PowerOfWhereExpressionContext,i)


        def s_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_operatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_operatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_MultiplyDivideModuloWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_MultiplyDivideModuloWhereExpression" ):
                listener.enterS_MultiplyDivideModuloWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_MultiplyDivideModuloWhereExpression" ):
                listener.exitS_MultiplyDivideModuloWhereExpression(self)




    def s_MultiplyDivideModuloWhereExpression(self):

        localctx = s_cypherParser.S_MultiplyDivideModuloWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_s_MultiplyDivideModuloWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self.s_PowerOfWhereExpression()
            self.state = 1019
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,148,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1017
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
                    if la_ == 1:
                        self.state = 991
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 990
                            self.match(s_cypherParser.SP)


                        self.state = 993
                        self.s_operator()
                        self.state = 995
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 994
                            self.match(s_cypherParser.SP)


                        self.state = 997
                        self.s_PowerOfWhereExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1000
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 999
                            self.match(s_cypherParser.SP)


                        self.state = 1002
                        self.s_operator()
                        self.state = 1004
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1003
                            self.match(s_cypherParser.SP)


                        self.state = 1006
                        self.s_PowerOfWhereExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1009
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1008
                            self.match(s_cypherParser.SP)


                        self.state = 1011
                        self.s_operator()
                        self.state = 1013
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1012
                            self.match(s_cypherParser.SP)


                        self.state = 1015
                        self.s_PowerOfWhereExpression()
                        pass

             
                self.state = 1021
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PowerOfWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_UnaryAddOrSubtractWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_UnaryAddOrSubtractWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_UnaryAddOrSubtractWhereExpressionContext,i)


        def s_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_operatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_operatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PowerOfWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PowerOfWhereExpression" ):
                listener.enterS_PowerOfWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PowerOfWhereExpression" ):
                listener.exitS_PowerOfWhereExpression(self)




    def s_PowerOfWhereExpression(self):

        localctx = s_cypherParser.S_PowerOfWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_s_PowerOfWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1022
            self.s_UnaryAddOrSubtractWhereExpression()
            self.state = 1034
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1024
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1023
                        self.match(s_cypherParser.SP)


                    self.state = 1026
                    self.s_operator()
                    self.state = 1028
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1027
                        self.match(s_cypherParser.SP)


                    self.state = 1030
                    self.s_UnaryAddOrSubtractWhereExpression() 
                self.state = 1036
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_UnaryAddOrSubtractWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_ListOperatorWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_ListOperatorWhereExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_UnaryAddOrSubtractWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_UnaryAddOrSubtractWhereExpression" ):
                listener.enterS_UnaryAddOrSubtractWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_UnaryAddOrSubtractWhereExpression" ):
                listener.exitS_UnaryAddOrSubtractWhereExpression(self)




    def s_UnaryAddOrSubtractWhereExpression(self):

        localctx = s_cypherParser.S_UnaryAddOrSubtractWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_s_UnaryAddOrSubtractWhereExpression)
        self._la = 0 # Token type
        try:
            self.state = 1043
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 7, 10, 26, 48, 57, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1037
                self.s_ListOperatorWhereExpression()
                pass
            elif token in [13, 14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1038
                _la = self._input.LA(1)
                if not(_la==13 or _la==14):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1040
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1039
                    self.match(s_cypherParser.SP)


                self.state = 1042
                self.s_ListOperatorWhereExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_ListOperatorWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_PropertyOrLabelsWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyOrLabelsWhereExpressionContext,0)


        def s_AtTWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_AtTWhereExpressionContext,0)


        def s_SingleIndexWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_SingleIndexWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_SingleIndexWhereExpressionContext,i)


        def s_DoubleIndexWhereExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_DoubleIndexWhereExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_DoubleIndexWhereExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_ListOperatorWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_ListOperatorWhereExpression" ):
                listener.enterS_ListOperatorWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_ListOperatorWhereExpression" ):
                listener.exitS_ListOperatorWhereExpression(self)




    def s_ListOperatorWhereExpression(self):

        localctx = s_cypherParser.S_ListOperatorWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_s_ListOperatorWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 1045
                self.s_PropertyOrLabelsWhereExpression()
                pass

            elif la_ == 2:
                self.state = 1046
                self.s_AtTWhereExpression()
                pass


            self.state = 1053
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1051
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                    if la_ == 1:
                        self.state = 1049
                        self.s_SingleIndexWhereExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1050
                        self.s_DoubleIndexWhereExpression()
                        pass

             
                self.state = 1055
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_PropertyOrLabelsWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_PropertyOrLabelsWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_PropertyOrLabelsWhereExpression" ):
                listener.enterS_PropertyOrLabelsWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_PropertyOrLabelsWhereExpression" ):
                listener.exitS_PropertyOrLabelsWhereExpression(self)




    def s_PropertyOrLabelsWhereExpression(self):

        localctx = s_cypherParser.S_PropertyOrLabelsWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_s_PropertyOrLabelsWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.oC_Atom()
            self.state = 1063
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,158,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1058
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1057
                        self.match(s_cypherParser.SP)


                    self.state = 1060
                    self.oC_PropertyLookup() 
                self.state = 1065
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,158,self._ctx)

            self.state = 1070
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 1067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1066
                    self.match(s_cypherParser.SP)


                self.state = 1069
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_AtTWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def s_PropertyLookupTime(self):
            return self.getTypedRuleContext(s_cypherParser.S_PropertyLookupTimeContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def PoundValue(self):
            return self.getToken(s_cypherParser.PoundValue, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_AtTWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_AtTWhereExpression" ):
                listener.enterS_AtTWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_AtTWhereExpression" ):
                listener.exitS_AtTWhereExpression(self)




    def s_AtTWhereExpression(self):

        localctx = s_cypherParser.S_AtTWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_s_AtTWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self.oC_Atom()
            self.state = 1087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.state = 1077 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1074
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1073
                            self.match(s_cypherParser.SP)


                        self.state = 1076
                        self.oC_PropertyLookup()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1079 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

                self.state = 1085
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                if la_ == 1:
                    self.state = 1082
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1081
                        self.match(s_cypherParser.SP)


                    self.state = 1084
                    self.match(s_cypherParser.PoundValue)




            self.state = 1090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1089
                self.match(s_cypherParser.SP)


            self.state = 1092
            self.s_PropertyLookupTime()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_SingleIndexWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_LeftWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftWhereExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_SingleIndexWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_SingleIndexWhereExpression" ):
                listener.enterS_SingleIndexWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_SingleIndexWhereExpression" ):
                listener.exitS_SingleIndexWhereExpression(self)




    def s_SingleIndexWhereExpression(self):

        localctx = s_cypherParser.S_SingleIndexWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_s_SingleIndexWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1094
                self.match(s_cypherParser.SP)


            self.state = 1097
            self.match(s_cypherParser.T__9)
            self.state = 1098
            self.s_LeftWhereExpression()
            self.state = 1099
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_DoubleIndexWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def s_LeftWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_LeftWhereExpressionContext,0)


        def s_RightWhereExpression(self):
            return self.getTypedRuleContext(s_cypherParser.S_RightWhereExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_DoubleIndexWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_DoubleIndexWhereExpression" ):
                listener.enterS_DoubleIndexWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_DoubleIndexWhereExpression" ):
                listener.exitS_DoubleIndexWhereExpression(self)




    def s_DoubleIndexWhereExpression(self):

        localctx = s_cypherParser.S_DoubleIndexWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_s_DoubleIndexWhereExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1101
                self.match(s_cypherParser.SP)


            self.state = 1104
            self.match(s_cypherParser.T__9)
            self.state = 1106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119701152) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1105
                self.s_LeftWhereExpression()


            self.state = 1108
            self.match(s_cypherParser.T__11)
            self.state = 1110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119701152) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 1109
                self.s_RightWhereExpression()


            self.state = 1112
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_LeftWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_LeftWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_LeftWhereExpression" ):
                listener.enterS_LeftWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_LeftWhereExpression" ):
                listener.exitS_LeftWhereExpression(self)




    def s_LeftWhereExpression(self):

        localctx = s_cypherParser.S_LeftWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_s_LeftWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1114
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_RightWhereExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_RightWhereExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_RightWhereExpression" ):
                listener.enterS_RightWhereExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_RightWhereExpression" ):
                listener.exitS_RightWhereExpression(self)




    def s_RightWhereExpression(self):

        localctx = s_cypherParser.S_RightWhereExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_s_RightWhereExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_TimePointLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_TimePointLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_TimePointLiteral" ):
                listener.enterS_TimePointLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_TimePointLiteral" ):
                listener.exitS_TimePointLiteral(self)




    def s_TimePointLiteral(self):

        localctx = s_cypherParser.S_TimePointLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_s_TimePointLiteral)
        try:
            self.state = 1120
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1118
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1119
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(s_cypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(s_cypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(s_cypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(s_cypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(s_cypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = s_cypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            _la = self._input.LA(1)
            if not(_la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(s_cypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(s_cypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(s_cypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(s_cypherParser.AND, 0)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def OR(self):
            return self.getToken(s_cypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(s_cypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(s_cypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(s_cypherParser.DO, 0)

        def FOR(self):
            return self.getToken(s_cypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(s_cypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(s_cypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(s_cypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(s_cypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(s_cypherParser.OF, 0)

        def ADD(self):
            return self.getToken(s_cypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(s_cypherParser.DROP, 0)

        def NOW(self):
            return self.getToken(s_cypherParser.NOW, 0)

        def AT_TIME(self):
            return self.getToken(s_cypherParser.AT_TIME, 0)

        def SNAPSHOT(self):
            return self.getToken(s_cypherParser.SNAPSHOT, 0)

        def BETWEEN(self):
            return self.getToken(s_cypherParser.BETWEEN, 0)

        def SCOPE(self):
            return self.getToken(s_cypherParser.SCOPE, 0)

        def STALE(self):
            return self.getToken(s_cypherParser.STALE, 0)

        def DURING(self):
            return self.getToken(s_cypherParser.DURING, 0)

        def OVERLAPS(self):
            return self.getToken(s_cypherParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = s_cypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1124
            _la = self._input.LA(1)
            if not(((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 128317405001678847) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(s_cypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = s_cypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1126
                self.match(s_cypherParser.SP)


            self.state = 1129
            self.oC_Statement()
            self.state = 1134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1131
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1130
                    self.match(s_cypherParser.SP)


                self.state = 1133
                self.match(s_cypherParser.T__14)


            self.state = 1137
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1136
                self.match(s_cypherParser.SP)


            self.state = 1139
            self.match(s_cypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = s_cypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = s_cypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            self.oC_SingleQuery()
            self.state = 1150
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,177,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1145
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1144
                        self.match(s_cypherParser.SP)


                    self.state = 1147
                    self.oC_Union() 
                self.state = 1152
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,177,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(s_cypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = s_cypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 1165
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1153
                self.match(s_cypherParser.UNION)
                self.state = 1154
                self.match(s_cypherParser.SP)
                self.state = 1155
                self.match(s_cypherParser.ALL)
                self.state = 1157
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1156
                    self.match(s_cypherParser.SP)


                self.state = 1159
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1160
                self.match(s_cypherParser.UNION)
                self.state = 1162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1161
                    self.match(s_cypherParser.SP)


                self.state = 1164
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = s_cypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_oC_SingleQuery)
        try:
            self.state = 1169
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1167
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1168
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = s_cypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 1206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 1171
                    self.oC_ReadingClause()
                    self.state = 1173
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1172
                        self.match(s_cypherParser.SP)


                    self.state = 1179
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1180
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1187
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                    self.state = 1181
                    self.oC_ReadingClause()
                    self.state = 1183
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1182
                        self.match(s_cypherParser.SP)


                    self.state = 1189
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1190
                self.oC_UpdatingClause()
                self.state = 1197
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1192
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1191
                            self.match(s_cypherParser.SP)


                        self.state = 1194
                        self.oC_UpdatingClause() 
                    self.state = 1199
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

                self.state = 1204
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
                if la_ == 1:
                    self.state = 1201
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1200
                        self.match(s_cypherParser.SP)


                    self.state = 1203
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SinglePartQueryContext,0)


        def s_WithPartQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_WithPartQueryContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_WithPartQueryContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = s_cypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_oC_MultiPartQuery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1209 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1208
                    self.s_WithPartQuery()

                else:
                    raise NoViableAltException(self)
                self.state = 1211 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,191,self._ctx)

            self.state = 1213
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_WithPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_With(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WithContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_s_WithPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_WithPartQuery" ):
                listener.enterS_WithPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_WithPartQuery" ):
                listener.exitS_WithPartQuery(self)




    def s_WithPartQuery(self):

        localctx = s_cypherParser.S_WithPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_s_WithPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 2055) != 0):
                self.state = 1215
                self.oC_ReadingClause()
                self.state = 1217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1216
                    self.match(s_cypherParser.SP)


                self.state = 1223
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 64001) != 0):
                self.state = 1224
                self.oC_UpdatingClause()
                self.state = 1226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1225
                    self.match(s_cypherParser.SP)


                self.state = 1232
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1233
            self.oC_With()
            self.state = 1235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1234
                self.match(s_cypherParser.SP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(s_cypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(s_cypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = s_cypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_oC_ReadingClause)
        try:
            self.state = 1240
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1237
                self.oC_Match()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1238
                self.oC_Unwind()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1239
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(s_cypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = s_cypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1242
            self.match(s_cypherParser.UNWIND)
            self.state = 1244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1243
                self.match(s_cypherParser.SP)


            self.state = 1246
            self.oC_Expression()
            self.state = 1247
            self.match(s_cypherParser.SP)
            self.state = 1248
            self.match(s_cypherParser.AS)
            self.state = 1249
            self.match(s_cypherParser.SP)
            self.state = 1250
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(s_cypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = s_cypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            self.match(s_cypherParser.MERGE)
            self.state = 1254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1253
                self.match(s_cypherParser.SP)


            self.state = 1256
            self.oC_PatternPart()
            self.state = 1261
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,200,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1257
                    self.match(s_cypherParser.SP)
                    self.state = 1258
                    self.oC_MergeAction() 
                self.state = 1263
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,200,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(s_cypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def MATCH(self):
            return self.getToken(s_cypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = s_cypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_MergeAction)
        try:
            self.state = 1274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1264
                self.match(s_cypherParser.ON)
                self.state = 1265
                self.match(s_cypherParser.SP)
                self.state = 1266
                self.match(s_cypherParser.MATCH)
                self.state = 1267
                self.match(s_cypherParser.SP)
                self.state = 1268
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1269
                self.match(s_cypherParser.ON)
                self.state = 1270
                self.match(s_cypherParser.SP)
                self.state = 1271
                self.match(s_cypherParser.CREATE)
                self.state = 1272
                self.match(s_cypherParser.SP)
                self.state = 1273
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(s_cypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = s_cypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1276
            self.match(s_cypherParser.CREATE)
            self.state = 1278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1277
                self.match(s_cypherParser.SP)


            self.state = 1280
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(s_cypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = s_cypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1282
            self.match(s_cypherParser.SET)
            self.state = 1284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1283
                self.match(s_cypherParser.SP)


            self.state = 1286
            self.oC_SetItem()
            self.state = 1297
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,206,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1288
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1287
                        self.match(s_cypherParser.SP)


                    self.state = 1290
                    self.match(s_cypherParser.T__3)
                    self.state = 1292
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1291
                        self.match(s_cypherParser.SP)


                    self.state = 1294
                    self.oC_SetItem() 
                self.state = 1299
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(s_cypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = s_cypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1300
            self.match(s_cypherParser.REMOVE)
            self.state = 1301
            self.match(s_cypherParser.SP)
            self.state = 1302
            self.oC_RemoveItem()
            self.state = 1313
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,209,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1304
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1303
                        self.match(s_cypherParser.SP)


                    self.state = 1306
                    self.match(s_cypherParser.T__3)
                    self.state = 1308
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1307
                        self.match(s_cypherParser.SP)


                    self.state = 1310
                    self.oC_RemoveItem() 
                self.state = 1315
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,209,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = s_cypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_RemoveItem)
        try:
            self.state = 1320
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1316
                self.oC_Variable()
                self.state = 1317
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1319
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = s_cypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1322
            self.match(s_cypherParser.CALL)
            self.state = 1323
            self.match(s_cypherParser.SP)
            self.state = 1324
            self.oC_ExplicitProcedureInvocation()
            self.state = 1331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.state = 1326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1325
                    self.match(s_cypherParser.SP)


                self.state = 1328
                self.match(s_cypherParser.YIELD)
                self.state = 1329
                self.match(s_cypherParser.SP)
                self.state = 1330
                self.oC_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(s_cypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(s_cypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = s_cypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_StandaloneCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1333
            self.match(s_cypherParser.CALL)
            self.state = 1334
            self.match(s_cypherParser.SP)
            self.state = 1337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.state = 1335
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 1336
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 1348
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.state = 1340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1339
                    self.match(s_cypherParser.SP)


                self.state = 1342
                self.match(s_cypherParser.YIELD)
                self.state = 1343
                self.match(s_cypherParser.SP)
                self.state = 1346
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [16]:
                    self.state = 1344
                    self.match(s_cypherParser.T__15)
                    pass
                elif token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                    self.state = 1345
                    self.oC_YieldItems()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = s_cypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1350
            self.oC_YieldItem()
            self.state = 1361
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,219,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1352
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1351
                        self.match(s_cypherParser.SP)


                    self.state = 1354
                    self.match(s_cypherParser.T__3)
                    self.state = 1356
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1355
                        self.match(s_cypherParser.SP)


                    self.state = 1358
                    self.oC_YieldItem() 
                self.state = 1363
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,219,self._ctx)

            self.state = 1368
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.state = 1365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1364
                    self.match(s_cypherParser.SP)


                self.state = 1367
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = s_cypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1370
            self.oC_ProcedureResultField()
            self.state = 1375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.state = 1371
                self.match(s_cypherParser.SP)
                self.state = 1372
                self.match(s_cypherParser.AS)
                self.state = 1373
                self.match(s_cypherParser.SP)
                self.state = 1374
                self.oC_Variable()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = s_cypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1377
            self.match(s_cypherParser.WITH)
            self.state = 1378
            self.oC_ProjectionBody()
            self.state = 1383
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.state = 1380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1379
                    self.match(s_cypherParser.SP)


                self.state = 1382
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(s_cypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = s_cypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1385
            self.match(s_cypherParser.RETURN)
            self.state = 1386
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)




    def oC_ProjectionBody(self):

        localctx = s_cypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1392
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.state = 1389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1388
                    self.match(s_cypherParser.SP)


                self.state = 1391
                self.match(s_cypherParser.DISTINCT)


            self.state = 1394
            self.match(s_cypherParser.SP)
            self.state = 1395
            self.oC_ProjectionItems()
            self.state = 1398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
            if la_ == 1:
                self.state = 1396
                self.match(s_cypherParser.SP)
                self.state = 1397
                self.oC_Order()


            self.state = 1402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.state = 1400
                self.match(s_cypherParser.SP)
                self.state = 1401
                self.oC_Skip()


            self.state = 1406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.state = 1404
                self.match(s_cypherParser.SP)
                self.state = 1405
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)




    def oC_ProjectionItems(self):

        localctx = s_cypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 1436
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1408
                self.match(s_cypherParser.T__15)
                self.state = 1419
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,232,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1410
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1409
                            self.match(s_cypherParser.SP)


                        self.state = 1412
                        self.match(s_cypherParser.T__3)
                        self.state = 1414
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1413
                            self.match(s_cypherParser.SP)


                        self.state = 1416
                        self.oC_ProjectionItem() 
                    self.state = 1421
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

                pass
            elif token in [5, 7, 10, 13, 14, 26, 48, 57, 86, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1422
                self.oC_ProjectionItem()
                self.state = 1433
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,235,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1424
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1423
                            self.match(s_cypherParser.SP)


                        self.state = 1426
                        self.match(s_cypherParser.T__3)
                        self.state = 1428
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1427
                            self.match(s_cypherParser.SP)


                        self.state = 1430
                        self.oC_ProjectionItem() 
                    self.state = 1435
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,235,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AS(self):
            return self.getToken(s_cypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)




    def oC_ProjectionItem(self):

        localctx = s_cypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_ProjectionItem)
        try:
            self.state = 1445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1438
                self.oC_Expression()
                self.state = 1439
                self.match(s_cypherParser.SP)
                self.state = 1440
                self.match(s_cypherParser.AS)
                self.state = 1441
                self.match(s_cypherParser.SP)
                self.state = 1442
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1444
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(s_cypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def BY(self):
            return self.getToken(s_cypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = s_cypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1447
            self.match(s_cypherParser.ORDER)
            self.state = 1448
            self.match(s_cypherParser.SP)
            self.state = 1449
            self.match(s_cypherParser.BY)
            self.state = 1450
            self.match(s_cypherParser.SP)
            self.state = 1451
            self.oC_SortItem()
            self.state = 1459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 1452
                self.match(s_cypherParser.T__3)
                self.state = 1454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1453
                    self.match(s_cypherParser.SP)


                self.state = 1456
                self.oC_SortItem()
                self.state = 1461
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(s_cypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = s_cypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1462
            self.match(s_cypherParser.L_SKIP)
            self.state = 1463
            self.match(s_cypherParser.SP)
            self.state = 1464
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(s_cypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = s_cypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1466
            self.match(s_cypherParser.LIMIT)
            self.state = 1467
            self.match(s_cypherParser.SP)
            self.state = 1468
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(s_cypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(s_cypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(s_cypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(s_cypherParser.DESC, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = s_cypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1470
            self.oC_Expression()
            self.state = 1475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.state = 1472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1471
                    self.match(s_cypherParser.SP)


                self.state = 1474
                _la = self._input.LA(1)
                if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(s_cypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = s_cypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1477
            self.match(s_cypherParser.WHERE)
            self.state = 1478
            self.match(s_cypherParser.SP)
            self.state = 1479
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = s_cypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1481
            self.oC_PatternPart()
            self.state = 1492
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,244,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1483
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1482
                        self.match(s_cypherParser.SP)


                    self.state = 1485
                    self.match(s_cypherParser.T__3)
                    self.state = 1487
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1486
                        self.match(s_cypherParser.SP)


                    self.state = 1489
                    self.oC_PatternPart() 
                self.state = 1494
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,244,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = s_cypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1495
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = s_cypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 1511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1497
                self.oC_NodePattern()
                self.state = 1504
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,246,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1499
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1498
                            self.match(s_cypherParser.SP)


                        self.state = 1501
                        self.oC_PatternElementChain() 
                    self.state = 1506
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,246,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1507
                self.match(s_cypherParser.T__4)
                self.state = 1508
                self.oC_PatternElement()
                self.state = 1509
                self.match(s_cypherParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = s_cypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1513
            self.oC_NodePattern()
            self.state = 1518 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1515
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1514
                        self.match(s_cypherParser.SP)


                    self.state = 1517
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 1520 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,249,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = s_cypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1522
            self.oC_RelationshipPattern()
            self.state = 1524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1523
                self.match(s_cypherParser.SP)


            self.state = 1526
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = s_cypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 1592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1528
                self.oC_LeftArrowHead()
                self.state = 1530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1529
                    self.match(s_cypherParser.SP)


                self.state = 1532
                self.oC_Dash()
                self.state = 1534
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
                if la_ == 1:
                    self.state = 1533
                    self.match(s_cypherParser.SP)


                self.state = 1537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1536
                    self.oC_RelationshipDetail()


                self.state = 1540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1539
                    self.match(s_cypherParser.SP)


                self.state = 1542
                self.oC_Dash()
                self.state = 1544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1543
                    self.match(s_cypherParser.SP)


                self.state = 1546
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1548
                self.oC_LeftArrowHead()
                self.state = 1550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1549
                    self.match(s_cypherParser.SP)


                self.state = 1552
                self.oC_Dash()
                self.state = 1554
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
                if la_ == 1:
                    self.state = 1553
                    self.match(s_cypherParser.SP)


                self.state = 1557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1556
                    self.oC_RelationshipDetail()


                self.state = 1560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1559
                    self.match(s_cypherParser.SP)


                self.state = 1562
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1564
                self.oC_Dash()
                self.state = 1566
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
                if la_ == 1:
                    self.state = 1565
                    self.match(s_cypherParser.SP)


                self.state = 1569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1568
                    self.oC_RelationshipDetail()


                self.state = 1572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1571
                    self.match(s_cypherParser.SP)


                self.state = 1574
                self.oC_Dash()
                self.state = 1576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1575
                    self.match(s_cypherParser.SP)


                self.state = 1578
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1580
                self.oC_Dash()
                self.state = 1582
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                if la_ == 1:
                    self.state = 1581
                    self.match(s_cypherParser.SP)


                self.state = 1585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 1584
                    self.oC_RelationshipDetail()


                self.state = 1588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1587
                    self.match(s_cypherParser.SP)


                self.state = 1590
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = s_cypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_Properties)
        try:
            self.state = 1596
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1594
                self.oC_MapLiteral()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1595
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = s_cypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1598
            self.match(s_cypherParser.T__7)
            self.state = 1600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1599
                self.match(s_cypherParser.SP)


            self.state = 1602
            self.oC_RelTypeName()
            self.state = 1616
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,273,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1604
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1603
                        self.match(s_cypherParser.SP)


                    self.state = 1606
                    self.match(s_cypherParser.T__16)
                    self.state = 1608
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==8:
                        self.state = 1607
                        self.match(s_cypherParser.T__7)


                    self.state = 1611
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1610
                        self.match(s_cypherParser.SP)


                    self.state = 1613
                    self.oC_RelTypeName() 
                self.state = 1618
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,273,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = s_cypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1619
            self.oC_NodeLabel()
            self.state = 1626
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,275,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1621
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1620
                        self.match(s_cypherParser.SP)


                    self.state = 1623
                    self.oC_NodeLabel() 
                self.state = 1628
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,275,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = s_cypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1629
            self.match(s_cypherParser.T__7)
            self.state = 1631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1630
                self.match(s_cypherParser.SP)


            self.state = 1633
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = s_cypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1635
            self.match(s_cypherParser.T__15)
            self.state = 1637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1636
                self.match(s_cypherParser.SP)


            self.state = 1643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                self.state = 1639
                self.oC_IntegerLiteral()
                self.state = 1641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1640
                    self.match(s_cypherParser.SP)




            self.state = 1655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 1645
                self.match(s_cypherParser.T__11)
                self.state = 1647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1646
                    self.match(s_cypherParser.SP)


                self.state = 1653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0):
                    self.state = 1649
                    self.oC_IntegerLiteral()
                    self.state = 1651
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1650
                        self.match(s_cypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = s_cypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1657
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = s_cypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1659
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = s_cypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1661
            self.oC_Atom()
            self.state = 1666 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1662
                        self.match(s_cypherParser.SP)


                    self.state = 1665
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 1668 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,285,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = s_cypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1670
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.OR)
            else:
                return self.getToken(s_cypherParser.OR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = s_cypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1672
            self.oC_XorExpression()
            self.state = 1679
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,286,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1673
                    self.match(s_cypherParser.SP)
                    self.state = 1674
                    self.match(s_cypherParser.OR)
                    self.state = 1675
                    self.match(s_cypherParser.SP)
                    self.state = 1676
                    self.oC_XorExpression() 
                self.state = 1681
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,286,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.XOR)
            else:
                return self.getToken(s_cypherParser.XOR, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = s_cypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1682
            self.oC_AndExpression()
            self.state = 1689
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,287,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1683
                    self.match(s_cypherParser.SP)
                    self.state = 1684
                    self.match(s_cypherParser.XOR)
                    self.state = 1685
                    self.match(s_cypherParser.SP)
                    self.state = 1686
                    self.oC_AndExpression() 
                self.state = 1691
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,287,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.AND)
            else:
                return self.getToken(s_cypherParser.AND, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = s_cypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1692
            self.oC_NotExpression()
            self.state = 1699
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,288,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1693
                    self.match(s_cypherParser.SP)
                    self.state = 1694
                    self.match(s_cypherParser.AND)
                    self.state = 1695
                    self.match(s_cypherParser.SP)
                    self.state = 1696
                    self.oC_NotExpression() 
                self.state = 1701
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,288,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.NOT)
            else:
                return self.getToken(s_cypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = s_cypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1702
                self.match(s_cypherParser.NOT)
                self.state = 1704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1703
                    self.match(s_cypherParser.SP)


                self.state = 1710
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1711
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def oC_PartialComparisonExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PartialComparisonExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PartialComparisonExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = s_cypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1713
            self.oC_StringListNullPredicateExpression()
            self.state = 1720
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,292,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1715
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1714
                        self.match(s_cypherParser.SP)


                    self.state = 1717
                    self.oC_PartialComparisonExpression() 
                self.state = 1722
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,292,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PartialComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def s_operator(self):
            return self.getTypedRuleContext(s_cypherParser.S_operatorContext,0)


        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_StringListNullPredicateExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PartialComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PartialComparisonExpression" ):
                listener.enterOC_PartialComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PartialComparisonExpression" ):
                listener.exitOC_PartialComparisonExpression(self)




    def oC_PartialComparisonExpression(self):

        localctx = s_cypherParser.OC_PartialComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_oC_PartialComparisonExpression)
        self._la = 0 # Token type
        try:
            self.state = 1759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1723
                self.s_operator()
                self.state = 1725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1724
                    self.match(s_cypherParser.SP)


                self.state = 1727
                self.oC_StringListNullPredicateExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1729
                self.s_operator()
                self.state = 1731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1730
                    self.match(s_cypherParser.SP)


                self.state = 1733
                self.oC_StringListNullPredicateExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1735
                self.s_operator()
                self.state = 1737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1736
                    self.match(s_cypherParser.SP)


                self.state = 1739
                self.oC_StringListNullPredicateExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1741
                self.s_operator()
                self.state = 1743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1742
                    self.match(s_cypherParser.SP)


                self.state = 1745
                self.oC_StringListNullPredicateExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1747
                self.s_operator()
                self.state = 1749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1748
                    self.match(s_cypherParser.SP)


                self.state = 1751
                self.oC_StringListNullPredicateExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1753
                self.s_operator()
                self.state = 1755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1754
                    self.match(s_cypherParser.SP)


                self.state = 1757
                self.oC_StringListNullPredicateExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def STARTS(self):
            return self.getToken(s_cypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(s_cypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(s_cypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(s_cypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_StringPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringPredicateExpression" ):
                listener.enterOC_StringPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringPredicateExpression" ):
                listener.exitOC_StringPredicateExpression(self)




    def oC_StringPredicateExpression(self):

        localctx = s_cypherParser.OC_StringPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_oC_StringPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1771
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
            if la_ == 1:
                self.state = 1761
                self.match(s_cypherParser.SP)
                self.state = 1762
                self.match(s_cypherParser.STARTS)
                self.state = 1763
                self.match(s_cypherParser.SP)
                self.state = 1764
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1765
                self.match(s_cypherParser.SP)
                self.state = 1766
                self.match(s_cypherParser.ENDS)
                self.state = 1767
                self.match(s_cypherParser.SP)
                self.state = 1768
                self.match(s_cypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1769
                self.match(s_cypherParser.SP)
                self.state = 1770
                self.match(s_cypherParser.CONTAINS)
                pass


            self.state = 1774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1773
                self.match(s_cypherParser.SP)


            self.state = 1776
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AddOrSubtractExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListPredicateExpression" ):
                listener.enterOC_ListPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListPredicateExpression" ):
                listener.exitOC_ListPredicateExpression(self)




    def oC_ListPredicateExpression(self):

        localctx = s_cypherParser.OC_ListPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_oC_ListPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1778
            self.match(s_cypherParser.SP)
            self.state = 1779
            self.match(s_cypherParser.IN)
            self.state = 1781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1780
                self.match(s_cypherParser.SP)


            self.state = 1783
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IS(self):
            return self.getToken(s_cypherParser.IS, 0)

        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(s_cypherParser.NOT, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullPredicateExpression" ):
                listener.enterOC_NullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullPredicateExpression" ):
                listener.exitOC_NullPredicateExpression(self)




    def oC_NullPredicateExpression(self):

        localctx = s_cypherParser.OC_NullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_oC_NullPredicateExpression)
        try:
            self.state = 1795
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1785
                self.match(s_cypherParser.SP)
                self.state = 1786
                self.match(s_cypherParser.IS)
                self.state = 1787
                self.match(s_cypherParser.SP)
                self.state = 1788
                self.match(s_cypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1789
                self.match(s_cypherParser.SP)
                self.state = 1790
                self.match(s_cypherParser.IS)
                self.state = 1791
                self.match(s_cypherParser.SP)
                self.state = 1792
                self.match(s_cypherParser.NOT)
                self.state = 1793
                self.match(s_cypherParser.SP)
                self.state = 1794
                self.match(s_cypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def s_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_operatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_operatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1797
            self.oC_MultiplyDivideModuloExpression()
            self.state = 1818
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,309,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1816
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
                    if la_ == 1:
                        self.state = 1799
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1798
                            self.match(s_cypherParser.SP)


                        self.state = 1801
                        self.s_operator()
                        self.state = 1803
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1802
                            self.match(s_cypherParser.SP)


                        self.state = 1805
                        self.oC_MultiplyDivideModuloExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1808
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1807
                            self.match(s_cypherParser.SP)


                        self.state = 1810
                        self.s_operator()
                        self.state = 1812
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1811
                            self.match(s_cypherParser.SP)


                        self.state = 1814
                        self.oC_MultiplyDivideModuloExpression()
                        pass

             
                self.state = 1820
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,309,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class S_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_s_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterS_operator" ):
                listener.enterS_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitS_operator" ):
                listener.exitS_operator(self)




    def s_operator(self):

        localctx = s_cypherParser.S_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_s_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1821
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 66936836) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PowerOfExpressionContext,i)


        def s_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_operatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_operatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = s_cypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1823
            self.oC_PowerOfExpression()
            self.state = 1853
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,317,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1851
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
                    if la_ == 1:
                        self.state = 1825
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1824
                            self.match(s_cypherParser.SP)


                        self.state = 1827
                        self.s_operator()
                        self.state = 1829
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1828
                            self.match(s_cypherParser.SP)


                        self.state = 1831
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1834
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1833
                            self.match(s_cypherParser.SP)


                        self.state = 1836
                        self.s_operator()
                        self.state = 1838
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1837
                            self.match(s_cypherParser.SP)


                        self.state = 1840
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1843
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1842
                            self.match(s_cypherParser.SP)


                        self.state = 1845
                        self.s_operator()
                        self.state = 1847
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1846
                            self.match(s_cypherParser.SP)


                        self.state = 1849
                        self.oC_PowerOfExpression()
                        pass

             
                self.state = 1855
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,317,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def s_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.S_operatorContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.S_operatorContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = s_cypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1856
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 1868
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,320,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1858
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1857
                        self.match(s_cypherParser.SP)


                    self.state = 1860
                    self.s_operator()
                    self.state = 1862
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1861
                        self.match(s_cypherParser.SP)


                    self.state = 1864
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 1870
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,320,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ListOperatorExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListOperatorExpressionContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = s_cypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.state = 1877
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 7, 10, 26, 48, 57, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 129, 130, 131, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1871
                self.oC_ListOperatorExpression()
                pass
            elif token in [13, 14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1872
                _la = self._input.LA(1)
                if not(_la==13 or _la==14):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1873
                    self.match(s_cypherParser.SP)


                self.state = 1876
                self.oC_ListOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyOrLabelsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(s_cypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyOrLabelsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyOrLabelsExpression" ):
                listener.enterOC_PropertyOrLabelsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyOrLabelsExpression" ):
                listener.exitOC_PropertyOrLabelsExpression(self)




    def oC_PropertyOrLabelsExpression(self):

        localctx = s_cypherParser.OC_PropertyOrLabelsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_oC_PropertyOrLabelsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1879
            self.oC_Atom()
            self.state = 1886
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,324,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1881
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 1880
                        self.match(s_cypherParser.SP)


                    self.state = 1883
                    self.oC_PropertyLookup() 
                self.state = 1888
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,324,self._ctx)

            self.state = 1893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
            if la_ == 1:
                self.state = 1890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1889
                    self.match(s_cypherParser.SP)


                self.state = 1892
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = s_cypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1895
            self.match(s_cypherParser.T__0)
            self.state = 1897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1896
                self.match(s_cypherParser.SP)


            self.state = 1899
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(s_cypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(s_cypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternComprehensionContext,0)


        def oC_Quantifier(self):
            return self.getTypedRuleContext(s_cypherParser.OC_QuantifierContext,0)


        def oC_PatternPredicate(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternPredicateContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionInvocationContext,0)


        def oC_ExistentialSubquery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExistentialSubqueryContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = s_cypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 1925
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1901
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1902
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1903
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1904
                self.match(s_cypherParser.COUNT)
                self.state = 1906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1905
                    self.match(s_cypherParser.SP)


                self.state = 1908
                self.match(s_cypherParser.T__4)
                self.state = 1910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1909
                    self.match(s_cypherParser.SP)


                self.state = 1912
                self.match(s_cypherParser.T__15)
                self.state = 1914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1913
                    self.match(s_cypherParser.SP)


                self.state = 1916
                self.match(s_cypherParser.T__5)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1917
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1918
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1919
                self.oC_Quantifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1920
                self.oC_PatternPredicate()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1921
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1922
                self.oC_FunctionInvocation()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1923
                self.oC_ExistentialSubquery()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1924
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(s_cypherParser.END, 0)

        def ELSE(self):
            return self.getToken(s_cypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def CASE(self):
            return self.getToken(s_cypherParser.CASE, 0)

        def oC_CaseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_CaseAlternativeContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = s_cypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
            if la_ == 1:
                self.state = 1927
                self.match(s_cypherParser.CASE)
                self.state = 1932 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1929
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1928
                            self.match(s_cypherParser.SP)


                        self.state = 1931
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1934 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,333,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1936
                self.match(s_cypherParser.CASE)
                self.state = 1938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1937
                    self.match(s_cypherParser.SP)


                self.state = 1940
                self.oC_Expression()
                self.state = 1945 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1942
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==135:
                            self.state = 1941
                            self.match(s_cypherParser.SP)


                        self.state = 1944
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1947 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,336,self._ctx)

                pass


            self.state = 1959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                self.state = 1952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1951
                    self.match(s_cypherParser.SP)


                self.state = 1954
                self.match(s_cypherParser.ELSE)
                self.state = 1956
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1955
                    self.match(s_cypherParser.SP)


                self.state = 1958
                self.oC_Expression()


            self.state = 1962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1961
                self.match(s_cypherParser.SP)


            self.state = 1964
            self.match(s_cypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(s_cypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(s_cypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_CaseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternative" ):
                listener.enterOC_CaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternative" ):
                listener.exitOC_CaseAlternative(self)




    def oC_CaseAlternative(self):

        localctx = s_cypherParser.OC_CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_oC_CaseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1966
            self.match(s_cypherParser.WHEN)
            self.state = 1968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1967
                self.match(s_cypherParser.SP)


            self.state = 1970
            self.oC_Expression()
            self.state = 1972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1971
                self.match(s_cypherParser.SP)


            self.state = 1974
            self.match(s_cypherParser.THEN)
            self.state = 1976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1975
                self.match(s_cypherParser.SP)


            self.state = 1978
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = s_cypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1980
            self.match(s_cypherParser.T__9)
            self.state = 1982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1981
                self.match(s_cypherParser.SP)


            self.state = 1984
            self.oC_FilterExpression()
            self.state = 1993
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
            if la_ == 1:
                self.state = 1986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1985
                    self.match(s_cypherParser.SP)


                self.state = 1988
                self.match(s_cypherParser.T__16)
                self.state = 1990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 1989
                    self.match(s_cypherParser.SP)


                self.state = 1992
                self.oC_Expression()


            self.state = 1996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1995
                self.match(s_cypherParser.SP)


            self.state = 1998
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = s_cypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2000
            self.match(s_cypherParser.T__9)
            self.state = 2002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2001
                self.match(s_cypherParser.SP)


            self.state = 2012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 2680059625921) != 0):
                self.state = 2004
                self.oC_Variable()
                self.state = 2006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2005
                    self.match(s_cypherParser.SP)


                self.state = 2008
                self.match(s_cypherParser.T__1)
                self.state = 2010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2009
                    self.match(s_cypherParser.SP)




            self.state = 2014
            self.oC_RelationshipsPattern()
            self.state = 2016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2015
                self.match(s_cypherParser.SP)


            self.state = 2022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 2018
                self.oC_Where()
                self.state = 2020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2019
                    self.match(s_cypherParser.SP)




            self.state = 2024
            self.match(s_cypherParser.T__16)
            self.state = 2026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2025
                self.match(s_cypherParser.SP)


            self.state = 2028
            self.oC_Expression()
            self.state = 2030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2029
                self.match(s_cypherParser.SP)


            self.state = 2032
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(s_cypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def ANY(self):
            return self.getToken(s_cypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(s_cypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(s_cypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Quantifier" ):
                listener.enterOC_Quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Quantifier" ):
                listener.exitOC_Quantifier(self)




    def oC_Quantifier(self):

        localctx = s_cypherParser.OC_QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_oC_Quantifier)
        self._la = 0 # Token type
        try:
            self.state = 2090
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2034
                self.match(s_cypherParser.ALL)
                self.state = 2036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2035
                    self.match(s_cypherParser.SP)


                self.state = 2038
                self.match(s_cypherParser.T__4)
                self.state = 2040
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2039
                    self.match(s_cypherParser.SP)


                self.state = 2042
                self.oC_FilterExpression()
                self.state = 2044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2043
                    self.match(s_cypherParser.SP)


                self.state = 2046
                self.match(s_cypherParser.T__5)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2048
                self.match(s_cypherParser.ANY)
                self.state = 2050
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2049
                    self.match(s_cypherParser.SP)


                self.state = 2052
                self.match(s_cypherParser.T__4)
                self.state = 2054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2053
                    self.match(s_cypherParser.SP)


                self.state = 2056
                self.oC_FilterExpression()
                self.state = 2058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2057
                    self.match(s_cypherParser.SP)


                self.state = 2060
                self.match(s_cypherParser.T__5)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2062
                self.match(s_cypherParser.NONE)
                self.state = 2064
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2063
                    self.match(s_cypherParser.SP)


                self.state = 2066
                self.match(s_cypherParser.T__4)
                self.state = 2068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2067
                    self.match(s_cypherParser.SP)


                self.state = 2070
                self.oC_FilterExpression()
                self.state = 2072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2071
                    self.match(s_cypherParser.SP)


                self.state = 2074
                self.match(s_cypherParser.T__5)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2076
                self.match(s_cypherParser.SINGLE)
                self.state = 2078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2077
                    self.match(s_cypherParser.SP)


                self.state = 2080
                self.match(s_cypherParser.T__4)
                self.state = 2082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2081
                    self.match(s_cypherParser.SP)


                self.state = 2084
                self.oC_FilterExpression()
                self.state = 2086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2085
                    self.match(s_cypherParser.SP)


                self.state = 2088
                self.match(s_cypherParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IdInCollContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(s_cypherParser.SP, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = s_cypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2092
            self.oC_IdInColl()
            self.state = 2097
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
            if la_ == 1:
                self.state = 2094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2093
                    self.match(s_cypherParser.SP)


                self.state = 2096
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RelationshipsPatternContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPredicate" ):
                listener.enterOC_PatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPredicate" ):
                listener.exitOC_PatternPredicate(self)




    def oC_PatternPredicate(self):

        localctx = s_cypherParser.OC_PatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_oC_PatternPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2099
            self.oC_RelationshipsPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = s_cypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2101
            self.match(s_cypherParser.T__4)
            self.state = 2103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2102
                self.match(s_cypherParser.SP)


            self.state = 2105
            self.oC_Expression()
            self.state = 2107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2106
                self.match(s_cypherParser.SP)


            self.state = 2109
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(s_cypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def IN(self):
            return self.getToken(s_cypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = s_cypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2111
            self.oC_Variable()
            self.state = 2112
            self.match(s_cypherParser.SP)
            self.state = 2113
            self.match(s_cypherParser.IN)
            self.state = 2114
            self.match(s_cypherParser.SP)
            self.state = 2115
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(s_cypherParser.DISTINCT, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = s_cypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2117
            self.oC_FunctionName()
            self.state = 2119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2118
                self.match(s_cypherParser.SP)


            self.state = 2121
            self.match(s_cypherParser.T__4)
            self.state = 2123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2122
                self.match(s_cypherParser.SP)


            self.state = 2129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 2125
                self.match(s_cypherParser.DISTINCT)
                self.state = 2127
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2126
                    self.match(s_cypherParser.SP)




            self.state = 2148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119701152) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 2131
                self.oC_Expression()
                self.state = 2133
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2132
                    self.match(s_cypherParser.SP)


                self.state = 2145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2135
                    self.match(s_cypherParser.T__3)
                    self.state = 2137
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2136
                        self.match(s_cypherParser.SP)


                    self.state = 2139
                    self.oC_Expression()
                    self.state = 2141
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2140
                        self.match(s_cypherParser.SP)


                    self.state = 2147
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2150
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = s_cypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_oC_FunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2152
            self.oC_Namespace()
            self.state = 2153
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExistentialSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(s_cypherParser.EXISTS, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(s_cypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(s_cypherParser.OC_PatternContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(s_cypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExistentialSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExistentialSubquery" ):
                listener.enterOC_ExistentialSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExistentialSubquery" ):
                listener.exitOC_ExistentialSubquery(self)




    def oC_ExistentialSubquery(self):

        localctx = s_cypherParser.OC_ExistentialSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_oC_ExistentialSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2155
            self.match(s_cypherParser.EXISTS)
            self.state = 2157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2156
                self.match(s_cypherParser.SP)


            self.state = 2159
            self.match(s_cypherParser.T__6)
            self.state = 2161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2160
                self.match(s_cypherParser.SP)


            self.state = 2171
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 71, 72]:
                self.state = 2163
                self.oC_RegularQuery()
                pass
            elif token in [5, 48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 2164
                self.oC_Pattern()
                self.state = 2169
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,388,self._ctx)
                if la_ == 1:
                    self.state = 2166
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2165
                        self.match(s_cypherParser.SP)


                    self.state = 2168
                    self.oC_Where()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 2174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2173
                self.match(s_cypherParser.SP)


            self.state = 2176
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2178
            self.oC_ProcedureName()
            self.state = 2180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2179
                self.match(s_cypherParser.SP)


            self.state = 2182
            self.match(s_cypherParser.T__4)
            self.state = 2184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2183
                self.match(s_cypherParser.SP)


            self.state = 2203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119701152) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 2186
                self.oC_Expression()
                self.state = 2188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2187
                    self.match(s_cypherParser.SP)


                self.state = 2200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2190
                    self.match(s_cypherParser.T__3)
                    self.state = 2192
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2191
                        self.match(s_cypherParser.SP)


                    self.state = 2194
                    self.oC_Expression()
                    self.state = 2196
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2195
                        self.match(s_cypherParser.SP)


                    self.state = 2202
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2205
            self.match(s_cypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = s_cypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2207
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = s_cypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2209
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = s_cypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2211
            self.oC_Namespace()
            self.state = 2212
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = s_cypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2219
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,398,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2214
                    self.oC_SymbolicName()
                    self.state = 2215
                    self.match(s_cypherParser.T__0) 
                self.state = 2221
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,398,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = s_cypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2222
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(s_cypherParser.NULL, 0)

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(s_cypherParser.StringLiteral, 0)

        def oC_ListLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ListLiteralContext,0)


        def oC_MapLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = s_cypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_oC_Literal)
        try:
            self.state = 2230
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103, 104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2224
                self.oC_BooleanLiteral()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2225
                self.match(s_cypherParser.NULL)
                pass
            elif token in [105, 106, 107, 115, 116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2226
                self.oC_NumberLiteral()
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2227
                self.match(s_cypherParser.StringLiteral)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2228
                self.oC_ListLiteral()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2229
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(s_cypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(s_cypherParser.FALSE, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = s_cypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2232
            _la = self._input.LA(1)
            if not(_la==103 or _la==104):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(s_cypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = s_cypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_oC_NumberLiteral)
        try:
            self.state = 2236
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115, 116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2234
                self.oC_DoubleLiteral()
                pass
            elif token in [105, 106, 107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2235
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(s_cypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(s_cypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = s_cypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2238
            _la = self._input.LA(1)
            if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(s_cypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(s_cypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = s_cypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2240
            _la = self._input.LA(1)
            if not(_la==115 or _la==116):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = s_cypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2242
            self.match(s_cypherParser.T__9)
            self.state = 2244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2243
                self.match(s_cypherParser.SP)


            self.state = 2263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 144396663119701152) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 343051394343361) != 0):
                self.state = 2246
                self.oC_Expression()
                self.state = 2248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2247
                    self.match(s_cypherParser.SP)


                self.state = 2260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2250
                    self.match(s_cypherParser.T__3)
                    self.state = 2252
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2251
                        self.match(s_cypherParser.SP)


                    self.state = 2254
                    self.oC_Expression()
                    self.state = 2256
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2255
                        self.match(s_cypherParser.SP)


                    self.state = 2262
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2265
            self.match(s_cypherParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(s_cypherParser.SP)
            else:
                return self.getToken(s_cypherParser.SP, i)

        def oC_PropertyKeyName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_PropertyKeyNameContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_PropertyKeyNameContext,i)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(s_cypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(s_cypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = s_cypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2267
            self.match(s_cypherParser.T__6)
            self.state = 2269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 2268
                self.match(s_cypherParser.SP)


            self.state = 2304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & 1297036692676411391) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 40959) != 0):
                self.state = 2271
                self.oC_PropertyKeyName()
                self.state = 2273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2272
                    self.match(s_cypherParser.SP)


                self.state = 2275
                self.match(s_cypherParser.T__7)
                self.state = 2277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2276
                    self.match(s_cypherParser.SP)


                self.state = 2279
                self.oC_Expression()
                self.state = 2281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 2280
                    self.match(s_cypherParser.SP)


                self.state = 2301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==4:
                    self.state = 2283
                    self.match(s_cypherParser.T__3)
                    self.state = 2285
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2284
                        self.match(s_cypherParser.SP)


                    self.state = 2287
                    self.oC_PropertyKeyName()
                    self.state = 2289
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2288
                        self.match(s_cypherParser.SP)


                    self.state = 2291
                    self.match(s_cypherParser.T__7)
                    self.state = 2293
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2292
                        self.match(s_cypherParser.SP)


                    self.state = 2295
                    self.oC_Expression()
                    self.state = 2297
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==135:
                        self.state = 2296
                        self.match(s_cypherParser.SP)


                    self.state = 2303
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2306
            self.match(s_cypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = s_cypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2308
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(s_cypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = s_cypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2310
            self.match(s_cypherParser.T__25)
            self.state = 2313
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 93, 99, 100, 101, 108, 129, 130, 131, 134]:
                self.state = 2311
                self.oC_SymbolicName()
                pass
            elif token in [106]:
                self.state = 2312
                self.match(s_cypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(s_cypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(s_cypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = s_cypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_oC_SchemaName)
        try:
            self.state = 2317
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,418,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2315
                self.oC_SymbolicName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2316
                self.oC_ReservedWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = s_cypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2319
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2017460224) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = s_cypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2321
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32229031936) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return s_cypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = s_cypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2323
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70334384455680) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





